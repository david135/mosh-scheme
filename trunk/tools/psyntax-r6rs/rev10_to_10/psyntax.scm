;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2819@read-annotated G281b@annotation-stripped G281d@annotation? G281f@annotation-source G2821@annotation-expression G2823@scm->fasl G2825@fasl-save G2827@fasl-load G2829@serialize-library G282b@load-serialized-library G282d@make-record-printer G282f@compile-core G2831@read-library-source-file G2833@make-parameter G289f@file-options-spec) (begin (set! G2819@read-annotated read) (set! G281b@annotation-stripped (lambda (G28a0@x) (G2821@annotation-expression G28a0@x))) (set! G281d@annotation? (lambda (G28a2@x) (source-info G28a2@x))) (set! G281f@annotation-source (lambda (G28a4@x) (source-info G28a4@x))) (set! G2821@annotation-expression (lambda (G28a6@x) (if (pair? G28a6@x) (cons (car G28a6@x) (cdr G28a6@x)) (display '"line:46\n")))) (set! G2823@scm->fasl (lambda (G28a8@filename) (string-append G28a8@filename '".fasl"))) (set! G2825@fasl-save (lambda (G28aa@filename G28ab@obj) (call-with-port (open-file-output-port G28aa@filename) (lambda (G28ae@port) ((symbol-value 'fasl-write!) G28ab@obj G28ae@port))))) (set! G2827@fasl-load (lambda (G28b0@filename) (call-with-port (open-file-input-port G28b0@filename) (symbol-value 'fasl-read!)))) (set! G2829@serialize-library (lambda (G28b2@filename G28b3@obj) (begin (format '#t '"serialize-library ~a\n..." G28b2@filename) ((lambda (G28b6@fasl-file) (begin (if (file-exists? G28b6@fasl-file) (delete-file G28b6@fasl-file) (void)) ((call/cc (lambda (G28ba@G28b8) (lambda () (with-exception-handler (lambda (G28bc@c) ((call/cc (lambda (G28be@G28b9) (G28ba@G28b8 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G28b2@filename) (if (file-exists? G28b6@fasl-file) (delete-file G28b6@fasl-file) (void)) '#f) (G28be@G28b9 (lambda () (raise-continuable G28bc@c)))))))))) (lambda () (begin (G2825@fasl-save G28b6@fasl-file G28b3@obj) (display '"OK\n")))))))))) (G2823@scm->fasl G28b2@filename))))) (set! G282b@load-serialized-library (lambda (G28c0@filename G28c1@obj) ((lambda (G28c4@fasl-file) (if (and (file-exists? G28c4@fasl-file) ((symbol-value 'file-newer?) G28c4@fasl-file G28c0@filename)) ((lambda (G28c6@expanded2core) ((lambda (G28c8@code) ((lambda (G28ca@pivot) ((lambda (G28cc@visit) ((lambda (G28ce@visit-proc) ((lambda () (begin (set-car! G28ca@pivot G28ce@visit-proc) ((lambda (G28d0@pivot) ((lambda (G28d2@invoke) ((lambda () (begin (set-car! G28d0@pivot (lambda () (eval-core G28d2@invoke))) (apply G28c1@obj G28c8@code))))) (G28c6@expanded2core (car G28d0@pivot)))) (cdr G28ca@pivot)) '#t)))) (lambda () (eval-core G28cc@visit)))) (G28c6@expanded2core (car G28ca@pivot)))) (cddddr (cddddr G28c8@code)))) (G2827@fasl-load G28c4@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2823@scm->fasl G28c0@filename)))) (set! G282d@make-record-printer (lambda (G28d4@name G28d5@printer) (lambda G28d8@x (begin (display '"record printer") (for-each display G28d8@x))))) (set! G282f@compile-core (lambda G28da@x (apply error 'comile-core '"not implementated" G28da@x))) (set! G2831@read-library-source-file (lambda (G28dc@file-name) (with-input-from-file G28dc@file-name G2819@read-annotated))) (set! G2833@make-parameter (lambda G28ec ((lambda (G28ed) (if (= G28ed '1) (apply (lambda (G28de@x) (G2833@make-parameter G28de@x (lambda (G28e0@x) G28e0@x))) G28ec) (if (= G28ed '2) (apply (lambda (G28e2@x G28e3@fender) ((lambda (G28e6@x) (lambda G28ea ((lambda (G28eb) (if (= G28eb '0) (apply (lambda () G28e6@x) G28ea) (if (= G28eb '1) (apply (lambda (G28e8@v) (set! G28e6@x (G28e3@fender G28e8@v))) G28ea) (error 'apply '"invalid arg count")))) (length G28ea)))) (G28e3@fender G28e2@x))) G28ec) (error 'apply '"invalid arg count")))) (length G28ec)))) (set! G289f@file-options-spec (lambda (G28ee@x) G28ee@x)) (begin (set! G28fe@G289f@file-options-spec G289f@file-options-spec) (set! G28fd@G2833@make-parameter G2833@make-parameter) (set! G28fc@G2831@read-library-source-file G2831@read-library-source-file) (set! G28fb@G282f@compile-core G282f@compile-core) (set! G28fa@G282d@make-record-printer G282d@make-record-printer) (set! G28f9@G282b@load-serialized-library G282b@load-serialized-library) (set! G28f8@G2829@serialize-library G2829@serialize-library) (set! G28f7@G2827@fasl-load G2827@fasl-load) (set! G28f6@G2825@fasl-save G2825@fasl-save) (set! G28f5@G2823@scm->fasl G2823@scm->fasl) (set! G28f4@G2821@annotation-expression G2821@annotation-expression) (set! G28f3@G281f@annotation-source G281f@annotation-source) (set! G28f2@G281d@annotation? G281d@annotation?) (set! G28f1@G281b@annotation-stripped G281b@annotation-stripped) (set! G28f0@G2819@read-annotated G2819@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2903@current-primitive-locations G2905@mutable? G2907@rewriter G2909@expanded->core G290b@compile-core-expr G290d@pretty-print G290f@compile-core-expr-to-port) (begin (set! G2903@current-primitive-locations (G28fd@G2833@make-parameter (lambda (G2910@x) '#f) (lambda (G2912@p) G2912@p))) (set! G2905@mutable? (lambda (G2914@x) (or (pair? G2914@x) (vector? G2914@x) (hashtable? G2914@x)))) (set! G2907@rewriter (lambda (G2916@quote-hack?) ((lambda (G2919@f) (begin (set! G2919@f (lambda (G291a@x) (if (pair? G291a@x) ((lambda (G291c@t) (if (memv G291c@t '(quote)) (if (and G2916@quote-hack? (G2905@mutable? (cadr G291a@x))) ((lambda (G291e@g) (begin (set-symbol-value! G291e@g (cadr G291a@x)) G291e@g)) (gensym)) G291a@x) (if (memv G291c@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2920@x) (cons (car G2920@x) (map G2919@f (cdr G2920@x)))) (cdr G291a@x))) (if (memv G291c@t '(lambda)) (cons* 'lambda (cadr G291a@x) (map G2919@f (cddr G291a@x))) (if (memv G291c@t '(letrec)) ((lambda (G2922@bindings G2923@body*) ((lambda (G2926@lhs* G2927@rhs*) (cons* 'letrec (map list G2926@lhs* (map G2919@f G2927@rhs*)) (map G2919@f G2923@body*))) (map car G2922@bindings) (map cadr G2922@bindings))) (cadr G291a@x) (cddr G291a@x)) (if (memv G291c@t '(letrec*)) ((lambda (G292a@bindings G292b@body*) ((lambda (G292e@lhs* G292f@rhs*) (cons* 'letrec* (map list G292e@lhs* (map G2919@f G292f@rhs*)) (map G2919@f G292b@body*))) (map car G292a@bindings) (map cadr G292a@bindings))) (cadr G291a@x) (cddr G291a@x)) (if (memv G291c@t '(library-letrec*)) ((lambda (G2932@name G2933@x) ((lambda (G2936@bindings G2937@body*) ((lambda (G293a@lhs* G293b@lhs** G293c@rhs*) (cons* 'library-letrec* G2932@name (map list G293a@lhs* G293b@lhs** (map G2919@f G293c@rhs*)) (map G2919@f G2937@body*))) (map car G2936@bindings) (map cadr G2936@bindings) (map caddr G2936@bindings))) (cadr G2933@x) (cddr G2933@x))) (cadr G291a@x) (cdr G291a@x)) (if (memv G291c@t '(begin)) (cons 'begin (map G2919@f (cdr G291a@x))) (if (memv G291c@t '(set!)) (list 'set! (cadr G291a@x) (G2919@f (caddr G291a@x))) (if (memv G291c@t '(primitive)) ((lambda (G2940@op) ((lambda (G2942@t) (if G2942@t ((lambda (G2944@loc) G2944@loc) G2942@t) G2940@op)) ((G2903@current-primitive-locations) G2940@op))) (cadr G291a@x)) (if (memv G291c@t '(define)) G291a@x (if (list? G291a@x) (map G2919@f G291a@x) (error 'rewrite '"invalid form ~s ~s" G291a@x (list? G291a@x)))))))))))))) (car G291a@x)) G291a@x))) G2919@f)) '#f))) (set! G2909@expanded->core (lambda (G2946@x) ((G2907@rewriter '#t) G2946@x))) (set! G290b@compile-core-expr (lambda (G2948@x) ((G2907@rewriter '#f) G2948@x))) (set! G290d@pretty-print write) (set! G290f@compile-core-expr-to-port (lambda (G294a@x G294b@p) (G290d@pretty-print ((G2907@rewriter '#f) G294a@x) G294b@p))) (begin (set! G2954@G290f@compile-core-expr-to-port G290f@compile-core-expr-to-port) (set! G2953@G290d@pretty-print G290d@pretty-print) (set! G2952@G290b@compile-core-expr G290b@compile-core-expr) (set! G2951@G2909@expanded->core G2909@expanded->core) (set! G2950@G2907@rewriter G2907@rewriter) (set! G294f@G2905@mutable? G2905@mutable?) (set! G294e@G2903@current-primitive-locations G2903@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G29aa@make-collection G29ac@current-library-collection G29b2@G29ad G29b4@G29af G29b6@G29ae G29b9@library? G29bb@make-library G29bd@library-id G29bf@library-name G29c1@library-version G29c3@library-imp* G29c5@library-vis* G29c7@library-inv* G29c9@library-subst G29cb@library-env G29cd@library-visit-state G29cf@library-invoke-state G29d1@library-visit-code G29d3@library-invoke-code G29d5@library-visible? G29d7@library-source-file-name G29d9@set-library-id! G29db@set-library-name! G29dd@set-library-version! G29df@set-library-imp*! G29e1@set-library-vis*! G29e3@set-library-inv*! G29e5@set-library-subst! G29e7@set-library-env! G29e9@set-library-visit-state! G29eb@set-library-invoke-state! G29ed@set-library-visit-code! G29ef@set-library-invoke-code! G29f1@set-library-visible?! G29f3@set-library-source-file-name! G29f5@rp G29f7@find-dependencies G29f9@find-library-by G29fb@library-path G29fd@library-extensions G29ff@library-name->file-name G2a01@file-locator G2a03@serialize-all G2a05@current-precompiled-library-loader G2a07@try-load-from-file G2a09@library-loader G2a0b@current-library-expander G2a0d@external-pending-libraries G2a0f@find-external-library G2a11@find-library-by-name G2a13@library-exists? G2a15@find-library-by-spec/die G2a17@label->binding-table G2a19@install-library-record G2a1b@install-library G2a1d@imported-label->binding G2a1f@invoke-library G2a21@visit-library G2a23@invoke-library-by-spec G2a25@installed-libraries G2a27@library-spec) (begin (set! G29aa@make-collection (lambda () ((lambda (G2a28@set) ((lambda (G2a2b@set-cons) (begin (set! G2a2b@set-cons (lambda (G2a30@x G2a31@ls) (if (memq G2a30@x G2a31@ls) G2a31@ls (cons G2a30@x G2a31@ls)))) (lambda G2a2e ((lambda (G2a2f) (if (= G2a2f '0) (apply (lambda () G2a28@set) G2a2e) (if (= G2a2f '1) (apply (lambda (G2a2c@x) (set! G2a28@set (G2a2b@set-cons G2a2c@x G2a28@set))) G2a2e) (error 'apply '"invalid arg count")))) (length G2a2e))))) '#f)) '()))) (set! G29ac@current-library-collection (G28fd@G2833@make-parameter (G29aa@make-collection) (lambda (G2a34@x) (begin (if (not (procedure? G2a34@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a34@x) (void)) G2a34@x)))) (set! G29b2@G29ad (make-record-type-descriptor 'library '#f 'G29b0 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29b4@G29af '#f) (set! G29b6@G29ae (make-record-constructor-descriptor G29b2@G29ad '#f G29b4@G29af)) (set! G29b9@library? (record-predicate G29b2@G29ad)) (set! G29bb@make-library (record-constructor G29b6@G29ae)) (set! G29bd@library-id (record-accessor G29b2@G29ad '0)) (set! G29bf@library-name (record-accessor G29b2@G29ad '1)) (set! G29c1@library-version (record-accessor G29b2@G29ad '2)) (set! G29c3@library-imp* (record-accessor G29b2@G29ad '3)) (set! G29c5@library-vis* (record-accessor G29b2@G29ad '4)) (set! G29c7@library-inv* (record-accessor G29b2@G29ad '5)) (set! G29c9@library-subst (record-accessor G29b2@G29ad '6)) (set! G29cb@library-env (record-accessor G29b2@G29ad '7)) (set! G29cd@library-visit-state (record-accessor G29b2@G29ad '8)) (set! G29cf@library-invoke-state (record-accessor G29b2@G29ad '9)) (set! G29d1@library-visit-code (record-accessor G29b2@G29ad '10)) (set! G29d3@library-invoke-code (record-accessor G29b2@G29ad '11)) (set! G29d5@library-visible? (record-accessor G29b2@G29ad '12)) (set! G29d7@library-source-file-name (record-accessor G29b2@G29ad '13)) (set! G29d9@set-library-id! (record-mutator G29b2@G29ad '0)) (set! G29db@set-library-name! (record-mutator G29b2@G29ad '1)) (set! G29dd@set-library-version! (record-mutator G29b2@G29ad '2)) (set! G29df@set-library-imp*! (record-mutator G29b2@G29ad '3)) (set! G29e1@set-library-vis*! (record-mutator G29b2@G29ad '4)) (set! G29e3@set-library-inv*! (record-mutator G29b2@G29ad '5)) (set! G29e5@set-library-subst! (record-mutator G29b2@G29ad '6)) (set! G29e7@set-library-env! (record-mutator G29b2@G29ad '7)) (set! G29e9@set-library-visit-state! (record-mutator G29b2@G29ad '8)) (set! G29eb@set-library-invoke-state! (record-mutator G29b2@G29ad '9)) (set! G29ed@set-library-visit-code! (record-mutator G29b2@G29ad '10)) (set! G29ef@set-library-invoke-code! (record-mutator G29b2@G29ad '11)) (set! G29f1@set-library-visible?! (record-mutator G29b2@G29ad '12)) (set! G29f3@set-library-source-file-name! (record-mutator G29b2@G29ad '13)) (set! G29f5@rp (G28fa@G282d@make-record-printer 'library (lambda (G2a36@x G2a37@p G2a38@wr) (begin (if (not (G29b9@library? G2a36@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29c1@library-version G2a36@x)) (G29bf@library-name G2a36@x) (append (G29bf@library-name G2a36@x) (list (G29c1@library-version G2a36@x))))) G2a37@p))))) (set! G29f7@find-dependencies (lambda (G2a3c@ls) (if (null? G2a3c@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29f9@find-library-by (lambda (G2a3e@pred) ((letrec ((G2a40@f (lambda (G2a42@ls) (if (null? G2a42@ls) '#f (if (G2a3e@pred (car G2a42@ls)) (car G2a42@ls) (G2a40@f (cdr G2a42@ls))))))) G2a40@f) ((G29ac@current-library-collection))))) (set! G29fb@library-path (G28fd@G2833@make-parameter '(".") (lambda (G2a44@x) (if (and (list? G2a44@x) (for-all string? G2a44@x)) (map (lambda (G2a46@x) G2a46@x) G2a44@x) (assertion-violation 'library-path '"not a list of strings" G2a44@x))))) (set! G29fd@library-extensions (G28fd@G2833@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a48@x) (if (and (list? G2a48@x) (for-all string? G2a48@x)) (map (lambda (G2a4a@x) G2a4a@x) G2a48@x) (assertion-violation 'library-extensions '"not a list of strings" G2a48@x))))) (set! G29ff@library-name->file-name (lambda (G2a4c@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a50@G2a4e G2a51@G2a4f) ((lambda (G2a54@extract G2a55@p) ((lambda (G2a59@display-hex) (begin (set! G2a59@display-hex (lambda (G2a62@n) (if (<= '0 G2a62@n '9) (display G2a62@n G2a55@p) (display (integer->char (+ (char->integer '#\A) (- G2a62@n '10))) G2a55@p)))) (begin ((letrec ((G2a5a@f (lambda (G2a5c@ls) (if (not (null? G2a5c@ls)) (begin (display '"/" G2a55@p) (for-each (lambda (G2a5e@c) (if (or (char<=? '#\a G2a5e@c '#\z) (char<=? '#\A G2a5e@c '#\Z) (char<=? '#\0 G2a5e@c '#\9) (memv G2a5e@c '(#\- #\. #\_ #\~))) (display G2a5e@c G2a55@p) (begin (display '"%" G2a55@p) ((lambda (G2a60@n) (begin (G2a59@display-hex (quotient G2a60@n '16)) (G2a59@display-hex (remainder G2a60@n '16)))) (char->integer G2a5e@c))))) (string->list (symbol->string (car G2a5c@ls)))) (G2a5a@f (cdr G2a5c@ls))) (void))))) G2a5a@f) G2a4c@x) (G2a54@extract)))) '#f)) G2a51@G2a4f G2a50@G2a4e))))) (set! G2a01@file-locator (G28fd@G2833@make-parameter (lambda (G2a64@x) ((lambda (G2a66@str) ((letrec ((G2a68@f (lambda (G2a6a@ls G2a6b@exts G2a6c@failed-list) (if (null? G2a6a@ls) ((lambda () ((lambda (G2a78@G2a73 G2a7a@G2a75 G2a7c@G2a74 G2a7f@G2a72 G2a81@make-library-resolution-condition G2a83@G2a70 G2a85@G2a71 G2a87@library-resolution-condition? G2a89@condition-library G2a8b@condition-files) (begin (set! G2a78@G2a73 (make-record-type-descriptor '&library-resolution G4c13@G4964@&condition-rtd 'G2a76 '#f '#f '#((immutable library) (immutable files)))) (set! G2a7a@G2a75 '#f) (set! G2a7c@G2a74 (make-record-constructor-descriptor G2a78@G2a73 G4c14@G4966@&condition-rcd G2a7a@G2a75)) (set! G2a7f@G2a72 (record-predicate G2a78@G2a73)) (set! G2a81@make-library-resolution-condition (record-constructor G2a7c@G2a74)) (set! G2a83@G2a70 (record-accessor G2a78@G2a73 '0)) (set! G2a85@G2a71 (record-accessor G2a78@G2a73 '1)) (set! G2a87@library-resolution-condition? (condition-predicate G2a78@G2a73)) (set! G2a89@condition-library (condition-accessor G2a78@G2a73 G2a83@G2a70)) (set! G2a8b@condition-files (condition-accessor G2a78@G2a73 G2a85@G2a71)) (raise (condition (G4c33@G49fc@make-error) (G4c55@G4a56@make-who-condition 'expander) (G4c19@G49b9@make-message-condition '"cannot locate library in library-path") (G2a81@make-library-resolution-condition G2a64@x (reverse G2a6c@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a6b@exts) (G2a68@f (cdr G2a6a@ls) (G29fd@library-extensions) G2a6c@failed-list) ((lambda (G2a8c@name) (if (file-exists? G2a8c@name) G2a8c@name (G2a68@f G2a6a@ls (cdr G2a6b@exts) (cons G2a8c@name G2a6c@failed-list)))) (string-append (car G2a6a@ls) G2a66@str (car G2a6b@exts)))))))) G2a68@f) (G29fb@library-path) (G29fd@library-extensions) '())) (G29ff@library-name->file-name G2a64@x))) (lambda (G2a8e@f) (if (procedure? G2a8e@f) G2a8e@f (assertion-violation 'file-locator '"not a procedure" G2a8e@f))))) (set! G2a03@serialize-all (lambda (G2a90@serialize G2a91@compile) ((lambda (G2a95@library-desc) (begin (set! G2a95@library-desc (lambda (G2a98@x) (list (G29bd@library-id G2a98@x) (G29bf@library-name G2a98@x)))) (for-each (lambda (G2a96@x) (if (G29d7@library-source-file-name G2a96@x) (G2a90@serialize (G29d7@library-source-file-name G2a96@x) (list (G29bd@library-id G2a96@x) (G29bf@library-name G2a96@x) (G29c1@library-version G2a96@x) (map G2a95@library-desc (G29c3@library-imp* G2a96@x)) (map G2a95@library-desc (G29c5@library-vis* G2a96@x)) (map G2a95@library-desc (G29c7@library-inv* G2a96@x)) (G29c9@library-subst G2a96@x) (G29cb@library-env G2a96@x) (G2a91@compile (G29d1@library-visit-code G2a96@x)) (G2a91@compile (G29d3@library-invoke-code G2a96@x)) (G29d5@library-visible? G2a96@x))) (void))) ((G29ac@current-library-collection))))) '#f))) (set! G2a05@current-precompiled-library-loader (G28fd@G2833@make-parameter (lambda (G2a9a@filename G2a9b@sk) '#f))) (set! G2a07@try-load-from-file (lambda (G2a9e@filename) ((G2a05@current-precompiled-library-loader) G2a9e@filename (lambda G2ac4 ((lambda (G2ac5) (if (= G2ac5 '11) (apply (lambda (G2aa0@id G2aa1@name G2aa2@ver G2aa3@imp* G2aa4@vis* G2aa5@inv* G2aa6@exp-subst G2aa7@exp-env G2aa8@visit-proc G2aa9@invoke-proc G2aaa@visible?) ((letrec ((G2ab6@f (lambda (G2ab8@deps) (if (null? G2ab8@deps) (begin (G2a1b@install-library G2aa0@id G2aa1@name G2aa2@ver G2aa3@imp* G2aa4@vis* G2aa5@inv* G2aa6@exp-subst G2aa7@exp-env G2aa8@visit-proc G2aa9@invoke-proc '#f '#f G2aaa@visible? '#f) '#t) ((lambda (G2aba@d) ((lambda (G2abc@label G2abd@dname) ((lambda (G2ac0@l) (if (and (G29b9@library? G2ac0@l) (eq? G2abc@label (G29bd@library-id G2ac0@l))) (G2ab6@f (cdr G2ab8@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2aa1@name G2abd@dname G2a9e@filename G2ac0@l G2abc@label (G29bd@library-id G2ac0@l)) '#f))) (G2a11@find-library-by-name G2abd@dname))) (car G2aba@d) (cadr G2aba@d))) (car G2ab8@deps)))))) G2ab6@f) (append G2aa3@imp* G2aa4@vis* G2aa5@inv*))) G2ac4) (if (>= G2ac5 '0) (apply (lambda G2ac2@others '#f) G2ac4) (error 'apply '"invalid arg count")))) (length G2ac4)))))) (set! G2a09@library-loader (G28fd@G2833@make-parameter (lambda (G2ac6@x) ((lambda (G2ac8@file-name) (if (not G2ac8@file-name) (assertion-violation '#f '"cannot file library" G2ac6@x) (or (G2a07@try-load-from-file G2ac8@file-name) ((G2a0b@current-library-expander) (G28fc@G2831@read-library-source-file G2ac8@file-name) G2ac8@file-name (lambda (G2aca@name) (if (not (fast-equal? G2aca@name G2ac6@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2ace@G2acc G2acf@G2acd) ((lambda (G2ad2@e G2ad3@p) (begin (display '"expected to find library " G2ad3@p) (write G2ac6@x G2ad3@p) (display '" in file " G2ad3@p) (display G2ac8@file-name G2ad3@p) (display '", found " G2ad3@p) (write G2aca@name G2ad3@p) (display '" instead" G2ad3@p) (G2ad2@e))) G2acf@G2acd G2ace@G2acc)))) (void))))))) ((G2a01@file-locator) G2ac6@x))) (lambda (G2ad6@f) (if (procedure? G2ad6@f) G2ad6@f (assertion-violation 'library-locator '"not a procedure" G2ad6@f))))) (set! G2a0b@current-library-expander (G28fd@G2833@make-parameter (lambda (G2ad8@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2ada@f) (if (procedure? G2ada@f) G2ada@f (assertion-violation 'library-expander '"not a procedure" G2ada@f))))) (set! G2a0d@external-pending-libraries (G28fd@G2833@make-parameter '())) (set! G2a0f@find-external-library (lambda (G2adc@name) (begin (if (member G2adc@name (G2a0d@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2adc@name) (void)) ((lambda (G2ae0@G2ade G2ae1@G2adf) ((lambda (G2ae4@swap) (dynamic-wind G2ae4@swap (lambda () (begin ((G2a09@library-loader) G2adc@name) (or (G29f9@find-library-by (lambda (G2ae6@x) (fast-equal? (G29bf@library-name G2ae6@x) G2adc@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2adc@name)))) G2ae4@swap)) (lambda () ((lambda (G2ae8@t) (begin (G2ae0@G2ade G2ae1@G2adf) (set! G2ae1@G2adf G2ae8@t))) (G2ae0@G2ade))))) G2a0d@external-pending-libraries (cons G2adc@name (G2a0d@external-pending-libraries)))))) (set! G2a11@find-library-by-name (lambda (G2aea@name) (or (G29f9@find-library-by (lambda (G2aec@x) (fast-equal? (G29bf@library-name G2aec@x) G2aea@name))) (G2a0f@find-external-library G2aea@name)))) (set! G2a13@library-exists? (lambda (G2aee@name) (and (G29f9@find-library-by (lambda (G2af0@x) (fast-equal? (G29bf@library-name G2af0@x) G2aee@name))) '#t))) (set! G2a15@find-library-by-spec/die (lambda (G2af2@spec) ((lambda (G2af4@id) (or (G29f9@find-library-by (lambda (G2af6@x) (eq? G2af4@id (G29bd@library-id G2af6@x)))) (assertion-violation '#f '"cannot find library with required spec" G2af2@spec))) (car G2af2@spec)))) (set! G2a17@label->binding-table (make-eq-hashtable)) (set! G2a19@install-library-record (lambda (G2af8@lib) (begin ((lambda (G2afa@exp-env) (for-each (lambda (G2afc@x) ((lambda (G2afe@label G2aff@binding) ((lambda (G2b02@binding) (hashtable-set! G2a17@label->binding-table G2afe@label G2b02@binding)) ((lambda (G2b04@t) (if (memv G2b04@t '(global)) (cons 'global (cons G2af8@lib (cdr G2aff@binding))) (if (memv G2b04@t '(global-macro)) (cons 'global-macro (cons G2af8@lib (cdr G2aff@binding))) (if (memv G2b04@t '(global-macro!)) (cons 'global-macro! (cons G2af8@lib (cdr G2aff@binding))) G2aff@binding)))) (car G2aff@binding)))) (car G2afc@x) (cdr G2afc@x))) G2afa@exp-env)) (G29cb@library-env G2af8@lib)) ((G29ac@current-library-collection) G2af8@lib)))) (set! G2a1b@install-library (lambda (G2b06@id G2b07@name G2b08@ver G2b09@imp* G2b0a@vis* G2b0b@inv* G2b0c@exp-subst G2b0d@exp-env G2b0e@visit-proc G2b0f@invoke-proc G2b10@visit-code G2b11@invoke-code G2b12@visible? G2b13@source-file-name) ((lambda (G2b22@imp-lib* G2b23@vis-lib* G2b24@inv-lib*) (begin (if (not (and (symbol? G2b06@id) (list? G2b07@name) (list? G2b08@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2b06@id G2b07@name G2b08@ver) (void)) (if (G2a13@library-exists? G2b07@name) (assertion-violation 'install-library '"library is already installed" G2b07@name) (void)) ((lambda (G2b28@lib) (G2a19@install-library-record G2b28@lib)) (G29bb@make-library G2b06@id G2b07@name G2b08@ver G2b22@imp-lib* G2b23@vis-lib* G2b24@inv-lib* G2b0c@exp-subst G2b0d@exp-env G2b0e@visit-proc G2b0f@invoke-proc G2b10@visit-code G2b11@invoke-code G2b12@visible? G2b13@source-file-name)))) (map G2a15@find-library-by-spec/die G2b09@imp*) (map G2a15@find-library-by-spec/die G2b0a@vis*) (map G2a15@find-library-by-spec/die G2b0b@inv*)))) (set! G2a1d@imported-label->binding (lambda (G2b2a@lab) (hashtable-ref G2a17@label->binding-table G2b2a@lab '#f))) (set! G2a1f@invoke-library (lambda (G2b2c@lib) ((lambda (G2b2e@invoke) (if (procedure? G2b2e@invoke) (begin (G29eb@set-library-invoke-state! G2b2c@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b2c@lib))) (for-each G2a1f@invoke-library (G29c7@library-inv* G2b2c@lib)) (G29eb@set-library-invoke-state! G2b2c@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b2c@lib))) (G2b2e@invoke) (G29eb@set-library-invoke-state! G2b2c@lib '#t)) (void))) (G29cf@library-invoke-state G2b2c@lib)))) (set! G2a21@visit-library (lambda (G2b30@lib) ((lambda (G2b32@visit) (if (procedure? G2b32@visit) (begin (G29e9@set-library-visit-state! G2b30@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b30@lib))) (for-each G2a1f@invoke-library (G29c5@library-vis* G2b30@lib)) (G29e9@set-library-visit-state! G2b30@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b30@lib))) (G2b32@visit) (G29e9@set-library-visit-state! G2b30@lib '#t)) (void))) (G29cd@library-visit-state G2b30@lib)))) (set! G2a23@invoke-library-by-spec (lambda (G2b34@spec) (G2a1f@invoke-library (G2a15@find-library-by-spec/die G2b34@spec)))) (set! G2a25@installed-libraries (lambda G2b3c ((lambda (G2b3d) (if (= G2b3d '1) (apply (lambda (G2b36@all?) ((letrec ((G2b38@f (lambda (G2b3a@ls) (if (null? G2b3a@ls) '() (if (or G2b36@all? (G29d5@library-visible? (car G2b3a@ls))) (cons (car G2b3a@ls) (G2b38@f (cdr G2b3a@ls))) (G2b38@f (cdr G2b3a@ls))))))) G2b38@f) ((G29ac@current-library-collection)))) G2b3c) (if (= G2b3d '0) (apply (lambda () (G2a25@installed-libraries '#f)) G2b3c) (error 'apply '"invalid arg count")))) (length G2b3c)))) (set! G2a27@library-spec (lambda (G2b3e@x) (begin (if (not (G29b9@library? G2b3e@x)) (assertion-violation 'library-spec '"not a library" G2b3e@x) (void)) (list (G29bd@library-id G2b3e@x) (G29bf@library-name G2b3e@x) (G29c1@library-version G2b3e@x))))) (begin (set! G2b7c@G2a27@library-spec G2a27@library-spec) (set! G2b7b@G2a25@installed-libraries G2a25@installed-libraries) (set! G2b7a@G2a23@invoke-library-by-spec G2a23@invoke-library-by-spec) (set! G2b79@G2a21@visit-library G2a21@visit-library) (set! G2b78@G2a1f@invoke-library G2a1f@invoke-library) (set! G2b77@G2a1d@imported-label->binding G2a1d@imported-label->binding) (set! G2b76@G2a1b@install-library G2a1b@install-library) (set! G2b75@G2a19@install-library-record G2a19@install-library-record) (set! G2b74@G2a17@label->binding-table G2a17@label->binding-table) (set! G2b73@G2a15@find-library-by-spec/die G2a15@find-library-by-spec/die) (set! G2b72@G2a13@library-exists? G2a13@library-exists?) (set! G2b71@G2a11@find-library-by-name G2a11@find-library-by-name) (set! G2b70@G2a0f@find-external-library G2a0f@find-external-library) (set! G2b6f@G2a0d@external-pending-libraries G2a0d@external-pending-libraries) (set! G2b6e@G2a0b@current-library-expander G2a0b@current-library-expander) (set! G2b6d@G2a09@library-loader G2a09@library-loader) (set! G2b6c@G2a07@try-load-from-file G2a07@try-load-from-file) (set! G2b6b@G2a05@current-precompiled-library-loader G2a05@current-precompiled-library-loader) (set! G2b6a@G2a03@serialize-all G2a03@serialize-all) (set! G2b69@G2a01@file-locator G2a01@file-locator) (set! G2b68@G29ff@library-name->file-name G29ff@library-name->file-name) (set! G2b67@G29fd@library-extensions G29fd@library-extensions) (set! G2b66@G29fb@library-path G29fb@library-path) (set! G2b65@G29f9@find-library-by G29f9@find-library-by) (set! G2b64@G29f7@find-dependencies G29f7@find-dependencies) (set! G2b63@G29f5@rp G29f5@rp) (set! G2b62@G29f3@set-library-source-file-name! G29f3@set-library-source-file-name!) (set! G2b61@G29f1@set-library-visible?! G29f1@set-library-visible?!) (set! G2b60@G29ef@set-library-invoke-code! G29ef@set-library-invoke-code!) (set! G2b5f@G29ed@set-library-visit-code! G29ed@set-library-visit-code!) (set! G2b5e@G29eb@set-library-invoke-state! G29eb@set-library-invoke-state!) (set! G2b5d@G29e9@set-library-visit-state! G29e9@set-library-visit-state!) (set! G2b5c@G29e7@set-library-env! G29e7@set-library-env!) (set! G2b5b@G29e5@set-library-subst! G29e5@set-library-subst!) (set! G2b5a@G29e3@set-library-inv*! G29e3@set-library-inv*!) (set! G2b59@G29e1@set-library-vis*! G29e1@set-library-vis*!) (set! G2b58@G29df@set-library-imp*! G29df@set-library-imp*!) (set! G2b57@G29dd@set-library-version! G29dd@set-library-version!) (set! G2b56@G29db@set-library-name! G29db@set-library-name!) (set! G2b55@G29d9@set-library-id! G29d9@set-library-id!) (set! G2b54@G29d7@library-source-file-name G29d7@library-source-file-name) (set! G2b53@G29d5@library-visible? G29d5@library-visible?) (set! G2b52@G29d3@library-invoke-code G29d3@library-invoke-code) (set! G2b51@G29d1@library-visit-code G29d1@library-visit-code) (set! G2b50@G29cf@library-invoke-state G29cf@library-invoke-state) (set! G2b4f@G29cd@library-visit-state G29cd@library-visit-state) (set! G2b4e@G29cb@library-env G29cb@library-env) (set! G2b4d@G29c9@library-subst G29c9@library-subst) (set! G2b4c@G29c7@library-inv* G29c7@library-inv*) (set! G2b4b@G29c5@library-vis* G29c5@library-vis*) (set! G2b4a@G29c3@library-imp* G29c3@library-imp*) (set! G2b49@G29c1@library-version G29c1@library-version) (set! G2b48@G29bf@library-name G29bf@library-name) (set! G2b47@G29bd@library-id G29bd@library-id) (set! G2b46@G29bb@make-library G29bb@make-library) (set! G2b45@G29b9@library? G29b9@library?) (set! G2b44@G29b6@G29ae G29b6@G29ae) (set! G2b43@G29b4@G29af G29b4@G29af) (set! G2b42@G29b2@G29ad G29b2@G29ad) (set! G2b41@G29ac@current-library-collection G29ac@current-library-collection) (set! G2b40@G29aa@make-collection G29aa@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b7f@build-global-define G2bf9@build-lambda G2bfb@build-case-lambda G2bfd@build-let G2c2f@build-sequence G2c31@build-void G2c33@build-letrec G2c35@build-letrec* G2c37@build-library-letrec* G2c39@build-receive) (begin (set! G2b7f@build-global-define (lambda (G2c3a@x) (G2c31@build-void))) (set! G2bf9@build-lambda (lambda (G2c3c@ae G2c3d@vars G2c3e@exp) (list 'lambda G2c3d@vars G2c3e@exp))) (set! G2bfb@build-case-lambda (lambda (G2c42@ae G2c43@vars* G2c44@exp*) ((lambda (G2c49@build-error G2c4b@build-pred G2c4d@build-apply G2c4f@expand-case-lambda) (begin (set! G2c49@build-error (lambda (G2c7e@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c4b@build-pred (lambda (G2c68@ae G2c69@n G2c6a@vars) (call-with-values (lambda () ((letrec ((G2c70@f (lambda (G2c72@vars G2c73@count) (if (pair? G2c72@vars) (G2c70@f (cdr G2c72@vars) (+ G2c73@count '1)) (if (null? G2c72@vars) (values G2c73@count '=) (values G2c73@count '>=)))))) G2c70@f) G2c6a@vars '0)) (lambda (G2c76@G2c6e G2c77@G2c6f) ((lambda (G2c7a@pred G2c7b@count) (list (list 'primitive G2c7a@pred) G2c69@n (list 'quote G2c7b@count))) G2c77@G2c6f G2c76@G2c6e))))) (set! G2c4d@build-apply (lambda (G2c60@ae G2c61@g G2c62@vars G2c63@exp) (list '(primitive apply) (G2bf9@build-lambda G2c60@ae G2c62@vars G2c63@exp) G2c61@g))) (set! G2c4f@expand-case-lambda (lambda (G2c50@ae G2c51@vars G2c52@exp*) ((lambda (G2c56@g G2c57@n) (list 'lambda G2c56@g (G2bfd@build-let G2c50@ae (list G2c57@n) (list (list '(primitive length) G2c56@g)) ((letrec ((G2c5a@f (lambda (G2c5c@vars* G2c5d@exp*) (if (null? G2c5c@vars*) (G2c49@build-error G2c50@ae) (list 'if (G2c4b@build-pred G2c50@ae G2c57@n (car G2c5c@vars*)) (G2c4d@build-apply G2c50@ae G2c56@g (car G2c5c@vars*) (car G2c5d@exp*)) (G2c5a@f (cdr G2c5c@vars*) (cdr G2c5d@exp*))))))) G2c5a@f) G2c43@vars* G2c52@exp*)))) (gensym) (gensym)))) (if (= (length G2c44@exp*) '1) (G2bf9@build-lambda G2c42@ae (car G2c43@vars*) (car G2c44@exp*)) (G2c4f@expand-case-lambda G2c42@ae G2c43@vars* G2c44@exp*)))) '#f '#f '#f '#f))) (set! G2bfd@build-let (lambda (G2c80@ae G2c81@lhs* G2c82@rhs* G2c83@body) (cons (G2bf9@build-lambda G2c80@ae G2c81@lhs* G2c83@body) G2c82@rhs*))) (set! G2c2f@build-sequence (lambda (G2c88@ae G2c89@exps) ((letrec ((G2c8c@loop (lambda (G2c8e@exps) (if (null? (cdr G2c8e@exps)) (car G2c8e@exps) (if (equal? (car G2c8e@exps) (G2c31@build-void)) (G2c8c@loop (cdr G2c8e@exps)) (cons 'begin G2c8e@exps)))))) G2c8c@loop) G2c89@exps))) (set! G2c31@build-void (lambda () '((primitive void)))) (set! G2c33@build-letrec (lambda (G2c90@ae G2c91@vars G2c92@val-exps G2c93@body-exp) (if (null? G2c91@vars) G2c93@body-exp (list 'letrec (map list G2c91@vars G2c92@val-exps) G2c93@body-exp)))) (set! G2c35@build-letrec* (lambda (G2c98@ae G2c99@vars G2c9a@val-exps G2c9b@body-exp) (if (null? G2c99@vars) G2c9b@body-exp (G2bfd@build-let G2c98@ae G2c99@vars (map (lambda (G2ca0@x) (list 'quote '#f)) G2c99@vars) (G2c2f@build-sequence G2c98@ae (append (map (lambda (G2ca2@lhs G2ca3@rhs) (list 'set! G2ca2@lhs G2ca3@rhs)) G2c99@vars G2c9a@val-exps) (list G2c9b@body-exp))))))) (set! G2c37@build-library-letrec* (lambda (G2ca6@ae G2ca7@name G2ca8@vars G2ca9@locs G2caa@val-exps G2cab@body-exp) (list 'library-letrec* G2ca7@name (map list G2ca8@vars G2ca9@locs G2caa@val-exps) G2cab@body-exp))) (set! G2c39@build-receive (lambda (G2cb2@ae G2cb3@vars G2cb4@producer G2cb5@body*) (begin (display '"************** in ") (cons 'receive (cons G2cb3@vars (cons G2cb4@producer G2cb5@body*)))))) (begin (set! G2cc3@G2c39@build-receive G2c39@build-receive) (set! G2cc2@G2c37@build-library-letrec* G2c37@build-library-letrec*) (set! G2cc1@G2c35@build-letrec* G2c35@build-letrec*) (set! G2cc0@G2c33@build-letrec G2c33@build-letrec) (set! G2cbf@G2c31@build-void G2c31@build-void) (set! G2cbe@G2c2f@build-sequence G2c2f@build-sequence) (set! G2cbd@G2bfd@build-let G2bfd@build-let) (set! G2cbc@G2bfb@build-case-lambda G2bfb@build-case-lambda) (set! G2cbb@G2bf9@build-lambda G2bf9@build-lambda) (set! G2cba@G2b7f@build-global-define G2b7f@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cd2@set-cons G2cd4@set-union G2cd9@top-mark* G2cdb@top-marked? G2cdd@gen-lexical G2cdf@gen-global G2ce1@gen-label G2ce3@gen-top-level-label G2ce5@gen-define-label+loc G2ce7@gen-define-label G2ced@G2ce8 G2cef@G2cea G2cf1@G2ce9 G2cf4@rib? G2cf6@make-rib G2cf8@rib-sym* G2cfa@rib-mark** G2cfc@rib-label* G2cfe@rib-sealed/freq G2d00@rib-cache G2d02@set-rib-sym*! G2d04@set-rib-mark**! G2d06@set-rib-label*! G2d08@set-rib-sealed/freq! G2d0a@set-rib-cache! G2d0c@make-empty-rib G2d0e@make-cache-rib G2d10@find-label G2d12@extend-rib! G2d14@extend-rib/nc! G2d16@make-rib-map G2d18@seal-rib! G2d1a@unseal-rib! G2d1c@make-full-rib G2d22@G2d1d G2d24@G2d1f G2d26@G2d1e G2d29@stx? G2d2b@make-stx G2d2d@stx-expr G2d2f@stx-mark* G2d31@stx-subst* G2d33@stx-ae* G2d35@set-stx-expr! G2d37@set-stx-mark*! G2d39@set-stx-subst*! G2d3b@set-stx-ae*! G2d3d@rp G2d3f@datum->stx G2d41@gen-mark G2d43@anti-mark G2d45@anti-mark? G2d47@join-wraps G2d49@mkstx G2d4b@add-mark G2d4d@add-subst G2d4f@syntax-kind? G2d51@syntax-vector->list G2d53@syntax-pair? G2d55@syntax-vector? G2d57@syntax-null? G2d59@syntax-list? G2d5b@syntax-car G2d5d@syntax-cdr G2d5f@syntax->list G2d61@id? G2d63@id->sym G2d65@same-marks? G2d67@bound-id=? G2d69@free-id=? G2d6b@valid-bound-ids? G2d6d@distinct-bound-ids? G2d6f@bound-id-member? G2d71@self-evaluating? G2d73@strip-annotations G2d75@strip G2d77@stx->datum G2d79@same-marks*? G2d7b@id->label G2d7d@id->real-label G2d7f@label->binding G2d81@make-binding G2d83@binding-type G2d85@binding-value G2d87@raise-unbound-error G2d89@syntax-type G2d99@sanitize-binding G2d9b@make-variable-transformer G2d9d@variable-transformer? G2d9f@variable-transformer-procedure G2da1@make-eval-transformer G2ee4@parse-define G2ee6@parse-define-syntax G2ee8@scheme-stx-hashtable G2eea@scheme-stx G2eec@lexical-var G2eee@lexical-mutable? G2ef0@set-lexical-mutable! G2ef2@add-lexical G2ef4@add-lexicals G2ef6@letrec-helper G2ef8@letrec-transformer G2efa@letrec*-transformer G2efc@fluid-let-syntax-transformer G2efe@type-descriptor-transformer G2f00@record-type-descriptor-transformer G2f02@record-constructor-descriptor-transformer G2f04@when-macro G2f06@unless-macro G2f08@if-transformer G2f0a@and-transformer G2f0c@or-transformer G2f0e@case-macro G2f10@quote-transformer G2f12@case-lambda-transformer G2f14@lambda-transformer G2f16@bless G2f18@with-syntax-macro G2f1a@invalid-fmls-error G2f1c@let-macro G2f1e@let-values-macro G2f20@let*-values-macro G2f22@trace-lambda-macro G2f24@trace-define-macro G2f26@trace-define-syntax-macro G2f28@trace-let/rec-syntax G2f2a@trace-let-syntax-macro G2f2c@trace-letrec-syntax-macro G2f2e@guard-macro G2f30@define-enumeration-macro G2f32@time-macro G2f34@delay-macro G2f36@assert-macro G2f38@endianness-macro G2f3a@identifier-syntax-macro G2f3c@do-macro G2f3e@let*-macro G2f40@or-macro G2f42@and-macro G2f44@cond-macro G2f46@do-include G2f48@include-macro G2f4a@include-into-macro G2f4c@syntax-rules-macro G2f4e@quasiquote-macro G2f50@quasisyntax-macro G2f52@define-struct-macro G2f54@define-record-type-macro G2f56@define-condition-type-macro G2f58@incorrect-usage-macro G2f5a@parameterize-macro G2f5c@foreign-call-transformer G2f5e@convert-pattern G2f60@syntax-dispatch G2f62@ellipsis? G2f64@underscore? G2f66@verify-literals G2f68@syntax-case-transformer G2f6a@ellipsis-map G2f6c@syntax-transformer G2f6e@core-macro-transformer G2f70@file-options-macro G2f72@symbol-macro G2f74@macro-transformer G2f76@local-macro-transformer G2f78@do-macro-call G2f7a@chi-macro G2f7c@chi-local-macro G2f7e@chi-global-macro G2f80@chi-expr* G2f82@chi-application G2f84@chi-expr G2f86@chi-set! G2f88@verify-formals G2f8a@chi-lambda-clause G2f8c@chi-lambda-clause* G2f8e@chi-defun G2f90@chi-rhs G2f92@expand-interaction-rhs*/init* G2f94@chi-rhs* G2f96@find-bound=? G2f98@find-dups G2f9a@chi-internal G2f9c@parse-module G2fa2@G2f9d G2fa4@G2f9f G2fa6@G2f9e G2fa9@module-interface? G2fab@make-module-interface G2fad@module-interface-first-mark G2faf@module-interface-exp-id-vec G2fb1@module-interface-exp-lab-vec G2fb3@set-module-interface-first-mark! G2fb5@set-module-interface-exp-id-vec! G2fb7@set-module-interface-exp-lab-vec! G2fb9@module-interface-exp-id* G2fbb@chi-internal-module G2fbd@chi-body* G2fbf@expand-transformer G2fc1@parse-exports G2fc3@parse-library-name G2fc5@parse-library G2fc7@parse-import-spec* G2fc9@make-top-rib G2fcb@make-collector G2fcd@inv-collector G2fcf@vis-collector G2fd1@imp-collector G2fd3@chi-library-internal G2fd5@chi-interaction-expr G2fd7@library-body-expander G2fd9@core-library-expander G2fdb@parse-top-level-program G2fdd@top-level-expander G2fe3@G2fde G2fe5@G2fe0 G2fe7@G2fdf G2fea@env? G2fec@make-env G2fee@env-names G2ff0@env-labels G2ff2@env-itc G2ff4@set-env-names! G2ff6@set-env-labels! G2ff8@set-env-itc! G2ffa@rp G3000@G2ffb G3002@G2ffd G3004@G2ffc G3007@interaction-env? G3009@make-interaction-env G300b@interaction-env-rib G300d@interaction-env-r G300f@interaction-env-locs G3011@set-interaction-env-rib! G3013@set-interaction-env-r! G3015@set-interaction-env-locs! G3017@rp G3019@interaction-environment-symbols G301b@environment-bindings G301d@parse-binding G301f@environment? G3021@environment-symbols G3023@environment G3025@null-environment G3027@scheme-report-environment G3029@expand G302b@eval G302d@library-expander G302f@boot-library-expand G3031@rev-map-append G3033@build-exports G3035@make-export-subst G3037@make-export-env/macros G3039@generate-temporaries G303b@free-identifier=? G303d@bound-identifier=? G303f@make-source-condition G3041@extract-position-condition G3043@expression-position G3045@assertion-error G3047@syntax-error G3049@syntax-violation* G304b@syntax-violation G304d@identifier? G304f@datum->syntax G3051@syntax->datum G3053@compile-r6rs-top-level G3055@pre-compile-r6rs-top-level G3057@interaction-environment G3059@top-level-context) (begin (set! G2cd2@set-cons (lambda (G305a@x G305b@ls) (if (memq G305a@x G305b@ls) G305b@ls (cons G305a@x G305b@ls)))) (set! G2cd4@set-union (lambda (G305e@ls1 G305f@ls2) (if (null? G305e@ls1) G305f@ls2 (if (memq (car G305e@ls1) G305f@ls2) (G2cd4@set-union (cdr G305e@ls1) G305f@ls2) (cons (car G305e@ls1) (G2cd4@set-union (cdr G305e@ls1) G305f@ls2)))))) (set! G2cd9@top-mark* '(top)) (set! G2cdb@top-marked? (lambda (G3062@m*) (memq 'top G3062@m*))) (set! G2cdd@gen-lexical (lambda (G3064@sym) (if (symbol? G3064@sym) (gensym G3064@sym) (if (G2d29@stx? G3064@sym) (G2cdd@gen-lexical (G2d63@id->sym G3064@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3064@sym))))) (set! G2cdf@gen-global (lambda (G3066@x) (G2cdd@gen-lexical G3066@x))) (set! G2ce1@gen-label (lambda (G3068@_) (gensym))) (set! G2ce3@gen-top-level-label (lambda (G306a@id G306b@rib) ((lambda (G306f@find) (begin (set! G306f@find (lambda (G307a@sym G307b@mark* G307c@sym* G307d@mark** G307e@label*) (and (pair? G307c@sym*) (if (and (eq? G307a@sym (car G307c@sym*)) (G2d65@same-marks? G307b@mark* (car G307d@mark**))) (car G307e@label*) (G306f@find G307a@sym G307b@mark* (cdr G307c@sym*) (cdr G307d@mark**) (cdr G307e@label*)))))) ((lambda (G3070@sym G3071@mark*) ((lambda (G3074@sym*) ((lambda (G3076@t) (if G3076@t ((lambda (G3078@label) (if (G2b77@G2a1d@imported-label->binding G3078@label) (gensym) G3078@label)) G3076@t) (gensym))) (and (memq G3070@sym (G2cf8@rib-sym* G306b@rib)) (G306f@find G3070@sym G3071@mark* G3074@sym* (G2cfa@rib-mark** G306b@rib) (G2cfc@rib-label* G306b@rib))))) (G2cf8@rib-sym* G306b@rib))) (G2d63@id->sym G306a@id) (G2d2f@stx-mark* G306a@id)))) '#f))) (set! G2ce5@gen-define-label+loc (lambda (G3084@id G3085@rib) ((lambda (G3088@t) (if G3088@t ((lambda (G308a@env) ((lambda (G308c@label G308d@locs) (values G308c@label ((lambda (G3090@t) (if G3090@t (cdr G3090@t) ((lambda (G3092@loc) (begin (G3015@set-interaction-env-locs! G308a@env (cons (cons G308c@label G3092@loc) G308d@locs)) G3092@loc)) (G2cdd@gen-lexical G3084@id)))) (assq G308c@label G308d@locs)))) (G2ce3@gen-top-level-label G3084@id G3085@rib) (G300f@interaction-env-locs G308a@env))) G3088@t) (values (gensym) (G2cdd@gen-lexical G3084@id)))) (G3059@top-level-context)))) (set! G2ce7@gen-define-label (lambda (G3094@id G3095@rib) (if (G3059@top-level-context) (G2ce3@gen-top-level-label G3094@id G3095@rib) (gensym)))) (set! G2ced@G2ce8 (make-record-type-descriptor 'rib '#f 'G2ceb '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2cef@G2cea '#f) (set! G2cf1@G2ce9 (make-record-constructor-descriptor G2ced@G2ce8 '#f G2cef@G2cea)) (set! G2cf4@rib? (record-predicate G2ced@G2ce8)) (set! G2cf6@make-rib (record-constructor G2cf1@G2ce9)) (set! G2cf8@rib-sym* (record-accessor G2ced@G2ce8 '0)) (set! G2cfa@rib-mark** (record-accessor G2ced@G2ce8 '1)) (set! G2cfc@rib-label* (record-accessor G2ced@G2ce8 '2)) (set! G2cfe@rib-sealed/freq (record-accessor G2ced@G2ce8 '3)) (set! G2d00@rib-cache (record-accessor G2ced@G2ce8 '4)) (set! G2d02@set-rib-sym*! (record-mutator G2ced@G2ce8 '0)) (set! G2d04@set-rib-mark**! (record-mutator G2ced@G2ce8 '1)) (set! G2d06@set-rib-label*! (record-mutator G2ced@G2ce8 '2)) (set! G2d08@set-rib-sealed/freq! (record-mutator G2ced@G2ce8 '3)) (set! G2d0a@set-rib-cache! (record-mutator G2ced@G2ce8 '4)) (set! G2d0c@make-empty-rib (lambda () (G2cf6@make-rib '() '() '() '#f '#f))) (set! G2d0e@make-cache-rib (lambda () (G2cf6@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d10@find-label (lambda (G3098@rib G3099@sym G309a@mark*) ((lambda (G309e@ht) (and G309e@ht ((lambda (G30a0@cv) ((lambda (G30a2@t) (if G30a2@t (cdr G30a2@t) '#f)) (and G30a0@cv (assp (lambda (G30a4@m) (G2d65@same-marks? G309a@mark* G30a4@m)) G30a0@cv)))) (hashtable-ref G309e@ht G3099@sym '#f)))) (G2d00@rib-cache G3098@rib)))) (set! G2d12@extend-rib! (lambda (G30a6@rib G30a7@id G30a8@label) ((lambda (G30ad@find) (begin (set! G30ad@find (lambda (G30be@sym G30bf@mark* G30c0@sym* G30c1@mark** G30c2@label*) (and (pair? G30c0@sym*) (if (and (eq? G30be@sym (car G30c0@sym*)) (G2d65@same-marks? G30bf@mark* (car G30c1@mark**))) G30c2@label* (G30ad@find G30be@sym G30bf@mark* (cdr G30c0@sym*) (cdr G30c1@mark**) (cdr G30c2@label*)))))) (begin (if (G2cfe@rib-sealed/freq G30a6@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G30a6@rib) (void)) ((lambda (G30ae@sym G30af@mark*) ((lambda (G30b2@sym*) ((lambda (G30b4@t) (if G30b4@t ((lambda (G30b6@p) (if (not (eq? G30a8@label G30b6@p)) (G304b@syntax-violation '#f '"multiple definitions of identifier" G30a7@id) (void))) G30b4@t) ((lambda (G30b8@t) (if G30b8@t ((lambda (G30ba@p) (if (not (eq? G30a8@label (car G30ba@p))) (if (G3059@top-level-context) (set-car! G30ba@p G30a8@label) (G304b@syntax-violation '#f '"multiple definitions of identifier" G30a7@id)) (void))) G30b8@t) (begin (if (G2d00@rib-cache G30a6@rib) (hashtable-update! (G2d00@rib-cache G30a6@rib) G30ae@sym (lambda (G30bc@e) (cons (cons G30af@mark* G30a8@label) G30bc@e)) '()) (void)) (G2d02@set-rib-sym*! G30a6@rib (cons G30ae@sym G30b2@sym*)) (G2d04@set-rib-mark**! G30a6@rib (cons G30af@mark* (G2cfa@rib-mark** G30a6@rib))) (G2d06@set-rib-label*! G30a6@rib (cons G30a8@label (G2cfc@rib-label* G30a6@rib)))))) (and (memq G30ae@sym (G2cf8@rib-sym* G30a6@rib)) (G30ad@find G30ae@sym G30af@mark* G30b2@sym* (G2cfa@rib-mark** G30a6@rib) (G2cfc@rib-label* G30a6@rib)))))) (G2d10@find-label G30a6@rib G30ae@sym G30af@mark*))) (G2cf8@rib-sym* G30a6@rib))) (G2d63@id->sym G30a7@id) (G2d2f@stx-mark* G30a7@id))))) '#f))) (set! G2d14@extend-rib/nc! (lambda (G30c8@rib G30c9@id G30ca@label) ((lambda (G30ce@sym G30cf@mark*) ((lambda (G30d2@sym*) (begin (if (G2d00@rib-cache G30c8@rib) (hashtable-update! (G2d00@rib-cache G30c8@rib) G30ce@sym (lambda (G30d4@e) (cons (cons G30cf@mark* G30ca@label) G30d4@e)) '()) (void)) (G2d02@set-rib-sym*! G30c8@rib (cons G30ce@sym G30d2@sym*)) (G2d04@set-rib-mark**! G30c8@rib (cons G30cf@mark* (G2cfa@rib-mark** G30c8@rib))) (G2d06@set-rib-label*! G30c8@rib (cons G30ca@label (G2cfc@rib-label* G30c8@rib))))) (G2cf8@rib-sym* G30c8@rib))) (G2d63@id->sym G30c9@id) (G2d2f@stx-mark* G30c9@id)))) (set! G2d16@make-rib-map (lambda (G30d6@sym*) ((lambda (G30d8@ht) ((letrec ((G30da@f (lambda (G30dc@i G30dd@sym*) (if (null? G30dd@sym*) G30d8@ht (begin (hashtable-update! G30d8@ht (car G30dd@sym*) (lambda (G30e0@x) (cons G30dc@i G30e0@x)) '()) (G30da@f (+ G30dc@i '1) (cdr G30dd@sym*))))))) G30da@f) '0 G30d6@sym*)) (make-eq-hashtable)))) (set! G2d18@seal-rib! (lambda (G30e2@rib) ((lambda (G30e4@sym*) (if (not (null? G30e4@sym*)) (begin (G2d02@set-rib-sym*! G30e2@rib (list->vector G30e4@sym*)) (G2d04@set-rib-mark**! G30e2@rib (list->vector (G2cfa@rib-mark** G30e2@rib))) (G2d06@set-rib-label*! G30e2@rib (list->vector (G2cfc@rib-label* G30e2@rib))) (G2d08@set-rib-sealed/freq! G30e2@rib (G2d16@make-rib-map G30e4@sym*))) (void))) (G2cf8@rib-sym* G30e2@rib)))) (set! G2d1a@unseal-rib! (lambda (G30e6@rib) (if (G2cfe@rib-sealed/freq G30e6@rib) (begin (G2d08@set-rib-sealed/freq! G30e6@rib '#f) (G2d02@set-rib-sym*! G30e6@rib (vector->list (G2cf8@rib-sym* G30e6@rib))) (G2d04@set-rib-mark**! G30e6@rib (vector->list (G2cfa@rib-mark** G30e6@rib))) (G2d06@set-rib-label*! G30e6@rib (vector->list (G2cfc@rib-label* G30e6@rib)))) (void)))) (set! G2d1c@make-full-rib (lambda (G30e8@id* G30e9@label*) ((lambda (G30ec@r) (begin (G2d18@seal-rib! G30ec@r) G30ec@r)) (G2cf6@make-rib (map G2d63@id->sym G30e8@id*) (map G2d2f@stx-mark* G30e8@id*) G30e9@label* '#f '#f)))) (set! G2d22@G2d1d (make-record-type-descriptor 'stx '#f 'G2d20 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d24@G2d1f '#f) (set! G2d26@G2d1e (make-record-constructor-descriptor G2d22@G2d1d '#f G2d24@G2d1f)) (set! G2d29@stx? (record-predicate G2d22@G2d1d)) (set! G2d2b@make-stx (record-constructor G2d26@G2d1e)) (set! G2d2d@stx-expr (record-accessor G2d22@G2d1d '0)) (set! G2d2f@stx-mark* (record-accessor G2d22@G2d1d '1)) (set! G2d31@stx-subst* (record-accessor G2d22@G2d1d '2)) (set! G2d33@stx-ae* (record-accessor G2d22@G2d1d '3)) (set! G2d35@set-stx-expr! (record-mutator G2d22@G2d1d '0)) (set! G2d37@set-stx-mark*! (record-mutator G2d22@G2d1d '1)) (set! G2d39@set-stx-subst*! (record-mutator G2d22@G2d1d '2)) (set! G2d3b@set-stx-ae*! (record-mutator G2d22@G2d1d '3)) (set! G2d3d@rp (G28fa@G282d@make-record-printer 'stx (lambda (G30ee@x G30ef@p G30f0@wr) (begin (display '"#<syntax " G30ef@p) (write (G2d77@stx->datum G30ee@x) G30ef@p) ((lambda (G30f4@expr) (if (G28f2@G281d@annotation? G30f4@expr) ((lambda (G30f6@src) (if (pair? G30f6@src) (begin (display '" [" G30ef@p) (display (cdr G30f6@src) G30ef@p) (display '" of " G30ef@p) (display (car G30f6@src) G30ef@p) (display '"]" G30ef@p)) (void))) (G28f3@G281f@annotation-source G30f4@expr)) (void))) (G2d2d@stx-expr G30ee@x)) (display '">" G30ef@p))))) (set! G2d3f@datum->stx (lambda (G30f8@id G30f9@datum) (G2d2b@make-stx G30f9@datum (G2d2f@stx-mark* G30f8@id) (G2d31@stx-subst* G30f8@id) (G2d33@stx-ae* G30f8@id)))) (set! G2d41@gen-mark (lambda () (string '#\m))) (set! G2d43@anti-mark '#f) (set! G2d45@anti-mark? not) (set! G2d47@join-wraps (lambda (G30fc@m1* G30fd@s1* G30fe@ae1* G30ff@e) ((lambda (G3105@cancel) (begin (set! G3105@cancel (lambda (G310c@ls1 G310d@ls2) ((letrec ((G3110@f (lambda (G3112@x G3113@ls1) (if (null? G3113@ls1) (cdr G310d@ls2) (cons G3112@x (G3110@f (car G3113@ls1) (cdr G3113@ls1))))))) G3110@f) (car G310c@ls1) (cdr G310c@ls1)))) ((lambda (G3106@m2* G3107@s2* G3108@ae2*) (if (and (not (null? G30fc@m1*)) (not (null? G3106@m2*)) (G2d45@anti-mark? (car G3106@m2*))) (values (G3105@cancel G30fc@m1* G3106@m2*) (G3105@cancel G30fd@s1* G3107@s2*) (G3105@cancel G30fe@ae1* G3108@ae2*)) (values (append G30fc@m1* G3106@m2*) (append G30fd@s1* G3107@s2*) (append G30fe@ae1* G3108@ae2*)))) (G2d2f@stx-mark* G30ff@e) (G2d31@stx-subst* G30ff@e) (G2d33@stx-ae* G30ff@e)))) '#f))) (set! G2d49@mkstx (lambda (G3116@e G3117@m* G3118@s* G3119@ae*) (if (and (G2d29@stx? G3116@e) (not (G2cdb@top-marked? G3117@m*))) (call-with-values (lambda () (G2d47@join-wraps G3117@m* G3118@s* G3119@ae* G3116@e)) (lambda (G3121@G311e G3122@G311f G3123@G3120) ((lambda (G3127@ae* G3128@s* G3129@m*) (G2d2b@make-stx (G2d2d@stx-expr G3116@e) G3129@m* G3128@s* G3127@ae*)) G3123@G3120 G3122@G311f G3121@G311e))) (G2d2b@make-stx G3116@e G3117@m* G3118@s* G3119@ae*)))) (set! G2d4b@add-mark (lambda (G312d@m G312e@e G312f@ae) (G2d49@mkstx G312e@e (list G312d@m) '(shift) (list G312f@ae)))) (set! G2d4d@add-subst (lambda (G3133@subst G3134@e) (G2d49@mkstx G3134@e '() (list G3133@subst) '()))) (set! G2d4f@syntax-kind? (lambda (G3137@x G3138@p?) (if (G2d29@stx? G3137@x) (G2d4f@syntax-kind? (G2d2d@stx-expr G3137@x) G3138@p?) (if (G28f2@G281d@annotation? G3137@x) (G2d4f@syntax-kind? (G28f4@G2821@annotation-expression G3137@x) G3138@p?) (G3138@p? G3137@x))))) (set! G2d51@syntax-vector->list (lambda (G313b@x) (if (G2d29@stx? G313b@x) ((lambda (G313d@ls G313e@m* G313f@s* G3140@ae*) (map (lambda (G3145@x) (G2d49@mkstx G3145@x G313e@m* G313f@s* G3140@ae*)) G313d@ls)) (G2d51@syntax-vector->list (G2d2d@stx-expr G313b@x)) (G2d2f@stx-mark* G313b@x) (G2d31@stx-subst* G313b@x) (G2d33@stx-ae* G313b@x)) (if (G28f2@G281d@annotation? G313b@x) (G2d51@syntax-vector->list (G28f4@G2821@annotation-expression G313b@x)) (if (vector? G313b@x) (vector->list G313b@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G313b@x)))))) (set! G2d53@syntax-pair? (lambda (G3147@x) (G2d4f@syntax-kind? G3147@x pair?))) (set! G2d55@syntax-vector? (lambda (G3149@x) (G2d4f@syntax-kind? G3149@x vector?))) (set! G2d57@syntax-null? (lambda (G314b@x) (G2d4f@syntax-kind? G314b@x null?))) (set! G2d59@syntax-list? (lambda (G314d@x) (or (G2d57@syntax-null? G314d@x) (and (G2d53@syntax-pair? G314d@x) (G2d59@syntax-list? (G2d5d@syntax-cdr G314d@x)))))) (set! G2d5b@syntax-car (lambda (G314f@x) (if (G2d29@stx? G314f@x) (G2d49@mkstx (G2d5b@syntax-car (G2d2d@stx-expr G314f@x)) (G2d2f@stx-mark* G314f@x) (G2d31@stx-subst* G314f@x) (G2d33@stx-ae* G314f@x)) (if (G28f2@G281d@annotation? G314f@x) (G2d5b@syntax-car (G28f4@G2821@annotation-expression G314f@x)) (if (pair? G314f@x) (car G314f@x) (assertion-violation 'syntax-car '"BUG: not a pair" G314f@x)))))) (set! G2d5d@syntax-cdr (lambda (G3151@x) (if (G2d29@stx? G3151@x) (G2d49@mkstx (G2d5d@syntax-cdr (G2d2d@stx-expr G3151@x)) (G2d2f@stx-mark* G3151@x) (G2d31@stx-subst* G3151@x) (G2d33@stx-ae* G3151@x)) (if (G28f2@G281d@annotation? G3151@x) (G2d5d@syntax-cdr (G28f4@G2821@annotation-expression G3151@x)) (if (pair? G3151@x) (cdr G3151@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3151@x)))))) (set! G2d5f@syntax->list (lambda (G3153@x) (if (G2d53@syntax-pair? G3153@x) (cons (G2d5b@syntax-car G3153@x) (G2d5f@syntax->list (G2d5d@syntax-cdr G3153@x))) (if (G2d57@syntax-null? G3153@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3153@x))))) (set! G2d61@id? (lambda (G3155@x) (and (G2d29@stx? G3155@x) ((lambda (G3157@expr) (symbol? (if (G28f2@G281d@annotation? G3157@expr) (G28f1@G281b@annotation-stripped G3157@expr) G3157@expr))) (G2d2d@stx-expr G3155@x))))) (set! G2d63@id->sym (lambda (G3159@x) (begin (if (not (G2d29@stx? G3159@x)) (error 'id->sym '"BUG in ikarus: not an id" G3159@x) (void)) ((lambda (G315b@expr) ((lambda (G315d@sym) (if (symbol? G315d@sym) G315d@sym (error 'id->sym '"BUG in ikarus: not an id" G3159@x))) (if (G28f2@G281d@annotation? G315b@expr) (G28f1@G281b@annotation-stripped G315b@expr) G315b@expr))) (G2d2d@stx-expr G3159@x))))) (set! G2d65@same-marks? (lambda (G315f@x G3160@y) (or (and (null? G315f@x) (null? G3160@y)) (and (pair? G315f@x) (pair? G3160@y) (eq? (car G315f@x) (car G3160@y)) (G2d65@same-marks? (cdr G315f@x) (cdr G3160@y)))))) (set! G2d67@bound-id=? (lambda (G3163@x G3164@y) (and (eq? (G2d63@id->sym G3163@x) (G2d63@id->sym G3164@y)) (G2d65@same-marks? (G2d2f@stx-mark* G3163@x) (G2d2f@stx-mark* G3164@y))))) (set! G2d69@free-id=? (lambda (G3167@i G3168@j) ((lambda (G316b@t0 G316c@t1) (if (or G316b@t0 G316c@t1) (eq? G316b@t0 G316c@t1) (eq? (G2d63@id->sym G3167@i) (G2d63@id->sym G3168@j)))) (G2d7d@id->real-label G3167@i) (G2d7d@id->real-label G3168@j)))) (set! G2d6b@valid-bound-ids? (lambda (G316f@id*) (and (for-all G2d61@id? G316f@id*) (G2d6d@distinct-bound-ids? G316f@id*)))) (set! G2d6d@distinct-bound-ids? (lambda (G3171@id*) (or (null? G3171@id*) (and (not (G2d6f@bound-id-member? (car G3171@id*) (cdr G3171@id*))) (G2d6d@distinct-bound-ids? (cdr G3171@id*)))))) (set! G2d6f@bound-id-member? (lambda (G3173@id G3174@id*) (and (pair? G3174@id*) (or (G2d67@bound-id=? G3173@id (car G3174@id*)) (G2d6f@bound-id-member? G3173@id (cdr G3174@id*)))))) (set! G2d71@self-evaluating? (lambda (G3177@x) (or (number? G3177@x) (string? G3177@x) (char? G3177@x) (boolean? G3177@x) (regexp? G3177@x) (bytevector? G3177@x)))) (set! G2d73@strip-annotations (lambda (G3179@x) (if (pair? G3179@x) (cons (G2d73@strip-annotations (car G3179@x)) (G2d73@strip-annotations (cdr G3179@x))) (if (vector? G3179@x) (vector-map G2d73@strip-annotations G3179@x) (if (G28f2@G281d@annotation? G3179@x) (G28f1@G281b@annotation-stripped G3179@x) G3179@x))))) (set! G2d75@strip (lambda (G317b@x G317c@m*) (if (G2cdb@top-marked? G317c@m*) (if (or (G28f2@G281d@annotation? G317b@x) (and (pair? G317b@x) (G28f2@G281d@annotation? (car G317b@x))) (and (vector? G317b@x) (> (vector-length G317b@x) '0) (G28f2@G281d@annotation? (vector-ref G317b@x '0)))) (G2d73@strip-annotations G317b@x) G317b@x) ((letrec ((G317f@f (lambda (G3181@x) (if (G2d29@stx? G3181@x) (G2d75@strip (G2d2d@stx-expr G3181@x) (G2d2f@stx-mark* G3181@x)) (if (G28f2@G281d@annotation? G3181@x) (G28f1@G281b@annotation-stripped G3181@x) (if (pair? G3181@x) ((lambda (G3183@a G3184@d) (if (and (eq? G3183@a (car G3181@x)) (eq? G3184@d (cdr G3181@x))) G3181@x (cons G3183@a G3184@d))) (G317f@f (car G3181@x)) (G317f@f (cdr G3181@x))) (if (vector? G3181@x) ((lambda (G3187@old) ((lambda (G3189@new) (if (for-all eq? G3187@old G3189@new) G3181@x (list->vector G3189@new))) (map G317f@f G3187@old))) (vector->list G3181@x)) G3181@x))))))) G317f@f) G317b@x)))) (set! G2d77@stx->datum (lambda (G318b@x) (G2d75@strip G318b@x '()))) (set! G2d79@same-marks*? (lambda (G318d@mark* G318e@mark** G318f@si) (if (null? G318f@si) '#f (if (G2d65@same-marks? G318d@mark* (vector-ref G318e@mark** (car G318f@si))) (car G318f@si) (G2d79@same-marks*? G318d@mark* G318e@mark** (cdr G318f@si)))))) (set! G2d7b@id->label (lambda (G3193@id) (or (G2d7d@id->real-label G3193@id) ((lambda (G3195@t) (if G3195@t ((lambda (G3197@env) ((lambda (G3199@rib) (call-with-values (lambda () (G2ce5@gen-define-label+loc G3193@id G3199@rib)) (lambda (G319d@G319b G319e@G319c) ((lambda (G31a1@loc_ G31a2@lab) (begin (G2d12@extend-rib! G3199@rib G3193@id G31a2@lab) G31a2@lab)) G319e@G319c G319d@G319b)))) (G300b@interaction-env-rib G3197@env))) G3195@t) '#f)) (G3059@top-level-context))))) (set! G2d7d@id->real-label (lambda (G31a5@id) ((lambda (G31a7@sym) ((letrec ((G31a9@search (lambda (G31ab@subst* G31ac@mark*) (if (null? G31ab@subst*) '#f (if (eq? (car G31ab@subst*) 'shift) (G31a9@search (cdr G31ab@subst*) (cdr G31ac@mark*)) ((lambda (G31af@rib) ((lambda (G31b1@t) (if G31b1@t ((lambda (G31b3@ht) ((lambda (G31b5@si) ((lambda (G31b7@i) (if G31b7@i (vector-ref (G2cfc@rib-label* G31af@rib) G31b7@i) (G31a9@search (cdr G31ab@subst*) G31ac@mark*))) (and G31b5@si (G2d79@same-marks*? G31ac@mark* (G2cfa@rib-mark** G31af@rib) (reverse G31b5@si))))) (hashtable-ref G31b3@ht G31a7@sym '#f))) G31b1@t) (or (G2d10@find-label G31af@rib G31a7@sym G31ac@mark*) ((letrec ((G31b9@f (lambda (G31bb@sym* G31bc@mark** G31bd@label*) (if (null? G31bb@sym*) (G31a9@search (cdr G31ab@subst*) G31ac@mark*) (if (and (eq? (car G31bb@sym*) G31a7@sym) (G2d65@same-marks? (car G31bc@mark**) G31ac@mark*)) (car G31bd@label*) (G31b9@f (cdr G31bb@sym*) (cdr G31bc@mark**) (cdr G31bd@label*))))))) G31b9@f) (G2cf8@rib-sym* G31af@rib) (G2cfa@rib-mark** G31af@rib) (G2cfc@rib-label* G31af@rib))))) (G2cfe@rib-sealed/freq G31af@rib))) (car G31ab@subst*))))))) G31a9@search) (G2d31@stx-subst* G31a5@id) (G2d2f@stx-mark* G31a5@id))) (G2d63@id->sym G31a5@id)))) (set! G2d7f@label->binding (lambda (G31c1@x G31c2@r) ((lambda (G31c5@t) (if G31c5@t ((lambda (G31c7@b) (if (and (pair? G31c7@b) (eq? (car G31c7@b) '$core-rtd)) (cons '$rtd (map G2f16@bless (cdr G31c7@b))) (if (and (pair? G31c7@b) (eq? (car G31c7@b) 'global-rtd)) ((lambda (G31c9@lib G31ca@loc) (cons '$rtd (symbol-value G31ca@loc))) (cadr G31c7@b) (cddr G31c7@b)) G31c7@b))) G31c5@t) ((lambda (G31cd@t) (if G31cd@t (cdr G31cd@t) ((lambda (G31cf@t) (if G31cf@t ((lambda (G31d1@env) ((lambda (G31d3@t) (if G31d3@t ((lambda (G31d5@p) (cons* 'lexical (cdr G31d5@p) '#f)) G31d3@t) '(displaced-lexical . #f))) (assq G31c1@x (G300f@interaction-env-locs G31d1@env)))) G31cf@t) '(displaced-lexical . #f))) (G3059@top-level-context)))) (assq G31c1@x G31c2@r)))) (G2b77@G2a1d@imported-label->binding G31c1@x)))) (set! G2d81@make-binding cons) (set! G2d83@binding-type car) (set! G2d85@binding-value cdr) (set! G2d87@raise-unbound-error (lambda (G31d7@id) (G3049@syntax-violation* '#f '"unbound identifier" G31d7@id (G4c83@G4acd@make-undefined-violation)))) (set! G2d89@syntax-type (lambda (G31d9@e G31da@r) (if (G2d61@id? G31d9@e) ((lambda (G31dd@id) ((lambda (G31df@label) ((lambda (G31e1@b) ((lambda (G31e3@type) ((lambda () (begin (if (not G31df@label) (G2d87@raise-unbound-error G31dd@id) (void)) ((lambda (G31e5@t) (if (memv G31e5@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31e3@type (G2d85@binding-value G31e1@b) G31dd@id) (values 'other '#f '#f))) G31e3@type))))) (G2d83@binding-type G31e1@b))) (G2d7f@label->binding G31df@label G31da@r))) (G2d7b@id->label G31dd@id))) G31d9@e) (if (G2d53@syntax-pair? G31d9@e) ((lambda (G31e7@id) (if (G2d61@id? G31e7@id) ((lambda (G31e9@label) ((lambda (G31eb@b) ((lambda (G31ed@type) ((lambda () (begin (if (not G31e9@label) (G2d87@raise-unbound-error G31e7@id) (void)) ((lambda (G31ef@t) (if (memv G31ef@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31ed@type (G2d85@binding-value G31eb@b) G31e7@id) (values 'call '#f '#f))) G31ed@type))))) (G2d83@binding-type G31eb@b))) (G2d7f@label->binding G31e9@label G31da@r))) (G2d7b@id->label G31e7@id)) (values 'call '#f '#f))) (G2d5b@syntax-car G31d9@e)) ((lambda (G31f1@d) (if (G2d71@self-evaluating? G31f1@d) (values 'constant G31f1@d '#f) (values 'other '#f '#f))) (G2d77@stx->datum G31d9@e)))))) (set! G2d99@sanitize-binding (lambda (G31f3@x G31f4@src) (if (procedure? G31f3@x) (cons* 'local-macro G31f3@x G31f4@src) (if (and (pair? G31f3@x) (eq? (car G31f3@x) 'macro!) (procedure? (cdr G31f3@x))) (cons* 'local-macro! (cdr G31f3@x) G31f4@src) (if (and (pair? G31f3@x) (eq? (car G31f3@x) '$rtd)) G31f3@x (assertion-violation 'expand '"invalid transformer" G31f3@x)))))) (set! G2d9b@make-variable-transformer (lambda (G31f7@x) (if (procedure? G31f7@x) (cons 'macro! G31f7@x) (assertion-violation 'make-variable-transformer '"not a procedure" G31f7@x)))) (set! G2d9d@variable-transformer? (lambda (G31f9@x) (and (pair? G31f9@x) (eq? (car G31f9@x) 'macro!) (procedure? (cdr G31f9@x))))) (set! G2d9f@variable-transformer-procedure (lambda (G31fb@x) (if (G2d9d@variable-transformer? G31fb@x) (cdr G31fb@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G31fb@x)))) (set! G2da1@make-eval-transformer (lambda (G31fd@x) (G2d99@sanitize-binding (eval-core (G2951@G2909@expanded->core G31fd@x)) G31fd@x))) (set! G2ee4@parse-define (lambda (G31ff@x) ((lambda (G3201@t) ((lambda (G3203@ls/false) (if (and G3203@ls/false (apply (lambda (G3205@id G3206@fmls G3207@b G3208@b*) (G2d61@id? G3205@id)) G3203@ls/false)) (apply (lambda (G320d@id G320e@fmls G320f@b G3210@b*) (begin (G2f88@verify-formals G320e@fmls G31ff@x) (values G320d@id (cons 'defun (cons G320e@fmls (cons G320f@b G3210@b*)))))) G3203@ls/false) ((lambda (G3215@t) ((lambda (G3217@ls/false) (if (and G3217@ls/false (apply (lambda (G3219@id G321a@val) (G2d61@id? G3219@id)) G3217@ls/false)) (apply (lambda (G321d@id G321e@val) (values G321d@id (cons 'expr G321e@val))) G3217@ls/false) ((lambda (G3221@t) ((lambda (G3223@ls/false) (if (and G3223@ls/false (apply (lambda (G3225@id) (G2d61@id? G3225@id)) G3223@ls/false)) (apply (lambda (G3227@id) (values G3227@id (cons 'expr (G2f16@bless '(void))))) G3223@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3221@t))) (G2f60@syntax-dispatch G3221@t '(_ any)))) G3215@t))) (G2f60@syntax-dispatch G3215@t '(_ any any)))) G3201@t))) (G2f60@syntax-dispatch G3201@t '(_ (any . any) any . each-any)))) G31ff@x))) (set! G2ee6@parse-define-syntax (lambda (G3229@x) ((lambda (G322b@t) ((lambda (G322d@ls/false) (if (and G322d@ls/false (apply (lambda (G322f@id G3230@val) (G2d61@id? G322f@id)) G322d@ls/false)) (apply (lambda (G3233@id G3234@val) (values G3233@id G3234@val)) G322d@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G322b@t))) (G2f60@syntax-dispatch G322b@t '(_ any any)))) G3229@x))) (set! G2ee8@scheme-stx-hashtable (make-eq-hashtable)) (set! G2eea@scheme-stx (lambda (G3237@sym) (or (hashtable-ref G2ee8@scheme-stx-hashtable G3237@sym '#f) ((lambda (G3239@subst) ((lambda (G323b@stx) ((lambda (G323d@stx) ((lambda () (begin (hashtable-set! G2ee8@scheme-stx-hashtable G3237@sym G323d@stx) G323d@stx)))) ((lambda (G323f@t) (if G323f@t ((lambda (G3241@x) ((lambda (G3243@name G3244@label) (G2d4d@add-subst (G2cf6@make-rib (list G3243@name) (list G2cd9@top-mark*) (list G3244@label) '#f '#f) G323b@stx)) (car G3241@x) (cdr G3241@x))) G323f@t) G323b@stx)) (assq G3237@sym G3239@subst)))) (G2d2b@make-stx G3237@sym G2cd9@top-mark* '() '()))) (G2b4d@G29c9@library-subst (G2b71@G2a11@find-library-by-name '(psyntax system $all))))))) (set! G2eec@lexical-var car) (set! G2eee@lexical-mutable? cdr) (set! G2ef0@set-lexical-mutable! set-cdr!) (set! G2ef2@add-lexical (lambda (G3247@lab G3248@lex G3249@r) (cons (cons* G3247@lab 'lexical G3248@lex '#f) G3249@r))) (set! G2ef4@add-lexicals (lambda (G324d@lab* G324e@lex* G324f@r) (if (null? G324d@lab*) G324f@r (G2ef4@add-lexicals (cdr G324d@lab*) (cdr G324e@lex*) (G2ef2@add-lexical (car G324d@lab*) (car G324e@lex*) G324f@r))))) (set! G2ef6@letrec-helper (lambda (G3253@e G3254@r G3255@mr G3256@build) ((lambda (G325b@t) ((lambda (G325d@ls/false) (if G325d@ls/false (apply (lambda (G325f@lhs* G3260@rhs* G3261@b G3262@b*) (if (not (G2d6b@valid-bound-ids? G325f@lhs*)) (G2f1a@invalid-fmls-error G3253@e G325f@lhs*) ((lambda (G3267@lex* G3268@lab*) ((lambda (G326b@rib G326c@r) ((lambda (G326f@body G3270@rhs*) (G3256@build '#f G3267@lex* G3270@rhs* G326f@body)) (G2f9a@chi-internal (G2d4d@add-subst G326b@rib (cons G3261@b G3262@b*)) G326c@r G3255@mr) (G2f80@chi-expr* (map (lambda (G3273@x) (G2d4d@add-subst G326b@rib G3273@x)) G3260@rhs*) G326c@r G3255@mr))) (G2d1c@make-full-rib G325f@lhs* G3268@lab*) (G2ef4@add-lexicals G3268@lab* G3267@lex* G3254@r))) (map G2cdd@gen-lexical G325f@lhs*) (map G2ce1@gen-label G325f@lhs*)))) G325d@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G325b@t))) (G2f60@syntax-dispatch G325b@t '(_ #(each (any any)) any . each-any)))) G3253@e))) (set! G2ef8@letrec-transformer (lambda (G3275@e G3276@r G3277@mr) (G2ef6@letrec-helper G3275@e G3276@r G3277@mr G2cc0@G2c33@build-letrec))) (set! G2efa@letrec*-transformer (lambda (G327b@e G327c@r G327d@mr) (G2ef6@letrec-helper G327b@e G327c@r G327d@mr G2cc1@G2c35@build-letrec*))) (set! G2efc@fluid-let-syntax-transformer (lambda (G3281@e G3282@r G3283@mr) ((lambda (G3288@lookup) (begin (set! G3288@lookup (lambda (G329b@x) (or (G2d7b@id->label G329b@x) (G304b@syntax-violation '#f '"unbound identifier" G3281@e G329b@x)))) ((lambda (G3289@t) ((lambda (G328b@ls/false) (if G328b@ls/false (apply (lambda (G328d@lhs* G328e@rhs* G328f@b G3290@b*) (if (not (G2d6b@valid-bound-ids? G328d@lhs*)) (G2f1a@invalid-fmls-error G3281@e G328d@lhs*) ((lambda (G3295@lab* G3296@rhs*) (G2f9a@chi-internal (cons G328f@b G3290@b*) (append (map cons G3295@lab* G3296@rhs*) G3282@r) (append (map cons G3295@lab* G3296@rhs*) G3283@mr))) (map G3288@lookup G328d@lhs*) (map (lambda (G3299@x) (G2da1@make-eval-transformer (G2fbf@expand-transformer G3299@x G3283@mr))) G328e@rhs*)))) G328b@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3289@t))) (G2f60@syntax-dispatch G3289@t '(_ #(each (any any)) any . each-any)))) G3281@e))) '#f))) (set! G2efe@type-descriptor-transformer (lambda (G329d@e G329e@r G329f@mr) ((lambda (G32a3@t) ((lambda (G32a5@ls/false) (if (and G32a5@ls/false (apply (lambda (G32a7@id) (G2d61@id? G32a7@id)) G32a5@ls/false)) (apply (lambda (G32a9@id) ((lambda (G32ab@lab) ((lambda (G32ad@b) ((lambda (G32af@type) ((lambda () (begin (if (not G32ab@lab) (G2d87@raise-unbound-error G32a9@id) (void)) (if (not (and (eq? G32af@type '$rtd) (not (list? (G2d85@binding-value G32ad@b))))) (G304b@syntax-violation '#f '"not a record type" G329d@e) (void)) (list 'quote (G2d85@binding-value G32ad@b)))))) (G2d83@binding-type G32ad@b))) (G2d7f@label->binding G32ab@lab G329e@r))) (G2d7b@id->label G32a9@id))) G32a5@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G32a3@t))) (G2f60@syntax-dispatch G32a3@t '(_ any)))) G329d@e))) (set! G2f00@record-type-descriptor-transformer (lambda (G32b1@e G32b2@r G32b3@mr) ((lambda (G32b7@t) ((lambda (G32b9@ls/false) (if (and G32b9@ls/false (apply (lambda (G32bb@id) (G2d61@id? G32bb@id)) G32b9@ls/false)) (apply (lambda (G32bd@id) ((lambda (G32bf@lab) ((lambda (G32c1@b) ((lambda (G32c3@type) ((lambda () (begin (if (not G32bf@lab) (G2d87@raise-unbound-error G32bd@id) (void)) (if (not (and (eq? G32c3@type '$rtd) (list? (G2d85@binding-value G32c1@b)))) (G304b@syntax-violation '#f '"not a record type" G32b1@e) (void)) (G2f84@chi-expr (car (G2d85@binding-value G32c1@b)) G32b2@r G32b3@mr))))) (G2d83@binding-type G32c1@b))) (G2d7f@label->binding G32bf@lab G32b2@r))) (G2d7b@id->label G32bd@id))) G32b9@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G32b7@t))) (G2f60@syntax-dispatch G32b7@t '(_ any)))) G32b1@e))) (set! G2f02@record-constructor-descriptor-transformer (lambda (G32c5@e G32c6@r G32c7@mr) ((lambda (G32cb@t) ((lambda (G32cd@ls/false) (if (and G32cd@ls/false (apply (lambda (G32cf@id) (G2d61@id? G32cf@id)) G32cd@ls/false)) (apply (lambda (G32d1@id) ((lambda (G32d3@lab) ((lambda (G32d5@b) ((lambda (G32d7@type) ((lambda () (begin (if (not G32d3@lab) (G2d87@raise-unbound-error G32d1@id) (void)) (if (not (and (eq? G32d7@type '$rtd) (list? (G2d85@binding-value G32d5@b)))) (G304b@syntax-violation '#f '"invalid type" G32c5@e) (void)) (G2f84@chi-expr (cadr (G2d85@binding-value G32d5@b)) G32c6@r G32c7@mr))))) (G2d83@binding-type G32d5@b))) (G2d7f@label->binding G32d3@lab G32c6@r))) (G2d7b@id->label G32d1@id))) G32cd@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G32cb@t))) (G2f60@syntax-dispatch G32cb@t '(_ any)))) G32c5@e))) (set! G2f04@when-macro (lambda (G32d9@e) ((lambda (G32db@t) ((lambda (G32dd@ls/false) (if G32dd@ls/false (apply (lambda (G32df@test G32e0@e G32e1@e*) (G2f16@bless (list 'if G32df@test (cons 'begin (cons G32e0@e G32e1@e*))))) G32dd@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G32db@t))) (G2f60@syntax-dispatch G32db@t '(_ any any . each-any)))) G32d9@e))) (set! G2f06@unless-macro (lambda (G32e5@e) ((lambda (G32e7@t) ((lambda (G32e9@ls/false) (if G32e9@ls/false (apply (lambda (G32eb@test G32ec@e G32ed@e*) (G2f16@bless (list 'if (list 'not G32eb@test) (cons 'begin (cons G32ec@e G32ed@e*))))) G32e9@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G32e7@t))) (G2f60@syntax-dispatch G32e7@t '(_ any any . each-any)))) G32e5@e))) (set! G2f08@if-transformer (lambda (G32f1@e G32f2@r G32f3@mr) ((lambda (G32f7@t) ((lambda (G32f9@ls/false) (if G32f9@ls/false (apply (lambda (G32fb@e0 G32fc@e1 G32fd@e2) (list 'if (G2f84@chi-expr G32fb@e0 G32f2@r G32f3@mr) (G2f84@chi-expr G32fc@e1 G32f2@r G32f3@mr) (G2f84@chi-expr G32fd@e2 G32f2@r G32f3@mr))) G32f9@ls/false) ((lambda (G3301@t) ((lambda (G3303@ls/false) (if G3303@ls/false (apply (lambda (G3305@e0 G3306@e1) (list 'if (G2f84@chi-expr G3305@e0 G32f2@r G32f3@mr) (G2f84@chi-expr G3306@e1 G32f2@r G32f3@mr) (G2cbf@G2c31@build-void))) G3303@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3301@t))) (G2f60@syntax-dispatch G3301@t '(_ any any)))) G32f7@t))) (G2f60@syntax-dispatch G32f7@t '(_ any any any)))) G32f1@e))) (set! G2f0a@and-transformer (lambda (G3309@e G330a@r G330b@mr) ((lambda (G330f@t) ((lambda (G3311@ls/false) (if G3311@ls/false (apply (lambda (G3313@e*) (cons 'and (G2f80@chi-expr* G3313@e* G330a@r G330b@mr))) G3311@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G330f@t))) (G2f60@syntax-dispatch G330f@t '(_ . each-any)))) G3309@e))) (set! G2f0c@or-transformer (lambda (G3315@e G3316@r G3317@mr) ((lambda (G331b@t) ((lambda (G331d@ls/false) (if G331d@ls/false (apply (lambda (G331f@e*) (cons 'or (G2f80@chi-expr* G331f@e* G3316@r G3317@mr))) G331d@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G331b@t))) (G2f60@syntax-dispatch G331b@t '(_ . each-any)))) G3315@e))) (set! G2f0e@case-macro (lambda (G3321@e) ((lambda (G3324@build-last G3326@build-one) (begin (set! G3324@build-last (lambda (G334b@cls) ((lambda (G334d@t) ((lambda (G334f@ls/false) (if G334f@ls/false (apply (lambda (G3351@e G3352@e*) (cons 'begin (cons G3351@e G3352@e*))) G334f@ls/false) ((lambda (G3355@t) ((lambda (G3357@ls/false) (if G3357@ls/false (apply (lambda () (G3326@build-one G334b@cls '(if #f #f))) G3357@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3355@t))) (G2f60@syntax-dispatch G3355@t '_))) G334d@t))) (G2f60@syntax-dispatch G334d@t '(#(scheme-id else) any . each-any)))) G334b@cls))) (set! G3326@build-one (lambda (G333d@cls G333e@k) ((lambda (G3341@t) ((lambda (G3343@ls/false) (if G3343@ls/false (apply (lambda (G3345@d* G3346@e G3347@e*) (list 'if (list 'memv 't (list 'quote G3345@d*)) (cons 'begin (cons G3346@e G3347@e*)) G333e@k)) G3343@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3341@t))) (G2f60@syntax-dispatch G3341@t '(each-any any . each-any)))) G333d@cls))) ((lambda (G3327@t) ((lambda (G3329@ls/false) (if G3329@ls/false (apply (lambda (G332b@expr) (G2f16@bless (cons 'let (cons (list (list 't G332b@expr)) '((if #f #f)))))) G3329@ls/false) ((lambda (G332d@t) ((lambda (G332f@ls/false) (if G332f@ls/false (apply (lambda (G3331@expr G3332@cls G3333@cls*) (G2f16@bless (list 'let (list (list 't G3331@expr)) ((letrec ((G3337@f (lambda (G3339@cls G333a@cls*) (if (null? G333a@cls*) (G3324@build-last G3339@cls) (G3326@build-one G3339@cls (G3337@f (car G333a@cls*) (cdr G333a@cls*))))))) G3337@f) G3332@cls G3333@cls*)))) G332f@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G332d@t))) (G2f60@syntax-dispatch G332d@t '(_ any any . each-any)))) G3327@t))) (G2f60@syntax-dispatch G3327@t '(_ any)))) G3321@e))) '#f '#f))) (set! G2f10@quote-transformer (lambda (G3359@e G335a@r G335b@mr) ((lambda (G335f@t) ((lambda (G3361@ls/false) (if G3361@ls/false (apply (lambda (G3363@datum) (list 'quote (G2d77@stx->datum G3363@datum))) G3361@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G335f@t))) (G2f60@syntax-dispatch G335f@t '(_ any)))) G3359@e))) (set! G2f12@case-lambda-transformer (lambda (G3365@e G3366@r G3367@mr) ((lambda (G336b@t) ((lambda (G336d@ls/false) (if G336d@ls/false (apply (lambda (G336f@fmls* G3370@b* G3371@b**) (call-with-values (lambda () (G2f8c@chi-lambda-clause* G3365@e G336f@fmls* (map cons G3370@b* G3371@b**) G3366@r G3367@mr)) (lambda (G3377@G3375 G3378@G3376) ((lambda (G337b@body* G337c@fmls*) (G2cbc@G2bfb@build-case-lambda '#f G337c@fmls* G337b@body*)) G3378@G3376 G3377@G3375)))) G336d@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G336b@t))) (G2f60@syntax-dispatch G336b@t '(_ . #(each (any any . each-any)))))) G3365@e))) (set! G2f14@lambda-transformer (lambda (G337f@e G3380@r G3381@mr) ((lambda (G3385@t) ((lambda (G3387@ls/false) (if G3387@ls/false (apply (lambda (G3389@fmls G338a@b G338b@b*) (call-with-values (lambda () (G2f8a@chi-lambda-clause G337f@e G3389@fmls (cons G338a@b G338b@b*) G3380@r G3381@mr)) (lambda (G3391@G338f G3392@G3390) ((lambda (G3395@body G3396@fmls) (G2cbb@G2bf9@build-lambda '#f G3396@fmls G3395@body)) G3392@G3390 G3391@G338f)))) G3387@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3385@t))) (G2f60@syntax-dispatch G3385@t '(_ any any . each-any)))) G337f@e))) (set! G2f16@bless (lambda (G3399@x) (G2d49@mkstx ((letrec ((G339b@f (lambda (G339d@x) (if (G2d29@stx? G339d@x) G339d@x (if (pair? G339d@x) (cons (G339b@f (car G339d@x)) (G339b@f (cdr G339d@x))) (if (symbol? G339d@x) (G2eea@scheme-stx G339d@x) (if (vector? G339d@x) (vector-map G339b@f G339d@x) G339d@x))))))) G339b@f) G3399@x) '() '() '()))) (set! G2f18@with-syntax-macro (lambda (G339f@e) ((lambda (G33a1@t) ((lambda (G33a3@ls/false) (if G33a3@ls/false (apply (lambda (G33a5@pat* G33a6@expr* G33a7@b G33a8@b*) ((lambda (G33ad@idn*) (begin (G2f88@verify-formals (map car G33ad@idn*) G339f@e) ((lambda (G33af@t*) (G2f16@bless (list 'let (map list G33af@t* G33a6@expr*) ((letrec ((G33b1@f (lambda (G33b3@pat* G33b4@t*) (if (null? G33b3@pat*) (cons 'begin (cons '#f (cons G33a7@b G33a8@b*))) (list 'syntax-case (car G33b4@t*) '() (list (car G33b3@pat*) (G33b1@f (cdr G33b3@pat*) (cdr G33b4@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G33b3@pat*)) (car G33b4@t*)))))))) G33b1@f) G33a5@pat* G33af@t*)))) (G3039@generate-temporaries G33a6@expr*)))) ((letrec ((G33b7@f (lambda (G33b9@pat*) (if (null? G33b9@pat*) '() (call-with-values (lambda () (G2f5e@convert-pattern (car G33b9@pat*) '())) (lambda (G33bd@G33bb G33be@G33bc) ((lambda (G33c1@idn* G33c2@pat) (append G33c1@idn* (G33b7@f (cdr G33b9@pat*)))) G33be@G33bc G33bd@G33bb))))))) G33b7@f) G33a5@pat*))) G33a3@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G33a1@t))) (G2f60@syntax-dispatch G33a1@t '(_ #(each (any any)) any . each-any)))) G339f@e))) (set! G2f1a@invalid-fmls-error (lambda (G33c5@stx G33c6@fmls) ((lambda (G33c9@t) ((lambda (G33cb@ls/false) (if G33cb@ls/false (apply (lambda (G33cd@id* G33ce@last) ((letrec ((G33d1@f (lambda (G33d3@id*) (if (null? G33d3@id*) (values) (if (not (G2d61@id? (car G33d3@id*))) (G304b@syntax-violation '#f '"not an identifier" G33c5@stx (car G33d3@id*)) (begin (G33d1@f (cdr G33d3@id*)) (if (G2d6f@bound-id-member? (car G33d3@id*) (cdr G33d3@id*)) (G304b@syntax-violation '#f '"duplicate binding" G33c5@stx (car G33d3@id*)) (void)))))))) G33d1@f) (if (G2d61@id? G33ce@last) (cons G33ce@last G33cd@id*) (if (G2d57@syntax-null? G33ce@last) G33cd@id* (G304b@syntax-violation '#f '"not an identifier" G33c5@stx G33ce@last))))) G33cb@ls/false) ((lambda (G33d5@t) ((lambda (G33d7@ls/false) (if G33d7@ls/false (apply (lambda () (G304b@syntax-violation '#f '"malformed binding form" G33c5@stx G33c6@fmls)) G33d7@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G33d5@t))) (G2f60@syntax-dispatch G33d5@t '_))) G33c9@t))) (G2f60@syntax-dispatch G33c9@t '#(each+ any () any)))) G33c6@fmls))) (set! G2f1c@let-macro (lambda (G33d9@stx) ((lambda (G33db@t) ((lambda (G33dd@ls/false) (if G33dd@ls/false (apply (lambda (G33df@lhs* G33e0@rhs* G33e1@b G33e2@b*) (if (G2d6b@valid-bound-ids? G33df@lhs*) (G2f16@bless (cons (cons 'lambda (cons G33df@lhs* (cons G33e1@b G33e2@b*))) G33e0@rhs*)) (G2f1a@invalid-fmls-error G33d9@stx G33df@lhs*))) G33dd@ls/false) ((lambda (G33e7@t) ((lambda (G33e9@ls/false) (if (and G33e9@ls/false (apply (lambda (G33eb@f G33ec@lhs* G33ed@rhs* G33ee@b G33ef@b*) (G2d61@id? G33eb@f)) G33e9@ls/false)) (apply (lambda (G33f5@f G33f6@lhs* G33f7@rhs* G33f8@b G33f9@b*) (if (G2d6b@valid-bound-ids? G33f6@lhs*) (G2f16@bless (cons (list 'letrec (list (list G33f5@f (cons 'lambda (cons G33f6@lhs* (cons G33f8@b G33f9@b*))))) G33f5@f) G33f7@rhs*)) (G2f1a@invalid-fmls-error G33d9@stx G33f6@lhs*))) G33e9@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G33e7@t))) (G2f60@syntax-dispatch G33e7@t '(_ any #(each (any any)) any . each-any)))) G33db@t))) (G2f60@syntax-dispatch G33db@t '(_ #(each (any any)) any . each-any)))) G33d9@stx))) (set! G2f1e@let-values-macro (lambda (G33ff@stx) ((lambda (G3402@rename G3404@rename*) (begin (set! G3402@rename (lambda (G3464@x G3465@old* G3466@new*) (begin (if (not (G2d61@id? G3464@x)) (G304b@syntax-violation '#f '"not an indentifier" G33ff@stx G3464@x) (void)) (if (G2d6f@bound-id-member? G3464@x G3465@old*) (G304b@syntax-violation '#f '"duplicate binding" G33ff@stx G3464@x) (void)) ((lambda (G346a@y) (values G346a@y (cons G3464@x G3465@old*) (cons G346a@y G3466@new*))) (gensym (G3051@syntax->datum G3464@x)))))) (set! G3404@rename* (lambda (G3452@x* G3453@old* G3454@new*) (if (null? G3452@x*) (values '() G3453@old* G3454@new*) (call-with-values (lambda () (G3402@rename (car G3452@x*) G3453@old* G3454@new*)) (lambda (G3458@x G3459@old* G345a@new*) (call-with-values (lambda () (G3404@rename* (cdr G3452@x*) G3459@old* G345a@new*)) (lambda (G345e@x* G345f@old* G3460@new*) (values (cons G3458@x G345e@x*) G345f@old* G3460@new*)))))))) ((lambda (G3405@t) ((lambda (G3407@ls/false) (if G3407@ls/false (apply (lambda (G3409@b G340a@b*) (cons* (G2f16@bless 'let) '() G3409@b G340a@b*)) G3407@ls/false) ((lambda (G340d@t) ((lambda (G340f@ls/false) (if G340f@ls/false (apply (lambda (G3411@lhs* G3412@rhs* G3413@b G3414@b*) (G2f16@bless ((letrec ((G3419@f (lambda (G341b@lhs* G341c@rhs* G341d@old* G341e@new*) (if (null? G341b@lhs*) (cons 'let (cons (map list G341d@old* G341e@new*) (cons G3413@b G3414@b*))) ((lambda (G3423@t) ((lambda (G3425@ls/false) (if G3425@ls/false (apply (lambda (G3427@x*) (call-with-values (lambda () (G3404@rename* G3427@x* G341d@old* G341e@new*)) (lambda (G342c@G3429 G342d@G342a G342e@G342b) ((lambda (G3432@new* G3433@old* G3434@y*) (list 'call-with-values (list 'lambda '() (car G341c@rhs*)) (list 'lambda G3434@y* (G3419@f (cdr G341b@lhs*) (cdr G341c@rhs*) G3433@old* G3432@new*)))) G342e@G342b G342d@G342a G342c@G3429)))) G3425@ls/false) ((lambda (G3438@t) ((lambda (G343a@ls/false) (if G343a@ls/false (apply (lambda (G343c@x* G343d@x) (call-with-values (lambda () (G3402@rename G343d@x G341d@old* G341e@new*)) (lambda (G3440@y G3441@old* G3442@new*) (call-with-values (lambda () (G3404@rename* G343c@x* G3441@old* G3442@new*)) (lambda (G3446@y* G3447@old* G3448@new*) (list 'call-with-values (list 'lambda '() (car G341c@rhs*)) (list 'lambda (append G3446@y* G3440@y) (G3419@f (cdr G341b@lhs*) (cdr G341c@rhs*) G3447@old* G3448@new*)))))))) G343a@ls/false) ((lambda (G344c@t) ((lambda (G344e@ls/false) (if G344e@ls/false (apply (lambda (G3450@others) (G304b@syntax-violation '#f '"malformed bindings" G33ff@stx G3450@others)) G344e@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G344c@t))) (G2f60@syntax-dispatch G344c@t 'any))) G3438@t))) (G2f60@syntax-dispatch G3438@t '#(each+ any () any)))) G3423@t))) (G2f60@syntax-dispatch G3423@t 'each-any))) (car G341b@lhs*)))))) G3419@f) G3411@lhs* G3412@rhs* '() '()))) G340f@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G340d@t))) (G2f60@syntax-dispatch G340d@t '(_ #(each (any any)) any . each-any)))) G3405@t))) (G2f60@syntax-dispatch G3405@t '(_ () any . each-any)))) G33ff@stx))) '#f '#f))) (set! G2f20@let*-values-macro (lambda (G346c@stx) ((lambda (G346f@check) (begin (set! G346f@check (lambda (G349e@x*) (if (not (null? G349e@x*)) ((lambda (G34a0@x) (begin (if (not (G2d61@id? G34a0@x)) (G304b@syntax-violation '#f '"not an identifier" G346c@stx G34a0@x) (void)) (G346f@check (cdr G349e@x*)) (if (G2d6f@bound-id-member? G34a0@x (cdr G349e@x*)) (G304b@syntax-violation '#f '"duplicate identifier" G346c@stx G34a0@x) (void)))) (car G349e@x*)) (void)))) ((lambda (G3470@t) ((lambda (G3472@ls/false) (if G3472@ls/false (apply (lambda (G3474@b G3475@b*) (cons* (G2f16@bless 'let) '() G3474@b G3475@b*)) G3472@ls/false) ((lambda (G3478@t) ((lambda (G347a@ls/false) (if G347a@ls/false (apply (lambda (G347c@lhs* G347d@rhs* G347e@b G347f@b*) (G2f16@bless ((letrec ((G3484@f (lambda (G3486@lhs* G3487@rhs*) (if (null? G3486@lhs*) (cons 'begin (cons G347e@b G347f@b*)) ((lambda (G348a@t) ((lambda (G348c@ls/false) (if G348c@ls/false (apply (lambda (G348e@x*) (begin (G346f@check G348e@x*) (list 'call-with-values (list 'lambda '() (car G3487@rhs*)) (list 'lambda G348e@x* (G3484@f (cdr G3486@lhs*) (cdr G3487@rhs*)))))) G348c@ls/false) ((lambda (G3490@t) ((lambda (G3492@ls/false) (if G3492@ls/false (apply (lambda (G3494@x* G3495@x) (begin (G346f@check (cons G3495@x G3494@x*)) (list 'call-with-values (list 'lambda '() (car G3487@rhs*)) (list 'lambda (append G3494@x* G3495@x) (G3484@f (cdr G3486@lhs*) (cdr G3487@rhs*)))))) G3492@ls/false) ((lambda (G3498@t) ((lambda (G349a@ls/false) (if G349a@ls/false (apply (lambda (G349c@others) (G304b@syntax-violation '#f '"malformed bindings" G346c@stx G349c@others)) G349a@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3498@t))) (G2f60@syntax-dispatch G3498@t 'any))) G3490@t))) (G2f60@syntax-dispatch G3490@t '#(each+ any () any)))) G348a@t))) (G2f60@syntax-dispatch G348a@t 'each-any))) (car G3486@lhs*)))))) G3484@f) G347c@lhs* G347d@rhs*))) G347a@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3478@t))) (G2f60@syntax-dispatch G3478@t '(_ #(each (any any)) any . each-any)))) G3470@t))) (G2f60@syntax-dispatch G3470@t '(_ () any . each-any)))) G346c@stx))) '#f))) (set! G2f22@trace-lambda-macro (lambda (G34a2@stx) ((lambda (G34a4@t) ((lambda (G34a6@ls/false) (if G34a6@ls/false (apply (lambda (G34a8@who G34a9@fmls G34aa@b G34ab@b*) (if (G2d6b@valid-bound-ids? G34a9@fmls) (G2f16@bless (list 'make-traced-procedure (list 'quote G34a8@who) (cons 'lambda (cons G34a9@fmls (cons G34aa@b G34ab@b*))))) (G2f1a@invalid-fmls-error G34a2@stx G34a9@fmls))) G34a6@ls/false) ((lambda (G34b0@t) ((lambda (G34b2@ls/false) (if G34b2@ls/false (apply (lambda (G34b4@who G34b5@fmls G34b6@last G34b7@b G34b8@b*) (if (G2d6b@valid-bound-ids? (cons G34b6@last G34b5@fmls)) (G2f16@bless (list 'make-traced-procedure (list 'quote G34b4@who) (cons 'lambda (cons (append G34b5@fmls G34b6@last) (cons G34b7@b G34b8@b*))))) (G2f1a@invalid-fmls-error G34a2@stx (append G34b5@fmls G34b6@last)))) G34b2@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G34b0@t))) (G2f60@syntax-dispatch G34b0@t '(_ any #(each+ any () any) any . each-any)))) G34a4@t))) (G2f60@syntax-dispatch G34a4@t '(_ any each-any any . each-any)))) G34a2@stx))) (set! G2f24@trace-define-macro (lambda (G34be@stx) ((lambda (G34c0@t) ((lambda (G34c2@ls/false) (if G34c2@ls/false (apply (lambda (G34c4@who G34c5@fmls G34c6@b G34c7@b*) (if (G2d6b@valid-bound-ids? G34c5@fmls) (G2f16@bless (list 'define G34c4@who (list 'make-traced-procedure (list 'quote G34c4@who) (cons 'lambda (cons G34c5@fmls (cons G34c6@b G34c7@b*)))))) (G2f1a@invalid-fmls-error G34be@stx G34c5@fmls))) G34c2@ls/false) ((lambda (G34cc@t) ((lambda (G34ce@ls/false) (if G34ce@ls/false (apply (lambda (G34d0@who G34d1@fmls G34d2@last G34d3@b G34d4@b*) (if (G2d6b@valid-bound-ids? (cons G34d2@last G34d1@fmls)) (G2f16@bless (list 'define G34d0@who (list 'make-traced-procedure (list 'quote G34d0@who) (cons 'lambda (cons (append G34d1@fmls G34d2@last) (cons G34d3@b G34d4@b*)))))) (G2f1a@invalid-fmls-error G34be@stx (append G34d1@fmls G34d2@last)))) G34ce@ls/false) ((lambda (G34da@t) ((lambda (G34dc@ls/false) (if G34dc@ls/false (apply (lambda (G34de@who G34df@expr) (if (G2d61@id? G34de@who) (G2f16@bless (list 'define G34de@who (list 'let (list (list 'v G34df@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34de@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G304b@syntax-violation '#f '"invalid name" G34be@stx))) G34dc@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G34da@t))) (G2f60@syntax-dispatch G34da@t '(_ any any)))) G34cc@t))) (G2f60@syntax-dispatch G34cc@t '(_ (any . #(each+ any () any)) any . each-any)))) G34c0@t))) (G2f60@syntax-dispatch G34c0@t '(_ (any . each-any) any . each-any)))) G34be@stx))) (set! G2f26@trace-define-syntax-macro (lambda (G34e2@stx) ((lambda (G34e4@t) ((lambda (G34e6@ls/false) (if G34e6@ls/false (apply (lambda (G34e8@who G34e9@expr) (if (G2d61@id? G34e8@who) (G2f16@bless (list 'define-syntax G34e8@who (list 'make-traced-macro (list 'quote G34e8@who) G34e9@expr))) (G304b@syntax-violation '#f '"invalid name" G34e2@stx))) G34e6@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G34e4@t))) (G2f60@syntax-dispatch G34e4@t '(_ any any)))) G34e2@stx))) (set! G2f28@trace-let/rec-syntax (lambda (G34ec@who) (lambda (G34ee@stx) ((lambda (G34f0@t) ((lambda (G34f2@ls/false) (if G34f2@ls/false (apply (lambda (G34f4@lhs* G34f5@rhs* G34f6@b G34f7@b*) (if (G2d6b@valid-bound-ids? G34f4@lhs*) ((lambda (G34fc@rhs*) (G2f16@bless (cons G34ec@who (cons (map list G34f4@lhs* G34fc@rhs*) (cons G34f6@b G34f7@b*))))) (map (lambda (G34fe@lhs G34ff@rhs) (list 'make-traced-macro (list 'quote G34fe@lhs) G34ff@rhs)) G34f4@lhs* G34f5@rhs*)) (G2f1a@invalid-fmls-error G34ee@stx G34f4@lhs*))) G34f2@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G34f0@t))) (G2f60@syntax-dispatch G34f0@t '(_ #(each (any any)) any . each-any)))) G34ee@stx)))) (set! G2f2a@trace-let-syntax-macro (G2f28@trace-let/rec-syntax 'let-syntax)) (set! G2f2c@trace-letrec-syntax-macro (G2f28@trace-let/rec-syntax 'letrec-syntax)) (set! G2f2e@guard-macro (lambda (G3502@x) ((lambda (G3505@gen-clauses) (begin (set! G3505@gen-clauses (lambda (G351c@con G351d@outerk G351e@clause*) ((lambda (G3523@f G3525@f*) (begin (set! G3523@f (lambda (G3558@x G3559@k) ((lambda (G355c@t) ((lambda (G355e@ls/false) (if G355e@ls/false (apply (lambda (G3560@e G3561@p) ((lambda (G3564@t) (list 'let (list (list G3564@t G3560@e)) (list 'if G3564@t (list G3561@p G3564@t) G3559@k))) (gensym))) G355e@ls/false) ((lambda (G3566@t) ((lambda (G3568@ls/false) (if G3568@ls/false (apply (lambda (G356a@e) ((lambda (G356c@t) (list 'let (list (list G356c@t G356a@e)) (list 'if G356c@t G356c@t G3559@k))) (gensym))) G3568@ls/false) ((lambda (G356e@t) ((lambda (G3570@ls/false) (if G3570@ls/false (apply (lambda (G3572@e G3573@v G3574@v*) (list 'if G3572@e (cons 'begin (cons G3573@v G3574@v*)) G3559@k)) G3570@ls/false) ((lambda (G3578@t) ((lambda (G357a@ls/false) (if G357a@ls/false (apply (lambda () (G304b@syntax-violation '#f '"invalid guard clause" G3558@x)) G357a@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3578@t))) (G2f60@syntax-dispatch G3578@t '_))) G356e@t))) (G2f60@syntax-dispatch G356e@t '(any any . each-any)))) G3566@t))) (G2f60@syntax-dispatch G3566@t '(any)))) G355c@t))) (G2f60@syntax-dispatch G355c@t '(any #(scheme-id =>) any)))) G3558@x))) (set! G3525@f* (lambda (G3530@x*) ((lambda (G3532@t) ((lambda (G3534@ls/false) (if G3534@ls/false (apply (lambda () ((lambda (G3536@g) (values (list G3536@g (list 'lambda '() (list 'raise-continuable G351c@con))) G3536@g)) (gensym))) G3534@ls/false) ((lambda (G3538@t) ((lambda (G353a@ls/false) (if G353a@ls/false (apply (lambda (G353c@e G353d@e*) (values (cons 'begin (cons G353c@e G353d@e*)) '#f)) G353a@ls/false) ((lambda (G3540@t) ((lambda (G3542@ls/false) (if G3542@ls/false (apply (lambda (G3544@cls G3545@cls*) (call-with-values (lambda () (G3525@f* G3545@cls*)) (lambda (G354a@G3548 G354b@G3549) ((lambda (G354e@g G354f@e) (values (G3523@f G3544@cls G354f@e) G354e@g)) G354b@G3549 G354a@G3548)))) G3542@ls/false) ((lambda (G3552@t) ((lambda (G3554@ls/false) (if G3554@ls/false (apply (lambda (G3556@others) (G304b@syntax-violation '#f '"invalid guard clause" G3556@others)) G3554@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3552@t))) (G2f60@syntax-dispatch G3552@t 'any))) G3540@t))) (G2f60@syntax-dispatch G3540@t '(any . any)))) G3538@t))) (G2f60@syntax-dispatch G3538@t '((#(scheme-id else) any . each-any))))) G3532@t))) (G2f60@syntax-dispatch G3532@t '()))) G3530@x*))) (call-with-values (lambda () (G3525@f* G351e@clause*)) (lambda (G3528@G3526 G3529@G3527) ((lambda (G352c@raisek G352d@code) (if G352c@raisek (list (list 'call/cc (list 'lambda (list G352c@raisek) (list G351d@outerk (list 'lambda '() G352d@code))))) (list G351d@outerk (list 'lambda '() G352d@code)))) G3529@G3527 G3528@G3526))))) '#f '#f))) ((lambda (G3506@t) ((lambda (G3508@ls/false) (if (and G3508@ls/false (apply (lambda (G350a@con G350b@clause* G350c@b G350d@b*) (G2d61@id? G350a@con)) G3508@ls/false)) (apply (lambda (G3512@con G3513@clause* G3514@b G3515@b*) ((lambda (G351a@outerk) (G2f16@bless (list (list 'call/cc (list 'lambda (list G351a@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G3512@con) (G3505@gen-clauses G3512@con G351a@outerk G3513@clause*)) (cons 'lambda (cons '() (cons G3514@b G3515@b*)))))))))) (gensym))) G3508@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3506@t))) (G2f60@syntax-dispatch G3506@t '(_ (any . each-any) any . each-any)))) G3502@x))) '#f))) (set! G2f30@define-enumeration-macro (lambda (G357c@stx) ((lambda (G357f@set? G3581@remove-dups) (begin (set! G357f@set? (lambda (G3598@x) (or (null? G3598@x) (and (not (memq (car G3598@x) (cdr G3598@x))) (G357f@set? (cdr G3598@x)))))) (set! G3581@remove-dups (lambda (G3596@ls) (if (null? G3596@ls) '() (cons (car G3596@ls) (G3581@remove-dups (remq (car G3596@ls) (cdr G3596@ls))))))) ((lambda (G3582@t) ((lambda (G3584@ls/false) (if (and G3584@ls/false (apply (lambda (G3586@name G3587@id* G3588@maker) (and (G2d61@id? G3586@name) (G2d61@id? G3588@maker) (for-all G2d61@id? G3587@id*))) G3584@ls/false)) (apply (lambda (G358c@name G358d@id* G358e@maker) ((lambda (G3592@name* G3593@mk) (G2f16@bless (list 'begin (list 'define G3593@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3592@name*)))) (list 'define-syntax G358c@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3592@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G358c@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G358e@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G358e@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3592@name*)) (cons 'syntax-violation (cons (list 'quote G358e@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3593@mk '('(n* ...)))))))))))) (G3581@remove-dups (G3051@syntax->datum G358d@id*)) (gensym))) G3584@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3582@t))) (G2f60@syntax-dispatch G3582@t '(_ any each-any any)))) G357c@stx))) '#f '#f))) (set! G2f32@time-macro (lambda (G359a@stx) ((lambda (G359c@t) ((lambda (G359e@ls/false) (if G359e@ls/false (apply (lambda (G35a0@expr) ((lambda (G35a2@str) (G2f16@bless (list 'time-it G35a2@str (list 'lambda '() G35a0@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G35a6@G35a4 G35a7@G35a5) ((lambda (G35aa@e G35ab@p) (begin (write (G3051@syntax->datum G35a0@expr) G35ab@p) (G35aa@e))) G35a7@G35a5 G35a6@G35a4))))) G359e@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G359c@t))) (G2f60@syntax-dispatch G359c@t '(_ any)))) G359a@stx))) (set! G2f34@delay-macro (lambda (G35ae@stx) ((lambda (G35b0@t) ((lambda (G35b2@ls/false) (if G35b2@ls/false (apply (lambda (G35b4@expr) (G2f16@bless (list 'make-promise (list 'lambda '() G35b4@expr)))) G35b2@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G35b0@t))) (G2f60@syntax-dispatch G35b0@t '(_ any)))) G35ae@stx))) (set! G2f36@assert-macro (lambda (G35b6@stx) ((lambda (G35b8@t) ((lambda (G35ba@ls/false) (if G35ba@ls/false (apply (lambda (G35bc@expr) ((lambda (G35be@pos) (G2f16@bless (list 'unless G35bc@expr (list 'assertion-error (list 'quote G35bc@expr) (list 'quote G35be@pos))))) (or (G3043@expression-position G35b6@stx) (G3043@expression-position G35bc@expr)))) G35ba@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G35b8@t))) (G2f60@syntax-dispatch G35b8@t '(_ any)))) G35b6@stx))) (set! G2f38@endianness-macro (lambda (G35c0@stx) ((lambda (G35c2@t) ((lambda (G35c4@ls/false) (if G35c4@ls/false (apply (lambda (G35c6@e) ((lambda (G35c8@t) (if (memv G35c8@t '(little)) (G2f16@bless ''little) (if (memv G35c8@t '(big)) (G2f16@bless ''big) (G304b@syntax-violation '#f '"endianness must be big or little" G35c0@stx)))) (G3051@syntax->datum G35c6@e))) G35c4@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G35c2@t))) (G2f60@syntax-dispatch G35c2@t '(_ any)))) G35c0@stx))) (set! G2f3a@identifier-syntax-macro (lambda (G35ca@stx) ((lambda (G35cc@t) ((lambda (G35ce@ls/false) (if G35ce@ls/false (apply (lambda (G35d0@expr) (G2f16@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G35d0@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G35d0@expr) '((syntax (e* ...)))))))))) G35ce@ls/false) ((lambda (G35d2@t) ((lambda (G35d4@ls/false) (if (and G35d4@ls/false (apply (lambda (G35d6@id1 G35d7@expr1 G35d8@id2 G35d9@expr2 G35da@expr3) (and (G2d61@id? G35d6@id1) (G2d61@id? G35d8@id2) (G2d61@id? G35d9@expr2))) G35d4@ls/false)) (apply (lambda (G35e0@id1 G35e1@expr1 G35e2@id2 G35e3@expr2 G35e4@expr3) (G2f16@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35e1@expr1)) (list (list 'set! 'id G35e3@expr2) (list 'syntax G35e4@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35e1@expr1 '(e* ...))))))))) G35d4@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G35d2@t))) (G2f60@syntax-dispatch G35d2@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G35cc@t))) (G2f60@syntax-dispatch G35cc@t '(_ any)))) G35ca@stx))) (set! G2f3c@do-macro (lambda (G35ea@stx) ((lambda (G35ed@bind) (begin (set! G35ed@bind (lambda (G3604@x) ((lambda (G3606@t) ((lambda (G3608@ls/false) (if G3608@ls/false (apply (lambda (G360a@x G360b@init) (list G360a@x G360b@init G360a@x)) G3608@ls/false) ((lambda (G360e@t) ((lambda (G3610@ls/false) (if G3610@ls/false (apply (lambda (G3612@x G3613@init G3614@step) (list G3612@x G3613@init G3614@step)) G3610@ls/false) ((lambda (G3618@t) ((lambda (G361a@ls/false) (if G361a@ls/false (apply (lambda () (G304b@syntax-violation '#f '"invalid binding" G35ea@stx)) G361a@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3618@t))) (G2f60@syntax-dispatch G3618@t '_))) G360e@t))) (G2f60@syntax-dispatch G360e@t '(any any any)))) G3606@t))) (G2f60@syntax-dispatch G3606@t '(any any)))) G3604@x))) ((lambda (G35ee@t) ((lambda (G35f0@ls/false) (if G35f0@ls/false (apply (lambda (G35f2@binding* G35f3@test G35f4@expr* G35f5@command*) ((lambda (G35fa@t) ((lambda (G35fc@ls/false) (if G35fc@ls/false (apply (lambda (G35fe@x* G35ff@init* G3600@step*) (if (G2d6b@valid-bound-ids? G35fe@x*) (G2f16@bless (list 'letrec (list (list 'loop (list 'lambda G35fe@x* (list 'if G35f3@test (cons 'begin (cons '(if #f #f) G35f4@expr*)) (cons 'begin (append G35f5@command* (list (cons 'loop G3600@step*)))))))) (cons 'loop G35ff@init*))) (G304b@syntax-violation '#f '"invalid bindings" G35ea@stx))) G35fc@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G35fa@t))) (G2f60@syntax-dispatch G35fa@t '#(each (any any any))))) (map G35ed@bind G35f2@binding*))) G35f0@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G35ee@t))) (G2f60@syntax-dispatch G35ee@t '(_ each-any (any . each-any) . each-any)))) G35ea@stx))) '#f))) (set! G2f3e@let*-macro (lambda (G361c@stx) ((lambda (G361e@t) ((lambda (G3620@ls/false) (if (and G3620@ls/false (apply (lambda (G3622@lhs* G3623@rhs* G3624@b G3625@b*) (for-all G2d61@id? G3622@lhs*)) G3620@ls/false)) (apply (lambda (G362a@lhs* G362b@rhs* G362c@b G362d@b*) (G2f16@bless ((letrec ((G3632@f (lambda (G3634@x*) (if (null? G3634@x*) (cons 'let (cons '() (cons G362c@b G362d@b*))) (list 'let (list (car G3634@x*)) (G3632@f (cdr G3634@x*))))))) G3632@f) (map list G362a@lhs* G362b@rhs*)))) G3620@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G361e@t))) (G2f60@syntax-dispatch G361e@t '(_ #(each (any any)) any . each-any)))) G361c@stx))) (set! G2f40@or-macro (lambda (G3636@stx) ((lambda (G3638@t) ((lambda (G363a@ls/false) (if G363a@ls/false (apply (lambda () '#f) G363a@ls/false) ((lambda (G363c@t) ((lambda (G363e@ls/false) (if G363e@ls/false (apply (lambda (G3640@e G3641@e*) (G2f16@bless ((letrec ((G3644@f (lambda (G3646@e G3647@e*) (if (null? G3647@e*) (list 'begin '#f G3646@e) (list 'let (list (list 't G3646@e)) (list 'if 't 't (G3644@f (car G3647@e*) (cdr G3647@e*)))))))) G3644@f) G3640@e G3641@e*))) G363e@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G363c@t))) (G2f60@syntax-dispatch G363c@t '(_ any . each-any)))) G3638@t))) (G2f60@syntax-dispatch G3638@t '(_)))) G3636@stx))) (set! G2f42@and-macro (lambda (G364a@stx) ((lambda (G364c@t) ((lambda (G364e@ls/false) (if G364e@ls/false (apply (lambda () '#t) G364e@ls/false) ((lambda (G3650@t) ((lambda (G3652@ls/false) (if G3652@ls/false (apply (lambda (G3654@e G3655@e*) (G2f16@bless ((letrec ((G3658@f (lambda (G365a@e G365b@e*) (if (null? G365b@e*) (list 'begin '#f G365a@e) (cons 'if (cons G365a@e (cons (G3658@f (car G365b@e*) (cdr G365b@e*)) '(#f)))))))) G3658@f) G3654@e G3655@e*))) G3652@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3650@t))) (G2f60@syntax-dispatch G3650@t '(_ any . each-any)))) G364c@t))) (G2f60@syntax-dispatch G364c@t '(_)))) G364a@stx))) (set! G2f44@cond-macro (lambda (G365e@stx) ((lambda (G3660@t) ((lambda (G3662@ls/false) (if G3662@ls/false (apply (lambda (G3664@cls G3665@cls*) (G2f16@bless ((letrec ((G3668@f (lambda (G366a@cls G366b@cls*) (if (null? G366b@cls*) ((lambda (G366e@t) ((lambda (G3670@ls/false) (if G3670@ls/false (apply (lambda (G3672@e G3673@e*) (cons 'begin (cons G3672@e G3673@e*))) G3670@ls/false) ((lambda (G3676@t) ((lambda (G3678@ls/false) (if G3678@ls/false (apply (lambda (G367a@e G367b@p) (list 'let (list (list 't G367a@e)) (list 'if 't (cons G367b@p '(t))))) G3678@ls/false) ((lambda (G367e@t) ((lambda (G3680@ls/false) (if G3680@ls/false (apply (lambda (G3682@e) (cons 'or (cons G3682@e '((if #f #f))))) G3680@ls/false) ((lambda (G3684@t) ((lambda (G3686@ls/false) (if G3686@ls/false (apply (lambda (G3688@e G3689@e*) (list 'if G3688@e (cons 'begin G3689@e*))) G3686@ls/false) ((lambda (G368c@t) ((lambda (G368e@ls/false) (if G368e@ls/false (apply (lambda () (G304b@syntax-violation '#f '"invalid last clause" G365e@stx)) G368e@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G368c@t))) (G2f60@syntax-dispatch G368c@t '_))) G3684@t))) (G2f60@syntax-dispatch G3684@t '(any . each-any)))) G367e@t))) (G2f60@syntax-dispatch G367e@t '(any)))) G3676@t))) (G2f60@syntax-dispatch G3676@t '(any #(scheme-id =>) any)))) G366e@t))) (G2f60@syntax-dispatch G366e@t '(#(scheme-id else) any . each-any)))) G366a@cls) ((lambda (G3690@t) ((lambda (G3692@ls/false) (if G3692@ls/false (apply (lambda (G3694@e G3695@e*) (G304b@syntax-violation '#f '"incorrect position of keyword else" G365e@stx)) G3692@ls/false) ((lambda (G3698@t) ((lambda (G369a@ls/false) (if G369a@ls/false (apply (lambda (G369c@e G369d@p) (list 'let (list (list 't G369c@e)) (list 'if 't (cons G369d@p '(t)) (G3668@f (car G366b@cls*) (cdr G366b@cls*))))) G369a@ls/false) ((lambda (G36a0@t) ((lambda (G36a2@ls/false) (if G36a2@ls/false (apply (lambda (G36a4@e) (list 'or G36a4@e (G3668@f (car G366b@cls*) (cdr G366b@cls*)))) G36a2@ls/false) ((lambda (G36a6@t) ((lambda (G36a8@ls/false) (if G36a8@ls/false (apply (lambda (G36aa@e G36ab@e*) (list 'if G36aa@e (cons 'begin G36ab@e*) (G3668@f (car G366b@cls*) (cdr G366b@cls*)))) G36a8@ls/false) ((lambda (G36ae@t) ((lambda (G36b0@ls/false) (if G36b0@ls/false (apply (lambda () (G304b@syntax-violation '#f '"invalid last clause" G365e@stx)) G36b0@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G36ae@t))) (G2f60@syntax-dispatch G36ae@t '_))) G36a6@t))) (G2f60@syntax-dispatch G36a6@t '(any . each-any)))) G36a0@t))) (G2f60@syntax-dispatch G36a0@t '(any)))) G3698@t))) (G2f60@syntax-dispatch G3698@t '(any #(scheme-id =>) any)))) G3690@t))) (G2f60@syntax-dispatch G3690@t '(#(scheme-id else) any . each-any)))) G366a@cls))))) G3668@f) G3664@cls G3665@cls*))) G3662@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3660@t))) (G2f60@syntax-dispatch G3660@t '(_ any . each-any)))) G365e@stx))) (set! G2f46@do-include (lambda (G36b2@stx G36b3@id G36b4@filename) ((lambda (G36b8@filename) (begin (if (not (and (string? G36b8@filename) (G2d61@id? G36b3@id))) (G304b@syntax-violation '#f '"invalid syntax" G36b2@stx) (void)) (cons (G2f16@bless 'begin) (with-input-from-file G36b8@filename (lambda () ((letrec ((G36ba@f (lambda (G36bc@ls) ((lambda (G36be@x) (if (eof-object? G36be@x) (reverse G36bc@ls) (G36ba@f (cons (G2d3f@datum->stx G36b3@id G36be@x) G36bc@ls)))) (G28f0@G2819@read-annotated))))) G36ba@f) '())))))) (G2d77@stx->datum G36b4@filename)))) (set! G2f48@include-macro (lambda (G36c0@e) ((lambda (G36c2@t) ((lambda (G36c4@ls/false) (if G36c4@ls/false (apply (lambda (G36c6@id G36c7@filename) (G2f46@do-include G36c0@e G36c6@id G36c7@filename)) G36c4@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G36c2@t))) (G2f60@syntax-dispatch G36c2@t '(any any)))) G36c0@e))) (set! G2f4a@include-into-macro (lambda (G36ca@e) ((lambda (G36cc@t) ((lambda (G36ce@ls/false) (if G36ce@ls/false (apply (lambda (G36d0@id G36d1@filename) (G2f46@do-include G36ca@e G36d0@id G36d1@filename)) G36ce@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G36cc@t))) (G2f60@syntax-dispatch G36cc@t '(_ any any)))) G36ca@e))) (set! G2f4c@syntax-rules-macro (lambda (G36d4@e) ((lambda (G36d6@t) ((lambda (G36d8@ls/false) (if G36d8@ls/false (apply (lambda (G36da@lits G36db@pat* G36dc@tmp*) (begin (G2f66@verify-literals G36da@lits G36d4@e) (G2f16@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36da@lits (map (lambda (G36e0@pat G36e1@tmp) ((lambda (G36e4@t) ((lambda (G36e6@ls/false) (if G36e6@ls/false (apply (lambda (G36e8@rest) (list (cons 'g G36e8@rest) (list 'syntax G36e1@tmp))) G36e6@ls/false) ((lambda (G36ea@t) ((lambda (G36ec@ls/false) (if G36ec@ls/false (apply (lambda () (G304b@syntax-violation '#f '"invalid syntax-rules pattern" G36d4@e G36e0@pat)) G36ec@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G36ea@t))) (G2f60@syntax-dispatch G36ea@t '_))) G36e4@t))) (G2f60@syntax-dispatch G36e4@t '(_ . any)))) G36e0@pat)) G36db@pat* G36dc@tmp*)))))))) G36d8@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G36d6@t))) (G2f60@syntax-dispatch G36d6@t '(_ each-any . #(each (any any)))))) G36d4@e))) (set! G2f4e@quasiquote-macro ((lambda () ((lambda (G36ef@datum G370d@quasicons* G370f@quasicons G3711@quasiappend G3713@quasivector G3715@vquasi G3717@quasi) (begin (set! G36ef@datum (lambda (G37f2@x) (list (G2eea@scheme-stx 'quote) (G2d49@mkstx G37f2@x '() '() '())))) (set! G370d@quasicons* (lambda (G37ea@x G37eb@y) ((letrec ((G37ee@f (lambda (G37f0@x) (if (null? G37f0@x) G37eb@y (G370f@quasicons (car G37f0@x) (G37ee@f (cdr G37f0@x))))))) G37ee@f) G37ea@x))) (set! G370f@quasicons (lambda (G37c4@x G37c5@y) ((lambda (G37c8@t) ((lambda (G37ca@ls/false) (if G37ca@ls/false (apply (lambda (G37cc@dy) ((lambda (G37ce@t) ((lambda (G37d0@ls/false) (if G37d0@ls/false (apply (lambda (G37d2@dx) (list (G2eea@scheme-stx 'quote) (cons G37d2@dx G37cc@dy))) G37d0@ls/false) ((lambda (G37d4@t) ((lambda (G37d6@ls/false) (if G37d6@ls/false (apply (lambda () ((lambda (G37d8@t) ((lambda (G37da@ls/false) (if G37da@ls/false (apply (lambda () (list (G2eea@scheme-stx 'list) G37c4@x)) G37da@ls/false) ((lambda (G37dc@t) ((lambda (G37de@ls/false) (if G37de@ls/false (apply (lambda () (list (G2eea@scheme-stx 'cons) G37c4@x G37c5@y)) G37de@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G37dc@t))) (G2f60@syntax-dispatch G37dc@t '_))) G37d8@t))) (G2f60@syntax-dispatch G37d8@t '()))) G37cc@dy)) G37d6@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G37d4@t))) (G2f60@syntax-dispatch G37d4@t '_))) G37ce@t))) (G2f60@syntax-dispatch G37ce@t '(#(scheme-id quote) any)))) G37c4@x)) G37ca@ls/false) ((lambda (G37e0@t) ((lambda (G37e2@ls/false) (if G37e2@ls/false (apply (lambda (G37e4@stuff) (cons* (G2eea@scheme-stx 'list) G37c4@x G37e4@stuff)) G37e2@ls/false) ((lambda (G37e6@t) ((lambda (G37e8@ls/false) (if G37e8@ls/false (apply (lambda () (list (G2eea@scheme-stx 'cons) G37c4@x G37c5@y)) G37e8@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G37e6@t))) (G2f60@syntax-dispatch G37e6@t '_))) G37e0@t))) (G2f60@syntax-dispatch G37e0@t '(#(scheme-id list) . each-any)))) G37c8@t))) (G2f60@syntax-dispatch G37c8@t '(#(scheme-id quote) any)))) G37c5@y))) (set! G3711@quasiappend (lambda (G37aa@x G37ab@y) ((lambda (G37ae@ls) (if (null? G37ae@ls) (list (G2eea@scheme-stx 'quote) '()) (if (null? (cdr G37ae@ls)) (car G37ae@ls) (cons* (G2eea@scheme-stx 'append) G37ae@ls)))) ((letrec ((G37b0@f (lambda (G37b2@x) (if (null? G37b2@x) ((lambda (G37b4@t) ((lambda (G37b6@ls/false) (if G37b6@ls/false (apply (lambda () '()) G37b6@ls/false) ((lambda (G37b8@t) ((lambda (G37ba@ls/false) (if G37ba@ls/false (apply (lambda () (list G37ab@y)) G37ba@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G37b8@t))) (G2f60@syntax-dispatch G37b8@t '_))) G37b4@t))) (G2f60@syntax-dispatch G37b4@t '(#(scheme-id quote) ())))) G37ab@y) ((lambda (G37bc@t) ((lambda (G37be@ls/false) (if G37be@ls/false (apply (lambda () (G37b0@f (cdr G37b2@x))) G37be@ls/false) ((lambda (G37c0@t) ((lambda (G37c2@ls/false) (if G37c2@ls/false (apply (lambda () (cons (car G37b2@x) (G37b0@f (cdr G37b2@x)))) G37c2@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G37c0@t))) (G2f60@syntax-dispatch G37c0@t '_))) G37bc@t))) (G2f60@syntax-dispatch G37bc@t '(#(scheme-id quote) ())))) (car G37b2@x)))))) G37b0@f) G37aa@x)))) (set! G3713@quasivector (lambda (G3778@x) ((lambda (G377a@pat-x) ((lambda (G377c@t) ((lambda (G377e@ls/false) (if G377e@ls/false (apply (lambda (G3780@x*) (list (G2eea@scheme-stx 'quote) (list->vector G3780@x*))) G377e@ls/false) ((lambda (G3782@t) ((lambda (G3784@ls/false) (if G3784@ls/false (apply (lambda () ((letrec ((G3786@f (lambda (G3788@x G3789@k) ((lambda (G378c@t) ((lambda (G378e@ls/false) (if G378e@ls/false (apply (lambda (G3790@x*) (G3789@k (map (lambda (G3792@x) (list (G2eea@scheme-stx 'quote) G3792@x)) G3790@x*))) G378e@ls/false) ((lambda (G3794@t) ((lambda (G3796@ls/false) (if G3796@ls/false (apply (lambda (G3798@x*) (G3789@k G3798@x*)) G3796@ls/false) ((lambda (G379a@t) ((lambda (G379c@ls/false) (if G379c@ls/false (apply (lambda (G379e@x G379f@y) (G3786@f G379f@y (lambda (G37a2@ls) (G3789@k (cons G379e@x G37a2@ls))))) G379c@ls/false) ((lambda (G37a4@t) ((lambda (G37a6@ls/false) (if G37a6@ls/false (apply (lambda () (list (G2eea@scheme-stx 'list->vector) G377a@pat-x)) G37a6@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G37a4@t))) (G2f60@syntax-dispatch G37a4@t '_))) G379a@t))) (G2f60@syntax-dispatch G379a@t '(#(scheme-id cons) any any)))) G3794@t))) (G2f60@syntax-dispatch G3794@t '(#(scheme-id list) . each-any)))) G378c@t))) (G2f60@syntax-dispatch G378c@t '(#(scheme-id quote) each-any)))) G3788@x)))) G3786@f) G3778@x (lambda (G37a8@ls) (cons* (G2eea@scheme-stx 'vector) G37a8@ls)))) G3784@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3782@t))) (G2f60@syntax-dispatch G3782@t '_))) G377c@t))) (G2f60@syntax-dispatch G377c@t '(#(scheme-id quote) each-any)))) G377a@pat-x)) G3778@x))) (set! G3715@vquasi (lambda (G3756@p G3757@lev) ((lambda (G375a@t) ((lambda (G375c@ls/false) (if G375c@ls/false (apply (lambda (G375e@p G375f@q) ((lambda (G3762@t) ((lambda (G3764@ls/false) (if G3764@ls/false (apply (lambda (G3766@p) (if (= G3757@lev '0) (G370d@quasicons* G3766@p (G3715@vquasi G375f@q G3757@lev)) (G370f@quasicons (G370f@quasicons (G36ef@datum 'unquote) (G3717@quasi G3766@p (- G3757@lev '1))) (G3715@vquasi G375f@q G3757@lev)))) G3764@ls/false) ((lambda (G3768@t) ((lambda (G376a@ls/false) (if G376a@ls/false (apply (lambda (G376c@p) (if (= G3757@lev '0) (G3711@quasiappend G376c@p (G3715@vquasi G375f@q G3757@lev)) (G370f@quasicons (G370f@quasicons (G36ef@datum 'unquote-splicing) (G3717@quasi G376c@p (- G3757@lev '1))) (G3715@vquasi G375f@q G3757@lev)))) G376a@ls/false) ((lambda (G376e@t) ((lambda (G3770@ls/false) (if G3770@ls/false (apply (lambda (G3772@p) (G370f@quasicons (G3717@quasi G3772@p G3757@lev) (G3715@vquasi G375f@q G3757@lev))) G3770@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G376e@t))) (G2f60@syntax-dispatch G376e@t 'any))) G3768@t))) (G2f60@syntax-dispatch G3768@t '(#(scheme-id unquote-splicing) . each-any)))) G3762@t))) (G2f60@syntax-dispatch G3762@t '(#(scheme-id unquote) . each-any)))) G375e@p)) G375c@ls/false) ((lambda (G3774@t) ((lambda (G3776@ls/false) (if G3776@ls/false (apply (lambda () (list (G2eea@scheme-stx 'quote) '())) G3776@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3774@t))) (G2f60@syntax-dispatch G3774@t '()))) G375a@t))) (G2f60@syntax-dispatch G375a@t '(any . any)))) G3756@p))) (set! G3717@quasi (lambda (G3720@p G3721@lev) ((lambda (G3724@t) ((lambda (G3726@ls/false) (if G3726@ls/false (apply (lambda (G3728@p) (if (= G3721@lev '0) G3728@p (G370f@quasicons (G36ef@datum 'unquote) (G3717@quasi (list G3728@p) (- G3721@lev '1))))) G3726@ls/false) ((lambda (G372a@t) ((lambda (G372c@ls/false) (if G372c@ls/false (apply (lambda (G372e@p G372f@q) (if (= G3721@lev '0) (G370d@quasicons* G372e@p (G3717@quasi G372f@q G3721@lev)) (G370f@quasicons (G370f@quasicons (G36ef@datum 'unquote) (G3717@quasi G372e@p (- G3721@lev '1))) (G3717@quasi G372f@q G3721@lev)))) G372c@ls/false) ((lambda (G3732@t) ((lambda (G3734@ls/false) (if G3734@ls/false (apply (lambda (G3736@p G3737@q) (if (= G3721@lev '0) (G3711@quasiappend G3736@p (G3717@quasi G3737@q G3721@lev)) (G370f@quasicons (G370f@quasicons (G36ef@datum 'unquote-splicing) (G3717@quasi G3736@p (- G3721@lev '1))) (G3717@quasi G3737@q G3721@lev)))) G3734@ls/false) ((lambda (G373a@t) ((lambda (G373c@ls/false) (if G373c@ls/false (apply (lambda (G373e@p) (G370f@quasicons (G36ef@datum 'quasiquote) (G3717@quasi (list G373e@p) (+ G3721@lev '1)))) G373c@ls/false) ((lambda (G3740@t) ((lambda (G3742@ls/false) (if G3742@ls/false (apply (lambda (G3744@p G3745@q) (G370f@quasicons (G3717@quasi G3744@p G3721@lev) (G3717@quasi G3745@q G3721@lev))) G3742@ls/false) ((lambda (G3748@t) ((lambda (G374a@ls/false) (if (and G374a@ls/false (apply (lambda (G374c@x) (not (G2d29@stx? G374c@x))) G374a@ls/false)) (apply (lambda (G374e@x) (G3713@quasivector (G3715@vquasi G374e@x G3721@lev))) G374a@ls/false) ((lambda (G3750@t) ((lambda (G3752@ls/false) (if G3752@ls/false (apply (lambda (G3754@p) (list (G2eea@scheme-stx 'quote) G3754@p)) G3752@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3750@t))) (G2f60@syntax-dispatch G3750@t 'any))) G3748@t))) (G2f60@syntax-dispatch G3748@t '#(vector each-any)))) G3740@t))) (G2f60@syntax-dispatch G3740@t '(any . any)))) G373a@t))) (G2f60@syntax-dispatch G373a@t '(#(scheme-id quasiquote) any)))) G3732@t))) (G2f60@syntax-dispatch G3732@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G372a@t))) (G2f60@syntax-dispatch G372a@t '((#(scheme-id unquote) . each-any) . any)))) G3724@t))) (G2f60@syntax-dispatch G3724@t '(#(scheme-id unquote) any)))) G3720@p))) (lambda (G3718@x) ((lambda (G371a@t) ((lambda (G371c@ls/false) (if G371c@ls/false (apply (lambda (G371e@e) (G3717@quasi G371e@e '0)) G371c@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G371a@t))) (G2f60@syntax-dispatch G371a@t '(_ any)))) G3718@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f50@quasisyntax-macro ((lambda () ((lambda (G37f5@quasi) (begin (set! G37f5@quasi (lambda (G380d@p G380e@lev) ((lambda (G3811@t) ((lambda (G3813@ls/false) (if G3813@ls/false (apply (lambda (G3815@p) (if (= G380e@lev '0) ((lambda (G3817@g) (values (list G3817@g) (list G3815@p) G3817@g)) (gensym)) (call-with-values (lambda () (G37f5@quasi G3815@p (- G380e@lev '1))) (lambda (G381c@G3819 G381d@G381a G381e@G381b) ((lambda (G3822@p G3823@rhs* G3824@lhs*) (values G3824@lhs* G3823@rhs* (list 'unsyntax G3822@p))) G381e@G381b G381d@G381a G381c@G3819))))) G3813@ls/false) ((lambda (G3828@t) ((lambda (G382a@ls/false) (if (and G382a@ls/false (apply (lambda () (= G380e@lev '0)) G382a@ls/false)) (apply (lambda () (G304b@syntax-violation '#f '"incorrect use of unsyntax" G380d@p)) G382a@ls/false) ((lambda (G382c@t) ((lambda (G382e@ls/false) (if G382e@ls/false (apply (lambda (G3830@p* G3831@q) (call-with-values (lambda () (G37f5@quasi G3831@q G380e@lev)) (lambda (G3837@G3834 G3838@G3835 G3839@G3836) ((lambda (G383d@q G383e@rhs* G383f@lhs*) (if (= G380e@lev '0) ((lambda (G3843@g*) (values (append G3843@g* G383f@lhs*) (append G3830@p* G383e@rhs*) (append G3843@g* G383d@q))) (map (lambda (G3845@x) (gensym)) G3830@p*)) (call-with-values (lambda () (G37f5@quasi G3830@p* (- G380e@lev '1))) (lambda (G384a@G3847 G384b@G3848 G384c@G3849) ((lambda (G3850@p* G3851@rhs2* G3852@lhs2*) (values (append G3852@lhs2* G383f@lhs*) (append G3851@rhs2* G383e@rhs*) (cons (cons 'unsyntax G3850@p*) G383d@q))) G384c@G3849 G384b@G3848 G384a@G3847))))) G3839@G3836 G3838@G3835 G3837@G3834)))) G382e@ls/false) ((lambda (G3856@t) ((lambda (G3858@ls/false) (if G3858@ls/false (apply (lambda (G385a@p* G385b@q) (call-with-values (lambda () (G37f5@quasi G385b@q G380e@lev)) (lambda (G3861@G385e G3862@G385f G3863@G3860) ((lambda (G3867@q G3868@rhs* G3869@lhs*) (if (= G380e@lev '0) ((lambda (G386d@g*) (values (append (map (lambda (G386f@g) (cons G386f@g '(...))) G386d@g*) G3869@lhs*) (append G385a@p* G3868@rhs*) (append (apply append (map (lambda (G3871@g) (cons G3871@g '(...))) G386d@g*)) G3867@q))) (map (lambda (G3873@x) (gensym)) G385a@p*)) (call-with-values (lambda () (G37f5@quasi G385a@p* (- G380e@lev '1))) (lambda (G3878@G3875 G3879@G3876 G387a@G3877) ((lambda (G387e@p* G387f@rhs2* G3880@lhs2*) (values (append G3880@lhs2* G3869@lhs*) (append G387f@rhs2* G3868@rhs*) (cons (cons 'unsyntax-splicing G387e@p*) G3867@q))) G387a@G3877 G3879@G3876 G3878@G3875))))) G3863@G3860 G3862@G385f G3861@G385e)))) G3858@ls/false) ((lambda (G3884@t) ((lambda (G3886@ls/false) (if (and G3886@ls/false (apply (lambda () (= G380e@lev '0)) G3886@ls/false)) (apply (lambda () (G304b@syntax-violation '#f '"incorrect use of unsyntax-splicing" G380d@p)) G3886@ls/false) ((lambda (G3888@t) ((lambda (G388a@ls/false) (if G388a@ls/false (apply (lambda (G388c@p) (call-with-values (lambda () (G37f5@quasi G388c@p (+ G380e@lev '1))) (lambda (G3891@G388e G3892@G388f G3893@G3890) ((lambda (G3897@p G3898@rhs* G3899@lhs*) (values G3899@lhs* G3898@rhs* (list 'quasisyntax G3897@p))) G3893@G3890 G3892@G388f G3891@G388e)))) G388a@ls/false) ((lambda (G389d@t) ((lambda (G389f@ls/false) (if G389f@ls/false (apply (lambda (G38a1@p G38a2@q) (call-with-values (lambda () (G37f5@quasi G38a1@p G380e@lev)) (lambda (G38ab@G38a5 G38ac@G38a6 G38ad@G38a7) (call-with-values (lambda () (G37f5@quasi G38a2@q G380e@lev)) (lambda (G38b1@G38a8 G38b2@G38a9 G38b3@G38aa) ((lambda (G38b7@q G38b8@rhs2* G38b9@lhs2* G38ba@p G38bb@rhs* G38bc@lhs*) (values (append G38b9@lhs2* G38bc@lhs*) (append G38b8@rhs2* G38bb@rhs*) (cons G38ba@p G38b7@q))) G38b3@G38aa G38b2@G38a9 G38b1@G38a8 G38ad@G38a7 G38ac@G38a6 G38ab@G38a5)))))) G389f@ls/false) ((lambda (G38c3@t) ((lambda (G38c5@ls/false) (if G38c5@ls/false (apply (lambda (G38c7@x*) (call-with-values (lambda () (G37f5@quasi G38c7@x* G380e@lev)) (lambda (G38cc@G38c9 G38cd@G38ca G38ce@G38cb) ((lambda (G38d2@x* G38d3@rhs* G38d4@lhs*) (values G38d4@lhs* G38d3@rhs* (list->vector G38d2@x*))) G38ce@G38cb G38cd@G38ca G38cc@G38c9)))) G38c5@ls/false) ((lambda (G38d8@t) ((lambda (G38da@ls/false) (if G38da@ls/false (apply (lambda () (values '() '() G380d@p)) G38da@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G38d8@t))) (G2f60@syntax-dispatch G38d8@t '_))) G38c3@t))) (G2f60@syntax-dispatch G38c3@t '#(vector each-any)))) G389d@t))) (G2f60@syntax-dispatch G389d@t '(any . any)))) G3888@t))) (G2f60@syntax-dispatch G3888@t '(#(scheme-id quasisyntax) any)))) G3884@t))) (G2f60@syntax-dispatch G3884@t '#(scheme-id unsyntax-splicing)))) G3856@t))) (G2f60@syntax-dispatch G3856@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G382c@t))) (G2f60@syntax-dispatch G382c@t '((#(scheme-id unsyntax) . each-any) . any)))) G3828@t))) (G2f60@syntax-dispatch G3828@t '#(scheme-id unsyntax)))) G3811@t))) (G2f60@syntax-dispatch G3811@t '(#(scheme-id unsyntax) any)))) G380d@p))) (lambda (G37f6@x) ((lambda (G37f8@t) ((lambda (G37fa@ls/false) (if G37fa@ls/false (apply (lambda (G37fc@e) (call-with-values (lambda () (G37f5@quasi G37fc@e '0)) (lambda (G3801@G37fe G3802@G37ff G3803@G3800) ((lambda (G3807@v G3808@rhs* G3809@lhs*) (G2f16@bless (list 'syntax-case (cons 'list G3808@rhs*) '() (list G3809@lhs* (list 'syntax G3807@v))))) G3803@G3800 G3802@G37ff G3801@G37fe)))) G37fa@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G37f8@t))) (G2f60@syntax-dispatch G37f8@t '(_ any)))) G37f6@x)))) '#f)))) (set! G2f52@define-struct-macro (lambda (G38dc@stx) (G304b@syntax-violation '#f '"define-struct not supported" G38dc@stx))) (set! G2f54@define-record-type-macro (lambda (G38de@x) ((lambda (G38e1@id G38e3@get-record-name G38e5@get-record-constructor-name G38e7@get-record-predicate-name G38e9@get-clause G38eb@foo-rtd-code G38ed@parent-rtd-code G38ef@parent-rcd-code G38f1@foo-rcd-code G38f3@get-protocol-code G38f5@get-fields G38f7@get-mutator-indices G38f9@get-mutators G38fb@get-accessors G38fd@enumerate G38ff@do-define-record G3901@verify-clauses) (begin (set! G38e1@id (lambda (G3ad4@ctxt . G3ad6@str*) (G304f@datum->syntax G3ad4@ctxt (string->symbol (apply string-append (map (lambda (G3ad8@x) (if (symbol? G3ad8@x) (symbol->string G3ad8@x) (if (string? G3ad8@x) G3ad8@x (assertion-violation 'define-record-type '"BUG")))) G3ad6@str*)))))) (set! G38e3@get-record-name (lambda (G3ac2@spec) ((lambda (G3ac4@t) ((lambda (G3ac6@ls/false) (if G3ac6@ls/false (apply (lambda (G3ac8@foo G3ac9@make-foo G3aca@foo?) G3ac8@foo) G3ac6@ls/false) ((lambda (G3ace@t) ((lambda (G3ad0@ls/false) (if G3ad0@ls/false (apply (lambda (G3ad2@foo) G3ad2@foo) G3ad0@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3ace@t))) (G2f60@syntax-dispatch G3ace@t 'any))) G3ac4@t))) (G2f60@syntax-dispatch G3ac4@t '(any any any)))) G3ac2@spec))) (set! G38e5@get-record-constructor-name (lambda (G3aae@spec) ((lambda (G3ab0@t) ((lambda (G3ab2@ls/false) (if G3ab2@ls/false (apply (lambda (G3ab4@foo G3ab5@make-foo G3ab6@foo?) G3ab5@make-foo) G3ab2@ls/false) ((lambda (G3aba@t) ((lambda (G3abc@ls/false) (if (and G3abc@ls/false (apply (lambda (G3abe@foo) (G2d61@id? G3abe@foo)) G3abc@ls/false)) (apply (lambda (G3ac0@foo) (G38e1@id G3ac0@foo '"make-" (G2d77@stx->datum G3ac0@foo))) G3abc@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3aba@t))) (G2f60@syntax-dispatch G3aba@t 'any))) G3ab0@t))) (G2f60@syntax-dispatch G3ab0@t '(any any any)))) G3aae@spec))) (set! G38e7@get-record-predicate-name (lambda (G3a9a@spec) ((lambda (G3a9c@t) ((lambda (G3a9e@ls/false) (if G3a9e@ls/false (apply (lambda (G3aa0@foo G3aa1@make-foo G3aa2@foo?) G3aa2@foo?) G3a9e@ls/false) ((lambda (G3aa6@t) ((lambda (G3aa8@ls/false) (if (and G3aa8@ls/false (apply (lambda (G3aaa@foo) (G2d61@id? G3aaa@foo)) G3aa8@ls/false)) (apply (lambda (G3aac@foo) (G38e1@id G3aac@foo (G2d77@stx->datum G3aac@foo) '"?")) G3aa8@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3aa6@t))) (G2f60@syntax-dispatch G3aa6@t 'any))) G3a9c@t))) (G2f60@syntax-dispatch G3a9c@t '(any any any)))) G3a9a@spec))) (set! G38e9@get-clause (lambda (G3a88@id G3a89@ls) ((lambda (G3a8c@t) ((lambda (G3a8e@ls/false) (if G3a8e@ls/false (apply (lambda () '#f) G3a8e@ls/false) ((lambda (G3a90@t) ((lambda (G3a92@ls/false) (if G3a92@ls/false (apply (lambda (G3a94@x G3a95@rest G3a96@ls) (if (G2d69@free-id=? (G2f16@bless G3a88@id) G3a94@x) (cons G3a94@x G3a95@rest) (G38e9@get-clause G3a88@id G3a96@ls))) G3a92@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3a90@t))) (G2f60@syntax-dispatch G3a90@t '((any . any) . any)))) G3a8c@t))) (G2f60@syntax-dispatch G3a8c@t '()))) G3a89@ls))) (set! G38eb@foo-rtd-code (lambda (G3a36@name G3a37@clause* G3a38@parent-rtd-code) ((lambda (G3a3d@convert-field-spec*) (begin (set! G3a3d@convert-field-spec* (lambda (G3a6e@ls) (list->vector (map (lambda (G3a70@x) ((lambda (G3a72@t) ((lambda (G3a74@ls/false) (if G3a74@ls/false (apply (lambda (G3a76@name G3a77@rest) (list 'mutable G3a76@name)) G3a74@ls/false) ((lambda (G3a7a@t) ((lambda (G3a7c@ls/false) (if G3a7c@ls/false (apply (lambda (G3a7e@name G3a7f@rest) (list 'immutable G3a7e@name)) G3a7c@ls/false) ((lambda (G3a82@t) ((lambda (G3a84@ls/false) (if G3a84@ls/false (apply (lambda (G3a86@name) (list 'immutable G3a86@name)) G3a84@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3a82@t))) (G2f60@syntax-dispatch G3a82@t 'any))) G3a7a@t))) (G2f60@syntax-dispatch G3a7a@t '(#(scheme-id immutable) any . any)))) G3a72@t))) (G2f60@syntax-dispatch G3a72@t '(#(scheme-id mutable) any . any)))) G3a70@x)) G3a6e@ls)))) ((lambda (G3a3e@uid-code G3a3f@sealed? G3a40@opaque? G3a41@fields) (G2f16@bless (list 'make-record-type-descriptor (list 'quote G3a36@name) G3a38@parent-rtd-code G3a3e@uid-code G3a3f@sealed? G3a40@opaque? G3a41@fields))) ((lambda (G3a46@t) ((lambda (G3a48@ls/false) (if G3a48@ls/false (apply (lambda () (list 'quote (gensym))) G3a48@ls/false) ((lambda (G3a4a@t) ((lambda (G3a4c@ls/false) (if G3a4c@ls/false (apply (lambda (G3a4e@uid) (list 'quote G3a4e@uid)) G3a4c@ls/false) ((lambda (G3a50@t) ((lambda (G3a52@ls/false) (if G3a52@ls/false (apply (lambda () '#f) G3a52@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3a50@t))) (G2f60@syntax-dispatch G3a50@t '_))) G3a4a@t))) (G2f60@syntax-dispatch G3a4a@t '(_ any)))) G3a46@t))) (G2f60@syntax-dispatch G3a46@t '(_)))) (G38e9@get-clause 'nongenerative G3a37@clause*)) ((lambda (G3a54@t) ((lambda (G3a56@ls/false) (if G3a56@ls/false (apply (lambda () '#t) G3a56@ls/false) ((lambda (G3a58@t) ((lambda (G3a5a@ls/false) (if G3a5a@ls/false (apply (lambda () '#f) G3a5a@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3a58@t))) (G2f60@syntax-dispatch G3a58@t '_))) G3a54@t))) (G2f60@syntax-dispatch G3a54@t '(_ #(atom #t))))) (G38e9@get-clause 'sealed G3a37@clause*)) ((lambda (G3a5c@t) ((lambda (G3a5e@ls/false) (if G3a5e@ls/false (apply (lambda () '#t) G3a5e@ls/false) ((lambda (G3a60@t) ((lambda (G3a62@ls/false) (if G3a62@ls/false (apply (lambda () '#f) G3a62@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3a60@t))) (G2f60@syntax-dispatch G3a60@t '_))) G3a5c@t))) (G2f60@syntax-dispatch G3a5c@t '(_ #(atom #t))))) (G38e9@get-clause 'opaque G3a37@clause*)) ((lambda (G3a64@t) ((lambda (G3a66@ls/false) (if G3a66@ls/false (apply (lambda (G3a68@field-spec*) (list 'quote (G3a3d@convert-field-spec* G3a68@field-spec*))) G3a66@ls/false) ((lambda (G3a6a@t) ((lambda (G3a6c@ls/false) (if G3a6c@ls/false (apply (lambda () ''#()) G3a6c@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3a6a@t))) (G2f60@syntax-dispatch G3a6a@t '_))) G3a64@t))) (G2f60@syntax-dispatch G3a64@t '(_ . each-any)))) (G38e9@get-clause 'fields G3a37@clause*))))) '#f))) (set! G38ed@parent-rtd-code (lambda (G3a1e@clause*) ((lambda (G3a20@t) ((lambda (G3a22@ls/false) (if G3a22@ls/false (apply (lambda (G3a24@name) (list 'record-type-descriptor G3a24@name)) G3a22@ls/false) ((lambda (G3a26@t) ((lambda (G3a28@ls/false) (if G3a28@ls/false (apply (lambda () ((lambda (G3a2a@t) ((lambda (G3a2c@ls/false) (if G3a2c@ls/false (apply (lambda (G3a2e@rtd G3a2f@rcd) G3a2e@rtd) G3a2c@ls/false) ((lambda (G3a32@t) ((lambda (G3a34@ls/false) (if G3a34@ls/false (apply (lambda () '#f) G3a34@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3a32@t))) (G2f60@syntax-dispatch G3a32@t '#(atom #f)))) G3a2a@t))) (G2f60@syntax-dispatch G3a2a@t '(_ any any)))) (G38e9@get-clause 'parent-rtd G3a1e@clause*))) G3a28@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3a26@t))) (G2f60@syntax-dispatch G3a26@t '#(atom #f)))) G3a20@t))) (G2f60@syntax-dispatch G3a20@t '(_ any)))) (G38e9@get-clause 'parent G3a1e@clause*)))) (set! G38ef@parent-rcd-code (lambda (G3a06@clause*) ((lambda (G3a08@t) ((lambda (G3a0a@ls/false) (if G3a0a@ls/false (apply (lambda (G3a0c@name) (list 'record-constructor-descriptor G3a0c@name)) G3a0a@ls/false) ((lambda (G3a0e@t) ((lambda (G3a10@ls/false) (if G3a10@ls/false (apply (lambda () ((lambda (G3a12@t) ((lambda (G3a14@ls/false) (if G3a14@ls/false (apply (lambda (G3a16@rtd G3a17@rcd) G3a17@rcd) G3a14@ls/false) ((lambda (G3a1a@t) ((lambda (G3a1c@ls/false) (if G3a1c@ls/false (apply (lambda () '#f) G3a1c@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3a1a@t))) (G2f60@syntax-dispatch G3a1a@t '#(atom #f)))) G3a12@t))) (G2f60@syntax-dispatch G3a12@t '(_ any any)))) (G38e9@get-clause 'parent-rtd G3a06@clause*))) G3a10@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3a0e@t))) (G2f60@syntax-dispatch G3a0e@t '#(atom #f)))) G3a08@t))) (G2f60@syntax-dispatch G3a08@t '(_ any)))) (G38e9@get-clause 'parent G3a06@clause*)))) (set! G38f1@foo-rcd-code (lambda (G39fe@clause* G39ff@foo-rtd G3a00@protocol G3a01@parent-rcd-code) (list 'make-record-constructor-descriptor G39ff@foo-rtd G3a01@parent-rcd-code G3a00@protocol))) (set! G38f3@get-protocol-code (lambda (G39f2@clause*) ((lambda (G39f4@t) ((lambda (G39f6@ls/false) (if G39f6@ls/false (apply (lambda (G39f8@expr) G39f8@expr) G39f6@ls/false) ((lambda (G39fa@t) ((lambda (G39fc@ls/false) (if G39fc@ls/false (apply (lambda () '#f) G39fc@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G39fa@t))) (G2f60@syntax-dispatch G39fa@t '_))) G39f4@t))) (G2f60@syntax-dispatch G39f4@t '(_ any)))) (G38e9@get-clause 'protocol G39f2@clause*)))) (set! G38f5@get-fields (lambda (G39e0@clause*) ((lambda (G39e2@t) ((lambda (G39e4@ls/false) (if G39e4@ls/false (apply (lambda () '()) G39e4@ls/false) ((lambda (G39e6@t) ((lambda (G39e8@ls/false) (if G39e8@ls/false (apply (lambda (G39ea@f*) G39ea@f*) G39e8@ls/false) ((lambda (G39ec@t) ((lambda (G39ee@ls/false) (if G39ee@ls/false (apply (lambda (G39f0@rest) (G38f5@get-fields G39f0@rest)) G39ee@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G39ec@t))) (G2f60@syntax-dispatch G39ec@t '(_ . any)))) G39e6@t))) (G2f60@syntax-dispatch G39e6@t '((#(scheme-id fields) . each-any) . _)))) G39e2@t))) (G2f60@syntax-dispatch G39e2@t '()))) G39e0@clause*))) (set! G38f7@get-mutator-indices (lambda (G39c8@fields) ((letrec ((G39ca@f (lambda (G39cc@fields G39cd@i) ((lambda (G39d0@t) ((lambda (G39d2@ls/false) (if G39d2@ls/false (apply (lambda () '()) G39d2@ls/false) ((lambda (G39d4@t) ((lambda (G39d6@ls/false) (if G39d6@ls/false (apply (lambda (G39d8@rest) (cons G39cd@i (G39ca@f G39d8@rest (+ G39cd@i '1)))) G39d6@ls/false) ((lambda (G39da@t) ((lambda (G39dc@ls/false) (if G39dc@ls/false (apply (lambda (G39de@rest) (G39ca@f G39de@rest (+ G39cd@i '1))) G39dc@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G39da@t))) (G2f60@syntax-dispatch G39da@t '(_ . any)))) G39d4@t))) (G2f60@syntax-dispatch G39d4@t '((#(scheme-id mutable) . _) . any)))) G39d0@t))) (G2f60@syntax-dispatch G39d0@t '()))) G39cc@fields)))) G39ca@f) G39c8@fields '0))) (set! G38f9@get-mutators (lambda (G399e@foo G399f@fields) ((lambda (G39a3@gen-name) (begin (set! G39a3@gen-name (lambda (G39c6@x) (G304f@datum->syntax G399e@foo (string->symbol (string-append (symbol->string (G3051@syntax->datum G399e@foo)) '"-" (symbol->string (G3051@syntax->datum G39c6@x)) '"-set!"))))) ((letrec ((G39a4@f (lambda (G39a6@fields) ((lambda (G39a8@t) ((lambda (G39aa@ls/false) (if G39aa@ls/false (apply (lambda () '()) G39aa@ls/false) ((lambda (G39ac@t) ((lambda (G39ae@ls/false) (if G39ae@ls/false (apply (lambda (G39b0@name G39b1@accessor G39b2@mutator G39b3@rest) (cons G39b2@mutator (G39a4@f G39b3@rest))) G39ae@ls/false) ((lambda (G39b8@t) ((lambda (G39ba@ls/false) (if G39ba@ls/false (apply (lambda (G39bc@name G39bd@rest) (cons (G39a3@gen-name G39bc@name) (G39a4@f G39bd@rest))) G39ba@ls/false) ((lambda (G39c0@t) ((lambda (G39c2@ls/false) (if G39c2@ls/false (apply (lambda (G39c4@rest) (G39a4@f G39c4@rest)) G39c2@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G39c0@t))) (G2f60@syntax-dispatch G39c0@t '(_ . any)))) G39b8@t))) (G2f60@syntax-dispatch G39b8@t '((#(scheme-id mutable) any) . any)))) G39ac@t))) (G2f60@syntax-dispatch G39ac@t '((#(scheme-id mutable) any any any) . any)))) G39a8@t))) (G2f60@syntax-dispatch G39a8@t '()))) G39a6@fields)))) G39a4@f) G399f@fields))) '#f))) (set! G38fb@get-accessors (lambda (G395a@foo G395b@fields) ((lambda (G395f@gen-name) (begin (set! G395f@gen-name (lambda (G399c@x) (G304f@datum->syntax G395a@foo (string->symbol (string-append (symbol->string (G3051@syntax->datum G395a@foo)) '"-" (symbol->string (G3051@syntax->datum G399c@x))))))) (map (lambda (G3960@field) ((lambda (G3962@t) ((lambda (G3964@ls/false) (if (and G3964@ls/false (apply (lambda (G3966@name G3967@accessor G3968@mutator) (G2d61@id? G3967@accessor)) G3964@ls/false)) (apply (lambda (G396c@name G396d@accessor G396e@mutator) G396d@accessor) G3964@ls/false) ((lambda (G3972@t) ((lambda (G3974@ls/false) (if (and G3974@ls/false (apply (lambda (G3976@name G3977@accessor) (G2d61@id? G3977@accessor)) G3974@ls/false)) (apply (lambda (G397a@name G397b@accessor) G397b@accessor) G3974@ls/false) ((lambda (G397e@t) ((lambda (G3980@ls/false) (if (and G3980@ls/false (apply (lambda (G3982@name) (G2d61@id? G3982@name)) G3980@ls/false)) (apply (lambda (G3984@name) (G395f@gen-name G3984@name)) G3980@ls/false) ((lambda (G3986@t) ((lambda (G3988@ls/false) (if (and G3988@ls/false (apply (lambda (G398a@name) (G2d61@id? G398a@name)) G3988@ls/false)) (apply (lambda (G398c@name) (G395f@gen-name G398c@name)) G3988@ls/false) ((lambda (G398e@t) ((lambda (G3990@ls/false) (if (and G3990@ls/false (apply (lambda (G3992@name) (G2d61@id? G3992@name)) G3990@ls/false)) (apply (lambda (G3994@name) (G395f@gen-name G3994@name)) G3990@ls/false) ((lambda (G3996@t) ((lambda (G3998@ls/false) (if G3998@ls/false (apply (lambda (G399a@others) (G304b@syntax-violation '#f '"invalid field spec" G3960@field)) G3998@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3996@t))) (G2f60@syntax-dispatch G3996@t 'any))) G398e@t))) (G2f60@syntax-dispatch G398e@t 'any))) G3986@t))) (G2f60@syntax-dispatch G3986@t '(#(scheme-id immutable) any)))) G397e@t))) (G2f60@syntax-dispatch G397e@t '(#(scheme-id mutable) any)))) G3972@t))) (G2f60@syntax-dispatch G3972@t '(#(scheme-id immutable) any any)))) G3962@t))) (G2f60@syntax-dispatch G3962@t '(#(scheme-id mutable) any any any)))) G3960@field)) G395b@fields))) '#f))) (set! G38fd@enumerate (lambda (G3952@ls) ((letrec ((G3954@f (lambda (G3956@ls G3957@i) (if (null? G3956@ls) '() (cons G3957@i (G3954@f (cdr G3956@ls) (+ G3957@i '1))))))) G3954@f) G3952@ls '0))) (set! G38ff@do-define-record (lambda (G392a@namespec G392b@clause*) ((lambda (G392e@foo) ((lambda (G3930@foo-rtd) ((lambda (G3932@foo-rcd) ((lambda (G3934@protocol) ((lambda (G3936@make-foo) ((lambda (G3938@fields) ((lambda (G393a@idx*) ((lambda (G393c@foo-x*) ((lambda (G393e@set-foo-x!*) ((lambda (G3940@set-foo-idx*) ((lambda (G3942@foo?) ((lambda (G3944@foo-rtd-code) ((lambda (G3946@foo-rcd-code) ((lambda (G3948@protocol-code) ((lambda () (G2f16@bless (cons 'begin (cons (list 'define G3930@foo-rtd G3944@foo-rtd-code) (cons (list 'define G3934@protocol G3948@protocol-code) (cons (list 'define G3932@foo-rcd G3946@foo-rcd-code) (cons (list 'define-syntax G392e@foo (list 'list ''$rtd (list 'syntax G3930@foo-rtd) (list 'syntax G3932@foo-rcd))) (cons (list 'define G3942@foo? (list 'record-predicate G3930@foo-rtd)) (cons (list 'define G3936@make-foo (list 'record-constructor G3932@foo-rcd)) (append (map (lambda (G394a@foo-x G394b@idx) (list 'define G394a@foo-x (list 'record-accessor G3930@foo-rtd G394b@idx))) G393c@foo-x* G393a@idx*) (map (lambda (G394e@set-foo-x! G394f@idx) (list 'define G394e@set-foo-x! (list 'record-mutator G3930@foo-rtd G394f@idx))) G393e@set-foo-x!* G3940@set-foo-idx*))))))))))))) (G38f3@get-protocol-code G392b@clause*))) (G38f1@foo-rcd-code G392b@clause* G3930@foo-rtd G3934@protocol (G38ef@parent-rcd-code G392b@clause*)))) (G38eb@foo-rtd-code G392e@foo G392b@clause* (G38ed@parent-rtd-code G392b@clause*)))) (G38e7@get-record-predicate-name G392a@namespec))) (G38f7@get-mutator-indices G3938@fields))) (G38f9@get-mutators G392e@foo G3938@fields))) (G38fb@get-accessors G392e@foo G3938@fields))) (G38fd@enumerate G3938@fields))) (G38f5@get-fields G392b@clause*))) (G38e5@get-record-constructor-name G392a@namespec))) (gensym))) (gensym))) (gensym))) (G38e3@get-record-name G392a@namespec)))) (set! G3901@verify-clauses (lambda (G390a@x G390b@cls*) ((lambda (G390f@valid-kwds G3911@free-id-member?) (begin (set! G390f@valid-kwds (map G2f16@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3911@free-id-member? (lambda (G3926@x G3927@ls) (and (pair? G3927@ls) (or (G2d69@free-id=? G3926@x (car G3927@ls)) (G3911@free-id-member? G3926@x (cdr G3927@ls)))))) ((letrec ((G3912@f (lambda (G3914@cls* G3915@seen*) (if (not (null? G3914@cls*)) ((lambda (G3918@t) ((lambda (G391a@ls/false) (if G391a@ls/false (apply (lambda (G391c@kwd G391d@rest) (if (or (not (G2d61@id? G391c@kwd)) (not (G3911@free-id-member? G391c@kwd G390f@valid-kwds))) (G304b@syntax-violation '#f '"not a valid define-record-type keyword" G391c@kwd) (if (G2d6f@bound-id-member? G391c@kwd G3915@seen*) (G304b@syntax-violation '#f '"duplicate use of keyword " G390a@x G391c@kwd) (G3912@f (cdr G3914@cls*) (cons G391c@kwd G3915@seen*))))) G391a@ls/false) ((lambda (G3920@t) ((lambda (G3922@ls/false) (if G3922@ls/false (apply (lambda (G3924@cls) (G304b@syntax-violation '#f '"malformed define-record-type clause" G3924@cls)) G3922@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3920@t))) (G2f60@syntax-dispatch G3920@t 'any))) G3918@t))) (G2f60@syntax-dispatch G3918@t '(any . any)))) (car G3914@cls*)) (void))))) G3912@f) G390b@cls* '()))) '#f '#f))) ((lambda (G3902@t) ((lambda (G3904@ls/false) (if G3904@ls/false (apply (lambda (G3906@namespec G3907@clause*) (begin (G3901@verify-clauses G38de@x G3907@clause*) (G38ff@do-define-record G3906@namespec G3907@clause*))) G3904@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3902@t))) (G2f60@syntax-dispatch G3902@t '(_ any . each-any)))) G38de@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f56@define-condition-type-macro (lambda (G3ada@x) ((lambda (G3add@mkname) (begin (set! G3add@mkname (lambda (G3b0a@name G3b0b@suffix) (G304f@datum->syntax G3b0a@name (string->symbol (string-append (symbol->string (G3051@syntax->datum G3b0a@name)) G3b0b@suffix))))) ((lambda (G3ade@t) ((lambda (G3ae0@ls/false) (if (and G3ae0@ls/false (apply (lambda (G3ae2@ctxt G3ae3@name G3ae4@super G3ae5@constructor G3ae6@predicate G3ae7@field* G3ae8@accessor*) (and (G2d61@id? G3ae3@name) (G2d61@id? G3ae4@super) (G2d61@id? G3ae5@constructor) (G2d61@id? G3ae6@predicate) (for-all G2d61@id? G3ae7@field*) (for-all G2d61@id? G3ae8@accessor*))) G3ae0@ls/false)) (apply (lambda (G3af0@ctxt G3af1@name G3af2@super G3af3@constructor G3af4@predicate G3af5@field* G3af6@accessor*) ((lambda (G3afe@aux-accessor*) (G2f16@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3af1@name G3af3@constructor (gensym)) (cons (list 'parent G3af2@super) (cons (cons 'fields (map (lambda (G3b00@field G3b01@aux) (list 'immutable G3b00@field G3b01@aux)) G3af5@field* G3afe@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3af4@predicate (list 'condition-predicate (list 'record-type-descriptor G3af1@name))) (map (lambda (G3b04@accessor G3b05@aux) (list 'define G3b04@accessor (list 'condition-accessor (list 'record-type-descriptor G3af1@name) G3b05@aux))) G3af6@accessor* G3afe@aux-accessor*)))))) (map (lambda (G3b08@x) (gensym)) G3af6@accessor*))) G3ae0@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3ade@t))) (G2f60@syntax-dispatch G3ade@t '(any any any any any . #(each (any any)))))) G3ada@x))) '#f))) (set! G2f58@incorrect-usage-macro (lambda (G3b0e@e) (G304b@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b0e@e))) (set! G2f5a@parameterize-macro (lambda (G3b10@e) ((lambda (G3b12@t) ((lambda (G3b14@ls/false) (if G3b14@ls/false (apply (lambda (G3b16@b G3b17@b*) (G2f16@bless (cons 'let (cons '() (cons G3b16@b G3b17@b*))))) G3b14@ls/false) ((lambda (G3b1a@t) ((lambda (G3b1c@ls/false) (if G3b1c@ls/false (apply (lambda (G3b1e@olhs* G3b1f@orhs* G3b20@b G3b21@b*) ((lambda (G3b26@lhs* G3b27@rhs*) (G2f16@bless (cons (list 'lambda (append G3b26@lhs* G3b27@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b2a@lhs G3b2b@rhs) (list 'let (list (list 't (list G3b2a@lhs))) (list G3b2a@lhs G3b2b@rhs) (cons 'set! (cons G3b2b@rhs '(t))))) G3b26@lhs* G3b27@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b20@b G3b21@b*))) '(swap)))))) (append G3b1e@olhs* G3b1f@orhs*)))) (G3039@generate-temporaries G3b1e@olhs*) (G3039@generate-temporaries G3b1f@orhs*))) G3b1c@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3b1a@t))) (G2f60@syntax-dispatch G3b1a@t '(_ #(each (any any)) any . each-any)))) G3b12@t))) (G2f60@syntax-dispatch G3b12@t '(_ () any . each-any)))) G3b10@e))) (set! G2f5c@foreign-call-transformer (lambda (G3b2e@e G3b2f@r G3b30@mr) ((lambda (G3b34@t) ((lambda (G3b36@ls/false) (if G3b36@ls/false (apply (lambda (G3b38@name G3b39@arg*) (cons 'foreign-call (cons (G2f84@chi-expr G3b38@name G3b2f@r G3b30@mr) (G2f80@chi-expr* G3b39@arg* G3b2f@r G3b30@mr)))) G3b36@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3b34@t))) (G2f60@syntax-dispatch G3b34@t '(_ any . each-any)))) G3b2e@e))) (set! G2f5e@convert-pattern (lambda (G3b3c@pattern G3b3d@keys) ((lambda (G3b41@cvt* G3b43@cvt) (begin (set! G3b41@cvt* (lambda (G3bd2@p* G3bd3@n G3bd4@ids) (if (null? G3bd2@p*) (values '() G3bd4@ids) (call-with-values (lambda () (G3b41@cvt* (cdr G3bd2@p*) G3bd3@n G3bd4@ids)) (lambda (G3bda@G3bd8 G3bdb@G3bd9) ((lambda (G3bde@ids G3bdf@y) (call-with-values (lambda () (G3b43@cvt (car G3bd2@p*) G3bd3@n G3bde@ids)) (lambda (G3be4@G3be2 G3be5@G3be3) ((lambda (G3be8@ids G3be9@x) (values (cons G3be9@x G3bdf@y) G3be8@ids)) G3be5@G3be3 G3be4@G3be2)))) G3bdb@G3bd9 G3bda@G3bd8)))))) (set! G3b43@cvt (lambda (G3b44@p G3b45@n G3b46@ids) ((lambda (G3b4a@t) ((lambda (G3b4c@ls/false) (if (and G3b4c@ls/false (apply (lambda (G3b4e@id) (G2d61@id? G3b4e@id)) G3b4c@ls/false)) (apply (lambda (G3b50@id) (if (G2d6f@bound-id-member? G3b44@p G3b3d@keys) (values (vector 'free-id G3b44@p) G3b46@ids) (if (G2d69@free-id=? G3b44@p (G2eea@scheme-stx '_)) (values '_ G3b46@ids) (values 'any (cons (cons G3b44@p G3b45@n) G3b46@ids))))) G3b4c@ls/false) ((lambda (G3b52@t) ((lambda (G3b54@ls/false) (if (and G3b54@ls/false (apply (lambda (G3b56@p G3b57@dots) (G2f62@ellipsis? G3b57@dots)) G3b54@ls/false)) (apply (lambda (G3b5a@p G3b5b@dots) (call-with-values (lambda () (G3b43@cvt G3b5a@p (+ G3b45@n '1) G3b46@ids)) (lambda (G3b60@G3b5e G3b61@G3b5f) ((lambda (G3b64@ids G3b65@p) (values (if (eq? G3b65@p 'any) 'each-any (vector 'each G3b65@p)) G3b64@ids)) G3b61@G3b5f G3b60@G3b5e)))) G3b54@ls/false) ((lambda (G3b68@t) ((lambda (G3b6a@ls/false) (if (and G3b6a@ls/false (apply (lambda (G3b6c@x G3b6d@dots G3b6e@ys G3b6f@z) (G2f62@ellipsis? G3b6d@dots)) G3b6a@ls/false)) (apply (lambda (G3b74@x G3b75@dots G3b76@ys G3b77@z) (call-with-values (lambda () (G3b43@cvt G3b77@z G3b45@n G3b46@ids)) (lambda (G3b7e@G3b7c G3b7f@G3b7d) ((lambda (G3b82@ids G3b83@z) (call-with-values (lambda () (G3b41@cvt* G3b76@ys G3b45@n G3b82@ids)) (lambda (G3b88@G3b86 G3b89@G3b87) ((lambda (G3b8c@ids G3b8d@ys) (call-with-values (lambda () (G3b43@cvt G3b74@x (+ G3b45@n '1) G3b8c@ids)) (lambda (G3b92@G3b90 G3b93@G3b91) ((lambda (G3b96@ids G3b97@x) (values (vector 'each+ G3b97@x (reverse G3b8d@ys) G3b83@z) G3b96@ids)) G3b93@G3b91 G3b92@G3b90)))) G3b89@G3b87 G3b88@G3b86)))) G3b7f@G3b7d G3b7e@G3b7c)))) G3b6a@ls/false) ((lambda (G3b9a@t) ((lambda (G3b9c@ls/false) (if G3b9c@ls/false (apply (lambda (G3b9e@x G3b9f@y) (call-with-values (lambda () (G3b43@cvt G3b9f@y G3b45@n G3b46@ids)) (lambda (G3ba4@G3ba2 G3ba5@G3ba3) ((lambda (G3ba8@ids G3ba9@y) (call-with-values (lambda () (G3b43@cvt G3b9e@x G3b45@n G3ba8@ids)) (lambda (G3bae@G3bac G3baf@G3bad) ((lambda (G3bb2@ids G3bb3@x) (values (cons G3bb3@x G3ba9@y) G3bb2@ids)) G3baf@G3bad G3bae@G3bac)))) G3ba5@G3ba3 G3ba4@G3ba2)))) G3b9c@ls/false) ((lambda (G3bb6@t) ((lambda (G3bb8@ls/false) (if G3bb8@ls/false (apply (lambda () (values '() G3b46@ids)) G3bb8@ls/false) ((lambda (G3bba@t) ((lambda (G3bbc@ls/false) (if (and G3bbc@ls/false (apply (lambda (G3bbe@p) (not (G2d29@stx? G3bbe@p))) G3bbc@ls/false)) (apply (lambda (G3bc0@p) (call-with-values (lambda () (G3b43@cvt G3bc0@p G3b45@n G3b46@ids)) (lambda (G3bc4@G3bc2 G3bc5@G3bc3) ((lambda (G3bc8@ids G3bc9@p) (values (vector 'vector G3bc9@p) G3bc8@ids)) G3bc5@G3bc3 G3bc4@G3bc2)))) G3bbc@ls/false) ((lambda (G3bcc@t) ((lambda (G3bce@ls/false) (if G3bce@ls/false (apply (lambda (G3bd0@datum) (values (vector 'atom (G2d77@stx->datum G3bd0@datum)) G3b46@ids)) G3bce@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3bcc@t))) (G2f60@syntax-dispatch G3bcc@t 'any))) G3bba@t))) (G2f60@syntax-dispatch G3bba@t '#(vector each-any)))) G3bb6@t))) (G2f60@syntax-dispatch G3bb6@t '()))) G3b9a@t))) (G2f60@syntax-dispatch G3b9a@t '(any . any)))) G3b68@t))) (G2f60@syntax-dispatch G3b68@t '(any any . #(each+ any () any))))) G3b52@t))) (G2f60@syntax-dispatch G3b52@t '(any any)))) G3b4a@t))) (G2f60@syntax-dispatch G3b4a@t 'any))) G3b44@p))) (G3b43@cvt G3b3c@pattern '0 '()))) '#f '#f))) (set! G2f60@syntax-dispatch ((lambda () ((lambda (G3bed@stx^ G3bef@match-each G3bf1@match-each+ G3bf3@match-each-any G3bf5@match-empty G3bf7@combine G3bf9@match* G3bfb@match) (begin (set! G3bed@stx^ (lambda (G3cb6@e G3cb7@m* G3cb8@s* G3cb9@ae*) (if (and (null? G3cb7@m*) (null? G3cb8@s*) (null? G3cb9@ae*)) G3cb6@e (G2d49@mkstx G3cb6@e G3cb7@m* G3cb8@s* G3cb9@ae*)))) (set! G3bef@match-each (lambda (G3c99@e G3c9a@p G3c9b@m* G3c9c@s* G3c9d@ae*) (if (pair? G3c99@e) ((lambda (G3ca3@first) (and G3ca3@first ((lambda (G3ca5@rest) (and G3ca5@rest (cons G3ca3@first G3ca5@rest))) (G3bef@match-each (cdr G3c99@e) G3c9a@p G3c9b@m* G3c9c@s* G3c9d@ae*)))) (G3bfb@match (car G3c99@e) G3c9a@p G3c9b@m* G3c9c@s* G3c9d@ae* '())) (if (null? G3c99@e) '() (if (G2d29@stx? G3c99@e) (and (not (G2cdb@top-marked? G3c9b@m*)) (call-with-values (lambda () (G2d47@join-wraps G3c9b@m* G3c9c@s* G3c9d@ae* G3c99@e)) (lambda (G3caa@G3ca7 G3cab@G3ca8 G3cac@G3ca9) ((lambda (G3cb0@ae* G3cb1@s* G3cb2@m*) (G3bef@match-each (G2d2d@stx-expr G3c99@e) G3c9a@p G3cb2@m* G3cb1@s* G3cb0@ae*)) G3cac@G3ca9 G3cab@G3ca8 G3caa@G3ca7)))) (if (G28f2@G281d@annotation? G3c99@e) (G3bef@match-each (G28f4@G2821@annotation-expression G3c99@e) G3c9a@p G3c9b@m* G3c9c@s* G3c9d@ae*) '#f)))))) (set! G3bf1@match-each+ (lambda (G3c5f@e G3c60@x-pat G3c61@y-pat G3c62@z-pat G3c63@m* G3c64@s* G3c65@ae* G3c66@r) ((letrec ((G3c6f@f (lambda (G3c71@e G3c72@m* G3c73@s* G3c74@ae*) (if (pair? G3c71@e) (call-with-values (lambda () (G3c6f@f (cdr G3c71@e) G3c72@m* G3c73@s* G3c74@ae*)) (lambda (G3c7c@G3c79 G3c7d@G3c7a G3c7e@G3c7b) ((lambda (G3c82@r G3c83@y-pat G3c84@xr*) (if G3c82@r (if (null? G3c83@y-pat) ((lambda (G3c88@xr) (if G3c88@xr (values (cons G3c88@xr G3c84@xr*) G3c83@y-pat G3c82@r) (values '#f '#f '#f))) (G3bfb@match (car G3c71@e) G3c60@x-pat G3c72@m* G3c73@s* G3c74@ae* '())) (values '() (cdr G3c83@y-pat) (G3bfb@match (car G3c71@e) (car G3c83@y-pat) G3c72@m* G3c73@s* G3c74@ae* G3c82@r))) (values '#f '#f '#f))) G3c7e@G3c7b G3c7d@G3c7a G3c7c@G3c79))) (if (G2d29@stx? G3c71@e) (if (G2cdb@top-marked? G3c72@m*) (values '() G3c61@y-pat (G3bfb@match G3c71@e G3c62@z-pat G3c72@m* G3c73@s* G3c74@ae* G3c66@r)) (call-with-values (lambda () (G2d47@join-wraps G3c72@m* G3c73@s* G3c74@ae* G3c71@e)) (lambda (G3c8d@G3c8a G3c8e@G3c8b G3c8f@G3c8c) ((lambda (G3c93@ae* G3c94@s* G3c95@m*) (G3c6f@f (G2d2d@stx-expr G3c71@e) G3c95@m* G3c94@s* G3c93@ae*)) G3c8f@G3c8c G3c8e@G3c8b G3c8d@G3c8a)))) (if (G28f2@G281d@annotation? G3c71@e) (G3c6f@f (G28f4@G2821@annotation-expression G3c71@e) G3c72@m* G3c73@s* G3c74@ae*) (values '() G3c61@y-pat (G3bfb@match G3c71@e G3c62@z-pat G3c72@m* G3c73@s* G3c74@ae* G3c66@r)))))))) G3c6f@f) G3c5f@e G3c63@m* G3c64@s* G3c65@ae*))) (set! G3bf3@match-each-any (lambda (G3c46@e G3c47@m* G3c48@s* G3c49@ae*) (if (pair? G3c46@e) ((lambda (G3c4e@l) (and G3c4e@l (cons (G3bed@stx^ (car G3c46@e) G3c47@m* G3c48@s* G3c49@ae*) G3c4e@l))) (G3bf3@match-each-any (cdr G3c46@e) G3c47@m* G3c48@s* G3c49@ae*)) (if (null? G3c46@e) '() (if (G2d29@stx? G3c46@e) (and (not (G2cdb@top-marked? G3c47@m*)) (call-with-values (lambda () (G2d47@join-wraps G3c47@m* G3c48@s* G3c49@ae* G3c46@e)) (lambda (G3c53@G3c50 G3c54@G3c51 G3c55@G3c52) ((lambda (G3c59@ae* G3c5a@s* G3c5b@m*) (G3bf3@match-each-any (G2d2d@stx-expr G3c46@e) G3c5b@m* G3c5a@s* G3c59@ae*)) G3c55@G3c52 G3c54@G3c51 G3c53@G3c50)))) (if (G28f2@G281d@annotation? G3c46@e) (G3bf3@match-each-any (G28f4@G2821@annotation-expression G3c46@e) G3c47@m* G3c48@s* G3c49@ae*) '#f)))))) (set! G3bf5@match-empty (lambda (G3c40@p G3c41@r) (if (null? G3c40@p) G3c41@r (if (eq? G3c40@p '_) G3c41@r (if (eq? G3c40@p 'any) (cons '() G3c41@r) (if (pair? G3c40@p) (G3bf5@match-empty (car G3c40@p) (G3bf5@match-empty (cdr G3c40@p) G3c41@r)) (if (eq? G3c40@p 'each-any) (cons '() G3c41@r) ((lambda (G3c44@t) (if (memv G3c44@t '(each)) (G3bf5@match-empty (vector-ref G3c40@p '1) G3c41@r) (if (memv G3c44@t '(each+)) (G3bf5@match-empty (vector-ref G3c40@p '1) (G3bf5@match-empty (reverse (vector-ref G3c40@p '2)) (G3bf5@match-empty (vector-ref G3c40@p '3) G3c41@r))) (if (memv G3c44@t '(free-id atom)) G3c41@r (if (memv G3c44@t '(scheme-id atom)) G3c41@r (if (memv G3c44@t '(vector)) (G3bf5@match-empty (vector-ref G3c40@p '1) G3c41@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c40@p))))))) (vector-ref G3c40@p '0))))))))) (set! G3bf7@combine (lambda (G3c3c@r* G3c3d@r) (if (null? (car G3c3c@r*)) G3c3d@r (cons (map car G3c3c@r*) (G3bf7@combine (map cdr G3c3c@r*) G3c3d@r))))) (set! G3bf9@match* (lambda (G3c1b@e G3c1c@p G3c1d@m* G3c1e@s* G3c1f@ae* G3c20@r) (if (null? G3c1c@p) (and (null? G3c1b@e) G3c20@r) (if (pair? G3c1c@p) (and (pair? G3c1b@e) (G3bfb@match (car G3c1b@e) (car G3c1c@p) G3c1d@m* G3c1e@s* G3c1f@ae* (G3bfb@match (cdr G3c1b@e) (cdr G3c1c@p) G3c1d@m* G3c1e@s* G3c1f@ae* G3c20@r))) (if (eq? G3c1c@p 'each-any) ((lambda (G3c27@l) (and G3c27@l (cons G3c27@l G3c20@r))) (G3bf3@match-each-any G3c1b@e G3c1d@m* G3c1e@s* G3c1f@ae*)) ((lambda (G3c29@t) (if (memv G3c29@t '(each)) (if (null? G3c1b@e) (G3bf5@match-empty (vector-ref G3c1c@p '1) G3c20@r) ((lambda (G3c2b@r*) (and G3c2b@r* (G3bf7@combine G3c2b@r* G3c20@r))) (G3bef@match-each G3c1b@e (vector-ref G3c1c@p '1) G3c1d@m* G3c1e@s* G3c1f@ae*))) (if (memv G3c29@t '(free-id)) (and (symbol? G3c1b@e) (G2cdb@top-marked? G3c1d@m*) (G2d69@free-id=? (G3bed@stx^ G3c1b@e G3c1d@m* G3c1e@s* G3c1f@ae*) (vector-ref G3c1c@p '1)) G3c20@r) (if (memv G3c29@t '(scheme-id)) (and (symbol? G3c1b@e) (G2cdb@top-marked? G3c1d@m*) (G2d69@free-id=? (G3bed@stx^ G3c1b@e G3c1d@m* G3c1e@s* G3c1f@ae*) (G2eea@scheme-stx (vector-ref G3c1c@p '1))) G3c20@r) (if (memv G3c29@t '(each+)) (call-with-values (lambda () (G3bf1@match-each+ G3c1b@e (vector-ref G3c1c@p '1) (vector-ref G3c1c@p '2) (vector-ref G3c1c@p '3) G3c1d@m* G3c1e@s* G3c1f@ae* G3c20@r)) (lambda (G3c30@G3c2d G3c31@G3c2e G3c32@G3c2f) ((lambda (G3c36@r G3c37@y-pat G3c38@xr*) (and G3c36@r (null? G3c37@y-pat) (if (null? G3c38@xr*) (G3bf5@match-empty (vector-ref G3c1c@p '1) G3c36@r) (G3bf7@combine G3c38@xr* G3c36@r)))) G3c32@G3c2f G3c31@G3c2e G3c30@G3c2d))) (if (memv G3c29@t '(atom)) (and (fast-equal? (vector-ref G3c1c@p '1) (G2d75@strip G3c1b@e G3c1d@m*)) G3c20@r) (if (memv G3c29@t '(vector)) (and (vector? G3c1b@e) (G3bfb@match (vector->list G3c1b@e) (vector-ref G3c1c@p '1) G3c1d@m* G3c1e@s* G3c1f@ae* G3c20@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c1c@p)))))))) (vector-ref G3c1c@p '0))))))) (set! G3bfb@match (lambda (G3c00@e G3c01@p G3c02@m* G3c03@s* G3c04@ae* G3c05@r) (if (not G3c05@r) '#f (if (eq? G3c01@p '_) G3c05@r (if (eq? G3c01@p 'any) (cons (G3bed@stx^ G3c00@e G3c02@m* G3c03@s* G3c04@ae*) G3c05@r) (if (G2d29@stx? G3c00@e) (and (not (G2cdb@top-marked? G3c02@m*)) (call-with-values (lambda () (G2d47@join-wraps G3c02@m* G3c03@s* G3c04@ae* G3c00@e)) (lambda (G3c0f@G3c0c G3c10@G3c0d G3c11@G3c0e) ((lambda (G3c15@ae* G3c16@s* G3c17@m*) (G3bfb@match (G2d2d@stx-expr G3c00@e) G3c01@p G3c17@m* G3c16@s* G3c15@ae* G3c05@r)) G3c11@G3c0e G3c10@G3c0d G3c0f@G3c0c)))) (if (G28f2@G281d@annotation? G3c00@e) (G3bfb@match (G28f4@G2821@annotation-expression G3c00@e) G3c01@p G3c02@m* G3c03@s* G3c04@ae* G3c05@r) (G3bf9@match* G3c00@e G3c01@p G3c02@m* G3c03@s* G3c04@ae* G3c05@r)))))))) (lambda (G3bfc@e G3bfd@p) (G3bfb@match G3bfc@e G3bfd@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f62@ellipsis? (lambda (G3cbe@x) (and (G2d61@id? G3cbe@x) (G2d69@free-id=? G3cbe@x (G2eea@scheme-stx '...))))) (set! G2f64@underscore? (lambda (G3cc0@x) (and (G2d61@id? G3cc0@x) (G2d69@free-id=? G3cc0@x (G2eea@scheme-stx '_))))) (set! G2f66@verify-literals (lambda (G3cc2@lits G3cc3@expr) (for-each (lambda (G3cc6@x) (if (or (not (G2d61@id? G3cc6@x)) (G2f62@ellipsis? G3cc6@x) (G2f64@underscore? G3cc6@x)) (G304b@syntax-violation '#f '"invalid literal" G3cc3@expr G3cc6@x) (void))) G3cc2@lits))) (set! G2f68@syntax-case-transformer ((lambda () ((lambda (G3cc9@build-dispatch-call G3ccb@invalid-ids-error G3ccd@gen-clause G3ccf@gen-syntax-case) (begin (set! G3cc9@build-dispatch-call (lambda (G3d38@pvars G3d39@expr G3d3a@y G3d3b@r G3d3c@mr) ((lambda (G3d42@ids G3d43@levels) ((lambda (G3d46@labels G3d47@new-vars) ((lambda (G3d4a@body) (list '(primitive apply) (G2cbb@G2bf9@build-lambda '#f G3d47@new-vars G3d4a@body) G3d3a@y)) (G2f84@chi-expr (G2d4d@add-subst (G2d1c@make-full-rib G3d42@ids G3d46@labels) G3d39@expr) (append (map (lambda (G3d4c@label G3d4d@var G3d4e@level) (cons G3d4c@label (G2d81@make-binding 'syntax (cons G3d4d@var G3d4e@level)))) G3d46@labels G3d47@new-vars (map cdr G3d38@pvars)) G3d3b@r) G3d3c@mr))) (map G2ce1@gen-label G3d42@ids) (map G2cdd@gen-lexical G3d42@ids))) (map car G3d38@pvars) (map cdr G3d38@pvars)))) (set! G3ccb@invalid-ids-error (lambda (G3d2c@id* G3d2d@e G3d2e@class) ((letrec ((G3d32@find (lambda (G3d34@id* G3d35@ok*) (if (null? G3d34@id*) (G304b@syntax-violation '#f '"invalid syntax" G3d2d@e) (if (G2d61@id? (car G3d34@id*)) (if (G2d6f@bound-id-member? (car G3d34@id*) G3d35@ok*) (G3047@syntax-error (car G3d34@id*) '"duplicate " G3d2e@class) (G3d32@find (cdr G3d34@id*) (cons (car G3d34@id*) G3d35@ok*))) (G3047@syntax-error (car G3d34@id*) '"invalid " G3d2e@class)))))) G3d32@find) G3d2c@id* '()))) (set! G3ccd@gen-clause (lambda (G3d06@x G3d07@keys G3d08@clauses G3d09@r G3d0a@mr G3d0b@pat G3d0c@fender G3d0d@expr) (call-with-values (lambda () (G2f5e@convert-pattern G3d0b@pat G3d07@keys)) (lambda (G3d18@G3d16 G3d19@G3d17) ((lambda (G3d1c@pvars G3d1d@p) (if (not (G2d6d@distinct-bound-ids? (map car G3d1c@pvars))) (G3ccb@invalid-ids-error (map car G3d1c@pvars) G3d0b@pat '"pattern variable") (if (not (for-all (lambda (G3d20@x) (not (G2f62@ellipsis? (car G3d20@x)))) G3d1c@pvars)) (G304b@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d0b@pat) ((lambda (G3d22@y) ((lambda (G3d24@test) ((lambda (G3d26@conseq) ((lambda (G3d28@altern) (list (G2cbb@G2bf9@build-lambda '#f (list G3d22@y) (list 'if G3d24@test G3d26@conseq G3d28@altern)) (list '(primitive syntax-dispatch) G3d06@x (list 'quote G3d1d@p)))) (G3ccf@gen-syntax-case G3d06@x G3d07@keys G3d08@clauses G3d09@r G3d0a@mr))) (G3cc9@build-dispatch-call G3d1c@pvars G3d0d@expr G3d22@y G3d09@r G3d0a@mr))) (if (eq? G3d0c@fender '#t) G3d22@y ((lambda (G3d2a@call) (list 'if G3d22@y G3d2a@call (list 'quote '#f))) (G3cc9@build-dispatch-call G3d1c@pvars G3d0c@fender G3d22@y G3d09@r G3d0a@mr))))) (G2cdd@gen-lexical 'tmp))))) G3d19@G3d17 G3d18@G3d16))))) (set! G3ccf@gen-syntax-case (lambda (G3ce4@x G3ce5@keys G3ce6@clauses G3ce7@r G3ce8@mr) (if (null? G3ce6@clauses) (list '(primitive syntax-error) G3ce4@x) ((lambda (G3cee@t) ((lambda (G3cf0@ls/false) (if G3cf0@ls/false (apply (lambda (G3cf2@pat G3cf3@expr) (if (and (G2d61@id? G3cf2@pat) (not (G2d6f@bound-id-member? G3cf2@pat G3ce5@keys)) (not (G2f62@ellipsis? G3cf2@pat))) (if (G2d69@free-id=? G3cf2@pat (G2eea@scheme-stx '_)) (G2f84@chi-expr G3cf3@expr G3ce7@r G3ce8@mr) ((lambda (G3cf6@lab G3cf7@lex) ((lambda (G3cfa@body) (list (G2cbb@G2bf9@build-lambda '#f (list G3cf7@lex) G3cfa@body) G3ce4@x)) (G2f84@chi-expr (G2d4d@add-subst (G2d1c@make-full-rib (list G3cf2@pat) (list G3cf6@lab)) G3cf3@expr) (cons (cons G3cf6@lab (G2d81@make-binding 'syntax (cons G3cf7@lex '0))) G3ce7@r) G3ce8@mr))) (G2ce1@gen-label G3cf2@pat) (G2cdd@gen-lexical G3cf2@pat))) (G3ccd@gen-clause G3ce4@x G3ce5@keys (cdr G3ce6@clauses) G3ce7@r G3ce8@mr G3cf2@pat '#t G3cf3@expr))) G3cf0@ls/false) ((lambda (G3cfc@t) ((lambda (G3cfe@ls/false) (if G3cfe@ls/false (apply (lambda (G3d00@pat G3d01@fender G3d02@expr) (G3ccd@gen-clause G3ce4@x G3ce5@keys (cdr G3ce6@clauses) G3ce7@r G3ce8@mr G3d00@pat G3d01@fender G3d02@expr)) G3cfe@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3cfc@t))) (G2f60@syntax-dispatch G3cfc@t '(any any any)))) G3cee@t))) (G2f60@syntax-dispatch G3cee@t '(any any)))) (car G3ce6@clauses))))) (lambda (G3cd0@e G3cd1@r G3cd2@mr) ((lambda (G3cd6@t) ((lambda (G3cd8@ls/false) (if G3cd8@ls/false (apply (lambda (G3cda@expr G3cdb@keys G3cdc@clauses) (begin (G2f66@verify-literals G3cdb@keys G3cd0@e) ((lambda (G3ce0@x) ((lambda (G3ce2@body) (list (G2cbb@G2bf9@build-lambda '#f (list G3ce0@x) G3ce2@body) (G2f84@chi-expr G3cda@expr G3cd1@r G3cd2@mr))) (G3ccf@gen-syntax-case G3ce0@x G3cdb@keys G3cdc@clauses G3cd1@r G3cd2@mr))) (G2cdd@gen-lexical 'tmp)))) G3cd8@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3cd6@t))) (G2f60@syntax-dispatch G3cd6@t '(_ any each-any . each-any)))) G3cd0@e)))) '#f '#f '#f '#f)))) (set! G2f6a@ellipsis-map (lambda (G3d52@proc G3d53@ls . G3d56@ls*) ((lambda (G3d59@who) (begin (set! G3d59@who '...) (begin (if (not (list? G3d53@ls)) (assertion-violation G3d59@who '"not a list" G3d53@ls) (void)) (if (not (null? G3d56@ls*)) ((lambda (G3d5a@n) (for-each (lambda (G3d5c@x) (begin (if (not (list? G3d5c@x)) (assertion-violation G3d59@who '"not a list" G3d5c@x) (void)) (if (not (= (length G3d5c@x) G3d5a@n)) (assertion-violation G3d59@who '"length mismatch" G3d53@ls G3d5c@x) (void)))) G3d56@ls*)) (length G3d53@ls)) (void)) (apply map G3d52@proc G3d53@ls G3d56@ls*)))) '#f))) (set! G2f6c@syntax-transformer ((lambda () ((lambda (G3d5f@gen-syntax G3d61@gen-ref G3d63@gen-append G3d65@gen-mappend G3d67@gen-map G3d69@gen-cons G3d6b@gen-vector G3d6d@regen) (begin (set! G3d5f@gen-syntax (lambda (G3dd2@src G3dd3@e G3dd4@r G3dd5@maps G3dd6@ellipsis? G3dd7@vec?) ((lambda (G3dde@t) ((lambda (G3de0@ls/false) (if (and G3de0@ls/false (apply (lambda (G3de2@dots) (G3dd6@ellipsis? G3de2@dots)) G3de0@ls/false)) (apply (lambda (G3de4@dots) (G304b@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dd2@src)) G3de0@ls/false) ((lambda (G3de6@t) ((lambda (G3de8@ls/false) (if (and G3de8@ls/false (apply (lambda (G3dea@id) (G2d61@id? G3dea@id)) G3de8@ls/false)) (apply (lambda (G3dec@id) ((lambda (G3dee@label) ((lambda (G3df0@b) ((lambda () (if (eq? (G2d83@binding-type G3df0@b) 'syntax) (call-with-values (lambda () ((lambda (G3df4@var.lev) (G3d61@gen-ref G3dd2@src (car G3df4@var.lev) (cdr G3df4@var.lev) G3dd5@maps)) (G2d85@binding-value G3df0@b))) (lambda (G3df6@G3df2 G3df7@G3df3) ((lambda (G3dfa@maps G3dfb@var) (values (list 'ref G3dfb@var) G3dfa@maps)) G3df7@G3df3 G3df6@G3df2))) (values (list 'quote G3dd3@e) G3dd5@maps))))) (G2d7f@label->binding G3dee@label G3dd4@r))) (G2d7b@id->label G3dd3@e))) G3de8@ls/false) ((lambda (G3dfe@t) ((lambda (G3e00@ls/false) (if (and G3e00@ls/false (apply (lambda (G3e02@dots G3e03@e) (G3dd6@ellipsis? G3e02@dots)) G3e00@ls/false)) (apply (lambda (G3e06@dots G3e07@e) (if G3dd7@vec? (G304b@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dd2@src) (G3d5f@gen-syntax G3dd2@src G3e07@e G3dd4@r G3dd5@maps (lambda (G3e0a@x) '#f) '#f))) G3e00@ls/false) ((lambda (G3e0c@t) ((lambda (G3e0e@ls/false) (if (and G3e0e@ls/false (apply (lambda (G3e10@x G3e11@dots G3e12@y) (G3dd6@ellipsis? G3e11@dots)) G3e0e@ls/false)) (apply (lambda (G3e16@x G3e17@dots G3e18@y) ((letrec ((G3e1c@f (lambda (G3e1e@y G3e1f@k) ((lambda (G3e22@t) ((lambda (G3e24@ls/false) (if G3e24@ls/false (apply (lambda () (G3e1f@k G3dd5@maps)) G3e24@ls/false) ((lambda (G3e26@t) ((lambda (G3e28@ls/false) (if (and G3e28@ls/false (apply (lambda (G3e2a@dots G3e2b@y) (G3dd6@ellipsis? G3e2a@dots)) G3e28@ls/false)) (apply (lambda (G3e2e@dots G3e2f@y) (G3e1c@f G3e2f@y (lambda (G3e32@maps) (call-with-values (lambda () (G3e1f@k (cons '() G3e32@maps))) (lambda (G3e36@G3e34 G3e37@G3e35) ((lambda (G3e3a@maps G3e3b@x) (if (null? (car G3e3a@maps)) (G304b@syntax-violation '#f '"extra ellipsis in syntax form" G3dd2@src) (values (G3d65@gen-mappend G3e3b@x (car G3e3a@maps)) (cdr G3e3a@maps)))) G3e37@G3e35 G3e36@G3e34)))))) G3e28@ls/false) ((lambda (G3e3e@t) ((lambda (G3e40@ls/false) (if G3e40@ls/false (apply (lambda () (call-with-values (lambda () (G3d5f@gen-syntax G3dd2@src G3e1e@y G3dd4@r G3dd5@maps G3dd6@ellipsis? G3dd7@vec?)) (lambda (G3e44@G3e42 G3e45@G3e43) ((lambda (G3e48@maps G3e49@y) (call-with-values (lambda () (G3e1f@k G3e48@maps)) (lambda (G3e4e@G3e4c G3e4f@G3e4d) ((lambda (G3e52@maps G3e53@x) (values (G3d63@gen-append G3e53@x G3e49@y) G3e52@maps)) G3e4f@G3e4d G3e4e@G3e4c)))) G3e45@G3e43 G3e44@G3e42)))) G3e40@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3e3e@t))) (G2f60@syntax-dispatch G3e3e@t '_))) G3e26@t))) (G2f60@syntax-dispatch G3e26@t '(any . any)))) G3e22@t))) (G2f60@syntax-dispatch G3e22@t '()))) G3e1e@y)))) G3e1c@f) G3e18@y (lambda (G3e56@maps) (call-with-values (lambda () (G3d5f@gen-syntax G3dd2@src G3e16@x G3dd4@r (cons '() G3e56@maps) G3dd6@ellipsis? '#f)) (lambda (G3e5a@G3e58 G3e5b@G3e59) ((lambda (G3e5e@maps G3e5f@x) (if (null? (car G3e5e@maps)) (G304b@syntax-violation '#f '"extra ellipsis in syntax form" G3dd2@src) (values (G3d67@gen-map G3e5f@x (car G3e5e@maps)) (cdr G3e5e@maps)))) G3e5b@G3e59 G3e5a@G3e58)))))) G3e0e@ls/false) ((lambda (G3e62@t) ((lambda (G3e64@ls/false) (if G3e64@ls/false (apply (lambda (G3e66@x G3e67@y) (call-with-values (lambda () (G3d5f@gen-syntax G3dd2@src G3e66@x G3dd4@r G3dd5@maps G3dd6@ellipsis? '#f)) (lambda (G3e6c@G3e6a G3e6d@G3e6b) ((lambda (G3e70@maps G3e71@xnew) (call-with-values (lambda () (G3d5f@gen-syntax G3dd2@src G3e67@y G3dd4@r G3e70@maps G3dd6@ellipsis? G3dd7@vec?)) (lambda (G3e76@G3e74 G3e77@G3e75) ((lambda (G3e7a@maps G3e7b@ynew) (values (G3d69@gen-cons G3dd3@e G3e66@x G3e67@y G3e71@xnew G3e7b@ynew) G3e7a@maps)) G3e77@G3e75 G3e76@G3e74)))) G3e6d@G3e6b G3e6c@G3e6a)))) G3e64@ls/false) ((lambda (G3e7e@t) ((lambda (G3e80@ls/false) (if G3e80@ls/false (apply (lambda (G3e82@ls) (call-with-values (lambda () (G3d5f@gen-syntax G3dd2@src G3e82@ls G3dd4@r G3dd5@maps G3dd6@ellipsis? '#t)) (lambda (G3e86@G3e84 G3e87@G3e85) ((lambda (G3e8a@maps G3e8b@lsnew) (values (G3d6b@gen-vector G3dd3@e G3e82@ls G3e8b@lsnew) G3e8a@maps)) G3e87@G3e85 G3e86@G3e84)))) G3e80@ls/false) ((lambda (G3e8e@t) ((lambda (G3e90@ls/false) (if G3e90@ls/false (apply (lambda () (values (list 'quote G3dd3@e) G3dd5@maps)) G3e90@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3e8e@t))) (G2f60@syntax-dispatch G3e8e@t '_))) G3e7e@t))) (G2f60@syntax-dispatch G3e7e@t '#(vector each-any)))) G3e62@t))) (G2f60@syntax-dispatch G3e62@t '(any . any)))) G3e0c@t))) (G2f60@syntax-dispatch G3e0c@t '(any any . any)))) G3dfe@t))) (G2f60@syntax-dispatch G3dfe@t '(any any)))) G3de6@t))) (G2f60@syntax-dispatch G3de6@t 'any))) G3dde@t))) (G2f60@syntax-dispatch G3dde@t 'any))) G3dd3@e))) (set! G3d61@gen-ref (lambda (G3dba@src G3dbb@var G3dbc@level G3dbd@maps) (if (= G3dbc@level '0) (values G3dbb@var G3dbd@maps) (if (null? G3dbd@maps) (G304b@syntax-violation '#f '"missing ellipsis in syntax form" G3dba@src) (call-with-values (lambda () (G3d61@gen-ref G3dba@src G3dbb@var (- G3dbc@level '1) (cdr G3dbd@maps))) (lambda (G3dc4@G3dc2 G3dc5@G3dc3) ((lambda (G3dc8@outer-maps G3dc9@outer-var) ((lambda (G3dcc@t) (if G3dcc@t ((lambda (G3dce@b) (values (cdr G3dce@b) G3dbd@maps)) G3dcc@t) ((lambda (G3dd0@inner-var) (values G3dd0@inner-var (cons (cons (cons G3dc9@outer-var G3dd0@inner-var) (car G3dbd@maps)) G3dc8@outer-maps))) (G2cdd@gen-lexical 'tmp)))) (assq G3dc9@outer-var (car G3dbd@maps)))) G3dc5@G3dc3 G3dc4@G3dc2))))))) (set! G3d63@gen-append (lambda (G3db6@x G3db7@y) (if (fast-equal? G3db7@y ''()) G3db6@x (list 'append G3db6@x G3db7@y)))) (set! G3d65@gen-mappend (lambda (G3db2@e G3db3@map-env) (list 'apply '(primitive append) (G3d67@gen-map G3db2@e G3db3@map-env)))) (set! G3d67@gen-map (lambda (G3da0@e G3da1@map-env) ((lambda (G3da4@formals G3da5@actuals) (if (eq? (car G3da0@e) 'ref) (car G3da5@actuals) (if (for-all (lambda (G3da8@x) (and (eq? (car G3da8@x) 'ref) (memq (cadr G3da8@x) G3da4@formals))) (cdr G3da0@e)) ((lambda (G3daa@args) (cons 'map (cons (list 'primitive (car G3da0@e)) G3daa@args))) (map ((lambda (G3dac@r) (lambda (G3dae@x) (cdr (assq (cadr G3dae@x) G3dac@r)))) (map cons G3da4@formals G3da5@actuals)) (cdr G3da0@e))) (cons* 'map (list 'lambda G3da4@formals G3da0@e) G3da5@actuals)))) (map cdr G3da1@map-env) (map (lambda (G3db0@x) (list 'ref (car G3db0@x))) G3da1@map-env)))) (set! G3d69@gen-cons (lambda (G3d90@e G3d91@x G3d92@y G3d93@xnew G3d94@ynew) ((lambda (G3d9a@t) (if (memv G3d9a@t '(quote)) (if (eq? (car G3d93@xnew) 'quote) ((lambda (G3d9c@xnew G3d9d@ynew) (if (and (eq? G3d9c@xnew G3d91@x) (eq? G3d9d@ynew G3d92@y)) (list 'quote G3d90@e) (list 'quote (cons G3d9c@xnew G3d9d@ynew)))) (cadr G3d93@xnew) (cadr G3d94@ynew)) (if (null? (cadr G3d94@ynew)) (list 'list G3d93@xnew) (list 'cons G3d93@xnew G3d94@ynew))) (if (memv G3d9a@t '(list)) (cons 'list (cons G3d93@xnew (cdr G3d94@ynew))) (list 'cons G3d93@xnew G3d94@ynew)))) (car G3d94@ynew)))) (set! G3d6b@gen-vector (lambda (G3d8a@e G3d8b@ls G3d8c@lsnew) (if (eq? (car G3d8c@lsnew) 'quote) (if (eq? (cadr G3d8c@lsnew) G3d8b@ls) (list 'quote G3d8a@e) (list 'quote (list->vector (cadr G3d8c@lsnew)))) (if (eq? (car G3d8c@lsnew) 'list) (cons 'vector (cdr G3d8c@lsnew)) (list 'list->vector G3d8c@lsnew))))) (set! G3d6d@regen (lambda (G3d84@x) ((lambda (G3d86@t) (if (memv G3d86@t '(ref)) (cadr G3d84@x) (if (memv G3d86@t '(primitive)) (list 'primitive (cadr G3d84@x)) (if (memv G3d86@t '(quote)) (list 'quote (cadr G3d84@x)) (if (memv G3d86@t '(lambda)) (G2cbb@G2bf9@build-lambda '#f (cadr G3d84@x) (G3d6d@regen (caddr G3d84@x))) (if (memv G3d86@t '(map)) ((lambda (G3d88@ls) (cons '(primitive ellipsis-map) G3d88@ls)) (map G3d6d@regen (cdr G3d84@x))) (cons (list 'primitive (car G3d84@x)) (map G3d6d@regen (cdr G3d84@x))))))))) (car G3d84@x)))) (lambda (G3d6e@e G3d6f@r G3d70@mr) ((lambda (G3d74@t) ((lambda (G3d76@ls/false) (if G3d76@ls/false (apply (lambda (G3d78@x) (call-with-values (lambda () (G3d5f@gen-syntax G3d6e@e G3d78@x G3d6f@r '() G2f62@ellipsis? '#f)) (lambda (G3d7c@G3d7a G3d7d@G3d7b) ((lambda (G3d80@maps G3d81@e) (G3d6d@regen G3d81@e)) G3d7d@G3d7b G3d7c@G3d7a)))) G3d76@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3d74@t))) (G2f60@syntax-dispatch G3d74@t '(_ any)))) G3d6e@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f6e@core-macro-transformer (lambda (G3e92@name) ((lambda (G3e94@t) (if (memv G3e94@t '(quote)) G2f10@quote-transformer (if (memv G3e94@t '(lambda)) G2f14@lambda-transformer (if (memv G3e94@t '(case-lambda)) G2f12@case-lambda-transformer (if (memv G3e94@t '(letrec)) G2ef8@letrec-transformer (if (memv G3e94@t '(letrec*)) G2efa@letrec*-transformer (if (memv G3e94@t '(if)) G2f08@if-transformer (if (memv G3e94@t '(and)) G2f0a@and-transformer (if (memv G3e94@t '(or)) G2f0c@or-transformer (if (memv G3e94@t '(foreign-call)) G2f5c@foreign-call-transformer (if (memv G3e94@t '(syntax-case)) G2f68@syntax-case-transformer (if (memv G3e94@t '(syntax)) G2f6c@syntax-transformer (if (memv G3e94@t '(type-descriptor)) G2efe@type-descriptor-transformer (if (memv G3e94@t '(record-type-descriptor)) G2f00@record-type-descriptor-transformer (if (memv G3e94@t '(record-constructor-descriptor)) G2f02@record-constructor-descriptor-transformer (if (memv G3e94@t '(fluid-let-syntax)) G2efc@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3e92@name))))))))))))))))) G3e92@name))) (set! G2f70@file-options-macro (lambda (G3e96@x) ((lambda (G3e99@valid-option?) (begin (set! G3e99@valid-option? (lambda (G3ea2@x) (and (G2d61@id? G3ea2@x) (memq (G2d63@id->sym G3ea2@x) '(no-fail no-create no-truncate))))) ((lambda (G3e9a@t) ((lambda (G3e9c@ls/false) (if (and G3e9c@ls/false (apply (lambda (G3e9e@opt*) (and (for-all G3e99@valid-option? G3e9e@opt*) (G28fe@G289f@file-options-spec (map G2d63@id->sym G3e9e@opt*)))) G3e9c@ls/false)) (apply (lambda (G3ea0@opt*) (G2f16@bless (list 'quote (G28fe@G289f@file-options-spec (map G2d63@id->sym G3ea0@opt*))))) G3e9c@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3e9a@t))) (G2f60@syntax-dispatch G3e9a@t '(_ . each-any)))) G3e96@x))) '#f))) (set! G2f72@symbol-macro (lambda (G3ea4@x G3ea5@set) ((lambda (G3ea8@t) ((lambda (G3eaa@ls/false) (if (and G3eaa@ls/false (apply (lambda (G3eac@name) (and (G2d61@id? G3eac@name) (memq (G2d63@id->sym G3eac@name) G3ea5@set))) G3eaa@ls/false)) (apply (lambda (G3eae@name) (G2f16@bless (list 'quote G3eae@name))) G3eaa@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3ea8@t))) (G2f60@syntax-dispatch G3ea8@t '(_ any)))) G3ea4@x))) (set! G2f74@macro-transformer (lambda (G3eb0@x) (if (procedure? G3eb0@x) G3eb0@x (if (symbol? G3eb0@x) ((lambda (G3eb2@t) (if (memv G3eb2@t '(define-record-type)) G2f54@define-record-type-macro (if (memv G3eb2@t '(define-struct)) G2f52@define-struct-macro (if (memv G3eb2@t '(include)) G2f48@include-macro (if (memv G3eb2@t '(cond)) G2f44@cond-macro (if (memv G3eb2@t '(let)) G2f1c@let-macro (if (memv G3eb2@t '(do)) G2f3c@do-macro (if (memv G3eb2@t '(or)) G2f40@or-macro (if (memv G3eb2@t '(and)) G2f42@and-macro (if (memv G3eb2@t '(let*)) G2f3e@let*-macro (if (memv G3eb2@t '(let-values)) G2f1e@let-values-macro (if (memv G3eb2@t '(let*-values)) G2f20@let*-values-macro (if (memv G3eb2@t '(syntax-rules)) G2f4c@syntax-rules-macro (if (memv G3eb2@t '(quasiquote)) G2f4e@quasiquote-macro (if (memv G3eb2@t '(quasisyntax)) G2f50@quasisyntax-macro (if (memv G3eb2@t '(with-syntax)) G2f18@with-syntax-macro (if (memv G3eb2@t '(when)) G2f04@when-macro (if (memv G3eb2@t '(unless)) G2f06@unless-macro (if (memv G3eb2@t '(case)) G2f0e@case-macro (if (memv G3eb2@t '(identifier-syntax)) G2f3a@identifier-syntax-macro (if (memv G3eb2@t '(time)) G2f32@time-macro (if (memv G3eb2@t '(delay)) G2f34@delay-macro (if (memv G3eb2@t '(assert)) G2f36@assert-macro (if (memv G3eb2@t '(endianness)) G2f38@endianness-macro (if (memv G3eb2@t '(guard)) G2f2e@guard-macro (if (memv G3eb2@t '(define-enumeration)) G2f30@define-enumeration-macro (if (memv G3eb2@t '(trace-lambda)) G2f22@trace-lambda-macro (if (memv G3eb2@t '(trace-define)) G2f24@trace-define-macro (if (memv G3eb2@t '(trace-define-syntax)) G2f26@trace-define-syntax-macro (if (memv G3eb2@t '(trace-let-syntax)) G2f2a@trace-let-syntax-macro (if (memv G3eb2@t '(trace-letrec-syntax)) G2f2c@trace-letrec-syntax-macro (if (memv G3eb2@t '(define-condition-type)) G2f56@define-condition-type-macro (if (memv G3eb2@t '(parameterize)) G2f5a@parameterize-macro (if (memv G3eb2@t '(include-into)) G2f4a@include-into-macro (if (memv G3eb2@t '(eol-style)) (lambda (G3eb4@x) (G2f72@symbol-macro G3eb4@x '(none lf cr crlf nel crnel ls))) (if (memv G3eb2@t '(error-handling-mode)) (lambda (G3eb6@x) (G2f72@symbol-macro G3eb6@x '(ignore raise replace))) (if (memv G3eb2@t '(buffer-mode)) (lambda (G3eb8@x) (G2f72@symbol-macro G3eb8@x '(none line block))) (if (memv G3eb2@t '(file-options)) G2f70@file-options-macro (if (memv G3eb2@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f58@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3eb0@x)))))))))))))))))))))))))))))))))))))))) G3eb0@x) (error 'core-macro-transformer '"BUG: invalid macro" G3eb0@x))))) (set! G2f76@local-macro-transformer (lambda (G3eba@x) (car G3eba@x))) (set! G2f78@do-macro-call (lambda (G3ebc@transformer G3ebd@expr) ((lambda (G3ec0@out) (begin ((letrec ((G3ec2@f (lambda (G3ec4@x) (if (not (G2d29@stx? G3ec4@x)) (if (pair? G3ec4@x) (begin (G3ec2@f (car G3ec4@x)) (G3ec2@f (cdr G3ec4@x))) (if (vector? G3ec4@x) (vector-for-each G3ec2@f G3ec4@x) (if (symbol? G3ec4@x) (G304b@syntax-violation '#f '"raw symbol encountered in output of macro" G3ebd@expr G3ec4@x) (void)))) (void))))) G3ec2@f) G3ec0@out) (G2d4b@add-mark (G2d41@gen-mark) G3ec0@out G3ebd@expr))) (G3ebc@transformer (G2d4b@add-mark G2d43@anti-mark G3ebd@expr '#f))))) (set! G2f7a@chi-macro (lambda (G3ec6@p G3ec7@e) (G2f78@do-macro-call (G2f74@macro-transformer G3ec6@p) G3ec7@e))) (set! G2f7c@chi-local-macro (lambda (G3eca@p G3ecb@e) (G2f78@do-macro-call (G2f76@local-macro-transformer G3eca@p) G3ecb@e))) (set! G2f7e@chi-global-macro (lambda (G3ece@p G3ecf@e) ((lambda (G3ed2@lib G3ed3@loc) (begin (G2b79@G2a21@visit-library G3ed2@lib) ((lambda (G3ed6@x) ((lambda (G3ed8@transformer) (G2f78@do-macro-call G3ed8@transformer G3ecf@e)) (if (procedure? G3ed6@x) G3ed6@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3ed6@x)))) (symbol-value G3ed3@loc)))) (car G3ece@p) (cdr G3ece@p)))) (set! G2f80@chi-expr* (lambda (G3eda@e* G3edb@r G3edc@mr) (if (null? G3eda@e*) '() ((lambda (G3ee0@e) (cons G3ee0@e (G2f80@chi-expr* (cdr G3eda@e*) G3edb@r G3edc@mr))) (G2f84@chi-expr (car G3eda@e*) G3edb@r G3edc@mr))))) (set! G2f82@chi-application (lambda (G3ee2@e G3ee3@r G3ee4@mr) ((lambda (G3ee8@t) ((lambda (G3eea@ls/false) (if G3eea@ls/false (apply (lambda (G3eec@rator G3eed@rands) ((lambda (G3ef0@rator) (cons G3ef0@rator (G2f80@chi-expr* G3eed@rands G3ee3@r G3ee4@mr))) (G2f84@chi-expr G3eec@rator G3ee3@r G3ee4@mr))) G3eea@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3ee8@t))) (G2f60@syntax-dispatch G3ee8@t '(any . each-any)))) G3ee2@e))) (set! G2f84@chi-expr (lambda (G3ef2@e G3ef3@r G3ef4@mr) (call-with-values (lambda () (G2d89@syntax-type G3ef2@e G3ef3@r)) (lambda (G3efb@G3ef8 G3efc@G3ef9 G3efd@G3efa) ((lambda (G3f01@kwd G3f02@value G3f03@type) ((lambda (G3f07@t) (if (memv G3f07@t '(core-macro)) ((lambda (G3f09@transformer) (G3f09@transformer G3ef2@e G3ef3@r G3ef4@mr)) (G2f6e@core-macro-transformer G3f02@value)) (if (memv G3f07@t '(global)) ((lambda (G3f0b@lib) ((lambda (G3f0d@loc) ((lambda () (begin ((G2fcd@inv-collector) G3f0b@lib) G3f0d@loc)))) (cdr G3f02@value))) (car G3f02@value)) (if (memv G3f07@t '(core-prim)) ((lambda (G3f0f@name) (list 'primitive G3f0f@name)) G3f02@value) (if (memv G3f07@t '(call)) (G2f82@chi-application G3ef2@e G3ef3@r G3ef4@mr) (if (memv G3f07@t '(lexical)) ((lambda (G3f11@lex) G3f11@lex) (G2eec@lexical-var G3f02@value)) (if (memv G3f07@t '(global-macro global-macro!)) (G2f84@chi-expr (G2f7e@chi-global-macro G3f02@value G3ef2@e) G3ef3@r G3ef4@mr) (if (memv G3f07@t '(local-macro local-macro!)) (G2f84@chi-expr (G2f7c@chi-local-macro G3f02@value G3ef2@e) G3ef3@r G3ef4@mr) (if (memv G3f07@t '(macro macro!)) (G2f84@chi-expr (G2f7a@chi-macro G3f02@value G3ef2@e) G3ef3@r G3ef4@mr) (if (memv G3f07@t '(constant)) ((lambda (G3f13@datum) (list 'quote G3f13@datum)) G3f02@value) (if (memv G3f07@t '(set!)) (G2f86@chi-set! G3ef2@e G3ef3@r G3ef4@mr) (if (memv G3f07@t '(begin)) ((lambda (G3f15@t) ((lambda (G3f17@ls/false) (if G3f17@ls/false (apply (lambda (G3f19@x G3f1a@x*) (G2cbe@G2c2f@build-sequence '#f (G2f80@chi-expr* (cons G3f19@x G3f1a@x*) G3ef3@r G3ef4@mr))) G3f17@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3f15@t))) (G2f60@syntax-dispatch G3f15@t '(_ any . each-any)))) G3ef2@e) (if (memv G3f07@t '(let-syntax letrec-syntax)) ((lambda (G3f1d@t) ((lambda (G3f1f@ls/false) (if (and G3f1f@ls/false (apply (lambda (G3f21@xlhs* G3f22@xrhs* G3f23@xbody G3f24@xbody*) (if (not (G2d6b@valid-bound-ids? G3f21@xlhs*)) (G304b@syntax-violation '#f '"invalid identifiers" G3ef2@e) (void))) G3f1f@ls/false)) (apply (lambda (G3f29@xlhs* G3f2a@xrhs* G3f2b@xbody G3f2c@xbody*) ((lambda (G3f31@xlab*) ((lambda (G3f33@xrib) ((lambda (G3f35@xb*) ((lambda () (G2cbe@G2c2f@build-sequence '#f (G2f80@chi-expr* (map (lambda (G3f37@x) (G2d4d@add-subst G3f33@xrib G3f37@x)) (cons G3f2b@xbody G3f2c@xbody*)) (append (map cons G3f31@xlab* G3f35@xb*) G3ef3@r) (append (map cons G3f31@xlab* G3f35@xb*) G3ef4@mr)))))) (map (lambda (G3f39@x) (G2da1@make-eval-transformer (G2fbf@expand-transformer (if (eq? G3f03@type 'let-syntax) G3f39@x (G2d4d@add-subst G3f33@xrib G3f39@x)) G3ef4@mr))) G3f2a@xrhs*))) (G2d1c@make-full-rib G3f29@xlhs* G3f31@xlab*))) (map G2ce1@gen-label G3f29@xlhs*))) G3f1f@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3f1d@t))) (G2f60@syntax-dispatch G3f1d@t '(_ #(each (any any)) any . each-any)))) G3ef2@e) (if (memv G3f07@t '(displaced-lexical)) (G304b@syntax-violation '#f '"identifier out of context" G3ef2@e) (if (memv G3f07@t '(syntax)) (G304b@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3ef2@e) (if (memv G3f07@t '(define define-syntax module import library)) (G304b@syntax-violation '#f (string-append ((lambda (G3f3b@t) (if (memv G3f3b@t '(define)) '"a definition" (if (memv G3f3b@t '(define-syntax)) '"a define-syntax" (if (memv G3f3b@t '(module)) '"a module definition" (if (memv G3f3b@t '(library)) '"a library definition" (if (memv G3f3b@t '(import)) '"an import declaration" (if (memv G3f3b@t '(export)) '"an export declaration" '"a non-expression"))))))) G3f03@type) '" was found where an expression was expected") G3ef2@e) (if (memv G3f07@t '(mutable)) (G304b@syntax-violation '#f '"attempt to reference an unexportable variable" G3ef2@e) (G304b@syntax-violation '#f '"invalid expression" G3ef2@e)))))))))))))))))) G3f03@type)) G3efd@G3efa G3efc@G3ef9 G3efb@G3ef8))))) (set! G2f86@chi-set! (lambda (G3f3d@e G3f3e@r G3f3f@mr) ((lambda (G3f43@t) ((lambda (G3f45@ls/false) (if (and G3f45@ls/false (apply (lambda (G3f47@x G3f48@v) (G2d61@id? G3f47@x)) G3f45@ls/false)) (apply (lambda (G3f4b@x G3f4c@v) (call-with-values (lambda () (G2d89@syntax-type G3f4b@x G3f3e@r)) (lambda (G3f52@G3f4f G3f53@G3f50 G3f54@G3f51) ((lambda (G3f58@kwd G3f59@value G3f5a@type) ((lambda (G3f5e@t) (if (memv G3f5e@t '(lexical)) (begin (G2ef0@set-lexical-mutable! G3f59@value '#t) (list 'set! (G2eec@lexical-var G3f59@value) (G2f84@chi-expr G3f4c@v G3f3e@r G3f3f@mr))) (if (memv G3f5e@t '(core-prim)) (G304b@syntax-violation '#f '"cannot modify imported core primitive" G3f3d@e) (if (memv G3f5e@t '(global)) (G304b@syntax-violation '#f '"attempt to modify imported binding" G3f3d@e) (if (memv G3f5e@t '(global-macro!)) (G2f84@chi-expr (G2f7e@chi-global-macro G3f59@value G3f3d@e) G3f3e@r G3f3f@mr) (if (memv G3f5e@t '(local-macro!)) (G2f84@chi-expr (G2f7c@chi-local-macro G3f59@value G3f3d@e) G3f3e@r G3f3f@mr) (if (memv G3f5e@t '(mutable)) (G304b@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f3d@e) (G304b@syntax-violation '#f '"invalid syntax" G3f3d@e)))))))) G3f5a@type)) G3f54@G3f51 G3f53@G3f50 G3f52@G3f4f)))) G3f45@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3f43@t))) (G2f60@syntax-dispatch G3f43@t '(_ any any)))) G3f3d@e))) (set! G2f88@verify-formals (lambda (G3f60@fmls G3f61@stx) ((lambda (G3f64@t) ((lambda (G3f66@ls/false) (if G3f66@ls/false (apply (lambda (G3f68@x*) (if (not (G2d6b@valid-bound-ids? G3f68@x*)) (G2f1a@invalid-fmls-error G3f61@stx G3f60@fmls) (void))) G3f66@ls/false) ((lambda (G3f6a@t) ((lambda (G3f6c@ls/false) (if G3f6c@ls/false (apply (lambda (G3f6e@x* G3f6f@x) (if (not (G2d6b@valid-bound-ids? (cons G3f6f@x G3f6e@x*))) (G2f1a@invalid-fmls-error G3f61@stx G3f60@fmls) (void))) G3f6c@ls/false) ((lambda (G3f72@t) ((lambda (G3f74@ls/false) (if G3f74@ls/false (apply (lambda () (G304b@syntax-violation '#f '"invalid syntax" G3f61@stx)) G3f74@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3f72@t))) (G2f60@syntax-dispatch G3f72@t '_))) G3f6a@t))) (G2f60@syntax-dispatch G3f6a@t '#(each+ any () any)))) G3f64@t))) (G2f60@syntax-dispatch G3f64@t 'each-any))) G3f60@fmls))) (set! G2f8a@chi-lambda-clause (lambda (G3f76@stx G3f77@fmls G3f78@body* G3f79@r G3f7a@mr) ((lambda (G3f80@t) ((lambda (G3f82@ls/false) (if G3f82@ls/false (apply (lambda (G3f84@x*) (begin (G2f88@verify-formals G3f77@fmls G3f76@stx) ((lambda (G3f86@lex* G3f87@lab*) (values G3f86@lex* (G2f9a@chi-internal (G2d4d@add-subst (G2d1c@make-full-rib G3f84@x* G3f87@lab*) G3f78@body*) (G2ef4@add-lexicals G3f87@lab* G3f86@lex* G3f79@r) G3f7a@mr))) (map G2cdd@gen-lexical G3f84@x*) (map G2ce1@gen-label G3f84@x*)))) G3f82@ls/false) ((lambda (G3f8a@t) ((lambda (G3f8c@ls/false) (if G3f8c@ls/false (apply (lambda (G3f8e@x* G3f8f@x) (begin (G2f88@verify-formals G3f77@fmls G3f76@stx) ((lambda (G3f92@lex* G3f93@lab* G3f94@lex G3f95@lab) (values (append G3f92@lex* G3f94@lex) (G2f9a@chi-internal (G2d4d@add-subst (G2d1c@make-full-rib (cons G3f8f@x G3f8e@x*) (cons G3f95@lab G3f93@lab*)) G3f78@body*) (G2ef4@add-lexicals (cons G3f95@lab G3f93@lab*) (cons G3f94@lex G3f92@lex*) G3f79@r) G3f7a@mr))) (map G2cdd@gen-lexical G3f8e@x*) (map G2ce1@gen-label G3f8e@x*) (G2cdd@gen-lexical G3f8f@x) (G2ce1@gen-label G3f8f@x)))) G3f8c@ls/false) ((lambda (G3f9a@t) ((lambda (G3f9c@ls/false) (if G3f9c@ls/false (apply (lambda () (G304b@syntax-violation '#f '"invalid syntax" G3f77@fmls)) G3f9c@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G3f9a@t))) (G2f60@syntax-dispatch G3f9a@t '_))) G3f8a@t))) (G2f60@syntax-dispatch G3f8a@t '#(each+ any () any)))) G3f80@t))) (G2f60@syntax-dispatch G3f80@t 'each-any))) G3f77@fmls))) (set! G2f8c@chi-lambda-clause* (lambda (G3f9e@stx G3f9f@fmls* G3fa0@body** G3fa1@r G3fa2@mr) (if (null? G3f9f@fmls*) (values '() '()) (call-with-values (lambda () (G2f8a@chi-lambda-clause G3f9e@stx (car G3f9f@fmls*) (car G3fa0@body**) G3fa1@r G3fa2@mr)) (lambda (G3faa@G3fa8 G3fab@G3fa9) ((lambda (G3fae@b G3faf@a) (call-with-values (lambda () (G2f8c@chi-lambda-clause* G3f9e@stx (cdr G3f9f@fmls*) (cdr G3fa0@body**) G3fa1@r G3fa2@mr)) (lambda (G3fb4@G3fb2 G3fb5@G3fb3) ((lambda (G3fb8@b* G3fb9@a*) (values (cons G3faf@a G3fb9@a*) (cons G3fae@b G3fb8@b*))) G3fb5@G3fb3 G3fb4@G3fb2)))) G3fab@G3fa9 G3faa@G3fa8)))))) (set! G2f8e@chi-defun (lambda (G3fbc@x G3fbd@r G3fbe@mr) ((lambda (G3fc2@fmls G3fc3@body*) (call-with-values (lambda () (G2f8a@chi-lambda-clause G3fc2@fmls G3fc2@fmls G3fc3@body* G3fbd@r G3fbe@mr)) (lambda (G3fc8@G3fc6 G3fc9@G3fc7) ((lambda (G3fcc@body G3fcd@fmls) (G2cbb@G2bf9@build-lambda '#f G3fcd@fmls G3fcc@body)) G3fc9@G3fc7 G3fc8@G3fc6)))) (car G3fbc@x) (cdr G3fbc@x)))) (set! G2f90@chi-rhs (lambda (G3fd0@rhs G3fd1@r G3fd2@mr) ((lambda (G3fd6@t) (if (memv G3fd6@t '(defun)) (G2f8e@chi-defun (cdr G3fd0@rhs) G3fd1@r G3fd2@mr) (if (memv G3fd6@t '(expr)) ((lambda (G3fd8@expr) (G2f84@chi-expr G3fd8@expr G3fd1@r G3fd2@mr)) (cdr G3fd0@rhs)) (if (memv G3fd6@t '(top-expr)) ((lambda (G3fda@expr) (G2cbe@G2c2f@build-sequence '#f (list (G2f84@chi-expr G3fda@expr G3fd1@r G3fd2@mr) (G2cbf@G2c31@build-void)))) (cdr G3fd0@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3fd0@rhs))))) (car G3fd0@rhs)))) (set! G2f92@expand-interaction-rhs*/init* (lambda (G3fdc@lhs* G3fdd@rhs* G3fde@init* G3fdf@r G3fe0@mr) ((letrec ((G3fe6@f (lambda (G3fe8@lhs* G3fe9@rhs*) (if (null? G3fe8@lhs*) (map (lambda (G3fec@x) (G2f84@chi-expr G3fec@x G3fdf@r G3fe0@mr)) G3fde@init*) ((lambda (G3fee@lhs G3fef@rhs) ((lambda (G3ff2@t) (if (memv G3ff2@t '(defun)) ((lambda (G3ff4@rhs) (cons (list 'set! G3fee@lhs G3ff4@rhs) (G3fe6@f (cdr G3fe8@lhs*) (cdr G3fe9@rhs*)))) (G2f8e@chi-defun (cdr G3fef@rhs) G3fdf@r G3fe0@mr)) (if (memv G3ff2@t '(expr)) ((lambda (G3ff6@rhs) (cons (list 'set! G3fee@lhs G3ff6@rhs) (G3fe6@f (cdr G3fe8@lhs*) (cdr G3fe9@rhs*)))) (G2f84@chi-expr (cdr G3fef@rhs) G3fdf@r G3fe0@mr)) (if (memv G3ff2@t '(top-expr)) ((lambda (G3ff8@e) (cons G3ff8@e (G3fe6@f (cdr G3fe8@lhs*) (cdr G3fe9@rhs*)))) (G2f84@chi-expr (cdr G3fef@rhs) G3fdf@r G3fe0@mr)) (error 'expand-interaction '"invallid" G3fef@rhs))))) (car G3fef@rhs))) (car G3fe8@lhs*) (car G3fe9@rhs*)))))) G3fe6@f) G3fdc@lhs* G3fdd@rhs*))) (set! G2f94@chi-rhs* (lambda (G3ffa@rhs* G3ffb@r G3ffc@mr) ((letrec ((G4000@f (lambda (G4002@ls) (if (null? G4002@ls) '() ((lambda (G4004@a) (cons G4004@a (G4000@f (cdr G4002@ls)))) (G2f90@chi-rhs (car G4002@ls) G3ffb@r G3ffc@mr)))))) G4000@f) G3ffa@rhs*))) (set! G2f96@find-bound=? (lambda (G4006@x G4007@lhs* G4008@rhs*) (if (null? G4007@lhs*) '#f (if (G2d67@bound-id=? G4006@x (car G4007@lhs*)) (car G4008@rhs*) (G2f96@find-bound=? G4006@x (cdr G4007@lhs*) (cdr G4008@rhs*)))))) (set! G2f98@find-dups (lambda (G400c@ls) ((letrec ((G400e@f (lambda (G4010@ls G4011@dups) (if (null? G4010@ls) G4011@dups ((lambda (G4014@t) (if G4014@t ((lambda (G4016@x) (G400e@f (cdr G4010@ls) (cons (list (car G4010@ls) G4016@x) G4011@dups))) G4014@t) (G400e@f (cdr G4010@ls) G4011@dups))) (G2f96@find-bound=? (car G4010@ls) (cdr G4010@ls) (cdr G4010@ls))))))) G400e@f) G400c@ls '()))) (set! G2f9a@chi-internal (lambda (G4018@e* G4019@r G401a@mr) ((lambda (G401e@rib) (call-with-values (lambda () (G2fbd@chi-body* (map (lambda (G4028@x) (G2d4d@add-subst G401e@rib G4028@x)) (G2d5f@syntax->list G4018@e*)) G4019@r G401a@mr '() '() '() '() '() G401e@rib '#f)) (lambda (G402a@G4020 G402b@G4021 G402c@G4022 G402d@G4023 G402e@G4024 G402f@G4025 G4030@G4026 G4031@G4027) ((lambda (G403a@_exp* G403b@kwd* G403c@mod** G403d@rhs* G403e@lex* G403f@mr G4040@r G4041@e*) (begin (if (null? G4041@e*) (G304b@syntax-violation '#f '"no expression in body" G4041@e*) (void)) ((lambda (G404a@init*) ((lambda (G404c@rhs*) ((lambda () (G2cc1@G2c35@build-letrec* '#f (reverse G403e@lex*) (reverse G404c@rhs*) (G2cbe@G2c2f@build-sequence '#f G404a@init*))))) (G2f94@chi-rhs* G403d@rhs* G4040@r G403f@mr))) (G2f80@chi-expr* (append (apply append (reverse G403c@mod**)) G4041@e*) G4040@r G403f@mr)))) G4031@G4027 G4030@G4026 G402f@G4025 G402e@G4024 G402d@G4023 G402c@G4022 G402b@G4021 G402a@G4020)))) (G2d0c@make-empty-rib)))) (set! G2f9c@parse-module (lambda (G404e@e) ((lambda (G4050@t) ((lambda (G4052@ls/false) (if G4052@ls/false (apply (lambda (G4054@export* G4055@b*) (begin (if (not (for-all G2d61@id? G4054@export*)) (G304b@syntax-violation '#f '"module exports must be identifiers" G404e@e) (void)) (values '#f (list->vector G4054@export*) G4055@b*))) G4052@ls/false) ((lambda (G4058@t) ((lambda (G405a@ls/false) (if G405a@ls/false (apply (lambda (G405c@name G405d@export* G405e@b*) (begin (if (not (G2d61@id? G405c@name)) (G304b@syntax-violation '#f '"module name must be an identifier" G404e@e) (void)) (if (not (for-all G2d61@id? G405d@export*)) (G304b@syntax-violation '#f '"module exports must be identifiers" G404e@e) (void)) (values G405c@name (list->vector G405d@export*) G405e@b*))) G405a@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G4058@t))) (G2f60@syntax-dispatch G4058@t '(_ any each-any . each-any)))) G4050@t))) (G2f60@syntax-dispatch G4050@t '(_ each-any . each-any)))) G404e@e))) (set! G2fa2@G2f9d (make-record-type-descriptor 'module-interface '#f 'G2fa0 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2fa4@G2f9f '#f) (set! G2fa6@G2f9e (make-record-constructor-descriptor G2fa2@G2f9d '#f G2fa4@G2f9f)) (set! G2fa9@module-interface? (record-predicate G2fa2@G2f9d)) (set! G2fab@make-module-interface (record-constructor G2fa6@G2f9e)) (set! G2fad@module-interface-first-mark (record-accessor G2fa2@G2f9d '0)) (set! G2faf@module-interface-exp-id-vec (record-accessor G2fa2@G2f9d '1)) (set! G2fb1@module-interface-exp-lab-vec (record-accessor G2fa2@G2f9d '2)) (set! G2fb3@set-module-interface-first-mark! (record-mutator G2fa2@G2f9d '0)) (set! G2fb5@set-module-interface-exp-id-vec! (record-mutator G2fa2@G2f9d '1)) (set! G2fb7@set-module-interface-exp-lab-vec! (record-mutator G2fa2@G2f9d '2)) (set! G2fb9@module-interface-exp-id* (lambda (G4062@iface G4063@id) ((lambda (G4067@diff-marks) (begin (set! G4067@diff-marks (lambda (G406e@ls G406f@x) (begin (if (null? G406e@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G4072@a) (if (eq? G4072@a G406f@x) '() (cons G4072@a (G4067@diff-marks (cdr G406e@ls) G406f@x)))) (car G406e@ls))))) ((lambda (G4068@diff G4069@id-vec) (if (null? G4068@diff) G4069@id-vec (vector-map (lambda (G406c@x) (G2d2b@make-stx (G2d2d@stx-expr G406c@x) (append G4068@diff (G2d2f@stx-mark* G406c@x)) '() '())) G4069@id-vec))) (G4067@diff-marks (G2d2f@stx-mark* G4063@id) (G2fad@module-interface-first-mark G4062@iface)) (G2faf@module-interface-exp-id-vec G4062@iface)))) '#f))) (set! G2fbb@chi-internal-module (lambda (G4074@e G4075@r G4076@mr G4077@lex* G4078@rhs* G4079@mod** G407a@kwd*) (call-with-values (lambda () (G2f9c@parse-module G4074@e)) (lambda (G4085@G4082 G4086@G4083 G4087@G4084) ((lambda (G408b@e* G408c@exp-id* G408d@name) ((lambda (G4091@rib) ((lambda (G4093@e*) ((lambda () (call-with-values (lambda () (G2fbd@chi-body* G4093@e* G4075@r G4076@mr G4077@lex* G4078@rhs* G4079@mod** G407a@kwd* '() G4091@rib '#f)) (lambda (G409d@G4095 G409e@G4096 G409f@G4097 G40a0@G4098 G40a1@G4099 G40a2@G409a G40a3@G409b G40a4@G409c) ((lambda (G40ad@_exp* G40ae@kwd* G40af@mod** G40b0@rhs* G40b1@lex* G40b2@mr G40b3@r G40b4@e*) ((lambda (G40bd@exp-lab* G40be@mod**) (if (not G408d@name) (values G40b1@lex* G40b0@rhs* G408c@exp-id* G40bd@exp-lab* G40b3@r G40b2@mr G40be@mod** G40ae@kwd*) ((lambda (G40c1@lab G40c2@iface) (values G40b1@lex* G40b0@rhs* (vector G408d@name) (vector G40c1@lab) (cons (cons G40c1@lab (cons '$module G40c2@iface)) G40b3@r) (cons (cons G40c1@lab (cons '$module G40c2@iface)) G40b2@mr) G40be@mod** G40ae@kwd*)) (G2ce1@gen-label 'module) (G2fab@make-module-interface (car (G2d2f@stx-mark* G408d@name)) (vector-map (lambda (G40c5@x) (G2d2b@make-stx (G2d2d@stx-expr G40c5@x) (G2d2f@stx-mark* G40c5@x) '() '())) G408c@exp-id*) G40bd@exp-lab*)))) (vector-map (lambda (G40c7@x) (or (G2d7b@id->label (G2d2b@make-stx (G2d63@id->sym G40c7@x) (G2d2f@stx-mark* G40c7@x) (list G4091@rib) '())) (G304b@syntax-violation '#f '"cannot find module export" G40c7@x))) G408c@exp-id*) (cons G40b4@e* G40af@mod**))) G40a4@G409c G40a3@G409b G40a2@G409a G40a1@G4099 G40a0@G4098 G409f@G4097 G409e@G4096 G409d@G4095)))))) (map (lambda (G40c9@x) (G2d4d@add-subst G4091@rib G40c9@x)) (G2d5f@syntax->list G408b@e*)))) (G2d0c@make-empty-rib))) G4087@G4084 G4086@G4083 G4085@G4082))))) (set! G2fbd@chi-body* (lambda (G40cb@e* G40cc@r G40cd@mr G40ce@lex* G40cf@rhs* G40d0@mod** G40d1@kwd* G40d2@exp* G40d3@rib G40d4@top?) (if (null? G40cb@e*) (values G40cb@e* G40cc@r G40cd@mr G40ce@lex* G40cf@rhs* G40d0@mod** G40d1@kwd* G40d2@exp*) ((lambda (G40df@e) (call-with-values (lambda () (G2d89@syntax-type G40df@e G40cc@r)) (lambda (G40e4@G40e1 G40e5@G40e2 G40e6@G40e3) ((lambda (G40ea@kwd G40eb@value G40ec@type) ((lambda (G40f0@kwd*) ((lambda (G40f2@t) (if (memv G40f2@t '(define)) (call-with-values (lambda () (G2ee4@parse-define G40df@e)) (lambda (G40f6@G40f4 G40f7@G40f5) ((lambda (G40fa@rhs G40fb@id) (begin (if (G2d6f@bound-id-member? G40fb@id G40f0@kwd*) (G304b@syntax-violation '#f '"cannot redefine keyword" G40df@e) (void)) (call-with-values (lambda () (G2ce5@gen-define-label+loc G40fb@id G40d3@rib)) (lambda (G4100@G40fe G4101@G40ff) ((lambda (G4104@lex G4105@lab) (begin (G2d12@extend-rib! G40d3@rib G40fb@id G4105@lab) (G2fbd@chi-body* (cdr G40cb@e*) (G2ef2@add-lexical G4105@lab G4104@lex G40cc@r) G40cd@mr (cons G4104@lex G40ce@lex*) (cons G40fa@rhs G40cf@rhs*) G40d0@mod** G40f0@kwd* G40d2@exp* G40d3@rib G40d4@top?))) G4101@G40ff G4100@G40fe))))) G40f7@G40f5 G40f6@G40f4))) (if (memv G40f2@t '(define-syntax)) (call-with-values (lambda () (G2ee6@parse-define-syntax G40df@e)) (lambda (G410a@G4108 G410b@G4109) ((lambda (G410e@rhs G410f@id) (begin (if (G2d6f@bound-id-member? G410f@id G40f0@kwd*) (G304b@syntax-violation '#f '"cannot redefine keyword" G40df@e) (void)) ((lambda (G4112@lab G4113@expanded-rhs) (begin (G2d12@extend-rib! G40d3@rib G410f@id G4112@lab) ((lambda (G4116@b) (G2fbd@chi-body* (cdr G40cb@e*) (cons (cons G4112@lab G4116@b) G40cc@r) (cons (cons G4112@lab G4116@b) G40cd@mr) G40ce@lex* G40cf@rhs* G40d0@mod** G40f0@kwd* G40d2@exp* G40d3@rib G40d4@top?)) (G2da1@make-eval-transformer G4113@expanded-rhs)))) (G2ce7@gen-define-label G410f@id G40d3@rib) (G2fbf@expand-transformer G410e@rhs G40cd@mr)))) G410b@G4109 G410a@G4108))) (if (memv G40f2@t '(let-syntax letrec-syntax)) ((lambda (G4118@t) ((lambda (G411a@ls/false) (if (and G411a@ls/false (apply (lambda (G411c@xlhs* G411d@xrhs* G411e@xbody*) (if (not (G2d6b@valid-bound-ids? G411c@xlhs*)) (G304b@syntax-violation '#f '"invalid identifiers" G40df@e) (void))) G411a@ls/false)) (apply (lambda (G4122@xlhs* G4123@xrhs* G4124@xbody*) ((lambda (G4128@xlab*) ((lambda (G412a@xrib) ((lambda (G412c@xb*) ((lambda () (G2fbd@chi-body* (append (map (lambda (G412e@x) (G2d4d@add-subst G412a@xrib G412e@x)) G4124@xbody*) (cdr G40cb@e*)) (append (map cons G4128@xlab* G412c@xb*) G40cc@r) (append (map cons G4128@xlab* G412c@xb*) G40cd@mr) G40ce@lex* G40cf@rhs* G40d0@mod** G40f0@kwd* G40d2@exp* G40d3@rib G40d4@top?)))) (map (lambda (G4130@x) (G2da1@make-eval-transformer (G2fbf@expand-transformer (if (eq? G40ec@type 'let-syntax) G4130@x (G2d4d@add-subst G412a@xrib G4130@x)) G40cd@mr))) G4123@xrhs*))) (G2d1c@make-full-rib G4122@xlhs* G4128@xlab*))) (map G2ce1@gen-label G4122@xlhs*))) G411a@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G4118@t))) (G2f60@syntax-dispatch G4118@t '(_ #(each (any any)) . each-any)))) G40df@e) (if (memv G40f2@t '(begin)) ((lambda (G4132@t) ((lambda (G4134@ls/false) (if G4134@ls/false (apply (lambda (G4136@x*) (G2fbd@chi-body* (append G4136@x* (cdr G40cb@e*)) G40cc@r G40cd@mr G40ce@lex* G40cf@rhs* G40d0@mod** G40f0@kwd* G40d2@exp* G40d3@rib G40d4@top?)) G4134@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G4132@t))) (G2f60@syntax-dispatch G4132@t '(_ . each-any)))) G40df@e) (if (memv G40f2@t '(global-macro global-macro!)) (G2fbd@chi-body* (cons (G2d4d@add-subst G40d3@rib (G2f7e@chi-global-macro G40eb@value G40df@e)) (cdr G40cb@e*)) G40cc@r G40cd@mr G40ce@lex* G40cf@rhs* G40d0@mod** G40f0@kwd* G40d2@exp* G40d3@rib G40d4@top?) (if (memv G40f2@t '(local-macro local-macro!)) (G2fbd@chi-body* (cons (G2d4d@add-subst G40d3@rib (G2f7c@chi-local-macro G40eb@value G40df@e)) (cdr G40cb@e*)) G40cc@r G40cd@mr G40ce@lex* G40cf@rhs* G40d0@mod** G40f0@kwd* G40d2@exp* G40d3@rib G40d4@top?) (if (memv G40f2@t '(macro macro!)) (G2fbd@chi-body* (cons (G2d4d@add-subst G40d3@rib (G2f7a@chi-macro G40eb@value G40df@e)) (cdr G40cb@e*)) G40cc@r G40cd@mr G40ce@lex* G40cf@rhs* G40d0@mod** G40f0@kwd* G40d2@exp* G40d3@rib G40d4@top?) (if (memv G40f2@t '(module)) (call-with-values (lambda () (G2fbb@chi-internal-module G40df@e G40cc@r G40cd@mr G40ce@lex* G40cf@rhs* G40d0@mod** G40f0@kwd*)) (lambda (G4140@G4138 G4141@G4139 G4142@G413a G4143@G413b G4144@G413c G4145@G413d G4146@G413e G4147@G413f) ((lambda (G4150@kwd* G4151@mod** G4152@mr G4153@r G4154@m-exp-lab* G4155@m-exp-id* G4156@rhs* G4157@lex*) (begin (vector-for-each (lambda (G4160@id G4161@lab) (G2d12@extend-rib! G40d3@rib G4160@id G4161@lab)) G4155@m-exp-id* G4154@m-exp-lab*) (G2fbd@chi-body* (cdr G40cb@e*) G4153@r G4152@mr G4157@lex* G4156@rhs* G4151@mod** G4150@kwd* G40d2@exp* G40d3@rib G40d4@top?))) G4147@G413f G4146@G413e G4145@G413d G4144@G413c G4143@G413b G4142@G413a G4141@G4139 G4140@G4138))) (if (memv G40f2@t '(library)) (begin (G302d@library-expander (G2d77@stx->datum G40df@e)) (G2fbd@chi-body* (cdr G40cb@e*) G40cc@r G40cd@mr G40ce@lex* G40cf@rhs* G40d0@mod** G40f0@kwd* G40d2@exp* G40d3@rib G40d4@top?)) (if (memv G40f2@t '(export)) ((lambda (G4164@t) ((lambda (G4166@ls/false) (if G4166@ls/false (apply (lambda (G4168@exp-decl*) (G2fbd@chi-body* (cdr G40cb@e*) G40cc@r G40cd@mr G40ce@lex* G40cf@rhs* G40d0@mod** G40f0@kwd* (append G4168@exp-decl* G40d2@exp*) G40d3@rib G40d4@top?)) G4166@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G4164@t))) (G2f60@syntax-dispatch G4164@t '(_ . each-any)))) G40df@e) (if (memv G40f2@t '(import)) ((lambda () ((lambda (G416b@module-import? G416d@module-import G416f@library-import) (begin (set! G416b@module-import? (lambda (G41b7@e) ((lambda (G41b9@t) ((lambda (G41bb@ls/false) (if (and G41bb@ls/false (apply (lambda (G41bd@id) (G2d61@id? G41bd@id)) G41bb@ls/false)) (apply (lambda (G41bf@id) '#t) G41bb@ls/false) ((lambda (G41c1@t) ((lambda (G41c3@ls/false) (if G41c3@ls/false (apply (lambda (G41c5@imp*) '#f) G41c3@ls/false) ((lambda (G41c7@t) ((lambda (G41c9@ls/false) (if G41c9@ls/false (apply (lambda () (G304b@syntax-violation '#f '"malformed import form" G41b7@e)) G41c9@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G41c7@t))) (G2f60@syntax-dispatch G41c7@t '_))) G41c1@t))) (G2f60@syntax-dispatch G41c1@t '(_ . each-any)))) G41b9@t))) (G2f60@syntax-dispatch G41b9@t '(_ any)))) G41b7@e))) (set! G416d@module-import (lambda (G4198@e G4199@r) ((lambda (G419c@t) ((lambda (G419e@ls/false) (if (and G419e@ls/false (apply (lambda (G41a0@id) (G2d61@id? G41a0@id)) G419e@ls/false)) (apply (lambda (G41a2@id) (call-with-values (lambda () (G2d89@syntax-type G41a2@id G4199@r)) (lambda (G41a7@G41a4 G41a8@G41a5 G41a9@G41a6) ((lambda (G41ad@kwd G41ae@value G41af@type) ((lambda (G41b3@t) (if (memv G41b3@t '($module)) ((lambda (G41b5@iface) (values (G2fb9@module-interface-exp-id* G41b5@iface G41a2@id) (G2fb1@module-interface-exp-lab-vec G41b5@iface))) G41ae@value) (G304b@syntax-violation '#f '"invalid import" G4198@e))) G41af@type)) G41a9@G41a6 G41a8@G41a5 G41a7@G41a4)))) G419e@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G419c@t))) (G2f60@syntax-dispatch G419c@t '(_ any)))) G4198@e))) (set! G416f@library-import (lambda (G417e@e) ((lambda (G4180@t) ((lambda (G4182@ls/false) (if G4182@ls/false (apply (lambda (G4184@ctxt G4185@imp*) (call-with-values (lambda () (G2fc7@parse-import-spec* (G3051@syntax->datum G4185@imp*))) (lambda (G418a@G4188 G418b@G4189) ((lambda (G418e@subst-labels G418f@subst-names) (values (vector-map (lambda (G4192@name) (G2d3f@datum->stx G4184@ctxt G4192@name)) G418f@subst-names) G418e@subst-labels)) G418b@G4189 G418a@G4188)))) G4182@ls/false) ((lambda (G4194@t) ((lambda (G4196@ls/false) (if G4196@ls/false (apply (lambda () (G304b@syntax-violation '#f '"invalid import form" G417e@e)) G4196@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G4194@t))) (G2f60@syntax-dispatch G4194@t '_))) G4180@t))) (G2f60@syntax-dispatch G4180@t '(any . each-any)))) G417e@e))) (begin (call-with-values (lambda () (if (G416b@module-import? G40df@e) (G416d@module-import G40df@e G40cc@r) (G416f@library-import G40df@e))) (lambda (G4172@G4170 G4173@G4171) ((lambda (G4176@lab* G4177@id*) (vector-for-each (lambda (G417a@id G417b@lab) (G2d12@extend-rib! G40d3@rib G417a@id G417b@lab)) G4177@id* G4176@lab*)) G4173@G4171 G4172@G4170))) (G2fbd@chi-body* (cdr G40cb@e*) G40cc@r G40cd@mr G40ce@lex* G40cf@rhs* G40d0@mod** G40f0@kwd* G40d2@exp* G40d3@rib G40d4@top?)))) '#f '#f '#f))) (if G40d4@top? (G2fbd@chi-body* (cdr G40cb@e*) G40cc@r G40cd@mr (cons (G2cdd@gen-lexical 'dummy) G40ce@lex*) (cons (cons 'top-expr G40df@e) G40cf@rhs*) G40d0@mod** G40f0@kwd* G40d2@exp* G40d3@rib G40d4@top?) (values G40cb@e* G40cc@r G40cd@mr G40ce@lex* G40cf@rhs* G40d0@mod** G40f0@kwd* G40d2@exp*)))))))))))))) G40ec@type)) (if (G2d61@id? G40ea@kwd) (cons G40ea@kwd G40d1@kwd*) G40d1@kwd*))) G40e6@G40e3 G40e5@G40e2 G40e4@G40e1)))) (car G40cb@e*))))) (set! G2fbf@expand-transformer (lambda (G41cb@expr G41cc@r) ((lambda (G41cf@rtc) ((lambda (G41d1@expanded-rhs) (begin (for-each ((lambda (G41d3@mark-visit) (lambda (G41d5@x) (begin (G2b78@G2a1f@invoke-library G41d5@x) (G41d3@mark-visit G41d5@x)))) (G2fcf@vis-collector)) (G41cf@rtc)) G41d1@expanded-rhs)) ((lambda (G41db@G41d7 G41dc@G41d8 G41dd@G41d9 G41de@G41da) ((lambda (G41e3@swap) (dynamic-wind G41e3@swap (lambda () (G2f84@chi-expr G41cb@expr G41cc@r G41cc@r)) G41e3@swap)) (lambda () (begin ((lambda (G41e5@t) (begin (G41db@G41d7 G41dd@G41d9) (set! G41dd@G41d9 G41e5@t))) (G41db@G41d7)) ((lambda (G41e7@t) (begin (G41dc@G41d8 G41de@G41da) (set! G41de@G41da G41e7@t))) (G41dc@G41d8)))))) G2fcd@inv-collector G2fcf@vis-collector G41cf@rtc (lambda (G41e9@x) (values))))) (G2fcb@make-collector)))) (set! G2fc1@parse-exports (lambda (G41eb@exp*) ((letrec ((G41ed@f (lambda (G41ef@exp* G41f0@int* G41f1@ext*) (if (null? G41ef@exp*) (begin (if (not (G2d6b@valid-bound-ids? G41f1@ext*)) (G304b@syntax-violation 'export '"invalid exports" (G2f98@find-dups G41f1@ext*)) (void)) (values (map G3051@syntax->datum G41f1@ext*) G41f0@int*)) ((lambda (G41f5@t) ((lambda (G41f7@ls/false) (if G41f7@ls/false (apply (lambda (G41f9@rename G41fa@i* G41fb@e*) (begin (if (not (and (eq? (G3051@syntax->datum G41f9@rename) 'rename) (for-all G2d61@id? G41fa@i*) (for-all G2d61@id? G41fb@e*))) (G304b@syntax-violation 'export '"invalid export specifier" (car G41ef@exp*)) (void)) (G41ed@f (cdr G41ef@exp*) (append G41fa@i* G41f0@int*) (append G41fb@e* G41f1@ext*)))) G41f7@ls/false) ((lambda (G41ff@t) ((lambda (G4201@ls/false) (if G4201@ls/false (apply (lambda (G4203@ie) (begin (if (not (G2d61@id? G4203@ie)) (G304b@syntax-violation 'export '"invalid export" G4203@ie) (void)) (G41ed@f (cdr G41ef@exp*) (cons G4203@ie G41f0@int*) (cons G4203@ie G41f1@ext*)))) G4201@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G41ff@t))) (G2f60@syntax-dispatch G41ff@t 'any))) G41f5@t))) (G2f60@syntax-dispatch G41f5@t '(any . #(each (any any)))))) (car G41ef@exp*)))))) G41ed@f) G41eb@exp* '() '()))) (set! G2fc3@parse-library-name (lambda (G4205@spec) ((lambda (G4208@parse) (begin (set! G4208@parse (lambda (G4213@x) ((lambda (G4215@t) ((lambda (G4217@ls/false) (if (and G4217@ls/false (apply (lambda (G4219@v*) (for-all (lambda (G421b@x) ((lambda (G421d@x) (and (integer? G421d@x) (exact? G421d@x))) (G3051@syntax->datum G421b@x))) G4219@v*)) G4217@ls/false)) (apply (lambda (G421f@v*) (values '() (map G3051@syntax->datum G421f@v*))) G4217@ls/false) ((lambda (G4221@t) ((lambda (G4223@ls/false) (if (and G4223@ls/false (apply (lambda (G4225@x G4226@rest) (symbol? (G3051@syntax->datum G4225@x))) G4223@ls/false)) (apply (lambda (G4229@x G422a@rest) (call-with-values (lambda () (G4208@parse G422a@rest)) (lambda (G422f@G422d G4230@G422e) ((lambda (G4233@v* G4234@x*) (values (cons (G3051@syntax->datum G4229@x) G4234@x*) G4233@v*)) G4230@G422e G422f@G422d)))) G4223@ls/false) ((lambda (G4237@t) ((lambda (G4239@ls/false) (if G4239@ls/false (apply (lambda () (values '() '())) G4239@ls/false) ((lambda (G423b@t) ((lambda (G423d@ls/false) (if G423d@ls/false (apply (lambda () (G304b@syntax-violation '#f '"invalid library name" G4205@spec)) G423d@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G423b@t))) (G2f60@syntax-dispatch G423b@t '_))) G4237@t))) (G2f60@syntax-dispatch G4237@t '()))) G4221@t))) (G2f60@syntax-dispatch G4221@t '(any . any)))) G4215@t))) (G2f60@syntax-dispatch G4215@t '(each-any)))) G4213@x))) (call-with-values (lambda () (G4208@parse G4205@spec)) (lambda (G420b@G4209 G420c@G420a) ((lambda (G420f@ver* G4210@name*) (begin (if (null? G4210@name*) (G304b@syntax-violation '#f '"empty library name" G4205@spec) (void)) (values G4210@name* G420f@ver*))) G420c@G420a G420b@G4209))))) '#f))) (set! G2fc5@parse-library (lambda (G423f@e) ((lambda (G4241@t) ((lambda (G4243@ls/false) (if (and G4243@ls/false (apply (lambda (G4245@library G4246@name* G4247@export G4248@exp* G4249@import G424a@imp* G424b@b*) (and (eq? (G3051@syntax->datum G4247@export) 'export) (eq? (G3051@syntax->datum G4249@import) 'import) (eq? (G3051@syntax->datum G4245@library) 'library))) G4243@ls/false)) (apply (lambda (G4253@library G4254@name* G4255@export G4256@exp* G4257@import G4258@imp* G4259@b*) (values G4254@name* G4256@exp* G4258@imp* G4259@b*)) G4243@ls/false) ((lambda (G4261@t) ((lambda (G4263@ls/false) (if G4263@ls/false (apply (lambda () (G304b@syntax-violation '#f '"malformed library" G423f@e)) G4263@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G4261@t))) (G2f60@syntax-dispatch G4261@t '_))) G4241@t))) (G2f60@syntax-dispatch G4241@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G423f@e))) (set! G2fc7@parse-import-spec* ((lambda () ((lambda (G4266@idsyn? G4268@dup-error G426a@merge-substs G426c@exclude* G426e@find* G4270@rem* G4272@remove-dups G4274@parse-library-name G4276@import-library G4278@get-import G427a@add-imports!) (begin (set! G4266@idsyn? (lambda (G4465@x) (symbol? (G3051@syntax->datum G4465@x)))) (set! G4268@dup-error (lambda (G4463@name) (G304b@syntax-violation 'import '"two imports with different bindings" G4463@name))) (set! G426a@merge-substs (lambda (G4451@s G4452@subst) ((lambda (G4456@insert-to-subst) (begin (set! G4456@insert-to-subst (lambda (G4457@a G4458@subst) ((lambda (G445b@name G445c@label) ((lambda (G445f@t) (if G445f@t ((lambda (G4461@x) (if (eq? (cdr G4461@x) G445c@label) G4458@subst (G4268@dup-error G445b@name))) G445f@t) (cons G4457@a G4458@subst))) (assq G445b@name G4458@subst))) (car G4457@a) (cdr G4457@a)))) (if (null? G4451@s) G4452@subst (G4456@insert-to-subst (car G4451@s) (G426a@merge-substs (cdr G4451@s) G4452@subst))))) '#f))) (set! G426c@exclude* (lambda (G4427@sym* G4428@subst) ((lambda (G442c@exclude) (begin (set! G442c@exclude (lambda (G4441@sym G4442@subst) (if (null? G4442@subst) (G304b@syntax-violation 'import '"cannot rename unbound identifier" G4441@sym) (if (eq? G4441@sym (caar G4442@subst)) (values (cdar G4442@subst) (cdr G4442@subst)) ((lambda (G4445@a) (call-with-values (lambda () (G442c@exclude G4441@sym (cdr G4442@subst))) (lambda (G4449@G4447 G444a@G4448) ((lambda (G444d@subst G444e@old) (values G444e@old (cons G4445@a G444d@subst))) G444a@G4448 G4449@G4447)))) (car G4442@subst)))))) (if (null? G4427@sym*) (values '() G4428@subst) (call-with-values (lambda () (G442c@exclude (car G4427@sym*) G4428@subst)) (lambda (G442f@G442d G4430@G442e) ((lambda (G4433@subst G4434@old) (call-with-values (lambda () (G426c@exclude* (cdr G4427@sym*) G4433@subst)) (lambda (G4439@G4437 G443a@G4438) ((lambda (G443d@subst G443e@old*) (values (cons G4434@old G443e@old*) G443d@subst)) G443a@G4438 G4439@G4437)))) G4430@G442e G442f@G442d)))))) '#f))) (set! G426e@find* (lambda (G441f@sym* G4420@subst) (map (lambda (G4423@x) ((lambda (G4425@t) (if G4425@t (cdr G4425@t) (G304b@syntax-violation 'import '"cannot find identifier" G4423@x))) (assq G4423@x G4420@subst))) G441f@sym*))) (set! G4270@rem* (lambda (G4417@sym* G4418@subst) ((letrec ((G441b@f (lambda (G441d@subst) (if (null? G441d@subst) '() (if (memq (caar G441d@subst) G4417@sym*) (G441b@f (cdr G441d@subst)) (cons (car G441d@subst) (G441b@f (cdr G441d@subst)))))))) G441b@f) G4418@subst))) (set! G4272@remove-dups (lambda (G4415@ls) (if (null? G4415@ls) '() (if (memq (car G4415@ls) (cdr G4415@ls)) (G4272@remove-dups (cdr G4415@ls)) (cons (car G4415@ls) (G4272@remove-dups (cdr G4415@ls))))))) (set! G4274@parse-library-name (lambda (G432f@spec) ((lambda (G4332@subversion? G4334@subversion-pred G4336@version-pred) (begin (set! G4332@subversion? (lambda (G4411@x) ((lambda (G4413@x) (and (integer? G4413@x) (exact? G4413@x) (>= G4413@x '0))) (G3051@syntax->datum G4411@x)))) (set! G4334@subversion-pred (lambda (G43b1@x*) ((lambda (G43b3@t) ((lambda (G43b5@ls/false) (if (and G43b5@ls/false (apply (lambda (G43b7@n) (G4332@subversion? G43b7@n)) G43b5@ls/false)) (apply (lambda (G43b9@n) (lambda (G43bb@x) (= G43bb@x (G3051@syntax->datum G43b9@n)))) G43b5@ls/false) ((lambda (G43bd@t) ((lambda (G43bf@ls/false) (if (and G43bf@ls/false (apply (lambda (G43c1@p? G43c2@sub*) (eq? (G3051@syntax->datum G43c1@p?) 'and)) G43bf@ls/false)) (apply (lambda (G43c5@p? G43c6@sub*) ((lambda (G43c9@p*) (lambda (G43cb@x) (for-all (lambda (G43cd@p) (G43cd@p G43cb@x)) G43c9@p*))) (map G4334@subversion-pred G43c6@sub*))) G43bf@ls/false) ((lambda (G43cf@t) ((lambda (G43d1@ls/false) (if (and G43d1@ls/false (apply (lambda (G43d3@p? G43d4@sub*) (eq? (G3051@syntax->datum G43d3@p?) 'or)) G43d1@ls/false)) (apply (lambda (G43d7@p? G43d8@sub*) ((lambda (G43db@p*) (lambda (G43dd@x) (exists (lambda (G43df@p) (G43df@p G43dd@x)) G43db@p*))) (map G4334@subversion-pred G43d8@sub*))) G43d1@ls/false) ((lambda (G43e1@t) ((lambda (G43e3@ls/false) (if (and G43e3@ls/false (apply (lambda (G43e5@p? G43e6@sub) (eq? (G3051@syntax->datum G43e5@p?) 'not)) G43e3@ls/false)) (apply (lambda (G43e9@p? G43ea@sub) ((lambda (G43ed@p) (lambda (G43ef@x) (not (G43ed@p G43ef@x)))) (G4334@subversion-pred G43ea@sub))) G43e3@ls/false) ((lambda (G43f1@t) ((lambda (G43f3@ls/false) (if (and G43f3@ls/false (apply (lambda (G43f5@p? G43f6@n) (and (eq? (G3051@syntax->datum G43f5@p?) '<=) (G4332@subversion? G43f6@n))) G43f3@ls/false)) (apply (lambda (G43f9@p? G43fa@n) (lambda (G43fd@x) (<= G43fd@x (G3051@syntax->datum G43fa@n)))) G43f3@ls/false) ((lambda (G43ff@t) ((lambda (G4401@ls/false) (if (and G4401@ls/false (apply (lambda (G4403@p? G4404@n) (and (eq? (G3051@syntax->datum G4403@p?) '>=) (G4332@subversion? G4404@n))) G4401@ls/false)) (apply (lambda (G4407@p? G4408@n) (lambda (G440b@x) (>= G440b@x (G3051@syntax->datum G4408@n)))) G4401@ls/false) ((lambda (G440d@t) ((lambda (G440f@ls/false) (if G440f@ls/false (apply (lambda () (G304b@syntax-violation 'import '"invalid sub-version spec" G432f@spec G43b1@x*)) G440f@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G440d@t))) (G2f60@syntax-dispatch G440d@t '_))) G43ff@t))) (G2f60@syntax-dispatch G43ff@t '(any any)))) G43f1@t))) (G2f60@syntax-dispatch G43f1@t '(any any)))) G43e1@t))) (G2f60@syntax-dispatch G43e1@t '(any any)))) G43cf@t))) (G2f60@syntax-dispatch G43cf@t '(any . each-any)))) G43bd@t))) (G2f60@syntax-dispatch G43bd@t '(any . each-any)))) G43b3@t))) (G2f60@syntax-dispatch G43b3@t 'any))) G43b1@x*))) (set! G4336@version-pred (lambda (G4361@x*) ((lambda (G4363@t) ((lambda (G4365@ls/false) (if G4365@ls/false (apply (lambda () (lambda (G4367@x) '#t)) G4365@ls/false) ((lambda (G4369@t) ((lambda (G436b@ls/false) (if (and G436b@ls/false (apply (lambda (G436d@c G436e@ver*) (eq? (G3051@syntax->datum G436d@c) 'and)) G436b@ls/false)) (apply (lambda (G4371@c G4372@ver*) ((lambda (G4375@p*) (lambda (G4377@x) (for-all (lambda (G4379@p) (G4379@p G4377@x)) G4375@p*))) (map G4336@version-pred G4372@ver*))) G436b@ls/false) ((lambda (G437b@t) ((lambda (G437d@ls/false) (if (and G437d@ls/false (apply (lambda (G437f@c G4380@ver*) (eq? (G3051@syntax->datum G437f@c) 'or)) G437d@ls/false)) (apply (lambda (G4383@c G4384@ver*) ((lambda (G4387@p*) (lambda (G4389@x) (exists (lambda (G438b@p) (G438b@p G4389@x)) G4387@p*))) (map G4336@version-pred G4384@ver*))) G437d@ls/false) ((lambda (G438d@t) ((lambda (G438f@ls/false) (if (and G438f@ls/false (apply (lambda (G4391@c G4392@ver) (eq? (G3051@syntax->datum G4391@c) 'not)) G438f@ls/false)) (apply (lambda (G4395@c G4396@ver) ((lambda (G4399@p) (lambda (G439b@x) (not (G4399@p G439b@x)))) (G4336@version-pred G4396@ver))) G438f@ls/false) ((lambda (G439d@t) ((lambda (G439f@ls/false) (if G439f@ls/false (apply (lambda (G43a1@sub*) ((lambda (G43a3@p*) (lambda (G43a5@x) ((letrec ((G43a7@f (lambda (G43a9@p* G43aa@x) (if (null? G43a9@p*) '#t (if (null? G43aa@x) '#f (and ((car G43a9@p*) (car G43aa@x)) (G43a7@f (cdr G43a9@p*) (cdr G43aa@x)))))))) G43a7@f) G43a3@p* G43a5@x))) (map G4334@subversion-pred G43a1@sub*))) G439f@ls/false) ((lambda (G43ad@t) ((lambda (G43af@ls/false) (if G43af@ls/false (apply (lambda () (G304b@syntax-violation 'import '"invalid version spec" G432f@spec G4361@x*)) G43af@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G43ad@t))) (G2f60@syntax-dispatch G43ad@t '_))) G439d@t))) (G2f60@syntax-dispatch G439d@t 'each-any))) G438d@t))) (G2f60@syntax-dispatch G438d@t '(any any)))) G437b@t))) (G2f60@syntax-dispatch G437b@t '(any . each-any)))) G4369@t))) (G2f60@syntax-dispatch G4369@t '(any . each-any)))) G4363@t))) (G2f60@syntax-dispatch G4363@t '()))) G4361@x*))) ((letrec ((G4337@f (lambda (G4339@x) ((lambda (G433b@t) ((lambda (G433d@ls/false) (if G433d@ls/false (apply (lambda (G433f@version-spec*) (values '() (G4336@version-pred G433f@version-spec*))) G433d@ls/false) ((lambda (G4341@t) ((lambda (G4343@ls/false) (if (and G4343@ls/false (apply (lambda (G4345@x G4346@x*) (G4266@idsyn? G4345@x)) G4343@ls/false)) (apply (lambda (G4349@x G434a@x*) (call-with-values (lambda () (G4337@f G434a@x*)) (lambda (G434f@G434d G4350@G434e) ((lambda (G4353@pred G4354@name) (values (cons (G3051@syntax->datum G4349@x) G4354@name) G4353@pred)) G4350@G434e G434f@G434d)))) G4343@ls/false) ((lambda (G4357@t) ((lambda (G4359@ls/false) (if G4359@ls/false (apply (lambda () (values '() (lambda (G435b@x) '#t))) G4359@ls/false) ((lambda (G435d@t) ((lambda (G435f@ls/false) (if G435f@ls/false (apply (lambda () (G304b@syntax-violation '#f '"invalid import spec" G432f@spec)) G435f@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G435d@t))) (G2f60@syntax-dispatch G435d@t '_))) G4357@t))) (G2f60@syntax-dispatch G4357@t '()))) G4341@t))) (G2f60@syntax-dispatch G4341@t '(any . any)))) G433b@t))) (G2f60@syntax-dispatch G433b@t '(each-any)))) G4339@x)))) G4337@f) G432f@spec))) '#f '#f '#f))) (set! G4276@import-library (lambda (G4321@spec*) (call-with-values (lambda () (G4274@parse-library-name G4321@spec*)) (lambda (G4325@G4323 G4326@G4324) ((lambda (G4329@pred G432a@name) (begin (if (null? G432a@name) (G304b@syntax-violation 'import '"empty library name" G4321@spec*) (void)) ((lambda (G432d@lib) (begin (if (not G432d@lib) (G304b@syntax-violation 'import '"cannot find library with required name" G432a@name) (void)) (if (not (G4329@pred (G2b49@G29c1@library-version G432d@lib))) (G304b@syntax-violation 'import '"library does not satisfy version specification" G4321@spec* G432d@lib) (void)) ((G2fd1@imp-collector) G432d@lib) (G2b4d@G29c9@library-subst G432d@lib))) (G2b71@G2a11@find-library-by-name G432a@name)))) G4326@G4324 G4325@G4323))))) (set! G4278@get-import (lambda (G4293@spec) ((lambda (G4295@t) ((lambda (G4297@ls/false) (if (and G4297@ls/false (apply (lambda (G4299@x G429a@x*) (not (memq (G3051@syntax->datum G4299@x) '(for rename except only prefix library)))) G4297@ls/false)) (apply (lambda (G429d@x G429e@x*) (G4276@import-library (cons G429d@x G429e@x*))) G4297@ls/false) ((lambda (G42a1@t) ((lambda (G42a3@ls/false) (if (and G42a3@ls/false (apply (lambda (G42a5@rename G42a6@isp G42a7@old* G42a8@new*) (and (eq? (G3051@syntax->datum G42a5@rename) 'rename) (for-all G4266@idsyn? G42a7@old*) (for-all G4266@idsyn? G42a8@new*))) G42a3@ls/false)) (apply (lambda (G42ad@rename G42ae@isp G42af@old* G42b0@new*) ((lambda (G42b5@subst G42b6@old* G42b7@new*) ((lambda (G42bb@old-label*) ((lambda (G42bd@subst) (G426a@merge-substs (map cons G42b7@new* G42bb@old-label*) G42bd@subst)) (G4270@rem* G42b6@old* G42b5@subst))) (G426e@find* G42b6@old* G42b5@subst))) (G4278@get-import G42ae@isp) (map G3051@syntax->datum G42af@old*) (map G3051@syntax->datum G42b0@new*))) G42a3@ls/false) ((lambda (G42bf@t) ((lambda (G42c1@ls/false) (if (and G42c1@ls/false (apply (lambda (G42c3@except G42c4@isp G42c5@sym*) (and (eq? (G3051@syntax->datum G42c3@except) 'except) (for-all G4266@idsyn? G42c5@sym*))) G42c1@ls/false)) (apply (lambda (G42c9@except G42ca@isp G42cb@sym*) ((lambda (G42cf@subst) (G4270@rem* (map G3051@syntax->datum G42cb@sym*) G42cf@subst)) (G4278@get-import G42ca@isp))) G42c1@ls/false) ((lambda (G42d1@t) ((lambda (G42d3@ls/false) (if (and G42d3@ls/false (apply (lambda (G42d5@only G42d6@isp G42d7@sym*) (and (eq? (G3051@syntax->datum G42d5@only) 'only) (for-all G4266@idsyn? G42d7@sym*))) G42d3@ls/false)) (apply (lambda (G42db@only G42dc@isp G42dd@sym*) ((lambda (G42e1@subst G42e2@sym*) ((lambda (G42e5@sym*) ((lambda (G42e7@lab*) (map cons G42e5@sym* G42e7@lab*)) (G426e@find* G42e5@sym* G42e1@subst))) (G4272@remove-dups G42e2@sym*))) (G4278@get-import G42dc@isp) (map G3051@syntax->datum G42dd@sym*))) G42d3@ls/false) ((lambda (G42e9@t) ((lambda (G42eb@ls/false) (if (and G42eb@ls/false (apply (lambda (G42ed@prefix G42ee@isp G42ef@p) (and (eq? (G3051@syntax->datum G42ed@prefix) 'prefix) (G4266@idsyn? G42ef@p))) G42eb@ls/false)) (apply (lambda (G42f3@prefix G42f4@isp G42f5@p) ((lambda (G42f9@subst G42fa@prefix) (map (lambda (G42fd@x) (cons (string->symbol (string-append G42fa@prefix (symbol->string (car G42fd@x)))) (cdr G42fd@x))) G42f9@subst)) (G4278@get-import G42f4@isp) (symbol->string (G3051@syntax->datum G42f5@p)))) G42eb@ls/false) ((lambda (G42ff@t) ((lambda (G4301@ls/false) (if (and G4301@ls/false (apply (lambda (G4303@library G4304@spec*) (eq? (G3051@syntax->datum G4303@library) 'library)) G4301@ls/false)) (apply (lambda (G4307@library G4308@spec*) (G4276@import-library G4308@spec*)) G4301@ls/false) ((lambda (G430b@t) ((lambda (G430d@ls/false) (if (and G430d@ls/false (apply (lambda (G430f@for G4310@isp G4311@rest) (eq? (G3051@syntax->datum G430f@for) 'for)) G430d@ls/false)) (apply (lambda (G4315@for G4316@isp G4317@rest) (G4278@get-import G4316@isp)) G430d@ls/false) ((lambda (G431b@t) ((lambda (G431d@ls/false) (if G431d@ls/false (apply (lambda (G431f@spec) (G304b@syntax-violation 'import '"invalid import spec" G431f@spec)) G431d@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G431b@t))) (G2f60@syntax-dispatch G431b@t 'any))) G430b@t))) (G2f60@syntax-dispatch G430b@t '(any any . any)))) G42ff@t))) (G2f60@syntax-dispatch G42ff@t '(any each-any)))) G42e9@t))) (G2f60@syntax-dispatch G42e9@t '(any any any)))) G42d1@t))) (G2f60@syntax-dispatch G42d1@t '(any any . each-any)))) G42bf@t))) (G2f60@syntax-dispatch G42bf@t '(any any . each-any)))) G42a1@t))) (G2f60@syntax-dispatch G42a1@t '(any any . #(each (any any)))))) G4295@t))) (G2f60@syntax-dispatch G4295@t '(any . each-any)))) G4293@spec))) (set! G427a@add-imports! (lambda (G4283@imp G4284@h) ((lambda (G4287@subst) (for-each (lambda (G4289@x) ((lambda (G428b@name G428c@label) ((lambda (G428f@t) (if G428f@t ((lambda (G4291@l) (if (not (eq? G4291@l G428c@label)) (G4268@dup-error G428b@name) (void))) G428f@t) (hashtable-set! G4284@h G428b@name G428c@label))) (hashtable-ref G4284@h G428b@name '#f))) (car G4289@x) (cdr G4289@x))) G4287@subst)) (G4278@get-import G4283@imp)))) (lambda (G427b@imp*) ((letrec ((G427d@f (lambda (G427f@imp* G4280@h) (if (null? G427f@imp*) (hashtable-entries G4280@h) (begin (G427a@add-imports! (car G427f@imp*) G4280@h) (G427d@f (cdr G427f@imp*) G4280@h)))))) G427d@f) G427b@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fc9@make-top-rib (lambda (G4467@names G4468@labels) ((lambda (G446b@rib) (begin (vector-for-each (lambda (G446d@name G446e@label) (begin (if (not (symbol? G446d@name)) (error 'make-top-rib '"BUG: not a symbol" G446d@name) (void)) (G2d14@extend-rib/nc! G446b@rib (G2d2b@make-stx G446d@name G2cd9@top-mark* '() '()) G446e@label))) G4467@names G4468@labels) G446b@rib)) (G2d0e@make-cache-rib)))) (set! G2fcb@make-collector (lambda () ((lambda (G4471@ls) (lambda G4475 ((lambda (G4476) (if (= G4476 '0) (apply (lambda () G4471@ls) G4475) (if (= G4476 '1) (apply (lambda (G4473@x) (set! G4471@ls (G2cd2@set-cons G4473@x G4471@ls))) G4475) (error 'apply '"invalid arg count")))) (length G4475)))) '()))) (set! G2fcd@inv-collector (G28fd@G2833@make-parameter (lambda G4477@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4479@x) (begin (if (not (procedure? G4479@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4479@x) (void)) G4479@x)))) (set! G2fcf@vis-collector (G28fd@G2833@make-parameter (lambda G447b@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G447d@x) (begin (if (not (procedure? G447d@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G447d@x) (void)) G447d@x)))) (set! G2fd1@imp-collector (G28fd@G2833@make-parameter (lambda G447f@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4481@x) (begin (if (not (procedure? G4481@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4481@x) (void)) G4481@x)))) (set! G2fd3@chi-library-internal (lambda (G4483@e* G4484@rib G4485@top?) (call-with-values (lambda () (G2fbd@chi-body* G4483@e* '() '() '() '() '() '() '() G4484@rib G4485@top?)) (lambda (G4491@G4489 G4492@G448a G4493@G448b G4494@G448c G4495@G448d G4496@G448e G4497@G448f G4498@G4490) ((lambda (G44a1@exp* G44a2@_kwd* G44a3@mod** G44a4@rhs* G44a5@lex* G44a6@mr G44a7@r G44a8@e*) (values (append (apply append (reverse G44a3@mod**)) G44a8@e*) G44a7@r G44a6@mr (reverse G44a5@lex*) (reverse G44a4@rhs*) G44a1@exp*)) G4498@G4490 G4497@G448f G4496@G448e G4495@G448d G4494@G448c G4493@G448b G4492@G448a G4491@G4489))))) (set! G2fd5@chi-interaction-expr (lambda (G44b1@e G44b2@rib G44b3@r) (call-with-values (lambda () (G2fbd@chi-body* (list G44b1@e) G44b3@r G44b3@r '() '() '() '() '() G44b2@rib '#t)) (lambda (G44bf@G44b7 G44c0@G44b8 G44c1@G44b9 G44c2@G44ba G44c3@G44bb G44c4@G44bc G44c5@G44bd G44c6@G44be) ((lambda (G44cf@_exp* G44d0@_kwd* G44d1@mod** G44d2@rhs* G44d3@lex* G44d4@mr G44d5@r G44d6@e*) ((lambda (G44df@e*) ((lambda (G44e1@e) (values G44e1@e G44d5@r)) (if (null? G44df@e*) (G2cbf@G2c31@build-void) (if (null? (cdr G44df@e*)) (car G44df@e*) (G2cbe@G2c2f@build-sequence '#f G44df@e*))))) (G2f92@expand-interaction-rhs*/init* (reverse G44d3@lex*) (reverse G44d2@rhs*) (append (apply append (reverse G44d1@mod**)) G44d6@e*) G44d5@r G44d4@mr))) G44c6@G44be G44c5@G44bd G44c4@G44bc G44c3@G44bb G44c2@G44ba G44c1@G44b9 G44c0@G44b8 G44bf@G44b7))))) (set! G2fd7@library-body-expander (lambda (G44e3@name G44e4@main-exp* G44e5@imp* G44e6@b* G44e7@top?) ((lambda (G44ee@itc) (begin (set! G44ee@itc (G2fcb@make-collector)) ((lambda (G44f3@G44ef G44f4@G44f0 G44f5@G44f1 G44f6@G44f2) ((lambda (G44fb@swap) (dynamic-wind G44fb@swap (lambda () (call-with-values (lambda () (G2fc7@parse-import-spec* G44e5@imp*)) (lambda (G44ff@G44fd G4500@G44fe) ((lambda (G4503@subst-labels G4504@subst-names) ((lambda (G4507@rib) ((lambda (G450a@wrap) (begin (set! G450a@wrap (lambda (G4576@x) (G2d2b@make-stx G4576@x G2cd9@top-mark* (list G4507@rib) '()))) ((lambda (G450b@b* G450c@main-exp* G450d@rtc G450e@vtc) ((lambda (G4517@G4513 G4518@G4514 G4519@G4515 G451a@G4516) ((lambda (G451f@swap) (dynamic-wind G451f@swap (lambda () (call-with-values (lambda () (G2fd3@chi-library-internal G450b@b* G4507@rib G44e7@top?)) (lambda (G4527@G4521 G4528@G4522 G4529@G4523 G452a@G4524 G452b@G4525 G452c@G4526) ((lambda (G4533@internal-exp* G4534@rhs* G4535@lex* G4536@mr G4537@r G4538@init*) (call-with-values (lambda () (G2fc1@parse-exports (append G450c@main-exp* G4533@internal-exp*))) (lambda (G4541@G453f G4542@G4540) ((lambda (G4545@exp-id* G4546@exp-name*) (begin (G2d18@seal-rib! G4507@rib) ((lambda (G4549@init*) ((lambda (G454b@rhs*) ((lambda () (begin (G2d1a@unseal-rib! G4507@rib) ((lambda (G454d@loc* G454e@export-subst) ((lambda (G4552@errstr) (begin (set! G4552@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3037@make-export-env/macros G4535@lex* G454d@loc* G4537@r)) (lambda (G4556@G4553 G4557@G4554 G4558@G4555) ((lambda (G455c@macro* G455d@global* G455e@export-env) (begin (for-each (lambda (G4562@s) ((lambda (G4564@name G4565@label) ((lambda (G4568@p) (if G4568@p ((lambda (G456a@b) ((lambda (G456c@type) (if (eq? G456c@type 'mutable) (G304b@syntax-violation 'export G4552@errstr G4564@name) (void))) (car G456a@b))) (cdr G4568@p)) (void))) (assq G4565@label G455e@export-env))) (car G4562@s) (cdr G4562@s))) G454e@export-subst) ((lambda (G456e@invoke-body G456f@invoke-definitions) (values (G44ee@itc) (G450d@rtc) (G450e@vtc) (G2cbe@G2c2f@build-sequence '#f (append G456f@invoke-definitions (list G456e@invoke-body))) G455c@macro* G454e@export-subst G455e@export-env)) (G2cc1@G2c35@build-letrec* '#f G4535@lex* G454b@rhs* (G3033@build-exports G455d@global* G4549@init*)) (map G2cba@G2b7f@build-global-define (map cdr G455d@global*))))) G4558@G4555 G4557@G4554 G4556@G4553))))) '#f)) (map G2cdf@gen-global G4535@lex*) (G3035@make-export-subst G4546@exp-name* G4545@exp-id*)))))) (G2f94@chi-rhs* G4534@rhs* G4537@r G4536@mr))) (G2f80@chi-expr* G4538@init* G4537@r G4536@mr)))) G4542@G4540 G4541@G453f)))) G452c@G4526 G452b@G4525 G452a@G4524 G4529@G4523 G4528@G4522 G4527@G4521)))) G451f@swap)) (lambda () (begin ((lambda (G4572@t) (begin (G4517@G4513 G4519@G4515) (set! G4519@G4515 G4572@t))) (G4517@G4513)) ((lambda (G4574@t) (begin (G4518@G4514 G451a@G4516) (set! G451a@G4516 G4574@t))) (G4518@G4514)))))) G2fcd@inv-collector G2fcf@vis-collector G450d@rtc G450e@vtc)) (map G450a@wrap G44e6@b*) (map G450a@wrap G44e4@main-exp*) (G2fcb@make-collector) (G2fcb@make-collector)))) '#f)) (G2fc9@make-top-rib G4504@subst-names G4503@subst-labels))) G4500@G44fe G44ff@G44fd)))) G44fb@swap)) (lambda () (begin ((lambda (G4578@t) (begin (G44f3@G44ef G44f5@G44f1) (set! G44f5@G44f1 G4578@t))) (G44f3@G44ef)) ((lambda (G457a@t) (begin (G44f4@G44f0 G44f6@G44f2) (set! G44f6@G44f2 G457a@t))) (G44f4@G44f0)))))) G2fd1@imp-collector G3059@top-level-context G44ee@itc '#f))) '#f))) (set! G2fd9@core-library-expander (lambda (G457c@e G457d@verify-name) (call-with-values (lambda () (G2fc5@parse-library G457c@e)) (lambda (G4584@G4580 G4585@G4581 G4586@G4582 G4587@G4583) ((lambda (G458c@b* G458d@imp* G458e@exp* G458f@name*) (call-with-values (lambda () (G2fc3@parse-library-name G458f@name*)) (lambda (G4596@G4594 G4597@G4595) ((lambda (G459a@ver G459b@name) (begin (G457d@verify-name G459b@name) (call-with-values (lambda () (G2fd7@library-body-expander G459b@name G458e@exp* G458d@imp* G458c@b* '#f)) (lambda (G45a5@G459e G45a6@G459f G45a7@G45a0 G45a8@G45a1 G45a9@G45a2 G45aa@G45a3 G45ab@G45a4) ((lambda (G45b3@export-env G45b4@export-subst G45b5@visit-code G45b6@invoke-code G45b7@visit-req* G45b8@invoke-req* G45b9@imp*) (values G459b@name G459a@ver G45b9@imp* G45b8@invoke-req* G45b7@visit-req* G45b6@invoke-code G45b5@visit-code G45b4@export-subst G45b3@export-env)) G45ab@G45a4 G45aa@G45a3 G45a9@G45a2 G45a8@G45a1 G45a7@G45a0 G45a6@G459f G45a5@G459e))))) G4597@G4595 G4596@G4594)))) G4587@G4583 G4586@G4582 G4585@G4581 G4584@G4580))))) (set! G2fdb@parse-top-level-program (lambda (G45c1@e*) ((lambda (G45c3@t) ((lambda (G45c5@ls/false) (if (and G45c5@ls/false (apply (lambda (G45c7@import G45c8@imp* G45c9@b*) (eq? (G3051@syntax->datum G45c7@import) 'import)) G45c5@ls/false)) (apply (lambda (G45cd@import G45ce@imp* G45cf@b*) (values G45ce@imp* G45cf@b*)) G45c5@ls/false) ((lambda (G45d3@t) ((lambda (G45d5@ls/false) (if (and G45d5@ls/false (apply (lambda (G45d7@import G45d8@x G45d9@y) (eq? (G3051@syntax->datum G45d7@import) 'import)) G45d5@ls/false)) (apply (lambda (G45dd@import G45de@x G45df@y) (G304b@syntax-violation 'expander '"invalid syntax of top-level program" (G2d5b@syntax-car G45c1@e*))) G45d5@ls/false) ((lambda (G45e3@t) ((lambda (G45e5@ls/false) (if G45e5@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45e5@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G45e3@t))) (G2f60@syntax-dispatch G45e3@t '_))) G45d3@t))) (G2f60@syntax-dispatch G45d3@t '((any . any) . any)))) G45c3@t))) (G2f60@syntax-dispatch G45c3@t '((any . each-any) . each-any)))) G45c1@e*))) (set! G2fdd@top-level-expander (lambda (G45e7@e*) (call-with-values (lambda () (G2fdb@parse-top-level-program G45e7@e*)) (lambda (G45eb@G45e9 G45ec@G45ea) ((lambda (G45ef@b* G45f0@imp*) (call-with-values (lambda () (G2fd7@library-body-expander '() '() G45f0@imp* G45ef@b* '#t)) (lambda (G45fa@G45f3 G45fb@G45f4 G45fc@G45f5 G45fd@G45f6 G45fe@G45f7 G45ff@G45f8 G4600@G45f9) ((lambda (G4608@export-env G4609@export-subst G460a@visit-code G460b@invoke-code G460c@visit-req* G460d@invoke-req* G460e@imp*) (values G460d@invoke-req* G460b@invoke-code)) G4600@G45f9 G45ff@G45f8 G45fe@G45f7 G45fd@G45f6 G45fc@G45f5 G45fb@G45f4 G45fa@G45f3)))) G45ec@G45ea G45eb@G45e9))))) (set! G2fe3@G2fde (make-record-type-descriptor 'env '#f 'G2fe1 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2fe5@G2fe0 '#f) (set! G2fe7@G2fdf (make-record-constructor-descriptor G2fe3@G2fde '#f G2fe5@G2fe0)) (set! G2fea@env? (record-predicate G2fe3@G2fde)) (set! G2fec@make-env (record-constructor G2fe7@G2fdf)) (set! G2fee@env-names (record-accessor G2fe3@G2fde '0)) (set! G2ff0@env-labels (record-accessor G2fe3@G2fde '1)) (set! G2ff2@env-itc (record-accessor G2fe3@G2fde '2)) (set! G2ff4@set-env-names! (record-mutator G2fe3@G2fde '0)) (set! G2ff6@set-env-labels! (record-mutator G2fe3@G2fde '1)) (set! G2ff8@set-env-itc! (record-mutator G2fe3@G2fde '2)) (set! G2ffa@rp (G28fa@G282d@make-record-printer 'env (lambda (G4616@x G4617@p G4618@wr) (display '"#<environment>" G4617@p)))) (set! G3000@G2ffb (make-record-type-descriptor 'interaction-env '#f 'G2ffe '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3002@G2ffd '#f) (set! G3004@G2ffc (make-record-constructor-descriptor G3000@G2ffb '#f G3002@G2ffd)) (set! G3007@interaction-env? (record-predicate G3000@G2ffb)) (set! G3009@make-interaction-env (record-constructor G3004@G2ffc)) (set! G300b@interaction-env-rib (record-accessor G3000@G2ffb '0)) (set! G300d@interaction-env-r (record-accessor G3000@G2ffb '1)) (set! G300f@interaction-env-locs (record-accessor G3000@G2ffb '2)) (set! G3011@set-interaction-env-rib! (record-mutator G3000@G2ffb '0)) (set! G3013@set-interaction-env-r! (record-mutator G3000@G2ffb '1)) (set! G3015@set-interaction-env-locs! (record-mutator G3000@G2ffb '2)) (set! G3017@rp (G28fa@G282d@make-record-printer 'interaction-env (lambda (G461c@x G461d@p G461e@wr) (display '"#<environment>" G461d@p)))) (set! G3019@interaction-environment-symbols (lambda () (G3021@environment-symbols (G3057@interaction-environment)))) (set! G301b@environment-bindings (lambda (G4622@e) (vector->list (vector-map (lambda (G4624@name G4625@label) (G301d@parse-binding (cons G4624@name (G2b77@G2a1d@imported-label->binding G4625@label)))) (G2fee@env-names G4622@e) (G2ff0@env-labels G4622@e))))) (set! G301d@parse-binding (lambda (G4628@b) (cons (car G4628@b) ((lambda (G462a@t) (if (memv G462a@t '(core-prim global)) 'procedure (if (memv G462a@t '(core-macro macro global-macro)) 'syntax (if (memv G462a@t '($core-rtd)) 'record (if (eq? (car G4628@b) (cadr G4628@b)) 'syntax 'unknown))))) (cadr G4628@b))))) (set! G301f@environment? (lambda (G462c@x) (or (G2fea@env? G462c@x) (G3007@interaction-env? G462c@x)))) (set! G3021@environment-symbols (lambda (G462e@x) (if (G2fea@env? G462e@x) (vector->list (G2fee@env-names G462e@x)) (if (G3007@interaction-env? G462e@x) (map values (G2cf8@rib-sym* (G300b@interaction-env-rib G462e@x))) (assertion-violation 'environment-symbols '"not an environment" G462e@x))))) (set! G3023@environment (lambda G4630@imp* ((lambda (G4632@itc) ((lambda (G4636@G4634 G4637@G4635) ((lambda (G463a@swap) (dynamic-wind G463a@swap (lambda () (call-with-values (lambda () (G2fc7@parse-import-spec* G4630@imp*)) (lambda (G463e@G463c G463f@G463d) ((lambda (G4642@subst-labels G4643@subst-names) (G2fec@make-env G4643@subst-names G4642@subst-labels G4632@itc)) G463f@G463d G463e@G463c)))) G463a@swap)) (lambda () ((lambda (G4646@t) (begin (G4636@G4634 G4637@G4635) (set! G4637@G4635 G4646@t))) (G4636@G4634))))) G2fd1@imp-collector G4632@itc)) (G2fcb@make-collector)))) (set! G3025@null-environment (lambda (G4648@n) (begin (if (not (eqv? G4648@n '5)) (assertion-violation 'null-environment '"not 5" G4648@n) (void)) (G3023@environment '(psyntax null-environment-5))))) (set! G3027@scheme-report-environment (lambda (G464a@n) (begin (if (not (eqv? G464a@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G464a@n) (void)) (G3023@environment '(psyntax scheme-report-environment-5))))) (set! G3029@expand (lambda (G464c@x G464d@env) (if (G2fea@env? G464d@env) ((lambda (G4650@rib) ((lambda (G4652@x G4653@itc G4654@rtc G4655@vtc) ((lambda (G465a@x) (begin (G2d18@seal-rib! G4650@rib) (values G465a@x (G4654@rtc)))) ((lambda (G4664@G465c G4665@G465d G4666@G465e G4667@G465f G4668@G4660 G4669@G4661 G466a@G4662 G466b@G4663) ((lambda (G4674@swap) (dynamic-wind G4674@swap (lambda () (G2f84@chi-expr G4652@x '() '())) G4674@swap)) (lambda () (begin ((lambda (G4676@t) (begin (G4664@G465c G4668@G4660) (set! G4668@G4660 G4676@t))) (G4664@G465c)) ((lambda (G4678@t) (begin (G4665@G465d G4669@G4661) (set! G4669@G4661 G4678@t))) (G4665@G465d)) ((lambda (G467a@t) (begin (G4666@G465e G466a@G4662) (set! G466a@G4662 G467a@t))) (G4666@G465e)) ((lambda (G467c@t) (begin (G4667@G465f G466b@G4663) (set! G466b@G4663 G467c@t))) (G4667@G465f)))))) G3059@top-level-context G2fcd@inv-collector G2fcf@vis-collector G2fd1@imp-collector '#f G4654@rtc G4655@vtc G4653@itc))) (G2d2b@make-stx G464c@x G2cd9@top-mark* (list G4650@rib) '()) (G2ff2@env-itc G464d@env) (G2fcb@make-collector) (G2fcb@make-collector))) (G2fc9@make-top-rib (G2fee@env-names G464d@env) (G2ff0@env-labels G464d@env))) (if (G3007@interaction-env? G464d@env) ((lambda (G467e@rib G467f@r G4680@rtc) ((lambda (G4684@x) (call-with-values (lambda () ((lambda (G4690@G4688 G4691@G4689 G4692@G468a G4693@G468b G4694@G468c G4695@G468d G4696@G468e G4697@G468f) ((lambda (G46a0@swap) (dynamic-wind G46a0@swap (lambda () (G2fd5@chi-interaction-expr G4684@x G467e@rib G467f@r)) G46a0@swap)) (lambda () (begin ((lambda (G46a2@t) (begin (G4690@G4688 G4694@G468c) (set! G4694@G468c G46a2@t))) (G4690@G4688)) ((lambda (G46a4@t) (begin (G4691@G4689 G4695@G468d) (set! G4695@G468d G46a4@t))) (G4691@G4689)) ((lambda (G46a6@t) (begin (G4692@G468a G4696@G468e) (set! G4696@G468e G46a6@t))) (G4692@G468a)) ((lambda (G46a8@t) (begin (G4693@G468b G4697@G468f) (set! G4697@G468f G46a8@t))) (G4693@G468b)))))) G3059@top-level-context G2fcd@inv-collector G2fcf@vis-collector G2fd1@imp-collector G464d@env G4680@rtc (G2fcb@make-collector) (G2fcb@make-collector))) (lambda (G46aa@G4686 G46ab@G4687) ((lambda (G46ae@r^ G46af@e) (begin (G3013@set-interaction-env-r! G464d@env G46ae@r^) (values G46af@e (G4680@rtc)))) G46ab@G4687 G46aa@G4686)))) (G2d2b@make-stx G464c@x G2cd9@top-mark* (list G467e@rib) '()))) (G300b@interaction-env-rib G464d@env) (G300d@interaction-env-r G464d@env) (G2fcb@make-collector)) (assertion-violation 'expand '"not an environment" G464d@env))))) (set! G302b@eval (lambda (G46b2@x G46b3@env) (begin (if (not (G301f@environment? G46b3@env)) (error 'eval '"not an environment" G46b3@env) (void)) (call-with-values (lambda () (G3029@expand G46b2@x G46b3@env)) (lambda (G46b8@G46b6 G46b9@G46b7) ((lambda (G46bc@invoke-req* G46bd@x) (begin (for-each G2b78@G2a1f@invoke-library G46bc@invoke-req*) (eval-core (G2951@G2909@expanded->core G46bd@x)))) G46b9@G46b7 G46b8@G46b6)))))) (set! G302d@library-expander (lambda G4725 ((lambda (G4726) (if (= G4726 '3) (apply (lambda (G46c0@x G46c1@filename G46c2@verify-name) ((lambda (G46c7@build-visit-code G46c9@visit!) (begin (set! G46c7@build-visit-code (lambda (G4713@macro*) (if (null? G4713@macro*) (G2cbf@G2c31@build-void) (G2cbe@G2c2f@build-sequence '#f (map (lambda (G4715@x) ((lambda (G4717@loc G4718@src) (list 'set! G4717@loc G4718@src)) (car G4715@x) (cddr G4715@x))) G4713@macro*))))) (set! G46c9@visit! (lambda (G470b@macro*) (for-each (lambda (G470d@x) ((lambda (G470f@loc G4710@proc) (set-symbol-value! G470f@loc G4710@proc)) (car G470d@x) (cadr G470d@x))) G470b@macro*))) (call-with-values (lambda () (G2fd9@core-library-expander G46c0@x G46c2@verify-name)) (lambda (G46d3@G46ca G46d4@G46cb G46d5@G46cc G46d6@G46cd G46d7@G46ce G46d8@G46cf G46d9@G46d0 G46da@G46d1 G46db@G46d2) ((lambda (G46e5@export-env G46e6@export-subst G46e7@macro* G46e8@invoke-code G46e9@vis* G46ea@inv* G46eb@imp* G46ec@ver G46ed@name) ((lambda (G46f7@id G46f8@name G46f9@ver G46fa@imp* G46fb@vis* G46fc@inv* G46fd@visit-proc G46fe@invoke-proc G46ff@visit-code G4700@invoke-code) (begin (G2b76@G2a1b@install-library G46f7@id G46f8@name G46f9@ver G46fa@imp* G46fb@vis* G46fc@inv* G46e6@export-subst G46e5@export-env G46fd@visit-proc G46fe@invoke-proc G46ff@visit-code G4700@invoke-code '#t G46c1@filename) (values G46f7@id G46f8@name G46f9@ver G46fa@imp* G46fb@vis* G46fc@inv* G4700@invoke-code G46ff@visit-code G46e6@export-subst G46e5@export-env))) (gensym) G46ed@name G46ec@ver (map G2b7c@G2a27@library-spec G46eb@imp*) (map G2b7c@G2a27@library-spec G46e9@vis*) (map G2b7c@G2a27@library-spec G46ea@inv*) (lambda () (G46c9@visit! G46e7@macro*)) (lambda () (eval-core (G2951@G2909@expanded->core G46e8@invoke-code))) (G46c7@build-visit-code G46e7@macro*) G46e8@invoke-code)) G46db@G46d2 G46da@G46d1 G46d9@G46d0 G46d8@G46cf G46d7@G46ce G46d6@G46cd G46d5@G46cc G46d4@G46cb G46d3@G46ca))))) '#f '#f)) G4725) (if (= G4726 '2) (apply (lambda (G471b@x G471c@filename) (G302d@library-expander G471b@x G471c@filename (lambda (G471f@x) (values)))) G4725) (if (= G4726 '1) (apply (lambda (G4721@x) (G302d@library-expander G4721@x '#f (lambda (G4723@x) (values)))) G4725) (error 'apply '"invalid arg count"))))) (length G4725)))) (set! G302f@boot-library-expand (lambda (G4727@x) (call-with-values (lambda () (G302d@library-expander G4727@x)) (lambda (G4733@G4729 G4734@G472a G4735@G472b G4736@G472c G4737@G472d G4738@G472e G4739@G472f G473a@G4730 G473b@G4731 G473c@G4732) ((lambda (G4747@export-env G4748@export-subst G4749@visit-code G474a@invoke-code G474b@inv* G474c@vis* G474d@imp* G474e@ver G474f@name G4750@id) (values G474f@name G474a@invoke-code G4748@export-subst G4747@export-env)) G473c@G4732 G473b@G4731 G473a@G4730 G4739@G472f G4738@G472e G4737@G472d G4736@G472c G4735@G472b G4734@G472a G4733@G4729))))) (set! G3031@rev-map-append (lambda (G475b@f G475c@ls G475d@ac) (if (null? G475c@ls) G475d@ac (G3031@rev-map-append G475b@f (cdr G475c@ls) (cons (G475b@f (car G475c@ls)) G475d@ac))))) (set! G3033@build-exports (lambda (G4761@lex*+loc* G4762@init*) (G2cbe@G2c2f@build-sequence '#f (cons (G2cbf@G2c31@build-void) (G3031@rev-map-append (lambda (G4765@x) (list 'set! (cdr G4765@x) (car G4765@x))) G4761@lex*+loc* G4762@init*))))) (set! G3035@make-export-subst (lambda (G4767@name* G4768@id*) (map (lambda (G476b@name G476c@id) ((lambda (G476f@label) (begin (if (not G476f@label) (G304b@syntax-violation '#f '"cannot export unbound identifier" G476c@id) (void)) (cons G476b@name G476f@label))) (G2d7b@id->label G476c@id))) G4767@name* G4768@id*))) (set! G3037@make-export-env/macros (lambda (G4771@lex* G4772@loc* G4773@r) ((lambda (G4778@lookup) (begin (set! G4778@lookup (lambda (G4795@x) ((letrec ((G4797@f (lambda (G4799@x G479a@lex* G479b@loc*) (if (pair? G479a@lex*) (if (eq? G4799@x (car G479a@lex*)) (car G479b@loc*) (G4797@f G4799@x (cdr G479a@lex*) (cdr G479b@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4797@f) G4795@x G4771@lex* G4772@loc*))) ((letrec ((G4779@f (lambda (G477b@r G477c@env G477d@global* G477e@macro*) (if (null? G477b@r) (values G477c@env G477d@global* G477e@macro*) ((lambda (G4783@x) ((lambda (G4785@label G4786@b) ((lambda (G4789@t) (if (memv G4789@t '(lexical)) ((lambda (G478b@v) ((lambda (G478d@loc G478e@type) (G4779@f (cdr G477b@r) (cons (cons* G4785@label G478e@type G478d@loc) G477c@env) (cons (cons (G2eec@lexical-var G478b@v) G478d@loc) G477d@global*) G477e@macro*)) (G4778@lookup (G2eec@lexical-var G478b@v)) (if (G2eee@lexical-mutable? G478b@v) 'mutable 'global))) (G2d85@binding-value G4786@b)) (if (memv G4789@t '(local-macro)) ((lambda (G4791@loc) (G4779@f (cdr G477b@r) (cons (cons* G4785@label 'global-macro G4791@loc) G477c@env) G477d@global* (cons (cons G4791@loc (G2d85@binding-value G4786@b)) G477e@macro*))) (gensym)) (if (memv G4789@t '(local-macro!)) ((lambda (G4793@loc) (G4779@f (cdr G477b@r) (cons (cons* G4785@label 'global-macro! G4793@loc) G477c@env) G477d@global* (cons (cons G4793@loc (G2d85@binding-value G4786@b)) G477e@macro*))) (gensym)) (if (memv G4789@t '($rtd $module)) (G4779@f (cdr G477b@r) (cons G4783@x G477c@env) G477d@global* G477e@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d83@binding-type G4786@b) (G2d85@binding-value G4786@b))))))) (G2d83@binding-type G4786@b))) (car G4783@x) (cdr G4783@x))) (car G477b@r)))))) G4779@f) G4773@r '() '() '()))) '#f))) (set! G3039@generate-temporaries (lambda (G479f@ls) ((lambda (G47a1@t) ((lambda (G47a3@ls/false) (if G47a3@ls/false (apply (lambda (G47a5@ls) (map (lambda (G47a7@x) (G2d2b@make-stx ((lambda (G47a9@x) (if (or (symbol? G47a9@x) (string? G47a9@x)) (gensym G47a9@x) (gensym 't))) (G3051@syntax->datum G47a7@x)) G2cd9@top-mark* '() '())) G47a5@ls)) G47a3@ls/false) ((lambda (G47ab@t) ((lambda (G47ad@ls/false) (if G47ad@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G47ad@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G47ab@t))) (G2f60@syntax-dispatch G47ab@t '_))) G47a1@t))) (G2f60@syntax-dispatch G47a1@t 'each-any))) G479f@ls))) (set! G303b@free-identifier=? (lambda (G47af@x G47b0@y) (if (G2d61@id? G47af@x) (if (G2d61@id? G47b0@y) (G2d69@free-id=? G47af@x G47b0@y) (assertion-violation 'free-identifier=? '"not an identifier" G47b0@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47af@x)))) (set! G303d@bound-identifier=? (lambda (G47b3@x G47b4@y) (if (G2d61@id? G47b3@x) (if (G2d61@id? G47b4@y) (G2d67@bound-id=? G47b3@x G47b4@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47b4@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47b3@x)))) (set! G303f@make-source-condition (lambda (G47b7@x) ((lambda (G47c1@G47bc G47c3@G47be G47c5@G47bd G47c8@G47bb G47ca@make-source-condition G47cc@G47b9 G47ce@G47ba G47d0@source-condition? G47d2@source-filename G47d4@source-character) (begin (set! G47c1@G47bc (make-record-type-descriptor '&source-information G4c13@G4964@&condition-rtd 'G47bf '#f '#f '#((immutable file-name) (immutable character)))) (set! G47c3@G47be '#f) (set! G47c5@G47bd (make-record-constructor-descriptor G47c1@G47bc G4c14@G4966@&condition-rcd G47c3@G47be)) (set! G47c8@G47bb (record-predicate G47c1@G47bc)) (set! G47ca@make-source-condition (record-constructor G47c5@G47bd)) (set! G47cc@G47b9 (record-accessor G47c1@G47bc '0)) (set! G47ce@G47ba (record-accessor G47c1@G47bc '1)) (set! G47d0@source-condition? (condition-predicate G47c1@G47bc)) (set! G47d2@source-filename (condition-accessor G47c1@G47bc G47cc@G47b9)) (set! G47d4@source-character (condition-accessor G47c1@G47bc G47ce@G47ba)) (if (pair? G47b7@x) (G47ca@make-source-condition (car G47b7@x) (cdr G47b7@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3041@extract-position-condition (lambda (G47d5@x) (G303f@make-source-condition (G3043@expression-position G47d5@x)))) (set! G3043@expression-position (lambda (G47d7@x) (and (G2d29@stx? G47d7@x) ((lambda (G47d9@x) (and (G28f2@G281d@annotation? G47d9@x) (G28f3@G281f@annotation-source G47d9@x))) (G2d2d@stx-expr G47d7@x))))) (set! G3045@assertion-error (lambda (G47db@expr G47dc@pos) (raise (condition (G4c43@G4a26@make-assertion-violation) (G4c55@G4a56@make-who-condition 'assert) (G4c19@G49b9@make-message-condition '"assertion failed") (G4c4b@G4a3c@make-irritants-condition (list G47db@expr)) (G303f@make-source-condition G47dc@pos))))) (set! G3047@syntax-error (lambda (G47df@x . G47e1@args) (begin (if (not (for-all string? G47e1@args)) (assertion-violation 'syntax-error '"invalid argument" G47e1@args) (void)) (raise (condition (G4c19@G49b9@make-message-condition (if (null? G47e1@args) '"invalid syntax" (apply string-append G47e1@args))) (G4c77@G4ab0@make-syntax-violation (G3051@syntax->datum G47df@x) '#f) (G3041@extract-position-condition G47df@x)))))) (set! G3049@syntax-violation* (lambda (G47e3@who G47e4@msg G47e5@form G47e6@condition-object) (begin (if (not (string? G47e4@msg)) (assertion-violation 'syntax-violation '"message is not a string" G47e4@msg) (void)) ((lambda (G47eb@who) (raise (condition (if G47eb@who (G4c55@G4a56@make-who-condition G47eb@who) (condition)) (G4c19@G49b9@make-message-condition G47e4@msg) G47e6@condition-object (G3041@extract-position-condition G47e5@form)))) (if (or (string? G47e3@who) (symbol? G47e3@who)) G47e3@who (if (not G47e3@who) ((lambda (G47ed@t) ((lambda (G47ef@ls/false) (if (and G47ef@ls/false (apply (lambda (G47f1@id) (G2d61@id? G47f1@id)) G47ef@ls/false)) (apply (lambda (G47f3@id) (G3051@syntax->datum G47f3@id)) G47ef@ls/false) ((lambda (G47f5@t) ((lambda (G47f7@ls/false) (if (and G47f7@ls/false (apply (lambda (G47f9@id G47fa@rest) (G2d61@id? G47f9@id)) G47f7@ls/false)) (apply (lambda (G47fd@id G47fe@rest) (G3051@syntax->datum G47fd@id)) G47f7@ls/false) ((lambda (G4801@t) ((lambda (G4803@ls/false) (if G4803@ls/false (apply (lambda () '#f) G4803@ls/false) (G304b@syntax-violation '#f '"invalid syntax" G4801@t))) (G2f60@syntax-dispatch G4801@t '_))) G47f5@t))) (G2f60@syntax-dispatch G47f5@t '(any . any)))) G47ed@t))) (G2f60@syntax-dispatch G47ed@t 'any))) G47e5@form) (assertion-violation 'syntax-violation '"invalid who argument" G47e3@who))))))) (set! G304b@syntax-violation (lambda G4813 ((lambda (G4814) (if (= G4814 '3) (apply (lambda (G4805@who G4806@msg G4807@form) (G304b@syntax-violation G4805@who G4806@msg G4807@form '#f)) G4813) (if (= G4814 '4) (apply (lambda (G480b@who G480c@msg G480d@form G480e@subform) (G3049@syntax-violation* G480b@who G480c@msg G480d@form (G4c77@G4ab0@make-syntax-violation (G3051@syntax->datum G480d@form) (G3051@syntax->datum G480e@subform)))) G4813) (error 'apply '"invalid arg count")))) (length G4813)))) (set! G304d@identifier? (lambda (G4815@x) (G2d61@id? G4815@x))) (set! G304f@datum->syntax (lambda (G4817@id G4818@datum) (if (G2d61@id? G4817@id) (G2d3f@datum->stx G4817@id G4818@datum) (assertion-violation 'datum->syntax '"not an identifier" G4817@id)))) (set! G3051@syntax->datum (lambda (G481b@x) (G2d77@stx->datum G481b@x))) (set! G3053@compile-r6rs-top-level (lambda (G481d@x*) (call-with-values (lambda () (G2fdd@top-level-expander G481d@x*)) (lambda (G4821@G481f G4822@G4820) ((lambda (G4825@invoke-code G4826@lib*) (lambda () (begin (for-each G2b78@G2a1f@invoke-library G4826@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2951@G2909@expanded->core G4825@invoke-code)) (void)) (eval-core (G2951@G2909@expanded->core G4825@invoke-code))))) G4822@G4820 G4821@G481f))))) (set! G3055@pre-compile-r6rs-top-level (lambda (G4829@x*) (call-with-values (lambda () (G2fdd@top-level-expander G4829@x*)) (lambda (G482d@G482b G482e@G482c) ((lambda (G4831@invoke-code G4832@lib*) (begin (for-each G2b78@G2a1f@invoke-library G4832@lib*) (G28fb@G282f@compile-core (G2951@G2909@expanded->core G4831@invoke-code)))) G482e@G482c G482d@G482b))))) (set! G3057@interaction-environment ((lambda (G4835@the-env) (lambda () (or G4835@the-env ((lambda (G4837@lib G4838@rib) (begin ((lambda (G483b@subst) (begin (G2d02@set-rib-sym*! G4838@rib (map car G483b@subst)) (G2d04@set-rib-mark**! G4838@rib (map (lambda (G483d@x) G2cd9@top-mark*) G483b@subst)) (G2d06@set-rib-label*! G4838@rib (map cdr G483b@subst)))) (G2b4d@G29c9@library-subst G4837@lib)) ((lambda (G483f@env) (begin (set! G4835@the-env G483f@env) G483f@env)) (G3009@make-interaction-env G4838@rib '() '())))) (G2b71@G2a11@find-library-by-name '(mosh interaction)) (G2d0c@make-empty-rib))))) '#f)) (set! G3059@top-level-context (G28fd@G2833@make-parameter '#f)) (begin (set! G494f@G3059@top-level-context G3059@top-level-context) (set! G494e@G3057@interaction-environment G3057@interaction-environment) (set! G494d@G3055@pre-compile-r6rs-top-level G3055@pre-compile-r6rs-top-level) (set! G494c@G3053@compile-r6rs-top-level G3053@compile-r6rs-top-level) (set! G494b@G3051@syntax->datum G3051@syntax->datum) (set! G494a@G304f@datum->syntax G304f@datum->syntax) (set! G4949@G304d@identifier? G304d@identifier?) (set! G4948@G304b@syntax-violation G304b@syntax-violation) (set! G4947@G3049@syntax-violation* G3049@syntax-violation*) (set! G4946@G3047@syntax-error G3047@syntax-error) (set! G4945@G3045@assertion-error G3045@assertion-error) (set! G4944@G3043@expression-position G3043@expression-position) (set! G4943@G3041@extract-position-condition G3041@extract-position-condition) (set! G4942@G303f@make-source-condition G303f@make-source-condition) (set! G4941@G303d@bound-identifier=? G303d@bound-identifier=?) (set! G4940@G303b@free-identifier=? G303b@free-identifier=?) (set! G493f@G3039@generate-temporaries G3039@generate-temporaries) (set! G493e@G3037@make-export-env/macros G3037@make-export-env/macros) (set! G493d@G3035@make-export-subst G3035@make-export-subst) (set! G493c@G3033@build-exports G3033@build-exports) (set! G493b@G3031@rev-map-append G3031@rev-map-append) (set! G493a@G302f@boot-library-expand G302f@boot-library-expand) (set! G4939@G302d@library-expander G302d@library-expander) (set! G4938@G302b@eval G302b@eval) (set! G4937@G3029@expand G3029@expand) (set! G4936@G3027@scheme-report-environment G3027@scheme-report-environment) (set! G4935@G3025@null-environment G3025@null-environment) (set! G4934@G3023@environment G3023@environment) (set! G4933@G3021@environment-symbols G3021@environment-symbols) (set! G4932@G301f@environment? G301f@environment?) (set! G4931@G301d@parse-binding G301d@parse-binding) (set! G4930@G301b@environment-bindings G301b@environment-bindings) (set! G492f@G3019@interaction-environment-symbols G3019@interaction-environment-symbols) (set! G492e@G3017@rp G3017@rp) (set! G492d@G3015@set-interaction-env-locs! G3015@set-interaction-env-locs!) (set! G492c@G3013@set-interaction-env-r! G3013@set-interaction-env-r!) (set! G492b@G3011@set-interaction-env-rib! G3011@set-interaction-env-rib!) (set! G492a@G300f@interaction-env-locs G300f@interaction-env-locs) (set! G4929@G300d@interaction-env-r G300d@interaction-env-r) (set! G4928@G300b@interaction-env-rib G300b@interaction-env-rib) (set! G4927@G3009@make-interaction-env G3009@make-interaction-env) (set! G4926@G3007@interaction-env? G3007@interaction-env?) (set! G4925@G3004@G2ffc G3004@G2ffc) (set! G4924@G3002@G2ffd G3002@G2ffd) (set! G4923@G3000@G2ffb G3000@G2ffb) (set! G4922@G2ffa@rp G2ffa@rp) (set! G4921@G2ff8@set-env-itc! G2ff8@set-env-itc!) (set! G4920@G2ff6@set-env-labels! G2ff6@set-env-labels!) (set! G491f@G2ff4@set-env-names! G2ff4@set-env-names!) (set! G491e@G2ff2@env-itc G2ff2@env-itc) (set! G491d@G2ff0@env-labels G2ff0@env-labels) (set! G491c@G2fee@env-names G2fee@env-names) (set! G491b@G2fec@make-env G2fec@make-env) (set! G491a@G2fea@env? G2fea@env?) (set! G4919@G2fe7@G2fdf G2fe7@G2fdf) (set! G4918@G2fe5@G2fe0 G2fe5@G2fe0) (set! G4917@G2fe3@G2fde G2fe3@G2fde) (set! G4916@G2fdd@top-level-expander G2fdd@top-level-expander) (set! G4915@G2fdb@parse-top-level-program G2fdb@parse-top-level-program) (set! G4914@G2fd9@core-library-expander G2fd9@core-library-expander) (set! G4913@G2fd7@library-body-expander G2fd7@library-body-expander) (set! G4912@G2fd5@chi-interaction-expr G2fd5@chi-interaction-expr) (set! G4911@G2fd3@chi-library-internal G2fd3@chi-library-internal) (set! G4910@G2fd1@imp-collector G2fd1@imp-collector) (set! G490f@G2fcf@vis-collector G2fcf@vis-collector) (set! G490e@G2fcd@inv-collector G2fcd@inv-collector) (set! G490d@G2fcb@make-collector G2fcb@make-collector) (set! G490c@G2fc9@make-top-rib G2fc9@make-top-rib) (set! G490b@G2fc7@parse-import-spec* G2fc7@parse-import-spec*) (set! G490a@G2fc5@parse-library G2fc5@parse-library) (set! G4909@G2fc3@parse-library-name G2fc3@parse-library-name) (set! G4908@G2fc1@parse-exports G2fc1@parse-exports) (set! G4907@G2fbf@expand-transformer G2fbf@expand-transformer) (set! G4906@G2fbd@chi-body* G2fbd@chi-body*) (set! G4905@G2fbb@chi-internal-module G2fbb@chi-internal-module) (set! G4904@G2fb9@module-interface-exp-id* G2fb9@module-interface-exp-id*) (set! G4903@G2fb7@set-module-interface-exp-lab-vec! G2fb7@set-module-interface-exp-lab-vec!) (set! G4902@G2fb5@set-module-interface-exp-id-vec! G2fb5@set-module-interface-exp-id-vec!) (set! G4901@G2fb3@set-module-interface-first-mark! G2fb3@set-module-interface-first-mark!) (set! G4900@G2fb1@module-interface-exp-lab-vec G2fb1@module-interface-exp-lab-vec) (set! G48ff@G2faf@module-interface-exp-id-vec G2faf@module-interface-exp-id-vec) (set! G48fe@G2fad@module-interface-first-mark G2fad@module-interface-first-mark) (set! G48fd@G2fab@make-module-interface G2fab@make-module-interface) (set! G48fc@G2fa9@module-interface? G2fa9@module-interface?) (set! G48fb@G2fa6@G2f9e G2fa6@G2f9e) (set! G48fa@G2fa4@G2f9f G2fa4@G2f9f) (set! G48f9@G2fa2@G2f9d G2fa2@G2f9d) (set! G48f8@G2f9c@parse-module G2f9c@parse-module) (set! G48f7@G2f9a@chi-internal G2f9a@chi-internal) (set! G48f6@G2f98@find-dups G2f98@find-dups) (set! G48f5@G2f96@find-bound=? G2f96@find-bound=?) (set! G48f4@G2f94@chi-rhs* G2f94@chi-rhs*) (set! G48f3@G2f92@expand-interaction-rhs*/init* G2f92@expand-interaction-rhs*/init*) (set! G48f2@G2f90@chi-rhs G2f90@chi-rhs) (set! G48f1@G2f8e@chi-defun G2f8e@chi-defun) (set! G48f0@G2f8c@chi-lambda-clause* G2f8c@chi-lambda-clause*) (set! G48ef@G2f8a@chi-lambda-clause G2f8a@chi-lambda-clause) (set! G48ee@G2f88@verify-formals G2f88@verify-formals) (set! G48ed@G2f86@chi-set! G2f86@chi-set!) (set! G48ec@G2f84@chi-expr G2f84@chi-expr) (set! G48eb@G2f82@chi-application G2f82@chi-application) (set! G48ea@G2f80@chi-expr* G2f80@chi-expr*) (set! G48e9@G2f7e@chi-global-macro G2f7e@chi-global-macro) (set! G48e8@G2f7c@chi-local-macro G2f7c@chi-local-macro) (set! G48e7@G2f7a@chi-macro G2f7a@chi-macro) (set! G48e6@G2f78@do-macro-call G2f78@do-macro-call) (set! G48e5@G2f76@local-macro-transformer G2f76@local-macro-transformer) (set! G48e4@G2f74@macro-transformer G2f74@macro-transformer) (set! G48e3@G2f72@symbol-macro G2f72@symbol-macro) (set! G48e2@G2f70@file-options-macro G2f70@file-options-macro) (set! G48e1@G2f6e@core-macro-transformer G2f6e@core-macro-transformer) (set! G48e0@G2f6c@syntax-transformer G2f6c@syntax-transformer) (set! G48df@G2f6a@ellipsis-map G2f6a@ellipsis-map) (set! G48de@G2f68@syntax-case-transformer G2f68@syntax-case-transformer) (set! G48dd@G2f66@verify-literals G2f66@verify-literals) (set! G48dc@G2f64@underscore? G2f64@underscore?) (set! G48db@G2f62@ellipsis? G2f62@ellipsis?) (set! G48da@G2f60@syntax-dispatch G2f60@syntax-dispatch) (set! G48d9@G2f5e@convert-pattern G2f5e@convert-pattern) (set! G48d8@G2f5c@foreign-call-transformer G2f5c@foreign-call-transformer) (set! G48d7@G2f5a@parameterize-macro G2f5a@parameterize-macro) (set! G48d6@G2f58@incorrect-usage-macro G2f58@incorrect-usage-macro) (set! G48d5@G2f56@define-condition-type-macro G2f56@define-condition-type-macro) (set! G48d4@G2f54@define-record-type-macro G2f54@define-record-type-macro) (set! G48d3@G2f52@define-struct-macro G2f52@define-struct-macro) (set! G48d2@G2f50@quasisyntax-macro G2f50@quasisyntax-macro) (set! G48d1@G2f4e@quasiquote-macro G2f4e@quasiquote-macro) (set! G48d0@G2f4c@syntax-rules-macro G2f4c@syntax-rules-macro) (set! G48cf@G2f4a@include-into-macro G2f4a@include-into-macro) (set! G48ce@G2f48@include-macro G2f48@include-macro) (set! G48cd@G2f46@do-include G2f46@do-include) (set! G48cc@G2f44@cond-macro G2f44@cond-macro) (set! G48cb@G2f42@and-macro G2f42@and-macro) (set! G48ca@G2f40@or-macro G2f40@or-macro) (set! G48c9@G2f3e@let*-macro G2f3e@let*-macro) (set! G48c8@G2f3c@do-macro G2f3c@do-macro) (set! G48c7@G2f3a@identifier-syntax-macro G2f3a@identifier-syntax-macro) (set! G48c6@G2f38@endianness-macro G2f38@endianness-macro) (set! G48c5@G2f36@assert-macro G2f36@assert-macro) (set! G48c4@G2f34@delay-macro G2f34@delay-macro) (set! G48c3@G2f32@time-macro G2f32@time-macro) (set! G48c2@G2f30@define-enumeration-macro G2f30@define-enumeration-macro) (set! G48c1@G2f2e@guard-macro G2f2e@guard-macro) (set! G48c0@G2f2c@trace-letrec-syntax-macro G2f2c@trace-letrec-syntax-macro) (set! G48bf@G2f2a@trace-let-syntax-macro G2f2a@trace-let-syntax-macro) (set! G48be@G2f28@trace-let/rec-syntax G2f28@trace-let/rec-syntax) (set! G48bd@G2f26@trace-define-syntax-macro G2f26@trace-define-syntax-macro) (set! G48bc@G2f24@trace-define-macro G2f24@trace-define-macro) (set! G48bb@G2f22@trace-lambda-macro G2f22@trace-lambda-macro) (set! G48ba@G2f20@let*-values-macro G2f20@let*-values-macro) (set! G48b9@G2f1e@let-values-macro G2f1e@let-values-macro) (set! G48b8@G2f1c@let-macro G2f1c@let-macro) (set! G48b7@G2f1a@invalid-fmls-error G2f1a@invalid-fmls-error) (set! G48b6@G2f18@with-syntax-macro G2f18@with-syntax-macro) (set! G48b5@G2f16@bless G2f16@bless) (set! G48b4@G2f14@lambda-transformer G2f14@lambda-transformer) (set! G48b3@G2f12@case-lambda-transformer G2f12@case-lambda-transformer) (set! G48b2@G2f10@quote-transformer G2f10@quote-transformer) (set! G48b1@G2f0e@case-macro G2f0e@case-macro) (set! G48b0@G2f0c@or-transformer G2f0c@or-transformer) (set! G48af@G2f0a@and-transformer G2f0a@and-transformer) (set! G48ae@G2f08@if-transformer G2f08@if-transformer) (set! G48ad@G2f06@unless-macro G2f06@unless-macro) (set! G48ac@G2f04@when-macro G2f04@when-macro) (set! G48ab@G2f02@record-constructor-descriptor-transformer G2f02@record-constructor-descriptor-transformer) (set! G48aa@G2f00@record-type-descriptor-transformer G2f00@record-type-descriptor-transformer) (set! G48a9@G2efe@type-descriptor-transformer G2efe@type-descriptor-transformer) (set! G48a8@G2efc@fluid-let-syntax-transformer G2efc@fluid-let-syntax-transformer) (set! G48a7@G2efa@letrec*-transformer G2efa@letrec*-transformer) (set! G48a6@G2ef8@letrec-transformer G2ef8@letrec-transformer) (set! G48a5@G2ef6@letrec-helper G2ef6@letrec-helper) (set! G48a4@G2ef4@add-lexicals G2ef4@add-lexicals) (set! G48a3@G2ef2@add-lexical G2ef2@add-lexical) (set! G48a2@G2ef0@set-lexical-mutable! G2ef0@set-lexical-mutable!) (set! G48a1@G2eee@lexical-mutable? G2eee@lexical-mutable?) (set! G48a0@G2eec@lexical-var G2eec@lexical-var) (set! G489f@G2eea@scheme-stx G2eea@scheme-stx) (set! G489e@G2ee8@scheme-stx-hashtable G2ee8@scheme-stx-hashtable) (set! G489d@G2ee6@parse-define-syntax G2ee6@parse-define-syntax) (set! G489c@G2ee4@parse-define G2ee4@parse-define) (set! G489b@G2da1@make-eval-transformer G2da1@make-eval-transformer) (set! G489a@G2d9f@variable-transformer-procedure G2d9f@variable-transformer-procedure) (set! G4899@G2d9d@variable-transformer? G2d9d@variable-transformer?) (set! G4898@G2d9b@make-variable-transformer G2d9b@make-variable-transformer) (set! G4897@G2d99@sanitize-binding G2d99@sanitize-binding) (set! G4896@G2d89@syntax-type G2d89@syntax-type) (set! G4895@G2d87@raise-unbound-error G2d87@raise-unbound-error) (set! G4894@G2d85@binding-value G2d85@binding-value) (set! G4893@G2d83@binding-type G2d83@binding-type) (set! G4892@G2d81@make-binding G2d81@make-binding) (set! G4891@G2d7f@label->binding G2d7f@label->binding) (set! G4890@G2d7d@id->real-label G2d7d@id->real-label) (set! G488f@G2d7b@id->label G2d7b@id->label) (set! G488e@G2d79@same-marks*? G2d79@same-marks*?) (set! G488d@G2d77@stx->datum G2d77@stx->datum) (set! G488c@G2d75@strip G2d75@strip) (set! G488b@G2d73@strip-annotations G2d73@strip-annotations) (set! G488a@G2d71@self-evaluating? G2d71@self-evaluating?) (set! G4889@G2d6f@bound-id-member? G2d6f@bound-id-member?) (set! G4888@G2d6d@distinct-bound-ids? G2d6d@distinct-bound-ids?) (set! G4887@G2d6b@valid-bound-ids? G2d6b@valid-bound-ids?) (set! G4886@G2d69@free-id=? G2d69@free-id=?) (set! G4885@G2d67@bound-id=? G2d67@bound-id=?) (set! G4884@G2d65@same-marks? G2d65@same-marks?) (set! G4883@G2d63@id->sym G2d63@id->sym) (set! G4882@G2d61@id? G2d61@id?) (set! G4881@G2d5f@syntax->list G2d5f@syntax->list) (set! G4880@G2d5d@syntax-cdr G2d5d@syntax-cdr) (set! G487f@G2d5b@syntax-car G2d5b@syntax-car) (set! G487e@G2d59@syntax-list? G2d59@syntax-list?) (set! G487d@G2d57@syntax-null? G2d57@syntax-null?) (set! G487c@G2d55@syntax-vector? G2d55@syntax-vector?) (set! G487b@G2d53@syntax-pair? G2d53@syntax-pair?) (set! G487a@G2d51@syntax-vector->list G2d51@syntax-vector->list) (set! G4879@G2d4f@syntax-kind? G2d4f@syntax-kind?) (set! G4878@G2d4d@add-subst G2d4d@add-subst) (set! G4877@G2d4b@add-mark G2d4b@add-mark) (set! G4876@G2d49@mkstx G2d49@mkstx) (set! G4875@G2d47@join-wraps G2d47@join-wraps) (set! G4874@G2d45@anti-mark? G2d45@anti-mark?) (set! G4873@G2d43@anti-mark G2d43@anti-mark) (set! G4872@G2d41@gen-mark G2d41@gen-mark) (set! G4871@G2d3f@datum->stx G2d3f@datum->stx) (set! G4870@G2d3d@rp G2d3d@rp) (set! G486f@G2d3b@set-stx-ae*! G2d3b@set-stx-ae*!) (set! G486e@G2d39@set-stx-subst*! G2d39@set-stx-subst*!) (set! G486d@G2d37@set-stx-mark*! G2d37@set-stx-mark*!) (set! G486c@G2d35@set-stx-expr! G2d35@set-stx-expr!) (set! G486b@G2d33@stx-ae* G2d33@stx-ae*) (set! G486a@G2d31@stx-subst* G2d31@stx-subst*) (set! G4869@G2d2f@stx-mark* G2d2f@stx-mark*) (set! G4868@G2d2d@stx-expr G2d2d@stx-expr) (set! G4867@G2d2b@make-stx G2d2b@make-stx) (set! G4866@G2d29@stx? G2d29@stx?) (set! G4865@G2d26@G2d1e G2d26@G2d1e) (set! G4864@G2d24@G2d1f G2d24@G2d1f) (set! G4863@G2d22@G2d1d G2d22@G2d1d) (set! G4862@G2d1c@make-full-rib G2d1c@make-full-rib) (set! G4861@G2d1a@unseal-rib! G2d1a@unseal-rib!) (set! G4860@G2d18@seal-rib! G2d18@seal-rib!) (set! G485f@G2d16@make-rib-map G2d16@make-rib-map) (set! G485e@G2d14@extend-rib/nc! G2d14@extend-rib/nc!) (set! G485d@G2d12@extend-rib! G2d12@extend-rib!) (set! G485c@G2d10@find-label G2d10@find-label) (set! G485b@G2d0e@make-cache-rib G2d0e@make-cache-rib) (set! G485a@G2d0c@make-empty-rib G2d0c@make-empty-rib) (set! G4859@G2d0a@set-rib-cache! G2d0a@set-rib-cache!) (set! G4858@G2d08@set-rib-sealed/freq! G2d08@set-rib-sealed/freq!) (set! G4857@G2d06@set-rib-label*! G2d06@set-rib-label*!) (set! G4856@G2d04@set-rib-mark**! G2d04@set-rib-mark**!) (set! G4855@G2d02@set-rib-sym*! G2d02@set-rib-sym*!) (set! G4854@G2d00@rib-cache G2d00@rib-cache) (set! G4853@G2cfe@rib-sealed/freq G2cfe@rib-sealed/freq) (set! G4852@G2cfc@rib-label* G2cfc@rib-label*) (set! G4851@G2cfa@rib-mark** G2cfa@rib-mark**) (set! G4850@G2cf8@rib-sym* G2cf8@rib-sym*) (set! G484f@G2cf6@make-rib G2cf6@make-rib) (set! G484e@G2cf4@rib? G2cf4@rib?) (set! G484d@G2cf1@G2ce9 G2cf1@G2ce9) (set! G484c@G2cef@G2cea G2cef@G2cea) (set! G484b@G2ced@G2ce8 G2ced@G2ce8) (set! G484a@G2ce7@gen-define-label G2ce7@gen-define-label) (set! G4849@G2ce5@gen-define-label+loc G2ce5@gen-define-label+loc) (set! G4848@G2ce3@gen-top-level-label G2ce3@gen-top-level-label) (set! G4847@G2ce1@gen-label G2ce1@gen-label) (set! G4846@G2cdf@gen-global G2cdf@gen-global) (set! G4845@G2cdd@gen-lexical G2cdd@gen-lexical) (set! G4844@G2cdb@top-marked? G2cdb@top-marked?) (set! G4843@G2cd9@top-mark* G2cd9@top-mark*) (set! G4842@G2cd4@set-union G2cd4@set-union) (set! G4841@G2cd2@set-cons G2cd2@set-cons) (G2b6e@G2a0b@current-library-expander G302d@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4959@G4954 G495b@G4956 G495d@G4955 G4960@&condition? G4962@make-&condition G4964@&condition-rtd G4966@&condition-rcd G49b0@G49ab G49b2@G49ad G49b4@G49ac G49b7@p? G49b9@make-message-condition G49bb@G49aa G49bd@message-condition? G49bf@condition-message G49c1@&message-rtd G49c3@&message-rcd G49c9@G49c4 G49cb@G49c6 G49cd@G49c5 G49d0@p? G49d2@make-warning G49d4@warning? G49d6@&warning-rtd G49d8@&warning-rcd G49de@G49d9 G49e0@G49db G49e2@G49da G49e5@p? G49e7@make-serious-condition G49e9@serious-condition? G49eb@&serious-rtd G49ed@&serious-rcd G49f3@G49ee G49f5@G49f0 G49f7@G49ef G49fa@p? G49fc@make-error G49fe@error? G4a00@&error-rtd G4a02@&error-rcd G4a08@G4a03 G4a0a@G4a05 G4a0c@G4a04 G4a0f@p? G4a11@make-violation G4a13@violation? G4a15@&violation-rtd G4a17@&violation-rcd G4a1d@G4a18 G4a1f@G4a1a G4a21@G4a19 G4a24@p? G4a26@make-assertion-violation G4a28@assertion-violation? G4a2a@&assertion-rtd G4a2c@&assertion-rcd G4a33@G4a2e G4a35@G4a30 G4a37@G4a2f G4a3a@p? G4a3c@make-irritants-condition G4a3e@G4a2d G4a40@irritants-condition? G4a42@condition-irritants G4a44@&irritants-rtd G4a46@&irritants-rcd G4a4d@G4a48 G4a4f@G4a4a G4a51@G4a49 G4a54@p? G4a56@make-who-condition G4a58@G4a47 G4a5a@who-condition? G4a5c@condition-who G4a5e@&who-rtd G4a60@&who-rcd G4a66@G4a61 G4a68@G4a63 G4a6a@G4a62 G4a6d@p? G4a6f@make-non-continuable-violation G4a71@non-continuable-violation? G4a73@&non-continuable-rtd G4a75@&non-continuable-rcd G4a7b@G4a76 G4a7d@G4a78 G4a7f@G4a77 G4a82@p? G4a84@make-implementation-restriction-violation G4a86@implementation-restriction-violation? G4a88@&implementation-restriction-rtd G4a8a@&implementation-restriction-rcd G4a90@G4a8b G4a92@G4a8d G4a94@G4a8c G4a97@p? G4a99@make-lexical-violation G4a9b@lexical-violation? G4a9d@&lexical-rtd G4a9f@&lexical-rcd G4aa7@G4aa2 G4aa9@G4aa4 G4aab@G4aa3 G4aae@p? G4ab0@make-syntax-violation G4ab2@G4aa0 G4ab4@G4aa1 G4ab6@syntax-violation? G4ab8@syntax-violation-form G4aba@syntax-violation-subform G4abc@&syntax-rtd G4abe@&syntax-rcd G4ac4@G4abf G4ac6@G4ac1 G4ac8@G4ac0 G4acb@p? G4acd@make-undefined-violation G4acf@undefined-violation? G4ad1@&undefined-rtd G4ad3@&undefined-rcd G4ad9@G4ad4 G4adb@G4ad6 G4add@G4ad5 G4ae0@p? G4ae2@make-i/o-error G4ae4@i/o-error? G4ae6@&i/o-rtd G4ae8@&i/o-rcd G4aee@G4ae9 G4af0@G4aeb G4af2@G4aea G4af5@p? G4af7@make-i/o-read-error G4af9@i/o-read-error? G4afb@&i/o-read-rtd G4afd@&i/o-read-rcd G4b03@G4afe G4b05@G4b00 G4b07@G4aff G4b0a@p? G4b0c@make-i/o-write-error G4b0e@i/o-write-error? G4b10@&i/o-write-rtd G4b12@&i/o-write-rcd G4b19@G4b14 G4b1b@G4b16 G4b1d@G4b15 G4b20@p? G4b22@make-i/o-invalid-position-error G4b24@G4b13 G4b26@i/o-invalid-position-error? G4b28@i/o-error-position G4b2a@&i/o-invalid-position-rtd G4b2c@&i/o-invalid-position-rcd G4b33@G4b2e G4b35@G4b30 G4b37@G4b2f G4b3a@p? G4b3c@make-i/o-filename-error G4b3e@G4b2d G4b40@i/o-filename-error? G4b42@i/o-error-filename G4b44@&i/o-filename-rtd G4b46@&i/o-filename-rcd G4b4c@G4b47 G4b4e@G4b49 G4b50@G4b48 G4b53@p? G4b55@make-i/o-file-protection-error G4b57@i/o-file-protection-error? G4b59@&i/o-file-protection-rtd G4b5b@&i/o-file-protection-rcd G4b61@G4b5c G4b63@G4b5e G4b65@G4b5d G4b68@p? G4b6a@make-i/o-file-is-read-only-error G4b6c@i/o-file-is-read-only-error? G4b6e@&i/o-file-is-read-only-rtd G4b70@&i/o-file-is-read-only-rcd G4b76@G4b71 G4b78@G4b73 G4b7a@G4b72 G4b7d@p? G4b7f@make-i/o-file-already-exists-error G4b81@i/o-file-already-exists-error? G4b83@&i/o-file-already-exists-rtd G4b85@&i/o-file-already-exists-rcd G4b8b@G4b86 G4b8d@G4b88 G4b8f@G4b87 G4b92@p? G4b94@make-i/o-file-does-not-exist-error G4b96@i/o-file-does-not-exist-error? G4b98@&i/o-file-does-not-exist-rtd G4b9a@&i/o-file-does-not-exist-rcd G4ba1@G4b9c G4ba3@G4b9e G4ba5@G4b9d G4ba8@p? G4baa@make-i/o-port-error G4bac@G4b9b G4bae@i/o-port-error? G4bb0@i/o-error-port G4bb2@&i/o-port-rtd G4bb4@&i/o-port-rcd G4bba@G4bb5 G4bbc@G4bb7 G4bbe@G4bb6 G4bc1@p? G4bc3@make-i/o-decoding-error G4bc5@i/o-decoding-error? G4bc7@&i/o-decoding-rtd G4bc9@&i/o-decoding-rcd G4bd0@G4bcb G4bd2@G4bcd G4bd4@G4bcc G4bd7@p? G4bd9@make-i/o-encoding-error G4bdb@G4bca G4bdd@i/o-encoding-error? G4bdf@i/o-encoding-error-char G4be1@&i/o-encoding-rtd G4be3@&i/o-encoding-rcd G4be9@G4be4 G4beb@G4be6 G4bed@G4be5 G4bf0@p? G4bf2@make-no-infinities-violation G4bf4@no-infinities-violation? G4bf6@&no-infinities-rtd G4bf8@&no-infinities-rcd G4bfe@G4bf9 G4c00@G4bfb G4c02@G4bfa G4c05@p? G4c07@make-no-nans-violation G4c09@no-nans-violation? G4c0b@&no-nans-rtd G4c0d@&no-nans-rcd) (begin (set! G4959@G4954 (make-record-type-descriptor '&condition '#f 'G4957 '#f '#f '#())) (set! G495b@G4956 '#f) (set! G495d@G4955 (make-record-constructor-descriptor G4959@G4954 '#f G495b@G4956)) (set! G4960@&condition? (record-predicate G4959@G4954)) (set! G4962@make-&condition (record-constructor G495d@G4955)) (set! G4964@&condition-rtd G4959@G4954) (set! G4966@&condition-rcd G495d@G4955) (set! G49b0@G49ab (make-record-type-descriptor '&message G4959@G4954 'G49ae '#f '#f '#((immutable message)))) (set! G49b2@G49ad '#f) (set! G49b4@G49ac (make-record-constructor-descriptor G49b0@G49ab G495d@G4955 G49b2@G49ad)) (set! G49b7@p? (record-predicate G49b0@G49ab)) (set! G49b9@make-message-condition (record-constructor G49b4@G49ac)) (set! G49bb@G49aa (record-accessor G49b0@G49ab '0)) (set! G49bd@message-condition? (condition-predicate G49b0@G49ab)) (set! G49bf@condition-message (condition-accessor G49b0@G49ab G49bb@G49aa)) (set! G49c1@&message-rtd G49b0@G49ab) (set! G49c3@&message-rcd G49b4@G49ac) (set! G49c9@G49c4 (make-record-type-descriptor '&warning G4959@G4954 'G49c7 '#f '#f '#())) (set! G49cb@G49c6 '#f) (set! G49cd@G49c5 (make-record-constructor-descriptor G49c9@G49c4 G495d@G4955 G49cb@G49c6)) (set! G49d0@p? (record-predicate G49c9@G49c4)) (set! G49d2@make-warning (record-constructor G49cd@G49c5)) (set! G49d4@warning? (condition-predicate G49c9@G49c4)) (set! G49d6@&warning-rtd G49c9@G49c4) (set! G49d8@&warning-rcd G49cd@G49c5) (set! G49de@G49d9 (make-record-type-descriptor '&serious G4959@G4954 'G49dc '#f '#f '#())) (set! G49e0@G49db '#f) (set! G49e2@G49da (make-record-constructor-descriptor G49de@G49d9 G495d@G4955 G49e0@G49db)) (set! G49e5@p? (record-predicate G49de@G49d9)) (set! G49e7@make-serious-condition (record-constructor G49e2@G49da)) (set! G49e9@serious-condition? (condition-predicate G49de@G49d9)) (set! G49eb@&serious-rtd G49de@G49d9) (set! G49ed@&serious-rcd G49e2@G49da) (set! G49f3@G49ee (make-record-type-descriptor '&error G49de@G49d9 'G49f1 '#f '#f '#())) (set! G49f5@G49f0 '#f) (set! G49f7@G49ef (make-record-constructor-descriptor G49f3@G49ee G49e2@G49da G49f5@G49f0)) (set! G49fa@p? (record-predicate G49f3@G49ee)) (set! G49fc@make-error (record-constructor G49f7@G49ef)) (set! G49fe@error? (condition-predicate G49f3@G49ee)) (set! G4a00@&error-rtd G49f3@G49ee) (set! G4a02@&error-rcd G49f7@G49ef) (set! G4a08@G4a03 (make-record-type-descriptor '&violation G49de@G49d9 'G4a06 '#f '#f '#())) (set! G4a0a@G4a05 '#f) (set! G4a0c@G4a04 (make-record-constructor-descriptor G4a08@G4a03 G49e2@G49da G4a0a@G4a05)) (set! G4a0f@p? (record-predicate G4a08@G4a03)) (set! G4a11@make-violation (record-constructor G4a0c@G4a04)) (set! G4a13@violation? (condition-predicate G4a08@G4a03)) (set! G4a15@&violation-rtd G4a08@G4a03) (set! G4a17@&violation-rcd G4a0c@G4a04) (set! G4a1d@G4a18 (make-record-type-descriptor '&assertion G4a08@G4a03 'G4a1b '#f '#f '#())) (set! G4a1f@G4a1a '#f) (set! G4a21@G4a19 (make-record-constructor-descriptor G4a1d@G4a18 G4a0c@G4a04 G4a1f@G4a1a)) (set! G4a24@p? (record-predicate G4a1d@G4a18)) (set! G4a26@make-assertion-violation (record-constructor G4a21@G4a19)) (set! G4a28@assertion-violation? (condition-predicate G4a1d@G4a18)) (set! G4a2a@&assertion-rtd G4a1d@G4a18) (set! G4a2c@&assertion-rcd G4a21@G4a19) (set! G4a33@G4a2e (make-record-type-descriptor '&irritants G4959@G4954 'G4a31 '#f '#f '#((immutable irritants)))) (set! G4a35@G4a30 '#f) (set! G4a37@G4a2f (make-record-constructor-descriptor G4a33@G4a2e G495d@G4955 G4a35@G4a30)) (set! G4a3a@p? (record-predicate G4a33@G4a2e)) (set! G4a3c@make-irritants-condition (record-constructor G4a37@G4a2f)) (set! G4a3e@G4a2d (record-accessor G4a33@G4a2e '0)) (set! G4a40@irritants-condition? (condition-predicate G4a33@G4a2e)) (set! G4a42@condition-irritants (condition-accessor G4a33@G4a2e G4a3e@G4a2d)) (set! G4a44@&irritants-rtd G4a33@G4a2e) (set! G4a46@&irritants-rcd G4a37@G4a2f) (set! G4a4d@G4a48 (make-record-type-descriptor '&who G4959@G4954 'G4a4b '#f '#f '#((immutable who)))) (set! G4a4f@G4a4a '#f) (set! G4a51@G4a49 (make-record-constructor-descriptor G4a4d@G4a48 G495d@G4955 G4a4f@G4a4a)) (set! G4a54@p? (record-predicate G4a4d@G4a48)) (set! G4a56@make-who-condition (record-constructor G4a51@G4a49)) (set! G4a58@G4a47 (record-accessor G4a4d@G4a48 '0)) (set! G4a5a@who-condition? (condition-predicate G4a4d@G4a48)) (set! G4a5c@condition-who (condition-accessor G4a4d@G4a48 G4a58@G4a47)) (set! G4a5e@&who-rtd G4a4d@G4a48) (set! G4a60@&who-rcd G4a51@G4a49) (set! G4a66@G4a61 (make-record-type-descriptor '&non-continuable G4a08@G4a03 'G4a64 '#f '#f '#())) (set! G4a68@G4a63 '#f) (set! G4a6a@G4a62 (make-record-constructor-descriptor G4a66@G4a61 G4a0c@G4a04 G4a68@G4a63)) (set! G4a6d@p? (record-predicate G4a66@G4a61)) (set! G4a6f@make-non-continuable-violation (record-constructor G4a6a@G4a62)) (set! G4a71@non-continuable-violation? (condition-predicate G4a66@G4a61)) (set! G4a73@&non-continuable-rtd G4a66@G4a61) (set! G4a75@&non-continuable-rcd G4a6a@G4a62) (set! G4a7b@G4a76 (make-record-type-descriptor '&implementation-restriction G4a08@G4a03 'G4a79 '#f '#f '#())) (set! G4a7d@G4a78 '#f) (set! G4a7f@G4a77 (make-record-constructor-descriptor G4a7b@G4a76 G4a0c@G4a04 G4a7d@G4a78)) (set! G4a82@p? (record-predicate G4a7b@G4a76)) (set! G4a84@make-implementation-restriction-violation (record-constructor G4a7f@G4a77)) (set! G4a86@implementation-restriction-violation? (condition-predicate G4a7b@G4a76)) (set! G4a88@&implementation-restriction-rtd G4a7b@G4a76) (set! G4a8a@&implementation-restriction-rcd G4a7f@G4a77) (set! G4a90@G4a8b (make-record-type-descriptor '&lexical G4a08@G4a03 'G4a8e '#f '#f '#())) (set! G4a92@G4a8d '#f) (set! G4a94@G4a8c (make-record-constructor-descriptor G4a90@G4a8b G4a0c@G4a04 G4a92@G4a8d)) (set! G4a97@p? (record-predicate G4a90@G4a8b)) (set! G4a99@make-lexical-violation (record-constructor G4a94@G4a8c)) (set! G4a9b@lexical-violation? (condition-predicate G4a90@G4a8b)) (set! G4a9d@&lexical-rtd G4a90@G4a8b) (set! G4a9f@&lexical-rcd G4a94@G4a8c) (set! G4aa7@G4aa2 (make-record-type-descriptor '&syntax G4a08@G4a03 'G4aa5 '#f '#f '#((immutable form) (immutable subform)))) (set! G4aa9@G4aa4 '#f) (set! G4aab@G4aa3 (make-record-constructor-descriptor G4aa7@G4aa2 G4a0c@G4a04 G4aa9@G4aa4)) (set! G4aae@p? (record-predicate G4aa7@G4aa2)) (set! G4ab0@make-syntax-violation (record-constructor G4aab@G4aa3)) (set! G4ab2@G4aa0 (record-accessor G4aa7@G4aa2 '0)) (set! G4ab4@G4aa1 (record-accessor G4aa7@G4aa2 '1)) (set! G4ab6@syntax-violation? (condition-predicate G4aa7@G4aa2)) (set! G4ab8@syntax-violation-form (condition-accessor G4aa7@G4aa2 G4ab2@G4aa0)) (set! G4aba@syntax-violation-subform (condition-accessor G4aa7@G4aa2 G4ab4@G4aa1)) (set! G4abc@&syntax-rtd G4aa7@G4aa2) (set! G4abe@&syntax-rcd G4aab@G4aa3) (set! G4ac4@G4abf (make-record-type-descriptor '&undefined G4a08@G4a03 'G4ac2 '#f '#f '#())) (set! G4ac6@G4ac1 '#f) (set! G4ac8@G4ac0 (make-record-constructor-descriptor G4ac4@G4abf G4a0c@G4a04 G4ac6@G4ac1)) (set! G4acb@p? (record-predicate G4ac4@G4abf)) (set! G4acd@make-undefined-violation (record-constructor G4ac8@G4ac0)) (set! G4acf@undefined-violation? (condition-predicate G4ac4@G4abf)) (set! G4ad1@&undefined-rtd G4ac4@G4abf) (set! G4ad3@&undefined-rcd G4ac8@G4ac0) (set! G4ad9@G4ad4 (make-record-type-descriptor '&i/o G49f3@G49ee 'G4ad7 '#f '#f '#())) (set! G4adb@G4ad6 '#f) (set! G4add@G4ad5 (make-record-constructor-descriptor G4ad9@G4ad4 G49f7@G49ef G4adb@G4ad6)) (set! G4ae0@p? (record-predicate G4ad9@G4ad4)) (set! G4ae2@make-i/o-error (record-constructor G4add@G4ad5)) (set! G4ae4@i/o-error? (condition-predicate G4ad9@G4ad4)) (set! G4ae6@&i/o-rtd G4ad9@G4ad4) (set! G4ae8@&i/o-rcd G4add@G4ad5) (set! G4aee@G4ae9 (make-record-type-descriptor '&i/o-read G4ad9@G4ad4 'G4aec '#f '#f '#())) (set! G4af0@G4aeb '#f) (set! G4af2@G4aea (make-record-constructor-descriptor G4aee@G4ae9 G4add@G4ad5 G4af0@G4aeb)) (set! G4af5@p? (record-predicate G4aee@G4ae9)) (set! G4af7@make-i/o-read-error (record-constructor G4af2@G4aea)) (set! G4af9@i/o-read-error? (condition-predicate G4aee@G4ae9)) (set! G4afb@&i/o-read-rtd G4aee@G4ae9) (set! G4afd@&i/o-read-rcd G4af2@G4aea) (set! G4b03@G4afe (make-record-type-descriptor '&i/o-write G4ad9@G4ad4 'G4b01 '#f '#f '#())) (set! G4b05@G4b00 '#f) (set! G4b07@G4aff (make-record-constructor-descriptor G4b03@G4afe G4add@G4ad5 G4b05@G4b00)) (set! G4b0a@p? (record-predicate G4b03@G4afe)) (set! G4b0c@make-i/o-write-error (record-constructor G4b07@G4aff)) (set! G4b0e@i/o-write-error? (condition-predicate G4b03@G4afe)) (set! G4b10@&i/o-write-rtd G4b03@G4afe) (set! G4b12@&i/o-write-rcd G4b07@G4aff) (set! G4b19@G4b14 (make-record-type-descriptor '&i/o-invalid-position G4ad9@G4ad4 'G4b17 '#f '#f '#((immutable position)))) (set! G4b1b@G4b16 '#f) (set! G4b1d@G4b15 (make-record-constructor-descriptor G4b19@G4b14 G4add@G4ad5 G4b1b@G4b16)) (set! G4b20@p? (record-predicate G4b19@G4b14)) (set! G4b22@make-i/o-invalid-position-error (record-constructor G4b1d@G4b15)) (set! G4b24@G4b13 (record-accessor G4b19@G4b14 '0)) (set! G4b26@i/o-invalid-position-error? (condition-predicate G4b19@G4b14)) (set! G4b28@i/o-error-position (condition-accessor G4b19@G4b14 G4b24@G4b13)) (set! G4b2a@&i/o-invalid-position-rtd G4b19@G4b14) (set! G4b2c@&i/o-invalid-position-rcd G4b1d@G4b15) (set! G4b33@G4b2e (make-record-type-descriptor '&i/o-filename G4ad9@G4ad4 'G4b31 '#f '#f '#((immutable filename)))) (set! G4b35@G4b30 '#f) (set! G4b37@G4b2f (make-record-constructor-descriptor G4b33@G4b2e G4add@G4ad5 G4b35@G4b30)) (set! G4b3a@p? (record-predicate G4b33@G4b2e)) (set! G4b3c@make-i/o-filename-error (record-constructor G4b37@G4b2f)) (set! G4b3e@G4b2d (record-accessor G4b33@G4b2e '0)) (set! G4b40@i/o-filename-error? (condition-predicate G4b33@G4b2e)) (set! G4b42@i/o-error-filename (condition-accessor G4b33@G4b2e G4b3e@G4b2d)) (set! G4b44@&i/o-filename-rtd G4b33@G4b2e) (set! G4b46@&i/o-filename-rcd G4b37@G4b2f) (set! G4b4c@G4b47 (make-record-type-descriptor '&i/o-file-protection G4b33@G4b2e 'G4b4a '#f '#f '#())) (set! G4b4e@G4b49 '#f) (set! G4b50@G4b48 (make-record-constructor-descriptor G4b4c@G4b47 G4b37@G4b2f G4b4e@G4b49)) (set! G4b53@p? (record-predicate G4b4c@G4b47)) (set! G4b55@make-i/o-file-protection-error (record-constructor G4b50@G4b48)) (set! G4b57@i/o-file-protection-error? (condition-predicate G4b4c@G4b47)) (set! G4b59@&i/o-file-protection-rtd G4b4c@G4b47) (set! G4b5b@&i/o-file-protection-rcd G4b50@G4b48) (set! G4b61@G4b5c (make-record-type-descriptor '&i/o-file-is-read-only G4b4c@G4b47 'G4b5f '#f '#f '#())) (set! G4b63@G4b5e '#f) (set! G4b65@G4b5d (make-record-constructor-descriptor G4b61@G4b5c G4b50@G4b48 G4b63@G4b5e)) (set! G4b68@p? (record-predicate G4b61@G4b5c)) (set! G4b6a@make-i/o-file-is-read-only-error (record-constructor G4b65@G4b5d)) (set! G4b6c@i/o-file-is-read-only-error? (condition-predicate G4b61@G4b5c)) (set! G4b6e@&i/o-file-is-read-only-rtd G4b61@G4b5c) (set! G4b70@&i/o-file-is-read-only-rcd G4b65@G4b5d) (set! G4b76@G4b71 (make-record-type-descriptor '&i/o-file-already-exists G4b33@G4b2e 'G4b74 '#f '#f '#())) (set! G4b78@G4b73 '#f) (set! G4b7a@G4b72 (make-record-constructor-descriptor G4b76@G4b71 G4b37@G4b2f G4b78@G4b73)) (set! G4b7d@p? (record-predicate G4b76@G4b71)) (set! G4b7f@make-i/o-file-already-exists-error (record-constructor G4b7a@G4b72)) (set! G4b81@i/o-file-already-exists-error? (condition-predicate G4b76@G4b71)) (set! G4b83@&i/o-file-already-exists-rtd G4b76@G4b71) (set! G4b85@&i/o-file-already-exists-rcd G4b7a@G4b72) (set! G4b8b@G4b86 (make-record-type-descriptor '&i/o-file-does-not-exist G4b33@G4b2e 'G4b89 '#f '#f '#())) (set! G4b8d@G4b88 '#f) (set! G4b8f@G4b87 (make-record-constructor-descriptor G4b8b@G4b86 G4b37@G4b2f G4b8d@G4b88)) (set! G4b92@p? (record-predicate G4b8b@G4b86)) (set! G4b94@make-i/o-file-does-not-exist-error (record-constructor G4b8f@G4b87)) (set! G4b96@i/o-file-does-not-exist-error? (condition-predicate G4b8b@G4b86)) (set! G4b98@&i/o-file-does-not-exist-rtd G4b8b@G4b86) (set! G4b9a@&i/o-file-does-not-exist-rcd G4b8f@G4b87) (set! G4ba1@G4b9c (make-record-type-descriptor '&i/o-port G4ad9@G4ad4 'G4b9f '#f '#f '#((immutable port)))) (set! G4ba3@G4b9e '#f) (set! G4ba5@G4b9d (make-record-constructor-descriptor G4ba1@G4b9c G4add@G4ad5 G4ba3@G4b9e)) (set! G4ba8@p? (record-predicate G4ba1@G4b9c)) (set! G4baa@make-i/o-port-error (record-constructor G4ba5@G4b9d)) (set! G4bac@G4b9b (record-accessor G4ba1@G4b9c '0)) (set! G4bae@i/o-port-error? (condition-predicate G4ba1@G4b9c)) (set! G4bb0@i/o-error-port (condition-accessor G4ba1@G4b9c G4bac@G4b9b)) (set! G4bb2@&i/o-port-rtd G4ba1@G4b9c) (set! G4bb4@&i/o-port-rcd G4ba5@G4b9d) (set! G4bba@G4bb5 (make-record-type-descriptor '&i/o-decoding G4ba1@G4b9c 'G4bb8 '#f '#f '#())) (set! G4bbc@G4bb7 '#f) (set! G4bbe@G4bb6 (make-record-constructor-descriptor G4bba@G4bb5 G4ba5@G4b9d G4bbc@G4bb7)) (set! G4bc1@p? (record-predicate G4bba@G4bb5)) (set! G4bc3@make-i/o-decoding-error (record-constructor G4bbe@G4bb6)) (set! G4bc5@i/o-decoding-error? (condition-predicate G4bba@G4bb5)) (set! G4bc7@&i/o-decoding-rtd G4bba@G4bb5) (set! G4bc9@&i/o-decoding-rcd G4bbe@G4bb6) (set! G4bd0@G4bcb (make-record-type-descriptor '&i/o-encoding G4ba1@G4b9c 'G4bce '#f '#f '#((immutable char)))) (set! G4bd2@G4bcd '#f) (set! G4bd4@G4bcc (make-record-constructor-descriptor G4bd0@G4bcb G4ba5@G4b9d G4bd2@G4bcd)) (set! G4bd7@p? (record-predicate G4bd0@G4bcb)) (set! G4bd9@make-i/o-encoding-error (record-constructor G4bd4@G4bcc)) (set! G4bdb@G4bca (record-accessor G4bd0@G4bcb '0)) (set! G4bdd@i/o-encoding-error? (condition-predicate G4bd0@G4bcb)) (set! G4bdf@i/o-encoding-error-char (condition-accessor G4bd0@G4bcb G4bdb@G4bca)) (set! G4be1@&i/o-encoding-rtd G4bd0@G4bcb) (set! G4be3@&i/o-encoding-rcd G4bd4@G4bcc) (set! G4be9@G4be4 (make-record-type-descriptor '&no-infinities G4a7b@G4a76 'G4be7 '#f '#f '#())) (set! G4beb@G4be6 '#f) (set! G4bed@G4be5 (make-record-constructor-descriptor G4be9@G4be4 G4a7f@G4a77 G4beb@G4be6)) (set! G4bf0@p? (record-predicate G4be9@G4be4)) (set! G4bf2@make-no-infinities-violation (record-constructor G4bed@G4be5)) (set! G4bf4@no-infinities-violation? (condition-predicate G4be9@G4be4)) (set! G4bf6@&no-infinities-rtd G4be9@G4be4) (set! G4bf8@&no-infinities-rcd G4bed@G4be5) (set! G4bfe@G4bf9 (make-record-type-descriptor '&no-nans G4a7b@G4a76 'G4bfc '#f '#f '#())) (set! G4c00@G4bfb '#f) (set! G4c02@G4bfa (make-record-constructor-descriptor G4bfe@G4bf9 G4a7f@G4a77 G4c00@G4bfb)) (set! G4c05@p? (record-predicate G4bfe@G4bf9)) (set! G4c07@make-no-nans-violation (record-constructor G4c02@G4bfa)) (set! G4c09@no-nans-violation? (condition-predicate G4bfe@G4bf9)) (set! G4c0b@&no-nans-rtd G4bfe@G4bf9) (set! G4c0d@&no-nans-rcd G4c02@G4bfa) (begin (set! G4cfe@G4c0d@&no-nans-rcd G4c0d@&no-nans-rcd) (set! G4cfd@G4c0b@&no-nans-rtd G4c0b@&no-nans-rtd) (set! G4cfc@G4c09@no-nans-violation? G4c09@no-nans-violation?) (set! G4cfb@G4c07@make-no-nans-violation G4c07@make-no-nans-violation) (set! G4cfa@G4c05@p? G4c05@p?) (set! G4cf9@G4c02@G4bfa G4c02@G4bfa) (set! G4cf8@G4c00@G4bfb G4c00@G4bfb) (set! G4cf7@G4bfe@G4bf9 G4bfe@G4bf9) (set! G4cf6@G4bf8@&no-infinities-rcd G4bf8@&no-infinities-rcd) (set! G4cf5@G4bf6@&no-infinities-rtd G4bf6@&no-infinities-rtd) (set! G4cf4@G4bf4@no-infinities-violation? G4bf4@no-infinities-violation?) (set! G4cf3@G4bf2@make-no-infinities-violation G4bf2@make-no-infinities-violation) (set! G4cf2@G4bf0@p? G4bf0@p?) (set! G4cf1@G4bed@G4be5 G4bed@G4be5) (set! G4cf0@G4beb@G4be6 G4beb@G4be6) (set! G4cef@G4be9@G4be4 G4be9@G4be4) (set! G4cee@G4be3@&i/o-encoding-rcd G4be3@&i/o-encoding-rcd) (set! G4ced@G4be1@&i/o-encoding-rtd G4be1@&i/o-encoding-rtd) (set! G4cec@G4bdf@i/o-encoding-error-char G4bdf@i/o-encoding-error-char) (set! G4ceb@G4bdd@i/o-encoding-error? G4bdd@i/o-encoding-error?) (set! G4cea@G4bdb@G4bca G4bdb@G4bca) (set! G4ce9@G4bd9@make-i/o-encoding-error G4bd9@make-i/o-encoding-error) (set! G4ce8@G4bd7@p? G4bd7@p?) (set! G4ce7@G4bd4@G4bcc G4bd4@G4bcc) (set! G4ce6@G4bd2@G4bcd G4bd2@G4bcd) (set! G4ce5@G4bd0@G4bcb G4bd0@G4bcb) (set! G4ce4@G4bc9@&i/o-decoding-rcd G4bc9@&i/o-decoding-rcd) (set! G4ce3@G4bc7@&i/o-decoding-rtd G4bc7@&i/o-decoding-rtd) (set! G4ce2@G4bc5@i/o-decoding-error? G4bc5@i/o-decoding-error?) (set! G4ce1@G4bc3@make-i/o-decoding-error G4bc3@make-i/o-decoding-error) (set! G4ce0@G4bc1@p? G4bc1@p?) (set! G4cdf@G4bbe@G4bb6 G4bbe@G4bb6) (set! G4cde@G4bbc@G4bb7 G4bbc@G4bb7) (set! G4cdd@G4bba@G4bb5 G4bba@G4bb5) (set! G4cdc@G4bb4@&i/o-port-rcd G4bb4@&i/o-port-rcd) (set! G4cdb@G4bb2@&i/o-port-rtd G4bb2@&i/o-port-rtd) (set! G4cda@G4bb0@i/o-error-port G4bb0@i/o-error-port) (set! G4cd9@G4bae@i/o-port-error? G4bae@i/o-port-error?) (set! G4cd8@G4bac@G4b9b G4bac@G4b9b) (set! G4cd7@G4baa@make-i/o-port-error G4baa@make-i/o-port-error) (set! G4cd6@G4ba8@p? G4ba8@p?) (set! G4cd5@G4ba5@G4b9d G4ba5@G4b9d) (set! G4cd4@G4ba3@G4b9e G4ba3@G4b9e) (set! G4cd3@G4ba1@G4b9c G4ba1@G4b9c) (set! G4cd2@G4b9a@&i/o-file-does-not-exist-rcd G4b9a@&i/o-file-does-not-exist-rcd) (set! G4cd1@G4b98@&i/o-file-does-not-exist-rtd G4b98@&i/o-file-does-not-exist-rtd) (set! G4cd0@G4b96@i/o-file-does-not-exist-error? G4b96@i/o-file-does-not-exist-error?) (set! G4ccf@G4b94@make-i/o-file-does-not-exist-error G4b94@make-i/o-file-does-not-exist-error) (set! G4cce@G4b92@p? G4b92@p?) (set! G4ccd@G4b8f@G4b87 G4b8f@G4b87) (set! G4ccc@G4b8d@G4b88 G4b8d@G4b88) (set! G4ccb@G4b8b@G4b86 G4b8b@G4b86) (set! G4cca@G4b85@&i/o-file-already-exists-rcd G4b85@&i/o-file-already-exists-rcd) (set! G4cc9@G4b83@&i/o-file-already-exists-rtd G4b83@&i/o-file-already-exists-rtd) (set! G4cc8@G4b81@i/o-file-already-exists-error? G4b81@i/o-file-already-exists-error?) (set! G4cc7@G4b7f@make-i/o-file-already-exists-error G4b7f@make-i/o-file-already-exists-error) (set! G4cc6@G4b7d@p? G4b7d@p?) (set! G4cc5@G4b7a@G4b72 G4b7a@G4b72) (set! G4cc4@G4b78@G4b73 G4b78@G4b73) (set! G4cc3@G4b76@G4b71 G4b76@G4b71) (set! G4cc2@G4b70@&i/o-file-is-read-only-rcd G4b70@&i/o-file-is-read-only-rcd) (set! G4cc1@G4b6e@&i/o-file-is-read-only-rtd G4b6e@&i/o-file-is-read-only-rtd) (set! G4cc0@G4b6c@i/o-file-is-read-only-error? G4b6c@i/o-file-is-read-only-error?) (set! G4cbf@G4b6a@make-i/o-file-is-read-only-error G4b6a@make-i/o-file-is-read-only-error) (set! G4cbe@G4b68@p? G4b68@p?) (set! G4cbd@G4b65@G4b5d G4b65@G4b5d) (set! G4cbc@G4b63@G4b5e G4b63@G4b5e) (set! G4cbb@G4b61@G4b5c G4b61@G4b5c) (set! G4cba@G4b5b@&i/o-file-protection-rcd G4b5b@&i/o-file-protection-rcd) (set! G4cb9@G4b59@&i/o-file-protection-rtd G4b59@&i/o-file-protection-rtd) (set! G4cb8@G4b57@i/o-file-protection-error? G4b57@i/o-file-protection-error?) (set! G4cb7@G4b55@make-i/o-file-protection-error G4b55@make-i/o-file-protection-error) (set! G4cb6@G4b53@p? G4b53@p?) (set! G4cb5@G4b50@G4b48 G4b50@G4b48) (set! G4cb4@G4b4e@G4b49 G4b4e@G4b49) (set! G4cb3@G4b4c@G4b47 G4b4c@G4b47) (set! G4cb2@G4b46@&i/o-filename-rcd G4b46@&i/o-filename-rcd) (set! G4cb1@G4b44@&i/o-filename-rtd G4b44@&i/o-filename-rtd) (set! G4cb0@G4b42@i/o-error-filename G4b42@i/o-error-filename) (set! G4caf@G4b40@i/o-filename-error? G4b40@i/o-filename-error?) (set! G4cae@G4b3e@G4b2d G4b3e@G4b2d) (set! G4cad@G4b3c@make-i/o-filename-error G4b3c@make-i/o-filename-error) (set! G4cac@G4b3a@p? G4b3a@p?) (set! G4cab@G4b37@G4b2f G4b37@G4b2f) (set! G4caa@G4b35@G4b30 G4b35@G4b30) (set! G4ca9@G4b33@G4b2e G4b33@G4b2e) (set! G4ca8@G4b2c@&i/o-invalid-position-rcd G4b2c@&i/o-invalid-position-rcd) (set! G4ca7@G4b2a@&i/o-invalid-position-rtd G4b2a@&i/o-invalid-position-rtd) (set! G4ca6@G4b28@i/o-error-position G4b28@i/o-error-position) (set! G4ca5@G4b26@i/o-invalid-position-error? G4b26@i/o-invalid-position-error?) (set! G4ca4@G4b24@G4b13 G4b24@G4b13) (set! G4ca3@G4b22@make-i/o-invalid-position-error G4b22@make-i/o-invalid-position-error) (set! G4ca2@G4b20@p? G4b20@p?) (set! G4ca1@G4b1d@G4b15 G4b1d@G4b15) (set! G4ca0@G4b1b@G4b16 G4b1b@G4b16) (set! G4c9f@G4b19@G4b14 G4b19@G4b14) (set! G4c9e@G4b12@&i/o-write-rcd G4b12@&i/o-write-rcd) (set! G4c9d@G4b10@&i/o-write-rtd G4b10@&i/o-write-rtd) (set! G4c9c@G4b0e@i/o-write-error? G4b0e@i/o-write-error?) (set! G4c9b@G4b0c@make-i/o-write-error G4b0c@make-i/o-write-error) (set! G4c9a@G4b0a@p? G4b0a@p?) (set! G4c99@G4b07@G4aff G4b07@G4aff) (set! G4c98@G4b05@G4b00 G4b05@G4b00) (set! G4c97@G4b03@G4afe G4b03@G4afe) (set! G4c96@G4afd@&i/o-read-rcd G4afd@&i/o-read-rcd) (set! G4c95@G4afb@&i/o-read-rtd G4afb@&i/o-read-rtd) (set! G4c94@G4af9@i/o-read-error? G4af9@i/o-read-error?) (set! G4c93@G4af7@make-i/o-read-error G4af7@make-i/o-read-error) (set! G4c92@G4af5@p? G4af5@p?) (set! G4c91@G4af2@G4aea G4af2@G4aea) (set! G4c90@G4af0@G4aeb G4af0@G4aeb) (set! G4c8f@G4aee@G4ae9 G4aee@G4ae9) (set! G4c8e@G4ae8@&i/o-rcd G4ae8@&i/o-rcd) (set! G4c8d@G4ae6@&i/o-rtd G4ae6@&i/o-rtd) (set! G4c8c@G4ae4@i/o-error? G4ae4@i/o-error?) (set! G4c8b@G4ae2@make-i/o-error G4ae2@make-i/o-error) (set! G4c8a@G4ae0@p? G4ae0@p?) (set! G4c89@G4add@G4ad5 G4add@G4ad5) (set! G4c88@G4adb@G4ad6 G4adb@G4ad6) (set! G4c87@G4ad9@G4ad4 G4ad9@G4ad4) (set! G4c86@G4ad3@&undefined-rcd G4ad3@&undefined-rcd) (set! G4c85@G4ad1@&undefined-rtd G4ad1@&undefined-rtd) (set! G4c84@G4acf@undefined-violation? G4acf@undefined-violation?) (set! G4c83@G4acd@make-undefined-violation G4acd@make-undefined-violation) (set! G4c82@G4acb@p? G4acb@p?) (set! G4c81@G4ac8@G4ac0 G4ac8@G4ac0) (set! G4c80@G4ac6@G4ac1 G4ac6@G4ac1) (set! G4c7f@G4ac4@G4abf G4ac4@G4abf) (set! G4c7e@G4abe@&syntax-rcd G4abe@&syntax-rcd) (set! G4c7d@G4abc@&syntax-rtd G4abc@&syntax-rtd) (set! G4c7c@G4aba@syntax-violation-subform G4aba@syntax-violation-subform) (set! G4c7b@G4ab8@syntax-violation-form G4ab8@syntax-violation-form) (set! G4c7a@G4ab6@syntax-violation? G4ab6@syntax-violation?) (set! G4c79@G4ab4@G4aa1 G4ab4@G4aa1) (set! G4c78@G4ab2@G4aa0 G4ab2@G4aa0) (set! G4c77@G4ab0@make-syntax-violation G4ab0@make-syntax-violation) (set! G4c76@G4aae@p? G4aae@p?) (set! G4c75@G4aab@G4aa3 G4aab@G4aa3) (set! G4c74@G4aa9@G4aa4 G4aa9@G4aa4) (set! G4c73@G4aa7@G4aa2 G4aa7@G4aa2) (set! G4c72@G4a9f@&lexical-rcd G4a9f@&lexical-rcd) (set! G4c71@G4a9d@&lexical-rtd G4a9d@&lexical-rtd) (set! G4c70@G4a9b@lexical-violation? G4a9b@lexical-violation?) (set! G4c6f@G4a99@make-lexical-violation G4a99@make-lexical-violation) (set! G4c6e@G4a97@p? G4a97@p?) (set! G4c6d@G4a94@G4a8c G4a94@G4a8c) (set! G4c6c@G4a92@G4a8d G4a92@G4a8d) (set! G4c6b@G4a90@G4a8b G4a90@G4a8b) (set! G4c6a@G4a8a@&implementation-restriction-rcd G4a8a@&implementation-restriction-rcd) (set! G4c69@G4a88@&implementation-restriction-rtd G4a88@&implementation-restriction-rtd) (set! G4c68@G4a86@implementation-restriction-violation? G4a86@implementation-restriction-violation?) (set! G4c67@G4a84@make-implementation-restriction-violation G4a84@make-implementation-restriction-violation) (set! G4c66@G4a82@p? G4a82@p?) (set! G4c65@G4a7f@G4a77 G4a7f@G4a77) (set! G4c64@G4a7d@G4a78 G4a7d@G4a78) (set! G4c63@G4a7b@G4a76 G4a7b@G4a76) (set! G4c62@G4a75@&non-continuable-rcd G4a75@&non-continuable-rcd) (set! G4c61@G4a73@&non-continuable-rtd G4a73@&non-continuable-rtd) (set! G4c60@G4a71@non-continuable-violation? G4a71@non-continuable-violation?) (set! G4c5f@G4a6f@make-non-continuable-violation G4a6f@make-non-continuable-violation) (set! G4c5e@G4a6d@p? G4a6d@p?) (set! G4c5d@G4a6a@G4a62 G4a6a@G4a62) (set! G4c5c@G4a68@G4a63 G4a68@G4a63) (set! G4c5b@G4a66@G4a61 G4a66@G4a61) (set! G4c5a@G4a60@&who-rcd G4a60@&who-rcd) (set! G4c59@G4a5e@&who-rtd G4a5e@&who-rtd) (set! G4c58@G4a5c@condition-who G4a5c@condition-who) (set! G4c57@G4a5a@who-condition? G4a5a@who-condition?) (set! G4c56@G4a58@G4a47 G4a58@G4a47) (set! G4c55@G4a56@make-who-condition G4a56@make-who-condition) (set! G4c54@G4a54@p? G4a54@p?) (set! G4c53@G4a51@G4a49 G4a51@G4a49) (set! G4c52@G4a4f@G4a4a G4a4f@G4a4a) (set! G4c51@G4a4d@G4a48 G4a4d@G4a48) (set! G4c50@G4a46@&irritants-rcd G4a46@&irritants-rcd) (set! G4c4f@G4a44@&irritants-rtd G4a44@&irritants-rtd) (set! G4c4e@G4a42@condition-irritants G4a42@condition-irritants) (set! G4c4d@G4a40@irritants-condition? G4a40@irritants-condition?) (set! G4c4c@G4a3e@G4a2d G4a3e@G4a2d) (set! G4c4b@G4a3c@make-irritants-condition G4a3c@make-irritants-condition) (set! G4c4a@G4a3a@p? G4a3a@p?) (set! G4c49@G4a37@G4a2f G4a37@G4a2f) (set! G4c48@G4a35@G4a30 G4a35@G4a30) (set! G4c47@G4a33@G4a2e G4a33@G4a2e) (set! G4c46@G4a2c@&assertion-rcd G4a2c@&assertion-rcd) (set! G4c45@G4a2a@&assertion-rtd G4a2a@&assertion-rtd) (set! G4c44@G4a28@assertion-violation? G4a28@assertion-violation?) (set! G4c43@G4a26@make-assertion-violation G4a26@make-assertion-violation) (set! G4c42@G4a24@p? G4a24@p?) (set! G4c41@G4a21@G4a19 G4a21@G4a19) (set! G4c40@G4a1f@G4a1a G4a1f@G4a1a) (set! G4c3f@G4a1d@G4a18 G4a1d@G4a18) (set! G4c3e@G4a17@&violation-rcd G4a17@&violation-rcd) (set! G4c3d@G4a15@&violation-rtd G4a15@&violation-rtd) (set! G4c3c@G4a13@violation? G4a13@violation?) (set! G4c3b@G4a11@make-violation G4a11@make-violation) (set! G4c3a@G4a0f@p? G4a0f@p?) (set! G4c39@G4a0c@G4a04 G4a0c@G4a04) (set! G4c38@G4a0a@G4a05 G4a0a@G4a05) (set! G4c37@G4a08@G4a03 G4a08@G4a03) (set! G4c36@G4a02@&error-rcd G4a02@&error-rcd) (set! G4c35@G4a00@&error-rtd G4a00@&error-rtd) (set! G4c34@G49fe@error? G49fe@error?) (set! G4c33@G49fc@make-error G49fc@make-error) (set! G4c32@G49fa@p? G49fa@p?) (set! G4c31@G49f7@G49ef G49f7@G49ef) (set! G4c30@G49f5@G49f0 G49f5@G49f0) (set! G4c2f@G49f3@G49ee G49f3@G49ee) (set! G4c2e@G49ed@&serious-rcd G49ed@&serious-rcd) (set! G4c2d@G49eb@&serious-rtd G49eb@&serious-rtd) (set! G4c2c@G49e9@serious-condition? G49e9@serious-condition?) (set! G4c2b@G49e7@make-serious-condition G49e7@make-serious-condition) (set! G4c2a@G49e5@p? G49e5@p?) (set! G4c29@G49e2@G49da G49e2@G49da) (set! G4c28@G49e0@G49db G49e0@G49db) (set! G4c27@G49de@G49d9 G49de@G49d9) (set! G4c26@G49d8@&warning-rcd G49d8@&warning-rcd) (set! G4c25@G49d6@&warning-rtd G49d6@&warning-rtd) (set! G4c24@G49d4@warning? G49d4@warning?) (set! G4c23@G49d2@make-warning G49d2@make-warning) (set! G4c22@G49d0@p? G49d0@p?) (set! G4c21@G49cd@G49c5 G49cd@G49c5) (set! G4c20@G49cb@G49c6 G49cb@G49c6) (set! G4c1f@G49c9@G49c4 G49c9@G49c4) (set! G4c1e@G49c3@&message-rcd G49c3@&message-rcd) (set! G4c1d@G49c1@&message-rtd G49c1@&message-rtd) (set! G4c1c@G49bf@condition-message G49bf@condition-message) (set! G4c1b@G49bd@message-condition? G49bd@message-condition?) (set! G4c1a@G49bb@G49aa G49bb@G49aa) (set! G4c19@G49b9@make-message-condition G49b9@make-message-condition) (set! G4c18@G49b7@p? G49b7@p?) (set! G4c17@G49b4@G49ac G49b4@G49ac) (set! G4c16@G49b2@G49ad G49b2@G49ad) (set! G4c15@G49b0@G49ab G49b0@G49ab) (set! G4c14@G4966@&condition-rcd G4966@&condition-rcd) (set! G4c13@G4964@&condition-rtd G4964@&condition-rtd) (set! G4c12@G4962@make-&condition G4962@make-&condition) (set! G4c11@G4960@&condition? G4960@&condition?) (set! G4c10@G495d@G4955 G495d@G4955) (set! G4c0f@G495b@G4956 G495b@G4956) (set! G4c0e@G4959@G4954 G4959@G4954)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G294e@G2903@current-primitive-locations (lambda (G50e5@x) ((lambda (G50e7@t) (if G50e7@t (cdr G50e7@t) '#f)) (assq G50e5@x '((&no-nans-rcd . G4cfe@G4c0d@&no-nans-rcd) (&no-nans-rtd . G4cfd@G4c0b@&no-nans-rtd) (&no-infinities-rcd . G4cf6@G4bf8@&no-infinities-rcd) (&no-infinities-rtd . G4cf5@G4bf6@&no-infinities-rtd) (&i/o-encoding-rcd . G4cee@G4be3@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4ced@G4be1@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4ce4@G4bc9@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4ce3@G4bc7@&i/o-decoding-rtd) (&i/o-port-rcd . G4cdc@G4bb4@&i/o-port-rcd) (&i/o-port-rtd . G4cdb@G4bb2@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4cd2@G4b9a@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4cd1@G4b98@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4cca@G4b85@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4cc9@G4b83@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4cc2@G4b70@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4cc1@G4b6e@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4cba@G4b5b@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4cb9@G4b59@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4cb2@G4b46@&i/o-filename-rcd) (&i/o-filename-rtd . G4cb1@G4b44@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4ca8@G4b2c@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4ca7@G4b2a@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4c9e@G4b12@&i/o-write-rcd) (&i/o-write-rtd . G4c9d@G4b10@&i/o-write-rtd) (&i/o-read-rcd . G4c96@G4afd@&i/o-read-rcd) (&i/o-read-rtd . G4c95@G4afb@&i/o-read-rtd) (&i/o-rcd . G4c8e@G4ae8@&i/o-rcd) (&i/o-rtd . G4c8d@G4ae6@&i/o-rtd) (&undefined-rcd . G4c86@G4ad3@&undefined-rcd) (&undefined-rtd . G4c85@G4ad1@&undefined-rtd) (&syntax-rcd . G4c7e@G4abe@&syntax-rcd) (&syntax-rtd . G4c7d@G4abc@&syntax-rtd) (&lexical-rcd . G4c72@G4a9f@&lexical-rcd) (&lexical-rtd . G4c71@G4a9d@&lexical-rtd) (&implementation-restriction-rcd . G4c6a@G4a8a@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c69@G4a88@&implementation-restriction-rtd) (&non-continuable-rcd . G4c62@G4a75@&non-continuable-rcd) (&non-continuable-rtd . G4c61@G4a73@&non-continuable-rtd) (&who-rcd . G4c5a@G4a60@&who-rcd) (&who-rtd . G4c59@G4a5e@&who-rtd) (&irritants-rcd . G4c50@G4a46@&irritants-rcd) (&irritants-rtd . G4c4f@G4a44@&irritants-rtd) (&assertion-rcd . G4c46@G4a2c@&assertion-rcd) (&assertion-rtd . G4c45@G4a2a@&assertion-rtd) (&violation-rcd . G4c3e@G4a17@&violation-rcd) (&violation-rtd . G4c3d@G4a15@&violation-rtd) (&error-rcd . G4c36@G4a02@&error-rcd) (&error-rtd . G4c35@G4a00@&error-rtd) (&serious-rcd . G4c2e@G49ed@&serious-rcd) (&serious-rtd . G4c2d@G49eb@&serious-rtd) (&warning-rcd . G4c26@G49d8@&warning-rcd) (&warning-rtd . G4c25@G49d6@&warning-rtd) (&message-rcd . G4c1e@G49c3@&message-rcd) (&message-rtd . G4c1d@G49c1@&message-rtd) (&condition-rcd . G4c14@G4966@&condition-rcd) (&condition-rtd . G4c13@G4964@&condition-rtd) (syntax-error . G4946@G3047@syntax-error) (syntax-dispatch . G48da@G2f60@syntax-dispatch) (load . G4dd0@G4d14@load) (interaction-environment . G494e@G3057@interaction-environment) (make-parameter . G28fd@G2833@make-parameter) (make-variable-transformer . G4898@G2d9b@make-variable-transformer) (identifier? . G4949@G304d@identifier?) (generate-temporaries . G493f@G3039@generate-temporaries) (free-identifier=? . G4940@G303b@free-identifier=?) (syntax->datum . G494b@G3051@syntax->datum) (datum->syntax . G494a@G304f@datum->syntax) (bound-identifier=? . G4941@G303d@bound-identifier=?) (make-i/o-write-error . G4c9b@G4b0c@make-i/o-write-error) (make-i/o-read-error . G4c93@G4af7@make-i/o-read-error) (make-i/o-port-error . G4cd7@G4baa@make-i/o-port-error) (make-i/o-invalid-position-error . G4ca3@G4b22@make-i/o-invalid-position-error) (make-i/o-filename-error . G4cad@G4b3c@make-i/o-filename-error) (make-i/o-file-protection-error . G4cb7@G4b55@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4cbf@G4b6a@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4ccf@G4b94@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cc7@G4b7f@make-i/o-file-already-exists-error) (make-i/o-error . G4c8b@G4ae2@make-i/o-error) (make-i/o-encoding-error . G4ce9@G4bd9@make-i/o-encoding-error) (make-i/o-decoding-error . G4ce1@G4bc3@make-i/o-decoding-error) (i/o-write-error? . G4c9c@G4b0e@i/o-write-error?) (i/o-read-error? . G4c94@G4af9@i/o-read-error?) (i/o-port-error? . G4cd9@G4bae@i/o-port-error?) (i/o-invalid-position-error? . G4ca5@G4b26@i/o-invalid-position-error?) (i/o-filename-error? . G4caf@G4b40@i/o-filename-error?) (i/o-file-protection-error? . G4cb8@G4b57@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4cc0@G4b6c@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cd0@G4b96@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cc8@G4b81@i/o-file-already-exists-error?) (i/o-error? . G4c8c@G4ae4@i/o-error?) (i/o-error-position . G4ca6@G4b28@i/o-error-position) (i/o-error-port . G4cda@G4bb0@i/o-error-port) (i/o-error-filename . G4cb0@G4b42@i/o-error-filename) (i/o-encoding-error? . G4ceb@G4bdd@i/o-encoding-error?) (i/o-encoding-error-char . G4cec@G4bdf@i/o-encoding-error-char) (i/o-decoding-error? . G4ce2@G4bc5@i/o-decoding-error?) (scheme-report-environment . G4936@G3027@scheme-report-environment) (null-environment . G4935@G3025@null-environment) (command-line . G4dcd@G4d0e@command-line) (eval . G4938@G302b@eval) (environment . G4934@G3023@environment) (who-condition? . G4c57@G4a5a@who-condition?) (warning? . G4c24@G49d4@warning?) (violation? . G4c3c@G4a13@violation?) (undefined-violation? . G4c84@G4acf@undefined-violation?) (syntax-violation? . G4c7a@G4ab6@syntax-violation?) (syntax-violation-subform . G4c7c@G4aba@syntax-violation-subform) (syntax-violation-form . G4c7b@G4ab8@syntax-violation-form) (syntax-violation . G4948@G304b@syntax-violation) (serious-condition? . G4c2c@G49e9@serious-condition?) (non-continuable-violation? . G4c60@G4a71@non-continuable-violation?) (message-condition? . G4c1b@G49bd@message-condition?) (make-who-condition . G4c55@G4a56@make-who-condition) (make-warning . G4c23@G49d2@make-warning) (make-violation . G4c3b@G4a11@make-violation) (make-undefined-violation . G4c83@G4acd@make-undefined-violation) (make-syntax-violation . G4c77@G4ab0@make-syntax-violation) (make-serious-condition . G4c2b@G49e7@make-serious-condition) (make-non-continuable-violation . G4c5f@G4a6f@make-non-continuable-violation) (make-message-condition . G4c19@G49b9@make-message-condition) (make-lexical-violation . G4c6f@G4a99@make-lexical-violation) (make-irritants-condition . G4c4b@G4a3c@make-irritants-condition) (make-implementation-restriction-violation . G4c67@G4a84@make-implementation-restriction-violation) (make-error . G4c33@G49fc@make-error) (make-assertion-violation . G4c43@G4a26@make-assertion-violation) (lexical-violation? . G4c70@G4a9b@lexical-violation?) (irritants-condition? . G4c4d@G4a40@irritants-condition?) (implementation-restriction-violation? . G4c68@G4a86@implementation-restriction-violation?) (error? . G4c34@G49fe@error?) (condition-who . G4c58@G4a5c@condition-who) (condition-message . G4c1c@G49bf@condition-message) (condition-irritants . G4c4e@G4a42@condition-irritants) (assertion-violation? . G4c44@G4a28@assertion-violation?) (no-nans-violation? . G4cfc@G4c09@no-nans-violation?) (no-infinities-violation? . G4cf4@G4bf4@no-infinities-violation?) (make-no-nans-violation . G4cfb@G4c07@make-no-nans-violation) (make-no-infinities-violation . G4cf3@G4bf2@make-no-infinities-violation)))))) (G2b76@G2a1b@install-library 'G50b8 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . G508d) (format . G5088) (string-split . G507e) (call-process . G5078) (set-current-directory! . G5074) (expand-path . G5073) (current-directory . G5072) (%spawn . G5071) (%waitpid . G5070) (%ffi-pointer-ref . G506f) (%ffi-pointer->string . G506e) (%ffi-call->void* . G506d) (%ffi-call->void . G506c) (%ffi-call->int . G506b) (%ffi-lookup . G506a) (%ffi-open . G5069) (%fork . G5068) (%pipe . G5067) (string-upcase . G5057) (string-titlecase . G5056) (string-normalize-nfkd . G5055) (string-normalize-nfkc . G5054) (string-normalize-nfd . G5053) (string-normalize-nfc . G5052) (string-foldcase . G5051) (string-downcase . G5050) (string-ci>? . G504f) (string-ci>=? . G504e) (string-ci=? . G504d) (string-ci<? . G504c) (string-ci<=? . G504b) (char-whitespace? . G504a) (char-upper-case? . G5049) (char-title-case? . G5048) (char-numeric? . G5047) (char-lower-case? . G5046) (char-general-category . G5045) (char-upcase . G5044) (char-titlecase . G5043) (char-foldcase . G5042) (char-downcase . G5041) (char-ci>? . G5040) (char-ci>=? . G503f) (char-ci=? . G503e) (char-ci<? . G503d) (char-ci<=? . G503c) (char-alphabetic? . G503b) (make-variable-transformer . G2d9a) (identifier? . G304c) (generate-temporaries . G3038) (free-identifier=? . G303a) (syntax->datum . G3050) (datum->syntax . G304e) (bound-identifier=? . G303c) (record-type-descriptor? . G503a) (record-predicate . G5039) (record-mutator . G5038) (record-constructor . G5037) (record-accessor . G5036) (make-record-type-descriptor . G5035) (make-record-constructor-descriptor . G5034) (record? . G5033) (record-type-uid . G5032) (record-type-sealed? . G5031) (record-type-parent . G5030) (record-type-opaque? . G502f) (record-type-name . G502e) (record-type-generative? . G502d) (record-type-field-names . G502c) (record-rtd . G502b) (record-field-mutable? . G502a) (delete-file . G5029) (file-exists? . G5028) (vector-sort! . G5027) (vector-sort . G5026) (list-sort . G5025) (symbol-hash . G5024) (string-ci-hash . G5023) (string-hash . G5022) (equal-hash . G5021) (hashtable-equivalence-function . G5020) (make-hashtable . G501f) (hashtable-hash-function . G501e) (make-eqv-hashtable . G501d) (make-eq-hashtable . G501c) (hashtable? . G501b) (hashtable-update! . G501a) (hashtable-size . G5019) (hashtable-set! . G5018) (hashtable-ref . G5017) (hashtable-mutable? . G5016) (hashtable-keys . G5015) (hashtable-entries . G5014) (hashtable-delete! . G5013) (hashtable-copy . G5012) (hashtable-contains? . G5011) (hashtable-clear! . G5010) (call-with-output-file . G500f) (call-with-input-file . G500e) (write-char . G500d) (write . G500c) (with-output-to-file . G500b) (with-input-from-file . G500a) (read-char . G5009) (read . G5008) (peek-char . G5007) (open-output-file . G5006) (open-input-file . G5005) (newline . G5004) (display . G5003) (close-output-port . G5002) (close-input-port . G5001) (eof-object? . G5000) (eof-object . G4fff) (current-error-port . G4ffe) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (utf-8-codec . G4ff9) (utf-16-codec . G4ff8) (transcoder-error-handling-mode . G4ff7) (transcoder-eol-style . G4ff6) (transcoder-codec . G4ff5) (transcoded-port . G4ff4) (textual-port? . G4ff3) (string->bytevector . G4ff2) (standard-output-port . G4ff1) (standard-input-port . G4ff0) (standard-error-port . G4fef) (set-port-position! . G4fee) (put-u8 . G4fed) (put-string . G4fec) (put-datum . G4feb) (put-char . G4fea) (put-bytevector . G4fe9) (port? . G4fe8) (port-transcoder . G4fe7) (port-position . G4fe6) (port-has-set-port-position!? . G4fe5) (port-has-port-position? . G4fe4) (port-eof? . G4fe3) (output-port-buffer-mode . G4fe2) (open-string-output-port . G4fe1) (open-string-input-port . G4fe0) (open-file-output-port . G4fdf) (open-file-input/output-port . G4fde) (open-file-input-port . G4fdd) (open-bytevector-output-port . G4fdc) (open-bytevector-input-port . G4fdb) (native-transcoder . G4fda) (native-eol-style . G4fd9) (make-transcoder . G4fd8) (latin-1-codec . G4fd7) (make-i/o-write-error . G4b0b) (make-i/o-read-error . G4af6) (make-i/o-port-error . G4ba9) (make-i/o-invalid-position-error . G4b21) (make-i/o-filename-error . G4b3b) (make-i/o-file-protection-error . G4b54) (make-i/o-file-is-read-only-error . G4b69) (make-i/o-file-does-not-exist-error . G4b93) (make-i/o-file-already-exists-error . G4b7e) (make-i/o-error . G4ae1) (make-i/o-encoding-error . G4bd8) (make-i/o-decoding-error . G4bc2) (make-custom-textual-output-port . G4fd6) (make-custom-textual-input/output-port . G4fd5) (make-custom-textual-input-port . G4fd4) (make-custom-binary-output-port . G4fd3) (make-custom-binary-input/output-port . G4fd2) (make-custom-binary-input-port . G4fd1) (make-bytevector . G4fd0) (lookahead-u8 . G4fcf) (lookahead-char . G4fce) (i/o-write-error? . G4b0d) (i/o-read-error? . G4af8) (i/o-port-error? . G4bad) (i/o-invalid-position-error? . G4b25) (i/o-filename-error? . G4b3f) (i/o-file-protection-error? . G4b56) (i/o-file-is-read-only-error? . G4b6b) (i/o-file-does-not-exist-error? . G4b95) (i/o-file-already-exists-error? . G4b80) (i/o-error? . G4ae3) (i/o-error-position . G4b27) (i/o-error-port . G4baf) (i/o-error-filename . G4b41) (i/o-encoding-error? . G4bdc) (i/o-encoding-error-char . G4bde) (i/o-decoding-error? . G4bc4) (get-u8 . G4fcd) (get-string-n! . G4fcc) (get-string-n . G4fcb) (get-string-all . G4fca) (get-line . G4fc9) (get-datum . G4fc8) (get-char . G4fc7) (get-bytevector-some . G4fc6) (get-bytevector-n! . G4fc5) (get-bytevector-n . G4fc4) (get-bytevector-all . G4fc3) (flush-output-port . G4fc2) (close-port . G4fc1) (exit . G4fb9) (command-line . G4d0d) (string-fill! . G4fb8) (string-set! . G4fb7) (set-cdr! . G4fb6) (set-car! . G4fb5) (remove . G4fb4) (remv . G4fb3) (remp . G4fb2) (remq . G4fb1) (partition . G4fb0) (memv . G4faf) (memq . G4fae) (memp . G4fad) (member . G4fac) (exists . G4fab) (for-all . G4faa) (fold-right . G4fa9) (fold-left . G4fa8) (find . G4fa7) (filter . G4fa6) (cons* . G4fa5) (assv . G4fa4) (assq . G4fa3) (assp . G4fa2) (assoc . G4fa1) (call-with-string-output-port . G4fa0) (call-with-port . G4f9f) (call-with-bytevector-output-port . G4f9e) (bytevector->string . G4f9d) (buffer-mode? . G4f9c) (binary-port? . G4f9b) (with-exception-handler . G4f9a) (raise-continuable . G4f99) (raise . G4f98) (eval . G302a) (environment . G3022) (make-enumeration . G4f97) (enum-set=? . G4f96) (enum-set-universe . G4f95) (enum-set-union . G4f94) (enum-set-subset? . G4f93) (enum-set-projection . G4f92) (enum-set-member? . G4f91) (enum-set-intersection . G4f90) (enum-set-indexer . G4f8f) (enum-set-difference . G4f8e) (enum-set-constructor . G4f8d) (enum-set-complement . G4f8c) (enum-set->list . G4f8b) (who-condition? . G4a59) (warning? . G49d3) (violation? . G4a12) (undefined-violation? . G4ace) (syntax-violation? . G4ab5) (syntax-violation-subform . G4ab9) (syntax-violation-form . G4ab7) (syntax-violation . G304a) (simple-conditions . G4f8a) (serious-condition? . G49e8) (non-continuable-violation? . G4a70) (message-condition? . G49bc) (make-who-condition . G4a55) (make-warning . G49d1) (make-violation . G4a10) (make-undefined-violation . G4acc) (make-syntax-violation . G4aaf) (make-serious-condition . G49e6) (make-non-continuable-violation . G4a6e) (make-message-condition . G49b8) (make-lexical-violation . G4a98) (make-irritants-condition . G4a3b) (make-implementation-restriction-violation . G4a83) (make-error . G49fb) (make-assertion-violation . G4a25) (lexical-violation? . G4a9a) (irritants-condition? . G4a3f) (implementation-restriction-violation? . G4a85) (error? . G49fd) (condition-who . G4a5b) (condition-predicate . G4f89) (condition-message . G49be) (condition-irritants . G4a41) (condition-accessor . G4f88) (condition . G4f87) (assertion-violation? . G4a27) (condition? . G4f86) (utf32->string . G4f85) (utf16->string . G4f84) (utf8->string . G4f83) (uint-list->bytevector . G4f82) (u8-list->bytevector . G4f81) (string->utf8 . G4f80) (string->utf32 . G4f7f) (string->utf16 . G4f7e) (sint-list->bytevector . G4f7d) (native-endianness . G4f7c) (bytevector? . G4f7b) (bytevector=? . G4f7a) (bytevector-uint-set! . G4f79) (bytevector-uint-ref . G4f78) (bytevector-u8-set! . G4f77) (bytevector-u8-ref . G4f76) (bytevector-u64-set! . G4f75) (bytevector-u64-ref . G4f74) (bytevector-u64-native-set! . G4f73) (bytevector-u64-native-ref . G4f72) (bytevector-u32-set! . G4f71) (bytevector-u32-ref . G4f70) (bytevector-u32-native-set! . G4f6f) (bytevector-u32-native-ref . G4f6e) (bytevector-u16-set! . G4f6d) (bytevector-u16-ref . G4f6c) (bytevector-u16-native-set! . G4f6b) (bytevector-u16-native-ref . G4f6a) (bytevector-sint-set! . G4f69) (bytevector-sint-ref . G4f68) (bytevector-s8-set! . G4f67) (bytevector-s8-ref . G4f66) (bytevector-s64-set! . G4f65) (bytevector-s64-ref . G4f64) (bytevector-s64-native-set! . G4f63) (bytevector-s64-native-ref . G4f62) (bytevector-s32-set! . G4f61) (bytevector-s32-ref . G4f60) (bytevector-s32-native-set! . G4f5f) (bytevector-s32-native-ref . G4f5e) (bytevector-s16-set! . G4f5d) (bytevector-s16-ref . G4f5c) (bytevector-s16-native-set! . G4f5b) (bytevector-s16-native-ref . G4f5a) (bytevector-length . G4f59) (bytevector-ieee-single-ref . G4f58) (bytevector-ieee-single-set! . G4f57) (bytevector-ieee-single-native-set! . G4f56) (bytevector-ieee-single-native-ref . G4f55) (bytevector-ieee-double-set! . G4f54) (bytevector-ieee-double-ref . G4f53) (bytevector-ieee-double-native-set! . G4f52) (bytevector-ieee-double-native-ref . G4f51) (bytevector-fill! . G4f50) (bytevector-copy! . G4f4f) (bytevector-copy . G4f4e) (bytevector->uint-list . G4f4d) (bytevector->u8-list . G4f4c) (bytevector->sint-list . G4f4b) (no-nans-violation? . G4c08) (no-infinities-violation? . G4bf3) (make-no-nans-violation . G4c06) (make-no-infinities-violation . G4bf1) (real->flonum . G4f4a) (flzero? . G4f49) (fltruncate . G4f48) (fltan . G4f47) (flsqrt . G4f46) (flsin . G4f45) (flround . G4f44) (flpositive? . G4f43) (flonum? . G4f42) (flodd? . G4f41) (flnumerator . G4f40) (flnegative? . G4f3f) (flnan? . G4f3e) (flmod0 . G4f3d) (flmod . G4f3c) (flmin . G4f3b) (flmax . G4f3a) (fllog . G4f39) (flinteger? . G4f38) (flinfinite? . G4f37) (flfloor . G4f36) (flfinite? . G4f35) (flexpt . G4f34) (flexp . G4f33) (fleven? . G4f32) (fldiv0-and-mod0 . G4f31) (fldiv0 . G4f30) (fldiv-and-mod . G4f2f) (fldiv . G4f2e) (fldenominator . G4f2d) (flcos . G4f2c) (flceiling . G4f2b) (flatan . G4f2a) (flasin . G4f29) (flacos . G4f28) (flabs . G4f27) (fl>? . G4f26) (fl>=? . G4f25) (fl=? . G4f24) (fl<? . G4f23) (fl<=? . G4f22) (fl/ . G4f21) (fl- . G4f20) (fl+ . G4f1f) (fl* . G4f1e) (fixnum->flonum . G4f1d) (fxzero? . G4f1c) (fxxor . G4f1b) (fxrotate-bit-field . G4f1a) (fxreverse-bit-field . G4f19) (fxpositive? . G4f18) (fxodd? . G4f17) (fxnot . G4f16) (fxnegative? . G4f15) (fxmod0 . G4f14) (fxmod . G4f13) (fxmin . G4f12) (fxmax . G4f11) (fxlength . G4f10) (fxior . G4f0f) (fxif . G4f0e) (fxfirst-bit-set . G4f0d) (fxeven? . G4f0c) (fxdiv0-and-mod0 . G4f0b) (fxdiv0 . G4f0a) (fxdiv-and-mod . G4f09) (fxdiv . G4f08) (fxcopy-bit-field . G4f07) (fxcopy-bit . G4f06) (fxbit-set? . G4f05) (fxbit-field . G4f04) (fxbit-count . G4f03) (fxarithmetic-shift-right . G4f02) (fxarithmetic-shift-left . G4f01) (fxarithmetic-shift . G4f00) (fxand . G4eff) (fx>? . G4efe) (fx>=? . G4efd) (fx=? . G4efc) (fx<? . G4efb) (fx<=? . G4efa) (fx-/carry . G4ef9) (fx- . G4ef8) (fx+/carry . G4ef7) (fx+ . G4ef6) (fx*/carry . G4ef5) (fx* . G4ef4) (greatest-fixnum . G4ef3) (least-fixnum . G4ef2) (fixnum-width . G4ef1) (fixnum? . G4ef0) (bitwise-rotate-bit-field . G4eef) (bitwise-reverse-bit-field . G4eee) (bitwise-length . G4eed) (bitwise-if . G4eec) (bitwise-first-bit-set . G4eeb) (bitwise-copy-bit-field . G4eea) (bitwise-copy-bit . G4ee9) (bitwise-bit-set? . G4ee8) (bitwise-bit-field . G4ee7) (bitwise-bit-count . G4ee6) (bitwise-xor . G4ee5) (bitwise-ior . G4ee4) (bitwise-and . G4ee3) (bitwise-not . G4ee2) (bitwise-arithmetic-shift-right . G4ee1) (bitwise-arithmetic-shift-left . G4ee0) (bitwise-arithmetic-shift . G4edf) (zero? . G4ede) (vector? . G4edd) (vector-set! . G4edc) (vector-ref . G4edb) (vector-map . G4eda) (vector-length . G4ed9) (vector-for-each . G4ed8) (vector-fill! . G4ed7) (vector->list . G4ed6) (vector . G4ed5) (values . G4ed4) (truncate . G4ed3) (tan . G4ed2) (symbol? . G4ed1) (symbol=? . G4ed0) (symbol->string . G4ecf) (substring . G4ece) (string? . G4ecd) (string>? . G4ecc) (string>=? . G4ecb) (string=? . G4eca) (string<? . G4ec9) (string<=? . G4ec8) (string-ref . G4ec7) (string-length . G4ec6) (string-for-each . G4ec5) (string-copy . G4ec4) (string-append . G4ec3) (string->symbol . G4ec2) (string->number . G4ec1) (string->list . G4ec0) (string . G4ebf) (sqrt . G4ebe) (sin . G4ebd) (round . G4ebc) (reverse . G4ebb) (real? . G4eba) (real-valued? . G4eb9) (real-part . G4eb8) (rationalize . G4eb7) (rational? . G4eb6) (rational-valued? . G4eb5) (procedure? . G4eb4) (positive? . G4eb3) (pair? . G4eb2) (odd? . G4eb1) (numerator . G4eb0) (number? . G4eaf) (number->string . G4eae) (null? . G4ead) (not . G4eac) (negative? . G4eab) (nan? . G4eaa) (min . G4ea9) (max . G4ea8) (map . G4ea7) (make-vector . G4ea6) (make-string . G4ea5) (make-rectangular . G4ea4) (make-polar . G4ea3) (magnitude . G4ea2) (log . G4ea1) (list? . G4ea0) (list-tail . G4e9f) (list-ref . G4e9e) (list->vector . G4e9d) (list->string . G4e9c) (list . G4e9b) (length . G4e9a) (lcm . G4e99) (integer? . G4e98) (integer-valued? . G4e97) (integer->char . G4e96) (infinite? . G4e95) (inexact? . G4e94) (inexact . G4e93) (imag-part . G4e92) (gcd . G4e91) (for-each . G4e90) (floor . G4e8f) (finite? . G4e8e) (expt . G4e8d) (exp . G4e8c) (exact? . G4e8b) (exact-integer-sqrt . G4e8a) (exact . G4e89) (even? . G4e88) (error . G4e87) (eqv? . G4e86) (equal? . G4e85) (eq? . G4e84) (dynamic-wind . G4e83) (div0-and-mod0 . G4e82) (mod0 . G4e81) (div0 . G4e80) (div-and-mod . G4e7f) (mod . G4e7e) (div . G4e7d) (denominator . G4e7c) (cos . G4e7b) (cons . G4e7a) (complex? . G4e79) (char? . G4e78) (char>? . G4e77) (char>=? . G4e76) (char=? . G4e75) (char<? . G4e74) (char<=? . G4e73) (char->integer . G4e72) (ceiling . G4e71) (call-with-values . G4e70) (call/cc . G4e6f) (call-with-current-continuation . G4e6e) (cddddr . G4e6d) (cdddar . G4e6c) (cddadr . G4e6b) (cddaar . G4e6a) (cdaddr . G4e69) (cdadar . G4e68) (cdaadr . G4e67) (cdaaar . G4e66) (cadddr . G4e65) (caddar . G4e64) (cadadr . G4e63) (cadaar . G4e62) (caaddr . G4e61) (caadar . G4e60) (caaadr . G4e5f) (caaaar . G4e5e) (cdddr . G4e5d) (cddar . G4e5c) (cdadr . G4e5b) (cdaar . G4e5a) (caddr . G4e59) (cadar . G4e58) (caadr . G4e57) (caaar . G4e56) (cddr . G4e55) (cdar . G4e54) (cadr . G4e53) (caar . G4e52) (cdr . G4e51) (car . G4e50) (boolean? . G4e4f) (boolean=? . G4e4e) (atan . G4e4d) (assertion-violation . G4e4c) (asin . G4e4b) (apply . G4e4a) (append . G4e49) (angle . G4e48) (acos . G4e47) (abs . G4e46) (/ . G4e45) (* . G4e44) (- . G4e43) (+ . G4e42) (>= . G4e41) (> . G4e40) (= . G4e3f) (<= . G4e3e) (< . G4e3d) (library . G4e3c) (export . G4e3b) (&no-nans . G4e3a) (&no-infinities . G4e39) (&i/o-encoding . G4e38) (&i/o-decoding . G4e37) (&i/o-port . G4e36) (&i/o-file-does-not-exist . G4e35) (&i/o-file-already-exists . G4e34) (&i/o-file-is-read-only . G4e33) (&i/o-file-protection . G4e32) (&i/o-filename . G4e31) (&i/o-invalid-position . G4e30) (&i/o-write . G4e2f) (&i/o-read . G4e2e) (&i/o . G4e2d) (&undefined . G4e2c) (&syntax . G4e2b) (&lexical . G4e2a) (&implementation-restriction . G4e29) (&non-continuable . G4e28) (&who . G4e27) (&irritants . G4e26) (&assertion . G4e25) (&violation . G4e24) (&error . G4e23) (&serious . G4e22) (&warning . G4e21) (&message . G4e20) (&condition . G4e1f) (define-condition-type . G4e1e) (define-enumeration . G4e1d) (define-record-type . G4e1c) (parent-rtd . G4e1b) (nongenerative . G4e1a) (opaque . G4e19) (sealed . G4e18) (protocol . G4e17) (parent . G4e16) (immutable . G4e15) (mutable . G4e14) (fields . G4e13) (error-handling-mode . G4e12) (file-options . G4e11) (buffer-mode . G4e10) (eol-style . G4e0f) (guard . G4e0e) (unsyntax-splicing . G4e0b) (unsyntax . G4e0a) (unquote-splicing . G4e09) (unquote . G4e08) (_ . G4e07) (else . G4e06) (=> . G4e05) (... . G4e04) (assert . G4e03) (endianness . G4e02) (do . G4dff) (cond . G4dfe) (let* . G4dfd) (let . G4dfc) (let*-values . G4dfb) (let-values . G4dfa) (identifier-syntax . G4df9) (with-syntax . G4df8) (quasisyntax . G4df7) (quasiquote . G4df6) (syntax-rules . G4df5) (include . G4df4) (record-constructor-descriptor . G4df2) (record-type-descriptor . G4df1) (case . G4df0) (unless . G4dee) (when . G4ded) (or . G4dec) (and . G4deb) (if . G4dea) (letrec* . G4de9) (letrec . G4de8) (case-lambda . G4de6) (lambda . G4de5) (syntax . G4de4) (syntax-case . G4de3) (quote . G4de2) (letrec-syntax . G4de0) (let-syntax . G4ddf) (set! . G4dde) (import . G4ddd) (begin . G4ddc) (define-syntax . G4dda) (define . G4dd9)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50b9 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4fba) (unquote-splicing . G4e09) (unquote . G4e08) (_ . G4e07) (else . G4e06) (=> . G4e05) (... . G4e04) (delay . G4e01) (do . G4dff) (cond . G4dfe) (let* . G4dfd) (let . G4dfc) (quasiquote . G4df6) (syntax-rules . G4df5) (case . G4df0) (or . G4dec) (and . G4deb) (if . G4dea) (letrec . G4de8) (lambda . G4de5) (quote . G4de2) (letrec-syntax . G4de0) (let-syntax . G4ddf) (set! . G4dde) (begin . G4ddc) (define-syntax . G4dda) (define . G4dd9)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50ba '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G504f) (string-ci>=? . G504e) (string-ci=? . G504d) (string-ci<? . G504c) (string-ci<=? . G504b) (char-whitespace? . G504a) (char-upper-case? . G5049) (char-numeric? . G5047) (char-lower-case? . G5046) (char-upcase . G5044) (char-downcase . G5041) (char-ci>? . G5040) (char-ci>=? . G503f) (char-ci=? . G503e) (char-ci<? . G503d) (char-ci<=? . G503c) (char-alphabetic? . G503b) (call-with-output-file . G500f) (call-with-input-file . G500e) (write-char . G500d) (write . G500c) (with-output-to-file . G500b) (with-input-from-file . G500a) (read-char . G5009) (read . G5008) (peek-char . G5007) (open-output-file . G5006) (open-input-file . G5005) (newline . G5004) (display . G5003) (close-output-port . G5002) (close-input-port . G5001) (eof-object . G4fff) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (scheme-report-environment . G3026) (quotient . G4fc0) (null-environment . G3024) (remainder . G4fbf) (modulo . G4fbe) (inexact->exact . G4fbd) (force . G4fbc) (exact->inexact . G4fbb) (make-promise . G4fba) (string-fill! . G4fb8) (string-set! . G4fb7) (set-cdr! . G4fb6) (set-car! . G4fb5) (memv . G4faf) (memq . G4fae) (member . G4fac) (assv . G4fa4) (assq . G4fa3) (assoc . G4fa1) (eval . G302a) (zero? . G4ede) (vector? . G4edd) (vector-set! . G4edc) (vector-ref . G4edb) (vector-length . G4ed9) (vector-fill! . G4ed7) (vector->list . G4ed6) (vector . G4ed5) (values . G4ed4) (truncate . G4ed3) (tan . G4ed2) (symbol? . G4ed1) (symbol->string . G4ecf) (substring . G4ece) (string? . G4ecd) (string>? . G4ecc) (string>=? . G4ecb) (string=? . G4eca) (string<? . G4ec9) (string<=? . G4ec8) (string-ref . G4ec7) (string-length . G4ec6) (string-copy . G4ec4) (string-append . G4ec3) (string->symbol . G4ec2) (string->number . G4ec1) (string->list . G4ec0) (string . G4ebf) (sqrt . G4ebe) (sin . G4ebd) (round . G4ebc) (reverse . G4ebb) (real? . G4eba) (real-part . G4eb8) (rationalize . G4eb7) (rational? . G4eb6) (procedure? . G4eb4) (positive? . G4eb3) (pair? . G4eb2) (odd? . G4eb1) (numerator . G4eb0) (number? . G4eaf) (number->string . G4eae) (not . G4eac) (negative? . G4eab) (min . G4ea9) (max . G4ea8) (map . G4ea7) (make-vector . G4ea6) (make-string . G4ea5) (make-rectangular . G4ea4) (make-polar . G4ea3) (magnitude . G4ea2) (log . G4ea1) (list? . G4ea0) (list-tail . G4e9f) (list-ref . G4e9e) (list->vector . G4e9d) (list->string . G4e9c) (list . G4e9b) (length . G4e9a) (lcm . G4e99) (integer? . G4e98) (integer->char . G4e96) (inexact? . G4e94) (imag-part . G4e92) (gcd . G4e91) (for-each . G4e90) (floor . G4e8f) (expt . G4e8d) (exp . G4e8c) (exact? . G4e8b) (even? . G4e88) (eqv? . G4e86) (equal? . G4e85) (eq? . G4e84) (dynamic-wind . G4e83) (denominator . G4e7c) (cos . G4e7b) (cons . G4e7a) (complex? . G4e79) (char? . G4e78) (char>? . G4e77) (char>=? . G4e76) (char=? . G4e75) (char<? . G4e74) (char<=? . G4e73) (char->integer . G4e72) (ceiling . G4e71) (call-with-values . G4e70) (call-with-current-continuation . G4e6e) (cddddr . G4e6d) (cdddar . G4e6c) (cddadr . G4e6b) (cddaar . G4e6a) (cdaddr . G4e69) (cdadar . G4e68) (cdaadr . G4e67) (cdaaar . G4e66) (cadddr . G4e65) (caddar . G4e64) (cadadr . G4e63) (cadaar . G4e62) (caaddr . G4e61) (caadar . G4e60) (caaadr . G4e5f) (caaaar . G4e5e) (cdddr . G4e5d) (cddar . G4e5c) (cdadr . G4e5b) (cdaar . G4e5a) (caddr . G4e59) (cadar . G4e58) (caadr . G4e57) (caaar . G4e56) (cddr . G4e55) (cdar . G4e54) (cadr . G4e53) (caar . G4e52) (cdr . G4e51) (car . G4e50) (boolean? . G4e4f) (atan . G4e4d) (asin . G4e4b) (apply . G4e4a) (append . G4e49) (angle . G4e48) (acos . G4e47) (abs . G4e46) (/ . G4e45) (* . G4e44) (- . G4e43) (+ . G4e42) (>= . G4e41) (> . G4e40) (= . G4e3f) (<= . G4e3e) (< . G4e3d) (unquote-splicing . G4e09) (unquote . G4e08) (else . G4e06) (=> . G4e05) (... . G4e04) (delay . G4e01) (do . G4dff) (cond . G4dfe) (let* . G4dfd) (let . G4dfc) (quasiquote . G4df6) (syntax-rules . G4df5) (case . G4df0) (or . G4dec) (and . G4deb) (if . G4dea) (letrec . G4de8) (lambda . G4de5) (quote . G4de2) (letrec-syntax . G4de0) (let-syntax . G4ddf) (set! . G4dde) (begin . G4ddc) (define-syntax . G4dda) (define . G4dd9)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50bb '(psyntax modules) '() '() '() '() '((module . G4ddb)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50bc '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50bd '(rnrs) '(6) '() '() '() '((regexp? . G50b0) (string-upcase . G5057) (string-titlecase . G5056) (string-normalize-nfkd . G5055) (string-normalize-nfkc . G5054) (string-normalize-nfd . G5053) (string-normalize-nfc . G5052) (string-foldcase . G5051) (string-downcase . G5050) (string-ci>? . G504f) (string-ci>=? . G504e) (string-ci=? . G504d) (string-ci<? . G504c) (string-ci<=? . G504b) (char-whitespace? . G504a) (char-upper-case? . G5049) (char-title-case? . G5048) (char-numeric? . G5047) (char-lower-case? . G5046) (char-general-category . G5045) (char-upcase . G5044) (char-titlecase . G5043) (char-foldcase . G5042) (char-downcase . G5041) (char-ci>? . G5040) (char-ci>=? . G503f) (char-ci=? . G503e) (char-ci<? . G503d) (char-ci<=? . G503c) (char-alphabetic? . G503b) (make-variable-transformer . G2d9a) (identifier? . G304c) (generate-temporaries . G3038) (free-identifier=? . G303a) (syntax->datum . G3050) (datum->syntax . G304e) (bound-identifier=? . G303c) (record-type-descriptor? . G503a) (record-predicate . G5039) (record-mutator . G5038) (record-constructor . G5037) (record-accessor . G5036) (make-record-type-descriptor . G5035) (make-record-constructor-descriptor . G5034) (record? . G5033) (record-type-uid . G5032) (record-type-sealed? . G5031) (record-type-parent . G5030) (record-type-opaque? . G502f) (record-type-name . G502e) (record-type-generative? . G502d) (record-type-field-names . G502c) (record-rtd . G502b) (record-field-mutable? . G502a) (delete-file . G5029) (file-exists? . G5028) (vector-sort! . G5027) (vector-sort . G5026) (list-sort . G5025) (symbol-hash . G5024) (string-ci-hash . G5023) (string-hash . G5022) (equal-hash . G5021) (hashtable-equivalence-function . G5020) (make-hashtable . G501f) (hashtable-hash-function . G501e) (make-eqv-hashtable . G501d) (make-eq-hashtable . G501c) (hashtable? . G501b) (hashtable-update! . G501a) (hashtable-size . G5019) (hashtable-set! . G5018) (hashtable-ref . G5017) (hashtable-mutable? . G5016) (hashtable-keys . G5015) (hashtable-entries . G5014) (hashtable-delete! . G5013) (hashtable-copy . G5012) (hashtable-contains? . G5011) (hashtable-clear! . G5010) (call-with-output-file . G500f) (call-with-input-file . G500e) (write-char . G500d) (write . G500c) (with-output-to-file . G500b) (with-input-from-file . G500a) (read-char . G5009) (read . G5008) (peek-char . G5007) (open-output-file . G5006) (open-input-file . G5005) (newline . G5004) (display . G5003) (close-output-port . G5002) (close-input-port . G5001) (eof-object? . G5000) (eof-object . G4fff) (current-error-port . G4ffe) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (utf-8-codec . G4ff9) (utf-16-codec . G4ff8) (transcoder-error-handling-mode . G4ff7) (transcoder-eol-style . G4ff6) (transcoder-codec . G4ff5) (transcoded-port . G4ff4) (textual-port? . G4ff3) (string->bytevector . G4ff2) (standard-output-port . G4ff1) (standard-input-port . G4ff0) (standard-error-port . G4fef) (set-port-position! . G4fee) (put-u8 . G4fed) (put-string . G4fec) (put-datum . G4feb) (put-char . G4fea) (put-bytevector . G4fe9) (port? . G4fe8) (port-transcoder . G4fe7) (port-position . G4fe6) (port-has-set-port-position!? . G4fe5) (port-has-port-position? . G4fe4) (port-eof? . G4fe3) (output-port-buffer-mode . G4fe2) (open-string-output-port . G4fe1) (open-string-input-port . G4fe0) (open-file-output-port . G4fdf) (open-file-input/output-port . G4fde) (open-file-input-port . G4fdd) (open-bytevector-output-port . G4fdc) (open-bytevector-input-port . G4fdb) (native-transcoder . G4fda) (native-eol-style . G4fd9) (make-transcoder . G4fd8) (latin-1-codec . G4fd7) (make-i/o-write-error . G4b0b) (make-i/o-read-error . G4af6) (make-i/o-port-error . G4ba9) (make-i/o-invalid-position-error . G4b21) (make-i/o-filename-error . G4b3b) (make-i/o-file-protection-error . G4b54) (make-i/o-file-is-read-only-error . G4b69) (make-i/o-file-does-not-exist-error . G4b93) (make-i/o-file-already-exists-error . G4b7e) (make-i/o-error . G4ae1) (make-i/o-encoding-error . G4bd8) (make-i/o-decoding-error . G4bc2) (make-custom-textual-output-port . G4fd6) (make-custom-textual-input/output-port . G4fd5) (make-custom-textual-input-port . G4fd4) (make-custom-binary-output-port . G4fd3) (make-custom-binary-input/output-port . G4fd2) (make-custom-binary-input-port . G4fd1) (make-bytevector . G4fd0) (lookahead-u8 . G4fcf) (lookahead-char . G4fce) (i/o-write-error? . G4b0d) (i/o-read-error? . G4af8) (i/o-port-error? . G4bad) (i/o-invalid-position-error? . G4b25) (i/o-filename-error? . G4b3f) (i/o-file-protection-error? . G4b56) (i/o-file-is-read-only-error? . G4b6b) (i/o-file-does-not-exist-error? . G4b95) (i/o-file-already-exists-error? . G4b80) (i/o-error? . G4ae3) (i/o-error-position . G4b27) (i/o-error-port . G4baf) (i/o-error-filename . G4b41) (i/o-encoding-error? . G4bdc) (i/o-encoding-error-char . G4bde) (i/o-decoding-error? . G4bc4) (get-u8 . G4fcd) (get-string-n! . G4fcc) (get-string-n . G4fcb) (get-string-all . G4fca) (get-line . G4fc9) (get-datum . G4fc8) (get-char . G4fc7) (get-bytevector-some . G4fc6) (get-bytevector-n! . G4fc5) (get-bytevector-n . G4fc4) (get-bytevector-all . G4fc3) (flush-output-port . G4fc2) (close-port . G4fc1) (exit . G4fb9) (command-line . G4d0d) (remove . G4fb4) (remv . G4fb3) (remp . G4fb2) (remq . G4fb1) (partition . G4fb0) (memv . G4faf) (memq . G4fae) (memp . G4fad) (member . G4fac) (exists . G4fab) (for-all . G4faa) (fold-right . G4fa9) (fold-left . G4fa8) (find . G4fa7) (filter . G4fa6) (cons* . G4fa5) (assv . G4fa4) (assq . G4fa3) (assp . G4fa2) (assoc . G4fa1) (call-with-string-output-port . G4fa0) (call-with-port . G4f9f) (call-with-bytevector-output-port . G4f9e) (bytevector->string . G4f9d) (buffer-mode? . G4f9c) (binary-port? . G4f9b) (with-exception-handler . G4f9a) (raise-continuable . G4f99) (raise . G4f98) (make-enumeration . G4f97) (enum-set=? . G4f96) (enum-set-universe . G4f95) (enum-set-union . G4f94) (enum-set-subset? . G4f93) (enum-set-projection . G4f92) (enum-set-member? . G4f91) (enum-set-intersection . G4f90) (enum-set-indexer . G4f8f) (enum-set-difference . G4f8e) (enum-set-constructor . G4f8d) (enum-set-complement . G4f8c) (enum-set->list . G4f8b) (who-condition? . G4a59) (warning? . G49d3) (violation? . G4a12) (undefined-violation? . G4ace) (syntax-violation? . G4ab5) (syntax-violation-subform . G4ab9) (syntax-violation-form . G4ab7) (syntax-violation . G304a) (simple-conditions . G4f8a) (serious-condition? . G49e8) (non-continuable-violation? . G4a70) (message-condition? . G49bc) (make-who-condition . G4a55) (make-warning . G49d1) (make-violation . G4a10) (make-undefined-violation . G4acc) (make-syntax-violation . G4aaf) (make-serious-condition . G49e6) (make-non-continuable-violation . G4a6e) (make-message-condition . G49b8) (make-lexical-violation . G4a98) (make-irritants-condition . G4a3b) (make-implementation-restriction-violation . G4a83) (make-error . G49fb) (make-assertion-violation . G4a25) (lexical-violation? . G4a9a) (irritants-condition? . G4a3f) (implementation-restriction-violation? . G4a85) (error? . G49fd) (condition-who . G4a5b) (condition-predicate . G4f89) (condition-message . G49be) (condition-irritants . G4a41) (condition-accessor . G4f88) (condition . G4f87) (assertion-violation? . G4a27) (condition? . G4f86) (utf32->string . G4f85) (utf16->string . G4f84) (utf8->string . G4f83) (uint-list->bytevector . G4f82) (u8-list->bytevector . G4f81) (string->utf8 . G4f80) (string->utf32 . G4f7f) (string->utf16 . G4f7e) (sint-list->bytevector . G4f7d) (native-endianness . G4f7c) (bytevector? . G4f7b) (bytevector=? . G4f7a) (bytevector-uint-set! . G4f79) (bytevector-uint-ref . G4f78) (bytevector-u8-set! . G4f77) (bytevector-u8-ref . G4f76) (bytevector-u64-set! . G4f75) (bytevector-u64-ref . G4f74) (bytevector-u64-native-set! . G4f73) (bytevector-u64-native-ref . G4f72) (bytevector-u32-set! . G4f71) (bytevector-u32-ref . G4f70) (bytevector-u32-native-set! . G4f6f) (bytevector-u32-native-ref . G4f6e) (bytevector-u16-set! . G4f6d) (bytevector-u16-ref . G4f6c) (bytevector-u16-native-set! . G4f6b) (bytevector-u16-native-ref . G4f6a) (bytevector-sint-set! . G4f69) (bytevector-sint-ref . G4f68) (bytevector-s8-set! . G4f67) (bytevector-s8-ref . G4f66) (bytevector-s64-set! . G4f65) (bytevector-s64-ref . G4f64) (bytevector-s64-native-set! . G4f63) (bytevector-s64-native-ref . G4f62) (bytevector-s32-set! . G4f61) (bytevector-s32-ref . G4f60) (bytevector-s32-native-set! . G4f5f) (bytevector-s32-native-ref . G4f5e) (bytevector-s16-set! . G4f5d) (bytevector-s16-ref . G4f5c) (bytevector-s16-native-set! . G4f5b) (bytevector-s16-native-ref . G4f5a) (bytevector-length . G4f59) (bytevector-ieee-single-ref . G4f58) (bytevector-ieee-single-set! . G4f57) (bytevector-ieee-single-native-set! . G4f56) (bytevector-ieee-single-native-ref . G4f55) (bytevector-ieee-double-set! . G4f54) (bytevector-ieee-double-ref . G4f53) (bytevector-ieee-double-native-set! . G4f52) (bytevector-ieee-double-native-ref . G4f51) (bytevector-fill! . G4f50) (bytevector-copy! . G4f4f) (bytevector-copy . G4f4e) (bytevector->uint-list . G4f4d) (bytevector->u8-list . G4f4c) (bytevector->sint-list . G4f4b) (no-nans-violation? . G4c08) (no-infinities-violation? . G4bf3) (make-no-nans-violation . G4c06) (make-no-infinities-violation . G4bf1) (real->flonum . G4f4a) (flzero? . G4f49) (fltruncate . G4f48) (fltan . G4f47) (flsqrt . G4f46) (flsin . G4f45) (flround . G4f44) (flpositive? . G4f43) (flonum? . G4f42) (flodd? . G4f41) (flnumerator . G4f40) (flnegative? . G4f3f) (flnan? . G4f3e) (flmod0 . G4f3d) (flmod . G4f3c) (flmin . G4f3b) (flmax . G4f3a) (fllog . G4f39) (flinteger? . G4f38) (flinfinite? . G4f37) (flfloor . G4f36) (flfinite? . G4f35) (flexpt . G4f34) (flexp . G4f33) (fleven? . G4f32) (fldiv0-and-mod0 . G4f31) (fldiv0 . G4f30) (fldiv-and-mod . G4f2f) (fldiv . G4f2e) (fldenominator . G4f2d) (flcos . G4f2c) (flceiling . G4f2b) (flatan . G4f2a) (flasin . G4f29) (flacos . G4f28) (flabs . G4f27) (fl>? . G4f26) (fl>=? . G4f25) (fl=? . G4f24) (fl<? . G4f23) (fl<=? . G4f22) (fl/ . G4f21) (fl- . G4f20) (fl+ . G4f1f) (fl* . G4f1e) (fixnum->flonum . G4f1d) (fxzero? . G4f1c) (fxxor . G4f1b) (fxrotate-bit-field . G4f1a) (fxreverse-bit-field . G4f19) (fxpositive? . G4f18) (fxodd? . G4f17) (fxnot . G4f16) (fxnegative? . G4f15) (fxmod0 . G4f14) (fxmod . G4f13) (fxmin . G4f12) (fxmax . G4f11) (fxlength . G4f10) (fxior . G4f0f) (fxif . G4f0e) (fxfirst-bit-set . G4f0d) (fxeven? . G4f0c) (fxdiv0-and-mod0 . G4f0b) (fxdiv0 . G4f0a) (fxdiv-and-mod . G4f09) (fxdiv . G4f08) (fxcopy-bit-field . G4f07) (fxcopy-bit . G4f06) (fxbit-set? . G4f05) (fxbit-field . G4f04) (fxbit-count . G4f03) (fxarithmetic-shift-right . G4f02) (fxarithmetic-shift-left . G4f01) (fxarithmetic-shift . G4f00) (fxand . G4eff) (fx>? . G4efe) (fx>=? . G4efd) (fx=? . G4efc) (fx<? . G4efb) (fx<=? . G4efa) (fx-/carry . G4ef9) (fx- . G4ef8) (fx+/carry . G4ef7) (fx+ . G4ef6) (fx*/carry . G4ef5) (fx* . G4ef4) (greatest-fixnum . G4ef3) (least-fixnum . G4ef2) (fixnum-width . G4ef1) (fixnum? . G4ef0) (bitwise-rotate-bit-field . G4eef) (bitwise-reverse-bit-field . G4eee) (bitwise-length . G4eed) (bitwise-if . G4eec) (bitwise-first-bit-set . G4eeb) (bitwise-copy-bit-field . G4eea) (bitwise-copy-bit . G4ee9) (bitwise-bit-set? . G4ee8) (bitwise-bit-field . G4ee7) (bitwise-bit-count . G4ee6) (bitwise-xor . G4ee5) (bitwise-ior . G4ee4) (bitwise-and . G4ee3) (bitwise-not . G4ee2) (bitwise-arithmetic-shift-right . G4ee1) (bitwise-arithmetic-shift-left . G4ee0) (bitwise-arithmetic-shift . G4edf) (zero? . G4ede) (vector? . G4edd) (vector-set! . G4edc) (vector-ref . G4edb) (vector-map . G4eda) (vector-length . G4ed9) (vector-for-each . G4ed8) (vector-fill! . G4ed7) (vector->list . G4ed6) (vector . G4ed5) (values . G4ed4) (truncate . G4ed3) (tan . G4ed2) (symbol? . G4ed1) (symbol=? . G4ed0) (symbol->string . G4ecf) (substring . G4ece) (string? . G4ecd) (string>? . G4ecc) (string>=? . G4ecb) (string=? . G4eca) (string<? . G4ec9) (string<=? . G4ec8) (string-ref . G4ec7) (string-length . G4ec6) (string-for-each . G4ec5) (string-copy . G4ec4) (string-append . G4ec3) (string->symbol . G4ec2) (string->number . G4ec1) (string->list . G4ec0) (string . G4ebf) (sqrt . G4ebe) (sin . G4ebd) (round . G4ebc) (reverse . G4ebb) (real? . G4eba) (real-valued? . G4eb9) (real-part . G4eb8) (rationalize . G4eb7) (rational? . G4eb6) (rational-valued? . G4eb5) (procedure? . G4eb4) (positive? . G4eb3) (pair? . G4eb2) (odd? . G4eb1) (numerator . G4eb0) (number? . G4eaf) (number->string . G4eae) (null? . G4ead) (not . G4eac) (negative? . G4eab) (nan? . G4eaa) (min . G4ea9) (max . G4ea8) (map . G4ea7) (make-vector . G4ea6) (make-string . G4ea5) (make-rectangular . G4ea4) (make-polar . G4ea3) (magnitude . G4ea2) (log . G4ea1) (list? . G4ea0) (list-tail . G4e9f) (list-ref . G4e9e) (list->vector . G4e9d) (list->string . G4e9c) (list . G4e9b) (length . G4e9a) (lcm . G4e99) (integer? . G4e98) (integer-valued? . G4e97) (integer->char . G4e96) (infinite? . G4e95) (inexact? . G4e94) (inexact . G4e93) (imag-part . G4e92) (gcd . G4e91) (for-each . G4e90) (floor . G4e8f) (finite? . G4e8e) (expt . G4e8d) (exp . G4e8c) (exact? . G4e8b) (exact-integer-sqrt . G4e8a) (exact . G4e89) (even? . G4e88) (error . G4e87) (eqv? . G4e86) (equal? . G4e85) (eq? . G4e84) (dynamic-wind . G4e83) (div0-and-mod0 . G4e82) (mod0 . G4e81) (div0 . G4e80) (div-and-mod . G4e7f) (mod . G4e7e) (div . G4e7d) (denominator . G4e7c) (cos . G4e7b) (cons . G4e7a) (complex? . G4e79) (char? . G4e78) (char>? . G4e77) (char>=? . G4e76) (char=? . G4e75) (char<? . G4e74) (char<=? . G4e73) (char->integer . G4e72) (ceiling . G4e71) (call-with-values . G4e70) (call/cc . G4e6f) (call-with-current-continuation . G4e6e) (cddddr . G4e6d) (cdddar . G4e6c) (cddadr . G4e6b) (cddaar . G4e6a) (cdaddr . G4e69) (cdadar . G4e68) (cdaadr . G4e67) (cdaaar . G4e66) (cadddr . G4e65) (caddar . G4e64) (cadadr . G4e63) (cadaar . G4e62) (caaddr . G4e61) (caadar . G4e60) (caaadr . G4e5f) (caaaar . G4e5e) (cdddr . G4e5d) (cddar . G4e5c) (cdadr . G4e5b) (cdaar . G4e5a) (caddr . G4e59) (cadar . G4e58) (caadr . G4e57) (caaar . G4e56) (cddr . G4e55) (cdar . G4e54) (cadr . G4e53) (caar . G4e52) (cdr . G4e51) (car . G4e50) (boolean? . G4e4f) (boolean=? . G4e4e) (atan . G4e4d) (assertion-violation . G4e4c) (asin . G4e4b) (apply . G4e4a) (append . G4e49) (angle . G4e48) (acos . G4e47) (abs . G4e46) (/ . G4e45) (* . G4e44) (- . G4e43) (+ . G4e42) (>= . G4e41) (> . G4e40) (= . G4e3f) (<= . G4e3e) (< . G4e3d) (&no-nans . G4e3a) (&no-infinities . G4e39) (&i/o-encoding . G4e38) (&i/o-decoding . G4e37) (&i/o-port . G4e36) (&i/o-file-does-not-exist . G4e35) (&i/o-file-already-exists . G4e34) (&i/o-file-is-read-only . G4e33) (&i/o-file-protection . G4e32) (&i/o-filename . G4e31) (&i/o-invalid-position . G4e30) (&i/o-write . G4e2f) (&i/o-read . G4e2e) (&i/o . G4e2d) (&undefined . G4e2c) (&syntax . G4e2b) (&lexical . G4e2a) (&implementation-restriction . G4e29) (&non-continuable . G4e28) (&who . G4e27) (&irritants . G4e26) (&assertion . G4e25) (&violation . G4e24) (&error . G4e23) (&serious . G4e22) (&warning . G4e21) (&message . G4e20) (&condition . G4e1f) (define-condition-type . G4e1e) (define-enumeration . G4e1d) (define-record-type . G4e1c) (parent-rtd . G4e1b) (nongenerative . G4e1a) (opaque . G4e19) (sealed . G4e18) (protocol . G4e17) (parent . G4e16) (immutable . G4e15) (mutable . G4e14) (fields . G4e13) (error-handling-mode . G4e12) (file-options . G4e11) (buffer-mode . G4e10) (eol-style . G4e0f) (guard . G4e0e) (unsyntax-splicing . G4e0b) (unsyntax . G4e0a) (unquote-splicing . G4e09) (unquote . G4e08) (_ . G4e07) (else . G4e06) (=> . G4e05) (... . G4e04) (assert . G4e03) (endianness . G4e02) (do . G4dff) (cond . G4dfe) (let* . G4dfd) (let . G4dfc) (let*-values . G4dfb) (let-values . G4dfa) (identifier-syntax . G4df9) (with-syntax . G4df8) (quasisyntax . G4df7) (quasiquote . G4df6) (syntax-rules . G4df5) (record-constructor-descriptor . G4df2) (record-type-descriptor . G4df1) (case . G4df0) (unless . G4dee) (when . G4ded) (or . G4dec) (and . G4deb) (if . G4dea) (letrec* . G4de9) (letrec . G4de8) (case-lambda . G4de6) (lambda . G4de5) (syntax . G4de4) (syntax-case . G4de3) (quote . G4de2) (letrec-syntax . G4de0) (let-syntax . G4ddf) (set! . G4dde) (begin . G4ddc) (define-syntax . G4dda) (define . G4dd9)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50be '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3026) (quotient . G4fc0) (null-environment . G3024) (remainder . G4fbf) (modulo . G4fbe) (inexact->exact . G4fbd) (force . G4fbc) (exact->inexact . G4fbb) (make-promise . G4fba) (delay . G4e01)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50bf '(rnrs control) '(6) '() '() '() '((do . G4dff) (unless . G4dee) (when . G4ded) (case-lambda . G4de6)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50c0 '(rnrs eval) '(6) '() '() '() '((eval . G302a) (environment . G3022)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50c1 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4fb6) (set-car! . G4fb5)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50c2 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4fb8) (string-set! . G4fb7)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50c3 '(rnrs programs) '(6) '() '() '() '((exit . G4fb9) (command-line . G4d0d)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50c4 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2d9a) (identifier? . G304c) (generate-temporaries . G3038) (free-identifier=? . G303a) (syntax->datum . G3050) (datum->syntax . G304e) (bound-identifier=? . G303c) (syntax-violation . G304a) (unsyntax-splicing . G4e0b) (unsyntax . G4e0a) (_ . G4e07) (... . G4e04) (with-syntax . G4df8) (quasisyntax . G4df7) (syntax . G4de4) (syntax-case . G4de3)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50c5 '(rnrs files) '(6) '() '() '() '((delete-file . G5029) (file-exists? . G5028) (make-i/o-write-error . G4b0b) (make-i/o-read-error . G4af6) (make-i/o-port-error . G4ba9) (make-i/o-invalid-position-error . G4b21) (make-i/o-filename-error . G4b3b) (make-i/o-file-protection-error . G4b54) (make-i/o-file-is-read-only-error . G4b69) (make-i/o-file-does-not-exist-error . G4b93) (make-i/o-file-already-exists-error . G4b7e) (make-i/o-error . G4ae1) (i/o-write-error? . G4b0d) (i/o-read-error? . G4af8) (i/o-port-error? . G4bad) (i/o-invalid-position-error? . G4b25) (i/o-filename-error? . G4b3f) (i/o-file-protection-error? . G4b56) (i/o-file-is-read-only-error? . G4b6b) (i/o-file-does-not-exist-error? . G4b95) (i/o-file-already-exists-error? . G4b80) (i/o-error? . G4ae3) (i/o-error-position . G4b27) (i/o-error-port . G4baf) (i/o-error-filename . G4b41) (&i/o-port . G4e36) (&i/o-file-does-not-exist . G4e35) (&i/o-file-already-exists . G4e34) (&i/o-file-is-read-only . G4e33) (&i/o-file-protection . G4e32) (&i/o-filename . G4e31) (&i/o-invalid-position . G4e30) (&i/o-write . G4e2f) (&i/o-read . G4e2e) (&i/o . G4e2d)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50c6 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G5027) (vector-sort . G5026) (list-sort . G5025)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50c7 '(rnrs base) '(6) '() '() '() '((zero? . G4ede) (vector? . G4edd) (vector-set! . G4edc) (vector-ref . G4edb) (vector-map . G4eda) (vector-length . G4ed9) (vector-for-each . G4ed8) (vector-fill! . G4ed7) (vector->list . G4ed6) (vector . G4ed5) (values . G4ed4) (truncate . G4ed3) (tan . G4ed2) (symbol? . G4ed1) (symbol=? . G4ed0) (symbol->string . G4ecf) (substring . G4ece) (string? . G4ecd) (string>? . G4ecc) (string>=? . G4ecb) (string=? . G4eca) (string<? . G4ec9) (string<=? . G4ec8) (string-ref . G4ec7) (string-length . G4ec6) (string-for-each . G4ec5) (string-copy . G4ec4) (string-append . G4ec3) (string->symbol . G4ec2) (string->number . G4ec1) (string->list . G4ec0) (string . G4ebf) (sqrt . G4ebe) (sin . G4ebd) (round . G4ebc) (reverse . G4ebb) (real? . G4eba) (real-valued? . G4eb9) (real-part . G4eb8) (rationalize . G4eb7) (rational? . G4eb6) (rational-valued? . G4eb5) (procedure? . G4eb4) (positive? . G4eb3) (pair? . G4eb2) (odd? . G4eb1) (numerator . G4eb0) (number? . G4eaf) (number->string . G4eae) (null? . G4ead) (not . G4eac) (negative? . G4eab) (nan? . G4eaa) (min . G4ea9) (max . G4ea8) (map . G4ea7) (make-vector . G4ea6) (make-string . G4ea5) (make-rectangular . G4ea4) (make-polar . G4ea3) (magnitude . G4ea2) (log . G4ea1) (list? . G4ea0) (list-tail . G4e9f) (list-ref . G4e9e) (list->vector . G4e9d) (list->string . G4e9c) (list . G4e9b) (length . G4e9a) (lcm . G4e99) (integer? . G4e98) (integer-valued? . G4e97) (integer->char . G4e96) (infinite? . G4e95) (inexact? . G4e94) (inexact . G4e93) (imag-part . G4e92) (gcd . G4e91) (for-each . G4e90) (floor . G4e8f) (finite? . G4e8e) (expt . G4e8d) (exp . G4e8c) (exact? . G4e8b) (exact-integer-sqrt . G4e8a) (exact . G4e89) (even? . G4e88) (error . G4e87) (eqv? . G4e86) (equal? . G4e85) (eq? . G4e84) (dynamic-wind . G4e83) (div0-and-mod0 . G4e82) (mod0 . G4e81) (div0 . G4e80) (div-and-mod . G4e7f) (mod . G4e7e) (div . G4e7d) (denominator . G4e7c) (cos . G4e7b) (cons . G4e7a) (complex? . G4e79) (char? . G4e78) (char>? . G4e77) (char>=? . G4e76) (char=? . G4e75) (char<? . G4e74) (char<=? . G4e73) (char->integer . G4e72) (ceiling . G4e71) (call-with-values . G4e70) (call/cc . G4e6f) (call-with-current-continuation . G4e6e) (cddddr . G4e6d) (cdddar . G4e6c) (cddadr . G4e6b) (cddaar . G4e6a) (cdaddr . G4e69) (cdadar . G4e68) (cdaadr . G4e67) (cdaaar . G4e66) (cadddr . G4e65) (caddar . G4e64) (cadadr . G4e63) (cadaar . G4e62) (caaddr . G4e61) (caadar . G4e60) (caaadr . G4e5f) (caaaar . G4e5e) (cdddr . G4e5d) (cddar . G4e5c) (cdadr . G4e5b) (cdaar . G4e5a) (caddr . G4e59) (cadar . G4e58) (caadr . G4e57) (caaar . G4e56) (cddr . G4e55) (cdar . G4e54) (cadr . G4e53) (caar . G4e52) (cdr . G4e51) (car . G4e50) (boolean? . G4e4f) (boolean=? . G4e4e) (atan . G4e4d) (assertion-violation . G4e4c) (asin . G4e4b) (apply . G4e4a) (append . G4e49) (angle . G4e48) (acos . G4e47) (abs . G4e46) (/ . G4e45) (* . G4e44) (- . G4e43) (+ . G4e42) (>= . G4e41) (> . G4e40) (= . G4e3f) (<= . G4e3e) (< . G4e3d) (unquote-splicing . G4e09) (unquote . G4e08) (_ . G4e07) (else . G4e06) (=> . G4e05) (... . G4e04) (assert . G4e03) (cond . G4dfe) (let* . G4dfd) (let . G4dfc) (let*-values . G4dfb) (let-values . G4dfa) (identifier-syntax . G4df9) (quasiquote . G4df6) (syntax-rules . G4df5) (case . G4df0) (or . G4dec) (and . G4deb) (if . G4dea) (letrec* . G4de9) (letrec . G4de8) (lambda . G4de5) (quote . G4de2) (letrec-syntax . G4de0) (let-syntax . G4ddf) (set! . G4dde) (begin . G4ddc) (define-syntax . G4dda) (define . G4dd9)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50c8 '(rnrs lists) '(6) '() '() '() '((remove . G4fb4) (remv . G4fb3) (remp . G4fb2) (remq . G4fb1) (partition . G4fb0) (memv . G4faf) (memq . G4fae) (memp . G4fad) (member . G4fac) (exists . G4fab) (for-all . G4faa) (fold-right . G4fa9) (fold-left . G4fa8) (find . G4fa7) (filter . G4fa6) (cons* . G4fa5) (assv . G4fa4) (assq . G4fa3) (assp . G4fa2) (assoc . G4fa1)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50c9 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G500f) (call-with-input-file . G500e) (write-char . G500d) (write . G500c) (with-output-to-file . G500b) (with-input-from-file . G500a) (read-char . G5009) (read . G5008) (peek-char . G5007) (open-output-file . G5006) (open-input-file . G5005) (newline . G5004) (display . G5003) (close-output-port . G5002) (close-input-port . G5001) (eof-object? . G5000) (eof-object . G4fff) (current-error-port . G4ffe) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (make-i/o-write-error . G4b0b) (make-i/o-read-error . G4af6) (make-i/o-port-error . G4ba9) (make-i/o-invalid-position-error . G4b21) (make-i/o-filename-error . G4b3b) (make-i/o-file-protection-error . G4b54) (make-i/o-file-is-read-only-error . G4b69) (make-i/o-file-does-not-exist-error . G4b93) (make-i/o-file-already-exists-error . G4b7e) (make-i/o-error . G4ae1) (i/o-write-error? . G4b0d) (i/o-read-error? . G4af8) (i/o-port-error? . G4bad) (i/o-invalid-position-error? . G4b25) (i/o-filename-error? . G4b3f) (i/o-file-protection-error? . G4b56) (i/o-file-is-read-only-error? . G4b6b) (i/o-file-does-not-exist-error? . G4b95) (i/o-file-already-exists-error? . G4b80) (i/o-error? . G4ae3) (i/o-error-position . G4b27) (i/o-error-port . G4baf) (i/o-error-filename . G4b41) (&i/o-port . G4e36) (&i/o-file-does-not-exist . G4e35) (&i/o-file-already-exists . G4e34) (&i/o-file-is-read-only . G4e33) (&i/o-file-protection . G4e32) (&i/o-filename . G4e31) (&i/o-invalid-position . G4e30) (&i/o-write . G4e2f) (&i/o-read . G4e2e) (&i/o . G4e2d)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50ca '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fd0) (utf32->string . G4f85) (utf16->string . G4f84) (utf8->string . G4f83) (uint-list->bytevector . G4f82) (u8-list->bytevector . G4f81) (string->utf8 . G4f80) (string->utf32 . G4f7f) (string->utf16 . G4f7e) (sint-list->bytevector . G4f7d) (native-endianness . G4f7c) (bytevector? . G4f7b) (bytevector=? . G4f7a) (bytevector-uint-set! . G4f79) (bytevector-uint-ref . G4f78) (bytevector-u8-set! . G4f77) (bytevector-u8-ref . G4f76) (bytevector-u64-set! . G4f75) (bytevector-u64-ref . G4f74) (bytevector-u64-native-set! . G4f73) (bytevector-u64-native-ref . G4f72) (bytevector-u32-set! . G4f71) (bytevector-u32-ref . G4f70) (bytevector-u32-native-set! . G4f6f) (bytevector-u32-native-ref . G4f6e) (bytevector-u16-set! . G4f6d) (bytevector-u16-ref . G4f6c) (bytevector-u16-native-set! . G4f6b) (bytevector-u16-native-ref . G4f6a) (bytevector-sint-set! . G4f69) (bytevector-sint-ref . G4f68) (bytevector-s8-set! . G4f67) (bytevector-s8-ref . G4f66) (bytevector-s64-set! . G4f65) (bytevector-s64-ref . G4f64) (bytevector-s64-native-set! . G4f63) (bytevector-s64-native-ref . G4f62) (bytevector-s32-set! . G4f61) (bytevector-s32-ref . G4f60) (bytevector-s32-native-set! . G4f5f) (bytevector-s32-native-ref . G4f5e) (bytevector-s16-set! . G4f5d) (bytevector-s16-ref . G4f5c) (bytevector-s16-native-set! . G4f5b) (bytevector-s16-native-ref . G4f5a) (bytevector-length . G4f59) (bytevector-ieee-single-ref . G4f58) (bytevector-ieee-single-set! . G4f57) (bytevector-ieee-single-native-set! . G4f56) (bytevector-ieee-single-native-ref . G4f55) (bytevector-ieee-double-set! . G4f54) (bytevector-ieee-double-ref . G4f53) (bytevector-ieee-double-native-set! . G4f52) (bytevector-ieee-double-native-ref . G4f51) (bytevector-fill! . G4f50) (bytevector-copy! . G4f4f) (bytevector-copy . G4f4e) (bytevector->uint-list . G4f4d) (bytevector->u8-list . G4f4c) (bytevector->sint-list . G4f4b) (endianness . G4e02)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50cb '(rnrs unicode) '(6) '() '() '() '((string-upcase . G5057) (string-titlecase . G5056) (string-normalize-nfkd . G5055) (string-normalize-nfkc . G5054) (string-normalize-nfd . G5053) (string-normalize-nfc . G5052) (string-foldcase . G5051) (string-downcase . G5050) (string-ci>? . G504f) (string-ci>=? . G504e) (string-ci=? . G504d) (string-ci<? . G504c) (string-ci<=? . G504b) (char-whitespace? . G504a) (char-upper-case? . G5049) (char-title-case? . G5048) (char-numeric? . G5047) (char-lower-case? . G5046) (char-general-category . G5045) (char-upcase . G5044) (char-titlecase . G5043) (char-foldcase . G5042) (char-downcase . G5041) (char-ci>? . G5040) (char-ci>=? . G503f) (char-ci=? . G503e) (char-ci<? . G503d) (char-ci<=? . G503c) (char-alphabetic? . G503b)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50cc '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f9a) (raise-continuable . G4f99) (raise . G4f98) (guard . G4e0e) (else . G4e06) (=> . G4e05)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50cd '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4eef) (bitwise-reverse-bit-field . G4eee) (bitwise-length . G4eed) (bitwise-if . G4eec) (bitwise-first-bit-set . G4eeb) (bitwise-copy-bit-field . G4eea) (bitwise-copy-bit . G4ee9) (bitwise-bit-set? . G4ee8) (bitwise-bit-field . G4ee7) (bitwise-bit-count . G4ee6) (bitwise-xor . G4ee5) (bitwise-ior . G4ee4) (bitwise-and . G4ee3) (bitwise-not . G4ee2) (bitwise-arithmetic-shift-right . G4ee1) (bitwise-arithmetic-shift-left . G4ee0) (bitwise-arithmetic-shift . G4edf)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50ce '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f1c) (fxxor . G4f1b) (fxrotate-bit-field . G4f1a) (fxreverse-bit-field . G4f19) (fxpositive? . G4f18) (fxodd? . G4f17) (fxnot . G4f16) (fxnegative? . G4f15) (fxmod0 . G4f14) (fxmod . G4f13) (fxmin . G4f12) (fxmax . G4f11) (fxlength . G4f10) (fxior . G4f0f) (fxif . G4f0e) (fxfirst-bit-set . G4f0d) (fxeven? . G4f0c) (fxdiv0-and-mod0 . G4f0b) (fxdiv0 . G4f0a) (fxdiv-and-mod . G4f09) (fxdiv . G4f08) (fxcopy-bit-field . G4f07) (fxcopy-bit . G4f06) (fxbit-set? . G4f05) (fxbit-field . G4f04) (fxbit-count . G4f03) (fxarithmetic-shift-right . G4f02) (fxarithmetic-shift-left . G4f01) (fxarithmetic-shift . G4f00) (fxand . G4eff) (fx>? . G4efe) (fx>=? . G4efd) (fx=? . G4efc) (fx<? . G4efb) (fx<=? . G4efa) (fx-/carry . G4ef9) (fx- . G4ef8) (fx+/carry . G4ef7) (fx+ . G4ef6) (fx*/carry . G4ef5) (fx* . G4ef4) (greatest-fixnum . G4ef3) (least-fixnum . G4ef2) (fixnum-width . G4ef1) (fixnum? . G4ef0)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50cf '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4c08) (no-infinities-violation? . G4bf3) (make-no-nans-violation . G4c06) (make-no-infinities-violation . G4bf1) (real->flonum . G4f4a) (flzero? . G4f49) (fltruncate . G4f48) (fltan . G4f47) (flsqrt . G4f46) (flsin . G4f45) (flround . G4f44) (flpositive? . G4f43) (flonum? . G4f42) (flodd? . G4f41) (flnumerator . G4f40) (flnegative? . G4f3f) (flnan? . G4f3e) (flmod0 . G4f3d) (flmod . G4f3c) (flmin . G4f3b) (flmax . G4f3a) (fllog . G4f39) (flinteger? . G4f38) (flinfinite? . G4f37) (flfloor . G4f36) (flfinite? . G4f35) (flexpt . G4f34) (flexp . G4f33) (fleven? . G4f32) (fldiv0-and-mod0 . G4f31) (fldiv0 . G4f30) (fldiv-and-mod . G4f2f) (fldiv . G4f2e) (fldenominator . G4f2d) (flcos . G4f2c) (flceiling . G4f2b) (flatan . G4f2a) (flasin . G4f29) (flacos . G4f28) (flabs . G4f27) (fl>? . G4f26) (fl>=? . G4f25) (fl=? . G4f24) (fl<? . G4f23) (fl<=? . G4f22) (fl/ . G4f21) (fl- . G4f20) (fl+ . G4f1f) (fl* . G4f1e) (fixnum->flonum . G4f1d) (&no-nans . G4e3a) (&no-infinities . G4e39)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50d0 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G5024) (string-ci-hash . G5023) (string-hash . G5022) (equal-hash . G5021) (hashtable-equivalence-function . G5020) (make-hashtable . G501f) (hashtable-hash-function . G501e) (make-eqv-hashtable . G501d) (make-eq-hashtable . G501c) (hashtable? . G501b) (hashtable-update! . G501a) (hashtable-size . G5019) (hashtable-set! . G5018) (hashtable-ref . G5017) (hashtable-mutable? . G5016) (hashtable-keys . G5015) (hashtable-entries . G5014) (hashtable-delete! . G5013) (hashtable-copy . G5012) (hashtable-contains? . G5011) (hashtable-clear! . G5010)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50d1 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G5000) (eof-object . G4fff) (current-error-port . G4ffe) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (utf-8-codec . G4ff9) (utf-16-codec . G4ff8) (transcoder-error-handling-mode . G4ff7) (transcoder-eol-style . G4ff6) (transcoder-codec . G4ff5) (transcoded-port . G4ff4) (textual-port? . G4ff3) (string->bytevector . G4ff2) (standard-output-port . G4ff1) (standard-input-port . G4ff0) (standard-error-port . G4fef) (set-port-position! . G4fee) (put-u8 . G4fed) (put-string . G4fec) (put-datum . G4feb) (put-char . G4fea) (put-bytevector . G4fe9) (port? . G4fe8) (port-transcoder . G4fe7) (port-position . G4fe6) (port-has-set-port-position!? . G4fe5) (port-has-port-position? . G4fe4) (port-eof? . G4fe3) (output-port-buffer-mode . G4fe2) (open-string-output-port . G4fe1) (open-string-input-port . G4fe0) (open-file-output-port . G4fdf) (open-file-input/output-port . G4fde) (open-file-input-port . G4fdd) (open-bytevector-output-port . G4fdc) (open-bytevector-input-port . G4fdb) (native-transcoder . G4fda) (native-eol-style . G4fd9) (make-transcoder . G4fd8) (latin-1-codec . G4fd7) (make-i/o-write-error . G4b0b) (make-i/o-read-error . G4af6) (make-i/o-port-error . G4ba9) (make-i/o-invalid-position-error . G4b21) (make-i/o-filename-error . G4b3b) (make-i/o-file-protection-error . G4b54) (make-i/o-file-is-read-only-error . G4b69) (make-i/o-file-does-not-exist-error . G4b93) (make-i/o-file-already-exists-error . G4b7e) (make-i/o-error . G4ae1) (make-i/o-encoding-error . G4bd8) (make-i/o-decoding-error . G4bc2) (make-custom-textual-output-port . G4fd6) (make-custom-textual-input/output-port . G4fd5) (make-custom-textual-input-port . G4fd4) (make-custom-binary-output-port . G4fd3) (make-custom-binary-input/output-port . G4fd2) (make-custom-binary-input-port . G4fd1) (lookahead-u8 . G4fcf) (lookahead-char . G4fce) (i/o-write-error? . G4b0d) (i/o-read-error? . G4af8) (i/o-port-error? . G4bad) (i/o-invalid-position-error? . G4b25) (i/o-filename-error? . G4b3f) (i/o-file-protection-error? . G4b56) (i/o-file-is-read-only-error? . G4b6b) (i/o-file-does-not-exist-error? . G4b95) (i/o-file-already-exists-error? . G4b80) (i/o-error? . G4ae3) (i/o-error-position . G4b27) (i/o-error-port . G4baf) (i/o-error-filename . G4b41) (i/o-encoding-error? . G4bdc) (i/o-encoding-error-char . G4bde) (i/o-decoding-error? . G4bc4) (get-u8 . G4fcd) (get-string-n! . G4fcc) (get-string-n . G4fcb) (get-string-all . G4fca) (get-line . G4fc9) (get-datum . G4fc8) (get-char . G4fc7) (get-bytevector-some . G4fc6) (get-bytevector-n! . G4fc5) (get-bytevector-n . G4fc4) (get-bytevector-all . G4fc3) (flush-output-port . G4fc2) (close-port . G4fc1) (call-with-string-output-port . G4fa0) (call-with-port . G4f9f) (call-with-bytevector-output-port . G4f9e) (bytevector->string . G4f9d) (buffer-mode? . G4f9c) (binary-port? . G4f9b) (&i/o-encoding . G4e38) (&i/o-decoding . G4e37) (&i/o-port . G4e36) (&i/o-file-does-not-exist . G4e35) (&i/o-file-already-exists . G4e34) (&i/o-file-is-read-only . G4e33) (&i/o-file-protection . G4e32) (&i/o-filename . G4e31) (&i/o-invalid-position . G4e30) (&i/o-write . G4e2f) (&i/o-read . G4e2e) (&i/o . G4e2d) (error-handling-mode . G4e12) (file-options . G4e11) (buffer-mode . G4e10) (eol-style . G4e0f)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50d2 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f97) (enum-set=? . G4f96) (enum-set-universe . G4f95) (enum-set-union . G4f94) (enum-set-subset? . G4f93) (enum-set-projection . G4f92) (enum-set-member? . G4f91) (enum-set-intersection . G4f90) (enum-set-indexer . G4f8f) (enum-set-difference . G4f8e) (enum-set-constructor . G4f8d) (enum-set-complement . G4f8c) (enum-set->list . G4f8b) (define-enumeration . G4e1d)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50d3 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a59) (warning? . G49d3) (violation? . G4a12) (undefined-violation? . G4ace) (syntax-violation? . G4ab5) (syntax-violation-subform . G4ab9) (syntax-violation-form . G4ab7) (syntax-violation . G304a) (simple-conditions . G4f8a) (serious-condition? . G49e8) (non-continuable-violation? . G4a70) (message-condition? . G49bc) (make-who-condition . G4a55) (make-warning . G49d1) (make-violation . G4a10) (make-undefined-violation . G4acc) (make-syntax-violation . G4aaf) (make-serious-condition . G49e6) (make-non-continuable-violation . G4a6e) (make-message-condition . G49b8) (make-lexical-violation . G4a98) (make-irritants-condition . G4a3b) (make-implementation-restriction-violation . G4a83) (make-error . G49fb) (make-assertion-violation . G4a25) (lexical-violation? . G4a9a) (irritants-condition? . G4a3f) (implementation-restriction-violation? . G4a85) (error? . G49fd) (condition-who . G4a5b) (condition-predicate . G4f89) (condition-message . G49be) (condition-irritants . G4a41) (condition-accessor . G4f88) (condition . G4f87) (assertion-violation? . G4a27) (condition? . G4f86) (&undefined . G4e2c) (&syntax . G4e2b) (&lexical . G4e2a) (&implementation-restriction . G4e29) (&non-continuable . G4e28) (&who . G4e27) (&irritants . G4e26) (&assertion . G4e25) (&violation . G4e24) (&error . G4e23) (&serious . G4e22) (&warning . G4e21) (&message . G4e20) (&condition . G4e1f) (define-condition-type . G4e1e)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50d4 '(rnrs records inspection) '(6) '() '() '() '((record? . G5033) (record-type-uid . G5032) (record-type-sealed? . G5031) (record-type-parent . G5030) (record-type-opaque? . G502f) (record-type-name . G502e) (record-type-generative? . G502d) (record-type-field-names . G502c) (record-rtd . G502b) (record-field-mutable? . G502a)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50d5 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G503a) (record-predicate . G5039) (record-mutator . G5038) (record-constructor . G5037) (record-accessor . G5036) (make-record-type-descriptor . G5035) (make-record-constructor-descriptor . G5034)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50d6 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e1c) (parent-rtd . G4e1b) (nongenerative . G4e1a) (opaque . G4e19) (sealed . G4e18) (protocol . G4e17) (parent . G4e16) (immutable . G4e15) (mutable . G4e14) (fields . G4e13) (record-constructor-descriptor . G4df2) (record-type-descriptor . G4df1)) '() values values '#f '#f '#t '#f) (G2b76@G2a1b@install-library 'G50d7 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4c0c) (&no-nans-rtd . G4c0a) (&no-infinities-rcd . G4bf7) (&no-infinities-rtd . G4bf5) (&i/o-encoding-rcd . G4be2) (&i/o-encoding-rtd . G4be0) (&i/o-decoding-rcd . G4bc8) (&i/o-decoding-rtd . G4bc6) (&i/o-port-rcd . G4bb3) (&i/o-port-rtd . G4bb1) (&i/o-file-does-not-exist-rcd . G4b99) (&i/o-file-does-not-exist-rtd . G4b97) (&i/o-file-already-exists-rcd . G4b84) (&i/o-file-already-exists-rtd . G4b82) (&i/o-file-is-read-only-rcd . G4b6f) (&i/o-file-is-read-only-rtd . G4b6d) (&i/o-file-protection-rcd . G4b5a) (&i/o-file-protection-rtd . G4b58) (&i/o-filename-rcd . G4b45) (&i/o-filename-rtd . G4b43) (&i/o-invalid-position-rcd . G4b2b) (&i/o-invalid-position-rtd . G4b29) (&i/o-write-rcd . G4b11) (&i/o-write-rtd . G4b0f) (&i/o-read-rcd . G4afc) (&i/o-read-rtd . G4afa) (&i/o-rcd . G4ae7) (&i/o-rtd . G4ae5) (&undefined-rcd . G4ad2) (&undefined-rtd . G4ad0) (&syntax-rcd . G4abd) (&syntax-rtd . G4abb) (&lexical-rcd . G4a9e) (&lexical-rtd . G4a9c) (&implementation-restriction-rcd . G4a89) (&implementation-restriction-rtd . G4a87) (&non-continuable-rcd . G4a74) (&non-continuable-rtd . G4a72) (&who-rcd . G4a5f) (&who-rtd . G4a5d) (&irritants-rcd . G4a45) (&irritants-rtd . G4a43) (&assertion-rcd . G4a2b) (&assertion-rtd . G4a29) (&violation-rcd . G4a16) (&violation-rtd . G4a14) (&error-rcd . G4a01) (&error-rtd . G49ff) (&serious-rcd . G49ec) (&serious-rtd . G49ea) (&warning-rcd . G49d7) (&warning-rtd . G49d5) (&message-rcd . G49c2) (&message-rtd . G49c0) (&condition-rcd . G4965) (&condition-rtd . G4963) (syntax-error . G3046) (syntax-dispatch . G2f5f) (pretty-print . G50b7) (eval-core . G50b6) (set-symbol-value! . G50b5) (symbol-value . G50b4) (gensym . G50b3) (void . G50b2) (load . G4d13) (interaction-environment . G3056) (char-ready? . G50b1) (regexp? . G50b0) (read-line . G50af) (dotted-list? . G50ae) (circular-list? . G50ad) (proper-list? . G50ac) (circular-list . G50ab) (last . G50aa) (last-pair . G50a9) (not-pair? . G50a8) (split-at! . G50a7) (split-at . G50a6) (list= . G50a5) (list-copy . G50a4) (list-tabulate . G50a3) (make-list . G50a2) (xcons . G50a1) (tenth . G50a0) (ninth . G509f) (eighth . G509e) (seventh . G509d) (sixth . G509c) (fifth . G509b) (drop-right! . G509a) (drop-right . G5099) (take-right . G5098) (take! . G5097) (drop . G5096) (take . G5095) (car+cdr . G5094) (third . G5093) (second . G5092) (first . G5091) (iota . G5090) (every . G508f) (ungensym . G508e) (alist->eq-hash-table . G508d) (assoc-ref . G508c) (alist-cons . G508b) (append-map . G508a) (print . G5089) (format . G5088) (standard-library-path . G5087) (file-newer? . G5086) (stat-mtime . G5085) (write-to-file . G5084) (file->list . G5083) (file->string . G5082) (digit->integer . G5081) (call-with-string-input-port . G5080) (call-with-string-io . G507f) (string-split . G507e) (bytevector-for-each . G507d) (string->regexp . G507c) (rxmatch . G507b) (regexp-replace-all . G507a) (hashtable-for-each . G5079) (call-process . G5078) (local-tz-offset . G5077) (microseconds . G5076) (readdir . G5075) (set-current-directory! . G5074) (expand-path . G5073) (current-directory . G5072) (%spawn . G5071) (%waitpid . G5070) (%ffi-pointer-ref . G506f) (%ffi-pointer->string . G506e) (%ffi-call->void* . G506d) (%ffi-call->void . G506c) (%ffi-call->int . G506b) (%ffi-lookup . G506a) (%ffi-open . G5069) (%fork . G5068) (%pipe . G5067) (get-environment-variables . G5066) (get-environment-variable . G5065) (get-timeofday . G5064) (get-command-line . G5063) (sys-display . G5062) (source-info . G5061) (make-compiler-instruction . G5060) (make-instruction . G505f) (set-source-info! . G505e) (bignum? . G505d) (make-complex . G505c) (fast-equal? . G505b) (fasl-read . G505a) (fasl-write . G5059) (receive . G5058) (make-parameter . G2832) (string-upcase . G5057) (string-titlecase . G5056) (string-normalize-nfkd . G5055) (string-normalize-nfkc . G5054) (string-normalize-nfd . G5053) (string-normalize-nfc . G5052) (string-foldcase . G5051) (string-downcase . G5050) (string-ci>? . G504f) (string-ci>=? . G504e) (string-ci=? . G504d) (string-ci<? . G504c) (string-ci<=? . G504b) (char-whitespace? . G504a) (char-upper-case? . G5049) (char-title-case? . G5048) (char-numeric? . G5047) (char-lower-case? . G5046) (char-general-category . G5045) (char-upcase . G5044) (char-titlecase . G5043) (char-foldcase . G5042) (char-downcase . G5041) (char-ci>? . G5040) (char-ci>=? . G503f) (char-ci=? . G503e) (char-ci<? . G503d) (char-ci<=? . G503c) (char-alphabetic? . G503b) (make-variable-transformer . G2d9a) (identifier? . G304c) (generate-temporaries . G3038) (free-identifier=? . G303a) (syntax->datum . G3050) (datum->syntax . G304e) (bound-identifier=? . G303c) (record-type-descriptor? . G503a) (record-predicate . G5039) (record-mutator . G5038) (record-constructor . G5037) (record-accessor . G5036) (make-record-type-descriptor . G5035) (make-record-constructor-descriptor . G5034) (record? . G5033) (record-type-uid . G5032) (record-type-sealed? . G5031) (record-type-parent . G5030) (record-type-opaque? . G502f) (record-type-name . G502e) (record-type-generative? . G502d) (record-type-field-names . G502c) (record-rtd . G502b) (record-field-mutable? . G502a) (delete-file . G5029) (file-exists? . G5028) (vector-sort! . G5027) (vector-sort . G5026) (list-sort . G5025) (symbol-hash . G5024) (string-ci-hash . G5023) (string-hash . G5022) (equal-hash . G5021) (hashtable-equivalence-function . G5020) (make-hashtable . G501f) (hashtable-hash-function . G501e) (make-eqv-hashtable . G501d) (make-eq-hashtable . G501c) (hashtable? . G501b) (hashtable-update! . G501a) (hashtable-size . G5019) (hashtable-set! . G5018) (hashtable-ref . G5017) (hashtable-mutable? . G5016) (hashtable-keys . G5015) (hashtable-entries . G5014) (hashtable-delete! . G5013) (hashtable-copy . G5012) (hashtable-contains? . G5011) (hashtable-clear! . G5010) (call-with-output-file . G500f) (call-with-input-file . G500e) (write-char . G500d) (write . G500c) (with-output-to-file . G500b) (with-input-from-file . G500a) (read-char . G5009) (read . G5008) (peek-char . G5007) (open-output-file . G5006) (open-input-file . G5005) (newline . G5004) (display . G5003) (close-output-port . G5002) (close-input-port . G5001) (eof-object? . G5000) (eof-object . G4fff) (current-error-port . G4ffe) (current-output-port . G4ffd) (current-input-port . G4ffc) (output-port? . G4ffb) (input-port? . G4ffa) (utf-8-codec . G4ff9) (utf-16-codec . G4ff8) (transcoder-error-handling-mode . G4ff7) (transcoder-eol-style . G4ff6) (transcoder-codec . G4ff5) (transcoded-port . G4ff4) (textual-port? . G4ff3) (string->bytevector . G4ff2) (standard-output-port . G4ff1) (standard-input-port . G4ff0) (standard-error-port . G4fef) (set-port-position! . G4fee) (put-u8 . G4fed) (put-string . G4fec) (put-datum . G4feb) (put-char . G4fea) (put-bytevector . G4fe9) (port? . G4fe8) (port-transcoder . G4fe7) (port-position . G4fe6) (port-has-set-port-position!? . G4fe5) (port-has-port-position? . G4fe4) (port-eof? . G4fe3) (output-port-buffer-mode . G4fe2) (open-string-output-port . G4fe1) (open-string-input-port . G4fe0) (open-file-output-port . G4fdf) (open-file-input/output-port . G4fde) (open-file-input-port . G4fdd) (open-bytevector-output-port . G4fdc) (open-bytevector-input-port . G4fdb) (native-transcoder . G4fda) (native-eol-style . G4fd9) (make-transcoder . G4fd8) (latin-1-codec . G4fd7) (make-i/o-write-error . G4b0b) (make-i/o-read-error . G4af6) (make-i/o-port-error . G4ba9) (make-i/o-invalid-position-error . G4b21) (make-i/o-filename-error . G4b3b) (make-i/o-file-protection-error . G4b54) (make-i/o-file-is-read-only-error . G4b69) (make-i/o-file-does-not-exist-error . G4b93) (make-i/o-file-already-exists-error . G4b7e) (make-i/o-error . G4ae1) (make-i/o-encoding-error . G4bd8) (make-i/o-decoding-error . G4bc2) (make-custom-textual-output-port . G4fd6) (make-custom-textual-input/output-port . G4fd5) (make-custom-textual-input-port . G4fd4) (make-custom-binary-output-port . G4fd3) (make-custom-binary-input/output-port . G4fd2) (make-custom-binary-input-port . G4fd1) (make-bytevector . G4fd0) (lookahead-u8 . G4fcf) (lookahead-char . G4fce) (i/o-write-error? . G4b0d) (i/o-read-error? . G4af8) (i/o-port-error? . G4bad) (i/o-invalid-position-error? . G4b25) (i/o-filename-error? . G4b3f) (i/o-file-protection-error? . G4b56) (i/o-file-is-read-only-error? . G4b6b) (i/o-file-does-not-exist-error? . G4b95) (i/o-file-already-exists-error? . G4b80) (i/o-error? . G4ae3) (i/o-error-position . G4b27) (i/o-error-port . G4baf) (i/o-error-filename . G4b41) (i/o-encoding-error? . G4bdc) (i/o-encoding-error-char . G4bde) (i/o-decoding-error? . G4bc4) (get-u8 . G4fcd) (get-string-n! . G4fcc) (get-string-n . G4fcb) (get-string-all . G4fca) (get-line . G4fc9) (get-datum . G4fc8) (get-char . G4fc7) (get-bytevector-some . G4fc6) (get-bytevector-n! . G4fc5) (get-bytevector-n . G4fc4) (get-bytevector-all . G4fc3) (flush-output-port . G4fc2) (close-port . G4fc1) (scheme-report-environment . G3026) (quotient . G4fc0) (null-environment . G3024) (remainder . G4fbf) (modulo . G4fbe) (inexact->exact . G4fbd) (force . G4fbc) (exact->inexact . G4fbb) (make-promise . G4fba) (exit . G4fb9) (command-line . G4d0d) (string-fill! . G4fb8) (string-set! . G4fb7) (set-cdr! . G4fb6) (set-car! . G4fb5) (remove . G4fb4) (remv . G4fb3) (remp . G4fb2) (remq . G4fb1) (partition . G4fb0) (memv . G4faf) (memq . G4fae) (memp . G4fad) (member . G4fac) (exists . G4fab) (for-all . G4faa) (fold-right . G4fa9) (fold-left . G4fa8) (find . G4fa7) (filter . G4fa6) (cons* . G4fa5) (assv . G4fa4) (assq . G4fa3) (assp . G4fa2) (assoc . G4fa1) (call-with-string-output-port . G4fa0) (call-with-port . G4f9f) (call-with-bytevector-output-port . G4f9e) (bytevector->string . G4f9d) (buffer-mode? . G4f9c) (binary-port? . G4f9b) (with-exception-handler . G4f9a) (raise-continuable . G4f99) (raise . G4f98) (eval . G302a) (environment . G3022) (make-enumeration . G4f97) (enum-set=? . G4f96) (enum-set-universe . G4f95) (enum-set-union . G4f94) (enum-set-subset? . G4f93) (enum-set-projection . G4f92) (enum-set-member? . G4f91) (enum-set-intersection . G4f90) (enum-set-indexer . G4f8f) (enum-set-difference . G4f8e) (enum-set-constructor . G4f8d) (enum-set-complement . G4f8c) (enum-set->list . G4f8b) (who-condition? . G4a59) (warning? . G49d3) (violation? . G4a12) (undefined-violation? . G4ace) (syntax-violation? . G4ab5) (syntax-violation-subform . G4ab9) (syntax-violation-form . G4ab7) (syntax-violation . G304a) (simple-conditions . G4f8a) (serious-condition? . G49e8) (non-continuable-violation? . G4a70) (message-condition? . G49bc) (make-who-condition . G4a55) (make-warning . G49d1) (make-violation . G4a10) (make-undefined-violation . G4acc) (make-syntax-violation . G4aaf) (make-serious-condition . G49e6) (make-non-continuable-violation . G4a6e) (make-message-condition . G49b8) (make-lexical-violation . G4a98) (make-irritants-condition . G4a3b) (make-implementation-restriction-violation . G4a83) (make-error . G49fb) (make-assertion-violation . G4a25) (lexical-violation? . G4a9a) (irritants-condition? . G4a3f) (implementation-restriction-violation? . G4a85) (error? . G49fd) (condition-who . G4a5b) (condition-predicate . G4f89) (condition-message . G49be) (condition-irritants . G4a41) (condition-accessor . G4f88) (condition . G4f87) (assertion-violation? . G4a27) (condition? . G4f86) (utf32->string . G4f85) (utf16->string . G4f84) (utf8->string . G4f83) (uint-list->bytevector . G4f82) (u8-list->bytevector . G4f81) (string->utf8 . G4f80) (string->utf32 . G4f7f) (string->utf16 . G4f7e) (sint-list->bytevector . G4f7d) (native-endianness . G4f7c) (bytevector? . G4f7b) (bytevector=? . G4f7a) (bytevector-uint-set! . G4f79) (bytevector-uint-ref . G4f78) (bytevector-u8-set! . G4f77) (bytevector-u8-ref . G4f76) (bytevector-u64-set! . G4f75) (bytevector-u64-ref . G4f74) (bytevector-u64-native-set! . G4f73) (bytevector-u64-native-ref . G4f72) (bytevector-u32-set! . G4f71) (bytevector-u32-ref . G4f70) (bytevector-u32-native-set! . G4f6f) (bytevector-u32-native-ref . G4f6e) (bytevector-u16-set! . G4f6d) (bytevector-u16-ref . G4f6c) (bytevector-u16-native-set! . G4f6b) (bytevector-u16-native-ref . G4f6a) (bytevector-sint-set! . G4f69) (bytevector-sint-ref . G4f68) (bytevector-s8-set! . G4f67) (bytevector-s8-ref . G4f66) (bytevector-s64-set! . G4f65) (bytevector-s64-ref . G4f64) (bytevector-s64-native-set! . G4f63) (bytevector-s64-native-ref . G4f62) (bytevector-s32-set! . G4f61) (bytevector-s32-ref . G4f60) (bytevector-s32-native-set! . G4f5f) (bytevector-s32-native-ref . G4f5e) (bytevector-s16-set! . G4f5d) (bytevector-s16-ref . G4f5c) (bytevector-s16-native-set! . G4f5b) (bytevector-s16-native-ref . G4f5a) (bytevector-length . G4f59) (bytevector-ieee-single-ref . G4f58) (bytevector-ieee-single-set! . G4f57) (bytevector-ieee-single-native-set! . G4f56) (bytevector-ieee-single-native-ref . G4f55) (bytevector-ieee-double-set! . G4f54) (bytevector-ieee-double-ref . G4f53) (bytevector-ieee-double-native-set! . G4f52) (bytevector-ieee-double-native-ref . G4f51) (bytevector-fill! . G4f50) (bytevector-copy! . G4f4f) (bytevector-copy . G4f4e) (bytevector->uint-list . G4f4d) (bytevector->u8-list . G4f4c) (bytevector->sint-list . G4f4b) (no-nans-violation? . G4c08) (no-infinities-violation? . G4bf3) (make-no-nans-violation . G4c06) (make-no-infinities-violation . G4bf1) (real->flonum . G4f4a) (flzero? . G4f49) (fltruncate . G4f48) (fltan . G4f47) (flsqrt . G4f46) (flsin . G4f45) (flround . G4f44) (flpositive? . G4f43) (flonum? . G4f42) (flodd? . G4f41) (flnumerator . G4f40) (flnegative? . G4f3f) (flnan? . G4f3e) (flmod0 . G4f3d) (flmod . G4f3c) (flmin . G4f3b) (flmax . G4f3a) (fllog . G4f39) (flinteger? . G4f38) (flinfinite? . G4f37) (flfloor . G4f36) (flfinite? . G4f35) (flexpt . G4f34) (flexp . G4f33) (fleven? . G4f32) (fldiv0-and-mod0 . G4f31) (fldiv0 . G4f30) (fldiv-and-mod . G4f2f) (fldiv . G4f2e) (fldenominator . G4f2d) (flcos . G4f2c) (flceiling . G4f2b) (flatan . G4f2a) (flasin . G4f29) (flacos . G4f28) (flabs . G4f27) (fl>? . G4f26) (fl>=? . G4f25) (fl=? . G4f24) (fl<? . G4f23) (fl<=? . G4f22) (fl/ . G4f21) (fl- . G4f20) (fl+ . G4f1f) (fl* . G4f1e) (fixnum->flonum . G4f1d) (fxzero? . G4f1c) (fxxor . G4f1b) (fxrotate-bit-field . G4f1a) (fxreverse-bit-field . G4f19) (fxpositive? . G4f18) (fxodd? . G4f17) (fxnot . G4f16) (fxnegative? . G4f15) (fxmod0 . G4f14) (fxmod . G4f13) (fxmin . G4f12) (fxmax . G4f11) (fxlength . G4f10) (fxior . G4f0f) (fxif . G4f0e) (fxfirst-bit-set . G4f0d) (fxeven? . G4f0c) (fxdiv0-and-mod0 . G4f0b) (fxdiv0 . G4f0a) (fxdiv-and-mod . G4f09) (fxdiv . G4f08) (fxcopy-bit-field . G4f07) (fxcopy-bit . G4f06) (fxbit-set? . G4f05) (fxbit-field . G4f04) (fxbit-count . G4f03) (fxarithmetic-shift-right . G4f02) (fxarithmetic-shift-left . G4f01) (fxarithmetic-shift . G4f00) (fxand . G4eff) (fx>? . G4efe) (fx>=? . G4efd) (fx=? . G4efc) (fx<? . G4efb) (fx<=? . G4efa) (fx-/carry . G4ef9) (fx- . G4ef8) (fx+/carry . G4ef7) (fx+ . G4ef6) (fx*/carry . G4ef5) (fx* . G4ef4) (greatest-fixnum . G4ef3) (least-fixnum . G4ef2) (fixnum-width . G4ef1) (fixnum? . G4ef0) (bitwise-rotate-bit-field . G4eef) (bitwise-reverse-bit-field . G4eee) (bitwise-length . G4eed) (bitwise-if . G4eec) (bitwise-first-bit-set . G4eeb) (bitwise-copy-bit-field . G4eea) (bitwise-copy-bit . G4ee9) (bitwise-bit-set? . G4ee8) (bitwise-bit-field . G4ee7) (bitwise-bit-count . G4ee6) (bitwise-xor . G4ee5) (bitwise-ior . G4ee4) (bitwise-and . G4ee3) (bitwise-not . G4ee2) (bitwise-arithmetic-shift-right . G4ee1) (bitwise-arithmetic-shift-left . G4ee0) (bitwise-arithmetic-shift . G4edf) (zero? . G4ede) (vector? . G4edd) (vector-set! . G4edc) (vector-ref . G4edb) (vector-map . G4eda) (vector-length . G4ed9) (vector-for-each . G4ed8) (vector-fill! . G4ed7) (vector->list . G4ed6) (vector . G4ed5) (values . G4ed4) (truncate . G4ed3) (tan . G4ed2) (symbol? . G4ed1) (symbol=? . G4ed0) (symbol->string . G4ecf) (substring . G4ece) (string? . G4ecd) (string>? . G4ecc) (string>=? . G4ecb) (string=? . G4eca) (string<? . G4ec9) (string<=? . G4ec8) (string-ref . G4ec7) (string-length . G4ec6) (string-for-each . G4ec5) (string-copy . G4ec4) (string-append . G4ec3) (string->symbol . G4ec2) (string->number . G4ec1) (string->list . G4ec0) (string . G4ebf) (sqrt . G4ebe) (sin . G4ebd) (round . G4ebc) (reverse . G4ebb) (real? . G4eba) (real-valued? . G4eb9) (real-part . G4eb8) (rationalize . G4eb7) (rational? . G4eb6) (rational-valued? . G4eb5) (procedure? . G4eb4) (positive? . G4eb3) (pair? . G4eb2) (odd? . G4eb1) (numerator . G4eb0) (number? . G4eaf) (number->string . G4eae) (null? . G4ead) (not . G4eac) (negative? . G4eab) (nan? . G4eaa) (min . G4ea9) (max . G4ea8) (map . G4ea7) (make-vector . G4ea6) (make-string . G4ea5) (make-rectangular . G4ea4) (make-polar . G4ea3) (magnitude . G4ea2) (log . G4ea1) (list? . G4ea0) (list-tail . G4e9f) (list-ref . G4e9e) (list->vector . G4e9d) (list->string . G4e9c) (list . G4e9b) (length . G4e9a) (lcm . G4e99) (integer? . G4e98) (integer-valued? . G4e97) (integer->char . G4e96) (infinite? . G4e95) (inexact? . G4e94) (inexact . G4e93) (imag-part . G4e92) (gcd . G4e91) (for-each . G4e90) (floor . G4e8f) (finite? . G4e8e) (expt . G4e8d) (exp . G4e8c) (exact? . G4e8b) (exact-integer-sqrt . G4e8a) (exact . G4e89) (even? . G4e88) (error . G4e87) (eqv? . G4e86) (equal? . G4e85) (eq? . G4e84) (dynamic-wind . G4e83) (div0-and-mod0 . G4e82) (mod0 . G4e81) (div0 . G4e80) (div-and-mod . G4e7f) (mod . G4e7e) (div . G4e7d) (denominator . G4e7c) (cos . G4e7b) (cons . G4e7a) (complex? . G4e79) (char? . G4e78) (char>? . G4e77) (char>=? . G4e76) (char=? . G4e75) (char<? . G4e74) (char<=? . G4e73) (char->integer . G4e72) (ceiling . G4e71) (call-with-values . G4e70) (call/cc . G4e6f) (call-with-current-continuation . G4e6e) (cddddr . G4e6d) (cdddar . G4e6c) (cddadr . G4e6b) (cddaar . G4e6a) (cdaddr . G4e69) (cdadar . G4e68) (cdaadr . G4e67) (cdaaar . G4e66) (cadddr . G4e65) (caddar . G4e64) (cadadr . G4e63) (cadaar . G4e62) (caaddr . G4e61) (caadar . G4e60) (caaadr . G4e5f) (caaaar . G4e5e) (cdddr . G4e5d) (cddar . G4e5c) (cdadr . G4e5b) (cdaar . G4e5a) (caddr . G4e59) (cadar . G4e58) (caadr . G4e57) (caaar . G4e56) (cddr . G4e55) (cdar . G4e54) (cadr . G4e53) (caar . G4e52) (cdr . G4e51) (car . G4e50) (boolean? . G4e4f) (boolean=? . G4e4e) (atan . G4e4d) (assertion-violation . G4e4c) (asin . G4e4b) (apply . G4e4a) (append . G4e49) (angle . G4e48) (acos . G4e47) (abs . G4e46) (/ . G4e45) (* . G4e44) (- . G4e43) (+ . G4e42) (>= . G4e41) (> . G4e40) (= . G4e3f) (<= . G4e3e) (< . G4e3d) (library . G4e3c) (export . G4e3b) (&no-nans . G4e3a) (&no-infinities . G4e39) (&i/o-encoding . G4e38) (&i/o-decoding . G4e37) (&i/o-port . G4e36) (&i/o-file-does-not-exist . G4e35) (&i/o-file-already-exists . G4e34) (&i/o-file-is-read-only . G4e33) (&i/o-file-protection . G4e32) (&i/o-filename . G4e31) (&i/o-invalid-position . G4e30) (&i/o-write . G4e2f) (&i/o-read . G4e2e) (&i/o . G4e2d) (&undefined . G4e2c) (&syntax . G4e2b) (&lexical . G4e2a) (&implementation-restriction . G4e29) (&non-continuable . G4e28) (&who . G4e27) (&irritants . G4e26) (&assertion . G4e25) (&violation . G4e24) (&error . G4e23) (&serious . G4e22) (&warning . G4e21) (&message . G4e20) (&condition . G4e1f) (define-condition-type . G4e1e) (define-enumeration . G4e1d) (define-record-type . G4e1c) (parent-rtd . G4e1b) (nongenerative . G4e1a) (opaque . G4e19) (sealed . G4e18) (protocol . G4e17) (parent . G4e16) (immutable . G4e15) (mutable . G4e14) (fields . G4e13) (error-handling-mode . G4e12) (file-options . G4e11) (buffer-mode . G4e10) (eol-style . G4e0f) (guard . G4e0e) (trace-define . G4e0d) (trace-lambda . G4e0c) (unsyntax-splicing . G4e0b) (unsyntax . G4e0a) (unquote-splicing . G4e09) (unquote . G4e08) (_ . G4e07) (else . G4e06) (=> . G4e05) (... . G4e04) (assert . G4e03) (endianness . G4e02) (delay . G4e01) (time . G4e00) (do . G4dff) (cond . G4dfe) (let* . G4dfd) (let . G4dfc) (let*-values . G4dfb) (let-values . G4dfa) (identifier-syntax . G4df9) (with-syntax . G4df8) (quasisyntax . G4df7) (quasiquote . G4df6) (syntax-rules . G4df5) (include . G4df4) (define-struct . G4df3) (record-constructor-descriptor . G4df2) (record-type-descriptor . G4df1) (case . G4df0) (parameterize . G4def) (unless . G4dee) (when . G4ded) (or . G4dec) (and . G4deb) (if . G4dea) (letrec* . G4de9) (letrec . G4de8) (type-descriptor . G4de7) (case-lambda . G4de6) (lambda . G4de5) (syntax . G4de4) (syntax-case . G4de3) (quote . G4de2) (foreign-call . G4de1) (letrec-syntax . G4de0) (let-syntax . G4ddf) (set! . G4dde) (import . G4ddd) (begin . G4ddc) (module . G4ddb) (define-syntax . G4dda) (define . G4dd9)) '((G4c0c core-prim . &no-nans-rcd) (G4c0a core-prim . &no-nans-rtd) (G4bf7 core-prim . &no-infinities-rcd) (G4bf5 core-prim . &no-infinities-rtd) (G4be2 core-prim . &i/o-encoding-rcd) (G4be0 core-prim . &i/o-encoding-rtd) (G4bc8 core-prim . &i/o-decoding-rcd) (G4bc6 core-prim . &i/o-decoding-rtd) (G4bb3 core-prim . &i/o-port-rcd) (G4bb1 core-prim . &i/o-port-rtd) (G4b99 core-prim . &i/o-file-does-not-exist-rcd) (G4b97 core-prim . &i/o-file-does-not-exist-rtd) (G4b84 core-prim . &i/o-file-already-exists-rcd) (G4b82 core-prim . &i/o-file-already-exists-rtd) (G4b6f core-prim . &i/o-file-is-read-only-rcd) (G4b6d core-prim . &i/o-file-is-read-only-rtd) (G4b5a core-prim . &i/o-file-protection-rcd) (G4b58 core-prim . &i/o-file-protection-rtd) (G4b45 core-prim . &i/o-filename-rcd) (G4b43 core-prim . &i/o-filename-rtd) (G4b2b core-prim . &i/o-invalid-position-rcd) (G4b29 core-prim . &i/o-invalid-position-rtd) (G4b11 core-prim . &i/o-write-rcd) (G4b0f core-prim . &i/o-write-rtd) (G4afc core-prim . &i/o-read-rcd) (G4afa core-prim . &i/o-read-rtd) (G4ae7 core-prim . &i/o-rcd) (G4ae5 core-prim . &i/o-rtd) (G4ad2 core-prim . &undefined-rcd) (G4ad0 core-prim . &undefined-rtd) (G4abd core-prim . &syntax-rcd) (G4abb core-prim . &syntax-rtd) (G4a9e core-prim . &lexical-rcd) (G4a9c core-prim . &lexical-rtd) (G4a89 core-prim . &implementation-restriction-rcd) (G4a87 core-prim . &implementation-restriction-rtd) (G4a74 core-prim . &non-continuable-rcd) (G4a72 core-prim . &non-continuable-rtd) (G4a5f core-prim . &who-rcd) (G4a5d core-prim . &who-rtd) (G4a45 core-prim . &irritants-rcd) (G4a43 core-prim . &irritants-rtd) (G4a2b core-prim . &assertion-rcd) (G4a29 core-prim . &assertion-rtd) (G4a16 core-prim . &violation-rcd) (G4a14 core-prim . &violation-rtd) (G4a01 core-prim . &error-rcd) (G49ff core-prim . &error-rtd) (G49ec core-prim . &serious-rcd) (G49ea core-prim . &serious-rtd) (G49d7 core-prim . &warning-rcd) (G49d5 core-prim . &warning-rtd) (G49c2 core-prim . &message-rcd) (G49c0 core-prim . &message-rtd) (G4965 core-prim . &condition-rcd) (G4963 core-prim . &condition-rtd) (G3046 core-prim . syntax-error) (G2f5f core-prim . syntax-dispatch) (G50b7 core-prim . pretty-print) (G50b6 core-prim . eval-core) (G50b5 core-prim . set-symbol-value!) (G50b4 core-prim . symbol-value) (G50b3 core-prim . gensym) (G50b2 core-prim . void) (G4d13 core-prim . load) (G3056 core-prim . interaction-environment) (G50b1 core-prim . char-ready?) (G50b0 core-prim . regexp?) (G50af core-prim . read-line) (G50ae core-prim . dotted-list?) (G50ad core-prim . circular-list?) (G50ac core-prim . proper-list?) (G50ab core-prim . circular-list) (G50aa core-prim . last) (G50a9 core-prim . last-pair) (G50a8 core-prim . not-pair?) (G50a7 core-prim . split-at!) (G50a6 core-prim . split-at) (G50a5 core-prim . list=) (G50a4 core-prim . list-copy) (G50a3 core-prim . list-tabulate) (G50a2 core-prim . make-list) (G50a1 core-prim . xcons) (G50a0 core-prim . tenth) (G509f core-prim . ninth) (G509e core-prim . eighth) (G509d core-prim . seventh) (G509c core-prim . sixth) (G509b core-prim . fifth) (G509a core-prim . drop-right!) (G5099 core-prim . drop-right) (G5098 core-prim . take-right) (G5097 core-prim . take!) (G5096 core-prim . drop) (G5095 core-prim . take) (G5094 core-prim . car+cdr) (G5093 core-prim . third) (G5092 core-prim . second) (G5091 core-prim . first) (G5090 core-prim . iota) (G508f core-prim . every) (G508e core-prim . ungensym) (G508d core-prim . alist->eq-hash-table) (G508c core-prim . assoc-ref) (G508b core-prim . alist-cons) (G508a core-prim . append-map) (G5089 core-prim . print) (G5088 core-prim . format) (G5087 core-prim . standard-library-path) (G5086 core-prim . file-newer?) (G5085 core-prim . stat-mtime) (G5084 core-prim . write-to-file) (G5083 core-prim . file->list) (G5082 core-prim . file->string) (G5081 core-prim . digit->integer) (G5080 core-prim . call-with-string-input-port) (G507f core-prim . call-with-string-io) (G507e core-prim . string-split) (G507d core-prim . bytevector-for-each) (G507c core-prim . string->regexp) (G507b core-prim . rxmatch) (G507a core-prim . regexp-replace-all) (G5079 core-prim . hashtable-for-each) (G5078 core-prim . call-process) (G5077 core-prim . local-tz-offset) (G5076 core-prim . microseconds) (G5075 core-prim . readdir) (G5074 core-prim . set-current-directory!) (G5073 core-prim . expand-path) (G5072 core-prim . current-directory) (G5071 core-prim . %spawn) (G5070 core-prim . %waitpid) (G506f core-prim . %ffi-pointer-ref) (G506e core-prim . %ffi-pointer->string) (G506d core-prim . %ffi-call->void*) (G506c core-prim . %ffi-call->void) (G506b core-prim . %ffi-call->int) (G506a core-prim . %ffi-lookup) (G5069 core-prim . %ffi-open) (G5068 core-prim . %fork) (G5067 core-prim . %pipe) (G5066 core-prim . get-environment-variables) (G5065 core-prim . get-environment-variable) (G5064 core-prim . get-timeofday) (G5063 core-prim . get-command-line) (G5062 core-prim . sys-display) (G5061 core-prim . source-info) (G5060 core-prim . make-compiler-instruction) (G505f core-prim . make-instruction) (G505e core-prim . set-source-info!) (G505d core-prim . bignum?) (G505c core-prim . make-complex) (G505b core-prim . fast-equal?) (G505a core-prim . fasl-read) (G5059 core-prim . fasl-write) (G5058 core-prim . receive) (G2832 core-prim . make-parameter) (G5057 core-prim . string-upcase) (G5056 core-prim . string-titlecase) (G5055 core-prim . string-normalize-nfkd) (G5054 core-prim . string-normalize-nfkc) (G5053 core-prim . string-normalize-nfd) (G5052 core-prim . string-normalize-nfc) (G5051 core-prim . string-foldcase) (G5050 core-prim . string-downcase) (G504f core-prim . string-ci>?) (G504e core-prim . string-ci>=?) (G504d core-prim . string-ci=?) (G504c core-prim . string-ci<?) (G504b core-prim . string-ci<=?) (G504a core-prim . char-whitespace?) (G5049 core-prim . char-upper-case?) (G5048 core-prim . char-title-case?) (G5047 core-prim . char-numeric?) (G5046 core-prim . char-lower-case?) (G5045 core-prim . char-general-category) (G5044 core-prim . char-upcase) (G5043 core-prim . char-titlecase) (G5042 core-prim . char-foldcase) (G5041 core-prim . char-downcase) (G5040 core-prim . char-ci>?) (G503f core-prim . char-ci>=?) (G503e core-prim . char-ci=?) (G503d core-prim . char-ci<?) (G503c core-prim . char-ci<=?) (G503b core-prim . char-alphabetic?) (G2d9a core-prim . make-variable-transformer) (G304c core-prim . identifier?) (G3038 core-prim . generate-temporaries) (G303a core-prim . free-identifier=?) (G3050 core-prim . syntax->datum) (G304e core-prim . datum->syntax) (G303c core-prim . bound-identifier=?) (G503a core-prim . record-type-descriptor?) (G5039 core-prim . record-predicate) (G5038 core-prim . record-mutator) (G5037 core-prim . record-constructor) (G5036 core-prim . record-accessor) (G5035 core-prim . make-record-type-descriptor) (G5034 core-prim . make-record-constructor-descriptor) (G5033 core-prim . record?) (G5032 core-prim . record-type-uid) (G5031 core-prim . record-type-sealed?) (G5030 core-prim . record-type-parent) (G502f core-prim . record-type-opaque?) (G502e core-prim . record-type-name) (G502d core-prim . record-type-generative?) (G502c core-prim . record-type-field-names) (G502b core-prim . record-rtd) (G502a core-prim . record-field-mutable?) (G5029 core-prim . delete-file) (G5028 core-prim . file-exists?) (G5027 core-prim . vector-sort!) (G5026 core-prim . vector-sort) (G5025 core-prim . list-sort) (G5024 core-prim . symbol-hash) (G5023 core-prim . string-ci-hash) (G5022 core-prim . string-hash) (G5021 core-prim . equal-hash) (G5020 core-prim . hashtable-equivalence-function) (G501f core-prim . make-hashtable) (G501e core-prim . hashtable-hash-function) (G501d core-prim . make-eqv-hashtable) (G501c core-prim . make-eq-hashtable) (G501b core-prim . hashtable?) (G501a core-prim . hashtable-update!) (G5019 core-prim . hashtable-size) (G5018 core-prim . hashtable-set!) (G5017 core-prim . hashtable-ref) (G5016 core-prim . hashtable-mutable?) (G5015 core-prim . hashtable-keys) (G5014 core-prim . hashtable-entries) (G5013 core-prim . hashtable-delete!) (G5012 core-prim . hashtable-copy) (G5011 core-prim . hashtable-contains?) (G5010 core-prim . hashtable-clear!) (G500f core-prim . call-with-output-file) (G500e core-prim . call-with-input-file) (G500d core-prim . write-char) (G500c core-prim . write) (G500b core-prim . with-output-to-file) (G500a core-prim . with-input-from-file) (G5009 core-prim . read-char) (G5008 core-prim . read) (G5007 core-prim . peek-char) (G5006 core-prim . open-output-file) (G5005 core-prim . open-input-file) (G5004 core-prim . newline) (G5003 core-prim . display) (G5002 core-prim . close-output-port) (G5001 core-prim . close-input-port) (G5000 core-prim . eof-object?) (G4fff core-prim . eof-object) (G4ffe core-prim . current-error-port) (G4ffd core-prim . current-output-port) (G4ffc core-prim . current-input-port) (G4ffb core-prim . output-port?) (G4ffa core-prim . input-port?) (G4ff9 core-prim . utf-8-codec) (G4ff8 core-prim . utf-16-codec) (G4ff7 core-prim . transcoder-error-handling-mode) (G4ff6 core-prim . transcoder-eol-style) (G4ff5 core-prim . transcoder-codec) (G4ff4 core-prim . transcoded-port) (G4ff3 core-prim . textual-port?) (G4ff2 core-prim . string->bytevector) (G4ff1 core-prim . standard-output-port) (G4ff0 core-prim . standard-input-port) (G4fef core-prim . standard-error-port) (G4fee core-prim . set-port-position!) (G4fed core-prim . put-u8) (G4fec core-prim . put-string) (G4feb core-prim . put-datum) (G4fea core-prim . put-char) (G4fe9 core-prim . put-bytevector) (G4fe8 core-prim . port?) (G4fe7 core-prim . port-transcoder) (G4fe6 core-prim . port-position) (G4fe5 core-prim . port-has-set-port-position!?) (G4fe4 core-prim . port-has-port-position?) (G4fe3 core-prim . port-eof?) (G4fe2 core-prim . output-port-buffer-mode) (G4fe1 core-prim . open-string-output-port) (G4fe0 core-prim . open-string-input-port) (G4fdf core-prim . open-file-output-port) (G4fde core-prim . open-file-input/output-port) (G4fdd core-prim . open-file-input-port) (G4fdc core-prim . open-bytevector-output-port) (G4fdb core-prim . open-bytevector-input-port) (G4fda core-prim . native-transcoder) (G4fd9 core-prim . native-eol-style) (G4fd8 core-prim . make-transcoder) (G4fd7 core-prim . latin-1-codec) (G4b0b core-prim . make-i/o-write-error) (G4af6 core-prim . make-i/o-read-error) (G4ba9 core-prim . make-i/o-port-error) (G4b21 core-prim . make-i/o-invalid-position-error) (G4b3b core-prim . make-i/o-filename-error) (G4b54 core-prim . make-i/o-file-protection-error) (G4b69 core-prim . make-i/o-file-is-read-only-error) (G4b93 core-prim . make-i/o-file-does-not-exist-error) (G4b7e core-prim . make-i/o-file-already-exists-error) (G4ae1 core-prim . make-i/o-error) (G4bd8 core-prim . make-i/o-encoding-error) (G4bc2 core-prim . make-i/o-decoding-error) (G4fd6 core-prim . make-custom-textual-output-port) (G4fd5 core-prim . make-custom-textual-input/output-port) (G4fd4 core-prim . make-custom-textual-input-port) (G4fd3 core-prim . make-custom-binary-output-port) (G4fd2 core-prim . make-custom-binary-input/output-port) (G4fd1 core-prim . make-custom-binary-input-port) (G4fd0 core-prim . make-bytevector) (G4fcf core-prim . lookahead-u8) (G4fce core-prim . lookahead-char) (G4b0d core-prim . i/o-write-error?) (G4af8 core-prim . i/o-read-error?) (G4bad core-prim . i/o-port-error?) (G4b25 core-prim . i/o-invalid-position-error?) (G4b3f core-prim . i/o-filename-error?) (G4b56 core-prim . i/o-file-protection-error?) (G4b6b core-prim . i/o-file-is-read-only-error?) (G4b95 core-prim . i/o-file-does-not-exist-error?) (G4b80 core-prim . i/o-file-already-exists-error?) (G4ae3 core-prim . i/o-error?) (G4b27 core-prim . i/o-error-position) (G4baf core-prim . i/o-error-port) (G4b41 core-prim . i/o-error-filename) (G4bdc core-prim . i/o-encoding-error?) (G4bde core-prim . i/o-encoding-error-char) (G4bc4 core-prim . i/o-decoding-error?) (G4fcd core-prim . get-u8) (G4fcc core-prim . get-string-n!) (G4fcb core-prim . get-string-n) (G4fca core-prim . get-string-all) (G4fc9 core-prim . get-line) (G4fc8 core-prim . get-datum) (G4fc7 core-prim . get-char) (G4fc6 core-prim . get-bytevector-some) (G4fc5 core-prim . get-bytevector-n!) (G4fc4 core-prim . get-bytevector-n) (G4fc3 core-prim . get-bytevector-all) (G4fc2 core-prim . flush-output-port) (G4fc1 core-prim . close-port) (G3026 core-prim . scheme-report-environment) (G4fc0 core-prim . quotient) (G3024 core-prim . null-environment) (G4fbf core-prim . remainder) (G4fbe core-prim . modulo) (G4fbd core-prim . inexact->exact) (G4fbc core-prim . force) (G4fbb core-prim . exact->inexact) (G4fba core-prim . make-promise) (G4fb9 core-prim . exit) (G4d0d core-prim . command-line) (G4fb8 core-prim . string-fill!) (G4fb7 core-prim . string-set!) (G4fb6 core-prim . set-cdr!) (G4fb5 core-prim . set-car!) (G4fb4 core-prim . remove) (G4fb3 core-prim . remv) (G4fb2 core-prim . remp) (G4fb1 core-prim . remq) (G4fb0 core-prim . partition) (G4faf core-prim . memv) (G4fae core-prim . memq) (G4fad core-prim . memp) (G4fac core-prim . member) (G4fab core-prim . exists) (G4faa core-prim . for-all) (G4fa9 core-prim . fold-right) (G4fa8 core-prim . fold-left) (G4fa7 core-prim . find) (G4fa6 core-prim . filter) (G4fa5 core-prim . cons*) (G4fa4 core-prim . assv) (G4fa3 core-prim . assq) (G4fa2 core-prim . assp) (G4fa1 core-prim . assoc) (G4fa0 core-prim . call-with-string-output-port) (G4f9f core-prim . call-with-port) (G4f9e core-prim . call-with-bytevector-output-port) (G4f9d core-prim . bytevector->string) (G4f9c core-prim . buffer-mode?) (G4f9b core-prim . binary-port?) (G4f9a core-prim . with-exception-handler) (G4f99 core-prim . raise-continuable) (G4f98 core-prim . raise) (G302a core-prim . eval) (G3022 core-prim . environment) (G4f97 core-prim . make-enumeration) (G4f96 core-prim . enum-set=?) (G4f95 core-prim . enum-set-universe) (G4f94 core-prim . enum-set-union) (G4f93 core-prim . enum-set-subset?) (G4f92 core-prim . enum-set-projection) (G4f91 core-prim . enum-set-member?) (G4f90 core-prim . enum-set-intersection) (G4f8f core-prim . enum-set-indexer) (G4f8e core-prim . enum-set-difference) (G4f8d core-prim . enum-set-constructor) (G4f8c core-prim . enum-set-complement) (G4f8b core-prim . enum-set->list) (G4a59 core-prim . who-condition?) (G49d3 core-prim . warning?) (G4a12 core-prim . violation?) (G4ace core-prim . undefined-violation?) (G4ab5 core-prim . syntax-violation?) (G4ab9 core-prim . syntax-violation-subform) (G4ab7 core-prim . syntax-violation-form) (G304a core-prim . syntax-violation) (G4f8a core-prim . simple-conditions) (G49e8 core-prim . serious-condition?) (G4a70 core-prim . non-continuable-violation?) (G49bc core-prim . message-condition?) (G4a55 core-prim . make-who-condition) (G49d1 core-prim . make-warning) (G4a10 core-prim . make-violation) (G4acc core-prim . make-undefined-violation) (G4aaf core-prim . make-syntax-violation) (G49e6 core-prim . make-serious-condition) (G4a6e core-prim . make-non-continuable-violation) (G49b8 core-prim . make-message-condition) (G4a98 core-prim . make-lexical-violation) (G4a3b core-prim . make-irritants-condition) (G4a83 core-prim . make-implementation-restriction-violation) (G49fb core-prim . make-error) (G4a25 core-prim . make-assertion-violation) (G4a9a core-prim . lexical-violation?) (G4a3f core-prim . irritants-condition?) (G4a85 core-prim . implementation-restriction-violation?) (G49fd core-prim . error?) (G4a5b core-prim . condition-who) (G4f89 core-prim . condition-predicate) (G49be core-prim . condition-message) (G4a41 core-prim . condition-irritants) (G4f88 core-prim . condition-accessor) (G4f87 core-prim . condition) (G4a27 core-prim . assertion-violation?) (G4f86 core-prim . condition?) (G4f85 core-prim . utf32->string) (G4f84 core-prim . utf16->string) (G4f83 core-prim . utf8->string) (G4f82 core-prim . uint-list->bytevector) (G4f81 core-prim . u8-list->bytevector) (G4f80 core-prim . string->utf8) (G4f7f core-prim . string->utf32) (G4f7e core-prim . string->utf16) (G4f7d core-prim . sint-list->bytevector) (G4f7c core-prim . native-endianness) (G4f7b core-prim . bytevector?) (G4f7a core-prim . bytevector=?) (G4f79 core-prim . bytevector-uint-set!) (G4f78 core-prim . bytevector-uint-ref) (G4f77 core-prim . bytevector-u8-set!) (G4f76 core-prim . bytevector-u8-ref) (G4f75 core-prim . bytevector-u64-set!) (G4f74 core-prim . bytevector-u64-ref) (G4f73 core-prim . bytevector-u64-native-set!) (G4f72 core-prim . bytevector-u64-native-ref) (G4f71 core-prim . bytevector-u32-set!) (G4f70 core-prim . bytevector-u32-ref) (G4f6f core-prim . bytevector-u32-native-set!) (G4f6e core-prim . bytevector-u32-native-ref) (G4f6d core-prim . bytevector-u16-set!) (G4f6c core-prim . bytevector-u16-ref) (G4f6b core-prim . bytevector-u16-native-set!) (G4f6a core-prim . bytevector-u16-native-ref) (G4f69 core-prim . bytevector-sint-set!) (G4f68 core-prim . bytevector-sint-ref) (G4f67 core-prim . bytevector-s8-set!) (G4f66 core-prim . bytevector-s8-ref) (G4f65 core-prim . bytevector-s64-set!) (G4f64 core-prim . bytevector-s64-ref) (G4f63 core-prim . bytevector-s64-native-set!) (G4f62 core-prim . bytevector-s64-native-ref) (G4f61 core-prim . bytevector-s32-set!) (G4f60 core-prim . bytevector-s32-ref) (G4f5f core-prim . bytevector-s32-native-set!) (G4f5e core-prim . bytevector-s32-native-ref) (G4f5d core-prim . bytevector-s16-set!) (G4f5c core-prim . bytevector-s16-ref) (G4f5b core-prim . bytevector-s16-native-set!) (G4f5a core-prim . bytevector-s16-native-ref) (G4f59 core-prim . bytevector-length) (G4f58 core-prim . bytevector-ieee-single-ref) (G4f57 core-prim . bytevector-ieee-single-set!) (G4f56 core-prim . bytevector-ieee-single-native-set!) (G4f55 core-prim . bytevector-ieee-single-native-ref) (G4f54 core-prim . bytevector-ieee-double-set!) (G4f53 core-prim . bytevector-ieee-double-ref) (G4f52 core-prim . bytevector-ieee-double-native-set!) (G4f51 core-prim . bytevector-ieee-double-native-ref) (G4f50 core-prim . bytevector-fill!) (G4f4f core-prim . bytevector-copy!) (G4f4e core-prim . bytevector-copy) (G4f4d core-prim . bytevector->uint-list) (G4f4c core-prim . bytevector->u8-list) (G4f4b core-prim . bytevector->sint-list) (G4c08 core-prim . no-nans-violation?) (G4bf3 core-prim . no-infinities-violation?) (G4c06 core-prim . make-no-nans-violation) (G4bf1 core-prim . make-no-infinities-violation) (G4f4a core-prim . real->flonum) (G4f49 core-prim . flzero?) (G4f48 core-prim . fltruncate) (G4f47 core-prim . fltan) (G4f46 core-prim . flsqrt) (G4f45 core-prim . flsin) (G4f44 core-prim . flround) (G4f43 core-prim . flpositive?) (G4f42 core-prim . flonum?) (G4f41 core-prim . flodd?) (G4f40 core-prim . flnumerator) (G4f3f core-prim . flnegative?) (G4f3e core-prim . flnan?) (G4f3d core-prim . flmod0) (G4f3c core-prim . flmod) (G4f3b core-prim . flmin) (G4f3a core-prim . flmax) (G4f39 core-prim . fllog) (G4f38 core-prim . flinteger?) (G4f37 core-prim . flinfinite?) (G4f36 core-prim . flfloor) (G4f35 core-prim . flfinite?) (G4f34 core-prim . flexpt) (G4f33 core-prim . flexp) (G4f32 core-prim . fleven?) (G4f31 core-prim . fldiv0-and-mod0) (G4f30 core-prim . fldiv0) (G4f2f core-prim . fldiv-and-mod) (G4f2e core-prim . fldiv) (G4f2d core-prim . fldenominator) (G4f2c core-prim . flcos) (G4f2b core-prim . flceiling) (G4f2a core-prim . flatan) (G4f29 core-prim . flasin) (G4f28 core-prim . flacos) (G4f27 core-prim . flabs) (G4f26 core-prim . fl>?) (G4f25 core-prim . fl>=?) (G4f24 core-prim . fl=?) (G4f23 core-prim . fl<?) (G4f22 core-prim . fl<=?) (G4f21 core-prim . fl/) (G4f20 core-prim . fl-) (G4f1f core-prim . fl+) (G4f1e core-prim . fl*) (G4f1d core-prim . fixnum->flonum) (G4f1c core-prim . fxzero?) (G4f1b core-prim . fxxor) (G4f1a core-prim . fxrotate-bit-field) (G4f19 core-prim . fxreverse-bit-field) (G4f18 core-prim . fxpositive?) (G4f17 core-prim . fxodd?) (G4f16 core-prim . fxnot) (G4f15 core-prim . fxnegative?) (G4f14 core-prim . fxmod0) (G4f13 core-prim . fxmod) (G4f12 core-prim . fxmin) (G4f11 core-prim . fxmax) (G4f10 core-prim . fxlength) (G4f0f core-prim . fxior) (G4f0e core-prim . fxif) (G4f0d core-prim . fxfirst-bit-set) (G4f0c core-prim . fxeven?) (G4f0b core-prim . fxdiv0-and-mod0) (G4f0a core-prim . fxdiv0) (G4f09 core-prim . fxdiv-and-mod) (G4f08 core-prim . fxdiv) (G4f07 core-prim . fxcopy-bit-field) (G4f06 core-prim . fxcopy-bit) (G4f05 core-prim . fxbit-set?) (G4f04 core-prim . fxbit-field) (G4f03 core-prim . fxbit-count) (G4f02 core-prim . fxarithmetic-shift-right) (G4f01 core-prim . fxarithmetic-shift-left) (G4f00 core-prim . fxarithmetic-shift) (G4eff core-prim . fxand) (G4efe core-prim . fx>?) (G4efd core-prim . fx>=?) (G4efc core-prim . fx=?) (G4efb core-prim . fx<?) (G4efa core-prim . fx<=?) (G4ef9 core-prim . fx-/carry) (G4ef8 core-prim . fx-) (G4ef7 core-prim . fx+/carry) (G4ef6 core-prim . fx+) (G4ef5 core-prim . fx*/carry) (G4ef4 core-prim . fx*) (G4ef3 core-prim . greatest-fixnum) (G4ef2 core-prim . least-fixnum) (G4ef1 core-prim . fixnum-width) (G4ef0 core-prim . fixnum?) (G4eef core-prim . bitwise-rotate-bit-field) (G4eee core-prim . bitwise-reverse-bit-field) (G4eed core-prim . bitwise-length) (G4eec core-prim . bitwise-if) (G4eeb core-prim . bitwise-first-bit-set) (G4eea core-prim . bitwise-copy-bit-field) (G4ee9 core-prim . bitwise-copy-bit) (G4ee8 core-prim . bitwise-bit-set?) (G4ee7 core-prim . bitwise-bit-field) (G4ee6 core-prim . bitwise-bit-count) (G4ee5 core-prim . bitwise-xor) (G4ee4 core-prim . bitwise-ior) (G4ee3 core-prim . bitwise-and) (G4ee2 core-prim . bitwise-not) (G4ee1 core-prim . bitwise-arithmetic-shift-right) (G4ee0 core-prim . bitwise-arithmetic-shift-left) (G4edf core-prim . bitwise-arithmetic-shift) (G4ede core-prim . zero?) (G4edd core-prim . vector?) (G4edc core-prim . vector-set!) (G4edb core-prim . vector-ref) (G4eda core-prim . vector-map) (G4ed9 core-prim . vector-length) (G4ed8 core-prim . vector-for-each) (G4ed7 core-prim . vector-fill!) (G4ed6 core-prim . vector->list) (G4ed5 core-prim . vector) (G4ed4 core-prim . values) (G4ed3 core-prim . truncate) (G4ed2 core-prim . tan) (G4ed1 core-prim . symbol?) (G4ed0 core-prim . symbol=?) (G4ecf core-prim . symbol->string) (G4ece core-prim . substring) (G4ecd core-prim . string?) (G4ecc core-prim . string>?) (G4ecb core-prim . string>=?) (G4eca core-prim . string=?) (G4ec9 core-prim . string<?) (G4ec8 core-prim . string<=?) (G4ec7 core-prim . string-ref) (G4ec6 core-prim . string-length) (G4ec5 core-prim . string-for-each) (G4ec4 core-prim . string-copy) (G4ec3 core-prim . string-append) (G4ec2 core-prim . string->symbol) (G4ec1 core-prim . string->number) (G4ec0 core-prim . string->list) (G4ebf core-prim . string) (G4ebe core-prim . sqrt) (G4ebd core-prim . sin) (G4ebc core-prim . round) (G4ebb core-prim . reverse) (G4eba core-prim . real?) (G4eb9 core-prim . real-valued?) (G4eb8 core-prim . real-part) (G4eb7 core-prim . rationalize) (G4eb6 core-prim . rational?) (G4eb5 core-prim . rational-valued?) (G4eb4 core-prim . procedure?) (G4eb3 core-prim . positive?) (G4eb2 core-prim . pair?) (G4eb1 core-prim . odd?) (G4eb0 core-prim . numerator) (G4eaf core-prim . number?) (G4eae core-prim . number->string) (G4ead core-prim . null?) (G4eac core-prim . not) (G4eab core-prim . negative?) (G4eaa core-prim . nan?) (G4ea9 core-prim . min) (G4ea8 core-prim . max) (G4ea7 core-prim . map) (G4ea6 core-prim . make-vector) (G4ea5 core-prim . make-string) (G4ea4 core-prim . make-rectangular) (G4ea3 core-prim . make-polar) (G4ea2 core-prim . magnitude) (G4ea1 core-prim . log) (G4ea0 core-prim . list?) (G4e9f core-prim . list-tail) (G4e9e core-prim . list-ref) (G4e9d core-prim . list->vector) (G4e9c core-prim . list->string) (G4e9b core-prim . list) (G4e9a core-prim . length) (G4e99 core-prim . lcm) (G4e98 core-prim . integer?) (G4e97 core-prim . integer-valued?) (G4e96 core-prim . integer->char) (G4e95 core-prim . infinite?) (G4e94 core-prim . inexact?) (G4e93 core-prim . inexact) (G4e92 core-prim . imag-part) (G4e91 core-prim . gcd) (G4e90 core-prim . for-each) (G4e8f core-prim . floor) (G4e8e core-prim . finite?) (G4e8d core-prim . expt) (G4e8c core-prim . exp) (G4e8b core-prim . exact?) (G4e8a core-prim . exact-integer-sqrt) (G4e89 core-prim . exact) (G4e88 core-prim . even?) (G4e87 core-prim . error) (G4e86 core-prim . eqv?) (G4e85 core-prim . equal?) (G4e84 core-prim . eq?) (G4e83 core-prim . dynamic-wind) (G4e82 core-prim . div0-and-mod0) (G4e81 core-prim . mod0) (G4e80 core-prim . div0) (G4e7f core-prim . div-and-mod) (G4e7e core-prim . mod) (G4e7d core-prim . div) (G4e7c core-prim . denominator) (G4e7b core-prim . cos) (G4e7a core-prim . cons) (G4e79 core-prim . complex?) (G4e78 core-prim . char?) (G4e77 core-prim . char>?) (G4e76 core-prim . char>=?) (G4e75 core-prim . char=?) (G4e74 core-prim . char<?) (G4e73 core-prim . char<=?) (G4e72 core-prim . char->integer) (G4e71 core-prim . ceiling) (G4e70 core-prim . call-with-values) (G4e6f core-prim . call/cc) (G4e6e core-prim . call-with-current-continuation) (G4e6d core-prim . cddddr) (G4e6c core-prim . cdddar) (G4e6b core-prim . cddadr) (G4e6a core-prim . cddaar) (G4e69 core-prim . cdaddr) (G4e68 core-prim . cdadar) (G4e67 core-prim . cdaadr) (G4e66 core-prim . cdaaar) (G4e65 core-prim . cadddr) (G4e64 core-prim . caddar) (G4e63 core-prim . cadadr) (G4e62 core-prim . cadaar) (G4e61 core-prim . caaddr) (G4e60 core-prim . caadar) (G4e5f core-prim . caaadr) (G4e5e core-prim . caaaar) (G4e5d core-prim . cdddr) (G4e5c core-prim . cddar) (G4e5b core-prim . cdadr) (G4e5a core-prim . cdaar) (G4e59 core-prim . caddr) (G4e58 core-prim . cadar) (G4e57 core-prim . caadr) (G4e56 core-prim . caaar) (G4e55 core-prim . cddr) (G4e54 core-prim . cdar) (G4e53 core-prim . cadr) (G4e52 core-prim . caar) (G4e51 core-prim . cdr) (G4e50 core-prim . car) (G4e4f core-prim . boolean?) (G4e4e core-prim . boolean=?) (G4e4d core-prim . atan) (G4e4c core-prim . assertion-violation) (G4e4b core-prim . asin) (G4e4a core-prim . apply) (G4e49 core-prim . append) (G4e48 core-prim . angle) (G4e47 core-prim . acos) (G4e46 core-prim . abs) (G4e45 core-prim . /) (G4e44 core-prim . *) (G4e43 core-prim . -) (G4e42 core-prim . +) (G4e41 core-prim . >=) (G4e40 core-prim . >) (G4e3f core-prim . =) (G4e3e core-prim . <=) (G4e3d core-prim . <) (G4e3c core-prim . library) (G4e3b core-prim . export) (G4e3a $core-rtd &no-nans-rtd &no-nans-rcd) (G4e39 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e38 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e37 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e36 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e35 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e34 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e33 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e32 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e31 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e30 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e2f $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e2e $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e2d $core-rtd &i/o-rtd &i/o-rcd) (G4e2c $core-rtd &undefined-rtd &undefined-rcd) (G4e2b $core-rtd &syntax-rtd &syntax-rcd) (G4e2a $core-rtd &lexical-rtd &lexical-rcd) (G4e29 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e28 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e27 $core-rtd &who-rtd &who-rcd) (G4e26 $core-rtd &irritants-rtd &irritants-rcd) (G4e25 $core-rtd &assertion-rtd &assertion-rcd) (G4e24 $core-rtd &violation-rtd &violation-rcd) (G4e23 $core-rtd &error-rtd &error-rcd) (G4e22 $core-rtd &serious-rtd &serious-rcd) (G4e21 $core-rtd &warning-rtd &warning-rcd) (G4e20 $core-rtd &message-rtd &message-rcd) (G4e1f $core-rtd &condition-rtd &condition-rcd) (G4e1e macro . define-condition-type) (G4e1d macro . define-enumeration) (G4e1c macro . define-record-type) (G4e1b macro . parent-rtd) (G4e1a macro . nongenerative) (G4e19 macro . opaque) (G4e18 macro . sealed) (G4e17 macro . protocol) (G4e16 macro . parent) (G4e15 macro . immutable) (G4e14 macro . mutable) (G4e13 macro . fields) (G4e12 macro . error-handling-mode) (G4e11 macro . file-options) (G4e10 macro . buffer-mode) (G4e0f macro . eol-style) (G4e0e macro . guard) (G4e0d macro . trace-define) (G4e0c macro . trace-lambda) (G4e0b macro . unsyntax-splicing) (G4e0a macro . unsyntax) (G4e09 macro . unquote-splicing) (G4e08 macro . unquote) (G4e07 macro . _) (G4e06 macro . else) (G4e05 macro . =>) (G4e04 macro . ...) (G4e03 macro . assert) (G4e02 macro . endianness) (G4e01 macro . delay) (G4e00 macro . time) (G4dff macro . do) (G4dfe macro . cond) (G4dfd macro . let*) (G4dfc macro . let) (G4dfb macro . let*-values) (G4dfa macro . let-values) (G4df9 macro . identifier-syntax) (G4df8 macro . with-syntax) (G4df7 macro . quasisyntax) (G4df6 macro . quasiquote) (G4df5 macro . syntax-rules) (G4df4 macro . include) (G4df3 macro . define-struct) (G4df2 core-macro . record-constructor-descriptor) (G4df1 core-macro . record-type-descriptor) (G4df0 macro . case) (G4def macro . parameterize) (G4dee macro . unless) (G4ded macro . when) (G4dec core-macro . or) (G4deb core-macro . and) (G4dea core-macro . if) (G4de9 core-macro . letrec*) (G4de8 core-macro . letrec) (G4de7 core-macro . type-descriptor) (G4de6 core-macro . case-lambda) (G4de5 core-macro . lambda) (G4de4 core-macro . syntax) (G4de3 core-macro . syntax-case) (G4de2 core-macro . quote) (G4de1 core-macro . foreign-call) (G4de0 letrec-syntax) (G4ddf let-syntax) (G4dde set!) (G4ddd import) (G4ddc begin) (G4ddb module) (G4dda define-syntax) (G4dd9 define)) values values '#f '#f '#f '#f) (G2b76@G2a1b@install-library 'G50d8 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G50b7) (eval-core . G50b6) (set-symbol-value! . G50b5) (symbol-value . G50b4) (gensym . G50b3) (void . G50b2)) '() values values '#f '#f '#f '#f) (G2b76@G2a1b@install-library 'G50d9 '(mosh) '() '() '() '() '((set-symbol-value! . G50b5) (symbol-value . G50b4) (ungensym . G508e) (alist->eq-hash-table . G508d) (assoc-ref . G508c) (alist-cons . G508b) (print . G5089) (format . G5088) (standard-library-path . G5087) (file-newer? . G5086) (stat-mtime . G5085) (write-to-file . G5084) (file->list . G5083) (file->string . G5082) (digit->integer . G5081) (call-with-string-input-port . G5080) (call-with-string-io . G507f) (string-split . G507e) (bytevector-for-each . G507d) (string->regexp . G507c) (rxmatch . G507b) (regexp-replace-all . G507a) (hashtable-for-each . G5079) (set-current-directory! . G5074) (expand-path . G5073) (current-directory . G5072) (get-timeofday . G5064) (get-command-line . G5063) (sys-display . G5062) (source-info . G5061) (make-compiler-instruction . G5060) (make-instruction . G505f) (set-source-info! . G505e) (bignum? . G505d) (make-complex . G505c) (fast-equal? . G505b) (fasl-read . G505a) (fasl-write . G5059) (include . G4df4)) '() values values '#f '#f '#f '#f) (G2b76@G2a1b@install-library 'G50da '(mosh backend) '() '() '() '() '((receive . G5058)) '() values values '#f '#f '#f '#f) (G2b76@G2a1b@install-library 'G50db '(mosh file) '() '() '() '() '((read-line . G50af) (file-newer? . G5086) (stat-mtime . G5085) (write-to-file . G5084) (file->list . G5083) (file->string . G5082)) '() values values '#f '#f '#f '#f) (G2b76@G2a1b@install-library 'G50dc '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G507d)) '() values values '#f '#f '#f '#f) (G2b76@G2a1b@install-library 'G50dd '(mosh number) '() '() '() '() '((digit->integer . G5081)) '() values values '#f '#f '#f '#f) (G2b76@G2a1b@install-library 'G50de '(mosh string) '() '() '() '() '((print . G5089) (format . G5088) (call-with-string-input-port . G5080) (call-with-string-io . G507f) (string-split . G507e) (string->regexp . G507c)) '() values values '#f '#f '#f '#f) (G2b76@G2a1b@install-library 'G50df '(mosh list) '() '() '() '() '((assoc-ref . G508c)) '() values values '#f '#f '#f '#f) (G2b76@G2a1b@install-library 'G50e0 '(mosh regexp) '() '() '() '() '((rxmatch . G507b) (regexp-replace-all . G507a)) '() values values '#f '#f '#f '#f) (G2b76@G2a1b@install-library 'G50e1 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G5079)) '() values values '#f '#f '#f '#f) (G2b76@G2a1b@install-library 'G50e2 '(mosh parameters) '() '() '() '() '((make-parameter . G2832) (parameterize . G4def)) '() values values '#f '#f '#f '#f) (G2b76@G2a1b@install-library 'G50e3 '(system) '() '() '() '() '((call-process . G5078) (local-tz-offset . G5077) (microseconds . G5076) (readdir . G5075) (set-current-directory! . G5074) (expand-path . G5073) (current-directory . G5072) (%spawn . G5071) (%waitpid . G5070) (%ffi-pointer-ref . G506f) (%ffi-pointer->string . G506e) (%ffi-call->void* . G506d) (%ffi-call->void . G506c) (%ffi-call->int . G506b) (%ffi-lookup . G506a) (%ffi-open . G5069) (%fork . G5068) (%pipe . G5067) (get-environment-variables . G5066) (get-environment-variable . G5065)) '() values values '#f '#f '#f '#f) (G2b76@G2a1b@install-library 'G50e4 '(srfi :1) '() '() '() '() '((dotted-list? . G50ae) (circular-list? . G50ad) (proper-list? . G50ac) (circular-list . G50ab) (last . G50aa) (last-pair . G50a9) (not-pair? . G50a8) (split-at! . G50a7) (split-at . G50a6) (list= . G50a5) (list-copy . G50a4) (list-tabulate . G50a3) (make-list . G50a2) (xcons . G50a1) (tenth . G50a0) (ninth . G509f) (eighth . G509e) (seventh . G509d) (sixth . G509c) (fifth . G509b) (drop-right! . G509a) (drop-right . G5099) (take-right . G5098) (take! . G5097) (drop . G5096) (take . G5095) (car+cdr . G5094) (third . G5093) (second . G5092) (first . G5091) (iota . G5090) (every . G508f) (alist-cons . G508b) (append-map . G508a)) '() values values '#f '#f '#f '#f))
((lambda (G4d02@add-library-path! G4d04@parse-and-add-library-path G4d06@for-each-with-index G4d08@conditioon-printer G4d0a@repl G4d0c@trace-printer G4d0e@command-line G4d10@local-library-path G4d12@load/args G4d14@load G4d16@ironscheme-build G4d18@eval-top-level G4d1a@compile-system-libraries G4d1c@compile G4d1e@compile->closure G4d20@pre-compile-r6rs-file G4d22@load-r6rs-top-level) (begin (set! G4d02@add-library-path! (lambda (G4d3d@path) (G2b66@G29fb@library-path (append (G2b66@G29fb@library-path) (list G4d3d@path))))) (set! G4d04@parse-and-add-library-path (lambda (G4d3f@paths G4d40@message) ((lambda (G4d43@t) (if G4d43@t ((lambda (G4d45@paths) (for-each (lambda (G4d47@path) (if (file-exists? G4d47@path) (G4d02@add-library-path! (expand-path G4d47@path)) (format (current-error-port) G4d40@message G4d47@path))) (reverse (string-split G4d45@paths '#\:)))) G4d43@t) (void))) G4d3f@paths))) (set! G4d06@for-each-with-index (lambda (G4d49@proc G4d4a@lst) (letrec ((G4d4d@loop (lambda (G4d4f@i G4d50@lst) (if (null? G4d50@lst) (if '#f '#f (void)) (begin (G4d49@proc G4d4f@i (car G4d50@lst)) (G4d4d@loop (+ G4d4f@i '1) (cdr G4d50@lst))))))) (G4d4d@loop '1 G4d4a@lst)))) (set! G4d08@conditioon-printer (lambda (G4d53@e G4d54@port) ((lambda (G4d58@ref) (begin (set! G4d58@ref (lambda (G4d67@rtd G4d68@i G4d69@x) ((lambda (G4d6d@val) (if (symbol? G4d6d@val) (ungensym G4d6d@val) G4d6d@val)) ((record-accessor G4d67@rtd G4d68@i) G4d69@x)))) (begin (display '" Condition components:\n" G4d54@port) (G4d06@for-each-with-index (lambda (G4d59@i G4d5a@x) ((lambda (G4d5d@rtd) (begin (format G4d54@port '"   ~d. ~a" G4d59@i (record-type-name G4d5d@rtd)) ((lambda (G4d5f@v) ((lambda (G4d61@t) (if (memv G4d61@t '(0)) (newline G4d54@port) (if (memv G4d61@t '(1)) (begin (display '": " G4d54@port) (write (G4d58@ref G4d5d@rtd '0 G4d5a@x) G4d54@port) (newline G4d54@port)) (begin (display '":\n" G4d54@port) ((letrec ((G4d63@f (lambda (G4d65@i) (if (not (= G4d65@i (vector-length G4d5f@v))) (begin (display '"       " G4d54@port) (display (vector-ref G4d5f@v G4d65@i) G4d54@port) (display '": " G4d54@port) (write (G4d58@ref G4d5d@rtd G4d65@i G4d5a@x) G4d54@port) (newline G4d54@port) (G4d63@f (+ G4d65@i '1))) (void))))) G4d63@f) '0))))) (vector-length G4d5f@v))) (record-type-field-names G4d5d@rtd)))) (record-rtd G4d5a@x))) (simple-conditions G4d53@e))))) '#f))) (set! G4d0a@repl (lambda G4d6f@x ((lambda (G4d72@rec) (begin (set! G4d72@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4d75@G4d73) (lambda () (with-exception-handler (lambda (G4d77@e) ((call/cc (lambda (G4d79@G4d74) (G4d75@G4d73 (lambda () (if '#t (begin (display '"\n" (current-error-port)) (G4d08@conditioon-printer G4d77@e (current-error-port))) (G4d79@G4d74 (lambda () (raise-continuable G4d77@e)))))))))) (lambda () ((letrec ((G4d7b@loop (lambda (G4d7d@line G4d7e@accum) ((lambda (G4d82@parentheses-ok? G4d84@eval-string-print) (begin (set! G4d82@parentheses-ok? (lambda (G4d89@text) ((letrec ((G4d8b@loop (lambda (G4d8d@chars G4d8e@p0 G4d8f@p1) (if (null? G4d8d@chars) (= '0 G4d8e@p0 G4d8f@p1) ((lambda (G4d93@t) (if (memv G4d93@t '(#\()) (G4d8b@loop (cdr G4d8d@chars) (+ G4d8e@p0 '1) G4d8f@p1) (if (memv G4d93@t '(#\))) (G4d8b@loop (cdr G4d8d@chars) (- G4d8e@p0 '1) G4d8f@p1) (if (memv G4d93@t '(#\[)) (G4d8b@loop (cdr G4d8d@chars) G4d8e@p0 (+ G4d8f@p1 '1)) (if (memv G4d93@t '(#\])) (G4d8b@loop (cdr G4d8d@chars) G4d8e@p0 (- G4d8f@p1 '1)) (G4d8b@loop (cdr G4d8d@chars) G4d8e@p0 G4d8f@p1)))))) (car G4d8d@chars)))))) G4d8b@loop) (string->list G4d89@text) '0 '0))) (set! G4d84@eval-string-print (lambda (G4d87@text) (if (not (or (string=? '"\n" G4d87@text) (= '0 (string-length G4d87@text)))) (write (G4d18@eval-top-level (call-with-port (open-string-input-port G4d87@text) read))) (void)))) (if (eof-object? G4d7d@line) (begin (G4d84@eval-string-print G4d7e@accum) (exit)) ((lambda (G4d85@current) (if (G4d82@parentheses-ok? G4d85@current) (G4d84@eval-string-print G4d85@current) (G4d7b@loop (get-line (current-input-port)) G4d85@current))) (string-append G4d7e@accum G4d7d@line))))) '#f '#f)))) G4d7b@loop) (get-line (current-input-port)) '""))))))) (newline) (G4d72@rec)))) (G4d72@rec))) '#f))) (set! G4d0c@trace-printer (G28fd@G2833@make-parameter write)) (set! G4d0e@command-line (G28fd@G2833@make-parameter (get-command-line))) (set! G4d10@local-library-path (lambda (G4d95@filename) (cons (expand-path '".") (G2b66@G29fb@library-path)))) (set! G4d12@load/args (lambda (G4d97@filename . G4d99@args) (begin (apply G4d22@load-r6rs-top-level G4d97@filename 'load G4d99@args) (void)))) (set! G4d14@load (lambda (G4d9b@filename) (begin (apply G4d22@load-r6rs-top-level G4d9b@filename 'load (G4d0e@command-line)) (void)))) (set! G4d16@ironscheme-build (lambda () (G4d14@load '"ironscheme-buildscript.ss"))) (set! G4d18@eval-top-level (lambda (G4d9d@x) (G4938@G302b@eval G4d9d@x (G494e@G3057@interaction-environment)))) (set! G4d1a@compile-system-libraries (lambda () (G4d18@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d1c@compile (lambda (G4d9f@filename) (G4d22@load-r6rs-top-level G4d9f@filename 'compile))) (set! G4d1e@compile->closure (lambda (G4da1@filename) (G4d22@load-r6rs-top-level G4da1@filename 'closure))) (set! G4d20@pre-compile-r6rs-file (lambda (G4da3@filename) (G4d22@load-r6rs-top-level G4da3@filename 'compile))) (set! G4d22@load-r6rs-top-level (lambda (G4da5@filename G4da6@how . G4da9@args) ((lambda (G4dad@G4dab G4dae@G4dac) ((lambda (G4db1@swap) (dynamic-wind G4db1@swap (lambda () ((lambda (G4db3@x*) ((lambda (G4db5@t) (if (memv G4db5@t '(closure)) (G494d@G3055@pre-compile-r6rs-top-level G4db3@x*) (if (memv G4db5@t '(load)) ((lambda (G4db9@G4db7 G4dba@G4db8) ((lambda (G4dbd@swap) (dynamic-wind G4dbd@swap (lambda () ((G494c@G3053@compile-r6rs-top-level G4db3@x*))) G4dbd@swap)) (lambda () ((lambda (G4dbf@t) (begin (G4db9@G4db7 G4dba@G4db8) (set! G4dba@G4db8 G4dbf@t))) (G4db9@G4db7))))) G4d0e@command-line (cons G4da5@filename (car G4da9@args))) (if (memv G4db5@t '(compile)) (begin (G494c@G3053@compile-r6rs-top-level G4db3@x*) (G2b6a@G2a03@serialize-all G28f8@G2829@serialize-library G2952@G290b@compile-core-expr)) (if '#f '#f (void)))))) G4da6@how)) (with-input-from-file G4da5@filename (lambda () ((letrec ((G4dc1@f (lambda () ((lambda (G4dc3@x) (if (eof-object? G4dc3@x) '() (cons G4dc3@x (G4dc1@f)))) (G28f0@G2819@read-annotated))))) G4dc1@f)))))) G4db1@swap)) (lambda () ((lambda (G4dc5@t) (begin (G4dad@G4dab G4dae@G4dac) (set! G4dae@G4dac G4dc5@t))) (G4dad@G4dab))))) G2b66@G29fb@library-path (G4d10@local-library-path G4da5@filename)))) (begin (set! G4dd7@G4d22@load-r6rs-top-level G4d22@load-r6rs-top-level) (set! G4dd6@G4d20@pre-compile-r6rs-file G4d20@pre-compile-r6rs-file) (set! G4dd5@G4d1e@compile->closure G4d1e@compile->closure) (set! G4dd4@G4d1c@compile G4d1c@compile) (set! G4dd3@G4d1a@compile-system-libraries G4d1a@compile-system-libraries) (set! G4dd2@G4d18@eval-top-level G4d18@eval-top-level) (set! G4dd1@G4d16@ironscheme-build G4d16@ironscheme-build) (set! G4dd0@G4d14@load G4d14@load) (set! G4dcf@G4d12@load/args G4d12@load/args) (set! G4dce@G4d10@local-library-path G4d10@local-library-path) (set! G4dcd@G4d0e@command-line G4d0e@command-line) (set! G4dcc@G4d0c@trace-printer G4d0c@trace-printer) (set! G4dcb@G4d0a@repl G4d0a@repl) (set! G4dca@G4d08@conditioon-printer G4d08@conditioon-printer) (set! G4dc9@G4d06@for-each-with-index G4d06@for-each-with-index) (set! G4dc8@G4d04@parse-and-add-library-path G4d04@parse-and-add-library-path) (set! G4dc7@G4d02@add-library-path! G4d02@add-library-path!) (G2b6b@G2a05@current-precompiled-library-loader G28f9@G282b@load-serialized-library) (set-symbol-value! 'load G4d14@load) (set-symbol-value! 'pre-compile-r6rs-file G4d20@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4d18@eval-top-level) (set-symbol-value! 'int-env-syms G492f@G3019@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2951@G2909@expanded->core) (set-symbol-value! 'trace-printer G4d0c@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4d23@c) (condition (G4c5f@G4a6f@make-non-continuable-violation) (G4c55@G4a56@make-who-condition 'raise) (G4c19@G49b9@make-message-condition '"returned from non-continuable exception") (G4c4b@G4a3c@make-irritants-condition (list G4d23@c))))) (G4d04@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4d04@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G2b66@G29fb@library-path (append (G2b66@G29fb@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4d25@prefix) (G2b67@G29fd@library-extensions (G4d25@prefix '".mosh" (G2b67@G29fd@library-extensions)))) (lambda (G4d27@ext G4d28@ls) (append (map (lambda (G4d2b@x) (string-append G4d27@ext G4d2b@x)) G4d28@ls) G4d28@ls))) ((lambda (G4d2d@args G4d2e@port) ((lambda (G4d32@ref) (begin (set! G4d32@ref (lambda (G4d35@rtd G4d36@i G4d37@x) ((lambda (G4d3b@val) (if (symbol? G4d3b@val) (ungensym G4d3b@val) G4d3b@val)) ((record-accessor G4d35@rtd G4d36@i) G4d37@x)))) (with-exception-handler (lambda (G4d33@c) (G4d08@conditioon-printer G4d33@c (current-error-port))) (lambda () (if (null? G4d2d@args) (G4d0a@repl) (G4d22@load-r6rs-top-level (car G4d2d@args) 'load (cdr G4d2d@args))))))) '#f)) (G4d0e@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
