;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2891@read-annotated G2893@annotation-stripped G2895@annotation? G2897@annotation-source G2899@annotation-expression G289b@scm->fasl G289d@fasl-save G289f@fasl-load G28a1@serialize-library G28a3@load-serialized-library G28a5@make-record-printer G28a7@compile-core G28a9@read-library-source-file G28ab@make-parameter G2945@file-options-spec) (begin (set! G2891@read-annotated read) (set! G2893@annotation-stripped (lambda (G2946@x) (G2899@annotation-expression G2946@x))) (set! G2895@annotation? (lambda (G2948@x) (source-info G2948@x))) (set! G2897@annotation-source (lambda (G294a@x) (source-info G294a@x))) (set! G2899@annotation-expression (lambda (G294c@x) (if (pair? G294c@x) (cons (car G294c@x) (cdr G294c@x)) (display '"line:46\n")))) (set! G289b@scm->fasl (lambda (G294e@filename) (string-append G294e@filename '".fasl"))) (set! G289d@fasl-save (lambda (G2950@filename G2951@obj) (call-with-port (open-file-output-port G2950@filename) (lambda (G2954@port) ((symbol-value 'fasl-write!) G2951@obj G2954@port))))) (set! G289f@fasl-load (lambda (G2956@filename) (call-with-port (open-file-input-port G2956@filename) (symbol-value 'fasl-read!)))) (set! G28a1@serialize-library (lambda (G2958@filename G2959@obj) (begin (format '#t '"serialize-library ~a\n..." G2958@filename) ((lambda (G295c@fasl-file) (begin (if (file-exists? G295c@fasl-file) (delete-file G295c@fasl-file) (void)) (call/cc (lambda (G295f@G295e) (with-exception-handler (lambda (G2961@c) (G295f@G295e (if '#t (begin (format '#t '"Warning:serialize-library failed " G2958@filename) (if (file-exists? G295c@fasl-file) (delete-file G295c@fasl-file) (void)) '#f) (raise G2961@c)))) (lambda () (begin '#f (G289d@fasl-save G295c@fasl-file G2959@obj) (display '"OK\n")))))))) (G289b@scm->fasl G2958@filename))))) (set! G28a3@load-serialized-library (lambda (G2963@filename G2964@obj) ((lambda (G2967@fasl-file) (if (if (file-exists? G2967@fasl-file) (begin '#f ((symbol-value 'file-newer?) G2967@fasl-file G2963@filename)) '#f) ((lambda (G2969@expanded2core) ((lambda (G296b@code) ((lambda (G296d@pivot) ((lambda (G296f@visit) ((lambda (G2971@visit-proc) ((lambda () (begin (set-car! G296d@pivot G2971@visit-proc) ((lambda (G2973@pivot) ((lambda (G2975@invoke) ((lambda () (begin (set-car! G2973@pivot (lambda () (eval-core G2975@invoke))) (apply G2964@obj G296b@code))))) (G2969@expanded2core (car G2973@pivot)))) (cdr G296d@pivot)) '#t)))) (lambda () (eval-core G296f@visit)))) (G2969@expanded2core (car G296d@pivot)))) (cddddr (cddddr G296b@code)))) (G289f@fasl-load G2967@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G289b@scm->fasl G2963@filename)))) (set! G28a5@make-record-printer (lambda (G2977@name G2978@printer) (lambda G297b@x (begin (display '"record printer") (for-each display G297b@x))))) (set! G28a7@compile-core (lambda G297d@x (apply error 'comile-core '"not implementated" G297d@x))) (set! G28a9@read-library-source-file (lambda (G297f@file-name) (with-input-from-file G297f@file-name G2891@read-annotated))) (set! G28ab@make-parameter (lambda G298f ((lambda (G2990) (if (= G2990 '1) (apply (lambda (G2981@x) (G28ab@make-parameter G2981@x (lambda (G2983@x) G2983@x))) G298f) (if (= G2990 '2) (apply (lambda (G2985@x G2986@fender) ((lambda (G2989@x) (lambda G298d ((lambda (G298e) (if (= G298e '0) (apply (lambda () G2989@x) G298d) (if (= G298e '1) (apply (lambda (G298b@v) (set! G2989@x (G2986@fender G298b@v))) G298d) (error 'apply '"invalid arg count")))) (length G298d)))) (G2986@fender G2985@x))) G298f) (error 'apply '"invalid arg count")))) (length G298f)))) (set! G2945@file-options-spec (lambda (G2991@x) G2991@x)) (begin (set! G29a1@G2945@file-options-spec G2945@file-options-spec) (set! G29a0@G28ab@make-parameter G28ab@make-parameter) (set! G299f@G28a9@read-library-source-file G28a9@read-library-source-file) (set! G299e@G28a7@compile-core G28a7@compile-core) (set! G299d@G28a5@make-record-printer G28a5@make-record-printer) (set! G299c@G28a3@load-serialized-library G28a3@load-serialized-library) (set! G299b@G28a1@serialize-library G28a1@serialize-library) (set! G299a@G289f@fasl-load G289f@fasl-load) (set! G2999@G289d@fasl-save G289d@fasl-save) (set! G2998@G289b@scm->fasl G289b@scm->fasl) (set! G2997@G2899@annotation-expression G2899@annotation-expression) (set! G2996@G2897@annotation-source G2897@annotation-source) (set! G2995@G2895@annotation? G2895@annotation?) (set! G2994@G2893@annotation-stripped G2893@annotation-stripped) (set! G2993@G2891@read-annotated G2891@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G29a6@current-primitive-locations G29a8@mutable? G29aa@rewriter G29ac@expanded->core G29ae@compile-core-expr G29b0@pretty-print G29b2@compile-core-expr-to-port) (begin (set! G29a6@current-primitive-locations (G29a0@G28ab@make-parameter (lambda (G29b3@x) '#f) (lambda (G29b5@p) G29b5@p))) (set! G29a8@mutable? (lambda (G29b7@x) ((lambda (G29ba@simple?) (begin (set! G29ba@simple? (lambda (G29bb@x) ((lambda (G29bd@t) (if G29bd@t G29bd@t ((lambda (G29bf@t) (if G29bf@t G29bf@t ((lambda (G29c1@t) (if G29c1@t G29c1@t ((lambda (G29c3@t) (if G29c3@t G29c3@t ((lambda (G29c5@t) (if G29c5@t G29c5@t ((lambda (G29c7@t) (if G29c7@t G29c7@t (begin '#f (number? G29bb@x)))) (bytevector? G29bb@x)))) (string? G29bb@x)))) (boolean? G29bb@x)))) (symbol? G29bb@x)))) (char? G29bb@x)))) (null? G29bb@x)))) (not (G29ba@simple? G29b7@x)))) '#f))) (set! G29aa@rewriter (lambda (G29c9@quote-hack?) ((lambda (G29cc@f) (begin (set! G29cc@f (lambda (G29cd@x) (if (pair? G29cd@x) ((lambda (G29cf@t) (if (memv G29cf@t '(quote)) (if (if G29c9@quote-hack? (begin '#f (G29a8@mutable? (cadr G29cd@x))) '#f) ((lambda (G29d1@g) (begin (set-symbol-value! G29d1@g (cadr G29cd@x)) G29d1@g)) (gensym)) G29cd@x) (if (memv G29cf@t '(case-lambda)) (cons 'case-lambda (map (lambda (G29d3@x) (cons (car G29d3@x) (map G29cc@f (cdr G29d3@x)))) (cdr G29cd@x))) (if (memv G29cf@t '(lambda)) (cons* 'lambda (cadr G29cd@x) (map G29cc@f (cddr G29cd@x))) (if (memv G29cf@t '(letrec)) ((lambda (G29d5@bindings G29d6@body*) ((lambda (G29d9@lhs* G29da@rhs*) (cons* 'letrec (map list G29d9@lhs* (map G29cc@f G29da@rhs*)) (map G29cc@f G29d6@body*))) (map car G29d5@bindings) (map cadr G29d5@bindings))) (cadr G29cd@x) (cddr G29cd@x)) (if (memv G29cf@t '(letrec*)) ((lambda (G29dd@bindings G29de@body*) ((lambda (G29e1@lhs* G29e2@rhs*) (cons* 'letrec* (map list G29e1@lhs* (map G29cc@f G29e2@rhs*)) (map G29cc@f G29de@body*))) (map car G29dd@bindings) (map cadr G29dd@bindings))) (cadr G29cd@x) (cddr G29cd@x)) (if (memv G29cf@t '(library-letrec*)) ((lambda (G29e5@name G29e6@x) ((lambda (G29e9@bindings G29ea@body*) ((lambda (G29ed@lhs* G29ee@lhs** G29ef@rhs*) (cons* 'library-letrec* G29e5@name (map list G29ed@lhs* G29ee@lhs** (map G29cc@f G29ef@rhs*)) (map G29cc@f G29ea@body*))) (map car G29e9@bindings) (map cadr G29e9@bindings) (map caddr G29e9@bindings))) (cadr G29e6@x) (cddr G29e6@x))) (cadr G29cd@x) (cdr G29cd@x)) (if (memv G29cf@t '(begin)) (cons 'begin (map G29cc@f (cdr G29cd@x))) (if (memv G29cf@t '(set!)) (list 'set! (cadr G29cd@x) (G29cc@f (caddr G29cd@x))) (if (memv G29cf@t '(primitive)) ((lambda (G29f3@op) ((lambda (G29f5@t) (if G29f5@t ((lambda (G29f7@loc) G29f7@loc) G29f5@t) G29f3@op)) ((G29a6@current-primitive-locations) G29f3@op))) (cadr G29cd@x)) (if (memv G29cf@t '(define)) G29cd@x (if (list? G29cd@x) (map G29cc@f G29cd@x) (error 'rewrite '"invalid form ~s ~s" G29cd@x (list? G29cd@x)))))))))))))) (car G29cd@x)) G29cd@x))) G29cc@f)) '#f))) (set! G29ac@expanded->core (lambda (G29f9@x) ((G29aa@rewriter '#t) G29f9@x))) (set! G29ae@compile-core-expr (lambda (G29fb@x) ((G29aa@rewriter '#f) G29fb@x))) (set! G29b0@pretty-print write) (set! G29b2@compile-core-expr-to-port (lambda (G29fd@x G29fe@p) (G29b0@pretty-print ((G29aa@rewriter '#f) G29fd@x) G29fe@p))) (begin (set! G2a07@G29b2@compile-core-expr-to-port G29b2@compile-core-expr-to-port) (set! G2a06@G29b0@pretty-print G29b0@pretty-print) (set! G2a05@G29ae@compile-core-expr G29ae@compile-core-expr) (set! G2a04@G29ac@expanded->core G29ac@expanded->core) (set! G2a03@G29aa@rewriter G29aa@rewriter) (set! G2a02@G29a8@mutable? G29a8@mutable?) (set! G2a01@G29a6@current-primitive-locations G29a6@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2a61@make-collection G2a63@current-library-collection G2a69@G2a64 G2a6b@G2a66 G2a6d@G2a65 G2a72@library? G2a74@make-library G2a76@library-id G2a78@library-name G2a7a@library-version G2a7c@library-imp* G2a7e@library-vis* G2a80@library-inv* G2a82@library-subst G2a84@library-env G2a86@library-visit-state G2a88@library-invoke-state G2a8a@library-visit-code G2a8c@library-invoke-code G2a8e@library-visible? G2a90@library-source-file-name G2a92@set-library-id! G2a94@set-library-name! G2a96@set-library-version! G2a98@set-library-imp*! G2a9a@set-library-vis*! G2a9c@set-library-inv*! G2a9e@set-library-subst! G2aa0@set-library-env! G2aa2@set-library-visit-state! G2aa4@set-library-invoke-state! G2aa6@set-library-visit-code! G2aa8@set-library-invoke-code! G2aaa@set-library-visible?! G2aac@set-library-source-file-name! G2aae@rp G2ab0@find-dependencies G2ab2@find-library-by G2ab4@library-path G2ab6@library-extensions G2ab8@library-name->file-name G2aba@file-locator G2abc@serialize-all G2abe@current-precompiled-library-loader G2ac0@try-load-from-file G2ac2@library-loader G2ac4@current-library-expander G2ac6@external-pending-libraries G2ac8@find-external-library G2aca@find-library-by-name G2acc@library-exists? G2ace@find-library-by-spec/die G2ad0@label->binding-table G2ad2@install-library-record G2ad4@install-library G2ad6@imported-label->binding G2ad8@invoke-library G2ada@visit-library G2adc@invoke-library-by-spec G2ade@installed-libraries G2ae0@library-spec) (begin (set! G2a61@make-collection (lambda () ((lambda (G2ae1@set) ((lambda (G2ae4@set-cons) (begin (set! G2ae4@set-cons (lambda (G2ae9@x G2aea@ls) (if (memq G2ae9@x G2aea@ls) G2aea@ls (cons G2ae9@x G2aea@ls)))) (lambda G2ae7 ((lambda (G2ae8) (if (= G2ae8 '0) (apply (lambda () G2ae1@set) G2ae7) (if (= G2ae8 '1) (apply (lambda (G2ae5@x) (set! G2ae1@set (G2ae4@set-cons G2ae5@x G2ae1@set))) G2ae7) (error 'apply '"invalid arg count")))) (length G2ae7))))) '#f)) '()))) (set! G2a63@current-library-collection (G29a0@G28ab@make-parameter (G2a61@make-collection) (lambda (G2aed@x) (begin (if (not (procedure? G2aed@x)) (assertion-violation 'current-library-collection '"not a procedure" G2aed@x) (void)) G2aed@x)))) (set! G2a69@G2a64 (make-record-type-descriptor 'library '#f 'G2a67 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G2a6b@G2a66 '#f) (set! G2a6d@G2a65 (make-record-constructor-descriptor G2a69@G2a64 '#f G2a6b@G2a66)) (set! G2a72@library? (record-predicate G2a69@G2a64)) (set! G2a74@make-library (record-constructor G2a6d@G2a65)) (set! G2a76@library-id (record-accessor G2a69@G2a64 '0)) (set! G2a78@library-name (record-accessor G2a69@G2a64 '1)) (set! G2a7a@library-version (record-accessor G2a69@G2a64 '2)) (set! G2a7c@library-imp* (record-accessor G2a69@G2a64 '3)) (set! G2a7e@library-vis* (record-accessor G2a69@G2a64 '4)) (set! G2a80@library-inv* (record-accessor G2a69@G2a64 '5)) (set! G2a82@library-subst (record-accessor G2a69@G2a64 '6)) (set! G2a84@library-env (record-accessor G2a69@G2a64 '7)) (set! G2a86@library-visit-state (record-accessor G2a69@G2a64 '8)) (set! G2a88@library-invoke-state (record-accessor G2a69@G2a64 '9)) (set! G2a8a@library-visit-code (record-accessor G2a69@G2a64 '10)) (set! G2a8c@library-invoke-code (record-accessor G2a69@G2a64 '11)) (set! G2a8e@library-visible? (record-accessor G2a69@G2a64 '12)) (set! G2a90@library-source-file-name (record-accessor G2a69@G2a64 '13)) (set! G2a92@set-library-id! (record-mutator G2a69@G2a64 '0)) (set! G2a94@set-library-name! (record-mutator G2a69@G2a64 '1)) (set! G2a96@set-library-version! (record-mutator G2a69@G2a64 '2)) (set! G2a98@set-library-imp*! (record-mutator G2a69@G2a64 '3)) (set! G2a9a@set-library-vis*! (record-mutator G2a69@G2a64 '4)) (set! G2a9c@set-library-inv*! (record-mutator G2a69@G2a64 '5)) (set! G2a9e@set-library-subst! (record-mutator G2a69@G2a64 '6)) (set! G2aa0@set-library-env! (record-mutator G2a69@G2a64 '7)) (set! G2aa2@set-library-visit-state! (record-mutator G2a69@G2a64 '8)) (set! G2aa4@set-library-invoke-state! (record-mutator G2a69@G2a64 '9)) (set! G2aa6@set-library-visit-code! (record-mutator G2a69@G2a64 '10)) (set! G2aa8@set-library-invoke-code! (record-mutator G2a69@G2a64 '11)) (set! G2aaa@set-library-visible?! (record-mutator G2a69@G2a64 '12)) (set! G2aac@set-library-source-file-name! (record-mutator G2a69@G2a64 '13)) (set! G2aae@rp (G299d@G28a5@make-record-printer 'library (lambda (G2aef@x G2af0@p G2af1@wr) (begin (if (not (G2a72@library? G2aef@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G2a7a@library-version G2aef@x)) (G2a78@library-name G2aef@x) (append (G2a78@library-name G2aef@x) (list (G2a7a@library-version G2aef@x))))) G2af0@p))))) (set! G2ab0@find-dependencies (lambda (G2af5@ls) (if (null? G2af5@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2ab2@find-library-by (lambda (G2af7@pred) ((letrec ((G2af9@f (lambda (G2afb@ls) (if (null? G2afb@ls) '#f (if (G2af7@pred (car G2afb@ls)) (car G2afb@ls) (G2af9@f (cdr G2afb@ls))))))) G2af9@f) ((G2a63@current-library-collection))))) (set! G2ab4@library-path (G29a0@G28ab@make-parameter '(".") (lambda (G2afd@x) (if (if (list? G2afd@x) (begin '#f (for-all string? G2afd@x)) '#f) (map (lambda (G2aff@x) G2aff@x) G2afd@x) (assertion-violation 'library-path '"not a list of strings" G2afd@x))))) (set! G2ab6@library-extensions (G29a0@G28ab@make-parameter '(".sls" ".ss" ".scm") (lambda (G2b01@x) (if (if (list? G2b01@x) (begin '#f (for-all string? G2b01@x)) '#f) (map (lambda (G2b03@x) G2b03@x) G2b01@x) (assertion-violation 'library-extensions '"not a list of strings" G2b01@x))))) (set! G2ab8@library-name->file-name (lambda (G2b05@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2b09@G2b07 G2b0a@G2b08) ((lambda (G2b0d@extract G2b0e@p) ((lambda (G2b12@display-hex) (begin (set! G2b12@display-hex (lambda (G2b21@n) (if (<= '0 G2b21@n '9) (display G2b21@n G2b0e@p) (display (integer->char (+ (char->integer '#\A) (- G2b21@n '10))) G2b0e@p)))) (begin ((letrec ((G2b13@f (lambda (G2b15@ls) (if (not (null? G2b15@ls)) (begin (display '"/" G2b0e@p) (for-each (lambda (G2b17@c) (if ((lambda (G2b19@t) (if G2b19@t G2b19@t ((lambda (G2b1b@t) (if G2b1b@t G2b1b@t ((lambda (G2b1d@t) (if G2b1d@t G2b1d@t (begin '#f (memv G2b17@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G2b17@c '#\9)))) (char<=? '#\A G2b17@c '#\Z)))) (char<=? '#\a G2b17@c '#\z)) (display G2b17@c G2b0e@p) (begin (display '"%" G2b0e@p) ((lambda (G2b1f@n) (begin (G2b12@display-hex (quotient G2b1f@n '16)) (G2b12@display-hex (remainder G2b1f@n '16)))) (char->integer G2b17@c))))) (string->list (symbol->string (car G2b15@ls)))) (G2b13@f (cdr G2b15@ls))) (void))))) G2b13@f) G2b05@x) (G2b0d@extract)))) '#f)) G2b0a@G2b08 G2b09@G2b07))))) (set! G2aba@file-locator (G29a0@G28ab@make-parameter (lambda (G2b23@x) ((lambda (G2b25@str) ((letrec ((G2b27@f (lambda (G2b29@ls G2b2a@exts G2b2b@failed-list) (if (null? G2b29@ls) ((lambda () ((lambda (G2b37@G2b32 G2b39@G2b34 G2b3b@G2b33 G2b40@G2b31 G2b42@make-library-resolution-condition G2b44@G2b2f G2b46@G2b30 G2b48@library-resolution-condition? G2b4a@condition-library G2b4c@condition-files) (begin (set! G2b37@G2b32 (make-record-type-descriptor '&library-resolution &condition-rtd 'G2b35 '#f '#f '#((immutable library) (immutable files)))) (set! G2b39@G2b34 '#f) (set! G2b3b@G2b33 (make-record-constructor-descriptor G2b37@G2b32 &condition-rcd G2b39@G2b34)) (set! G2b40@G2b31 (record-predicate G2b37@G2b32)) (set! G2b42@make-library-resolution-condition (record-constructor G2b3b@G2b33)) (set! G2b44@G2b2f (record-accessor G2b37@G2b32 '0)) (set! G2b46@G2b30 (record-accessor G2b37@G2b32 '1)) (set! G2b48@library-resolution-condition? (condition-predicate G2b37@G2b32)) (set! G2b4a@condition-library (condition-accessor G2b37@G2b32 G2b44@G2b2f)) (set! G2b4c@condition-files (condition-accessor G2b37@G2b32 G2b46@G2b30)) (raise (condition (G4c4d@G4b3b@make-error) (G4c67@G4b91@make-who-condition 'expander) (G4c39@G4afb@make-message-condition '"cannot locate library in library-path") (G2b42@make-library-resolution-condition G2b23@x (reverse G2b2b@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2b2a@exts) (G2b27@f (cdr G2b29@ls) (G2ab6@library-extensions) G2b2b@failed-list) ((lambda (G2b4d@name) (if (file-exists? G2b4d@name) G2b4d@name (G2b27@f G2b29@ls (cdr G2b2a@exts) (cons G2b4d@name G2b2b@failed-list)))) (string-append (car G2b29@ls) G2b25@str (car G2b2a@exts)))))))) G2b27@f) (G2ab4@library-path) (G2ab6@library-extensions) '())) (G2ab8@library-name->file-name G2b23@x))) (lambda (G2b4f@f) (if (procedure? G2b4f@f) G2b4f@f (assertion-violation 'file-locator '"not a procedure" G2b4f@f))))) (set! G2abc@serialize-all (lambda (G2b51@serialize G2b52@compile) ((lambda (G2b56@library-desc) (begin (set! G2b56@library-desc (lambda (G2b59@x) (list (G2a76@library-id G2b59@x) (G2a78@library-name G2b59@x)))) (for-each (lambda (G2b57@x) (if (G2a90@library-source-file-name G2b57@x) (G2b51@serialize (G2a90@library-source-file-name G2b57@x) (list (G2a76@library-id G2b57@x) (G2a78@library-name G2b57@x) (G2a7a@library-version G2b57@x) (map G2b56@library-desc (G2a7c@library-imp* G2b57@x)) (map G2b56@library-desc (G2a7e@library-vis* G2b57@x)) (map G2b56@library-desc (G2a80@library-inv* G2b57@x)) (G2a82@library-subst G2b57@x) (G2a84@library-env G2b57@x) (G2b52@compile (G2a8a@library-visit-code G2b57@x)) (G2b52@compile (G2a8c@library-invoke-code G2b57@x)) (G2a8e@library-visible? G2b57@x))) (void))) ((G2a63@current-library-collection))))) '#f))) (set! G2abe@current-precompiled-library-loader (G29a0@G28ab@make-parameter (lambda (G2b5b@filename G2b5c@sk) '#f))) (set! G2ac0@try-load-from-file (lambda (G2b5f@filename) ((G2abe@current-precompiled-library-loader) G2b5f@filename (lambda G2b85 ((lambda (G2b86) (if (= G2b86 '11) (apply (lambda (G2b61@id G2b62@name G2b63@ver G2b64@imp* G2b65@vis* G2b66@inv* G2b67@exp-subst G2b68@exp-env G2b69@visit-proc G2b6a@invoke-proc G2b6b@visible?) ((letrec ((G2b77@f (lambda (G2b79@deps) (if (null? G2b79@deps) (begin (G2ad4@install-library G2b61@id G2b62@name G2b63@ver G2b64@imp* G2b65@vis* G2b66@inv* G2b67@exp-subst G2b68@exp-env G2b69@visit-proc G2b6a@invoke-proc '#f '#f G2b6b@visible? '#f) '#t) ((lambda (G2b7b@d) ((lambda (G2b7d@label G2b7e@dname) ((lambda (G2b81@l) (if (if (G2a72@library? G2b81@l) (begin '#f (eq? G2b7d@label (G2a76@library-id G2b81@l))) '#f) (G2b77@f (cdr G2b79@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source. l=~a label=~a (library-id l)=~a\n" G2b62@name G2b7e@dname G2b5f@filename G2b81@l G2b7d@label (G2a76@library-id G2b81@l)) '#f))) (G2aca@find-library-by-name G2b7e@dname))) (car G2b7b@d) (cadr G2b7b@d))) (car G2b79@deps)))))) G2b77@f) (append G2b64@imp* G2b65@vis* G2b66@inv*))) G2b85) (if (>= G2b86 '0) (apply (lambda G2b83@others '#f) G2b85) (error 'apply '"invalid arg count")))) (length G2b85)))))) (set! G2ac2@library-loader (G29a0@G28ab@make-parameter (lambda (G2b87@x) ((lambda (G2b89@file-name) (if (not G2b89@file-name) (assertion-violation '#f '"cannot file library" G2b87@x) ((lambda (G2b8b@t) (if G2b8b@t G2b8b@t (begin '#f ((G2ac4@current-library-expander) (G299f@G28a9@read-library-source-file G2b89@file-name) G2b89@file-name (lambda (G2b8d@name) (if (not (equal? G2b8d@name G2b87@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2b91@G2b8f G2b92@G2b90) ((lambda (G2b95@e G2b96@p) (begin (display '"expected to find library " G2b96@p) (write G2b87@x G2b96@p) (display '" in file " G2b96@p) (display G2b89@file-name G2b96@p) (display '", found " G2b96@p) (write G2b8d@name G2b96@p) (display '" instead" G2b96@p) (G2b95@e))) G2b92@G2b90 G2b91@G2b8f)))) (void))))))) (G2ac0@try-load-from-file G2b89@file-name)))) ((G2aba@file-locator) G2b87@x))) (lambda (G2b99@f) (if (procedure? G2b99@f) G2b99@f (assertion-violation 'library-locator '"not a procedure" G2b99@f))))) (set! G2ac4@current-library-expander (G29a0@G28ab@make-parameter (lambda (G2b9b@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2b9d@f) (if (procedure? G2b9d@f) G2b9d@f (assertion-violation 'library-expander '"not a procedure" G2b9d@f))))) (set! G2ac6@external-pending-libraries (G29a0@G28ab@make-parameter '())) (set! G2ac8@find-external-library (lambda (G2b9f@name) (begin (if (member G2b9f@name (G2ac6@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2b9f@name) (void)) ((lambda (G2ba3@G2ba1@external-pending-libraries G2ba4@G2ba2@external-pending-libraries) ((lambda (G2ba7@swap) (dynamic-wind G2ba7@swap (lambda () (begin ((G2ac2@library-loader) G2b9f@name) ((lambda (G2ba9@t) (if G2ba9@t G2ba9@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G2b9f@name)))) (G2ab2@find-library-by (lambda (G2bab@x) (equal? (G2a78@library-name G2bab@x) G2b9f@name)))))) G2ba7@swap)) (lambda () ((lambda (G2bad@t) (begin (G2ba3@G2ba1@external-pending-libraries G2ba4@G2ba2@external-pending-libraries) (set! G2ba4@G2ba2@external-pending-libraries G2bad@t))) (G2ba3@G2ba1@external-pending-libraries))))) G2ac6@external-pending-libraries (cons G2b9f@name (G2ac6@external-pending-libraries)))))) (set! G2aca@find-library-by-name (lambda (G2baf@name) ((lambda (G2bb1@t) (if G2bb1@t G2bb1@t (begin '#f (G2ac8@find-external-library G2baf@name)))) (G2ab2@find-library-by (lambda (G2bb3@x) (equal? (G2a78@library-name G2bb3@x) G2baf@name)))))) (set! G2acc@library-exists? (lambda (G2bb5@name) (if (G2ab2@find-library-by (lambda (G2bb7@x) (equal? (G2a78@library-name G2bb7@x) G2bb5@name))) (begin '#f '#t) '#f))) (set! G2ace@find-library-by-spec/die (lambda (G2bb9@spec) ((lambda (G2bbb@id) ((lambda (G2bbd@t) (if G2bbd@t G2bbd@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G2bb9@spec)))) (G2ab2@find-library-by (lambda (G2bbf@x) (eq? G2bbb@id (G2a76@library-id G2bbf@x)))))) (car G2bb9@spec)))) (set! G2ad0@label->binding-table (make-eq-hashtable)) (set! G2ad2@install-library-record (lambda (G2bc1@lib) (begin ((lambda (G2bc3@exp-env) (for-each (lambda (G2bc5@x) ((lambda (G2bc7@label G2bc8@binding) ((lambda (G2bcb@binding) (hashtable-set! G2ad0@label->binding-table G2bc7@label G2bcb@binding)) ((lambda (G2bcd@t) (if (memv G2bcd@t '(global)) (cons 'global (cons G2bc1@lib (cdr G2bc8@binding))) (if (memv G2bcd@t '(global-macro)) (cons 'global-macro (cons G2bc1@lib (cdr G2bc8@binding))) (if (memv G2bcd@t '(global-macro!)) (cons 'global-macro! (cons G2bc1@lib (cdr G2bc8@binding))) G2bc8@binding)))) (car G2bc8@binding)))) (car G2bc5@x) (cdr G2bc5@x))) G2bc3@exp-env)) (G2a84@library-env G2bc1@lib)) ((G2a63@current-library-collection) G2bc1@lib)))) (set! G2ad4@install-library (lambda (G2bcf@id G2bd0@name G2bd1@ver G2bd2@imp* G2bd3@vis* G2bd4@inv* G2bd5@exp-subst G2bd6@exp-env G2bd7@visit-proc G2bd8@invoke-proc G2bd9@visit-code G2bda@invoke-code G2bdb@visible? G2bdc@source-file-name) ((lambda (G2beb@imp-lib* G2bec@vis-lib* G2bed@inv-lib*) (begin (if (not (if (symbol? G2bcf@id) (if (list? G2bd0@name) (begin '#f (list? G2bd1@ver)) '#f) '#f)) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2bcf@id G2bd0@name G2bd1@ver) (void)) (if (G2acc@library-exists? G2bd0@name) (assertion-violation 'install-library '"library is already installed" G2bd0@name) (void)) ((lambda (G2bf1@lib) (G2ad2@install-library-record G2bf1@lib)) (G2a74@make-library G2bcf@id G2bd0@name G2bd1@ver G2beb@imp-lib* G2bec@vis-lib* G2bed@inv-lib* G2bd5@exp-subst G2bd6@exp-env G2bd7@visit-proc G2bd8@invoke-proc G2bd9@visit-code G2bda@invoke-code G2bdb@visible? G2bdc@source-file-name)))) (map G2ace@find-library-by-spec/die G2bd2@imp*) (map G2ace@find-library-by-spec/die G2bd3@vis*) (map G2ace@find-library-by-spec/die G2bd4@inv*)))) (set! G2ad6@imported-label->binding (lambda (G2bf3@lab) (hashtable-ref G2ad0@label->binding-table G2bf3@lab '#f))) (set! G2ad8@invoke-library (lambda (G2bf5@lib) ((lambda (G2bf7@invoke) (if (procedure? G2bf7@invoke) (begin (G2aa4@set-library-invoke-state! G2bf5@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2bf5@lib))) (for-each G2ad8@invoke-library (G2a80@library-inv* G2bf5@lib)) (G2aa4@set-library-invoke-state! G2bf5@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2bf5@lib))) (G2bf7@invoke) (G2aa4@set-library-invoke-state! G2bf5@lib '#t)) (void))) (G2a88@library-invoke-state G2bf5@lib)))) (set! G2ada@visit-library (lambda (G2bf9@lib) ((lambda (G2bfb@visit) (if (procedure? G2bfb@visit) (begin (G2aa2@set-library-visit-state! G2bf9@lib (lambda () (assertion-violation 'visit '"circularity detected" G2bf9@lib))) (for-each G2ad8@invoke-library (G2a7e@library-vis* G2bf9@lib)) (G2aa2@set-library-visit-state! G2bf9@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2bf9@lib))) (G2bfb@visit) (G2aa2@set-library-visit-state! G2bf9@lib '#t)) (void))) (G2a86@library-visit-state G2bf9@lib)))) (set! G2adc@invoke-library-by-spec (lambda (G2bfd@spec) (G2ad8@invoke-library (G2ace@find-library-by-spec/die G2bfd@spec)))) (set! G2ade@installed-libraries (lambda G2c07 ((lambda (G2c08) (if (= G2c08 '1) (apply (lambda (G2bff@all?) ((letrec ((G2c01@f (lambda (G2c03@ls) (if (null? G2c03@ls) '() (if ((lambda (G2c05@t) (if G2c05@t G2c05@t (begin '#f (G2a8e@library-visible? (car G2c03@ls))))) G2bff@all?) (cons (car G2c03@ls) (G2c01@f (cdr G2c03@ls))) (G2c01@f (cdr G2c03@ls))))))) G2c01@f) ((G2a63@current-library-collection)))) G2c07) (if (= G2c08 '0) (apply (lambda () (G2ade@installed-libraries '#f)) G2c07) (error 'apply '"invalid arg count")))) (length G2c07)))) (set! G2ae0@library-spec (lambda (G2c09@x) (begin (if (not (G2a72@library? G2c09@x)) (assertion-violation 'library-spec '"not a library" G2c09@x) (void)) (list (G2a76@library-id G2c09@x) (G2a78@library-name G2c09@x) (G2a7a@library-version G2c09@x))))) (begin (set! G2c47@G2ae0@library-spec G2ae0@library-spec) (set! G2c46@G2ade@installed-libraries G2ade@installed-libraries) (set! G2c45@G2adc@invoke-library-by-spec G2adc@invoke-library-by-spec) (set! G2c44@G2ada@visit-library G2ada@visit-library) (set! G2c43@G2ad8@invoke-library G2ad8@invoke-library) (set! G2c42@G2ad6@imported-label->binding G2ad6@imported-label->binding) (set! G2c41@G2ad4@install-library G2ad4@install-library) (set! G2c40@G2ad2@install-library-record G2ad2@install-library-record) (set! G2c3f@G2ad0@label->binding-table G2ad0@label->binding-table) (set! G2c3e@G2ace@find-library-by-spec/die G2ace@find-library-by-spec/die) (set! G2c3d@G2acc@library-exists? G2acc@library-exists?) (set! G2c3c@G2aca@find-library-by-name G2aca@find-library-by-name) (set! G2c3b@G2ac8@find-external-library G2ac8@find-external-library) (set! G2c3a@G2ac6@external-pending-libraries G2ac6@external-pending-libraries) (set! G2c39@G2ac4@current-library-expander G2ac4@current-library-expander) (set! G2c38@G2ac2@library-loader G2ac2@library-loader) (set! G2c37@G2ac0@try-load-from-file G2ac0@try-load-from-file) (set! G2c36@G2abe@current-precompiled-library-loader G2abe@current-precompiled-library-loader) (set! G2c35@G2abc@serialize-all G2abc@serialize-all) (set! G2c34@G2aba@file-locator G2aba@file-locator) (set! G2c33@G2ab8@library-name->file-name G2ab8@library-name->file-name) (set! G2c32@G2ab6@library-extensions G2ab6@library-extensions) (set! G2c31@G2ab4@library-path G2ab4@library-path) (set! G2c30@G2ab2@find-library-by G2ab2@find-library-by) (set! G2c2f@G2ab0@find-dependencies G2ab0@find-dependencies) (set! G2c2e@G2aae@rp G2aae@rp) (set! G2c2d@G2aac@set-library-source-file-name! G2aac@set-library-source-file-name!) (set! G2c2c@G2aaa@set-library-visible?! G2aaa@set-library-visible?!) (set! G2c2b@G2aa8@set-library-invoke-code! G2aa8@set-library-invoke-code!) (set! G2c2a@G2aa6@set-library-visit-code! G2aa6@set-library-visit-code!) (set! G2c29@G2aa4@set-library-invoke-state! G2aa4@set-library-invoke-state!) (set! G2c28@G2aa2@set-library-visit-state! G2aa2@set-library-visit-state!) (set! G2c27@G2aa0@set-library-env! G2aa0@set-library-env!) (set! G2c26@G2a9e@set-library-subst! G2a9e@set-library-subst!) (set! G2c25@G2a9c@set-library-inv*! G2a9c@set-library-inv*!) (set! G2c24@G2a9a@set-library-vis*! G2a9a@set-library-vis*!) (set! G2c23@G2a98@set-library-imp*! G2a98@set-library-imp*!) (set! G2c22@G2a96@set-library-version! G2a96@set-library-version!) (set! G2c21@G2a94@set-library-name! G2a94@set-library-name!) (set! G2c20@G2a92@set-library-id! G2a92@set-library-id!) (set! G2c1f@G2a90@library-source-file-name G2a90@library-source-file-name) (set! G2c1e@G2a8e@library-visible? G2a8e@library-visible?) (set! G2c1d@G2a8c@library-invoke-code G2a8c@library-invoke-code) (set! G2c1c@G2a8a@library-visit-code G2a8a@library-visit-code) (set! G2c1b@G2a88@library-invoke-state G2a88@library-invoke-state) (set! G2c1a@G2a86@library-visit-state G2a86@library-visit-state) (set! G2c19@G2a84@library-env G2a84@library-env) (set! G2c18@G2a82@library-subst G2a82@library-subst) (set! G2c17@G2a80@library-inv* G2a80@library-inv*) (set! G2c16@G2a7e@library-vis* G2a7e@library-vis*) (set! G2c15@G2a7c@library-imp* G2a7c@library-imp*) (set! G2c14@G2a7a@library-version G2a7a@library-version) (set! G2c13@G2a78@library-name G2a78@library-name) (set! G2c12@G2a76@library-id G2a76@library-id) (set! G2c11@G2a74@make-library G2a74@make-library) (set! G2c10@G2a72@library? G2a72@library?) (set! G2c0f@G2a6d@G2a65 G2a6d@G2a65) (set! G2c0e@G2a6b@G2a66 G2a6b@G2a66) (set! G2c0d@G2a69@G2a64 G2a69@G2a64) (set! G2c0c@G2a63@current-library-collection G2a63@current-library-collection) (set! G2c0b@G2a61@make-collection G2a61@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2c4a@build-global-define G2cce@build-lambda G2cd0@build-case-lambda G2cd2@build-let G2d1a@build-sequence G2d1c@build-void G2d1e@build-letrec G2d20@build-letrec* G2d22@build-library-letrec* G2d24@build-receive) (begin (set! G2c4a@build-global-define (lambda (G2d25@x) (G2d1c@build-void))) (set! G2cce@build-lambda (lambda (G2d27@ae G2d28@vars G2d29@exp) (list 'lambda G2d28@vars G2d29@exp))) (set! G2cd0@build-case-lambda (lambda (G2d2d@ae G2d2e@vars* G2d2f@exp*) ((lambda (G2d34@build-error G2d36@build-pred G2d38@build-apply G2d3a@expand-case-lambda) (begin (set! G2d34@build-error (lambda (G2d69@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2d36@build-pred (lambda (G2d53@ae G2d54@n G2d55@vars) (call-with-values (lambda () ((letrec ((G2d5b@f (lambda (G2d5d@vars G2d5e@count) (if (pair? G2d5d@vars) (G2d5b@f (cdr G2d5d@vars) (+ G2d5e@count '1)) (if (null? G2d5d@vars) (values G2d5e@count '=) (values G2d5e@count '>=)))))) G2d5b@f) G2d55@vars '0)) (lambda (G2d61@G2d59 G2d62@G2d5a) ((lambda (G2d65@pred G2d66@count) (list (list 'primitive G2d65@pred) G2d54@n (list 'quote G2d66@count))) G2d62@G2d5a G2d61@G2d59))))) (set! G2d38@build-apply (lambda (G2d4b@ae G2d4c@g G2d4d@vars G2d4e@exp) (list '(primitive apply) (G2cce@build-lambda G2d4b@ae G2d4d@vars G2d4e@exp) G2d4c@g))) (set! G2d3a@expand-case-lambda (lambda (G2d3b@ae G2d3c@vars G2d3d@exp*) ((lambda (G2d41@g G2d42@n) (list 'lambda G2d41@g (G2cd2@build-let G2d3b@ae (list G2d42@n) (list (list '(primitive length) G2d41@g)) ((letrec ((G2d45@f (lambda (G2d47@vars* G2d48@exp*) (if (null? G2d47@vars*) (G2d34@build-error G2d3b@ae) (list 'if (G2d36@build-pred G2d3b@ae G2d42@n (car G2d47@vars*)) (G2d38@build-apply G2d3b@ae G2d41@g (car G2d47@vars*) (car G2d48@exp*)) (G2d45@f (cdr G2d47@vars*) (cdr G2d48@exp*))))))) G2d45@f) G2d2e@vars* G2d3d@exp*)))) (gensym) (gensym)))) (if (= (length G2d2f@exp*) '1) (G2cce@build-lambda G2d2d@ae (car G2d2e@vars*) (car G2d2f@exp*)) (G2d3a@expand-case-lambda G2d2d@ae G2d2e@vars* G2d2f@exp*)))) '#f '#f '#f '#f))) (set! G2cd2@build-let (lambda (G2d6b@ae G2d6c@lhs* G2d6d@rhs* G2d6e@body) (cons (G2cce@build-lambda G2d6b@ae G2d6c@lhs* G2d6e@body) G2d6d@rhs*))) (set! G2d1a@build-sequence (lambda (G2d73@ae G2d74@exps) ((letrec ((G2d77@loop (lambda (G2d79@exps) (if (null? (cdr G2d79@exps)) (car G2d79@exps) (if (equal? (car G2d79@exps) (G2d1c@build-void)) (G2d77@loop (cdr G2d79@exps)) (cons 'begin G2d79@exps)))))) G2d77@loop) G2d74@exps))) (set! G2d1c@build-void (lambda () '((primitive void)))) (set! G2d1e@build-letrec (lambda (G2d7b@ae G2d7c@vars G2d7d@val-exps G2d7e@body-exp) (if (null? G2d7c@vars) G2d7e@body-exp (list 'letrec (map list G2d7c@vars G2d7d@val-exps) G2d7e@body-exp)))) (set! G2d20@build-letrec* (lambda (G2d83@ae G2d84@vars G2d85@val-exps G2d86@body-exp) (if (null? G2d84@vars) G2d86@body-exp (G2cd2@build-let G2d83@ae G2d84@vars (map (lambda (G2d8b@x) (list 'quote '#f)) G2d84@vars) (G2d1a@build-sequence G2d83@ae (append (map (lambda (G2d8d@lhs G2d8e@rhs) (list 'set! G2d8d@lhs G2d8e@rhs)) G2d84@vars G2d85@val-exps) (list G2d86@body-exp))))))) (set! G2d22@build-library-letrec* (lambda (G2d91@ae G2d92@name G2d93@vars G2d94@locs G2d95@val-exps G2d96@body-exp) (list 'library-letrec* G2d92@name (map list G2d93@vars G2d94@locs G2d95@val-exps) G2d96@body-exp))) (set! G2d24@build-receive (lambda (G2d9d@ae G2d9e@vars G2d9f@producer G2da0@body*) (begin (display '"************** in ") (cons 'receive (cons G2d9e@vars (cons G2d9f@producer G2da0@body*)))))) (begin (set! G2dae@G2d24@build-receive G2d24@build-receive) (set! G2dad@G2d22@build-library-letrec* G2d22@build-library-letrec*) (set! G2dac@G2d20@build-letrec* G2d20@build-letrec*) (set! G2dab@G2d1e@build-letrec G2d1e@build-letrec) (set! G2daa@G2d1c@build-void G2d1c@build-void) (set! G2da9@G2d1a@build-sequence G2d1a@build-sequence) (set! G2da8@G2cd2@build-let G2cd2@build-let) (set! G2da7@G2cd0@build-case-lambda G2cd0@build-case-lambda) (set! G2da6@G2cce@build-lambda G2cce@build-lambda) (set! G2da5@G2c4a@build-global-define G2c4a@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2dbb@set-cons G2dbd@set-union G2dc2@top-mark* G2dc4@top-marked? G2dc6@gen-lexical G2dc8@gen-global G2dca@gen-label G2dcc@gen-top-level-label G2dce@gen-define-label+loc G2dd0@gen-define-label G2dd6@G2dd1 G2dd8@G2dd3 G2dda@G2dd2 G2ddf@rib? G2de1@make-rib G2de3@rib-sym* G2de5@rib-mark** G2de7@rib-label* G2de9@rib-sealed/freq G2deb@rib-cache G2ded@set-rib-sym*! G2def@set-rib-mark**! G2df1@set-rib-label*! G2df3@set-rib-sealed/freq! G2df5@set-rib-cache! G2df7@make-empty-rib G2df9@make-cache-rib G2dfb@find-label G2dfd@extend-rib! G2dff@extend-rib/nc! G2e01@make-rib-map G2e03@seal-rib! G2e05@unseal-rib! G2e07@make-full-rib G2e0d@G2e08 G2e0f@G2e0a G2e11@G2e09 G2e16@stx? G2e18@make-stx G2e1a@stx-expr G2e1c@stx-mark* G2e1e@stx-subst* G2e20@stx-ae* G2e22@set-stx-expr! G2e24@set-stx-mark*! G2e26@set-stx-subst*! G2e28@set-stx-ae*! G2e2a@rp G2e2c@datum->stx G2e2e@gen-mark G2e30@anti-mark G2e32@anti-mark? G2e34@join-wraps G2e36@mkstx G2e38@add-mark G2e3a@add-subst G2e3c@syntax-kind? G2e3e@syntax-vector->list G2e40@syntax-pair? G2e42@syntax-vector? G2e44@syntax-null? G2e46@syntax-list? G2e48@syntax-car G2e4a@syntax-cdr G2e4c@syntax->list G2e4e@id? G2e50@id->sym G2e52@same-marks? G2e54@bound-id=? G2e56@free-id=? G2e58@valid-bound-ids? G2e5a@distinct-bound-ids? G2e5c@bound-id-member? G2e5e@self-evaluating? G2e60@strip-annotations G2e62@strip G2e64@stx->datum G2e66@same-marks*? G2e68@id->label G2e6a@id->real-label G2e6c@label->binding G2e6e@make-binding G2e70@binding-type G2e72@binding-value G2e74@raise-unbound-error G2e76@syntax-type G2e8d@sanitize-binding G2e8f@make-variable-transformer G2e91@variable-transformer? G2e93@variable-transformer-procedure G2e95@make-eval-transformer G3019@parse-define G301b@parse-define-syntax G301d@scheme-stx-hashtable G301f@scheme-stx G3021@lexical-var G3023@lexical-mutable? G3025@set-lexical-mutable! G3027@add-lexical G3029@add-lexicals G302b@letrec-helper G302d@letrec-transformer G302f@letrec*-transformer G3031@fluid-let-syntax-transformer G3033@type-descriptor-transformer G3035@record-type-descriptor-transformer G3037@record-constructor-descriptor-transformer G3039@when-macro G303b@unless-macro G303d@if-transformer G303f@case-macro G3041@quote-transformer G3043@case-lambda-transformer G3045@lambda-transformer G3047@bless G3049@with-syntax-macro G304b@invalid-fmls-error G304d@let-macro G304f@let-values-macro G3051@let*-values-macro G3053@trace-lambda-macro G3055@trace-define-macro G3057@trace-define-syntax-macro G3059@trace-let/rec-syntax G305b@trace-let-syntax-macro G305d@trace-letrec-syntax-macro G305f@guard-macro G3061@define-enumeration-macro G3063@time-macro G3065@delay-macro G3067@assert-macro G3069@endianness-macro G306b@identifier-syntax-macro G306d@do-macro G306f@let*-macro G3071@or-macro G3073@and-macro G3075@cond-macro G3077@do-include G3079@include-macro G307b@include-into-macro G307d@syntax-rules-macro G307f@quasiquote-macro G3081@quasisyntax-macro G3083@define-struct-macro G3085@define-record-type-macro G3087@define-condition-type-macro G3089@incorrect-usage-macro G308b@parameterize-macro G308d@foreign-call-transformer G308f@convert-pattern G3091@syntax-dispatch G3093@ellipsis? G3095@underscore? G3097@verify-literals G3099@syntax-case-transformer G309b@ellipsis-map G309d@syntax-transformer G309f@core-macro-transformer G30a1@file-options-macro G30a3@symbol-macro G30a5@macro-transformer G30a7@local-macro-transformer G30a9@do-macro-call G30ab@chi-macro G30ad@chi-local-macro G30af@chi-global-macro G30b1@chi-expr* G30b3@chi-application G30b5@chi-expr G30b7@chi-set! G30b9@verify-formals G30bb@chi-lambda-clause G30bd@chi-lambda-clause* G30bf@chi-defun G30c1@chi-rhs G30c3@expand-interaction-rhs*/init* G30c5@chi-rhs* G30c7@find-bound=? G30c9@find-dups G30cb@chi-internal G30cd@parse-module G30d3@G30ce G30d5@G30d0 G30d7@G30cf G30dc@module-interface? G30de@make-module-interface G30e0@module-interface-first-mark G30e2@module-interface-exp-id-vec G30e4@module-interface-exp-lab-vec G30e6@set-module-interface-first-mark! G30e8@set-module-interface-exp-id-vec! G30ea@set-module-interface-exp-lab-vec! G30ec@module-interface-exp-id* G30ee@chi-internal-module G30f0@chi-body* G30f2@expand-transformer G30f4@parse-exports G30f6@parse-library-name G30f8@parse-library G30fa@parse-import-spec* G30fc@make-top-rib G30fe@make-collector G3100@inv-collector G3102@vis-collector G3104@imp-collector G3106@chi-library-internal G3108@chi-interaction-expr G310a@library-body-expander G310c@core-library-expander G310e@parse-top-level-program G3110@top-level-expander G3116@G3111 G3118@G3113 G311a@G3112 G311f@env? G3121@make-env G3123@env-names G3125@env-labels G3127@env-itc G3129@set-env-names! G312b@set-env-labels! G312d@set-env-itc! G312f@rp G3135@G3130 G3137@G3132 G3139@G3131 G313e@interaction-env? G3140@make-interaction-env G3142@interaction-env-rib G3144@interaction-env-r G3146@interaction-env-locs G3148@set-interaction-env-rib! G314a@set-interaction-env-r! G314c@set-interaction-env-locs! G314e@rp G3150@interaction-environment-symbols G3152@environment-bindings G3154@parse-binding G3156@environment? G3158@environment-symbols G315a@environment G315c@null-environment G315e@scheme-report-environment G3160@expand G3162@eval G3164@library-expander G3166@boot-library-expand G3168@rev-map-append G316a@build-exports G316c@make-export-subst G316e@make-export-env/macros G3170@generate-temporaries G3172@free-identifier=? G3174@bound-identifier=? G3176@make-source-condition G3178@extract-position-condition G317a@expression-position G317c@assertion-error G317e@syntax-error G3180@extract-trace G3182@syntax-violation* G3184@syntax-violation G3186@identifier? G3188@datum->syntax G318a@syntax->datum G318c@compile-r6rs-top-level G318e@pre-compile-r6rs-top-level G3190@interaction-environment G3192@top-level-context) (begin (set! G2dbb@set-cons (lambda (G3193@x G3194@ls) (if (memq G3193@x G3194@ls) G3194@ls (cons G3193@x G3194@ls)))) (set! G2dbd@set-union (lambda (G3197@ls1 G3198@ls2) (if (null? G3197@ls1) G3198@ls2 (if (memq (car G3197@ls1) G3198@ls2) (G2dbd@set-union (cdr G3197@ls1) G3198@ls2) (cons (car G3197@ls1) (G2dbd@set-union (cdr G3197@ls1) G3198@ls2)))))) (set! G2dc2@top-mark* '(top)) (set! G2dc4@top-marked? (lambda (G319b@m*) (memq 'top G319b@m*))) (set! G2dc6@gen-lexical (lambda (G319d@sym) (if (symbol? G319d@sym) (gensym G319d@sym) (if (G2e16@stx? G319d@sym) (G2dc6@gen-lexical (G2e50@id->sym G319d@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G319d@sym))))) (set! G2dc8@gen-global (lambda (G319f@x) (G2dc6@gen-lexical G319f@x))) (set! G2dca@gen-label (lambda (G31a1@_) (gensym))) (set! G2dcc@gen-top-level-label (lambda (G31a3@id G31a4@rib) ((lambda (G31a8@find) (begin (set! G31a8@find (lambda (G31b3@sym G31b4@mark* G31b5@sym* G31b6@mark** G31b7@label*) (if (pair? G31b5@sym*) (begin '#f (if (if (eq? G31b3@sym (car G31b5@sym*)) (begin '#f (G2e52@same-marks? G31b4@mark* (car G31b6@mark**))) '#f) (car G31b7@label*) (G31a8@find G31b3@sym G31b4@mark* (cdr G31b5@sym*) (cdr G31b6@mark**) (cdr G31b7@label*)))) '#f))) ((lambda (G31a9@sym G31aa@mark*) ((lambda (G31ad@sym*) ((lambda (G31af@t) (if G31af@t ((lambda (G31b1@label) (if (G2c42@G2ad6@imported-label->binding G31b1@label) (gensym) G31b1@label)) G31af@t) (gensym))) (if (memq G31a9@sym (G2de3@rib-sym* G31a4@rib)) (begin '#f (G31a8@find G31a9@sym G31aa@mark* G31ad@sym* (G2de5@rib-mark** G31a4@rib) (G2de7@rib-label* G31a4@rib))) '#f))) (G2de3@rib-sym* G31a4@rib))) (G2e50@id->sym G31a3@id) (G2e1c@stx-mark* G31a3@id)))) '#f))) (set! G2dce@gen-define-label+loc (lambda (G31bd@id G31be@rib) ((lambda (G31c1@t) (if G31c1@t ((lambda (G31c3@env) ((lambda (G31c5@label G31c6@locs) (values G31c5@label ((lambda (G31c9@t) (if G31c9@t (cdr G31c9@t) ((lambda (G31cb@loc) (begin (G314c@set-interaction-env-locs! G31c3@env (cons (cons G31c5@label G31cb@loc) G31c6@locs)) G31cb@loc)) (G2dc6@gen-lexical G31bd@id)))) (assq G31c5@label G31c6@locs)))) (G2dcc@gen-top-level-label G31bd@id G31be@rib) (G3146@interaction-env-locs G31c3@env))) G31c1@t) (values (gensym) (G2dc6@gen-lexical G31bd@id)))) (G3192@top-level-context)))) (set! G2dd0@gen-define-label (lambda (G31cd@id G31ce@rib) (if (G3192@top-level-context) (G2dcc@gen-top-level-label G31cd@id G31ce@rib) (gensym)))) (set! G2dd6@G2dd1 (make-record-type-descriptor 'rib '#f 'G2dd4 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2dd8@G2dd3 '#f) (set! G2dda@G2dd2 (make-record-constructor-descriptor G2dd6@G2dd1 '#f G2dd8@G2dd3)) (set! G2ddf@rib? (record-predicate G2dd6@G2dd1)) (set! G2de1@make-rib (record-constructor G2dda@G2dd2)) (set! G2de3@rib-sym* (record-accessor G2dd6@G2dd1 '0)) (set! G2de5@rib-mark** (record-accessor G2dd6@G2dd1 '1)) (set! G2de7@rib-label* (record-accessor G2dd6@G2dd1 '2)) (set! G2de9@rib-sealed/freq (record-accessor G2dd6@G2dd1 '3)) (set! G2deb@rib-cache (record-accessor G2dd6@G2dd1 '4)) (set! G2ded@set-rib-sym*! (record-mutator G2dd6@G2dd1 '0)) (set! G2def@set-rib-mark**! (record-mutator G2dd6@G2dd1 '1)) (set! G2df1@set-rib-label*! (record-mutator G2dd6@G2dd1 '2)) (set! G2df3@set-rib-sealed/freq! (record-mutator G2dd6@G2dd1 '3)) (set! G2df5@set-rib-cache! (record-mutator G2dd6@G2dd1 '4)) (set! G2df7@make-empty-rib (lambda () (G2de1@make-rib '() '() '() '#f '#f))) (set! G2df9@make-cache-rib (lambda () (G2de1@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2dfb@find-label (lambda (G31d1@rib G31d2@sym G31d3@mark*) ((lambda (G31d7@ht) (if G31d7@ht (begin '#f ((lambda (G31d9@cv) ((lambda (G31db@t) (if G31db@t (cdr G31db@t) '#f)) (if G31d9@cv (begin '#f (assp (lambda (G31dd@m) (G2e52@same-marks? G31d3@mark* G31dd@m)) G31d9@cv)) '#f))) (hashtable-ref G31d7@ht G31d2@sym '#f))) '#f)) (G2deb@rib-cache G31d1@rib)))) (set! G2dfd@extend-rib! (lambda (G31df@rib G31e0@id G31e1@label) ((lambda (G31e6@find) (begin (set! G31e6@find (lambda (G31f7@sym G31f8@mark* G31f9@sym* G31fa@mark** G31fb@label*) (if (pair? G31f9@sym*) (begin '#f (if (if (eq? G31f7@sym (car G31f9@sym*)) (begin '#f (G2e52@same-marks? G31f8@mark* (car G31fa@mark**))) '#f) G31fb@label* (G31e6@find G31f7@sym G31f8@mark* (cdr G31f9@sym*) (cdr G31fa@mark**) (cdr G31fb@label*)))) '#f))) (begin (if (G2de9@rib-sealed/freq G31df@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G31df@rib) (void)) ((lambda (G31e7@sym G31e8@mark*) ((lambda (G31eb@sym*) ((lambda (G31ed@t) (if G31ed@t ((lambda (G31ef@p) (if (not (eq? G31e1@label G31ef@p)) (G3184@syntax-violation '#f '"multiple definitions of identifier" G31e0@id) (void))) G31ed@t) ((lambda (G31f1@t) (if G31f1@t ((lambda (G31f3@p) (if (not (eq? G31e1@label (car G31f3@p))) (if (G3192@top-level-context) (set-car! G31f3@p G31e1@label) (G3184@syntax-violation '#f '"multiple definitions of identifier" G31e0@id)) (void))) G31f1@t) (begin (if (G2deb@rib-cache G31df@rib) (hashtable-update! (G2deb@rib-cache G31df@rib) G31e7@sym (lambda (G31f5@e) (cons (cons G31e8@mark* G31e1@label) G31f5@e)) '()) (void)) (G2ded@set-rib-sym*! G31df@rib (cons G31e7@sym G31eb@sym*)) (G2def@set-rib-mark**! G31df@rib (cons G31e8@mark* (G2de5@rib-mark** G31df@rib))) (G2df1@set-rib-label*! G31df@rib (cons G31e1@label (G2de7@rib-label* G31df@rib)))))) (if (memq G31e7@sym (G2de3@rib-sym* G31df@rib)) (begin '#f (G31e6@find G31e7@sym G31e8@mark* G31eb@sym* (G2de5@rib-mark** G31df@rib) (G2de7@rib-label* G31df@rib))) '#f)))) (G2dfb@find-label G31df@rib G31e7@sym G31e8@mark*))) (G2de3@rib-sym* G31df@rib))) (G2e50@id->sym G31e0@id) (G2e1c@stx-mark* G31e0@id))))) '#f))) (set! G2dff@extend-rib/nc! (lambda (G3201@rib G3202@id G3203@label) ((lambda (G3207@sym G3208@mark*) ((lambda (G320b@sym*) (begin (if (G2deb@rib-cache G3201@rib) (hashtable-update! (G2deb@rib-cache G3201@rib) G3207@sym (lambda (G320d@e) (cons (cons G3208@mark* G3203@label) G320d@e)) '()) (void)) (G2ded@set-rib-sym*! G3201@rib (cons G3207@sym G320b@sym*)) (G2def@set-rib-mark**! G3201@rib (cons G3208@mark* (G2de5@rib-mark** G3201@rib))) (G2df1@set-rib-label*! G3201@rib (cons G3203@label (G2de7@rib-label* G3201@rib))))) (G2de3@rib-sym* G3201@rib))) (G2e50@id->sym G3202@id) (G2e1c@stx-mark* G3202@id)))) (set! G2e01@make-rib-map (lambda (G320f@sym*) ((lambda (G3211@ht) ((letrec ((G3213@f (lambda (G3215@i G3216@sym*) (if (null? G3216@sym*) G3211@ht (begin (hashtable-update! G3211@ht (car G3216@sym*) (lambda (G3219@x) (cons G3215@i G3219@x)) '()) (G3213@f (+ G3215@i '1) (cdr G3216@sym*))))))) G3213@f) '0 G320f@sym*)) (make-eq-hashtable)))) (set! G2e03@seal-rib! (lambda (G321b@rib) ((lambda (G321d@sym*) (if (not (null? G321d@sym*)) (begin (G2ded@set-rib-sym*! G321b@rib (list->vector G321d@sym*)) (G2def@set-rib-mark**! G321b@rib (list->vector (G2de5@rib-mark** G321b@rib))) (G2df1@set-rib-label*! G321b@rib (list->vector (G2de7@rib-label* G321b@rib))) (G2df3@set-rib-sealed/freq! G321b@rib (G2e01@make-rib-map G321d@sym*))) (void))) (G2de3@rib-sym* G321b@rib)))) (set! G2e05@unseal-rib! (lambda (G321f@rib) (if (G2de9@rib-sealed/freq G321f@rib) (begin (G2df3@set-rib-sealed/freq! G321f@rib '#f) (G2ded@set-rib-sym*! G321f@rib (vector->list (G2de3@rib-sym* G321f@rib))) (G2def@set-rib-mark**! G321f@rib (vector->list (G2de5@rib-mark** G321f@rib))) (G2df1@set-rib-label*! G321f@rib (vector->list (G2de7@rib-label* G321f@rib)))) (void)))) (set! G2e07@make-full-rib (lambda (G3221@id* G3222@label*) ((lambda (G3225@r) (begin (G2e03@seal-rib! G3225@r) G3225@r)) (G2de1@make-rib (map G2e50@id->sym G3221@id*) (map G2e1c@stx-mark* G3221@id*) G3222@label* '#f '#f)))) (set! G2e0d@G2e08 (make-record-type-descriptor 'stx '#f 'G2e0b '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2e0f@G2e0a '#f) (set! G2e11@G2e09 (make-record-constructor-descriptor G2e0d@G2e08 '#f G2e0f@G2e0a)) (set! G2e16@stx? (record-predicate G2e0d@G2e08)) (set! G2e18@make-stx (record-constructor G2e11@G2e09)) (set! G2e1a@stx-expr (record-accessor G2e0d@G2e08 '0)) (set! G2e1c@stx-mark* (record-accessor G2e0d@G2e08 '1)) (set! G2e1e@stx-subst* (record-accessor G2e0d@G2e08 '2)) (set! G2e20@stx-ae* (record-accessor G2e0d@G2e08 '3)) (set! G2e22@set-stx-expr! (record-mutator G2e0d@G2e08 '0)) (set! G2e24@set-stx-mark*! (record-mutator G2e0d@G2e08 '1)) (set! G2e26@set-stx-subst*! (record-mutator G2e0d@G2e08 '2)) (set! G2e28@set-stx-ae*! (record-mutator G2e0d@G2e08 '3)) (set! G2e2a@rp (G299d@G28a5@make-record-printer 'stx (lambda (G3227@x G3228@p G3229@wr) (begin (display '"#<syntax " G3228@p) (write (G2e64@stx->datum G3227@x) G3228@p) ((lambda (G322d@expr) (if (G2995@G2895@annotation? G322d@expr) ((lambda (G322f@src) (if (pair? G322f@src) (begin (display '" [" G3228@p) (display (cdr G322f@src) G3228@p) (display '" of " G3228@p) (display (car G322f@src) G3228@p) (display '"]" G3228@p)) (void))) (G2996@G2897@annotation-source G322d@expr)) (void))) (G2e1a@stx-expr G3227@x)) (display '">" G3228@p))))) (set! G2e2c@datum->stx (lambda (G3231@id G3232@datum) (G2e18@make-stx G3232@datum (G2e1c@stx-mark* G3231@id) (G2e1e@stx-subst* G3231@id) (G2e20@stx-ae* G3231@id)))) (set! G2e2e@gen-mark (lambda () (string '#\m))) (set! G2e30@anti-mark '#f) (set! G2e32@anti-mark? not) (set! G2e34@join-wraps (lambda (G3235@m1* G3236@s1* G3237@ae1* G3238@e) ((lambda (G323e@cancel) (begin (set! G323e@cancel (lambda (G3245@ls1 G3246@ls2) ((letrec ((G3249@f (lambda (G324b@x G324c@ls1) (if (null? G324c@ls1) (cdr G3246@ls2) (cons G324b@x (G3249@f (car G324c@ls1) (cdr G324c@ls1))))))) G3249@f) (car G3245@ls1) (cdr G3245@ls1)))) ((lambda (G323f@m2* G3240@s2* G3241@ae2*) (if (if (not (null? G3235@m1*)) (if (not (null? G323f@m2*)) (begin '#f (G2e32@anti-mark? (car G323f@m2*))) '#f) '#f) (values (G323e@cancel G3235@m1* G323f@m2*) (G323e@cancel G3236@s1* G3240@s2*) (G323e@cancel G3237@ae1* G3241@ae2*)) (values (append G3235@m1* G323f@m2*) (append G3236@s1* G3240@s2*) (append G3237@ae1* G3241@ae2*)))) (G2e1c@stx-mark* G3238@e) (G2e1e@stx-subst* G3238@e) (G2e20@stx-ae* G3238@e)))) '#f))) (set! G2e36@mkstx (lambda (G324f@e G3250@m* G3251@s* G3252@ae*) (if (if (G2e16@stx? G324f@e) (begin '#f (not (G2dc4@top-marked? G3250@m*))) '#f) (call-with-values (lambda () (G2e34@join-wraps G3250@m* G3251@s* G3252@ae* G324f@e)) (lambda (G325a@G3257 G325b@G3258 G325c@G3259) ((lambda (G3260@ae* G3261@s* G3262@m*) (G2e18@make-stx (G2e1a@stx-expr G324f@e) G3262@m* G3261@s* G3260@ae*)) G325c@G3259 G325b@G3258 G325a@G3257))) (G2e18@make-stx G324f@e G3250@m* G3251@s* G3252@ae*)))) (set! G2e38@add-mark (lambda (G3266@m G3267@e G3268@ae) (G2e36@mkstx G3267@e (list G3266@m) '(shift) (list G3268@ae)))) (set! G2e3a@add-subst (lambda (G326c@subst G326d@e) (G2e36@mkstx G326d@e '() (list G326c@subst) '()))) (set! G2e3c@syntax-kind? (lambda (G3270@x G3271@p?) (if (G2e16@stx? G3270@x) (G2e3c@syntax-kind? (G2e1a@stx-expr G3270@x) G3271@p?) (if (G2995@G2895@annotation? G3270@x) (G2e3c@syntax-kind? (G2997@G2899@annotation-expression G3270@x) G3271@p?) (G3271@p? G3270@x))))) (set! G2e3e@syntax-vector->list (lambda (G3274@x) (if (G2e16@stx? G3274@x) ((lambda (G3276@ls G3277@m* G3278@s* G3279@ae*) (map (lambda (G327e@x) (G2e36@mkstx G327e@x G3277@m* G3278@s* G3279@ae*)) G3276@ls)) (G2e3e@syntax-vector->list (G2e1a@stx-expr G3274@x)) (G2e1c@stx-mark* G3274@x) (G2e1e@stx-subst* G3274@x) (G2e20@stx-ae* G3274@x)) (if (G2995@G2895@annotation? G3274@x) (G2e3e@syntax-vector->list (G2997@G2899@annotation-expression G3274@x)) (if (vector? G3274@x) (vector->list G3274@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G3274@x)))))) (set! G2e40@syntax-pair? (lambda (G3280@x) (G2e3c@syntax-kind? G3280@x pair?))) (set! G2e42@syntax-vector? (lambda (G3282@x) (G2e3c@syntax-kind? G3282@x vector?))) (set! G2e44@syntax-null? (lambda (G3284@x) (G2e3c@syntax-kind? G3284@x null?))) (set! G2e46@syntax-list? (lambda (G3286@x) ((lambda (G3288@t) (if G3288@t G3288@t (begin '#f (if (G2e40@syntax-pair? G3286@x) (begin '#f (G2e46@syntax-list? (G2e4a@syntax-cdr G3286@x))) '#f)))) (G2e44@syntax-null? G3286@x)))) (set! G2e48@syntax-car (lambda (G328a@x) (if (G2e16@stx? G328a@x) (G2e36@mkstx (G2e48@syntax-car (G2e1a@stx-expr G328a@x)) (G2e1c@stx-mark* G328a@x) (G2e1e@stx-subst* G328a@x) (G2e20@stx-ae* G328a@x)) (if (G2995@G2895@annotation? G328a@x) (G2e48@syntax-car (G2997@G2899@annotation-expression G328a@x)) (if (pair? G328a@x) (car G328a@x) (assertion-violation 'syntax-car '"BUG: not a pair" G328a@x)))))) (set! G2e4a@syntax-cdr (lambda (G328c@x) (if (G2e16@stx? G328c@x) (G2e36@mkstx (G2e4a@syntax-cdr (G2e1a@stx-expr G328c@x)) (G2e1c@stx-mark* G328c@x) (G2e1e@stx-subst* G328c@x) (G2e20@stx-ae* G328c@x)) (if (G2995@G2895@annotation? G328c@x) (G2e4a@syntax-cdr (G2997@G2899@annotation-expression G328c@x)) (if (pair? G328c@x) (cdr G328c@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G328c@x)))))) (set! G2e4c@syntax->list (lambda (G328e@x) (if (G2e40@syntax-pair? G328e@x) (cons (G2e48@syntax-car G328e@x) (G2e4c@syntax->list (G2e4a@syntax-cdr G328e@x))) (if (G2e44@syntax-null? G328e@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G328e@x))))) (set! G2e4e@id? (lambda (G3290@x) (if (G2e16@stx? G3290@x) (begin '#f ((lambda (G3292@expr) (symbol? (if (G2995@G2895@annotation? G3292@expr) (G2994@G2893@annotation-stripped G3292@expr) G3292@expr))) (G2e1a@stx-expr G3290@x))) '#f))) (set! G2e50@id->sym (lambda (G3294@x) (begin (if (not (G2e16@stx? G3294@x)) (error 'id->sym '"BUG in ikarus: not an id" G3294@x) (void)) ((lambda (G3296@expr) ((lambda (G3298@sym) (if (symbol? G3298@sym) G3298@sym (error 'id->sym '"BUG in ikarus: not an id" G3294@x))) (if (G2995@G2895@annotation? G3296@expr) (G2994@G2893@annotation-stripped G3296@expr) G3296@expr))) (G2e1a@stx-expr G3294@x))))) (set! G2e52@same-marks? (lambda (G329a@x G329b@y) ((lambda (G329e@t) (if G329e@t G329e@t (begin '#f (if (pair? G329a@x) (if (pair? G329b@y) (if (eq? (car G329a@x) (car G329b@y)) (begin '#f (G2e52@same-marks? (cdr G329a@x) (cdr G329b@y))) '#f) '#f) '#f)))) (if (null? G329a@x) (begin '#f (null? G329b@y)) '#f)))) (set! G2e54@bound-id=? (lambda (G32a0@x G32a1@y) (if (eq? (G2e50@id->sym G32a0@x) (G2e50@id->sym G32a1@y)) (begin '#f (G2e52@same-marks? (G2e1c@stx-mark* G32a0@x) (G2e1c@stx-mark* G32a1@y))) '#f))) (set! G2e56@free-id=? (lambda (G32a4@i G32a5@j) ((lambda (G32a8@t0 G32a9@t1) (if ((lambda (G32ac@t) (if G32ac@t G32ac@t (begin '#f G32a9@t1))) G32a8@t0) (eq? G32a8@t0 G32a9@t1) (eq? (G2e50@id->sym G32a4@i) (G2e50@id->sym G32a5@j)))) (G2e6a@id->real-label G32a4@i) (G2e6a@id->real-label G32a5@j)))) (set! G2e58@valid-bound-ids? (lambda (G32ae@id*) (if (for-all G2e4e@id? G32ae@id*) (begin '#f (G2e5a@distinct-bound-ids? G32ae@id*)) '#f))) (set! G2e5a@distinct-bound-ids? (lambda (G32b0@id*) ((lambda (G32b2@t) (if G32b2@t G32b2@t (begin '#f (if (not (G2e5c@bound-id-member? (car G32b0@id*) (cdr G32b0@id*))) (begin '#f (G2e5a@distinct-bound-ids? (cdr G32b0@id*))) '#f)))) (null? G32b0@id*)))) (set! G2e5c@bound-id-member? (lambda (G32b4@id G32b5@id*) (if (pair? G32b5@id*) (begin '#f ((lambda (G32b8@t) (if G32b8@t G32b8@t (begin '#f (G2e5c@bound-id-member? G32b4@id (cdr G32b5@id*))))) (G2e54@bound-id=? G32b4@id (car G32b5@id*)))) '#f))) (set! G2e5e@self-evaluating? (lambda (G32ba@x) ((lambda (G32bc@t) (if G32bc@t G32bc@t ((lambda (G32be@t) (if G32be@t G32be@t ((lambda (G32c0@t) (if G32c0@t G32c0@t ((lambda (G32c2@t) (if G32c2@t G32c2@t ((lambda (G32c4@t) (if G32c4@t G32c4@t (begin '#f (bytevector? G32ba@x)))) (regexp? G32ba@x)))) (boolean? G32ba@x)))) (char? G32ba@x)))) (string? G32ba@x)))) (number? G32ba@x)))) (set! G2e60@strip-annotations (lambda (G32c6@x) (if (pair? G32c6@x) (cons (G2e60@strip-annotations (car G32c6@x)) (G2e60@strip-annotations (cdr G32c6@x))) (if (vector? G32c6@x) (vector-map G2e60@strip-annotations G32c6@x) (if (G2995@G2895@annotation? G32c6@x) (G2994@G2893@annotation-stripped G32c6@x) G32c6@x))))) (set! G2e62@strip (lambda (G32c8@x G32c9@m*) (if (G2dc4@top-marked? G32c9@m*) (if ((lambda (G32cc@t) (if G32cc@t G32cc@t ((lambda (G32ce@t) (if G32ce@t G32ce@t (begin '#f (if (vector? G32c8@x) (if (> (vector-length G32c8@x) '0) (begin '#f (G2995@G2895@annotation? (vector-ref G32c8@x '0))) '#f) '#f)))) (if (pair? G32c8@x) (begin '#f (G2995@G2895@annotation? (car G32c8@x))) '#f)))) (G2995@G2895@annotation? G32c8@x)) (G2e60@strip-annotations G32c8@x) G32c8@x) ((letrec ((G32d0@f (lambda (G32d2@x) (if (G2e16@stx? G32d2@x) (G2e62@strip (G2e1a@stx-expr G32d2@x) (G2e1c@stx-mark* G32d2@x)) (if (G2995@G2895@annotation? G32d2@x) (G2994@G2893@annotation-stripped G32d2@x) (if (pair? G32d2@x) ((lambda (G32d4@a G32d5@d) (if (if (eq? G32d4@a (car G32d2@x)) (begin '#f (eq? G32d5@d (cdr G32d2@x))) '#f) G32d2@x (cons G32d4@a G32d5@d))) (G32d0@f (car G32d2@x)) (G32d0@f (cdr G32d2@x))) (if (vector? G32d2@x) ((lambda (G32d8@old) ((lambda (G32da@new) (if (for-all eq? G32d8@old G32da@new) G32d2@x (list->vector G32da@new))) (map G32d0@f G32d8@old))) (vector->list G32d2@x)) G32d2@x))))))) G32d0@f) G32c8@x)))) (set! G2e64@stx->datum (lambda (G32dc@x) (G2e62@strip G32dc@x '()))) (set! G2e66@same-marks*? (lambda (G32de@mark* G32df@mark** G32e0@si) (if (null? G32e0@si) '#f (if (G2e52@same-marks? G32de@mark* (vector-ref G32df@mark** (car G32e0@si))) (car G32e0@si) (G2e66@same-marks*? G32de@mark* G32df@mark** (cdr G32e0@si)))))) (set! G2e68@id->label (lambda (G32e4@id) ((lambda (G32e6@t) (if G32e6@t G32e6@t (begin '#f ((lambda (G32e8@t) (if G32e8@t ((lambda (G32ea@env) ((lambda (G32ec@rib) (call-with-values (lambda () (G2dce@gen-define-label+loc G32e4@id G32ec@rib)) (lambda (G32f0@G32ee G32f1@G32ef) ((lambda (G32f4@loc_ G32f5@lab) (begin (G2dfd@extend-rib! G32ec@rib G32e4@id G32f5@lab) G32f5@lab)) G32f1@G32ef G32f0@G32ee)))) (G3142@interaction-env-rib G32ea@env))) G32e8@t) '#f)) (G3192@top-level-context))))) (G2e6a@id->real-label G32e4@id)))) (set! G2e6a@id->real-label (lambda (G32f8@id) ((lambda (G32fa@sym) ((letrec ((G32fc@search (lambda (G32fe@subst* G32ff@mark*) (if (null? G32fe@subst*) '#f (if (eq? (car G32fe@subst*) 'shift) (G32fc@search (cdr G32fe@subst*) (cdr G32ff@mark*)) ((lambda (G3302@rib) ((lambda (G3304@t) (if G3304@t ((lambda (G3306@ht) ((lambda (G3308@si) ((lambda (G330a@i) (if G330a@i (vector-ref (G2de7@rib-label* G3302@rib) G330a@i) (G32fc@search (cdr G32fe@subst*) G32ff@mark*))) (if G3308@si (begin '#f (G2e66@same-marks*? G32ff@mark* (G2de5@rib-mark** G3302@rib) (reverse G3308@si))) '#f))) (hashtable-ref G3306@ht G32fa@sym '#f))) G3304@t) ((lambda (G330c@t) (if G330c@t G330c@t (begin '#f ((letrec ((G330e@f (lambda (G3310@sym* G3311@mark** G3312@label*) (if (null? G3310@sym*) (G32fc@search (cdr G32fe@subst*) G32ff@mark*) (if (if (eq? (car G3310@sym*) G32fa@sym) (begin '#f (G2e52@same-marks? (car G3311@mark**) G32ff@mark*)) '#f) (car G3312@label*) (G330e@f (cdr G3310@sym*) (cdr G3311@mark**) (cdr G3312@label*))))))) G330e@f) (G2de3@rib-sym* G3302@rib) (G2de5@rib-mark** G3302@rib) (G2de7@rib-label* G3302@rib))))) (G2dfb@find-label G3302@rib G32fa@sym G32ff@mark*)))) (G2de9@rib-sealed/freq G3302@rib))) (car G32fe@subst*))))))) G32fc@search) (G2e1e@stx-subst* G32f8@id) (G2e1c@stx-mark* G32f8@id))) (G2e50@id->sym G32f8@id)))) (set! G2e6c@label->binding (lambda (G3316@x G3317@r) ((lambda (G331a@t) (if G331a@t ((lambda (G331c@b) (if (if (pair? G331c@b) (begin '#f (eq? (car G331c@b) '$core-rtd)) '#f) (cons '$rtd (map G3047@bless (cdr G331c@b))) (if (if (pair? G331c@b) (begin '#f (eq? (car G331c@b) 'global-rtd)) '#f) ((lambda (G331e@lib G331f@loc) (cons '$rtd (symbol-value G331f@loc))) (cadr G331c@b) (cddr G331c@b)) G331c@b))) G331a@t) ((lambda (G3322@t) (if G3322@t (cdr G3322@t) ((lambda (G3324@t) (if G3324@t ((lambda (G3326@env) ((lambda (G3328@t) (if G3328@t ((lambda (G332a@p) (cons* 'lexical (cdr G332a@p) '#f)) G3328@t) '(displaced-lexical . #f))) (assq G3316@x (G3146@interaction-env-locs G3326@env)))) G3324@t) '(displaced-lexical . #f))) (G3192@top-level-context)))) (assq G3316@x G3317@r)))) (G2c42@G2ad6@imported-label->binding G3316@x)))) (set! G2e6e@make-binding cons) (set! G2e70@binding-type car) (set! G2e72@binding-value cdr) (set! G2e74@raise-unbound-error (lambda (G332c@id) (G3182@syntax-violation* '#f '"unbound identifier" G332c@id (G4c8b@G4c03@make-undefined-violation)))) (set! G2e76@syntax-type (lambda (G332e@e G332f@r) (if (G2e4e@id? G332e@e) ((lambda (G3332@id) ((lambda (G3334@label) ((lambda (G3336@b) ((lambda (G3338@type) ((lambda () (begin (if (not G3334@label) (G2e74@raise-unbound-error G3332@id) (void)) ((lambda (G333a@t) (if (memv G333a@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G3338@type (G2e72@binding-value G3336@b) G3332@id) (values 'other '#f '#f))) G3338@type))))) (G2e70@binding-type G3336@b))) (G2e6c@label->binding G3334@label G332f@r))) (G2e68@id->label G3332@id))) G332e@e) (if (G2e40@syntax-pair? G332e@e) ((lambda (G333c@id) (if (G2e4e@id? G333c@id) ((lambda (G333e@label) ((lambda (G3340@b) ((lambda (G3342@type) ((lambda () (begin (if (not G333e@label) (G2e74@raise-unbound-error G333c@id) (void)) ((lambda (G3344@t) (if (memv G3344@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G3342@type (G2e72@binding-value G3340@b) G333c@id) (values 'call '#f '#f))) G3342@type))))) (G2e70@binding-type G3340@b))) (G2e6c@label->binding G333e@label G332f@r))) (G2e68@id->label G333c@id)) (values 'call '#f '#f))) (G2e48@syntax-car G332e@e)) ((lambda (G3346@d) (if (G2e5e@self-evaluating? G3346@d) (values 'constant G3346@d '#f) (values 'other '#f '#f))) (G2e64@stx->datum G332e@e)))))) (set! G2e8d@sanitize-binding (lambda (G3348@x G3349@src) (if (procedure? G3348@x) (cons* 'local-macro G3348@x G3349@src) (if (if (pair? G3348@x) (if (eq? (car G3348@x) 'macro!) (begin '#f (procedure? (cdr G3348@x))) '#f) '#f) (cons* 'local-macro! (cdr G3348@x) G3349@src) (if (if (pair? G3348@x) (begin '#f (eq? (car G3348@x) '$rtd)) '#f) G3348@x (assertion-violation 'expand '"invalid transformer" G3348@x)))))) (set! G2e8f@make-variable-transformer (lambda (G334c@x) (if (procedure? G334c@x) (cons 'macro! G334c@x) (assertion-violation 'make-variable-transformer '"not a procedure" G334c@x)))) (set! G2e91@variable-transformer? (lambda (G334e@x) (if (pair? G334e@x) (if (eq? (car G334e@x) 'macro!) (begin '#f (procedure? (cdr G334e@x))) '#f) '#f))) (set! G2e93@variable-transformer-procedure (lambda (G3350@x) (if (G2e91@variable-transformer? G3350@x) (cdr G3350@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G3350@x)))) (set! G2e95@make-eval-transformer (lambda (G3352@x) (G2e8d@sanitize-binding (eval-core (G2a04@G29ac@expanded->core G3352@x)) G3352@x))) (set! G3019@parse-define (lambda (G3354@x) ((lambda (G3356@t) ((lambda (G3358@ls/false) (if (if G3358@ls/false (begin '#f (apply (lambda (G335a@id G335b@fmls G335c@b G335d@b*) (G2e4e@id? G335a@id)) G3358@ls/false)) '#f) (apply (lambda (G3362@id G3363@fmls G3364@b G3365@b*) (begin (G30b9@verify-formals G3363@fmls G3354@x) (values G3362@id (cons 'defun (cons G3363@fmls (cons G3364@b G3365@b*)))))) G3358@ls/false) ((lambda (G336a@t) ((lambda (G336c@ls/false) (if (if G336c@ls/false (begin '#f (apply (lambda (G336e@id G336f@val) (G2e4e@id? G336e@id)) G336c@ls/false)) '#f) (apply (lambda (G3372@id G3373@val) (values G3372@id (cons 'expr G3373@val))) G336c@ls/false) ((lambda (G3376@t) ((lambda (G3378@ls/false) (if (if G3378@ls/false (begin '#f (apply (lambda (G337a@id) (G2e4e@id? G337a@id)) G3378@ls/false)) '#f) (apply (lambda (G337c@id) (values G337c@id (cons 'expr (G3047@bless '(void))))) G3378@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3376@t))) (G3091@syntax-dispatch G3376@t '(_ any)))) G336a@t))) (G3091@syntax-dispatch G336a@t '(_ any any)))) G3356@t))) (G3091@syntax-dispatch G3356@t '(_ (any . any) any . each-any)))) G3354@x))) (set! G301b@parse-define-syntax (lambda (G337e@x) ((lambda (G3380@t) ((lambda (G3382@ls/false) (if (if G3382@ls/false (begin '#f (apply (lambda (G3384@id G3385@val) (G2e4e@id? G3384@id)) G3382@ls/false)) '#f) (apply (lambda (G3388@id G3389@val) (values G3388@id G3389@val)) G3382@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3380@t))) (G3091@syntax-dispatch G3380@t '(_ any any)))) G337e@x))) (set! G301d@scheme-stx-hashtable (make-eq-hashtable)) (set! G301f@scheme-stx (lambda (G338c@sym) ((lambda (G338e@t) (if G338e@t G338e@t (begin '#f ((lambda (G3390@subst) ((lambda (G3392@stx) ((lambda (G3394@stx) ((lambda () (begin (hashtable-set! G301d@scheme-stx-hashtable G338c@sym G3394@stx) G3394@stx)))) ((lambda (G3396@t) (if G3396@t ((lambda (G3398@x) ((lambda (G339a@name G339b@label) (G2e3a@add-subst (G2de1@make-rib (list G339a@name) (list G2dc2@top-mark*) (list G339b@label) '#f '#f) G3392@stx)) (car G3398@x) (cdr G3398@x))) G3396@t) G3392@stx)) (assq G338c@sym G3390@subst)))) (G2e18@make-stx G338c@sym G2dc2@top-mark* '() '()))) (G2c18@G2a82@library-subst (G2c3c@G2aca@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G301d@scheme-stx-hashtable G338c@sym '#f)))) (set! G3021@lexical-var car) (set! G3023@lexical-mutable? cdr) (set! G3025@set-lexical-mutable! set-cdr!) (set! G3027@add-lexical (lambda (G339e@lab G339f@lex G33a0@r) (cons (cons* G339e@lab 'lexical G339f@lex '#f) G33a0@r))) (set! G3029@add-lexicals (lambda (G33a4@lab* G33a5@lex* G33a6@r) (if (null? G33a4@lab*) G33a6@r (G3029@add-lexicals (cdr G33a4@lab*) (cdr G33a5@lex*) (G3027@add-lexical (car G33a4@lab*) (car G33a5@lex*) G33a6@r))))) (set! G302b@letrec-helper (lambda (G33aa@e G33ab@r G33ac@mr G33ad@build) ((lambda (G33b2@t) ((lambda (G33b4@ls/false) (if G33b4@ls/false (apply (lambda (G33b6@lhs* G33b7@rhs* G33b8@b G33b9@b*) (if (not (G2e58@valid-bound-ids? G33b6@lhs*)) (G304b@invalid-fmls-error G33aa@e G33b6@lhs*) ((lambda (G33be@lex* G33bf@lab*) ((lambda (G33c2@rib G33c3@r) ((lambda (G33c6@body G33c7@rhs*) (G33ad@build '#f G33be@lex* G33c7@rhs* G33c6@body)) (G30cb@chi-internal (G2e3a@add-subst G33c2@rib (cons G33b8@b G33b9@b*)) G33c3@r G33ac@mr) (G30b1@chi-expr* (map (lambda (G33ca@x) (G2e3a@add-subst G33c2@rib G33ca@x)) G33b7@rhs*) G33c3@r G33ac@mr))) (G2e07@make-full-rib G33b6@lhs* G33bf@lab*) (G3029@add-lexicals G33bf@lab* G33be@lex* G33ab@r))) (map G2dc6@gen-lexical G33b6@lhs*) (map G2dca@gen-label G33b6@lhs*)))) G33b4@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G33b2@t))) (G3091@syntax-dispatch G33b2@t '(_ #(each (any any)) any . each-any)))) G33aa@e))) (set! G302d@letrec-transformer (lambda (G33cc@e G33cd@r G33ce@mr) (G302b@letrec-helper G33cc@e G33cd@r G33ce@mr G2dab@G2d1e@build-letrec))) (set! G302f@letrec*-transformer (lambda (G33d2@e G33d3@r G33d4@mr) (G302b@letrec-helper G33d2@e G33d3@r G33d4@mr G2dac@G2d20@build-letrec*))) (set! G3031@fluid-let-syntax-transformer (lambda (G33d8@e G33d9@r G33da@mr) ((lambda (G33df@lookup) (begin (set! G33df@lookup (lambda (G33f2@x) ((lambda (G33f4@t) (if G33f4@t G33f4@t (begin '#f (G3184@syntax-violation '#f '"unbound identifier" G33d8@e G33f2@x)))) (G2e68@id->label G33f2@x)))) ((lambda (G33e0@t) ((lambda (G33e2@ls/false) (if G33e2@ls/false (apply (lambda (G33e4@lhs* G33e5@rhs* G33e6@b G33e7@b*) (if (not (G2e58@valid-bound-ids? G33e4@lhs*)) (G304b@invalid-fmls-error G33d8@e G33e4@lhs*) ((lambda (G33ec@lab* G33ed@rhs*) (G30cb@chi-internal (cons G33e6@b G33e7@b*) (append (map cons G33ec@lab* G33ed@rhs*) G33d9@r) (append (map cons G33ec@lab* G33ed@rhs*) G33da@mr))) (map G33df@lookup G33e4@lhs*) (map (lambda (G33f0@x) (G2e95@make-eval-transformer (G30f2@expand-transformer G33f0@x G33da@mr))) G33e5@rhs*)))) G33e2@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G33e0@t))) (G3091@syntax-dispatch G33e0@t '(_ #(each (any any)) any . each-any)))) G33d8@e))) '#f))) (set! G3033@type-descriptor-transformer (lambda (G33f6@e G33f7@r G33f8@mr) ((lambda (G33fc@t) ((lambda (G33fe@ls/false) (if (if G33fe@ls/false (begin '#f (apply (lambda (G3400@id) (G2e4e@id? G3400@id)) G33fe@ls/false)) '#f) (apply (lambda (G3402@id) ((lambda (G3404@lab) ((lambda (G3406@b) ((lambda (G3408@type) ((lambda () (begin (if (not G3404@lab) (G2e74@raise-unbound-error G3402@id) (void)) (if (not (if (eq? G3408@type '$rtd) (begin '#f (not (list? (G2e72@binding-value G3406@b)))) '#f)) (G3184@syntax-violation '#f '"not a record type" G33f6@e) (void)) (list 'quote (G2e72@binding-value G3406@b)))))) (G2e70@binding-type G3406@b))) (G2e6c@label->binding G3404@lab G33f7@r))) (G2e68@id->label G3402@id))) G33fe@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G33fc@t))) (G3091@syntax-dispatch G33fc@t '(_ any)))) G33f6@e))) (set! G3035@record-type-descriptor-transformer (lambda (G340a@e G340b@r G340c@mr) ((lambda (G3410@t) ((lambda (G3412@ls/false) (if (if G3412@ls/false (begin '#f (apply (lambda (G3414@id) (G2e4e@id? G3414@id)) G3412@ls/false)) '#f) (apply (lambda (G3416@id) ((lambda (G3418@lab) ((lambda (G341a@b) ((lambda (G341c@type) ((lambda () (begin (if (not G3418@lab) (G2e74@raise-unbound-error G3416@id) (void)) (if (not (if (eq? G341c@type '$rtd) (begin '#f (list? (G2e72@binding-value G341a@b))) '#f)) (G3184@syntax-violation '#f '"not a record type" G340a@e) (void)) (G30b5@chi-expr (car (G2e72@binding-value G341a@b)) G340b@r G340c@mr))))) (G2e70@binding-type G341a@b))) (G2e6c@label->binding G3418@lab G340b@r))) (G2e68@id->label G3416@id))) G3412@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3410@t))) (G3091@syntax-dispatch G3410@t '(_ any)))) G340a@e))) (set! G3037@record-constructor-descriptor-transformer (lambda (G341e@e G341f@r G3420@mr) ((lambda (G3424@t) ((lambda (G3426@ls/false) (if (if G3426@ls/false (begin '#f (apply (lambda (G3428@id) (G2e4e@id? G3428@id)) G3426@ls/false)) '#f) (apply (lambda (G342a@id) ((lambda (G342c@lab) ((lambda (G342e@b) ((lambda (G3430@type) ((lambda () (begin (if (not G342c@lab) (G2e74@raise-unbound-error G342a@id) (void)) (if (not (if (eq? G3430@type '$rtd) (begin '#f (list? (G2e72@binding-value G342e@b))) '#f)) (G3184@syntax-violation '#f '"invalid type" G341e@e) (void)) (G30b5@chi-expr (cadr (G2e72@binding-value G342e@b)) G341f@r G3420@mr))))) (G2e70@binding-type G342e@b))) (G2e6c@label->binding G342c@lab G341f@r))) (G2e68@id->label G342a@id))) G3426@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3424@t))) (G3091@syntax-dispatch G3424@t '(_ any)))) G341e@e))) (set! G3039@when-macro (lambda (G3432@e) ((lambda (G3434@t) ((lambda (G3436@ls/false) (if G3436@ls/false (apply (lambda (G3438@test G3439@e G343a@e*) (G3047@bless (list 'if G3438@test (cons 'begin (cons G3439@e G343a@e*))))) G3436@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3434@t))) (G3091@syntax-dispatch G3434@t '(_ any any . each-any)))) G3432@e))) (set! G303b@unless-macro (lambda (G343e@e) ((lambda (G3440@t) ((lambda (G3442@ls/false) (if G3442@ls/false (apply (lambda (G3444@test G3445@e G3446@e*) (G3047@bless (list 'if (list 'not G3444@test) (cons 'begin (cons G3445@e G3446@e*))))) G3442@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3440@t))) (G3091@syntax-dispatch G3440@t '(_ any any . each-any)))) G343e@e))) (set! G303d@if-transformer (lambda (G344a@e G344b@r G344c@mr) ((lambda (G3450@t) ((lambda (G3452@ls/false) (if G3452@ls/false (apply (lambda (G3454@e0 G3455@e1 G3456@e2) (list 'if (G30b5@chi-expr G3454@e0 G344b@r G344c@mr) (G30b5@chi-expr G3455@e1 G344b@r G344c@mr) (G30b5@chi-expr G3456@e2 G344b@r G344c@mr))) G3452@ls/false) ((lambda (G345a@t) ((lambda (G345c@ls/false) (if G345c@ls/false (apply (lambda (G345e@e0 G345f@e1) (list 'if (G30b5@chi-expr G345e@e0 G344b@r G344c@mr) (G30b5@chi-expr G345f@e1 G344b@r G344c@mr) (G2daa@G2d1c@build-void))) G345c@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G345a@t))) (G3091@syntax-dispatch G345a@t '(_ any any)))) G3450@t))) (G3091@syntax-dispatch G3450@t '(_ any any any)))) G344a@e))) (set! G303f@case-macro (lambda (G3462@e) ((lambda (G3465@build-last G3467@build-one) (begin (set! G3465@build-last (lambda (G348c@cls) ((lambda (G348e@t) ((lambda (G3490@ls/false) (if G3490@ls/false (apply (lambda (G3492@e G3493@e*) (cons 'begin (cons G3492@e G3493@e*))) G3490@ls/false) ((lambda (G3496@t) ((lambda (G3498@ls/false) (if G3498@ls/false (apply (lambda () (G3467@build-one G348c@cls '(if #f #f))) G3498@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3496@t))) (G3091@syntax-dispatch G3496@t '_))) G348e@t))) (G3091@syntax-dispatch G348e@t '(#(scheme-id else) any . each-any)))) G348c@cls))) (set! G3467@build-one (lambda (G347e@cls G347f@k) ((lambda (G3482@t) ((lambda (G3484@ls/false) (if G3484@ls/false (apply (lambda (G3486@d* G3487@e G3488@e*) (list 'if (list 'memv 't (list 'quote G3486@d*)) (cons 'begin (cons G3487@e G3488@e*)) G347f@k)) G3484@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3482@t))) (G3091@syntax-dispatch G3482@t '(each-any any . each-any)))) G347e@cls))) ((lambda (G3468@t) ((lambda (G346a@ls/false) (if G346a@ls/false (apply (lambda (G346c@expr) (G3047@bless (cons 'let (cons (list (list 't G346c@expr)) '((if #f #f)))))) G346a@ls/false) ((lambda (G346e@t) ((lambda (G3470@ls/false) (if G3470@ls/false (apply (lambda (G3472@expr G3473@cls G3474@cls*) (G3047@bless (list 'let (list (list 't G3472@expr)) ((letrec ((G3478@f (lambda (G347a@cls G347b@cls*) (if (null? G347b@cls*) (G3465@build-last G347a@cls) (G3467@build-one G347a@cls (G3478@f (car G347b@cls*) (cdr G347b@cls*))))))) G3478@f) G3473@cls G3474@cls*)))) G3470@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G346e@t))) (G3091@syntax-dispatch G346e@t '(_ any any . each-any)))) G3468@t))) (G3091@syntax-dispatch G3468@t '(_ any)))) G3462@e))) '#f '#f))) (set! G3041@quote-transformer (lambda (G349a@e G349b@r G349c@mr) ((lambda (G34a0@t) ((lambda (G34a2@ls/false) (if G34a2@ls/false (apply (lambda (G34a4@datum) (list 'quote (G2e64@stx->datum G34a4@datum))) G34a2@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G34a0@t))) (G3091@syntax-dispatch G34a0@t '(_ any)))) G349a@e))) (set! G3043@case-lambda-transformer (lambda (G34a6@e G34a7@r G34a8@mr) ((lambda (G34ac@t) ((lambda (G34ae@ls/false) (if G34ae@ls/false (apply (lambda (G34b0@fmls* G34b1@b* G34b2@b**) (call-with-values (lambda () (G30bd@chi-lambda-clause* G34a6@e G34b0@fmls* (map cons G34b1@b* G34b2@b**) G34a7@r G34a8@mr)) (lambda (G34b8@G34b6 G34b9@G34b7) ((lambda (G34bc@body* G34bd@fmls*) (G2da7@G2cd0@build-case-lambda '#f G34bd@fmls* G34bc@body*)) G34b9@G34b7 G34b8@G34b6)))) G34ae@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G34ac@t))) (G3091@syntax-dispatch G34ac@t '(_ . #(each (any any . each-any)))))) G34a6@e))) (set! G3045@lambda-transformer (lambda (G34c0@e G34c1@r G34c2@mr) ((lambda (G34c6@t) ((lambda (G34c8@ls/false) (if G34c8@ls/false (apply (lambda (G34ca@fmls G34cb@b G34cc@b*) (call-with-values (lambda () (G30bb@chi-lambda-clause G34c0@e G34ca@fmls (cons G34cb@b G34cc@b*) G34c1@r G34c2@mr)) (lambda (G34d2@G34d0 G34d3@G34d1) ((lambda (G34d6@body G34d7@fmls) (G2da6@G2cce@build-lambda '#f G34d7@fmls G34d6@body)) G34d3@G34d1 G34d2@G34d0)))) G34c8@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G34c6@t))) (G3091@syntax-dispatch G34c6@t '(_ any any . each-any)))) G34c0@e))) (set! G3047@bless (lambda (G34da@x) (G2e36@mkstx ((letrec ((G34dc@f (lambda (G34de@x) (if (G2e16@stx? G34de@x) G34de@x (if (pair? G34de@x) (cons (G34dc@f (car G34de@x)) (G34dc@f (cdr G34de@x))) (if (symbol? G34de@x) (G301f@scheme-stx G34de@x) (if (vector? G34de@x) (vector-map G34dc@f G34de@x) G34de@x))))))) G34dc@f) G34da@x) '() '() '()))) (set! G3049@with-syntax-macro (lambda (G34e0@e) ((lambda (G34e2@t) ((lambda (G34e4@ls/false) (if G34e4@ls/false (apply (lambda (G34e6@pat* G34e7@expr* G34e8@b G34e9@b*) ((lambda (G34ee@idn*) (begin (G30b9@verify-formals (map car G34ee@idn*) G34e0@e) ((lambda (G34f0@t*) (G3047@bless (list 'let (map list G34f0@t* G34e7@expr*) ((letrec ((G34f2@f (lambda (G34f4@pat* G34f5@t*) (if (null? G34f4@pat*) (cons 'begin (cons '#f (cons G34e8@b G34e9@b*))) (list 'syntax-case (car G34f5@t*) '() (list (car G34f4@pat*) (G34f2@f (cdr G34f4@pat*) (cdr G34f5@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G34f4@pat*)) (car G34f5@t*)))))))) G34f2@f) G34e6@pat* G34f0@t*)))) (G3170@generate-temporaries G34e7@expr*)))) ((letrec ((G34f8@f (lambda (G34fa@pat*) (if (null? G34fa@pat*) '() (call-with-values (lambda () (G308f@convert-pattern (car G34fa@pat*) '())) (lambda (G34fe@G34fc G34ff@G34fd) ((lambda (G3502@idn* G3503@pat) (append G3502@idn* (G34f8@f (cdr G34fa@pat*)))) G34ff@G34fd G34fe@G34fc))))))) G34f8@f) G34e6@pat*))) G34e4@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G34e2@t))) (G3091@syntax-dispatch G34e2@t '(_ #(each (any any)) any . each-any)))) G34e0@e))) (set! G304b@invalid-fmls-error (lambda (G3506@stx G3507@fmls) ((lambda (G350a@t) ((lambda (G350c@ls/false) (if G350c@ls/false (apply (lambda (G350e@id* G350f@last) ((letrec ((G3512@f (lambda (G3514@id*) (if (null? G3514@id*) (values) (if (not (G2e4e@id? (car G3514@id*))) (G3184@syntax-violation '#f '"not an identifier" G3506@stx (car G3514@id*)) (begin (G3512@f (cdr G3514@id*)) (if (G2e5c@bound-id-member? (car G3514@id*) (cdr G3514@id*)) (G3184@syntax-violation '#f '"duplicate binding" G3506@stx (car G3514@id*)) (void)))))))) G3512@f) (if (G2e4e@id? G350f@last) (cons G350f@last G350e@id*) (if (G2e44@syntax-null? G350f@last) G350e@id* (G3184@syntax-violation '#f '"not an identifier" G3506@stx G350f@last))))) G350c@ls/false) ((lambda (G3516@t) ((lambda (G3518@ls/false) (if G3518@ls/false (apply (lambda () (G3184@syntax-violation '#f '"malformed binding form" G3506@stx G3507@fmls)) G3518@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3516@t))) (G3091@syntax-dispatch G3516@t '_))) G350a@t))) (G3091@syntax-dispatch G350a@t '#(each+ any () any)))) G3507@fmls))) (set! G304d@let-macro (lambda (G351a@stx) ((lambda (G351c@t) ((lambda (G351e@ls/false) (if G351e@ls/false (apply (lambda (G3520@lhs* G3521@rhs* G3522@b G3523@b*) (if (G2e58@valid-bound-ids? G3520@lhs*) (G3047@bless (cons (cons 'lambda (cons G3520@lhs* (cons G3522@b G3523@b*))) G3521@rhs*)) (G304b@invalid-fmls-error G351a@stx G3520@lhs*))) G351e@ls/false) ((lambda (G3528@t) ((lambda (G352a@ls/false) (if (if G352a@ls/false (begin '#f (apply (lambda (G352c@f G352d@lhs* G352e@rhs* G352f@b G3530@b*) (G2e4e@id? G352c@f)) G352a@ls/false)) '#f) (apply (lambda (G3536@f G3537@lhs* G3538@rhs* G3539@b G353a@b*) (if (G2e58@valid-bound-ids? G3537@lhs*) (G3047@bless (cons (list 'letrec (list (list G3536@f (cons 'lambda (cons G3537@lhs* (cons G3539@b G353a@b*))))) G3536@f) G3538@rhs*)) (G304b@invalid-fmls-error G351a@stx G3537@lhs*))) G352a@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3528@t))) (G3091@syntax-dispatch G3528@t '(_ any #(each (any any)) any . each-any)))) G351c@t))) (G3091@syntax-dispatch G351c@t '(_ #(each (any any)) any . each-any)))) G351a@stx))) (set! G304f@let-values-macro (lambda (G3540@stx) ((lambda (G3543@rename G3545@rename*) (begin (set! G3543@rename (lambda (G35a5@x G35a6@old* G35a7@new*) (begin (if (not (G2e4e@id? G35a5@x)) (G3184@syntax-violation '#f '"not an indentifier" G3540@stx G35a5@x) (void)) (if (G2e5c@bound-id-member? G35a5@x G35a6@old*) (G3184@syntax-violation '#f '"duplicate binding" G3540@stx G35a5@x) (void)) ((lambda (G35ab@y) (values G35ab@y (cons G35a5@x G35a6@old*) (cons G35ab@y G35a7@new*))) (gensym (G318a@syntax->datum G35a5@x)))))) (set! G3545@rename* (lambda (G3593@x* G3594@old* G3595@new*) (if (null? G3593@x*) (values '() G3594@old* G3595@new*) (call-with-values (lambda () (G3543@rename (car G3593@x*) G3594@old* G3595@new*)) (lambda (G3599@x G359a@old* G359b@new*) (call-with-values (lambda () (G3545@rename* (cdr G3593@x*) G359a@old* G359b@new*)) (lambda (G359f@x* G35a0@old* G35a1@new*) (values (cons G3599@x G359f@x*) G35a0@old* G35a1@new*)))))))) ((lambda (G3546@t) ((lambda (G3548@ls/false) (if G3548@ls/false (apply (lambda (G354a@b G354b@b*) (cons* (G3047@bless 'let) '() G354a@b G354b@b*)) G3548@ls/false) ((lambda (G354e@t) ((lambda (G3550@ls/false) (if G3550@ls/false (apply (lambda (G3552@lhs* G3553@rhs* G3554@b G3555@b*) (G3047@bless ((letrec ((G355a@f (lambda (G355c@lhs* G355d@rhs* G355e@old* G355f@new*) (if (null? G355c@lhs*) (cons 'let (cons (map list G355e@old* G355f@new*) (cons G3554@b G3555@b*))) ((lambda (G3564@t) ((lambda (G3566@ls/false) (if G3566@ls/false (apply (lambda (G3568@x*) (call-with-values (lambda () (G3545@rename* G3568@x* G355e@old* G355f@new*)) (lambda (G356d@G356a G356e@G356b G356f@G356c) ((lambda (G3573@new* G3574@old* G3575@y*) (list 'call-with-values (list 'lambda '() (car G355d@rhs*)) (list 'lambda G3575@y* (G355a@f (cdr G355c@lhs*) (cdr G355d@rhs*) G3574@old* G3573@new*)))) G356f@G356c G356e@G356b G356d@G356a)))) G3566@ls/false) ((lambda (G3579@t) ((lambda (G357b@ls/false) (if G357b@ls/false (apply (lambda (G357d@x* G357e@x) (call-with-values (lambda () (G3543@rename G357e@x G355e@old* G355f@new*)) (lambda (G3581@y G3582@old* G3583@new*) (call-with-values (lambda () (G3545@rename* G357d@x* G3582@old* G3583@new*)) (lambda (G3587@y* G3588@old* G3589@new*) (list 'call-with-values (list 'lambda '() (car G355d@rhs*)) (list 'lambda (append G3587@y* G3581@y) (G355a@f (cdr G355c@lhs*) (cdr G355d@rhs*) G3588@old* G3589@new*)))))))) G357b@ls/false) ((lambda (G358d@t) ((lambda (G358f@ls/false) (if G358f@ls/false (apply (lambda (G3591@others) (G3184@syntax-violation '#f '"malformed bindings" G3540@stx G3591@others)) G358f@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G358d@t))) (G3091@syntax-dispatch G358d@t 'any))) G3579@t))) (G3091@syntax-dispatch G3579@t '#(each+ any () any)))) G3564@t))) (G3091@syntax-dispatch G3564@t 'each-any))) (car G355c@lhs*)))))) G355a@f) G3552@lhs* G3553@rhs* '() '()))) G3550@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G354e@t))) (G3091@syntax-dispatch G354e@t '(_ #(each (any any)) any . each-any)))) G3546@t))) (G3091@syntax-dispatch G3546@t '(_ () any . each-any)))) G3540@stx))) '#f '#f))) (set! G3051@let*-values-macro (lambda (G35ad@stx) ((lambda (G35b0@check) (begin (set! G35b0@check (lambda (G35df@x*) (if (not (null? G35df@x*)) ((lambda (G35e1@x) (begin (if (not (G2e4e@id? G35e1@x)) (G3184@syntax-violation '#f '"not an identifier" G35ad@stx G35e1@x) (void)) (G35b0@check (cdr G35df@x*)) (if (G2e5c@bound-id-member? G35e1@x (cdr G35df@x*)) (G3184@syntax-violation '#f '"duplicate identifier" G35ad@stx G35e1@x) (void)))) (car G35df@x*)) (void)))) ((lambda (G35b1@t) ((lambda (G35b3@ls/false) (if G35b3@ls/false (apply (lambda (G35b5@b G35b6@b*) (cons* (G3047@bless 'let) '() G35b5@b G35b6@b*)) G35b3@ls/false) ((lambda (G35b9@t) ((lambda (G35bb@ls/false) (if G35bb@ls/false (apply (lambda (G35bd@lhs* G35be@rhs* G35bf@b G35c0@b*) (G3047@bless ((letrec ((G35c5@f (lambda (G35c7@lhs* G35c8@rhs*) (if (null? G35c7@lhs*) (cons 'begin (cons G35bf@b G35c0@b*)) ((lambda (G35cb@t) ((lambda (G35cd@ls/false) (if G35cd@ls/false (apply (lambda (G35cf@x*) (begin (G35b0@check G35cf@x*) (list 'call-with-values (list 'lambda '() (car G35c8@rhs*)) (list 'lambda G35cf@x* (G35c5@f (cdr G35c7@lhs*) (cdr G35c8@rhs*)))))) G35cd@ls/false) ((lambda (G35d1@t) ((lambda (G35d3@ls/false) (if G35d3@ls/false (apply (lambda (G35d5@x* G35d6@x) (begin (G35b0@check (cons G35d6@x G35d5@x*)) (list 'call-with-values (list 'lambda '() (car G35c8@rhs*)) (list 'lambda (append G35d5@x* G35d6@x) (G35c5@f (cdr G35c7@lhs*) (cdr G35c8@rhs*)))))) G35d3@ls/false) ((lambda (G35d9@t) ((lambda (G35db@ls/false) (if G35db@ls/false (apply (lambda (G35dd@others) (G3184@syntax-violation '#f '"malformed bindings" G35ad@stx G35dd@others)) G35db@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G35d9@t))) (G3091@syntax-dispatch G35d9@t 'any))) G35d1@t))) (G3091@syntax-dispatch G35d1@t '#(each+ any () any)))) G35cb@t))) (G3091@syntax-dispatch G35cb@t 'each-any))) (car G35c7@lhs*)))))) G35c5@f) G35bd@lhs* G35be@rhs*))) G35bb@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G35b9@t))) (G3091@syntax-dispatch G35b9@t '(_ #(each (any any)) any . each-any)))) G35b1@t))) (G3091@syntax-dispatch G35b1@t '(_ () any . each-any)))) G35ad@stx))) '#f))) (set! G3053@trace-lambda-macro (lambda (G35e3@stx) ((lambda (G35e5@t) ((lambda (G35e7@ls/false) (if G35e7@ls/false (apply (lambda (G35e9@who G35ea@fmls G35eb@b G35ec@b*) (if (G2e58@valid-bound-ids? G35ea@fmls) (G3047@bless (list 'make-traced-procedure (list 'quote G35e9@who) (cons 'lambda (cons G35ea@fmls (cons G35eb@b G35ec@b*))))) (G304b@invalid-fmls-error G35e3@stx G35ea@fmls))) G35e7@ls/false) ((lambda (G35f1@t) ((lambda (G35f3@ls/false) (if G35f3@ls/false (apply (lambda (G35f5@who G35f6@fmls G35f7@last G35f8@b G35f9@b*) (if (G2e58@valid-bound-ids? (cons G35f7@last G35f6@fmls)) (G3047@bless (list 'make-traced-procedure (list 'quote G35f5@who) (cons 'lambda (cons (append G35f6@fmls G35f7@last) (cons G35f8@b G35f9@b*))))) (G304b@invalid-fmls-error G35e3@stx (append G35f6@fmls G35f7@last)))) G35f3@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G35f1@t))) (G3091@syntax-dispatch G35f1@t '(_ any #(each+ any () any) any . each-any)))) G35e5@t))) (G3091@syntax-dispatch G35e5@t '(_ any each-any any . each-any)))) G35e3@stx))) (set! G3055@trace-define-macro (lambda (G35ff@stx) ((lambda (G3601@t) ((lambda (G3603@ls/false) (if G3603@ls/false (apply (lambda (G3605@who G3606@fmls G3607@b G3608@b*) (if (G2e58@valid-bound-ids? G3606@fmls) (G3047@bless (list 'define G3605@who (list 'make-traced-procedure (list 'quote G3605@who) (cons 'lambda (cons G3606@fmls (cons G3607@b G3608@b*)))))) (G304b@invalid-fmls-error G35ff@stx G3606@fmls))) G3603@ls/false) ((lambda (G360d@t) ((lambda (G360f@ls/false) (if G360f@ls/false (apply (lambda (G3611@who G3612@fmls G3613@last G3614@b G3615@b*) (if (G2e58@valid-bound-ids? (cons G3613@last G3612@fmls)) (G3047@bless (list 'define G3611@who (list 'make-traced-procedure (list 'quote G3611@who) (cons 'lambda (cons (append G3612@fmls G3613@last) (cons G3614@b G3615@b*)))))) (G304b@invalid-fmls-error G35ff@stx (append G3612@fmls G3613@last)))) G360f@ls/false) ((lambda (G361b@t) ((lambda (G361d@ls/false) (if G361d@ls/false (apply (lambda (G361f@who G3620@expr) (if (G2e4e@id? G361f@who) (G3047@bless (list 'define G361f@who (list 'let (list (list 'v G3620@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G361f@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G3184@syntax-violation '#f '"invalid name" G35ff@stx))) G361d@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G361b@t))) (G3091@syntax-dispatch G361b@t '(_ any any)))) G360d@t))) (G3091@syntax-dispatch G360d@t '(_ (any . #(each+ any () any)) any . each-any)))) G3601@t))) (G3091@syntax-dispatch G3601@t '(_ (any . each-any) any . each-any)))) G35ff@stx))) (set! G3057@trace-define-syntax-macro (lambda (G3623@stx) ((lambda (G3625@t) ((lambda (G3627@ls/false) (if G3627@ls/false (apply (lambda (G3629@who G362a@expr) (if (G2e4e@id? G3629@who) (G3047@bless (list 'define-syntax G3629@who (list 'make-traced-macro (list 'quote G3629@who) G362a@expr))) (G3184@syntax-violation '#f '"invalid name" G3623@stx))) G3627@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3625@t))) (G3091@syntax-dispatch G3625@t '(_ any any)))) G3623@stx))) (set! G3059@trace-let/rec-syntax (lambda (G362d@who) (lambda (G362f@stx) ((lambda (G3631@t) ((lambda (G3633@ls/false) (if G3633@ls/false (apply (lambda (G3635@lhs* G3636@rhs* G3637@b G3638@b*) (if (G2e58@valid-bound-ids? G3635@lhs*) ((lambda (G363d@rhs*) (G3047@bless (cons G362d@who (cons (map list G3635@lhs* G363d@rhs*) (cons G3637@b G3638@b*))))) (map (lambda (G363f@lhs G3640@rhs) (list 'make-traced-macro (list 'quote G363f@lhs) G3640@rhs)) G3635@lhs* G3636@rhs*)) (G304b@invalid-fmls-error G362f@stx G3635@lhs*))) G3633@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3631@t))) (G3091@syntax-dispatch G3631@t '(_ #(each (any any)) any . each-any)))) G362f@stx)))) (set! G305b@trace-let-syntax-macro (G3059@trace-let/rec-syntax 'let-syntax)) (set! G305d@trace-letrec-syntax-macro (G3059@trace-let/rec-syntax 'letrec-syntax)) (set! G305f@guard-macro (lambda (G3643@x) ((lambda (G3646@gen-clauses) (begin (set! G3646@gen-clauses (lambda (G365d@con G365e@outerk G365f@clause*) ((lambda (G3664@f G3666@f*) (begin (set! G3664@f (lambda (G3697@x G3698@k) ((lambda (G369b@t) ((lambda (G369d@ls/false) (if G369d@ls/false (apply (lambda (G369f@e G36a0@p) ((lambda (G36a3@t) (list 'let (list (list G36a3@t G369f@e)) (list 'if G36a3@t (list G36a0@p G36a3@t) G3698@k))) (gensym))) G369d@ls/false) ((lambda (G36a5@t) ((lambda (G36a7@ls/false) (if G36a7@ls/false (apply (lambda (G36a9@e) ((lambda (G36ab@t) (list 'let (list (list G36ab@t G36a9@e)) (list 'if G36ab@t G36ab@t G3698@k))) (gensym))) G36a7@ls/false) ((lambda (G36ad@t) ((lambda (G36af@ls/false) (if G36af@ls/false (apply (lambda (G36b1@e G36b2@v G36b3@v*) (list 'if G36b1@e (cons 'begin (cons G36b2@v G36b3@v*)) G3698@k)) G36af@ls/false) ((lambda (G36b7@t) ((lambda (G36b9@ls/false) (if G36b9@ls/false (apply (lambda () (G3184@syntax-violation '#f '"invalid guard clause" G3697@x)) G36b9@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G36b7@t))) (G3091@syntax-dispatch G36b7@t '_))) G36ad@t))) (G3091@syntax-dispatch G36ad@t '(any any . each-any)))) G36a5@t))) (G3091@syntax-dispatch G36a5@t '(any)))) G369b@t))) (G3091@syntax-dispatch G369b@t '(any #(scheme-id =>) any)))) G3697@x))) (set! G3666@f* (lambda (G3671@x*) ((lambda (G3673@t) ((lambda (G3675@ls/false) (if G3675@ls/false (apply (lambda () (values (list 'raise G365d@con) '#t)) G3675@ls/false) ((lambda (G3677@t) ((lambda (G3679@ls/false) (if G3679@ls/false (apply (lambda (G367b@e G367c@e*) (values (cons 'begin (cons G367b@e G367c@e*)) '#f)) G3679@ls/false) ((lambda (G367f@t) ((lambda (G3681@ls/false) (if G3681@ls/false (apply (lambda (G3683@cls G3684@cls*) (call-with-values (lambda () (G3666@f* G3684@cls*)) (lambda (G3689@G3687 G368a@G3688) ((lambda (G368d@g G368e@e) (values (G3664@f G3683@cls G368e@e) G368d@g)) G368a@G3688 G3689@G3687)))) G3681@ls/false) ((lambda (G3691@t) ((lambda (G3693@ls/false) (if G3693@ls/false (apply (lambda (G3695@others) (G3184@syntax-violation '#f '"invalid guard clause" G3695@others)) G3693@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3691@t))) (G3091@syntax-dispatch G3691@t 'any))) G367f@t))) (G3091@syntax-dispatch G367f@t '(any . any)))) G3677@t))) (G3091@syntax-dispatch G3677@t '((#(scheme-id else) any . each-any))))) G3673@t))) (G3091@syntax-dispatch G3673@t '()))) G3671@x*))) (call-with-values (lambda () (G3666@f* G365f@clause*)) (lambda (G3669@G3667 G366a@G3668) ((lambda (G366d@raisek G366e@code) (if G366d@raisek (list G365e@outerk G366e@code) G366e@code)) G366a@G3668 G3669@G3667))))) '#f '#f))) ((lambda (G3647@t) ((lambda (G3649@ls/false) (if (if G3649@ls/false (begin '#f (apply (lambda (G364b@con G364c@clause* G364d@b G364e@b*) (G2e4e@id? G364b@con)) G3649@ls/false)) '#f) (apply (lambda (G3653@con G3654@clause* G3655@b G3656@b*) ((lambda (G365b@outerk) (G3047@bless (list 'call/cc (list 'lambda (list G365b@outerk) (list 'with-exception-handler (list 'lambda (list G3653@con) (G3646@gen-clauses G3653@con G365b@outerk G3654@clause*)) (cons 'lambda (cons '() (cons '#f (cons G3655@b G3656@b*))))))))) (gensym))) G3649@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3647@t))) (G3091@syntax-dispatch G3647@t '(_ (any . each-any) any . each-any)))) G3643@x))) '#f))) (set! G3061@define-enumeration-macro (lambda (G36bb@stx) ((lambda (G36be@set? G36c0@remove-dups) (begin (set! G36be@set? (lambda (G36d7@x) ((lambda (G36d9@t) (if G36d9@t G36d9@t (begin '#f (if (not (memq (car G36d7@x) (cdr G36d7@x))) (begin '#f (G36be@set? (cdr G36d7@x))) '#f)))) (null? G36d7@x)))) (set! G36c0@remove-dups (lambda (G36d5@ls) (if (null? G36d5@ls) '() (cons (car G36d5@ls) (G36c0@remove-dups (remq (car G36d5@ls) (cdr G36d5@ls))))))) ((lambda (G36c1@t) ((lambda (G36c3@ls/false) (if (if G36c3@ls/false (begin '#f (apply (lambda (G36c5@name G36c6@id* G36c7@maker) (if (G2e4e@id? G36c5@name) (if (G2e4e@id? G36c7@maker) (begin '#f (for-all G2e4e@id? G36c6@id*)) '#f) '#f)) G36c3@ls/false)) '#f) (apply (lambda (G36cb@name G36cc@id* G36cd@maker) ((lambda (G36d1@name* G36d2@mk) (G3047@bless (list 'begin (list 'define G36d2@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G36d1@name*)))) (list 'define-syntax G36cb@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G36d1@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G36cb@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G36cd@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G36cd@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G36d1@name*)) (cons 'syntax-violation (cons (list 'quote G36cd@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G36d2@mk '('(n* ...)))))))))))) (G36c0@remove-dups (G318a@syntax->datum G36cc@id*)) (gensym))) G36c3@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G36c1@t))) (G3091@syntax-dispatch G36c1@t '(_ any each-any any)))) G36bb@stx))) '#f '#f))) (set! G3063@time-macro (lambda (G36db@stx) ((lambda (G36dd@t) ((lambda (G36df@ls/false) (if G36df@ls/false (apply (lambda (G36e1@expr) ((lambda (G36e3@str) (G3047@bless (list 'time-it G36e3@str (list 'lambda '() G36e1@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G36e7@G36e5 G36e8@G36e6) ((lambda (G36eb@e G36ec@p) (begin (write (G318a@syntax->datum G36e1@expr) G36ec@p) (G36eb@e))) G36e8@G36e6 G36e7@G36e5))))) G36df@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G36dd@t))) (G3091@syntax-dispatch G36dd@t '(_ any)))) G36db@stx))) (set! G3065@delay-macro (lambda (G36ef@stx) ((lambda (G36f1@t) ((lambda (G36f3@ls/false) (if G36f3@ls/false (apply (lambda (G36f5@expr) (G3047@bless (list 'make-promise (list 'lambda '() G36f5@expr)))) G36f3@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G36f1@t))) (G3091@syntax-dispatch G36f1@t '(_ any)))) G36ef@stx))) (set! G3067@assert-macro (lambda (G36f7@stx) ((lambda (G36f9@t) ((lambda (G36fb@ls/false) (if G36fb@ls/false (apply (lambda (G36fd@expr) ((lambda (G36ff@pos) (G3047@bless (list 'unless G36fd@expr (list 'assertion-error (list 'quote G36fd@expr) (list 'quote G36ff@pos))))) ((lambda (G3701@t) (if G3701@t G3701@t (begin '#f (G317a@expression-position G36fd@expr)))) (G317a@expression-position G36f7@stx)))) G36fb@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G36f9@t))) (G3091@syntax-dispatch G36f9@t '(_ any)))) G36f7@stx))) (set! G3069@endianness-macro (lambda (G3703@stx) ((lambda (G3705@t) ((lambda (G3707@ls/false) (if G3707@ls/false (apply (lambda (G3709@e) ((lambda (G370b@t) (if (memv G370b@t '(little)) (G3047@bless ''little) (if (memv G370b@t '(big)) (G3047@bless ''big) (G3184@syntax-violation '#f '"endianness must be big or little" G3703@stx)))) (G318a@syntax->datum G3709@e))) G3707@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3705@t))) (G3091@syntax-dispatch G3705@t '(_ any)))) G3703@stx))) (set! G306b@identifier-syntax-macro (lambda (G370d@stx) ((lambda (G370f@t) ((lambda (G3711@ls/false) (if G3711@ls/false (apply (lambda (G3713@expr) (G3047@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G3713@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G3713@expr) '((syntax (e* ...)))))))))) G3711@ls/false) ((lambda (G3715@t) ((lambda (G3717@ls/false) (if (if G3717@ls/false (begin '#f (apply (lambda (G3719@id1 G371a@expr1 G371b@id2 G371c@expr2 G371d@expr3) (if (G2e4e@id? G3719@id1) (if (G2e4e@id? G371b@id2) (begin '#f (G2e4e@id? G371c@expr2)) '#f) '#f)) G3717@ls/false)) '#f) (apply (lambda (G3723@id1 G3724@expr1 G3725@id2 G3726@expr2 G3727@expr3) (G3047@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G3724@expr1)) (list (list 'set! 'id G3726@expr2) (list 'syntax G3727@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G3724@expr1 '(e* ...))))))))) G3717@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3715@t))) (G3091@syntax-dispatch G3715@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G370f@t))) (G3091@syntax-dispatch G370f@t '(_ any)))) G370d@stx))) (set! G306d@do-macro (lambda (G372d@stx) ((lambda (G3730@bind) (begin (set! G3730@bind (lambda (G3747@x) ((lambda (G3749@t) ((lambda (G374b@ls/false) (if G374b@ls/false (apply (lambda (G374d@x G374e@init) (list G374d@x G374e@init G374d@x)) G374b@ls/false) ((lambda (G3751@t) ((lambda (G3753@ls/false) (if G3753@ls/false (apply (lambda (G3755@x G3756@init G3757@step) (list G3755@x G3756@init G3757@step)) G3753@ls/false) ((lambda (G375b@t) ((lambda (G375d@ls/false) (if G375d@ls/false (apply (lambda () (G3184@syntax-violation '#f '"invalid binding" G372d@stx)) G375d@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G375b@t))) (G3091@syntax-dispatch G375b@t '_))) G3751@t))) (G3091@syntax-dispatch G3751@t '(any any any)))) G3749@t))) (G3091@syntax-dispatch G3749@t '(any any)))) G3747@x))) ((lambda (G3731@t) ((lambda (G3733@ls/false) (if G3733@ls/false (apply (lambda (G3735@binding* G3736@test G3737@expr* G3738@command*) ((lambda (G373d@t) ((lambda (G373f@ls/false) (if G373f@ls/false (apply (lambda (G3741@x* G3742@init* G3743@step*) (if (G2e58@valid-bound-ids? G3741@x*) (G3047@bless (list 'letrec (list (list 'loop (list 'lambda G3741@x* (list 'if G3736@test (cons 'begin (cons '(if #f #f) G3737@expr*)) (cons 'begin (append G3738@command* (list (cons 'loop G3743@step*)))))))) (cons 'loop G3742@init*))) (G3184@syntax-violation '#f '"invalid bindings" G372d@stx))) G373f@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G373d@t))) (G3091@syntax-dispatch G373d@t '#(each (any any any))))) (map G3730@bind G3735@binding*))) G3733@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3731@t))) (G3091@syntax-dispatch G3731@t '(_ each-any (any . each-any) . each-any)))) G372d@stx))) '#f))) (set! G306f@let*-macro (lambda (G375f@stx) ((lambda (G3761@t) ((lambda (G3763@ls/false) (if (if G3763@ls/false (begin '#f (apply (lambda (G3765@lhs* G3766@rhs* G3767@b G3768@b*) (for-all G2e4e@id? G3765@lhs*)) G3763@ls/false)) '#f) (apply (lambda (G376d@lhs* G376e@rhs* G376f@b G3770@b*) (G3047@bless ((letrec ((G3775@f (lambda (G3777@x*) (if (null? G3777@x*) (cons 'let (cons '() (cons G376f@b G3770@b*))) (list 'let (list (car G3777@x*)) (G3775@f (cdr G3777@x*))))))) G3775@f) (map list G376d@lhs* G376e@rhs*)))) G3763@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3761@t))) (G3091@syntax-dispatch G3761@t '(_ #(each (any any)) any . each-any)))) G375f@stx))) (set! G3071@or-macro (lambda (G3779@stx) ((lambda (G377b@t) ((lambda (G377d@ls/false) (if G377d@ls/false (apply (lambda () '#f) G377d@ls/false) ((lambda (G377f@t) ((lambda (G3781@ls/false) (if G3781@ls/false (apply (lambda (G3783@e G3784@e*) (G3047@bless ((letrec ((G3787@f (lambda (G3789@e G378a@e*) (if (null? G378a@e*) (list 'begin '#f G3789@e) (list 'let (list (list 't G3789@e)) (list 'if 't 't (G3787@f (car G378a@e*) (cdr G378a@e*)))))))) G3787@f) G3783@e G3784@e*))) G3781@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G377f@t))) (G3091@syntax-dispatch G377f@t '(_ any . each-any)))) G377b@t))) (G3091@syntax-dispatch G377b@t '(_)))) G3779@stx))) (set! G3073@and-macro (lambda (G378d@stx) ((lambda (G378f@t) ((lambda (G3791@ls/false) (if G3791@ls/false (apply (lambda () '#t) G3791@ls/false) ((lambda (G3793@t) ((lambda (G3795@ls/false) (if G3795@ls/false (apply (lambda (G3797@e G3798@e*) (G3047@bless ((letrec ((G379b@f (lambda (G379d@e G379e@e*) (if (null? G379e@e*) (list 'begin '#f G379d@e) (cons 'if (cons G379d@e (cons (G379b@f (car G379e@e*) (cdr G379e@e*)) '(#f)))))))) G379b@f) G3797@e G3798@e*))) G3795@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3793@t))) (G3091@syntax-dispatch G3793@t '(_ any . each-any)))) G378f@t))) (G3091@syntax-dispatch G378f@t '(_)))) G378d@stx))) (set! G3075@cond-macro (lambda (G37a1@stx) ((lambda (G37a3@t) ((lambda (G37a5@ls/false) (if G37a5@ls/false (apply (lambda (G37a7@cls G37a8@cls*) (G3047@bless ((letrec ((G37ab@f (lambda (G37ad@cls G37ae@cls*) (if (null? G37ae@cls*) ((lambda (G37b1@t) ((lambda (G37b3@ls/false) (if G37b3@ls/false (apply (lambda (G37b5@e G37b6@e*) (cons 'begin (cons G37b5@e G37b6@e*))) G37b3@ls/false) ((lambda (G37b9@t) ((lambda (G37bb@ls/false) (if G37bb@ls/false (apply (lambda (G37bd@e G37be@p) (list 'let (list (list 't G37bd@e)) (list 'if 't (cons G37be@p '(t))))) G37bb@ls/false) ((lambda (G37c1@t) ((lambda (G37c3@ls/false) (if G37c3@ls/false (apply (lambda (G37c5@e) (cons 'or (cons G37c5@e '((if #f #f))))) G37c3@ls/false) ((lambda (G37c7@t) ((lambda (G37c9@ls/false) (if G37c9@ls/false (apply (lambda (G37cb@e G37cc@e*) (list 'if G37cb@e (cons 'begin G37cc@e*))) G37c9@ls/false) ((lambda (G37cf@t) ((lambda (G37d1@ls/false) (if G37d1@ls/false (apply (lambda () (G3184@syntax-violation '#f '"invalid last clause" G37a1@stx)) G37d1@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G37cf@t))) (G3091@syntax-dispatch G37cf@t '_))) G37c7@t))) (G3091@syntax-dispatch G37c7@t '(any . each-any)))) G37c1@t))) (G3091@syntax-dispatch G37c1@t '(any)))) G37b9@t))) (G3091@syntax-dispatch G37b9@t '(any #(scheme-id =>) any)))) G37b1@t))) (G3091@syntax-dispatch G37b1@t '(#(scheme-id else) any . each-any)))) G37ad@cls) ((lambda (G37d3@t) ((lambda (G37d5@ls/false) (if G37d5@ls/false (apply (lambda (G37d7@e G37d8@e*) (G3184@syntax-violation '#f '"incorrect position of keyword else" G37a1@stx)) G37d5@ls/false) ((lambda (G37db@t) ((lambda (G37dd@ls/false) (if G37dd@ls/false (apply (lambda (G37df@e G37e0@p) (list 'let (list (list 't G37df@e)) (list 'if 't (cons G37e0@p '(t)) (G37ab@f (car G37ae@cls*) (cdr G37ae@cls*))))) G37dd@ls/false) ((lambda (G37e3@t) ((lambda (G37e5@ls/false) (if G37e5@ls/false (apply (lambda (G37e7@e) (list 'or G37e7@e (G37ab@f (car G37ae@cls*) (cdr G37ae@cls*)))) G37e5@ls/false) ((lambda (G37e9@t) ((lambda (G37eb@ls/false) (if G37eb@ls/false (apply (lambda (G37ed@e G37ee@e*) (list 'if G37ed@e (cons 'begin G37ee@e*) (G37ab@f (car G37ae@cls*) (cdr G37ae@cls*)))) G37eb@ls/false) ((lambda (G37f1@t) ((lambda (G37f3@ls/false) (if G37f3@ls/false (apply (lambda () (G3184@syntax-violation '#f '"invalid last clause" G37a1@stx)) G37f3@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G37f1@t))) (G3091@syntax-dispatch G37f1@t '_))) G37e9@t))) (G3091@syntax-dispatch G37e9@t '(any . each-any)))) G37e3@t))) (G3091@syntax-dispatch G37e3@t '(any)))) G37db@t))) (G3091@syntax-dispatch G37db@t '(any #(scheme-id =>) any)))) G37d3@t))) (G3091@syntax-dispatch G37d3@t '(#(scheme-id else) any . each-any)))) G37ad@cls))))) G37ab@f) G37a7@cls G37a8@cls*))) G37a5@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G37a3@t))) (G3091@syntax-dispatch G37a3@t '(_ any . each-any)))) G37a1@stx))) (set! G3077@do-include (lambda (G37f5@stx G37f6@id G37f7@filename) ((lambda (G37fb@filename) (begin (if (not (if (string? G37fb@filename) (begin '#f (G2e4e@id? G37f6@id)) '#f)) (G3184@syntax-violation '#f '"invalid syntax" G37f5@stx) (void)) (cons (G3047@bless 'begin) (with-input-from-file G37fb@filename (lambda () ((letrec ((G37fd@f (lambda (G37ff@ls) ((lambda (G3801@x) (if (eof-object? G3801@x) (reverse G37ff@ls) (G37fd@f (cons (G2e2c@datum->stx G37f6@id G3801@x) G37ff@ls)))) (G2993@G2891@read-annotated))))) G37fd@f) '())))))) (G2e64@stx->datum G37f7@filename)))) (set! G3079@include-macro (lambda (G3803@e) ((lambda (G3805@t) ((lambda (G3807@ls/false) (if G3807@ls/false (apply (lambda (G3809@id G380a@filename) (G3077@do-include G3803@e G3809@id G380a@filename)) G3807@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3805@t))) (G3091@syntax-dispatch G3805@t '(any any)))) G3803@e))) (set! G307b@include-into-macro (lambda (G380d@e) ((lambda (G380f@t) ((lambda (G3811@ls/false) (if G3811@ls/false (apply (lambda (G3813@id G3814@filename) (G3077@do-include G380d@e G3813@id G3814@filename)) G3811@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G380f@t))) (G3091@syntax-dispatch G380f@t '(_ any any)))) G380d@e))) (set! G307d@syntax-rules-macro (lambda (G3817@e) ((lambda (G3819@t) ((lambda (G381b@ls/false) (if G381b@ls/false (apply (lambda (G381d@lits G381e@pat* G381f@tmp*) (begin (G3097@verify-literals G381d@lits G3817@e) (G3047@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G381d@lits (map (lambda (G3823@pat G3824@tmp) ((lambda (G3827@t) ((lambda (G3829@ls/false) (if G3829@ls/false (apply (lambda (G382b@rest) (list (cons 'g G382b@rest) (list 'syntax G3824@tmp))) G3829@ls/false) ((lambda (G382d@t) ((lambda (G382f@ls/false) (if G382f@ls/false (apply (lambda () (G3184@syntax-violation '#f '"invalid syntax-rules pattern" G3817@e G3823@pat)) G382f@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G382d@t))) (G3091@syntax-dispatch G382d@t '_))) G3827@t))) (G3091@syntax-dispatch G3827@t '(_ . any)))) G3823@pat)) G381e@pat* G381f@tmp*)))))))) G381b@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3819@t))) (G3091@syntax-dispatch G3819@t '(_ each-any . #(each (any any)))))) G3817@e))) (set! G307f@quasiquote-macro ((lambda () ((lambda (G3832@datum G385b@quasicons* G385d@quasicons G385f@quasiappend G3861@quasivector G3863@vquasi G3865@quasi) (begin (set! G3832@datum (lambda (G3940@x) (list (G301f@scheme-stx 'quote) (G2e36@mkstx G3940@x '() '() '())))) (set! G385b@quasicons* (lambda (G3938@x G3939@y) ((letrec ((G393c@f (lambda (G393e@x) (if (null? G393e@x) G3939@y (G385d@quasicons (car G393e@x) (G393c@f (cdr G393e@x))))))) G393c@f) G3938@x))) (set! G385d@quasicons (lambda (G3912@x G3913@y) ((lambda (G3916@t) ((lambda (G3918@ls/false) (if G3918@ls/false (apply (lambda (G391a@dy) ((lambda (G391c@t) ((lambda (G391e@ls/false) (if G391e@ls/false (apply (lambda (G3920@dx) (list (G301f@scheme-stx 'quote) (cons G3920@dx G391a@dy))) G391e@ls/false) ((lambda (G3922@t) ((lambda (G3924@ls/false) (if G3924@ls/false (apply (lambda () ((lambda (G3926@t) ((lambda (G3928@ls/false) (if G3928@ls/false (apply (lambda () (list (G301f@scheme-stx 'list) G3912@x)) G3928@ls/false) ((lambda (G392a@t) ((lambda (G392c@ls/false) (if G392c@ls/false (apply (lambda () (list (G301f@scheme-stx 'cons) G3912@x G3913@y)) G392c@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G392a@t))) (G3091@syntax-dispatch G392a@t '_))) G3926@t))) (G3091@syntax-dispatch G3926@t '()))) G391a@dy)) G3924@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3922@t))) (G3091@syntax-dispatch G3922@t '_))) G391c@t))) (G3091@syntax-dispatch G391c@t '(#(scheme-id quote) any)))) G3912@x)) G3918@ls/false) ((lambda (G392e@t) ((lambda (G3930@ls/false) (if G3930@ls/false (apply (lambda (G3932@stuff) (cons* (G301f@scheme-stx 'list) G3912@x G3932@stuff)) G3930@ls/false) ((lambda (G3934@t) ((lambda (G3936@ls/false) (if G3936@ls/false (apply (lambda () (list (G301f@scheme-stx 'cons) G3912@x G3913@y)) G3936@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3934@t))) (G3091@syntax-dispatch G3934@t '_))) G392e@t))) (G3091@syntax-dispatch G392e@t '(#(scheme-id list) . each-any)))) G3916@t))) (G3091@syntax-dispatch G3916@t '(#(scheme-id quote) any)))) G3913@y))) (set! G385f@quasiappend (lambda (G38f8@x G38f9@y) ((lambda (G38fc@ls) (if (null? G38fc@ls) (list (G301f@scheme-stx 'quote) '()) (if (null? (cdr G38fc@ls)) (car G38fc@ls) (cons* (G301f@scheme-stx 'append) G38fc@ls)))) ((letrec ((G38fe@f (lambda (G3900@x) (if (null? G3900@x) ((lambda (G3902@t) ((lambda (G3904@ls/false) (if G3904@ls/false (apply (lambda () '()) G3904@ls/false) ((lambda (G3906@t) ((lambda (G3908@ls/false) (if G3908@ls/false (apply (lambda () (list G38f9@y)) G3908@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3906@t))) (G3091@syntax-dispatch G3906@t '_))) G3902@t))) (G3091@syntax-dispatch G3902@t '(#(scheme-id quote) ())))) G38f9@y) ((lambda (G390a@t) ((lambda (G390c@ls/false) (if G390c@ls/false (apply (lambda () (G38fe@f (cdr G3900@x))) G390c@ls/false) ((lambda (G390e@t) ((lambda (G3910@ls/false) (if G3910@ls/false (apply (lambda () (cons (car G3900@x) (G38fe@f (cdr G3900@x)))) G3910@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G390e@t))) (G3091@syntax-dispatch G390e@t '_))) G390a@t))) (G3091@syntax-dispatch G390a@t '(#(scheme-id quote) ())))) (car G3900@x)))))) G38fe@f) G38f8@x)))) (set! G3861@quasivector (lambda (G38c6@x) ((lambda (G38c8@pat-x) ((lambda (G38ca@t) ((lambda (G38cc@ls/false) (if G38cc@ls/false (apply (lambda (G38ce@x*) (list (G301f@scheme-stx 'quote) (list->vector G38ce@x*))) G38cc@ls/false) ((lambda (G38d0@t) ((lambda (G38d2@ls/false) (if G38d2@ls/false (apply (lambda () ((letrec ((G38d4@f (lambda (G38d6@x G38d7@k) ((lambda (G38da@t) ((lambda (G38dc@ls/false) (if G38dc@ls/false (apply (lambda (G38de@x*) (G38d7@k (map (lambda (G38e0@x) (list (G301f@scheme-stx 'quote) G38e0@x)) G38de@x*))) G38dc@ls/false) ((lambda (G38e2@t) ((lambda (G38e4@ls/false) (if G38e4@ls/false (apply (lambda (G38e6@x*) (G38d7@k G38e6@x*)) G38e4@ls/false) ((lambda (G38e8@t) ((lambda (G38ea@ls/false) (if G38ea@ls/false (apply (lambda (G38ec@x G38ed@y) (G38d4@f G38ed@y (lambda (G38f0@ls) (G38d7@k (cons G38ec@x G38f0@ls))))) G38ea@ls/false) ((lambda (G38f2@t) ((lambda (G38f4@ls/false) (if G38f4@ls/false (apply (lambda () (list (G301f@scheme-stx 'list->vector) G38c8@pat-x)) G38f4@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G38f2@t))) (G3091@syntax-dispatch G38f2@t '_))) G38e8@t))) (G3091@syntax-dispatch G38e8@t '(#(scheme-id cons) any any)))) G38e2@t))) (G3091@syntax-dispatch G38e2@t '(#(scheme-id list) . each-any)))) G38da@t))) (G3091@syntax-dispatch G38da@t '(#(scheme-id quote) each-any)))) G38d6@x)))) G38d4@f) G38c6@x (lambda (G38f6@ls) (cons* (G301f@scheme-stx 'vector) G38f6@ls)))) G38d2@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G38d0@t))) (G3091@syntax-dispatch G38d0@t '_))) G38ca@t))) (G3091@syntax-dispatch G38ca@t '(#(scheme-id quote) each-any)))) G38c8@pat-x)) G38c6@x))) (set! G3863@vquasi (lambda (G38a4@p G38a5@lev) ((lambda (G38a8@t) ((lambda (G38aa@ls/false) (if G38aa@ls/false (apply (lambda (G38ac@p G38ad@q) ((lambda (G38b0@t) ((lambda (G38b2@ls/false) (if G38b2@ls/false (apply (lambda (G38b4@p) (if (= G38a5@lev '0) (G385b@quasicons* G38b4@p (G3863@vquasi G38ad@q G38a5@lev)) (G385d@quasicons (G385d@quasicons (G3832@datum 'unquote) (G3865@quasi G38b4@p (- G38a5@lev '1))) (G3863@vquasi G38ad@q G38a5@lev)))) G38b2@ls/false) ((lambda (G38b6@t) ((lambda (G38b8@ls/false) (if G38b8@ls/false (apply (lambda (G38ba@p) (if (= G38a5@lev '0) (G385f@quasiappend G38ba@p (G3863@vquasi G38ad@q G38a5@lev)) (G385d@quasicons (G385d@quasicons (G3832@datum 'unquote-splicing) (G3865@quasi G38ba@p (- G38a5@lev '1))) (G3863@vquasi G38ad@q G38a5@lev)))) G38b8@ls/false) ((lambda (G38bc@t) ((lambda (G38be@ls/false) (if G38be@ls/false (apply (lambda (G38c0@p) (G385d@quasicons (G3865@quasi G38c0@p G38a5@lev) (G3863@vquasi G38ad@q G38a5@lev))) G38be@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G38bc@t))) (G3091@syntax-dispatch G38bc@t 'any))) G38b6@t))) (G3091@syntax-dispatch G38b6@t '(#(scheme-id unquote-splicing) . each-any)))) G38b0@t))) (G3091@syntax-dispatch G38b0@t '(#(scheme-id unquote) . each-any)))) G38ac@p)) G38aa@ls/false) ((lambda (G38c2@t) ((lambda (G38c4@ls/false) (if G38c4@ls/false (apply (lambda () (list (G301f@scheme-stx 'quote) '())) G38c4@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G38c2@t))) (G3091@syntax-dispatch G38c2@t '()))) G38a8@t))) (G3091@syntax-dispatch G38a8@t '(any . any)))) G38a4@p))) (set! G3865@quasi (lambda (G386e@p G386f@lev) ((lambda (G3872@t) ((lambda (G3874@ls/false) (if G3874@ls/false (apply (lambda (G3876@p) (if (= G386f@lev '0) G3876@p (G385d@quasicons (G3832@datum 'unquote) (G3865@quasi (list G3876@p) (- G386f@lev '1))))) G3874@ls/false) ((lambda (G3878@t) ((lambda (G387a@ls/false) (if G387a@ls/false (apply (lambda (G387c@p G387d@q) (if (= G386f@lev '0) (G385b@quasicons* G387c@p (G3865@quasi G387d@q G386f@lev)) (G385d@quasicons (G385d@quasicons (G3832@datum 'unquote) (G3865@quasi G387c@p (- G386f@lev '1))) (G3865@quasi G387d@q G386f@lev)))) G387a@ls/false) ((lambda (G3880@t) ((lambda (G3882@ls/false) (if G3882@ls/false (apply (lambda (G3884@p G3885@q) (if (= G386f@lev '0) (G385f@quasiappend G3884@p (G3865@quasi G3885@q G386f@lev)) (G385d@quasicons (G385d@quasicons (G3832@datum 'unquote-splicing) (G3865@quasi G3884@p (- G386f@lev '1))) (G3865@quasi G3885@q G386f@lev)))) G3882@ls/false) ((lambda (G3888@t) ((lambda (G388a@ls/false) (if G388a@ls/false (apply (lambda (G388c@p) (G385d@quasicons (G3832@datum 'quasiquote) (G3865@quasi (list G388c@p) (+ G386f@lev '1)))) G388a@ls/false) ((lambda (G388e@t) ((lambda (G3890@ls/false) (if G3890@ls/false (apply (lambda (G3892@p G3893@q) (G385d@quasicons (G3865@quasi G3892@p G386f@lev) (G3865@quasi G3893@q G386f@lev))) G3890@ls/false) ((lambda (G3896@t) ((lambda (G3898@ls/false) (if (if G3898@ls/false (begin '#f (apply (lambda (G389a@x) (not (G2e16@stx? G389a@x))) G3898@ls/false)) '#f) (apply (lambda (G389c@x) (G3861@quasivector (G3863@vquasi G389c@x G386f@lev))) G3898@ls/false) ((lambda (G389e@t) ((lambda (G38a0@ls/false) (if G38a0@ls/false (apply (lambda (G38a2@p) (list (G301f@scheme-stx 'quote) G38a2@p)) G38a0@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G389e@t))) (G3091@syntax-dispatch G389e@t 'any))) G3896@t))) (G3091@syntax-dispatch G3896@t '#(vector each-any)))) G388e@t))) (G3091@syntax-dispatch G388e@t '(any . any)))) G3888@t))) (G3091@syntax-dispatch G3888@t '(#(scheme-id quasiquote) any)))) G3880@t))) (G3091@syntax-dispatch G3880@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3878@t))) (G3091@syntax-dispatch G3878@t '((#(scheme-id unquote) . each-any) . any)))) G3872@t))) (G3091@syntax-dispatch G3872@t '(#(scheme-id unquote) any)))) G386e@p))) (lambda (G3866@x) ((lambda (G3868@t) ((lambda (G386a@ls/false) (if G386a@ls/false (apply (lambda (G386c@e) (G3865@quasi G386c@e '0)) G386a@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3868@t))) (G3091@syntax-dispatch G3868@t '(_ any)))) G3866@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G3081@quasisyntax-macro ((lambda () ((lambda (G3943@quasi) (begin (set! G3943@quasi (lambda (G395b@p G395c@lev) ((lambda (G395f@t) ((lambda (G3961@ls/false) (if G3961@ls/false (apply (lambda (G3963@p) (if (= G395c@lev '0) ((lambda (G3965@g) (values (list G3965@g) (list G3963@p) G3965@g)) (gensym)) (call-with-values (lambda () (G3943@quasi G3963@p (- G395c@lev '1))) (lambda (G396a@G3967 G396b@G3968 G396c@G3969) ((lambda (G3970@p G3971@rhs* G3972@lhs*) (values G3972@lhs* G3971@rhs* (list 'unsyntax G3970@p))) G396c@G3969 G396b@G3968 G396a@G3967))))) G3961@ls/false) ((lambda (G3976@t) ((lambda (G3978@ls/false) (if (if G3978@ls/false (begin '#f (apply (lambda () (= G395c@lev '0)) G3978@ls/false)) '#f) (apply (lambda () (G3184@syntax-violation '#f '"incorrect use of unsyntax" G395b@p)) G3978@ls/false) ((lambda (G397a@t) ((lambda (G397c@ls/false) (if G397c@ls/false (apply (lambda (G397e@p* G397f@q) (call-with-values (lambda () (G3943@quasi G397f@q G395c@lev)) (lambda (G3985@G3982 G3986@G3983 G3987@G3984) ((lambda (G398b@q G398c@rhs* G398d@lhs*) (if (= G395c@lev '0) ((lambda (G3991@g*) (values (append G3991@g* G398d@lhs*) (append G397e@p* G398c@rhs*) (append G3991@g* G398b@q))) (map (lambda (G3993@x) (gensym)) G397e@p*)) (call-with-values (lambda () (G3943@quasi G397e@p* (- G395c@lev '1))) (lambda (G3998@G3995 G3999@G3996 G399a@G3997) ((lambda (G399e@p* G399f@rhs2* G39a0@lhs2*) (values (append G39a0@lhs2* G398d@lhs*) (append G399f@rhs2* G398c@rhs*) (cons (cons 'unsyntax G399e@p*) G398b@q))) G399a@G3997 G3999@G3996 G3998@G3995))))) G3987@G3984 G3986@G3983 G3985@G3982)))) G397c@ls/false) ((lambda (G39a4@t) ((lambda (G39a6@ls/false) (if G39a6@ls/false (apply (lambda (G39a8@p* G39a9@q) (call-with-values (lambda () (G3943@quasi G39a9@q G395c@lev)) (lambda (G39af@G39ac G39b0@G39ad G39b1@G39ae) ((lambda (G39b5@q G39b6@rhs* G39b7@lhs*) (if (= G395c@lev '0) ((lambda (G39bb@g*) (values (append (map (lambda (G39bd@g) (cons G39bd@g '(...))) G39bb@g*) G39b7@lhs*) (append G39a8@p* G39b6@rhs*) (append (apply append (map (lambda (G39bf@g) (cons G39bf@g '(...))) G39bb@g*)) G39b5@q))) (map (lambda (G39c1@x) (gensym)) G39a8@p*)) (call-with-values (lambda () (G3943@quasi G39a8@p* (- G395c@lev '1))) (lambda (G39c6@G39c3 G39c7@G39c4 G39c8@G39c5) ((lambda (G39cc@p* G39cd@rhs2* G39ce@lhs2*) (values (append G39ce@lhs2* G39b7@lhs*) (append G39cd@rhs2* G39b6@rhs*) (cons (cons 'unsyntax-splicing G39cc@p*) G39b5@q))) G39c8@G39c5 G39c7@G39c4 G39c6@G39c3))))) G39b1@G39ae G39b0@G39ad G39af@G39ac)))) G39a6@ls/false) ((lambda (G39d2@t) ((lambda (G39d4@ls/false) (if (if G39d4@ls/false (begin '#f (apply (lambda () (= G395c@lev '0)) G39d4@ls/false)) '#f) (apply (lambda () (G3184@syntax-violation '#f '"incorrect use of unsyntax-splicing" G395b@p)) G39d4@ls/false) ((lambda (G39d6@t) ((lambda (G39d8@ls/false) (if G39d8@ls/false (apply (lambda (G39da@p) (call-with-values (lambda () (G3943@quasi G39da@p (+ G395c@lev '1))) (lambda (G39df@G39dc G39e0@G39dd G39e1@G39de) ((lambda (G39e5@p G39e6@rhs* G39e7@lhs*) (values G39e7@lhs* G39e6@rhs* (list 'quasisyntax G39e5@p))) G39e1@G39de G39e0@G39dd G39df@G39dc)))) G39d8@ls/false) ((lambda (G39eb@t) ((lambda (G39ed@ls/false) (if G39ed@ls/false (apply (lambda (G39ef@p G39f0@q) (call-with-values (lambda () (G3943@quasi G39ef@p G395c@lev)) (lambda (G39f9@G39f3 G39fa@G39f4 G39fb@G39f5) (call-with-values (lambda () (G3943@quasi G39f0@q G395c@lev)) (lambda (G39ff@G39f6 G3a00@G39f7 G3a01@G39f8) ((lambda (G3a05@q G3a06@rhs2* G3a07@lhs2* G3a08@p G3a09@rhs* G3a0a@lhs*) (values (append G3a07@lhs2* G3a0a@lhs*) (append G3a06@rhs2* G3a09@rhs*) (cons G3a08@p G3a05@q))) G3a01@G39f8 G3a00@G39f7 G39ff@G39f6 G39fb@G39f5 G39fa@G39f4 G39f9@G39f3)))))) G39ed@ls/false) ((lambda (G3a11@t) ((lambda (G3a13@ls/false) (if G3a13@ls/false (apply (lambda (G3a15@x*) (call-with-values (lambda () (G3943@quasi G3a15@x* G395c@lev)) (lambda (G3a1a@G3a17 G3a1b@G3a18 G3a1c@G3a19) ((lambda (G3a20@x* G3a21@rhs* G3a22@lhs*) (values G3a22@lhs* G3a21@rhs* (list->vector G3a20@x*))) G3a1c@G3a19 G3a1b@G3a18 G3a1a@G3a17)))) G3a13@ls/false) ((lambda (G3a26@t) ((lambda (G3a28@ls/false) (if G3a28@ls/false (apply (lambda () (values '() '() G395b@p)) G3a28@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3a26@t))) (G3091@syntax-dispatch G3a26@t '_))) G3a11@t))) (G3091@syntax-dispatch G3a11@t '#(vector each-any)))) G39eb@t))) (G3091@syntax-dispatch G39eb@t '(any . any)))) G39d6@t))) (G3091@syntax-dispatch G39d6@t '(#(scheme-id quasisyntax) any)))) G39d2@t))) (G3091@syntax-dispatch G39d2@t '#(scheme-id unsyntax-splicing)))) G39a4@t))) (G3091@syntax-dispatch G39a4@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G397a@t))) (G3091@syntax-dispatch G397a@t '((#(scheme-id unsyntax) . each-any) . any)))) G3976@t))) (G3091@syntax-dispatch G3976@t '#(scheme-id unsyntax)))) G395f@t))) (G3091@syntax-dispatch G395f@t '(#(scheme-id unsyntax) any)))) G395b@p))) (lambda (G3944@x) ((lambda (G3946@t) ((lambda (G3948@ls/false) (if G3948@ls/false (apply (lambda (G394a@e) (call-with-values (lambda () (G3943@quasi G394a@e '0)) (lambda (G394f@G394c G3950@G394d G3951@G394e) ((lambda (G3955@v G3956@rhs* G3957@lhs*) (G3047@bless (list 'syntax-case (cons 'list G3956@rhs*) '() (list G3957@lhs* (list 'syntax G3955@v))))) G3951@G394e G3950@G394d G394f@G394c)))) G3948@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3946@t))) (G3091@syntax-dispatch G3946@t '(_ any)))) G3944@x)))) '#f)))) (set! G3083@define-struct-macro (lambda (G3a2a@stx) (G3184@syntax-violation '#f '"define-struct not supported" G3a2a@stx))) (set! G3085@define-record-type-macro (lambda (G3a2c@x) ((lambda (G3a2f@id G3a31@get-record-name G3a33@get-record-constructor-name G3a35@get-record-predicate-name G3a37@get-clause G3a39@foo-rtd-code G3a3b@parent-rtd-code G3a3d@parent-rcd-code G3a3f@foo-rcd-code G3a41@get-protocol-code G3a43@get-fields G3a45@get-mutator-indices G3a47@get-mutators G3a49@get-accessors G3a4b@enumerate G3a4d@do-define-record G3a4f@verify-clauses) (begin (set! G3a2f@id (lambda (G3c26@ctxt . G3c28@str*) (G3188@datum->syntax G3c26@ctxt (string->symbol (apply string-append (map (lambda (G3c2a@x) (if (symbol? G3c2a@x) (symbol->string G3c2a@x) (if (string? G3c2a@x) G3c2a@x (assertion-violation 'define-record-type '"BUG")))) G3c28@str*)))))) (set! G3a31@get-record-name (lambda (G3c14@spec) ((lambda (G3c16@t) ((lambda (G3c18@ls/false) (if G3c18@ls/false (apply (lambda (G3c1a@foo G3c1b@make-foo G3c1c@foo?) G3c1a@foo) G3c18@ls/false) ((lambda (G3c20@t) ((lambda (G3c22@ls/false) (if G3c22@ls/false (apply (lambda (G3c24@foo) G3c24@foo) G3c22@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3c20@t))) (G3091@syntax-dispatch G3c20@t 'any))) G3c16@t))) (G3091@syntax-dispatch G3c16@t '(any any any)))) G3c14@spec))) (set! G3a33@get-record-constructor-name (lambda (G3c00@spec) ((lambda (G3c02@t) ((lambda (G3c04@ls/false) (if G3c04@ls/false (apply (lambda (G3c06@foo G3c07@make-foo G3c08@foo?) G3c07@make-foo) G3c04@ls/false) ((lambda (G3c0c@t) ((lambda (G3c0e@ls/false) (if (if G3c0e@ls/false (begin '#f (apply (lambda (G3c10@foo) (G2e4e@id? G3c10@foo)) G3c0e@ls/false)) '#f) (apply (lambda (G3c12@foo) (G3a2f@id G3c12@foo '"make-" (G2e64@stx->datum G3c12@foo))) G3c0e@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3c0c@t))) (G3091@syntax-dispatch G3c0c@t 'any))) G3c02@t))) (G3091@syntax-dispatch G3c02@t '(any any any)))) G3c00@spec))) (set! G3a35@get-record-predicate-name (lambda (G3bec@spec) ((lambda (G3bee@t) ((lambda (G3bf0@ls/false) (if G3bf0@ls/false (apply (lambda (G3bf2@foo G3bf3@make-foo G3bf4@foo?) G3bf4@foo?) G3bf0@ls/false) ((lambda (G3bf8@t) ((lambda (G3bfa@ls/false) (if (if G3bfa@ls/false (begin '#f (apply (lambda (G3bfc@foo) (G2e4e@id? G3bfc@foo)) G3bfa@ls/false)) '#f) (apply (lambda (G3bfe@foo) (G3a2f@id G3bfe@foo (G2e64@stx->datum G3bfe@foo) '"?")) G3bfa@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3bf8@t))) (G3091@syntax-dispatch G3bf8@t 'any))) G3bee@t))) (G3091@syntax-dispatch G3bee@t '(any any any)))) G3bec@spec))) (set! G3a37@get-clause (lambda (G3bda@id G3bdb@ls) ((lambda (G3bde@t) ((lambda (G3be0@ls/false) (if G3be0@ls/false (apply (lambda () '#f) G3be0@ls/false) ((lambda (G3be2@t) ((lambda (G3be4@ls/false) (if G3be4@ls/false (apply (lambda (G3be6@x G3be7@rest G3be8@ls) (if (G2e56@free-id=? (G3047@bless G3bda@id) G3be6@x) (cons G3be6@x G3be7@rest) (G3a37@get-clause G3bda@id G3be8@ls))) G3be4@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3be2@t))) (G3091@syntax-dispatch G3be2@t '((any . any) . any)))) G3bde@t))) (G3091@syntax-dispatch G3bde@t '()))) G3bdb@ls))) (set! G3a39@foo-rtd-code (lambda (G3b88@name G3b89@clause* G3b8a@parent-rtd-code) ((lambda (G3b8f@convert-field-spec*) (begin (set! G3b8f@convert-field-spec* (lambda (G3bc0@ls) (list->vector (map (lambda (G3bc2@x) ((lambda (G3bc4@t) ((lambda (G3bc6@ls/false) (if G3bc6@ls/false (apply (lambda (G3bc8@name G3bc9@rest) (list 'mutable G3bc8@name)) G3bc6@ls/false) ((lambda (G3bcc@t) ((lambda (G3bce@ls/false) (if G3bce@ls/false (apply (lambda (G3bd0@name G3bd1@rest) (list 'immutable G3bd0@name)) G3bce@ls/false) ((lambda (G3bd4@t) ((lambda (G3bd6@ls/false) (if G3bd6@ls/false (apply (lambda (G3bd8@name) (list 'immutable G3bd8@name)) G3bd6@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3bd4@t))) (G3091@syntax-dispatch G3bd4@t 'any))) G3bcc@t))) (G3091@syntax-dispatch G3bcc@t '(#(scheme-id immutable) any . any)))) G3bc4@t))) (G3091@syntax-dispatch G3bc4@t '(#(scheme-id mutable) any . any)))) G3bc2@x)) G3bc0@ls)))) ((lambda (G3b90@uid-code G3b91@sealed? G3b92@opaque? G3b93@fields) (G3047@bless (list 'make-record-type-descriptor (list 'quote G3b88@name) G3b8a@parent-rtd-code G3b90@uid-code G3b91@sealed? G3b92@opaque? G3b93@fields))) ((lambda (G3b98@t) ((lambda (G3b9a@ls/false) (if G3b9a@ls/false (apply (lambda () (list 'quote (gensym))) G3b9a@ls/false) ((lambda (G3b9c@t) ((lambda (G3b9e@ls/false) (if G3b9e@ls/false (apply (lambda (G3ba0@uid) (list 'quote G3ba0@uid)) G3b9e@ls/false) ((lambda (G3ba2@t) ((lambda (G3ba4@ls/false) (if G3ba4@ls/false (apply (lambda () '#f) G3ba4@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3ba2@t))) (G3091@syntax-dispatch G3ba2@t '_))) G3b9c@t))) (G3091@syntax-dispatch G3b9c@t '(_ any)))) G3b98@t))) (G3091@syntax-dispatch G3b98@t '(_)))) (G3a37@get-clause 'nongenerative G3b89@clause*)) ((lambda (G3ba6@t) ((lambda (G3ba8@ls/false) (if G3ba8@ls/false (apply (lambda () '#t) G3ba8@ls/false) ((lambda (G3baa@t) ((lambda (G3bac@ls/false) (if G3bac@ls/false (apply (lambda () '#f) G3bac@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3baa@t))) (G3091@syntax-dispatch G3baa@t '_))) G3ba6@t))) (G3091@syntax-dispatch G3ba6@t '(_ #(atom #t))))) (G3a37@get-clause 'sealed G3b89@clause*)) ((lambda (G3bae@t) ((lambda (G3bb0@ls/false) (if G3bb0@ls/false (apply (lambda () '#t) G3bb0@ls/false) ((lambda (G3bb2@t) ((lambda (G3bb4@ls/false) (if G3bb4@ls/false (apply (lambda () '#f) G3bb4@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3bb2@t))) (G3091@syntax-dispatch G3bb2@t '_))) G3bae@t))) (G3091@syntax-dispatch G3bae@t '(_ #(atom #t))))) (G3a37@get-clause 'opaque G3b89@clause*)) ((lambda (G3bb6@t) ((lambda (G3bb8@ls/false) (if G3bb8@ls/false (apply (lambda (G3bba@field-spec*) (list 'quote (G3b8f@convert-field-spec* G3bba@field-spec*))) G3bb8@ls/false) ((lambda (G3bbc@t) ((lambda (G3bbe@ls/false) (if G3bbe@ls/false (apply (lambda () ''#()) G3bbe@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3bbc@t))) (G3091@syntax-dispatch G3bbc@t '_))) G3bb6@t))) (G3091@syntax-dispatch G3bb6@t '(_ . each-any)))) (G3a37@get-clause 'fields G3b89@clause*))))) '#f))) (set! G3a3b@parent-rtd-code (lambda (G3b70@clause*) ((lambda (G3b72@t) ((lambda (G3b74@ls/false) (if G3b74@ls/false (apply (lambda (G3b76@name) (list 'record-type-descriptor G3b76@name)) G3b74@ls/false) ((lambda (G3b78@t) ((lambda (G3b7a@ls/false) (if G3b7a@ls/false (apply (lambda () ((lambda (G3b7c@t) ((lambda (G3b7e@ls/false) (if G3b7e@ls/false (apply (lambda (G3b80@rtd G3b81@rcd) G3b80@rtd) G3b7e@ls/false) ((lambda (G3b84@t) ((lambda (G3b86@ls/false) (if G3b86@ls/false (apply (lambda () '#f) G3b86@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3b84@t))) (G3091@syntax-dispatch G3b84@t '#(atom #f)))) G3b7c@t))) (G3091@syntax-dispatch G3b7c@t '(_ any any)))) (G3a37@get-clause 'parent-rtd G3b70@clause*))) G3b7a@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3b78@t))) (G3091@syntax-dispatch G3b78@t '#(atom #f)))) G3b72@t))) (G3091@syntax-dispatch G3b72@t '(_ any)))) (G3a37@get-clause 'parent G3b70@clause*)))) (set! G3a3d@parent-rcd-code (lambda (G3b58@clause*) ((lambda (G3b5a@t) ((lambda (G3b5c@ls/false) (if G3b5c@ls/false (apply (lambda (G3b5e@name) (list 'record-constructor-descriptor G3b5e@name)) G3b5c@ls/false) ((lambda (G3b60@t) ((lambda (G3b62@ls/false) (if G3b62@ls/false (apply (lambda () ((lambda (G3b64@t) ((lambda (G3b66@ls/false) (if G3b66@ls/false (apply (lambda (G3b68@rtd G3b69@rcd) G3b69@rcd) G3b66@ls/false) ((lambda (G3b6c@t) ((lambda (G3b6e@ls/false) (if G3b6e@ls/false (apply (lambda () '#f) G3b6e@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3b6c@t))) (G3091@syntax-dispatch G3b6c@t '#(atom #f)))) G3b64@t))) (G3091@syntax-dispatch G3b64@t '(_ any any)))) (G3a37@get-clause 'parent-rtd G3b58@clause*))) G3b62@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3b60@t))) (G3091@syntax-dispatch G3b60@t '#(atom #f)))) G3b5a@t))) (G3091@syntax-dispatch G3b5a@t '(_ any)))) (G3a37@get-clause 'parent G3b58@clause*)))) (set! G3a3f@foo-rcd-code (lambda (G3b50@clause* G3b51@foo-rtd G3b52@protocol G3b53@parent-rcd-code) (list 'make-record-constructor-descriptor G3b51@foo-rtd G3b53@parent-rcd-code G3b52@protocol))) (set! G3a41@get-protocol-code (lambda (G3b44@clause*) ((lambda (G3b46@t) ((lambda (G3b48@ls/false) (if G3b48@ls/false (apply (lambda (G3b4a@expr) G3b4a@expr) G3b48@ls/false) ((lambda (G3b4c@t) ((lambda (G3b4e@ls/false) (if G3b4e@ls/false (apply (lambda () '#f) G3b4e@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3b4c@t))) (G3091@syntax-dispatch G3b4c@t '_))) G3b46@t))) (G3091@syntax-dispatch G3b46@t '(_ any)))) (G3a37@get-clause 'protocol G3b44@clause*)))) (set! G3a43@get-fields (lambda (G3b32@clause*) ((lambda (G3b34@t) ((lambda (G3b36@ls/false) (if G3b36@ls/false (apply (lambda () '()) G3b36@ls/false) ((lambda (G3b38@t) ((lambda (G3b3a@ls/false) (if G3b3a@ls/false (apply (lambda (G3b3c@f*) G3b3c@f*) G3b3a@ls/false) ((lambda (G3b3e@t) ((lambda (G3b40@ls/false) (if G3b40@ls/false (apply (lambda (G3b42@rest) (G3a43@get-fields G3b42@rest)) G3b40@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3b3e@t))) (G3091@syntax-dispatch G3b3e@t '(_ . any)))) G3b38@t))) (G3091@syntax-dispatch G3b38@t '((#(scheme-id fields) . each-any) . _)))) G3b34@t))) (G3091@syntax-dispatch G3b34@t '()))) G3b32@clause*))) (set! G3a45@get-mutator-indices (lambda (G3b1a@fields) ((letrec ((G3b1c@f (lambda (G3b1e@fields G3b1f@i) ((lambda (G3b22@t) ((lambda (G3b24@ls/false) (if G3b24@ls/false (apply (lambda () '()) G3b24@ls/false) ((lambda (G3b26@t) ((lambda (G3b28@ls/false) (if G3b28@ls/false (apply (lambda (G3b2a@rest) (cons G3b1f@i (G3b1c@f G3b2a@rest (+ G3b1f@i '1)))) G3b28@ls/false) ((lambda (G3b2c@t) ((lambda (G3b2e@ls/false) (if G3b2e@ls/false (apply (lambda (G3b30@rest) (G3b1c@f G3b30@rest (+ G3b1f@i '1))) G3b2e@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3b2c@t))) (G3091@syntax-dispatch G3b2c@t '(_ . any)))) G3b26@t))) (G3091@syntax-dispatch G3b26@t '((#(scheme-id mutable) . _) . any)))) G3b22@t))) (G3091@syntax-dispatch G3b22@t '()))) G3b1e@fields)))) G3b1c@f) G3b1a@fields '0))) (set! G3a47@get-mutators (lambda (G3af0@foo G3af1@fields) ((lambda (G3af5@gen-name) (begin (set! G3af5@gen-name (lambda (G3b18@x) (G3188@datum->syntax G3af0@foo (string->symbol (string-append (symbol->string (G318a@syntax->datum G3af0@foo)) '"-" (symbol->string (G318a@syntax->datum G3b18@x)) '"-set!"))))) ((letrec ((G3af6@f (lambda (G3af8@fields) ((lambda (G3afa@t) ((lambda (G3afc@ls/false) (if G3afc@ls/false (apply (lambda () '()) G3afc@ls/false) ((lambda (G3afe@t) ((lambda (G3b00@ls/false) (if G3b00@ls/false (apply (lambda (G3b02@name G3b03@accessor G3b04@mutator G3b05@rest) (cons G3b04@mutator (G3af6@f G3b05@rest))) G3b00@ls/false) ((lambda (G3b0a@t) ((lambda (G3b0c@ls/false) (if G3b0c@ls/false (apply (lambda (G3b0e@name G3b0f@rest) (cons (G3af5@gen-name G3b0e@name) (G3af6@f G3b0f@rest))) G3b0c@ls/false) ((lambda (G3b12@t) ((lambda (G3b14@ls/false) (if G3b14@ls/false (apply (lambda (G3b16@rest) (G3af6@f G3b16@rest)) G3b14@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3b12@t))) (G3091@syntax-dispatch G3b12@t '(_ . any)))) G3b0a@t))) (G3091@syntax-dispatch G3b0a@t '((#(scheme-id mutable) any) . any)))) G3afe@t))) (G3091@syntax-dispatch G3afe@t '((#(scheme-id mutable) any any any) . any)))) G3afa@t))) (G3091@syntax-dispatch G3afa@t '()))) G3af8@fields)))) G3af6@f) G3af1@fields))) '#f))) (set! G3a49@get-accessors (lambda (G3aac@foo G3aad@fields) ((lambda (G3ab1@gen-name) (begin (set! G3ab1@gen-name (lambda (G3aee@x) (G3188@datum->syntax G3aac@foo (string->symbol (string-append (symbol->string (G318a@syntax->datum G3aac@foo)) '"-" (symbol->string (G318a@syntax->datum G3aee@x))))))) (map (lambda (G3ab2@field) ((lambda (G3ab4@t) ((lambda (G3ab6@ls/false) (if (if G3ab6@ls/false (begin '#f (apply (lambda (G3ab8@name G3ab9@accessor G3aba@mutator) (G2e4e@id? G3ab9@accessor)) G3ab6@ls/false)) '#f) (apply (lambda (G3abe@name G3abf@accessor G3ac0@mutator) G3abf@accessor) G3ab6@ls/false) ((lambda (G3ac4@t) ((lambda (G3ac6@ls/false) (if (if G3ac6@ls/false (begin '#f (apply (lambda (G3ac8@name G3ac9@accessor) (G2e4e@id? G3ac9@accessor)) G3ac6@ls/false)) '#f) (apply (lambda (G3acc@name G3acd@accessor) G3acd@accessor) G3ac6@ls/false) ((lambda (G3ad0@t) ((lambda (G3ad2@ls/false) (if (if G3ad2@ls/false (begin '#f (apply (lambda (G3ad4@name) (G2e4e@id? G3ad4@name)) G3ad2@ls/false)) '#f) (apply (lambda (G3ad6@name) (G3ab1@gen-name G3ad6@name)) G3ad2@ls/false) ((lambda (G3ad8@t) ((lambda (G3ada@ls/false) (if (if G3ada@ls/false (begin '#f (apply (lambda (G3adc@name) (G2e4e@id? G3adc@name)) G3ada@ls/false)) '#f) (apply (lambda (G3ade@name) (G3ab1@gen-name G3ade@name)) G3ada@ls/false) ((lambda (G3ae0@t) ((lambda (G3ae2@ls/false) (if (if G3ae2@ls/false (begin '#f (apply (lambda (G3ae4@name) (G2e4e@id? G3ae4@name)) G3ae2@ls/false)) '#f) (apply (lambda (G3ae6@name) (G3ab1@gen-name G3ae6@name)) G3ae2@ls/false) ((lambda (G3ae8@t) ((lambda (G3aea@ls/false) (if G3aea@ls/false (apply (lambda (G3aec@others) (G3184@syntax-violation '#f '"invalid field spec" G3ab2@field)) G3aea@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3ae8@t))) (G3091@syntax-dispatch G3ae8@t 'any))) G3ae0@t))) (G3091@syntax-dispatch G3ae0@t 'any))) G3ad8@t))) (G3091@syntax-dispatch G3ad8@t '(#(scheme-id immutable) any)))) G3ad0@t))) (G3091@syntax-dispatch G3ad0@t '(#(scheme-id mutable) any)))) G3ac4@t))) (G3091@syntax-dispatch G3ac4@t '(#(scheme-id immutable) any any)))) G3ab4@t))) (G3091@syntax-dispatch G3ab4@t '(#(scheme-id mutable) any any any)))) G3ab2@field)) G3aad@fields))) '#f))) (set! G3a4b@enumerate (lambda (G3aa4@ls) ((letrec ((G3aa6@f (lambda (G3aa8@ls G3aa9@i) (if (null? G3aa8@ls) '() (cons G3aa9@i (G3aa6@f (cdr G3aa8@ls) (+ G3aa9@i '1))))))) G3aa6@f) G3aa4@ls '0))) (set! G3a4d@do-define-record (lambda (G3a7c@namespec G3a7d@clause*) ((lambda (G3a80@foo) ((lambda (G3a82@foo-rtd) ((lambda (G3a84@foo-rcd) ((lambda (G3a86@protocol) ((lambda (G3a88@make-foo) ((lambda (G3a8a@fields) ((lambda (G3a8c@idx*) ((lambda (G3a8e@foo-x*) ((lambda (G3a90@set-foo-x!*) ((lambda (G3a92@set-foo-idx*) ((lambda (G3a94@foo?) ((lambda (G3a96@foo-rtd-code) ((lambda (G3a98@foo-rcd-code) ((lambda (G3a9a@protocol-code) ((lambda () (G3047@bless (cons 'begin (cons (list 'define G3a82@foo-rtd G3a96@foo-rtd-code) (cons (list 'define G3a86@protocol G3a9a@protocol-code) (cons (list 'define G3a84@foo-rcd G3a98@foo-rcd-code) (cons (list 'define-syntax G3a80@foo (list 'list ''$rtd (list 'syntax G3a82@foo-rtd) (list 'syntax G3a84@foo-rcd))) (cons (list 'define G3a94@foo? (list 'record-predicate G3a82@foo-rtd)) (cons (list 'define G3a88@make-foo (list 'record-constructor G3a84@foo-rcd)) (append (map (lambda (G3a9c@foo-x G3a9d@idx) (list 'define G3a9c@foo-x (list 'record-accessor G3a82@foo-rtd G3a9d@idx))) G3a8e@foo-x* G3a8c@idx*) (map (lambda (G3aa0@set-foo-x! G3aa1@idx) (list 'define G3aa0@set-foo-x! (list 'record-mutator G3a82@foo-rtd G3aa1@idx))) G3a90@set-foo-x!* G3a92@set-foo-idx*))))))))))))) (G3a41@get-protocol-code G3a7d@clause*))) (G3a3f@foo-rcd-code G3a7d@clause* G3a82@foo-rtd G3a86@protocol (G3a3d@parent-rcd-code G3a7d@clause*)))) (G3a39@foo-rtd-code G3a80@foo G3a7d@clause* (G3a3b@parent-rtd-code G3a7d@clause*)))) (G3a35@get-record-predicate-name G3a7c@namespec))) (G3a45@get-mutator-indices G3a8a@fields))) (G3a47@get-mutators G3a80@foo G3a8a@fields))) (G3a49@get-accessors G3a80@foo G3a8a@fields))) (G3a4b@enumerate G3a8a@fields))) (G3a43@get-fields G3a7d@clause*))) (G3a33@get-record-constructor-name G3a7c@namespec))) (gensym))) (gensym))) (gensym))) (G3a31@get-record-name G3a7c@namespec)))) (set! G3a4f@verify-clauses (lambda (G3a58@x G3a59@cls*) ((lambda (G3a5d@valid-kwds G3a5f@free-id-member?) (begin (set! G3a5d@valid-kwds (map G3047@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3a5f@free-id-member? (lambda (G3a76@x G3a77@ls) (if (pair? G3a77@ls) (begin '#f ((lambda (G3a7a@t) (if G3a7a@t G3a7a@t (begin '#f (G3a5f@free-id-member? G3a76@x (cdr G3a77@ls))))) (G2e56@free-id=? G3a76@x (car G3a77@ls)))) '#f))) ((letrec ((G3a60@f (lambda (G3a62@cls* G3a63@seen*) (if (not (null? G3a62@cls*)) ((lambda (G3a66@t) ((lambda (G3a68@ls/false) (if G3a68@ls/false (apply (lambda (G3a6a@kwd G3a6b@rest) (if ((lambda (G3a6e@t) (if G3a6e@t G3a6e@t (begin '#f (not (G3a5f@free-id-member? G3a6a@kwd G3a5d@valid-kwds))))) (not (G2e4e@id? G3a6a@kwd))) (G3184@syntax-violation '#f '"not a valid define-record-type keyword" G3a6a@kwd) (if (G2e5c@bound-id-member? G3a6a@kwd G3a63@seen*) (G3184@syntax-violation '#f '"duplicate use of keyword " G3a58@x G3a6a@kwd) (G3a60@f (cdr G3a62@cls*) (cons G3a6a@kwd G3a63@seen*))))) G3a68@ls/false) ((lambda (G3a70@t) ((lambda (G3a72@ls/false) (if G3a72@ls/false (apply (lambda (G3a74@cls) (G3184@syntax-violation '#f '"malformed define-record-type clause" G3a74@cls)) G3a72@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3a70@t))) (G3091@syntax-dispatch G3a70@t 'any))) G3a66@t))) (G3091@syntax-dispatch G3a66@t '(any . any)))) (car G3a62@cls*)) (void))))) G3a60@f) G3a59@cls* '()))) '#f '#f))) ((lambda (G3a50@t) ((lambda (G3a52@ls/false) (if G3a52@ls/false (apply (lambda (G3a54@namespec G3a55@clause*) (begin (G3a4f@verify-clauses G3a2c@x G3a55@clause*) (G3a4d@do-define-record G3a54@namespec G3a55@clause*))) G3a52@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3a50@t))) (G3091@syntax-dispatch G3a50@t '(_ any . each-any)))) G3a2c@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3087@define-condition-type-macro (lambda (G3c2c@x) ((lambda (G3c2f@mkname) (begin (set! G3c2f@mkname (lambda (G3c5c@name G3c5d@suffix) (G3188@datum->syntax G3c5c@name (string->symbol (string-append (symbol->string (G318a@syntax->datum G3c5c@name)) G3c5d@suffix))))) ((lambda (G3c30@t) ((lambda (G3c32@ls/false) (if (if G3c32@ls/false (begin '#f (apply (lambda (G3c34@ctxt G3c35@name G3c36@super G3c37@constructor G3c38@predicate G3c39@field* G3c3a@accessor*) (if (G2e4e@id? G3c35@name) (if (G2e4e@id? G3c36@super) (if (G2e4e@id? G3c37@constructor) (if (G2e4e@id? G3c38@predicate) (if (for-all G2e4e@id? G3c39@field*) (begin '#f (for-all G2e4e@id? G3c3a@accessor*)) '#f) '#f) '#f) '#f) '#f)) G3c32@ls/false)) '#f) (apply (lambda (G3c42@ctxt G3c43@name G3c44@super G3c45@constructor G3c46@predicate G3c47@field* G3c48@accessor*) ((lambda (G3c50@aux-accessor*) (G3047@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3c43@name G3c45@constructor (gensym)) (cons (list 'parent G3c44@super) (cons (cons 'fields (map (lambda (G3c52@field G3c53@aux) (list 'immutable G3c52@field G3c53@aux)) G3c47@field* G3c50@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3c46@predicate (list 'condition-predicate (list 'record-type-descriptor G3c43@name))) (map (lambda (G3c56@accessor G3c57@aux) (list 'define G3c56@accessor (list 'condition-accessor (list 'record-type-descriptor G3c43@name) G3c57@aux))) G3c48@accessor* G3c50@aux-accessor*)))))) (map (lambda (G3c5a@x) (gensym)) G3c48@accessor*))) G3c32@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3c30@t))) (G3091@syntax-dispatch G3c30@t '(any any any any any . #(each (any any)))))) G3c2c@x))) '#f))) (set! G3089@incorrect-usage-macro (lambda (G3c60@e) (G3184@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3c60@e))) (set! G308b@parameterize-macro (lambda (G3c62@e) ((lambda (G3c64@t) ((lambda (G3c66@ls/false) (if G3c66@ls/false (apply (lambda (G3c68@b G3c69@b*) (G3047@bless (cons 'let (cons '() (cons G3c68@b G3c69@b*))))) G3c66@ls/false) ((lambda (G3c6c@t) ((lambda (G3c6e@ls/false) (if G3c6e@ls/false (apply (lambda (G3c70@olhs* G3c71@orhs* G3c72@b G3c73@b*) ((lambda (G3c78@lhs* G3c79@rhs*) (G3047@bless (cons (list 'lambda (append G3c78@lhs* G3c79@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3c7c@lhs G3c7d@rhs) (list 'let (list (list 't (list G3c7c@lhs))) (list G3c7c@lhs G3c7d@rhs) (cons 'set! (cons G3c7d@rhs '(t))))) G3c78@lhs* G3c79@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3c72@b G3c73@b*))) '(swap)))))) (append G3c70@olhs* G3c71@orhs*)))) (G3170@generate-temporaries G3c70@olhs*) (G3170@generate-temporaries G3c71@orhs*))) G3c6e@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3c6c@t))) (G3091@syntax-dispatch G3c6c@t '(_ #(each (any any)) any . each-any)))) G3c64@t))) (G3091@syntax-dispatch G3c64@t '(_ () any . each-any)))) G3c62@e))) (set! G308d@foreign-call-transformer (lambda (G3c80@e G3c81@r G3c82@mr) ((lambda (G3c86@t) ((lambda (G3c88@ls/false) (if G3c88@ls/false (apply (lambda (G3c8a@name G3c8b@arg*) (cons 'foreign-call (cons (G30b5@chi-expr G3c8a@name G3c81@r G3c82@mr) (G30b1@chi-expr* G3c8b@arg* G3c81@r G3c82@mr)))) G3c88@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3c86@t))) (G3091@syntax-dispatch G3c86@t '(_ any . each-any)))) G3c80@e))) (set! G308f@convert-pattern (lambda (G3c8e@pattern G3c8f@keys) ((lambda (G3c93@cvt* G3c95@cvt) (begin (set! G3c93@cvt* (lambda (G3d24@p* G3d25@n G3d26@ids) (if (null? G3d24@p*) (values '() G3d26@ids) (call-with-values (lambda () (G3c93@cvt* (cdr G3d24@p*) G3d25@n G3d26@ids)) (lambda (G3d2c@G3d2a G3d2d@G3d2b) ((lambda (G3d30@ids G3d31@y) (call-with-values (lambda () (G3c95@cvt (car G3d24@p*) G3d25@n G3d30@ids)) (lambda (G3d36@G3d34 G3d37@G3d35) ((lambda (G3d3a@ids G3d3b@x) (values (cons G3d3b@x G3d31@y) G3d3a@ids)) G3d37@G3d35 G3d36@G3d34)))) G3d2d@G3d2b G3d2c@G3d2a)))))) (set! G3c95@cvt (lambda (G3c96@p G3c97@n G3c98@ids) ((lambda (G3c9c@t) ((lambda (G3c9e@ls/false) (if (if G3c9e@ls/false (begin '#f (apply (lambda (G3ca0@id) (G2e4e@id? G3ca0@id)) G3c9e@ls/false)) '#f) (apply (lambda (G3ca2@id) (if (G2e5c@bound-id-member? G3c96@p G3c8f@keys) (values (vector 'free-id G3c96@p) G3c98@ids) (if (G2e56@free-id=? G3c96@p (G301f@scheme-stx '_)) (values '_ G3c98@ids) (values 'any (cons (cons G3c96@p G3c97@n) G3c98@ids))))) G3c9e@ls/false) ((lambda (G3ca4@t) ((lambda (G3ca6@ls/false) (if (if G3ca6@ls/false (begin '#f (apply (lambda (G3ca8@p G3ca9@dots) (G3093@ellipsis? G3ca9@dots)) G3ca6@ls/false)) '#f) (apply (lambda (G3cac@p G3cad@dots) (call-with-values (lambda () (G3c95@cvt G3cac@p (+ G3c97@n '1) G3c98@ids)) (lambda (G3cb2@G3cb0 G3cb3@G3cb1) ((lambda (G3cb6@ids G3cb7@p) (values (if (eq? G3cb7@p 'any) 'each-any (vector 'each G3cb7@p)) G3cb6@ids)) G3cb3@G3cb1 G3cb2@G3cb0)))) G3ca6@ls/false) ((lambda (G3cba@t) ((lambda (G3cbc@ls/false) (if (if G3cbc@ls/false (begin '#f (apply (lambda (G3cbe@x G3cbf@dots G3cc0@ys G3cc1@z) (G3093@ellipsis? G3cbf@dots)) G3cbc@ls/false)) '#f) (apply (lambda (G3cc6@x G3cc7@dots G3cc8@ys G3cc9@z) (call-with-values (lambda () (G3c95@cvt G3cc9@z G3c97@n G3c98@ids)) (lambda (G3cd0@G3cce G3cd1@G3ccf) ((lambda (G3cd4@ids G3cd5@z) (call-with-values (lambda () (G3c93@cvt* G3cc8@ys G3c97@n G3cd4@ids)) (lambda (G3cda@G3cd8 G3cdb@G3cd9) ((lambda (G3cde@ids G3cdf@ys) (call-with-values (lambda () (G3c95@cvt G3cc6@x (+ G3c97@n '1) G3cde@ids)) (lambda (G3ce4@G3ce2 G3ce5@G3ce3) ((lambda (G3ce8@ids G3ce9@x) (values (vector 'each+ G3ce9@x (reverse G3cdf@ys) G3cd5@z) G3ce8@ids)) G3ce5@G3ce3 G3ce4@G3ce2)))) G3cdb@G3cd9 G3cda@G3cd8)))) G3cd1@G3ccf G3cd0@G3cce)))) G3cbc@ls/false) ((lambda (G3cec@t) ((lambda (G3cee@ls/false) (if G3cee@ls/false (apply (lambda (G3cf0@x G3cf1@y) (call-with-values (lambda () (G3c95@cvt G3cf1@y G3c97@n G3c98@ids)) (lambda (G3cf6@G3cf4 G3cf7@G3cf5) ((lambda (G3cfa@ids G3cfb@y) (call-with-values (lambda () (G3c95@cvt G3cf0@x G3c97@n G3cfa@ids)) (lambda (G3d00@G3cfe G3d01@G3cff) ((lambda (G3d04@ids G3d05@x) (values (cons G3d05@x G3cfb@y) G3d04@ids)) G3d01@G3cff G3d00@G3cfe)))) G3cf7@G3cf5 G3cf6@G3cf4)))) G3cee@ls/false) ((lambda (G3d08@t) ((lambda (G3d0a@ls/false) (if G3d0a@ls/false (apply (lambda () (values '() G3c98@ids)) G3d0a@ls/false) ((lambda (G3d0c@t) ((lambda (G3d0e@ls/false) (if (if G3d0e@ls/false (begin '#f (apply (lambda (G3d10@p) (not (G2e16@stx? G3d10@p))) G3d0e@ls/false)) '#f) (apply (lambda (G3d12@p) (call-with-values (lambda () (G3c95@cvt G3d12@p G3c97@n G3c98@ids)) (lambda (G3d16@G3d14 G3d17@G3d15) ((lambda (G3d1a@ids G3d1b@p) (values (vector 'vector G3d1b@p) G3d1a@ids)) G3d17@G3d15 G3d16@G3d14)))) G3d0e@ls/false) ((lambda (G3d1e@t) ((lambda (G3d20@ls/false) (if G3d20@ls/false (apply (lambda (G3d22@datum) (values (vector 'atom (G2e64@stx->datum G3d22@datum)) G3c98@ids)) G3d20@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3d1e@t))) (G3091@syntax-dispatch G3d1e@t 'any))) G3d0c@t))) (G3091@syntax-dispatch G3d0c@t '#(vector each-any)))) G3d08@t))) (G3091@syntax-dispatch G3d08@t '()))) G3cec@t))) (G3091@syntax-dispatch G3cec@t '(any . any)))) G3cba@t))) (G3091@syntax-dispatch G3cba@t '(any any . #(each+ any () any))))) G3ca4@t))) (G3091@syntax-dispatch G3ca4@t '(any any)))) G3c9c@t))) (G3091@syntax-dispatch G3c9c@t 'any))) G3c96@p))) (G3c95@cvt G3c8e@pattern '0 '()))) '#f '#f))) (set! G3091@syntax-dispatch ((lambda () ((lambda (G3d3f@stx^ G3d41@match-each G3d43@match-each+ G3d45@match-each-any G3d47@match-empty G3d49@combine G3d4b@match* G3d4d@match) (begin (set! G3d3f@stx^ (lambda (G3e08@e G3e09@m* G3e0a@s* G3e0b@ae*) (if (if (null? G3e09@m*) (if (null? G3e0a@s*) (begin '#f (null? G3e0b@ae*)) '#f) '#f) G3e08@e (G2e36@mkstx G3e08@e G3e09@m* G3e0a@s* G3e0b@ae*)))) (set! G3d41@match-each (lambda (G3deb@e G3dec@p G3ded@m* G3dee@s* G3def@ae*) (if (pair? G3deb@e) ((lambda (G3df5@first) (if G3df5@first (begin '#f ((lambda (G3df7@rest) (if G3df7@rest (begin '#f (cons G3df5@first G3df7@rest)) '#f)) (G3d41@match-each (cdr G3deb@e) G3dec@p G3ded@m* G3dee@s* G3def@ae*))) '#f)) (G3d4d@match (car G3deb@e) G3dec@p G3ded@m* G3dee@s* G3def@ae* '())) (if (null? G3deb@e) '() (if (G2e16@stx? G3deb@e) (if (not (G2dc4@top-marked? G3ded@m*)) (begin '#f (call-with-values (lambda () (G2e34@join-wraps G3ded@m* G3dee@s* G3def@ae* G3deb@e)) (lambda (G3dfc@G3df9 G3dfd@G3dfa G3dfe@G3dfb) ((lambda (G3e02@ae* G3e03@s* G3e04@m*) (G3d41@match-each (G2e1a@stx-expr G3deb@e) G3dec@p G3e04@m* G3e03@s* G3e02@ae*)) G3dfe@G3dfb G3dfd@G3dfa G3dfc@G3df9)))) '#f) (if (G2995@G2895@annotation? G3deb@e) (G3d41@match-each (G2997@G2899@annotation-expression G3deb@e) G3dec@p G3ded@m* G3dee@s* G3def@ae*) '#f)))))) (set! G3d43@match-each+ (lambda (G3db1@e G3db2@x-pat G3db3@y-pat G3db4@z-pat G3db5@m* G3db6@s* G3db7@ae* G3db8@r) ((letrec ((G3dc1@f (lambda (G3dc3@e G3dc4@m* G3dc5@s* G3dc6@ae*) (if (pair? G3dc3@e) (call-with-values (lambda () (G3dc1@f (cdr G3dc3@e) G3dc4@m* G3dc5@s* G3dc6@ae*)) (lambda (G3dce@G3dcb G3dcf@G3dcc G3dd0@G3dcd) ((lambda (G3dd4@r G3dd5@y-pat G3dd6@xr*) (if G3dd4@r (if (null? G3dd5@y-pat) ((lambda (G3dda@xr) (if G3dda@xr (values (cons G3dda@xr G3dd6@xr*) G3dd5@y-pat G3dd4@r) (values '#f '#f '#f))) (G3d4d@match (car G3dc3@e) G3db2@x-pat G3dc4@m* G3dc5@s* G3dc6@ae* '())) (values '() (cdr G3dd5@y-pat) (G3d4d@match (car G3dc3@e) (car G3dd5@y-pat) G3dc4@m* G3dc5@s* G3dc6@ae* G3dd4@r))) (values '#f '#f '#f))) G3dd0@G3dcd G3dcf@G3dcc G3dce@G3dcb))) (if (G2e16@stx? G3dc3@e) (if (G2dc4@top-marked? G3dc4@m*) (values '() G3db3@y-pat (G3d4d@match G3dc3@e G3db4@z-pat G3dc4@m* G3dc5@s* G3dc6@ae* G3db8@r)) (call-with-values (lambda () (G2e34@join-wraps G3dc4@m* G3dc5@s* G3dc6@ae* G3dc3@e)) (lambda (G3ddf@G3ddc G3de0@G3ddd G3de1@G3dde) ((lambda (G3de5@ae* G3de6@s* G3de7@m*) (G3dc1@f (G2e1a@stx-expr G3dc3@e) G3de7@m* G3de6@s* G3de5@ae*)) G3de1@G3dde G3de0@G3ddd G3ddf@G3ddc)))) (if (G2995@G2895@annotation? G3dc3@e) (G3dc1@f (G2997@G2899@annotation-expression G3dc3@e) G3dc4@m* G3dc5@s* G3dc6@ae*) (values '() G3db3@y-pat (G3d4d@match G3dc3@e G3db4@z-pat G3dc4@m* G3dc5@s* G3dc6@ae* G3db8@r)))))))) G3dc1@f) G3db1@e G3db5@m* G3db6@s* G3db7@ae*))) (set! G3d45@match-each-any (lambda (G3d98@e G3d99@m* G3d9a@s* G3d9b@ae*) (if (pair? G3d98@e) ((lambda (G3da0@l) (if G3da0@l (begin '#f (cons (G3d3f@stx^ (car G3d98@e) G3d99@m* G3d9a@s* G3d9b@ae*) G3da0@l)) '#f)) (G3d45@match-each-any (cdr G3d98@e) G3d99@m* G3d9a@s* G3d9b@ae*)) (if (null? G3d98@e) '() (if (G2e16@stx? G3d98@e) (if (not (G2dc4@top-marked? G3d99@m*)) (begin '#f (call-with-values (lambda () (G2e34@join-wraps G3d99@m* G3d9a@s* G3d9b@ae* G3d98@e)) (lambda (G3da5@G3da2 G3da6@G3da3 G3da7@G3da4) ((lambda (G3dab@ae* G3dac@s* G3dad@m*) (G3d45@match-each-any (G2e1a@stx-expr G3d98@e) G3dad@m* G3dac@s* G3dab@ae*)) G3da7@G3da4 G3da6@G3da3 G3da5@G3da2)))) '#f) (if (G2995@G2895@annotation? G3d98@e) (G3d45@match-each-any (G2997@G2899@annotation-expression G3d98@e) G3d99@m* G3d9a@s* G3d9b@ae*) '#f)))))) (set! G3d47@match-empty (lambda (G3d92@p G3d93@r) (if (null? G3d92@p) G3d93@r (if (eq? G3d92@p '_) G3d93@r (if (eq? G3d92@p 'any) (cons '() G3d93@r) (if (pair? G3d92@p) (G3d47@match-empty (car G3d92@p) (G3d47@match-empty (cdr G3d92@p) G3d93@r)) (if (eq? G3d92@p 'each-any) (cons '() G3d93@r) ((lambda (G3d96@t) (if (memv G3d96@t '(each)) (G3d47@match-empty (vector-ref G3d92@p '1) G3d93@r) (if (memv G3d96@t '(each+)) (G3d47@match-empty (vector-ref G3d92@p '1) (G3d47@match-empty (reverse (vector-ref G3d92@p '2)) (G3d47@match-empty (vector-ref G3d92@p '3) G3d93@r))) (if (memv G3d96@t '(free-id atom)) G3d93@r (if (memv G3d96@t '(scheme-id atom)) G3d93@r (if (memv G3d96@t '(vector)) (G3d47@match-empty (vector-ref G3d92@p '1) G3d93@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d92@p))))))) (vector-ref G3d92@p '0))))))))) (set! G3d49@combine (lambda (G3d8e@r* G3d8f@r) (if (null? (car G3d8e@r*)) G3d8f@r (cons (map car G3d8e@r*) (G3d49@combine (map cdr G3d8e@r*) G3d8f@r))))) (set! G3d4b@match* (lambda (G3d6d@e G3d6e@p G3d6f@m* G3d70@s* G3d71@ae* G3d72@r) (if (null? G3d6e@p) (if (null? G3d6d@e) (begin '#f G3d72@r) '#f) (if (pair? G3d6e@p) (if (pair? G3d6d@e) (begin '#f (G3d4d@match (car G3d6d@e) (car G3d6e@p) G3d6f@m* G3d70@s* G3d71@ae* (G3d4d@match (cdr G3d6d@e) (cdr G3d6e@p) G3d6f@m* G3d70@s* G3d71@ae* G3d72@r))) '#f) (if (eq? G3d6e@p 'each-any) ((lambda (G3d79@l) (if G3d79@l (begin '#f (cons G3d79@l G3d72@r)) '#f)) (G3d45@match-each-any G3d6d@e G3d6f@m* G3d70@s* G3d71@ae*)) ((lambda (G3d7b@t) (if (memv G3d7b@t '(each)) (if (null? G3d6d@e) (G3d47@match-empty (vector-ref G3d6e@p '1) G3d72@r) ((lambda (G3d7d@r*) (if G3d7d@r* (begin '#f (G3d49@combine G3d7d@r* G3d72@r)) '#f)) (G3d41@match-each G3d6d@e (vector-ref G3d6e@p '1) G3d6f@m* G3d70@s* G3d71@ae*))) (if (memv G3d7b@t '(free-id)) (if (symbol? G3d6d@e) (if (G2dc4@top-marked? G3d6f@m*) (if (G2e56@free-id=? (G3d3f@stx^ G3d6d@e G3d6f@m* G3d70@s* G3d71@ae*) (vector-ref G3d6e@p '1)) (begin '#f G3d72@r) '#f) '#f) '#f) (if (memv G3d7b@t '(scheme-id)) (if (symbol? G3d6d@e) (if (G2dc4@top-marked? G3d6f@m*) (if (G2e56@free-id=? (G3d3f@stx^ G3d6d@e G3d6f@m* G3d70@s* G3d71@ae*) (G301f@scheme-stx (vector-ref G3d6e@p '1))) (begin '#f G3d72@r) '#f) '#f) '#f) (if (memv G3d7b@t '(each+)) (call-with-values (lambda () (G3d43@match-each+ G3d6d@e (vector-ref G3d6e@p '1) (vector-ref G3d6e@p '2) (vector-ref G3d6e@p '3) G3d6f@m* G3d70@s* G3d71@ae* G3d72@r)) (lambda (G3d82@G3d7f G3d83@G3d80 G3d84@G3d81) ((lambda (G3d88@r G3d89@y-pat G3d8a@xr*) (if G3d88@r (if (null? G3d89@y-pat) (begin '#f (if (null? G3d8a@xr*) (G3d47@match-empty (vector-ref G3d6e@p '1) G3d88@r) (G3d49@combine G3d8a@xr* G3d88@r))) '#f) '#f)) G3d84@G3d81 G3d83@G3d80 G3d82@G3d7f))) (if (memv G3d7b@t '(atom)) (if (equal? (vector-ref G3d6e@p '1) (G2e62@strip G3d6d@e G3d6f@m*)) (begin '#f G3d72@r) '#f) (if (memv G3d7b@t '(vector)) (if (vector? G3d6d@e) (begin '#f (G3d4d@match (vector->list G3d6d@e) (vector-ref G3d6e@p '1) G3d6f@m* G3d70@s* G3d71@ae* G3d72@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d6e@p)))))))) (vector-ref G3d6e@p '0))))))) (set! G3d4d@match (lambda (G3d52@e G3d53@p G3d54@m* G3d55@s* G3d56@ae* G3d57@r) (if (not G3d57@r) '#f (if (eq? G3d53@p '_) G3d57@r (if (eq? G3d53@p 'any) (cons (G3d3f@stx^ G3d52@e G3d54@m* G3d55@s* G3d56@ae*) G3d57@r) (if (G2e16@stx? G3d52@e) (if (not (G2dc4@top-marked? G3d54@m*)) (begin '#f (call-with-values (lambda () (G2e34@join-wraps G3d54@m* G3d55@s* G3d56@ae* G3d52@e)) (lambda (G3d61@G3d5e G3d62@G3d5f G3d63@G3d60) ((lambda (G3d67@ae* G3d68@s* G3d69@m*) (G3d4d@match (G2e1a@stx-expr G3d52@e) G3d53@p G3d69@m* G3d68@s* G3d67@ae* G3d57@r)) G3d63@G3d60 G3d62@G3d5f G3d61@G3d5e)))) '#f) (if (G2995@G2895@annotation? G3d52@e) (G3d4d@match (G2997@G2899@annotation-expression G3d52@e) G3d53@p G3d54@m* G3d55@s* G3d56@ae* G3d57@r) (G3d4b@match* G3d52@e G3d53@p G3d54@m* G3d55@s* G3d56@ae* G3d57@r)))))))) (lambda (G3d4e@e G3d4f@p) (G3d4d@match G3d4e@e G3d4f@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G3093@ellipsis? (lambda (G3e10@x) (if (G2e4e@id? G3e10@x) (begin '#f (G2e56@free-id=? G3e10@x (G301f@scheme-stx '...))) '#f))) (set! G3095@underscore? (lambda (G3e12@x) (if (G2e4e@id? G3e12@x) (begin '#f (G2e56@free-id=? G3e12@x (G301f@scheme-stx '_))) '#f))) (set! G3097@verify-literals (lambda (G3e14@lits G3e15@expr) (for-each (lambda (G3e18@x) (if ((lambda (G3e1a@t) (if G3e1a@t G3e1a@t ((lambda (G3e1c@t) (if G3e1c@t G3e1c@t (begin '#f (G3095@underscore? G3e18@x)))) (G3093@ellipsis? G3e18@x)))) (not (G2e4e@id? G3e18@x))) (G3184@syntax-violation '#f '"invalid literal" G3e15@expr G3e18@x) (void))) G3e14@lits))) (set! G3099@syntax-case-transformer ((lambda () ((lambda (G3e1f@build-dispatch-call G3e21@invalid-ids-error G3e23@gen-clause G3e25@gen-syntax-case) (begin (set! G3e1f@build-dispatch-call (lambda (G3e8e@pvars G3e8f@expr G3e90@y G3e91@r G3e92@mr) ((lambda (G3e98@ids G3e99@levels) ((lambda (G3e9c@labels G3e9d@new-vars) ((lambda (G3ea0@body) (list '(primitive apply) (G2da6@G2cce@build-lambda '#f G3e9d@new-vars G3ea0@body) G3e90@y)) (G30b5@chi-expr (G2e3a@add-subst (G2e07@make-full-rib G3e98@ids G3e9c@labels) G3e8f@expr) (append (map (lambda (G3ea2@label G3ea3@var G3ea4@level) (cons G3ea2@label (G2e6e@make-binding 'syntax (cons G3ea3@var G3ea4@level)))) G3e9c@labels G3e9d@new-vars (map cdr G3e8e@pvars)) G3e91@r) G3e92@mr))) (map G2dca@gen-label G3e98@ids) (map G2dc6@gen-lexical G3e98@ids))) (map car G3e8e@pvars) (map cdr G3e8e@pvars)))) (set! G3e21@invalid-ids-error (lambda (G3e82@id* G3e83@e G3e84@class) ((letrec ((G3e88@find (lambda (G3e8a@id* G3e8b@ok*) (if (null? G3e8a@id*) (G3184@syntax-violation '#f '"invalid syntax" G3e83@e) (if (G2e4e@id? (car G3e8a@id*)) (if (G2e5c@bound-id-member? (car G3e8a@id*) G3e8b@ok*) (G317e@syntax-error (car G3e8a@id*) '"duplicate " G3e84@class) (G3e88@find (cdr G3e8a@id*) (cons (car G3e8a@id*) G3e8b@ok*))) (G317e@syntax-error (car G3e8a@id*) '"invalid " G3e84@class)))))) G3e88@find) G3e82@id* '()))) (set! G3e23@gen-clause (lambda (G3e5c@x G3e5d@keys G3e5e@clauses G3e5f@r G3e60@mr G3e61@pat G3e62@fender G3e63@expr) (call-with-values (lambda () (G308f@convert-pattern G3e61@pat G3e5d@keys)) (lambda (G3e6e@G3e6c G3e6f@G3e6d) ((lambda (G3e72@pvars G3e73@p) (if (not (G2e5a@distinct-bound-ids? (map car G3e72@pvars))) (G3e21@invalid-ids-error (map car G3e72@pvars) G3e61@pat '"pattern variable") (if (not (for-all (lambda (G3e76@x) (not (G3093@ellipsis? (car G3e76@x)))) G3e72@pvars)) (G3184@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3e61@pat) ((lambda (G3e78@y) ((lambda (G3e7a@test) ((lambda (G3e7c@conseq) ((lambda (G3e7e@altern) (list (G2da6@G2cce@build-lambda '#f (list G3e78@y) (list 'if G3e7a@test G3e7c@conseq G3e7e@altern)) (list '(primitive syntax-dispatch) G3e5c@x (list 'quote G3e73@p)))) (G3e25@gen-syntax-case G3e5c@x G3e5d@keys G3e5e@clauses G3e5f@r G3e60@mr))) (G3e1f@build-dispatch-call G3e72@pvars G3e63@expr G3e78@y G3e5f@r G3e60@mr))) (if (eq? G3e62@fender '#t) G3e78@y ((lambda (G3e80@call) (list 'if G3e78@y G3e80@call (list 'quote '#f))) (G3e1f@build-dispatch-call G3e72@pvars G3e62@fender G3e78@y G3e5f@r G3e60@mr))))) (G2dc6@gen-lexical 'tmp))))) G3e6f@G3e6d G3e6e@G3e6c))))) (set! G3e25@gen-syntax-case (lambda (G3e3a@x G3e3b@keys G3e3c@clauses G3e3d@r G3e3e@mr) (if (null? G3e3c@clauses) (list '(primitive syntax-error) G3e3a@x) ((lambda (G3e44@t) ((lambda (G3e46@ls/false) (if G3e46@ls/false (apply (lambda (G3e48@pat G3e49@expr) (if (if (G2e4e@id? G3e48@pat) (if (not (G2e5c@bound-id-member? G3e48@pat G3e3b@keys)) (begin '#f (not (G3093@ellipsis? G3e48@pat))) '#f) '#f) (if (G2e56@free-id=? G3e48@pat (G301f@scheme-stx '_)) (G30b5@chi-expr G3e49@expr G3e3d@r G3e3e@mr) ((lambda (G3e4c@lab G3e4d@lex) ((lambda (G3e50@body) (list (G2da6@G2cce@build-lambda '#f (list G3e4d@lex) G3e50@body) G3e3a@x)) (G30b5@chi-expr (G2e3a@add-subst (G2e07@make-full-rib (list G3e48@pat) (list G3e4c@lab)) G3e49@expr) (cons (cons G3e4c@lab (G2e6e@make-binding 'syntax (cons G3e4d@lex '0))) G3e3d@r) G3e3e@mr))) (G2dca@gen-label G3e48@pat) (G2dc6@gen-lexical G3e48@pat))) (G3e23@gen-clause G3e3a@x G3e3b@keys (cdr G3e3c@clauses) G3e3d@r G3e3e@mr G3e48@pat '#t G3e49@expr))) G3e46@ls/false) ((lambda (G3e52@t) ((lambda (G3e54@ls/false) (if G3e54@ls/false (apply (lambda (G3e56@pat G3e57@fender G3e58@expr) (G3e23@gen-clause G3e3a@x G3e3b@keys (cdr G3e3c@clauses) G3e3d@r G3e3e@mr G3e56@pat G3e57@fender G3e58@expr)) G3e54@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3e52@t))) (G3091@syntax-dispatch G3e52@t '(any any any)))) G3e44@t))) (G3091@syntax-dispatch G3e44@t '(any any)))) (car G3e3c@clauses))))) (lambda (G3e26@e G3e27@r G3e28@mr) ((lambda (G3e2c@t) ((lambda (G3e2e@ls/false) (if G3e2e@ls/false (apply (lambda (G3e30@expr G3e31@keys G3e32@clauses) (begin (G3097@verify-literals G3e31@keys G3e26@e) ((lambda (G3e36@x) ((lambda (G3e38@body) (list (G2da6@G2cce@build-lambda '#f (list G3e36@x) G3e38@body) (G30b5@chi-expr G3e30@expr G3e27@r G3e28@mr))) (G3e25@gen-syntax-case G3e36@x G3e31@keys G3e32@clauses G3e27@r G3e28@mr))) (G2dc6@gen-lexical 'tmp)))) G3e2e@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3e2c@t))) (G3091@syntax-dispatch G3e2c@t '(_ any each-any . each-any)))) G3e26@e)))) '#f '#f '#f '#f)))) (set! G309b@ellipsis-map (lambda (G3ea8@proc G3ea9@ls . G3eac@ls*) ((lambda (G3eaf@who) (begin (set! G3eaf@who '...) (begin (if (not (list? G3ea9@ls)) (assertion-violation G3eaf@who '"not a list" G3ea9@ls) (void)) (if (not (null? G3eac@ls*)) ((lambda (G3eb0@n) (for-each (lambda (G3eb2@x) (begin (if (not (list? G3eb2@x)) (assertion-violation G3eaf@who '"not a list" G3eb2@x) (void)) (if (not (= (length G3eb2@x) G3eb0@n)) (assertion-violation G3eaf@who '"length mismatch" G3ea9@ls G3eb2@x) (void)))) G3eac@ls*)) (length G3ea9@ls)) (void)) (apply map G3ea8@proc G3ea9@ls G3eac@ls*)))) '#f))) (set! G309d@syntax-transformer ((lambda () ((lambda (G3eb5@gen-syntax G3eb7@gen-ref G3eb9@gen-append G3ebb@gen-mappend G3ebd@gen-map G3ebf@gen-cons G3ec1@gen-vector G3ec3@regen) (begin (set! G3eb5@gen-syntax (lambda (G3f28@src G3f29@e G3f2a@r G3f2b@maps G3f2c@ellipsis? G3f2d@vec?) ((lambda (G3f34@t) ((lambda (G3f36@ls/false) (if (if G3f36@ls/false (begin '#f (apply (lambda (G3f38@dots) (G3f2c@ellipsis? G3f38@dots)) G3f36@ls/false)) '#f) (apply (lambda (G3f3a@dots) (G3184@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f28@src)) G3f36@ls/false) ((lambda (G3f3c@t) ((lambda (G3f3e@ls/false) (if (if G3f3e@ls/false (begin '#f (apply (lambda (G3f40@id) (G2e4e@id? G3f40@id)) G3f3e@ls/false)) '#f) (apply (lambda (G3f42@id) ((lambda (G3f44@label) ((lambda (G3f46@b) ((lambda () (if (eq? (G2e70@binding-type G3f46@b) 'syntax) (call-with-values (lambda () ((lambda (G3f4a@var.lev) (G3eb7@gen-ref G3f28@src (car G3f4a@var.lev) (cdr G3f4a@var.lev) G3f2b@maps)) (G2e72@binding-value G3f46@b))) (lambda (G3f4c@G3f48 G3f4d@G3f49) ((lambda (G3f50@maps G3f51@var) (values (list 'ref G3f51@var) G3f50@maps)) G3f4d@G3f49 G3f4c@G3f48))) (values (list 'quote G3f29@e) G3f2b@maps))))) (G2e6c@label->binding G3f44@label G3f2a@r))) (G2e68@id->label G3f29@e))) G3f3e@ls/false) ((lambda (G3f54@t) ((lambda (G3f56@ls/false) (if (if G3f56@ls/false (begin '#f (apply (lambda (G3f58@dots G3f59@e) (G3f2c@ellipsis? G3f58@dots)) G3f56@ls/false)) '#f) (apply (lambda (G3f5c@dots G3f5d@e) (if G3f2d@vec? (G3184@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f28@src) (G3eb5@gen-syntax G3f28@src G3f5d@e G3f2a@r G3f2b@maps (lambda (G3f60@x) '#f) '#f))) G3f56@ls/false) ((lambda (G3f62@t) ((lambda (G3f64@ls/false) (if (if G3f64@ls/false (begin '#f (apply (lambda (G3f66@x G3f67@dots G3f68@y) (G3f2c@ellipsis? G3f67@dots)) G3f64@ls/false)) '#f) (apply (lambda (G3f6c@x G3f6d@dots G3f6e@y) ((letrec ((G3f72@f (lambda (G3f74@y G3f75@k) ((lambda (G3f78@t) ((lambda (G3f7a@ls/false) (if G3f7a@ls/false (apply (lambda () (G3f75@k G3f2b@maps)) G3f7a@ls/false) ((lambda (G3f7c@t) ((lambda (G3f7e@ls/false) (if (if G3f7e@ls/false (begin '#f (apply (lambda (G3f80@dots G3f81@y) (G3f2c@ellipsis? G3f80@dots)) G3f7e@ls/false)) '#f) (apply (lambda (G3f84@dots G3f85@y) (G3f72@f G3f85@y (lambda (G3f88@maps) (call-with-values (lambda () (G3f75@k (cons '() G3f88@maps))) (lambda (G3f8c@G3f8a G3f8d@G3f8b) ((lambda (G3f90@maps G3f91@x) (if (null? (car G3f90@maps)) (G3184@syntax-violation '#f '"extra ellipsis in syntax form" G3f28@src) (values (G3ebb@gen-mappend G3f91@x (car G3f90@maps)) (cdr G3f90@maps)))) G3f8d@G3f8b G3f8c@G3f8a)))))) G3f7e@ls/false) ((lambda (G3f94@t) ((lambda (G3f96@ls/false) (if G3f96@ls/false (apply (lambda () (call-with-values (lambda () (G3eb5@gen-syntax G3f28@src G3f74@y G3f2a@r G3f2b@maps G3f2c@ellipsis? G3f2d@vec?)) (lambda (G3f9a@G3f98 G3f9b@G3f99) ((lambda (G3f9e@maps G3f9f@y) (call-with-values (lambda () (G3f75@k G3f9e@maps)) (lambda (G3fa4@G3fa2 G3fa5@G3fa3) ((lambda (G3fa8@maps G3fa9@x) (values (G3eb9@gen-append G3fa9@x G3f9f@y) G3fa8@maps)) G3fa5@G3fa3 G3fa4@G3fa2)))) G3f9b@G3f99 G3f9a@G3f98)))) G3f96@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3f94@t))) (G3091@syntax-dispatch G3f94@t '_))) G3f7c@t))) (G3091@syntax-dispatch G3f7c@t '(any . any)))) G3f78@t))) (G3091@syntax-dispatch G3f78@t '()))) G3f74@y)))) G3f72@f) G3f6e@y (lambda (G3fac@maps) (call-with-values (lambda () (G3eb5@gen-syntax G3f28@src G3f6c@x G3f2a@r (cons '() G3fac@maps) G3f2c@ellipsis? '#f)) (lambda (G3fb0@G3fae G3fb1@G3faf) ((lambda (G3fb4@maps G3fb5@x) (if (null? (car G3fb4@maps)) (G3184@syntax-violation '#f '"extra ellipsis in syntax form" G3f28@src) (values (G3ebd@gen-map G3fb5@x (car G3fb4@maps)) (cdr G3fb4@maps)))) G3fb1@G3faf G3fb0@G3fae)))))) G3f64@ls/false) ((lambda (G3fb8@t) ((lambda (G3fba@ls/false) (if G3fba@ls/false (apply (lambda (G3fbc@x G3fbd@y) (call-with-values (lambda () (G3eb5@gen-syntax G3f28@src G3fbc@x G3f2a@r G3f2b@maps G3f2c@ellipsis? '#f)) (lambda (G3fc2@G3fc0 G3fc3@G3fc1) ((lambda (G3fc6@maps G3fc7@xnew) (call-with-values (lambda () (G3eb5@gen-syntax G3f28@src G3fbd@y G3f2a@r G3fc6@maps G3f2c@ellipsis? G3f2d@vec?)) (lambda (G3fcc@G3fca G3fcd@G3fcb) ((lambda (G3fd0@maps G3fd1@ynew) (values (G3ebf@gen-cons G3f29@e G3fbc@x G3fbd@y G3fc7@xnew G3fd1@ynew) G3fd0@maps)) G3fcd@G3fcb G3fcc@G3fca)))) G3fc3@G3fc1 G3fc2@G3fc0)))) G3fba@ls/false) ((lambda (G3fd4@t) ((lambda (G3fd6@ls/false) (if G3fd6@ls/false (apply (lambda (G3fd8@ls) (call-with-values (lambda () (G3eb5@gen-syntax G3f28@src G3fd8@ls G3f2a@r G3f2b@maps G3f2c@ellipsis? '#t)) (lambda (G3fdc@G3fda G3fdd@G3fdb) ((lambda (G3fe0@maps G3fe1@lsnew) (values (G3ec1@gen-vector G3f29@e G3fd8@ls G3fe1@lsnew) G3fe0@maps)) G3fdd@G3fdb G3fdc@G3fda)))) G3fd6@ls/false) ((lambda (G3fe4@t) ((lambda (G3fe6@ls/false) (if G3fe6@ls/false (apply (lambda () (values (list 'quote G3f29@e) G3f2b@maps)) G3fe6@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3fe4@t))) (G3091@syntax-dispatch G3fe4@t '_))) G3fd4@t))) (G3091@syntax-dispatch G3fd4@t '#(vector each-any)))) G3fb8@t))) (G3091@syntax-dispatch G3fb8@t '(any . any)))) G3f62@t))) (G3091@syntax-dispatch G3f62@t '(any any . any)))) G3f54@t))) (G3091@syntax-dispatch G3f54@t '(any any)))) G3f3c@t))) (G3091@syntax-dispatch G3f3c@t 'any))) G3f34@t))) (G3091@syntax-dispatch G3f34@t 'any))) G3f29@e))) (set! G3eb7@gen-ref (lambda (G3f10@src G3f11@var G3f12@level G3f13@maps) (if (= G3f12@level '0) (values G3f11@var G3f13@maps) (if (null? G3f13@maps) (G3184@syntax-violation '#f '"missing ellipsis in syntax form" G3f10@src) (call-with-values (lambda () (G3eb7@gen-ref G3f10@src G3f11@var (- G3f12@level '1) (cdr G3f13@maps))) (lambda (G3f1a@G3f18 G3f1b@G3f19) ((lambda (G3f1e@outer-maps G3f1f@outer-var) ((lambda (G3f22@t) (if G3f22@t ((lambda (G3f24@b) (values (cdr G3f24@b) G3f13@maps)) G3f22@t) ((lambda (G3f26@inner-var) (values G3f26@inner-var (cons (cons (cons G3f1f@outer-var G3f26@inner-var) (car G3f13@maps)) G3f1e@outer-maps))) (G2dc6@gen-lexical 'tmp)))) (assq G3f1f@outer-var (car G3f13@maps)))) G3f1b@G3f19 G3f1a@G3f18))))))) (set! G3eb9@gen-append (lambda (G3f0c@x G3f0d@y) (if (equal? G3f0d@y ''()) G3f0c@x (list 'append G3f0c@x G3f0d@y)))) (set! G3ebb@gen-mappend (lambda (G3f08@e G3f09@map-env) (list 'apply '(primitive append) (G3ebd@gen-map G3f08@e G3f09@map-env)))) (set! G3ebd@gen-map (lambda (G3ef6@e G3ef7@map-env) ((lambda (G3efa@formals G3efb@actuals) (if (eq? (car G3ef6@e) 'ref) (car G3efb@actuals) (if (for-all (lambda (G3efe@x) (if (eq? (car G3efe@x) 'ref) (begin '#f (memq (cadr G3efe@x) G3efa@formals)) '#f)) (cdr G3ef6@e)) ((lambda (G3f00@args) (cons 'map (cons (list 'primitive (car G3ef6@e)) G3f00@args))) (map ((lambda (G3f02@r) (lambda (G3f04@x) (cdr (assq (cadr G3f04@x) G3f02@r)))) (map cons G3efa@formals G3efb@actuals)) (cdr G3ef6@e))) (cons* 'map (list 'lambda G3efa@formals G3ef6@e) G3efb@actuals)))) (map cdr G3ef7@map-env) (map (lambda (G3f06@x) (list 'ref (car G3f06@x))) G3ef7@map-env)))) (set! G3ebf@gen-cons (lambda (G3ee6@e G3ee7@x G3ee8@y G3ee9@xnew G3eea@ynew) ((lambda (G3ef0@t) (if (memv G3ef0@t '(quote)) (if (eq? (car G3ee9@xnew) 'quote) ((lambda (G3ef2@xnew G3ef3@ynew) (if (if (eq? G3ef2@xnew G3ee7@x) (begin '#f (eq? G3ef3@ynew G3ee8@y)) '#f) (list 'quote G3ee6@e) (list 'quote (cons G3ef2@xnew G3ef3@ynew)))) (cadr G3ee9@xnew) (cadr G3eea@ynew)) (if (null? (cadr G3eea@ynew)) (list 'list G3ee9@xnew) (list 'cons G3ee9@xnew G3eea@ynew))) (if (memv G3ef0@t '(list)) (cons 'list (cons G3ee9@xnew (cdr G3eea@ynew))) (list 'cons G3ee9@xnew G3eea@ynew)))) (car G3eea@ynew)))) (set! G3ec1@gen-vector (lambda (G3ee0@e G3ee1@ls G3ee2@lsnew) (if (eq? (car G3ee2@lsnew) 'quote) (if (eq? (cadr G3ee2@lsnew) G3ee1@ls) (list 'quote G3ee0@e) (list 'quote (list->vector (cadr G3ee2@lsnew)))) (if (eq? (car G3ee2@lsnew) 'list) (cons 'vector (cdr G3ee2@lsnew)) (list 'list->vector G3ee2@lsnew))))) (set! G3ec3@regen (lambda (G3eda@x) ((lambda (G3edc@t) (if (memv G3edc@t '(ref)) (cadr G3eda@x) (if (memv G3edc@t '(primitive)) (list 'primitive (cadr G3eda@x)) (if (memv G3edc@t '(quote)) (list 'quote (cadr G3eda@x)) (if (memv G3edc@t '(lambda)) (G2da6@G2cce@build-lambda '#f (cadr G3eda@x) (G3ec3@regen (caddr G3eda@x))) (if (memv G3edc@t '(map)) ((lambda (G3ede@ls) (cons '(primitive ellipsis-map) G3ede@ls)) (map G3ec3@regen (cdr G3eda@x))) (cons (list 'primitive (car G3eda@x)) (map G3ec3@regen (cdr G3eda@x))))))))) (car G3eda@x)))) (lambda (G3ec4@e G3ec5@r G3ec6@mr) ((lambda (G3eca@t) ((lambda (G3ecc@ls/false) (if G3ecc@ls/false (apply (lambda (G3ece@x) (call-with-values (lambda () (G3eb5@gen-syntax G3ec4@e G3ece@x G3ec5@r '() G3093@ellipsis? '#f)) (lambda (G3ed2@G3ed0 G3ed3@G3ed1) ((lambda (G3ed6@maps G3ed7@e) (G3ec3@regen G3ed7@e)) G3ed3@G3ed1 G3ed2@G3ed0)))) G3ecc@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3eca@t))) (G3091@syntax-dispatch G3eca@t '(_ any)))) G3ec4@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G309f@core-macro-transformer (lambda (G3fe8@name) ((lambda (G3fea@t) (if (memv G3fea@t '(quote)) G3041@quote-transformer (if (memv G3fea@t '(lambda)) G3045@lambda-transformer (if (memv G3fea@t '(case-lambda)) G3043@case-lambda-transformer (if (memv G3fea@t '(letrec)) G302d@letrec-transformer (if (memv G3fea@t '(letrec*)) G302f@letrec*-transformer (if (memv G3fea@t '(if)) G303d@if-transformer (if (memv G3fea@t '(foreign-call)) G308d@foreign-call-transformer (if (memv G3fea@t '(syntax-case)) G3099@syntax-case-transformer (if (memv G3fea@t '(syntax)) G309d@syntax-transformer (if (memv G3fea@t '(type-descriptor)) G3033@type-descriptor-transformer (if (memv G3fea@t '(record-type-descriptor)) G3035@record-type-descriptor-transformer (if (memv G3fea@t '(record-constructor-descriptor)) G3037@record-constructor-descriptor-transformer (if (memv G3fea@t '(fluid-let-syntax)) G3031@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3fe8@name))))))))))))))) G3fe8@name))) (set! G30a1@file-options-macro (lambda (G3fec@x) ((lambda (G3fef@valid-option?) (begin (set! G3fef@valid-option? (lambda (G3ff8@x) (if (G2e4e@id? G3ff8@x) (begin '#f (memq (G2e50@id->sym G3ff8@x) '(no-fail no-create no-truncate))) '#f))) ((lambda (G3ff0@t) ((lambda (G3ff2@ls/false) (if (if G3ff2@ls/false (begin '#f (apply (lambda (G3ff4@opt*) (if (for-all G3fef@valid-option? G3ff4@opt*) (begin '#f (G29a1@G2945@file-options-spec (map G2e50@id->sym G3ff4@opt*))) '#f)) G3ff2@ls/false)) '#f) (apply (lambda (G3ff6@opt*) (G3047@bless (list 'quote (G29a1@G2945@file-options-spec (map G2e50@id->sym G3ff6@opt*))))) G3ff2@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3ff0@t))) (G3091@syntax-dispatch G3ff0@t '(_ . each-any)))) G3fec@x))) '#f))) (set! G30a3@symbol-macro (lambda (G3ffa@x G3ffb@set) ((lambda (G3ffe@t) ((lambda (G4000@ls/false) (if (if G4000@ls/false (begin '#f (apply (lambda (G4002@name) (if (G2e4e@id? G4002@name) (begin '#f (memq (G2e50@id->sym G4002@name) G3ffb@set)) '#f)) G4000@ls/false)) '#f) (apply (lambda (G4004@name) (G3047@bless (list 'quote G4004@name))) G4000@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G3ffe@t))) (G3091@syntax-dispatch G3ffe@t '(_ any)))) G3ffa@x))) (set! G30a5@macro-transformer (lambda (G4006@x) (if (procedure? G4006@x) G4006@x (if (symbol? G4006@x) ((lambda (G4008@t) (if (memv G4008@t '(define-record-type)) G3085@define-record-type-macro (if (memv G4008@t '(define-struct)) G3083@define-struct-macro (if (memv G4008@t '(include)) G3079@include-macro (if (memv G4008@t '(cond)) G3075@cond-macro (if (memv G4008@t '(let)) G304d@let-macro (if (memv G4008@t '(do)) G306d@do-macro (if (memv G4008@t '(or)) G3071@or-macro (if (memv G4008@t '(and)) G3073@and-macro (if (memv G4008@t '(let*)) G306f@let*-macro (if (memv G4008@t '(let-values)) G304f@let-values-macro (if (memv G4008@t '(let*-values)) G3051@let*-values-macro (if (memv G4008@t '(syntax-rules)) G307d@syntax-rules-macro (if (memv G4008@t '(quasiquote)) G307f@quasiquote-macro (if (memv G4008@t '(quasisyntax)) G3081@quasisyntax-macro (if (memv G4008@t '(with-syntax)) G3049@with-syntax-macro (if (memv G4008@t '(when)) G3039@when-macro (if (memv G4008@t '(unless)) G303b@unless-macro (if (memv G4008@t '(case)) G303f@case-macro (if (memv G4008@t '(identifier-syntax)) G306b@identifier-syntax-macro (if (memv G4008@t '(time)) G3063@time-macro (if (memv G4008@t '(delay)) G3065@delay-macro (if (memv G4008@t '(assert)) G3067@assert-macro (if (memv G4008@t '(endianness)) G3069@endianness-macro (if (memv G4008@t '(guard)) G305f@guard-macro (if (memv G4008@t '(define-enumeration)) G3061@define-enumeration-macro (if (memv G4008@t '(trace-lambda)) G3053@trace-lambda-macro (if (memv G4008@t '(trace-define)) G3055@trace-define-macro (if (memv G4008@t '(trace-define-syntax)) G3057@trace-define-syntax-macro (if (memv G4008@t '(trace-let-syntax)) G305b@trace-let-syntax-macro (if (memv G4008@t '(trace-letrec-syntax)) G305d@trace-letrec-syntax-macro (if (memv G4008@t '(define-condition-type)) G3087@define-condition-type-macro (if (memv G4008@t '(parameterize)) G308b@parameterize-macro (if (memv G4008@t '(include-into)) G307b@include-into-macro (if (memv G4008@t '(eol-style)) (lambda (G400a@x) (G30a3@symbol-macro G400a@x '(none lf cr crlf nel crnel ls))) (if (memv G4008@t '(error-handling-mode)) (lambda (G400c@x) (G30a3@symbol-macro G400c@x '(ignore raise replace))) (if (memv G4008@t '(buffer-mode)) (lambda (G400e@x) (G30a3@symbol-macro G400e@x '(none line block))) (if (memv G4008@t '(file-options)) G30a1@file-options-macro (if (memv G4008@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G3089@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G4006@x)))))))))))))))))))))))))))))))))))))))) G4006@x) (error 'core-macro-transformer '"BUG: invalid macro" G4006@x))))) (set! G30a7@local-macro-transformer (lambda (G4010@x) (car G4010@x))) (set! G30a9@do-macro-call (lambda (G4012@transformer G4013@expr) ((lambda (G4016@out) (begin ((letrec ((G4018@f (lambda (G401a@x) (if (not (G2e16@stx? G401a@x)) (if (pair? G401a@x) (begin (G4018@f (car G401a@x)) (G4018@f (cdr G401a@x))) (if (vector? G401a@x) (vector-for-each G4018@f G401a@x) (if (symbol? G401a@x) (G3184@syntax-violation '#f '"raw symbol encountered in output of macro" G4013@expr G401a@x) (void)))) (void))))) G4018@f) G4016@out) (G2e38@add-mark (G2e2e@gen-mark) G4016@out G4013@expr))) (G4012@transformer (G2e38@add-mark G2e30@anti-mark G4013@expr '#f))))) (set! G30ab@chi-macro (lambda (G401c@p G401d@e) (G30a9@do-macro-call (G30a5@macro-transformer G401c@p) G401d@e))) (set! G30ad@chi-local-macro (lambda (G4020@p G4021@e) (G30a9@do-macro-call (G30a7@local-macro-transformer G4020@p) G4021@e))) (set! G30af@chi-global-macro (lambda (G4024@p G4025@e) ((lambda (G4028@lib G4029@loc) (begin (G2c44@G2ada@visit-library G4028@lib) ((lambda (G402c@x) ((lambda (G402e@transformer) (G30a9@do-macro-call G402e@transformer G4025@e)) (if (procedure? G402c@x) G402c@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G402c@x)))) (symbol-value G4029@loc)))) (car G4024@p) (cdr G4024@p)))) (set! G30b1@chi-expr* (lambda (G4030@e* G4031@r G4032@mr) (if (null? G4030@e*) '() ((lambda (G4036@e) (cons G4036@e (G30b1@chi-expr* (cdr G4030@e*) G4031@r G4032@mr))) (G30b5@chi-expr (car G4030@e*) G4031@r G4032@mr))))) (set! G30b3@chi-application (lambda (G4038@e G4039@r G403a@mr) ((lambda (G403e@t) ((lambda (G4040@ls/false) (if G4040@ls/false (apply (lambda (G4042@rator G4043@rands) ((lambda (G4046@rator) (cons G4046@rator (G30b1@chi-expr* G4043@rands G4039@r G403a@mr))) (G30b5@chi-expr G4042@rator G4039@r G403a@mr))) G4040@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G403e@t))) (G3091@syntax-dispatch G403e@t '(any . each-any)))) G4038@e))) (set! G30b5@chi-expr (lambda (G4048@e G4049@r G404a@mr) (call-with-values (lambda () (G2e76@syntax-type G4048@e G4049@r)) (lambda (G4051@G404e G4052@G404f G4053@G4050) ((lambda (G4057@kwd G4058@value G4059@type) ((lambda (G405d@t) (if (memv G405d@t '(core-macro)) ((lambda (G405f@transformer) (G405f@transformer G4048@e G4049@r G404a@mr)) (G309f@core-macro-transformer G4058@value)) (if (memv G405d@t '(global)) ((lambda (G4061@lib) ((lambda (G4063@loc) ((lambda () (begin ((G3100@inv-collector) G4061@lib) G4063@loc)))) (cdr G4058@value))) (car G4058@value)) (if (memv G405d@t '(core-prim)) ((lambda (G4065@name) (list 'primitive G4065@name)) G4058@value) (if (memv G405d@t '(call)) (G30b3@chi-application G4048@e G4049@r G404a@mr) (if (memv G405d@t '(lexical)) ((lambda (G4067@lex) G4067@lex) (G3021@lexical-var G4058@value)) (if (memv G405d@t '(global-macro global-macro!)) (G30b5@chi-expr (G30af@chi-global-macro G4058@value G4048@e) G4049@r G404a@mr) (if (memv G405d@t '(local-macro local-macro!)) (G30b5@chi-expr (G30ad@chi-local-macro G4058@value G4048@e) G4049@r G404a@mr) (if (memv G405d@t '(macro macro!)) (G30b5@chi-expr (G30ab@chi-macro G4058@value G4048@e) G4049@r G404a@mr) (if (memv G405d@t '(constant)) ((lambda (G4069@datum) (list 'quote G4069@datum)) G4058@value) (if (memv G405d@t '(set!)) (G30b7@chi-set! G4048@e G4049@r G404a@mr) (if (memv G405d@t '(begin)) ((lambda (G406b@t) ((lambda (G406d@ls/false) (if G406d@ls/false (apply (lambda (G406f@x G4070@x*) (G2da9@G2d1a@build-sequence '#f (G30b1@chi-expr* (cons G406f@x G4070@x*) G4049@r G404a@mr))) G406d@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G406b@t))) (G3091@syntax-dispatch G406b@t '(_ any . each-any)))) G4048@e) (if (memv G405d@t '(let-syntax letrec-syntax)) ((lambda (G4073@t) ((lambda (G4075@ls/false) (if (if G4075@ls/false (begin '#f (apply (lambda (G4077@xlhs* G4078@xrhs* G4079@xbody G407a@xbody*) (if (not (G2e58@valid-bound-ids? G4077@xlhs*)) (G3184@syntax-violation '#f '"invalid identifiers" G4048@e) (void))) G4075@ls/false)) '#f) (apply (lambda (G407f@xlhs* G4080@xrhs* G4081@xbody G4082@xbody*) ((lambda (G4087@xlab*) ((lambda (G4089@xrib) ((lambda (G408b@xb*) ((lambda () (G2da9@G2d1a@build-sequence '#f (G30b1@chi-expr* (map (lambda (G408d@x) (G2e3a@add-subst G4089@xrib G408d@x)) (cons G4081@xbody G4082@xbody*)) (append (map cons G4087@xlab* G408b@xb*) G4049@r) (append (map cons G4087@xlab* G408b@xb*) G404a@mr)))))) (map (lambda (G408f@x) (G2e95@make-eval-transformer (G30f2@expand-transformer (if (eq? G4059@type 'let-syntax) G408f@x (G2e3a@add-subst G4089@xrib G408f@x)) G404a@mr))) G4080@xrhs*))) (G2e07@make-full-rib G407f@xlhs* G4087@xlab*))) (map G2dca@gen-label G407f@xlhs*))) G4075@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G4073@t))) (G3091@syntax-dispatch G4073@t '(_ #(each (any any)) any . each-any)))) G4048@e) (if (memv G405d@t '(displaced-lexical)) (G3184@syntax-violation '#f '"identifier out of context" G4048@e) (if (memv G405d@t '(syntax)) (G3184@syntax-violation '#f '"reference to pattern variable outside a syntax form" G4048@e) (if (memv G405d@t '(define define-syntax module import library)) (G3184@syntax-violation '#f (string-append ((lambda (G4091@t) (if (memv G4091@t '(define)) '"a definition" (if (memv G4091@t '(define-syntax)) '"a define-syntax" (if (memv G4091@t '(module)) '"a module definition" (if (memv G4091@t '(library)) '"a library definition" (if (memv G4091@t '(import)) '"an import declaration" (if (memv G4091@t '(export)) '"an export declaration" '"a non-expression"))))))) G4059@type) '" was found where an expression was expected") G4048@e) (if (memv G405d@t '(mutable)) (G3184@syntax-violation '#f '"attempt to reference an unexportable variable" G4048@e) (G3184@syntax-violation '#f '"invalid expression" G4048@e)))))))))))))))))) G4059@type)) G4053@G4050 G4052@G404f G4051@G404e))))) (set! G30b7@chi-set! (lambda (G4093@e G4094@r G4095@mr) ((lambda (G4099@t) ((lambda (G409b@ls/false) (if (if G409b@ls/false (begin '#f (apply (lambda (G409d@x G409e@v) (G2e4e@id? G409d@x)) G409b@ls/false)) '#f) (apply (lambda (G40a1@x G40a2@v) (call-with-values (lambda () (G2e76@syntax-type G40a1@x G4094@r)) (lambda (G40a8@G40a5 G40a9@G40a6 G40aa@G40a7) ((lambda (G40ae@kwd G40af@value G40b0@type) ((lambda (G40b4@t) (if (memv G40b4@t '(lexical)) (begin (G3025@set-lexical-mutable! G40af@value '#t) (list 'set! (G3021@lexical-var G40af@value) (G30b5@chi-expr G40a2@v G4094@r G4095@mr))) (if (memv G40b4@t '(core-prim)) (G3184@syntax-violation '#f '"cannot modify imported core primitive" G4093@e) (if (memv G40b4@t '(global)) (G3184@syntax-violation '#f '"attempt to modify imported binding" G4093@e) (if (memv G40b4@t '(global-macro!)) (G30b5@chi-expr (G30af@chi-global-macro G40af@value G4093@e) G4094@r G4095@mr) (if (memv G40b4@t '(local-macro!)) (G30b5@chi-expr (G30ad@chi-local-macro G40af@value G4093@e) G4094@r G4095@mr) (if (memv G40b4@t '(mutable)) (G3184@syntax-violation '#f '"attempt to assign to an unexportable variable" G4093@e) (G3184@syntax-violation '#f '"invalid syntax" G4093@e)))))))) G40b0@type)) G40aa@G40a7 G40a9@G40a6 G40a8@G40a5)))) G409b@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G4099@t))) (G3091@syntax-dispatch G4099@t '(_ any any)))) G4093@e))) (set! G30b9@verify-formals (lambda (G40b6@fmls G40b7@stx) ((lambda (G40ba@t) ((lambda (G40bc@ls/false) (if G40bc@ls/false (apply (lambda (G40be@x*) (if (not (G2e58@valid-bound-ids? G40be@x*)) (G304b@invalid-fmls-error G40b7@stx G40b6@fmls) (void))) G40bc@ls/false) ((lambda (G40c0@t) ((lambda (G40c2@ls/false) (if G40c2@ls/false (apply (lambda (G40c4@x* G40c5@x) (if (not (G2e58@valid-bound-ids? (cons G40c5@x G40c4@x*))) (G304b@invalid-fmls-error G40b7@stx G40b6@fmls) (void))) G40c2@ls/false) ((lambda (G40c8@t) ((lambda (G40ca@ls/false) (if G40ca@ls/false (apply (lambda () (G3184@syntax-violation '#f '"invalid syntax" G40b7@stx)) G40ca@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G40c8@t))) (G3091@syntax-dispatch G40c8@t '_))) G40c0@t))) (G3091@syntax-dispatch G40c0@t '#(each+ any () any)))) G40ba@t))) (G3091@syntax-dispatch G40ba@t 'each-any))) G40b6@fmls))) (set! G30bb@chi-lambda-clause (lambda (G40cc@stx G40cd@fmls G40ce@body* G40cf@r G40d0@mr) ((lambda (G40d6@t) ((lambda (G40d8@ls/false) (if G40d8@ls/false (apply (lambda (G40da@x*) (begin (G30b9@verify-formals G40cd@fmls G40cc@stx) ((lambda (G40dc@lex* G40dd@lab*) (values G40dc@lex* (G30cb@chi-internal (G2e3a@add-subst (G2e07@make-full-rib G40da@x* G40dd@lab*) G40ce@body*) (G3029@add-lexicals G40dd@lab* G40dc@lex* G40cf@r) G40d0@mr))) (map G2dc6@gen-lexical G40da@x*) (map G2dca@gen-label G40da@x*)))) G40d8@ls/false) ((lambda (G40e0@t) ((lambda (G40e2@ls/false) (if G40e2@ls/false (apply (lambda (G40e4@x* G40e5@x) (begin (G30b9@verify-formals G40cd@fmls G40cc@stx) ((lambda (G40e8@lex* G40e9@lab* G40ea@lex G40eb@lab) (values (append G40e8@lex* G40ea@lex) (G30cb@chi-internal (G2e3a@add-subst (G2e07@make-full-rib (cons G40e5@x G40e4@x*) (cons G40eb@lab G40e9@lab*)) G40ce@body*) (G3029@add-lexicals (cons G40eb@lab G40e9@lab*) (cons G40ea@lex G40e8@lex*) G40cf@r) G40d0@mr))) (map G2dc6@gen-lexical G40e4@x*) (map G2dca@gen-label G40e4@x*) (G2dc6@gen-lexical G40e5@x) (G2dca@gen-label G40e5@x)))) G40e2@ls/false) ((lambda (G40f0@t) ((lambda (G40f2@ls/false) (if G40f2@ls/false (apply (lambda () (G3184@syntax-violation '#f '"invalid syntax" G40cd@fmls)) G40f2@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G40f0@t))) (G3091@syntax-dispatch G40f0@t '_))) G40e0@t))) (G3091@syntax-dispatch G40e0@t '#(each+ any () any)))) G40d6@t))) (G3091@syntax-dispatch G40d6@t 'each-any))) G40cd@fmls))) (set! G30bd@chi-lambda-clause* (lambda (G40f4@stx G40f5@fmls* G40f6@body** G40f7@r G40f8@mr) (if (null? G40f5@fmls*) (values '() '()) (call-with-values (lambda () (G30bb@chi-lambda-clause G40f4@stx (car G40f5@fmls*) (car G40f6@body**) G40f7@r G40f8@mr)) (lambda (G4100@G40fe G4101@G40ff) ((lambda (G4104@b G4105@a) (call-with-values (lambda () (G30bd@chi-lambda-clause* G40f4@stx (cdr G40f5@fmls*) (cdr G40f6@body**) G40f7@r G40f8@mr)) (lambda (G410a@G4108 G410b@G4109) ((lambda (G410e@b* G410f@a*) (values (cons G4105@a G410f@a*) (cons G4104@b G410e@b*))) G410b@G4109 G410a@G4108)))) G4101@G40ff G4100@G40fe)))))) (set! G30bf@chi-defun (lambda (G4112@x G4113@r G4114@mr) ((lambda (G4118@fmls G4119@body*) (call-with-values (lambda () (G30bb@chi-lambda-clause G4118@fmls G4118@fmls G4119@body* G4113@r G4114@mr)) (lambda (G411e@G411c G411f@G411d) ((lambda (G4122@body G4123@fmls) (G2da6@G2cce@build-lambda '#f G4123@fmls G4122@body)) G411f@G411d G411e@G411c)))) (car G4112@x) (cdr G4112@x)))) (set! G30c1@chi-rhs (lambda (G4126@rhs G4127@r G4128@mr) ((lambda (G412c@t) (if (memv G412c@t '(defun)) (G30bf@chi-defun (cdr G4126@rhs) G4127@r G4128@mr) (if (memv G412c@t '(expr)) ((lambda (G412e@expr) (G30b5@chi-expr G412e@expr G4127@r G4128@mr)) (cdr G4126@rhs)) (if (memv G412c@t '(top-expr)) ((lambda (G4130@expr) (G2da9@G2d1a@build-sequence '#f (list (G30b5@chi-expr G4130@expr G4127@r G4128@mr) (G2daa@G2d1c@build-void)))) (cdr G4126@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G4126@rhs))))) (car G4126@rhs)))) (set! G30c3@expand-interaction-rhs*/init* (lambda (G4132@lhs* G4133@rhs* G4134@init* G4135@r G4136@mr) ((letrec ((G413c@f (lambda (G413e@lhs* G413f@rhs*) (if (null? G413e@lhs*) (map (lambda (G4142@x) (G30b5@chi-expr G4142@x G4135@r G4136@mr)) G4134@init*) ((lambda (G4144@lhs G4145@rhs) ((lambda (G4148@t) (if (memv G4148@t '(defun)) ((lambda (G414a@rhs) (cons (list 'set! G4144@lhs G414a@rhs) (G413c@f (cdr G413e@lhs*) (cdr G413f@rhs*)))) (G30bf@chi-defun (cdr G4145@rhs) G4135@r G4136@mr)) (if (memv G4148@t '(expr)) ((lambda (G414c@rhs) (cons (list 'set! G4144@lhs G414c@rhs) (G413c@f (cdr G413e@lhs*) (cdr G413f@rhs*)))) (G30b5@chi-expr (cdr G4145@rhs) G4135@r G4136@mr)) (if (memv G4148@t '(top-expr)) ((lambda (G414e@e) (cons G414e@e (G413c@f (cdr G413e@lhs*) (cdr G413f@rhs*)))) (G30b5@chi-expr (cdr G4145@rhs) G4135@r G4136@mr)) (error 'expand-interaction '"invallid" G4145@rhs))))) (car G4145@rhs))) (car G413e@lhs*) (car G413f@rhs*)))))) G413c@f) G4132@lhs* G4133@rhs*))) (set! G30c5@chi-rhs* (lambda (G4150@rhs* G4151@r G4152@mr) ((letrec ((G4156@f (lambda (G4158@ls) (if (null? G4158@ls) '() ((lambda (G415a@a) (cons G415a@a (G4156@f (cdr G4158@ls)))) (G30c1@chi-rhs (car G4158@ls) G4151@r G4152@mr)))))) G4156@f) G4150@rhs*))) (set! G30c7@find-bound=? (lambda (G415c@x G415d@lhs* G415e@rhs*) (if (null? G415d@lhs*) '#f (if (G2e54@bound-id=? G415c@x (car G415d@lhs*)) (car G415e@rhs*) (G30c7@find-bound=? G415c@x (cdr G415d@lhs*) (cdr G415e@rhs*)))))) (set! G30c9@find-dups (lambda (G4162@ls) ((letrec ((G4164@f (lambda (G4166@ls G4167@dups) (if (null? G4166@ls) G4167@dups ((lambda (G416a@t) (if G416a@t ((lambda (G416c@x) (G4164@f (cdr G4166@ls) (cons (list (car G4166@ls) G416c@x) G4167@dups))) G416a@t) (G4164@f (cdr G4166@ls) G4167@dups))) (G30c7@find-bound=? (car G4166@ls) (cdr G4166@ls) (cdr G4166@ls))))))) G4164@f) G4162@ls '()))) (set! G30cb@chi-internal (lambda (G416e@e* G416f@r G4170@mr) ((lambda (G4174@rib) (call-with-values (lambda () (G30f0@chi-body* (map (lambda (G417e@x) (G2e3a@add-subst G4174@rib G417e@x)) (G2e4c@syntax->list G416e@e*)) G416f@r G4170@mr '() '() '() '() '() G4174@rib '#f)) (lambda (G4180@G4176 G4181@G4177 G4182@G4178 G4183@G4179 G4184@G417a G4185@G417b G4186@G417c G4187@G417d) ((lambda (G4190@_exp* G4191@kwd* G4192@mod** G4193@rhs* G4194@lex* G4195@mr G4196@r G4197@e*) (begin (if (null? G4197@e*) (G3184@syntax-violation '#f '"no expression in body" G4197@e*) (void)) ((lambda (G41a0@init*) ((lambda (G41a2@rhs*) ((lambda () (G2dac@G2d20@build-letrec* '#f (reverse G4194@lex*) (reverse G41a2@rhs*) (G2da9@G2d1a@build-sequence '#f G41a0@init*))))) (G30c5@chi-rhs* G4193@rhs* G4196@r G4195@mr))) (G30b1@chi-expr* (append (apply append (reverse G4192@mod**)) G4197@e*) G4196@r G4195@mr)))) G4187@G417d G4186@G417c G4185@G417b G4184@G417a G4183@G4179 G4182@G4178 G4181@G4177 G4180@G4176)))) (G2df7@make-empty-rib)))) (set! G30cd@parse-module (lambda (G41a4@e) ((lambda (G41a6@t) ((lambda (G41a8@ls/false) (if G41a8@ls/false (apply (lambda (G41aa@export* G41ab@b*) (begin (if (not (for-all G2e4e@id? G41aa@export*)) (G3184@syntax-violation '#f '"module exports must be identifiers" G41a4@e) (void)) (values '#f (list->vector G41aa@export*) G41ab@b*))) G41a8@ls/false) ((lambda (G41ae@t) ((lambda (G41b0@ls/false) (if G41b0@ls/false (apply (lambda (G41b2@name G41b3@export* G41b4@b*) (begin (if (not (G2e4e@id? G41b2@name)) (G3184@syntax-violation '#f '"module name must be an identifier" G41a4@e) (void)) (if (not (for-all G2e4e@id? G41b3@export*)) (G3184@syntax-violation '#f '"module exports must be identifiers" G41a4@e) (void)) (values G41b2@name (list->vector G41b3@export*) G41b4@b*))) G41b0@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G41ae@t))) (G3091@syntax-dispatch G41ae@t '(_ any each-any . each-any)))) G41a6@t))) (G3091@syntax-dispatch G41a6@t '(_ each-any . each-any)))) G41a4@e))) (set! G30d3@G30ce (make-record-type-descriptor 'module-interface '#f 'G30d1 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G30d5@G30d0 '#f) (set! G30d7@G30cf (make-record-constructor-descriptor G30d3@G30ce '#f G30d5@G30d0)) (set! G30dc@module-interface? (record-predicate G30d3@G30ce)) (set! G30de@make-module-interface (record-constructor G30d7@G30cf)) (set! G30e0@module-interface-first-mark (record-accessor G30d3@G30ce '0)) (set! G30e2@module-interface-exp-id-vec (record-accessor G30d3@G30ce '1)) (set! G30e4@module-interface-exp-lab-vec (record-accessor G30d3@G30ce '2)) (set! G30e6@set-module-interface-first-mark! (record-mutator G30d3@G30ce '0)) (set! G30e8@set-module-interface-exp-id-vec! (record-mutator G30d3@G30ce '1)) (set! G30ea@set-module-interface-exp-lab-vec! (record-mutator G30d3@G30ce '2)) (set! G30ec@module-interface-exp-id* (lambda (G41b8@iface G41b9@id) ((lambda (G41bd@diff-marks) (begin (set! G41bd@diff-marks (lambda (G41c4@ls G41c5@x) (begin (if (null? G41c4@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G41c8@a) (if (eq? G41c8@a G41c5@x) '() (cons G41c8@a (G41bd@diff-marks (cdr G41c4@ls) G41c5@x)))) (car G41c4@ls))))) ((lambda (G41be@diff G41bf@id-vec) (if (null? G41be@diff) G41bf@id-vec (vector-map (lambda (G41c2@x) (G2e18@make-stx (G2e1a@stx-expr G41c2@x) (append G41be@diff (G2e1c@stx-mark* G41c2@x)) '() '())) G41bf@id-vec))) (G41bd@diff-marks (G2e1c@stx-mark* G41b9@id) (G30e0@module-interface-first-mark G41b8@iface)) (G30e2@module-interface-exp-id-vec G41b8@iface)))) '#f))) (set! G30ee@chi-internal-module (lambda (G41ca@e G41cb@r G41cc@mr G41cd@lex* G41ce@rhs* G41cf@mod** G41d0@kwd*) (call-with-values (lambda () (G30cd@parse-module G41ca@e)) (lambda (G41db@G41d8 G41dc@G41d9 G41dd@G41da) ((lambda (G41e1@e* G41e2@exp-id* G41e3@name) ((lambda (G41e7@rib) ((lambda (G41e9@e*) ((lambda () (call-with-values (lambda () (G30f0@chi-body* G41e9@e* G41cb@r G41cc@mr G41cd@lex* G41ce@rhs* G41cf@mod** G41d0@kwd* '() G41e7@rib '#f)) (lambda (G41f3@G41eb G41f4@G41ec G41f5@G41ed G41f6@G41ee G41f7@G41ef G41f8@G41f0 G41f9@G41f1 G41fa@G41f2) ((lambda (G4203@_exp* G4204@kwd* G4205@mod** G4206@rhs* G4207@lex* G4208@mr G4209@r G420a@e*) ((lambda (G4213@exp-lab* G4214@mod**) (if (not G41e3@name) (values G4207@lex* G4206@rhs* G41e2@exp-id* G4213@exp-lab* G4209@r G4208@mr G4214@mod** G4204@kwd*) ((lambda (G4217@lab G4218@iface) (values G4207@lex* G4206@rhs* (vector G41e3@name) (vector G4217@lab) (cons (cons G4217@lab (cons '$module G4218@iface)) G4209@r) (cons (cons G4217@lab (cons '$module G4218@iface)) G4208@mr) G4214@mod** G4204@kwd*)) (G2dca@gen-label 'module) (G30de@make-module-interface (car (G2e1c@stx-mark* G41e3@name)) (vector-map (lambda (G421b@x) (G2e18@make-stx (G2e1a@stx-expr G421b@x) (G2e1c@stx-mark* G421b@x) '() '())) G41e2@exp-id*) G4213@exp-lab*)))) (vector-map (lambda (G421d@x) ((lambda (G421f@t) (if G421f@t G421f@t (begin '#f (G3184@syntax-violation '#f '"cannot find module export" G421d@x)))) (G2e68@id->label (G2e18@make-stx (G2e50@id->sym G421d@x) (G2e1c@stx-mark* G421d@x) (list G41e7@rib) '())))) G41e2@exp-id*) (cons G420a@e* G4205@mod**))) G41fa@G41f2 G41f9@G41f1 G41f8@G41f0 G41f7@G41ef G41f6@G41ee G41f5@G41ed G41f4@G41ec G41f3@G41eb)))))) (map (lambda (G4221@x) (G2e3a@add-subst G41e7@rib G4221@x)) (G2e4c@syntax->list G41e1@e*)))) (G2df7@make-empty-rib))) G41dd@G41da G41dc@G41d9 G41db@G41d8))))) (set! G30f0@chi-body* (lambda (G4223@e* G4224@r G4225@mr G4226@lex* G4227@rhs* G4228@mod** G4229@kwd* G422a@exp* G422b@rib G422c@top?) (if (null? G4223@e*) (values G4223@e* G4224@r G4225@mr G4226@lex* G4227@rhs* G4228@mod** G4229@kwd* G422a@exp*) ((lambda (G4237@e) (call-with-values (lambda () (G2e76@syntax-type G4237@e G4224@r)) (lambda (G423c@G4239 G423d@G423a G423e@G423b) ((lambda (G4242@kwd G4243@value G4244@type) ((lambda (G4248@kwd*) ((lambda (G424a@t) (if (memv G424a@t '(define)) (call-with-values (lambda () (G3019@parse-define G4237@e)) (lambda (G424e@G424c G424f@G424d) ((lambda (G4252@rhs G4253@id) (begin (if (G2e5c@bound-id-member? G4253@id G4248@kwd*) (G3184@syntax-violation '#f '"cannot redefine keyword" G4237@e) (void)) (call-with-values (lambda () (G2dce@gen-define-label+loc G4253@id G422b@rib)) (lambda (G4258@G4256 G4259@G4257) ((lambda (G425c@lex G425d@lab) (begin (G2dfd@extend-rib! G422b@rib G4253@id G425d@lab) (G30f0@chi-body* (cdr G4223@e*) (G3027@add-lexical G425d@lab G425c@lex G4224@r) G4225@mr (cons G425c@lex G4226@lex*) (cons G4252@rhs G4227@rhs*) G4228@mod** G4248@kwd* G422a@exp* G422b@rib G422c@top?))) G4259@G4257 G4258@G4256))))) G424f@G424d G424e@G424c))) (if (memv G424a@t '(define-syntax)) (call-with-values (lambda () (G301b@parse-define-syntax G4237@e)) (lambda (G4262@G4260 G4263@G4261) ((lambda (G4266@rhs G4267@id) (begin (if (G2e5c@bound-id-member? G4267@id G4248@kwd*) (G3184@syntax-violation '#f '"cannot redefine keyword" G4237@e) (void)) ((lambda (G426a@lab G426b@expanded-rhs) (begin (G2dfd@extend-rib! G422b@rib G4267@id G426a@lab) ((lambda (G426e@b) (G30f0@chi-body* (cdr G4223@e*) (cons (cons G426a@lab G426e@b) G4224@r) (cons (cons G426a@lab G426e@b) G4225@mr) G4226@lex* G4227@rhs* G4228@mod** G4248@kwd* G422a@exp* G422b@rib G422c@top?)) (G2e95@make-eval-transformer G426b@expanded-rhs)))) (G2dd0@gen-define-label G4267@id G422b@rib) (G30f2@expand-transformer G4266@rhs G4225@mr)))) G4263@G4261 G4262@G4260))) (if (memv G424a@t '(let-syntax letrec-syntax)) ((lambda (G4270@t) ((lambda (G4272@ls/false) (if (if G4272@ls/false (begin '#f (apply (lambda (G4274@xlhs* G4275@xrhs* G4276@xbody*) (if (not (G2e58@valid-bound-ids? G4274@xlhs*)) (G3184@syntax-violation '#f '"invalid identifiers" G4237@e) (void))) G4272@ls/false)) '#f) (apply (lambda (G427a@xlhs* G427b@xrhs* G427c@xbody*) ((lambda (G4280@xlab*) ((lambda (G4282@xrib) ((lambda (G4284@xb*) ((lambda () (G30f0@chi-body* (append (map (lambda (G4286@x) (G2e3a@add-subst G4282@xrib G4286@x)) G427c@xbody*) (cdr G4223@e*)) (append (map cons G4280@xlab* G4284@xb*) G4224@r) (append (map cons G4280@xlab* G4284@xb*) G4225@mr) G4226@lex* G4227@rhs* G4228@mod** G4248@kwd* G422a@exp* G422b@rib G422c@top?)))) (map (lambda (G4288@x) (G2e95@make-eval-transformer (G30f2@expand-transformer (if (eq? G4244@type 'let-syntax) G4288@x (G2e3a@add-subst G4282@xrib G4288@x)) G4225@mr))) G427b@xrhs*))) (G2e07@make-full-rib G427a@xlhs* G4280@xlab*))) (map G2dca@gen-label G427a@xlhs*))) G4272@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G4270@t))) (G3091@syntax-dispatch G4270@t '(_ #(each (any any)) . each-any)))) G4237@e) (if (memv G424a@t '(begin)) ((lambda (G428a@t) ((lambda (G428c@ls/false) (if G428c@ls/false (apply (lambda (G428e@x*) (G30f0@chi-body* (append G428e@x* (cdr G4223@e*)) G4224@r G4225@mr G4226@lex* G4227@rhs* G4228@mod** G4248@kwd* G422a@exp* G422b@rib G422c@top?)) G428c@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G428a@t))) (G3091@syntax-dispatch G428a@t '(_ . each-any)))) G4237@e) (if (memv G424a@t '(global-macro global-macro!)) (G30f0@chi-body* (cons (G2e3a@add-subst G422b@rib (G30af@chi-global-macro G4243@value G4237@e)) (cdr G4223@e*)) G4224@r G4225@mr G4226@lex* G4227@rhs* G4228@mod** G4248@kwd* G422a@exp* G422b@rib G422c@top?) (if (memv G424a@t '(local-macro local-macro!)) (G30f0@chi-body* (cons (G2e3a@add-subst G422b@rib (G30ad@chi-local-macro G4243@value G4237@e)) (cdr G4223@e*)) G4224@r G4225@mr G4226@lex* G4227@rhs* G4228@mod** G4248@kwd* G422a@exp* G422b@rib G422c@top?) (if (memv G424a@t '(macro macro!)) (G30f0@chi-body* (cons (G2e3a@add-subst G422b@rib (G30ab@chi-macro G4243@value G4237@e)) (cdr G4223@e*)) G4224@r G4225@mr G4226@lex* G4227@rhs* G4228@mod** G4248@kwd* G422a@exp* G422b@rib G422c@top?) (if (memv G424a@t '(module)) (call-with-values (lambda () (G30ee@chi-internal-module G4237@e G4224@r G4225@mr G4226@lex* G4227@rhs* G4228@mod** G4248@kwd*)) (lambda (G4298@G4290 G4299@G4291 G429a@G4292 G429b@G4293 G429c@G4294 G429d@G4295 G429e@G4296 G429f@G4297) ((lambda (G42a8@kwd* G42a9@mod** G42aa@mr G42ab@r G42ac@m-exp-lab* G42ad@m-exp-id* G42ae@rhs* G42af@lex*) (begin (vector-for-each (lambda (G42b8@id G42b9@lab) (G2dfd@extend-rib! G422b@rib G42b8@id G42b9@lab)) G42ad@m-exp-id* G42ac@m-exp-lab*) (G30f0@chi-body* (cdr G4223@e*) G42ab@r G42aa@mr G42af@lex* G42ae@rhs* G42a9@mod** G42a8@kwd* G422a@exp* G422b@rib G422c@top?))) G429f@G4297 G429e@G4296 G429d@G4295 G429c@G4294 G429b@G4293 G429a@G4292 G4299@G4291 G4298@G4290))) (if (memv G424a@t '(library)) (begin (G3164@library-expander (G2e64@stx->datum G4237@e)) (G30f0@chi-body* (cdr G4223@e*) G4224@r G4225@mr G4226@lex* G4227@rhs* G4228@mod** G4248@kwd* G422a@exp* G422b@rib G422c@top?)) (if (memv G424a@t '(export)) ((lambda (G42bc@t) ((lambda (G42be@ls/false) (if G42be@ls/false (apply (lambda (G42c0@exp-decl*) (G30f0@chi-body* (cdr G4223@e*) G4224@r G4225@mr G4226@lex* G4227@rhs* G4228@mod** G4248@kwd* (append G42c0@exp-decl* G422a@exp*) G422b@rib G422c@top?)) G42be@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G42bc@t))) (G3091@syntax-dispatch G42bc@t '(_ . each-any)))) G4237@e) (if (memv G424a@t '(import)) ((lambda () ((lambda (G42c3@module-import? G42c5@module-import G42c7@library-import) (begin (set! G42c3@module-import? (lambda (G430f@e) ((lambda (G4311@t) ((lambda (G4313@ls/false) (if (if G4313@ls/false (begin '#f (apply (lambda (G4315@id) (G2e4e@id? G4315@id)) G4313@ls/false)) '#f) (apply (lambda (G4317@id) '#t) G4313@ls/false) ((lambda (G4319@t) ((lambda (G431b@ls/false) (if G431b@ls/false (apply (lambda (G431d@imp*) '#f) G431b@ls/false) ((lambda (G431f@t) ((lambda (G4321@ls/false) (if G4321@ls/false (apply (lambda () (G3184@syntax-violation '#f '"malformed import form" G430f@e)) G4321@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G431f@t))) (G3091@syntax-dispatch G431f@t '_))) G4319@t))) (G3091@syntax-dispatch G4319@t '(_ . each-any)))) G4311@t))) (G3091@syntax-dispatch G4311@t '(_ any)))) G430f@e))) (set! G42c5@module-import (lambda (G42f0@e G42f1@r) ((lambda (G42f4@t) ((lambda (G42f6@ls/false) (if (if G42f6@ls/false (begin '#f (apply (lambda (G42f8@id) (G2e4e@id? G42f8@id)) G42f6@ls/false)) '#f) (apply (lambda (G42fa@id) (call-with-values (lambda () (G2e76@syntax-type G42fa@id G42f1@r)) (lambda (G42ff@G42fc G4300@G42fd G4301@G42fe) ((lambda (G4305@kwd G4306@value G4307@type) ((lambda (G430b@t) (if (memv G430b@t '($module)) ((lambda (G430d@iface) (values (G30ec@module-interface-exp-id* G430d@iface G42fa@id) (G30e4@module-interface-exp-lab-vec G430d@iface))) G4306@value) (G3184@syntax-violation '#f '"invalid import" G42f0@e))) G4307@type)) G4301@G42fe G4300@G42fd G42ff@G42fc)))) G42f6@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G42f4@t))) (G3091@syntax-dispatch G42f4@t '(_ any)))) G42f0@e))) (set! G42c7@library-import (lambda (G42d6@e) ((lambda (G42d8@t) ((lambda (G42da@ls/false) (if G42da@ls/false (apply (lambda (G42dc@ctxt G42dd@imp*) (call-with-values (lambda () (G30fa@parse-import-spec* (G318a@syntax->datum G42dd@imp*))) (lambda (G42e2@G42e0 G42e3@G42e1) ((lambda (G42e6@subst-labels G42e7@subst-names) (values (vector-map (lambda (G42ea@name) (G2e2c@datum->stx G42dc@ctxt G42ea@name)) G42e7@subst-names) G42e6@subst-labels)) G42e3@G42e1 G42e2@G42e0)))) G42da@ls/false) ((lambda (G42ec@t) ((lambda (G42ee@ls/false) (if G42ee@ls/false (apply (lambda () (G3184@syntax-violation '#f '"invalid import form" G42d6@e)) G42ee@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G42ec@t))) (G3091@syntax-dispatch G42ec@t '_))) G42d8@t))) (G3091@syntax-dispatch G42d8@t '(any . each-any)))) G42d6@e))) (begin (call-with-values (lambda () (if (G42c3@module-import? G4237@e) (G42c5@module-import G4237@e G4224@r) (G42c7@library-import G4237@e))) (lambda (G42ca@G42c8 G42cb@G42c9) ((lambda (G42ce@lab* G42cf@id*) (vector-for-each (lambda (G42d2@id G42d3@lab) (G2dfd@extend-rib! G422b@rib G42d2@id G42d3@lab)) G42cf@id* G42ce@lab*)) G42cb@G42c9 G42ca@G42c8))) (G30f0@chi-body* (cdr G4223@e*) G4224@r G4225@mr G4226@lex* G4227@rhs* G4228@mod** G4248@kwd* G422a@exp* G422b@rib G422c@top?)))) '#f '#f '#f))) (if G422c@top? (G30f0@chi-body* (cdr G4223@e*) G4224@r G4225@mr (cons (G2dc6@gen-lexical 'dummy) G4226@lex*) (cons (cons 'top-expr G4237@e) G4227@rhs*) G4228@mod** G4248@kwd* G422a@exp* G422b@rib G422c@top?) (values G4223@e* G4224@r G4225@mr G4226@lex* G4227@rhs* G4228@mod** G4248@kwd* G422a@exp*)))))))))))))) G4244@type)) (if (G2e4e@id? G4242@kwd) (cons G4242@kwd G4229@kwd*) G4229@kwd*))) G423e@G423b G423d@G423a G423c@G4239)))) (car G4223@e*))))) (set! G30f2@expand-transformer (lambda (G4323@expr G4324@r) ((lambda (G4327@rtc) ((lambda (G4329@expanded-rhs) (begin (for-each ((lambda (G432b@mark-visit) (lambda (G432d@x) (begin (G2c43@G2ad8@invoke-library G432d@x) (G432b@mark-visit G432d@x)))) (G3102@vis-collector)) (G4327@rtc)) G4329@expanded-rhs)) ((lambda (G4333@G432f@inv-collector G4334@G4330@vis-collector G4335@G4331@inv-collector G4336@G4332@vis-collector) ((lambda (G433b@swap) (dynamic-wind G433b@swap (lambda () (G30b5@chi-expr G4323@expr G4324@r G4324@r)) G433b@swap)) (lambda () (begin ((lambda (G433d@t) (begin (G4333@G432f@inv-collector G4335@G4331@inv-collector) (set! G4335@G4331@inv-collector G433d@t))) (G4333@G432f@inv-collector)) ((lambda (G433f@t) (begin (G4334@G4330@vis-collector G4336@G4332@vis-collector) (set! G4336@G4332@vis-collector G433f@t))) (G4334@G4330@vis-collector)))))) G3100@inv-collector G3102@vis-collector G4327@rtc (lambda (G4341@x) (values))))) (G30fe@make-collector)))) (set! G30f4@parse-exports (lambda (G4343@exp*) ((letrec ((G4345@f (lambda (G4347@exp* G4348@int* G4349@ext*) (if (null? G4347@exp*) (begin (if (not (G2e58@valid-bound-ids? G4349@ext*)) (G3184@syntax-violation 'export '"invalid exports" (G30c9@find-dups G4349@ext*)) (void)) (values (map G318a@syntax->datum G4349@ext*) G4348@int*)) ((lambda (G434d@t) ((lambda (G434f@ls/false) (if G434f@ls/false (apply (lambda (G4351@rename G4352@i* G4353@e*) (begin (if (not (if (eq? (G318a@syntax->datum G4351@rename) 'rename) (if (for-all G2e4e@id? G4352@i*) (begin '#f (for-all G2e4e@id? G4353@e*)) '#f) '#f)) (G3184@syntax-violation 'export '"invalid export specifier" (car G4347@exp*)) (void)) (G4345@f (cdr G4347@exp*) (append G4352@i* G4348@int*) (append G4353@e* G4349@ext*)))) G434f@ls/false) ((lambda (G4357@t) ((lambda (G4359@ls/false) (if G4359@ls/false (apply (lambda (G435b@ie) (begin (if (not (G2e4e@id? G435b@ie)) (G3184@syntax-violation 'export '"invalid export" G435b@ie) (void)) (G4345@f (cdr G4347@exp*) (cons G435b@ie G4348@int*) (cons G435b@ie G4349@ext*)))) G4359@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G4357@t))) (G3091@syntax-dispatch G4357@t 'any))) G434d@t))) (G3091@syntax-dispatch G434d@t '(any . #(each (any any)))))) (car G4347@exp*)))))) G4345@f) G4343@exp* '() '()))) (set! G30f6@parse-library-name (lambda (G435d@spec) ((lambda (G4360@parse) (begin (set! G4360@parse (lambda (G436b@x) ((lambda (G436d@t) ((lambda (G436f@ls/false) (if (if G436f@ls/false (begin '#f (apply (lambda (G4371@v*) (for-all (lambda (G4373@x) ((lambda (G4375@x) (if (integer? G4375@x) (begin '#f (exact? G4375@x)) '#f)) (G318a@syntax->datum G4373@x))) G4371@v*)) G436f@ls/false)) '#f) (apply (lambda (G4377@v*) (values '() (map G318a@syntax->datum G4377@v*))) G436f@ls/false) ((lambda (G4379@t) ((lambda (G437b@ls/false) (if (if G437b@ls/false (begin '#f (apply (lambda (G437d@x G437e@rest) (symbol? (G318a@syntax->datum G437d@x))) G437b@ls/false)) '#f) (apply (lambda (G4381@x G4382@rest) (call-with-values (lambda () (G4360@parse G4382@rest)) (lambda (G4387@G4385 G4388@G4386) ((lambda (G438b@v* G438c@x*) (values (cons (G318a@syntax->datum G4381@x) G438c@x*) G438b@v*)) G4388@G4386 G4387@G4385)))) G437b@ls/false) ((lambda (G438f@t) ((lambda (G4391@ls/false) (if G4391@ls/false (apply (lambda () (values '() '())) G4391@ls/false) ((lambda (G4393@t) ((lambda (G4395@ls/false) (if G4395@ls/false (apply (lambda () (G3184@syntax-violation '#f '"invalid library name" G435d@spec)) G4395@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G4393@t))) (G3091@syntax-dispatch G4393@t '_))) G438f@t))) (G3091@syntax-dispatch G438f@t '()))) G4379@t))) (G3091@syntax-dispatch G4379@t '(any . any)))) G436d@t))) (G3091@syntax-dispatch G436d@t '(each-any)))) G436b@x))) (call-with-values (lambda () (G4360@parse G435d@spec)) (lambda (G4363@G4361 G4364@G4362) ((lambda (G4367@ver* G4368@name*) (begin (if (null? G4368@name*) (G3184@syntax-violation '#f '"empty library name" G435d@spec) (void)) (values G4368@name* G4367@ver*))) G4364@G4362 G4363@G4361))))) '#f))) (set! G30f8@parse-library (lambda (G4397@e) ((lambda (G4399@t) ((lambda (G439b@ls/false) (if (if G439b@ls/false (begin '#f (apply (lambda (G439d@library G439e@name* G439f@export G43a0@exp* G43a1@import G43a2@imp* G43a3@b*) (if (eq? (G318a@syntax->datum G439f@export) 'export) (if (eq? (G318a@syntax->datum G43a1@import) 'import) (begin '#f (eq? (G318a@syntax->datum G439d@library) 'library)) '#f) '#f)) G439b@ls/false)) '#f) (apply (lambda (G43ab@library G43ac@name* G43ad@export G43ae@exp* G43af@import G43b0@imp* G43b1@b*) (values G43ac@name* G43ae@exp* G43b0@imp* G43b1@b*)) G439b@ls/false) ((lambda (G43b9@t) ((lambda (G43bb@ls/false) (if G43bb@ls/false (apply (lambda () (G3184@syntax-violation '#f '"malformed library" G4397@e)) G43bb@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G43b9@t))) (G3091@syntax-dispatch G43b9@t '_))) G4399@t))) (G3091@syntax-dispatch G4399@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4397@e))) (set! G30fa@parse-import-spec* ((lambda () ((lambda (G43be@idsyn? G43c0@dup-error G43c2@merge-substs G43c4@exclude* G43c6@find* G43c8@rem* G43ca@remove-dups G43cc@parse-library-name G43ce@import-library G43d0@get-import G43d2@add-imports!) (begin (set! G43be@idsyn? (lambda (G45bd@x) (symbol? (G318a@syntax->datum G45bd@x)))) (set! G43c0@dup-error (lambda (G45bb@name) (G3184@syntax-violation 'import '"two imports with different bindings" G45bb@name))) (set! G43c2@merge-substs (lambda (G45a9@s G45aa@subst) ((lambda (G45ae@insert-to-subst) (begin (set! G45ae@insert-to-subst (lambda (G45af@a G45b0@subst) ((lambda (G45b3@name G45b4@label) ((lambda (G45b7@t) (if G45b7@t ((lambda (G45b9@x) (if (eq? (cdr G45b9@x) G45b4@label) G45b0@subst (G43c0@dup-error G45b3@name))) G45b7@t) (cons G45af@a G45b0@subst))) (assq G45b3@name G45b0@subst))) (car G45af@a) (cdr G45af@a)))) (if (null? G45a9@s) G45aa@subst (G45ae@insert-to-subst (car G45a9@s) (G43c2@merge-substs (cdr G45a9@s) G45aa@subst))))) '#f))) (set! G43c4@exclude* (lambda (G457f@sym* G4580@subst) ((lambda (G4584@exclude) (begin (set! G4584@exclude (lambda (G4599@sym G459a@subst) (if (null? G459a@subst) (G3184@syntax-violation 'import '"cannot rename unbound identifier" G4599@sym) (if (eq? G4599@sym (caar G459a@subst)) (values (cdar G459a@subst) (cdr G459a@subst)) ((lambda (G459d@a) (call-with-values (lambda () (G4584@exclude G4599@sym (cdr G459a@subst))) (lambda (G45a1@G459f G45a2@G45a0) ((lambda (G45a5@subst G45a6@old) (values G45a6@old (cons G459d@a G45a5@subst))) G45a2@G45a0 G45a1@G459f)))) (car G459a@subst)))))) (if (null? G457f@sym*) (values '() G4580@subst) (call-with-values (lambda () (G4584@exclude (car G457f@sym*) G4580@subst)) (lambda (G4587@G4585 G4588@G4586) ((lambda (G458b@subst G458c@old) (call-with-values (lambda () (G43c4@exclude* (cdr G457f@sym*) G458b@subst)) (lambda (G4591@G458f G4592@G4590) ((lambda (G4595@subst G4596@old*) (values (cons G458c@old G4596@old*) G4595@subst)) G4592@G4590 G4591@G458f)))) G4588@G4586 G4587@G4585)))))) '#f))) (set! G43c6@find* (lambda (G4577@sym* G4578@subst) (map (lambda (G457b@x) ((lambda (G457d@t) (if G457d@t (cdr G457d@t) (G3184@syntax-violation 'import '"cannot find identifier" G457b@x))) (assq G457b@x G4578@subst))) G4577@sym*))) (set! G43c8@rem* (lambda (G456f@sym* G4570@subst) ((letrec ((G4573@f (lambda (G4575@subst) (if (null? G4575@subst) '() (if (memq (caar G4575@subst) G456f@sym*) (G4573@f (cdr G4575@subst)) (cons (car G4575@subst) (G4573@f (cdr G4575@subst)))))))) G4573@f) G4570@subst))) (set! G43ca@remove-dups (lambda (G456d@ls) (if (null? G456d@ls) '() (if (memq (car G456d@ls) (cdr G456d@ls)) (G43ca@remove-dups (cdr G456d@ls)) (cons (car G456d@ls) (G43ca@remove-dups (cdr G456d@ls))))))) (set! G43cc@parse-library-name (lambda (G4487@spec) ((lambda (G448a@subversion? G448c@subversion-pred G448e@version-pred) (begin (set! G448a@subversion? (lambda (G4569@x) ((lambda (G456b@x) (if (integer? G456b@x) (if (exact? G456b@x) (begin '#f (>= G456b@x '0)) '#f) '#f)) (G318a@syntax->datum G4569@x)))) (set! G448c@subversion-pred (lambda (G4509@x*) ((lambda (G450b@t) ((lambda (G450d@ls/false) (if (if G450d@ls/false (begin '#f (apply (lambda (G450f@n) (G448a@subversion? G450f@n)) G450d@ls/false)) '#f) (apply (lambda (G4511@n) (lambda (G4513@x) (= G4513@x (G318a@syntax->datum G4511@n)))) G450d@ls/false) ((lambda (G4515@t) ((lambda (G4517@ls/false) (if (if G4517@ls/false (begin '#f (apply (lambda (G4519@p? G451a@sub*) (eq? (G318a@syntax->datum G4519@p?) 'and)) G4517@ls/false)) '#f) (apply (lambda (G451d@p? G451e@sub*) ((lambda (G4521@p*) (lambda (G4523@x) (for-all (lambda (G4525@p) (G4525@p G4523@x)) G4521@p*))) (map G448c@subversion-pred G451e@sub*))) G4517@ls/false) ((lambda (G4527@t) ((lambda (G4529@ls/false) (if (if G4529@ls/false (begin '#f (apply (lambda (G452b@p? G452c@sub*) (eq? (G318a@syntax->datum G452b@p?) 'or)) G4529@ls/false)) '#f) (apply (lambda (G452f@p? G4530@sub*) ((lambda (G4533@p*) (lambda (G4535@x) (exists (lambda (G4537@p) (G4537@p G4535@x)) G4533@p*))) (map G448c@subversion-pred G4530@sub*))) G4529@ls/false) ((lambda (G4539@t) ((lambda (G453b@ls/false) (if (if G453b@ls/false (begin '#f (apply (lambda (G453d@p? G453e@sub) (eq? (G318a@syntax->datum G453d@p?) 'not)) G453b@ls/false)) '#f) (apply (lambda (G4541@p? G4542@sub) ((lambda (G4545@p) (lambda (G4547@x) (not (G4545@p G4547@x)))) (G448c@subversion-pred G4542@sub))) G453b@ls/false) ((lambda (G4549@t) ((lambda (G454b@ls/false) (if (if G454b@ls/false (begin '#f (apply (lambda (G454d@p? G454e@n) (if (eq? (G318a@syntax->datum G454d@p?) '<=) (begin '#f (G448a@subversion? G454e@n)) '#f)) G454b@ls/false)) '#f) (apply (lambda (G4551@p? G4552@n) (lambda (G4555@x) (<= G4555@x (G318a@syntax->datum G4552@n)))) G454b@ls/false) ((lambda (G4557@t) ((lambda (G4559@ls/false) (if (if G4559@ls/false (begin '#f (apply (lambda (G455b@p? G455c@n) (if (eq? (G318a@syntax->datum G455b@p?) '>=) (begin '#f (G448a@subversion? G455c@n)) '#f)) G4559@ls/false)) '#f) (apply (lambda (G455f@p? G4560@n) (lambda (G4563@x) (>= G4563@x (G318a@syntax->datum G4560@n)))) G4559@ls/false) ((lambda (G4565@t) ((lambda (G4567@ls/false) (if G4567@ls/false (apply (lambda () (G3184@syntax-violation 'import '"invalid sub-version spec" G4487@spec G4509@x*)) G4567@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G4565@t))) (G3091@syntax-dispatch G4565@t '_))) G4557@t))) (G3091@syntax-dispatch G4557@t '(any any)))) G4549@t))) (G3091@syntax-dispatch G4549@t '(any any)))) G4539@t))) (G3091@syntax-dispatch G4539@t '(any any)))) G4527@t))) (G3091@syntax-dispatch G4527@t '(any . each-any)))) G4515@t))) (G3091@syntax-dispatch G4515@t '(any . each-any)))) G450b@t))) (G3091@syntax-dispatch G450b@t 'any))) G4509@x*))) (set! G448e@version-pred (lambda (G44b9@x*) ((lambda (G44bb@t) ((lambda (G44bd@ls/false) (if G44bd@ls/false (apply (lambda () (lambda (G44bf@x) '#t)) G44bd@ls/false) ((lambda (G44c1@t) ((lambda (G44c3@ls/false) (if (if G44c3@ls/false (begin '#f (apply (lambda (G44c5@c G44c6@ver*) (eq? (G318a@syntax->datum G44c5@c) 'and)) G44c3@ls/false)) '#f) (apply (lambda (G44c9@c G44ca@ver*) ((lambda (G44cd@p*) (lambda (G44cf@x) (for-all (lambda (G44d1@p) (G44d1@p G44cf@x)) G44cd@p*))) (map G448e@version-pred G44ca@ver*))) G44c3@ls/false) ((lambda (G44d3@t) ((lambda (G44d5@ls/false) (if (if G44d5@ls/false (begin '#f (apply (lambda (G44d7@c G44d8@ver*) (eq? (G318a@syntax->datum G44d7@c) 'or)) G44d5@ls/false)) '#f) (apply (lambda (G44db@c G44dc@ver*) ((lambda (G44df@p*) (lambda (G44e1@x) (exists (lambda (G44e3@p) (G44e3@p G44e1@x)) G44df@p*))) (map G448e@version-pred G44dc@ver*))) G44d5@ls/false) ((lambda (G44e5@t) ((lambda (G44e7@ls/false) (if (if G44e7@ls/false (begin '#f (apply (lambda (G44e9@c G44ea@ver) (eq? (G318a@syntax->datum G44e9@c) 'not)) G44e7@ls/false)) '#f) (apply (lambda (G44ed@c G44ee@ver) ((lambda (G44f1@p) (lambda (G44f3@x) (not (G44f1@p G44f3@x)))) (G448e@version-pred G44ee@ver))) G44e7@ls/false) ((lambda (G44f5@t) ((lambda (G44f7@ls/false) (if G44f7@ls/false (apply (lambda (G44f9@sub*) ((lambda (G44fb@p*) (lambda (G44fd@x) ((letrec ((G44ff@f (lambda (G4501@p* G4502@x) (if (null? G4501@p*) '#t (if (null? G4502@x) '#f (if ((car G4501@p*) (car G4502@x)) (begin '#f (G44ff@f (cdr G4501@p*) (cdr G4502@x))) '#f)))))) G44ff@f) G44fb@p* G44fd@x))) (map G448c@subversion-pred G44f9@sub*))) G44f7@ls/false) ((lambda (G4505@t) ((lambda (G4507@ls/false) (if G4507@ls/false (apply (lambda () (G3184@syntax-violation 'import '"invalid version spec" G4487@spec G44b9@x*)) G4507@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G4505@t))) (G3091@syntax-dispatch G4505@t '_))) G44f5@t))) (G3091@syntax-dispatch G44f5@t 'each-any))) G44e5@t))) (G3091@syntax-dispatch G44e5@t '(any any)))) G44d3@t))) (G3091@syntax-dispatch G44d3@t '(any . each-any)))) G44c1@t))) (G3091@syntax-dispatch G44c1@t '(any . each-any)))) G44bb@t))) (G3091@syntax-dispatch G44bb@t '()))) G44b9@x*))) ((letrec ((G448f@f (lambda (G4491@x) ((lambda (G4493@t) ((lambda (G4495@ls/false) (if G4495@ls/false (apply (lambda (G4497@version-spec*) (values '() (G448e@version-pred G4497@version-spec*))) G4495@ls/false) ((lambda (G4499@t) ((lambda (G449b@ls/false) (if (if G449b@ls/false (begin '#f (apply (lambda (G449d@x G449e@x*) (G43be@idsyn? G449d@x)) G449b@ls/false)) '#f) (apply (lambda (G44a1@x G44a2@x*) (call-with-values (lambda () (G448f@f G44a2@x*)) (lambda (G44a7@G44a5 G44a8@G44a6) ((lambda (G44ab@pred G44ac@name) (values (cons (G318a@syntax->datum G44a1@x) G44ac@name) G44ab@pred)) G44a8@G44a6 G44a7@G44a5)))) G449b@ls/false) ((lambda (G44af@t) ((lambda (G44b1@ls/false) (if G44b1@ls/false (apply (lambda () (values '() (lambda (G44b3@x) '#t))) G44b1@ls/false) ((lambda (G44b5@t) ((lambda (G44b7@ls/false) (if G44b7@ls/false (apply (lambda () (G3184@syntax-violation '#f '"invalid import spec" G4487@spec)) G44b7@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G44b5@t))) (G3091@syntax-dispatch G44b5@t '_))) G44af@t))) (G3091@syntax-dispatch G44af@t '()))) G4499@t))) (G3091@syntax-dispatch G4499@t '(any . any)))) G4493@t))) (G3091@syntax-dispatch G4493@t '(each-any)))) G4491@x)))) G448f@f) G4487@spec))) '#f '#f '#f))) (set! G43ce@import-library (lambda (G4479@spec*) (call-with-values (lambda () (G43cc@parse-library-name G4479@spec*)) (lambda (G447d@G447b G447e@G447c) ((lambda (G4481@pred G4482@name) (begin (if (null? G4482@name) (G3184@syntax-violation 'import '"empty library name" G4479@spec*) (void)) ((lambda (G4485@lib) (begin (if (not G4485@lib) (G3184@syntax-violation 'import '"cannot find library with required name" G4482@name) (void)) (if (not (G4481@pred (G2c14@G2a7a@library-version G4485@lib))) (G3184@syntax-violation 'import '"library does not satisfy version specification" G4479@spec* G4485@lib) (void)) ((G3104@imp-collector) G4485@lib) (G2c18@G2a82@library-subst G4485@lib))) (G2c3c@G2aca@find-library-by-name G4482@name)))) G447e@G447c G447d@G447b))))) (set! G43d0@get-import (lambda (G43eb@spec) ((lambda (G43ed@t) ((lambda (G43ef@ls/false) (if (if G43ef@ls/false (begin '#f (apply (lambda (G43f1@x G43f2@x*) (not (memq (G318a@syntax->datum G43f1@x) '(for rename except only prefix library)))) G43ef@ls/false)) '#f) (apply (lambda (G43f5@x G43f6@x*) (G43ce@import-library (cons G43f5@x G43f6@x*))) G43ef@ls/false) ((lambda (G43f9@t) ((lambda (G43fb@ls/false) (if (if G43fb@ls/false (begin '#f (apply (lambda (G43fd@rename G43fe@isp G43ff@old* G4400@new*) (if (eq? (G318a@syntax->datum G43fd@rename) 'rename) (if (for-all G43be@idsyn? G43ff@old*) (begin '#f (for-all G43be@idsyn? G4400@new*)) '#f) '#f)) G43fb@ls/false)) '#f) (apply (lambda (G4405@rename G4406@isp G4407@old* G4408@new*) ((lambda (G440d@subst G440e@old* G440f@new*) ((lambda (G4413@old-label*) ((lambda (G4415@subst) (G43c2@merge-substs (map cons G440f@new* G4413@old-label*) G4415@subst)) (G43c8@rem* G440e@old* G440d@subst))) (G43c6@find* G440e@old* G440d@subst))) (G43d0@get-import G4406@isp) (map G318a@syntax->datum G4407@old*) (map G318a@syntax->datum G4408@new*))) G43fb@ls/false) ((lambda (G4417@t) ((lambda (G4419@ls/false) (if (if G4419@ls/false (begin '#f (apply (lambda (G441b@except G441c@isp G441d@sym*) (if (eq? (G318a@syntax->datum G441b@except) 'except) (begin '#f (for-all G43be@idsyn? G441d@sym*)) '#f)) G4419@ls/false)) '#f) (apply (lambda (G4421@except G4422@isp G4423@sym*) ((lambda (G4427@subst) (G43c8@rem* (map G318a@syntax->datum G4423@sym*) G4427@subst)) (G43d0@get-import G4422@isp))) G4419@ls/false) ((lambda (G4429@t) ((lambda (G442b@ls/false) (if (if G442b@ls/false (begin '#f (apply (lambda (G442d@only G442e@isp G442f@sym*) (if (eq? (G318a@syntax->datum G442d@only) 'only) (begin '#f (for-all G43be@idsyn? G442f@sym*)) '#f)) G442b@ls/false)) '#f) (apply (lambda (G4433@only G4434@isp G4435@sym*) ((lambda (G4439@subst G443a@sym*) ((lambda (G443d@sym*) ((lambda (G443f@lab*) (map cons G443d@sym* G443f@lab*)) (G43c6@find* G443d@sym* G4439@subst))) (G43ca@remove-dups G443a@sym*))) (G43d0@get-import G4434@isp) (map G318a@syntax->datum G4435@sym*))) G442b@ls/false) ((lambda (G4441@t) ((lambda (G4443@ls/false) (if (if G4443@ls/false (begin '#f (apply (lambda (G4445@prefix G4446@isp G4447@p) (if (eq? (G318a@syntax->datum G4445@prefix) 'prefix) (begin '#f (G43be@idsyn? G4447@p)) '#f)) G4443@ls/false)) '#f) (apply (lambda (G444b@prefix G444c@isp G444d@p) ((lambda (G4451@subst G4452@prefix) (map (lambda (G4455@x) (cons (string->symbol (string-append G4452@prefix (symbol->string (car G4455@x)))) (cdr G4455@x))) G4451@subst)) (G43d0@get-import G444c@isp) (symbol->string (G318a@syntax->datum G444d@p)))) G4443@ls/false) ((lambda (G4457@t) ((lambda (G4459@ls/false) (if (if G4459@ls/false (begin '#f (apply (lambda (G445b@library G445c@spec*) (eq? (G318a@syntax->datum G445b@library) 'library)) G4459@ls/false)) '#f) (apply (lambda (G445f@library G4460@spec*) (G43ce@import-library G4460@spec*)) G4459@ls/false) ((lambda (G4463@t) ((lambda (G4465@ls/false) (if (if G4465@ls/false (begin '#f (apply (lambda (G4467@for G4468@isp G4469@rest) (eq? (G318a@syntax->datum G4467@for) 'for)) G4465@ls/false)) '#f) (apply (lambda (G446d@for G446e@isp G446f@rest) (G43d0@get-import G446e@isp)) G4465@ls/false) ((lambda (G4473@t) ((lambda (G4475@ls/false) (if G4475@ls/false (apply (lambda (G4477@spec) (G3184@syntax-violation 'import '"invalid import spec" G4477@spec)) G4475@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G4473@t))) (G3091@syntax-dispatch G4473@t 'any))) G4463@t))) (G3091@syntax-dispatch G4463@t '(any any . any)))) G4457@t))) (G3091@syntax-dispatch G4457@t '(any each-any)))) G4441@t))) (G3091@syntax-dispatch G4441@t '(any any any)))) G4429@t))) (G3091@syntax-dispatch G4429@t '(any any . each-any)))) G4417@t))) (G3091@syntax-dispatch G4417@t '(any any . each-any)))) G43f9@t))) (G3091@syntax-dispatch G43f9@t '(any any . #(each (any any)))))) G43ed@t))) (G3091@syntax-dispatch G43ed@t '(any . each-any)))) G43eb@spec))) (set! G43d2@add-imports! (lambda (G43db@imp G43dc@h) ((lambda (G43df@subst) (for-each (lambda (G43e1@x) ((lambda (G43e3@name G43e4@label) ((lambda (G43e7@t) (if G43e7@t ((lambda (G43e9@l) (if (not (eq? G43e9@l G43e4@label)) (G43c0@dup-error G43e3@name) (void))) G43e7@t) (hashtable-set! G43dc@h G43e3@name G43e4@label))) (hashtable-ref G43dc@h G43e3@name '#f))) (car G43e1@x) (cdr G43e1@x))) G43df@subst)) (G43d0@get-import G43db@imp)))) (lambda (G43d3@imp*) ((letrec ((G43d5@f (lambda (G43d7@imp* G43d8@h) (if (null? G43d7@imp*) (hashtable-entries G43d8@h) (begin (G43d2@add-imports! (car G43d7@imp*) G43d8@h) (G43d5@f (cdr G43d7@imp*) G43d8@h)))))) G43d5@f) G43d3@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G30fc@make-top-rib (lambda (G45bf@names G45c0@labels) ((lambda (G45c3@rib) (begin (vector-for-each (lambda (G45c5@name G45c6@label) (begin (if (not (symbol? G45c5@name)) (error 'make-top-rib '"BUG: not a symbol" G45c5@name) (void)) (G2dff@extend-rib/nc! G45c3@rib (G2e18@make-stx G45c5@name G2dc2@top-mark* '() '()) G45c6@label))) G45bf@names G45c0@labels) G45c3@rib)) (G2df9@make-cache-rib)))) (set! G30fe@make-collector (lambda () ((lambda (G45c9@ls) (lambda G45cd ((lambda (G45ce) (if (= G45ce '0) (apply (lambda () G45c9@ls) G45cd) (if (= G45ce '1) (apply (lambda (G45cb@x) (set! G45c9@ls (G2dbb@set-cons G45cb@x G45c9@ls))) G45cd) (error 'apply '"invalid arg count")))) (length G45cd)))) '()))) (set! G3100@inv-collector (G29a0@G28ab@make-parameter (lambda G45cf@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G45d1@x) (begin (if (not (procedure? G45d1@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G45d1@x) (void)) G45d1@x)))) (set! G3102@vis-collector (G29a0@G28ab@make-parameter (lambda G45d3@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G45d5@x) (begin (if (not (procedure? G45d5@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G45d5@x) (void)) G45d5@x)))) (set! G3104@imp-collector (G29a0@G28ab@make-parameter (lambda G45d7@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G45d9@x) (begin (if (not (procedure? G45d9@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G45d9@x) (void)) G45d9@x)))) (set! G3106@chi-library-internal (lambda (G45db@e* G45dc@rib G45dd@top?) (call-with-values (lambda () (G30f0@chi-body* G45db@e* '() '() '() '() '() '() '() G45dc@rib G45dd@top?)) (lambda (G45e9@G45e1 G45ea@G45e2 G45eb@G45e3 G45ec@G45e4 G45ed@G45e5 G45ee@G45e6 G45ef@G45e7 G45f0@G45e8) ((lambda (G45f9@exp* G45fa@_kwd* G45fb@mod** G45fc@rhs* G45fd@lex* G45fe@mr G45ff@r G4600@e*) (values (append (apply append (reverse G45fb@mod**)) G4600@e*) G45ff@r G45fe@mr (reverse G45fd@lex*) (reverse G45fc@rhs*) G45f9@exp*)) G45f0@G45e8 G45ef@G45e7 G45ee@G45e6 G45ed@G45e5 G45ec@G45e4 G45eb@G45e3 G45ea@G45e2 G45e9@G45e1))))) (set! G3108@chi-interaction-expr (lambda (G4609@e G460a@rib G460b@r) (call-with-values (lambda () (G30f0@chi-body* (list G4609@e) G460b@r G460b@r '() '() '() '() '() G460a@rib '#t)) (lambda (G4617@G460f G4618@G4610 G4619@G4611 G461a@G4612 G461b@G4613 G461c@G4614 G461d@G4615 G461e@G4616) ((lambda (G4627@_exp* G4628@_kwd* G4629@mod** G462a@rhs* G462b@lex* G462c@mr G462d@r G462e@e*) ((lambda (G4637@e*) ((lambda (G4639@e) (values G4639@e G462d@r)) (if (null? G4637@e*) (G2daa@G2d1c@build-void) (if (null? (cdr G4637@e*)) (car G4637@e*) (G2da9@G2d1a@build-sequence '#f G4637@e*))))) (G30c3@expand-interaction-rhs*/init* (reverse G462b@lex*) (reverse G462a@rhs*) (append (apply append (reverse G4629@mod**)) G462e@e*) G462d@r G462c@mr))) G461e@G4616 G461d@G4615 G461c@G4614 G461b@G4613 G461a@G4612 G4619@G4611 G4618@G4610 G4617@G460f))))) (set! G310a@library-body-expander (lambda (G463b@name G463c@main-exp* G463d@imp* G463e@b* G463f@top?) ((lambda (G4646@itc) (begin (set! G4646@itc (G30fe@make-collector)) ((lambda (G464b@G4647@imp-collector G464c@G4648@top-level-context G464d@G4649@imp-collector G464e@G464a@top-level-context) ((lambda (G4653@swap) (dynamic-wind G4653@swap (lambda () (call-with-values (lambda () (G30fa@parse-import-spec* G463d@imp*)) (lambda (G4657@G4655 G4658@G4656) ((lambda (G465b@subst-labels G465c@subst-names) ((lambda (G465f@rib) ((lambda (G4662@wrap) (begin (set! G4662@wrap (lambda (G46ce@x) (G2e18@make-stx G46ce@x G2dc2@top-mark* (list G465f@rib) '()))) ((lambda (G4663@b* G4664@main-exp* G4665@rtc G4666@vtc) ((lambda (G466f@G466b@inv-collector G4670@G466c@vis-collector G4671@G466d@inv-collector G4672@G466e@vis-collector) ((lambda (G4677@swap) (dynamic-wind G4677@swap (lambda () (call-with-values (lambda () (G3106@chi-library-internal G4663@b* G465f@rib G463f@top?)) (lambda (G467f@G4679 G4680@G467a G4681@G467b G4682@G467c G4683@G467d G4684@G467e) ((lambda (G468b@internal-exp* G468c@rhs* G468d@lex* G468e@mr G468f@r G4690@init*) (call-with-values (lambda () (G30f4@parse-exports (append G4664@main-exp* G468b@internal-exp*))) (lambda (G4699@G4697 G469a@G4698) ((lambda (G469d@exp-id* G469e@exp-name*) (begin (G2e03@seal-rib! G465f@rib) ((lambda (G46a1@init*) ((lambda (G46a3@rhs*) ((lambda () (begin (G2e05@unseal-rib! G465f@rib) ((lambda (G46a5@loc* G46a6@export-subst) ((lambda (G46aa@errstr) (begin (set! G46aa@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G316e@make-export-env/macros G468d@lex* G46a5@loc* G468f@r)) (lambda (G46ae@G46ab G46af@G46ac G46b0@G46ad) ((lambda (G46b4@macro* G46b5@global* G46b6@export-env) (begin (for-each (lambda (G46ba@s) ((lambda (G46bc@name G46bd@label) ((lambda (G46c0@p) (if G46c0@p ((lambda (G46c2@b) ((lambda (G46c4@type) (if (eq? G46c4@type 'mutable) (G3184@syntax-violation 'export G46aa@errstr G46bc@name) (void))) (car G46c2@b))) (cdr G46c0@p)) (void))) (assq G46bd@label G46b6@export-env))) (car G46ba@s) (cdr G46ba@s))) G46a6@export-subst) ((lambda (G46c6@invoke-body G46c7@invoke-definitions) (values (G4646@itc) (G4665@rtc) (G4666@vtc) (G2da9@G2d1a@build-sequence '#f (append G46c7@invoke-definitions (list G46c6@invoke-body))) G46b4@macro* G46a6@export-subst G46b6@export-env)) (G2dac@G2d20@build-letrec* '#f G468d@lex* G46a3@rhs* (G316a@build-exports G46b5@global* G46a1@init*)) (map G2da5@G2c4a@build-global-define (map cdr G46b5@global*))))) G46b0@G46ad G46af@G46ac G46ae@G46ab))))) '#f)) (map G2dc8@gen-global G468d@lex*) (G316c@make-export-subst G469e@exp-name* G469d@exp-id*)))))) (G30c5@chi-rhs* G468c@rhs* G468f@r G468e@mr))) (G30b1@chi-expr* G4690@init* G468f@r G468e@mr)))) G469a@G4698 G4699@G4697)))) G4684@G467e G4683@G467d G4682@G467c G4681@G467b G4680@G467a G467f@G4679)))) G4677@swap)) (lambda () (begin ((lambda (G46ca@t) (begin (G466f@G466b@inv-collector G4671@G466d@inv-collector) (set! G4671@G466d@inv-collector G46ca@t))) (G466f@G466b@inv-collector)) ((lambda (G46cc@t) (begin (G4670@G466c@vis-collector G4672@G466e@vis-collector) (set! G4672@G466e@vis-collector G46cc@t))) (G4670@G466c@vis-collector)))))) G3100@inv-collector G3102@vis-collector G4665@rtc G4666@vtc)) (map G4662@wrap G463e@b*) (map G4662@wrap G463c@main-exp*) (G30fe@make-collector) (G30fe@make-collector)))) '#f)) (G30fc@make-top-rib G465c@subst-names G465b@subst-labels))) G4658@G4656 G4657@G4655)))) G4653@swap)) (lambda () (begin ((lambda (G46d0@t) (begin (G464b@G4647@imp-collector G464d@G4649@imp-collector) (set! G464d@G4649@imp-collector G46d0@t))) (G464b@G4647@imp-collector)) ((lambda (G46d2@t) (begin (G464c@G4648@top-level-context G464e@G464a@top-level-context) (set! G464e@G464a@top-level-context G46d2@t))) (G464c@G4648@top-level-context)))))) G3104@imp-collector G3192@top-level-context G4646@itc '#f))) '#f))) (set! G310c@core-library-expander (lambda (G46d4@e G46d5@verify-name) (call-with-values (lambda () (G30f8@parse-library G46d4@e)) (lambda (G46dc@G46d8 G46dd@G46d9 G46de@G46da G46df@G46db) ((lambda (G46e4@b* G46e5@imp* G46e6@exp* G46e7@name*) (call-with-values (lambda () (G30f6@parse-library-name G46e7@name*)) (lambda (G46ee@G46ec G46ef@G46ed) ((lambda (G46f2@ver G46f3@name) (begin (G46d5@verify-name G46f3@name) (call-with-values (lambda () (G310a@library-body-expander G46f3@name G46e6@exp* G46e5@imp* G46e4@b* '#f)) (lambda (G46fd@G46f6 G46fe@G46f7 G46ff@G46f8 G4700@G46f9 G4701@G46fa G4702@G46fb G4703@G46fc) ((lambda (G470b@export-env G470c@export-subst G470d@visit-code G470e@invoke-code G470f@visit-req* G4710@invoke-req* G4711@imp*) (values G46f3@name G46f2@ver G4711@imp* G4710@invoke-req* G470f@visit-req* G470e@invoke-code G470d@visit-code G470c@export-subst G470b@export-env)) G4703@G46fc G4702@G46fb G4701@G46fa G4700@G46f9 G46ff@G46f8 G46fe@G46f7 G46fd@G46f6))))) G46ef@G46ed G46ee@G46ec)))) G46df@G46db G46de@G46da G46dd@G46d9 G46dc@G46d8))))) (set! G310e@parse-top-level-program (lambda (G4719@e*) ((lambda (G471b@t) ((lambda (G471d@ls/false) (if (if G471d@ls/false (begin '#f (apply (lambda (G471f@import G4720@imp* G4721@b*) (eq? (G318a@syntax->datum G471f@import) 'import)) G471d@ls/false)) '#f) (apply (lambda (G4725@import G4726@imp* G4727@b*) (values G4726@imp* G4727@b*)) G471d@ls/false) ((lambda (G472b@t) ((lambda (G472d@ls/false) (if (if G472d@ls/false (begin '#f (apply (lambda (G472f@import G4730@x G4731@y) (eq? (G318a@syntax->datum G472f@import) 'import)) G472d@ls/false)) '#f) (apply (lambda (G4735@import G4736@x G4737@y) (G3184@syntax-violation 'expander '"invalid syntax of top-level program" (G2e48@syntax-car G4719@e*))) G472d@ls/false) ((lambda (G473b@t) ((lambda (G473d@ls/false) (if G473d@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G473d@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G473b@t))) (G3091@syntax-dispatch G473b@t '_))) G472b@t))) (G3091@syntax-dispatch G472b@t '((any . any) . any)))) G471b@t))) (G3091@syntax-dispatch G471b@t '((any . each-any) . each-any)))) G4719@e*))) (set! G3110@top-level-expander (lambda (G473f@e*) (call-with-values (lambda () (G310e@parse-top-level-program G473f@e*)) (lambda (G4743@G4741 G4744@G4742) ((lambda (G4747@b* G4748@imp*) (call-with-values (lambda () (G310a@library-body-expander '() '() G4748@imp* G4747@b* '#t)) (lambda (G4752@G474b G4753@G474c G4754@G474d G4755@G474e G4756@G474f G4757@G4750 G4758@G4751) ((lambda (G4760@export-env G4761@export-subst G4762@visit-code G4763@invoke-code G4764@visit-req* G4765@invoke-req* G4766@imp*) (values G4765@invoke-req* G4763@invoke-code)) G4758@G4751 G4757@G4750 G4756@G474f G4755@G474e G4754@G474d G4753@G474c G4752@G474b)))) G4744@G4742 G4743@G4741))))) (set! G3116@G3111 (make-record-type-descriptor 'env '#f 'G3114 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G3118@G3113 '#f) (set! G311a@G3112 (make-record-constructor-descriptor G3116@G3111 '#f G3118@G3113)) (set! G311f@env? (record-predicate G3116@G3111)) (set! G3121@make-env (record-constructor G311a@G3112)) (set! G3123@env-names (record-accessor G3116@G3111 '0)) (set! G3125@env-labels (record-accessor G3116@G3111 '1)) (set! G3127@env-itc (record-accessor G3116@G3111 '2)) (set! G3129@set-env-names! (record-mutator G3116@G3111 '0)) (set! G312b@set-env-labels! (record-mutator G3116@G3111 '1)) (set! G312d@set-env-itc! (record-mutator G3116@G3111 '2)) (set! G312f@rp (G299d@G28a5@make-record-printer 'env (lambda (G476e@x G476f@p G4770@wr) (display '"#<environment>" G476f@p)))) (set! G3135@G3130 (make-record-type-descriptor 'interaction-env '#f 'G3133 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3137@G3132 '#f) (set! G3139@G3131 (make-record-constructor-descriptor G3135@G3130 '#f G3137@G3132)) (set! G313e@interaction-env? (record-predicate G3135@G3130)) (set! G3140@make-interaction-env (record-constructor G3139@G3131)) (set! G3142@interaction-env-rib (record-accessor G3135@G3130 '0)) (set! G3144@interaction-env-r (record-accessor G3135@G3130 '1)) (set! G3146@interaction-env-locs (record-accessor G3135@G3130 '2)) (set! G3148@set-interaction-env-rib! (record-mutator G3135@G3130 '0)) (set! G314a@set-interaction-env-r! (record-mutator G3135@G3130 '1)) (set! G314c@set-interaction-env-locs! (record-mutator G3135@G3130 '2)) (set! G314e@rp (G299d@G28a5@make-record-printer 'interaction-env (lambda (G4774@x G4775@p G4776@wr) (display '"#<environment>" G4775@p)))) (set! G3150@interaction-environment-symbols (lambda () (G3158@environment-symbols (G3190@interaction-environment)))) (set! G3152@environment-bindings (lambda (G477a@e) (vector->list (vector-map (lambda (G477c@name G477d@label) (G3154@parse-binding (cons G477c@name (G2c42@G2ad6@imported-label->binding G477d@label)))) (G3123@env-names G477a@e) (G3125@env-labels G477a@e))))) (set! G3154@parse-binding (lambda (G4780@b) (cons (car G4780@b) ((lambda (G4782@t) (if (memv G4782@t '(core-prim global)) 'procedure (if (memv G4782@t '(core-macro macro global-macro)) 'syntax (if (memv G4782@t '($core-rtd)) 'record (if (eq? (car G4780@b) (cadr G4780@b)) 'syntax 'unknown))))) (cadr G4780@b))))) (set! G3156@environment? (lambda (G4784@x) ((lambda (G4786@t) (if G4786@t G4786@t (begin '#f (G313e@interaction-env? G4784@x)))) (G311f@env? G4784@x)))) (set! G3158@environment-symbols (lambda (G4788@x) (if (G311f@env? G4788@x) (vector->list (G3123@env-names G4788@x)) (if (G313e@interaction-env? G4788@x) (map values (G2de3@rib-sym* (G3142@interaction-env-rib G4788@x))) (assertion-violation 'environment-symbols '"not an environment" G4788@x))))) (set! G315a@environment (lambda G478a@imp* ((lambda (G478c@itc) ((lambda (G4790@G478e@imp-collector G4791@G478f@imp-collector) ((lambda (G4794@swap) (dynamic-wind G4794@swap (lambda () (call-with-values (lambda () (G30fa@parse-import-spec* G478a@imp*)) (lambda (G4798@G4796 G4799@G4797) ((lambda (G479c@subst-labels G479d@subst-names) (G3121@make-env G479d@subst-names G479c@subst-labels G478c@itc)) G4799@G4797 G4798@G4796)))) G4794@swap)) (lambda () ((lambda (G47a0@t) (begin (G4790@G478e@imp-collector G4791@G478f@imp-collector) (set! G4791@G478f@imp-collector G47a0@t))) (G4790@G478e@imp-collector))))) G3104@imp-collector G478c@itc)) (G30fe@make-collector)))) (set! G315c@null-environment (lambda (G47a2@n) (begin (if (not (eqv? G47a2@n '5)) (assertion-violation 'null-environment '"not 5" G47a2@n) (void)) (G315a@environment '(psyntax null-environment-5))))) (set! G315e@scheme-report-environment (lambda (G47a4@n) (begin (if (not (eqv? G47a4@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G47a4@n) (void)) (G315a@environment '(psyntax scheme-report-environment-5))))) (set! G3160@expand (lambda (G47a6@x G47a7@env) (if (G311f@env? G47a7@env) ((lambda (G47aa@rib) ((lambda (G47ac@x G47ad@itc G47ae@rtc G47af@vtc) ((lambda (G47b4@x) (begin (G2e03@seal-rib! G47aa@rib) (values G47b4@x (G47ae@rtc)))) ((lambda (G47be@G47b6@top-level-context G47bf@G47b7@inv-collector G47c0@G47b8@vis-collector G47c1@G47b9@imp-collector G47c2@G47ba@top-level-context G47c3@G47bb@inv-collector G47c4@G47bc@vis-collector G47c5@G47bd@imp-collector) ((lambda (G47ce@swap) (dynamic-wind G47ce@swap (lambda () (G30b5@chi-expr G47ac@x '() '())) G47ce@swap)) (lambda () (begin ((lambda (G47d0@t) (begin (G47be@G47b6@top-level-context G47c2@G47ba@top-level-context) (set! G47c2@G47ba@top-level-context G47d0@t))) (G47be@G47b6@top-level-context)) ((lambda (G47d2@t) (begin (G47bf@G47b7@inv-collector G47c3@G47bb@inv-collector) (set! G47c3@G47bb@inv-collector G47d2@t))) (G47bf@G47b7@inv-collector)) ((lambda (G47d4@t) (begin (G47c0@G47b8@vis-collector G47c4@G47bc@vis-collector) (set! G47c4@G47bc@vis-collector G47d4@t))) (G47c0@G47b8@vis-collector)) ((lambda (G47d6@t) (begin (G47c1@G47b9@imp-collector G47c5@G47bd@imp-collector) (set! G47c5@G47bd@imp-collector G47d6@t))) (G47c1@G47b9@imp-collector)))))) G3192@top-level-context G3100@inv-collector G3102@vis-collector G3104@imp-collector '#f G47ae@rtc G47af@vtc G47ad@itc))) (G2e18@make-stx G47a6@x G2dc2@top-mark* (list G47aa@rib) '()) (G3127@env-itc G47a7@env) (G30fe@make-collector) (G30fe@make-collector))) (G30fc@make-top-rib (G3123@env-names G47a7@env) (G3125@env-labels G47a7@env))) (if (G313e@interaction-env? G47a7@env) ((lambda (G47d8@rib G47d9@r G47da@rtc) ((lambda (G47de@x) (call-with-values (lambda () ((lambda (G47ea@G47e2@top-level-context G47eb@G47e3@inv-collector G47ec@G47e4@vis-collector G47ed@G47e5@imp-collector G47ee@G47e6@top-level-context G47ef@G47e7@inv-collector G47f0@G47e8@vis-collector G47f1@G47e9@imp-collector) ((lambda (G47fa@swap) (dynamic-wind G47fa@swap (lambda () (G3108@chi-interaction-expr G47de@x G47d8@rib G47d9@r)) G47fa@swap)) (lambda () (begin ((lambda (G47fc@t) (begin (G47ea@G47e2@top-level-context G47ee@G47e6@top-level-context) (set! G47ee@G47e6@top-level-context G47fc@t))) (G47ea@G47e2@top-level-context)) ((lambda (G47fe@t) (begin (G47eb@G47e3@inv-collector G47ef@G47e7@inv-collector) (set! G47ef@G47e7@inv-collector G47fe@t))) (G47eb@G47e3@inv-collector)) ((lambda (G4800@t) (begin (G47ec@G47e4@vis-collector G47f0@G47e8@vis-collector) (set! G47f0@G47e8@vis-collector G4800@t))) (G47ec@G47e4@vis-collector)) ((lambda (G4802@t) (begin (G47ed@G47e5@imp-collector G47f1@G47e9@imp-collector) (set! G47f1@G47e9@imp-collector G4802@t))) (G47ed@G47e5@imp-collector)))))) G3192@top-level-context G3100@inv-collector G3102@vis-collector G3104@imp-collector G47a7@env G47da@rtc (G30fe@make-collector) (G30fe@make-collector))) (lambda (G4804@G47e0 G4805@G47e1) ((lambda (G4808@r^ G4809@e) (begin (G314a@set-interaction-env-r! G47a7@env G4808@r^) (values G4809@e (G47da@rtc)))) G4805@G47e1 G4804@G47e0)))) (G2e18@make-stx G47a6@x G2dc2@top-mark* (list G47d8@rib) '()))) (G3142@interaction-env-rib G47a7@env) (G3144@interaction-env-r G47a7@env) (G30fe@make-collector)) (assertion-violation 'expand '"not an environment" G47a7@env))))) (set! G3162@eval (lambda (G480c@x G480d@env) (begin (if (not (G3156@environment? G480d@env)) (error 'eval '"not an environment" G480d@env) (void)) (call-with-values (lambda () (G3160@expand G480c@x G480d@env)) (lambda (G4812@G4810 G4813@G4811) ((lambda (G4816@invoke-req* G4817@x) (begin (for-each G2c43@G2ad8@invoke-library G4816@invoke-req*) (eval-core (G2a04@G29ac@expanded->core G4817@x)))) G4813@G4811 G4812@G4810)))))) (set! G3164@library-expander (lambda G487f ((lambda (G4880) (if (= G4880 '3) (apply (lambda (G481a@x G481b@filename G481c@verify-name) ((lambda (G4821@build-visit-code G4823@visit!) (begin (set! G4821@build-visit-code (lambda (G486d@macro*) (if (null? G486d@macro*) (G2daa@G2d1c@build-void) (G2da9@G2d1a@build-sequence '#f (map (lambda (G486f@x) ((lambda (G4871@loc G4872@src) (list 'set! G4871@loc G4872@src)) (car G486f@x) (cddr G486f@x))) G486d@macro*))))) (set! G4823@visit! (lambda (G4865@macro*) (for-each (lambda (G4867@x) ((lambda (G4869@loc G486a@proc) (set-symbol-value! G4869@loc G486a@proc)) (car G4867@x) (cadr G4867@x))) G4865@macro*))) (call-with-values (lambda () (G310c@core-library-expander G481a@x G481c@verify-name)) (lambda (G482d@G4824 G482e@G4825 G482f@G4826 G4830@G4827 G4831@G4828 G4832@G4829 G4833@G482a G4834@G482b G4835@G482c) ((lambda (G483f@export-env G4840@export-subst G4841@macro* G4842@invoke-code G4843@vis* G4844@inv* G4845@imp* G4846@ver G4847@name) ((lambda (G4851@id G4852@name G4853@ver G4854@imp* G4855@vis* G4856@inv* G4857@visit-proc G4858@invoke-proc G4859@visit-code G485a@invoke-code) (begin (G2c41@G2ad4@install-library G4851@id G4852@name G4853@ver G4854@imp* G4855@vis* G4856@inv* G4840@export-subst G483f@export-env G4857@visit-proc G4858@invoke-proc G4859@visit-code G485a@invoke-code '#t G481b@filename) (values G4851@id G4852@name G4853@ver G4854@imp* G4855@vis* G4856@inv* G485a@invoke-code G4859@visit-code G4840@export-subst G483f@export-env))) (gensym) G4847@name G4846@ver (map G2c47@G2ae0@library-spec G4845@imp*) (map G2c47@G2ae0@library-spec G4843@vis*) (map G2c47@G2ae0@library-spec G4844@inv*) (lambda () (G4823@visit! G4841@macro*)) (lambda () (eval-core (G2a04@G29ac@expanded->core G4842@invoke-code))) (G4821@build-visit-code G4841@macro*) G4842@invoke-code)) G4835@G482c G4834@G482b G4833@G482a G4832@G4829 G4831@G4828 G4830@G4827 G482f@G4826 G482e@G4825 G482d@G4824))))) '#f '#f)) G487f) (if (= G4880 '2) (apply (lambda (G4875@x G4876@filename) (G3164@library-expander G4875@x G4876@filename (lambda (G4879@x) (values)))) G487f) (if (= G4880 '1) (apply (lambda (G487b@x) (G3164@library-expander G487b@x '#f (lambda (G487d@x) (values)))) G487f) (error 'apply '"invalid arg count"))))) (length G487f)))) (set! G3166@boot-library-expand (lambda (G4881@x) (call-with-values (lambda () (G3164@library-expander G4881@x)) (lambda (G488d@G4883 G488e@G4884 G488f@G4885 G4890@G4886 G4891@G4887 G4892@G4888 G4893@G4889 G4894@G488a G4895@G488b G4896@G488c) ((lambda (G48a1@export-env G48a2@export-subst G48a3@visit-code G48a4@invoke-code G48a5@inv* G48a6@vis* G48a7@imp* G48a8@ver G48a9@name G48aa@id) (values G48a9@name G48a4@invoke-code G48a2@export-subst G48a1@export-env)) G4896@G488c G4895@G488b G4894@G488a G4893@G4889 G4892@G4888 G4891@G4887 G4890@G4886 G488f@G4885 G488e@G4884 G488d@G4883))))) (set! G3168@rev-map-append (lambda (G48b5@f G48b6@ls G48b7@ac) (if (null? G48b6@ls) G48b7@ac (G3168@rev-map-append G48b5@f (cdr G48b6@ls) (cons (G48b5@f (car G48b6@ls)) G48b7@ac))))) (set! G316a@build-exports (lambda (G48bb@lex*+loc* G48bc@init*) (G2da9@G2d1a@build-sequence '#f (cons (G2daa@G2d1c@build-void) (G3168@rev-map-append (lambda (G48bf@x) (list 'set! (cdr G48bf@x) (car G48bf@x))) G48bb@lex*+loc* G48bc@init*))))) (set! G316c@make-export-subst (lambda (G48c1@name* G48c2@id*) (map (lambda (G48c5@name G48c6@id) ((lambda (G48c9@label) (begin (if (not G48c9@label) (G3184@syntax-violation '#f '"cannot export unbound identifier" G48c6@id) (void)) (cons G48c5@name G48c9@label))) (G2e68@id->label G48c6@id))) G48c1@name* G48c2@id*))) (set! G316e@make-export-env/macros (lambda (G48cb@lex* G48cc@loc* G48cd@r) ((lambda (G48d2@lookup) (begin (set! G48d2@lookup (lambda (G48ef@x) ((letrec ((G48f1@f (lambda (G48f3@x G48f4@lex* G48f5@loc*) (if (pair? G48f4@lex*) (if (eq? G48f3@x (car G48f4@lex*)) (car G48f5@loc*) (G48f1@f G48f3@x (cdr G48f4@lex*) (cdr G48f5@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G48f1@f) G48ef@x G48cb@lex* G48cc@loc*))) ((letrec ((G48d3@f (lambda (G48d5@r G48d6@env G48d7@global* G48d8@macro*) (if (null? G48d5@r) (values G48d6@env G48d7@global* G48d8@macro*) ((lambda (G48dd@x) ((lambda (G48df@label G48e0@b) ((lambda (G48e3@t) (if (memv G48e3@t '(lexical)) ((lambda (G48e5@v) ((lambda (G48e7@loc G48e8@type) (G48d3@f (cdr G48d5@r) (cons (cons* G48df@label G48e8@type G48e7@loc) G48d6@env) (cons (cons (G3021@lexical-var G48e5@v) G48e7@loc) G48d7@global*) G48d8@macro*)) (G48d2@lookup (G3021@lexical-var G48e5@v)) (if (G3023@lexical-mutable? G48e5@v) 'mutable 'global))) (G2e72@binding-value G48e0@b)) (if (memv G48e3@t '(local-macro)) ((lambda (G48eb@loc) (G48d3@f (cdr G48d5@r) (cons (cons* G48df@label 'global-macro G48eb@loc) G48d6@env) G48d7@global* (cons (cons G48eb@loc (G2e72@binding-value G48e0@b)) G48d8@macro*))) (gensym)) (if (memv G48e3@t '(local-macro!)) ((lambda (G48ed@loc) (G48d3@f (cdr G48d5@r) (cons (cons* G48df@label 'global-macro! G48ed@loc) G48d6@env) G48d7@global* (cons (cons G48ed@loc (G2e72@binding-value G48e0@b)) G48d8@macro*))) (gensym)) (if (memv G48e3@t '($rtd $module)) (G48d3@f (cdr G48d5@r) (cons G48dd@x G48d6@env) G48d7@global* G48d8@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2e70@binding-type G48e0@b) (G2e72@binding-value G48e0@b))))))) (G2e70@binding-type G48e0@b))) (car G48dd@x) (cdr G48dd@x))) (car G48d5@r)))))) G48d3@f) G48cd@r '() '() '()))) '#f))) (set! G3170@generate-temporaries (lambda (G48f9@ls) ((lambda (G48fb@t) ((lambda (G48fd@ls/false) (if G48fd@ls/false (apply (lambda (G48ff@ls) (map (lambda (G4901@x) (G2e18@make-stx ((lambda (G4903@x) (if ((lambda (G4905@t) (if G4905@t G4905@t (begin '#f (string? G4903@x)))) (symbol? G4903@x)) (gensym G4903@x) (gensym 't))) (G318a@syntax->datum G4901@x)) G2dc2@top-mark* '() '())) G48ff@ls)) G48fd@ls/false) ((lambda (G4907@t) ((lambda (G4909@ls/false) (if G4909@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G4909@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G4907@t))) (G3091@syntax-dispatch G4907@t '_))) G48fb@t))) (G3091@syntax-dispatch G48fb@t 'each-any))) G48f9@ls))) (set! G3172@free-identifier=? (lambda (G490b@x G490c@y) (if (G2e4e@id? G490b@x) (if (G2e4e@id? G490c@y) (G2e56@free-id=? G490b@x G490c@y) (assertion-violation 'free-identifier=? '"not an identifier" G490c@y)) (assertion-violation 'free-identifier=? '"not an identifier" G490b@x)))) (set! G3174@bound-identifier=? (lambda (G490f@x G4910@y) (if (G2e4e@id? G490f@x) (if (G2e4e@id? G4910@y) (G2e54@bound-id=? G490f@x G4910@y) (assertion-violation 'bound-identifier=? '"not an identifier" G4910@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G490f@x)))) (set! G3176@make-source-condition (lambda (G4913@x) ((lambda (G491d@G4918 G491f@G491a G4921@G4919 G4926@G4917 G4928@make-source-condition G492a@G4915 G492c@G4916 G492e@source-condition? G4930@source-filename G4932@source-character) (begin (set! G491d@G4918 (make-record-type-descriptor '&source-information &condition-rtd 'G491b '#f '#f '#((immutable file-name) (immutable character)))) (set! G491f@G491a '#f) (set! G4921@G4919 (make-record-constructor-descriptor G491d@G4918 &condition-rcd G491f@G491a)) (set! G4926@G4917 (record-predicate G491d@G4918)) (set! G4928@make-source-condition (record-constructor G4921@G4919)) (set! G492a@G4915 (record-accessor G491d@G4918 '0)) (set! G492c@G4916 (record-accessor G491d@G4918 '1)) (set! G492e@source-condition? (condition-predicate G491d@G4918)) (set! G4930@source-filename (condition-accessor G491d@G4918 G492a@G4915)) (set! G4932@source-character (condition-accessor G491d@G4918 G492c@G4916)) (if (pair? G4913@x) (G4928@make-source-condition (car G4913@x) (cdr G4913@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3178@extract-position-condition (lambda (G4933@x) (G3176@make-source-condition (G317a@expression-position G4933@x)))) (set! G317a@expression-position (lambda (G4935@x) (if (G2e16@stx? G4935@x) (begin '#f ((lambda (G4937@x) (if (G2995@G2895@annotation? G4937@x) (begin '#f (G2996@G2897@annotation-source G4937@x)) '#f)) (G2e1a@stx-expr G4935@x))) '#f))) (set! G317c@assertion-error (lambda (G4939@expr G493a@pos) (raise (condition (G4c59@G4b63@make-assertion-violation) (G4c67@G4b91@make-who-condition 'assert) (G4c39@G4afb@make-message-condition '"assertion failed") (G4c5f@G4b78@make-irritants-condition (list G4939@expr)) (G3176@make-source-condition G493a@pos))))) (set! G317e@syntax-error (lambda (G493d@x . G493f@args) (begin (if (not (for-all string? G493f@args)) (assertion-violation 'syntax-error '"invalid argument" G493f@args) (void)) (raise (condition (G4c39@G4afb@make-message-condition (if (null? G493f@args) '"invalid syntax" (apply string-append G493f@args))) (G4c81@G4be7@make-syntax-violation (G318a@syntax->datum G493d@x) '#f) (G3178@extract-position-condition G493d@x) (G3180@extract-trace G493d@x)))))) (set! G3180@extract-trace (lambda (G4941@x) ((lambda (G494a@G4945 G494c@G4947 G494e@G4946 G4953@G4944 G4955@make-trace G4957@G4943 G4959@trace? G495b@trace-form) (begin (set! G494a@G4945 (make-record-type-descriptor '&trace &condition-rtd 'G4948 '#f '#f '#((immutable form)))) (set! G494c@G4947 '#f) (set! G494e@G4946 (make-record-constructor-descriptor G494a@G4945 &condition-rcd G494c@G4947)) (set! G4953@G4944 (record-predicate G494a@G4945)) (set! G4955@make-trace (record-constructor G494e@G4946)) (set! G4957@G4943 (record-accessor G494a@G4945 '0)) (set! G4959@trace? (condition-predicate G494a@G4945)) (set! G495b@trace-form (condition-accessor G494a@G4945 G4957@G4943)) ((letrec ((G495c@f (lambda (G495e@x) (if (G2e16@stx? G495e@x) (apply condition (G4955@make-trace G495e@x) (map G495c@f (G2e20@stx-ae* G495e@x))) (if (G2995@G2895@annotation? G495e@x) (G4955@make-trace (G2e18@make-stx G495e@x '() '() '())) (condition)))))) G495c@f) G4941@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3182@syntax-violation* (lambda (G4960@who G4961@msg G4962@form G4963@condition-object) (begin (if (not (string? G4961@msg)) (assertion-violation 'syntax-violation '"message is not a string" G4961@msg) (void)) ((lambda (G4968@who) (raise (condition (if G4968@who (G4c67@G4b91@make-who-condition G4968@who) (condition)) (G4c39@G4afb@make-message-condition G4961@msg) G4963@condition-object (G3178@extract-position-condition G4962@form) (G3180@extract-trace G4962@form)))) (if ((lambda (G496a@t) (if G496a@t G496a@t (begin '#f (symbol? G4960@who)))) (string? G4960@who)) G4960@who (if (not G4960@who) ((lambda (G496c@t) ((lambda (G496e@ls/false) (if (if G496e@ls/false (begin '#f (apply (lambda (G4970@id) (G2e4e@id? G4970@id)) G496e@ls/false)) '#f) (apply (lambda (G4972@id) (G318a@syntax->datum G4972@id)) G496e@ls/false) ((lambda (G4974@t) ((lambda (G4976@ls/false) (if (if G4976@ls/false (begin '#f (apply (lambda (G4978@id G4979@rest) (G2e4e@id? G4978@id)) G4976@ls/false)) '#f) (apply (lambda (G497c@id G497d@rest) (G318a@syntax->datum G497c@id)) G4976@ls/false) ((lambda (G4980@t) ((lambda (G4982@ls/false) (if G4982@ls/false (apply (lambda () '#f) G4982@ls/false) (G3184@syntax-violation '#f '"invalid syntax" G4980@t))) (G3091@syntax-dispatch G4980@t '_))) G4974@t))) (G3091@syntax-dispatch G4974@t '(any . any)))) G496c@t))) (G3091@syntax-dispatch G496c@t 'any))) G4962@form) (assertion-violation 'syntax-violation '"invalid who argument" G4960@who))))))) (set! G3184@syntax-violation (lambda G4992 ((lambda (G4993) (if (= G4993 '3) (apply (lambda (G4984@who G4985@msg G4986@form) (G3184@syntax-violation G4984@who G4985@msg G4986@form '#f)) G4992) (if (= G4993 '4) (apply (lambda (G498a@who G498b@msg G498c@form G498d@subform) (G3182@syntax-violation* G498a@who G498b@msg G498c@form (G4c81@G4be7@make-syntax-violation (G318a@syntax->datum G498c@form) (G318a@syntax->datum G498d@subform)))) G4992) (error 'apply '"invalid arg count")))) (length G4992)))) (set! G3186@identifier? (lambda (G4994@x) (G2e4e@id? G4994@x))) (set! G3188@datum->syntax (lambda (G4996@id G4997@datum) (if (G2e4e@id? G4996@id) (G2e2c@datum->stx G4996@id G4997@datum) (assertion-violation 'datum->syntax '"not an identifier" G4996@id)))) (set! G318a@syntax->datum (lambda (G499a@x) (G2e64@stx->datum G499a@x))) (set! G318c@compile-r6rs-top-level (lambda (G499c@x*) (call-with-values (lambda () (G3110@top-level-expander G499c@x*)) (lambda (G49a0@G499e G49a1@G499f) ((lambda (G49a4@invoke-code G49a5@lib*) (lambda () (begin (for-each G2c43@G2ad8@invoke-library G49a5@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2a04@G29ac@expanded->core G49a4@invoke-code)) (void)) (eval-core (G2a04@G29ac@expanded->core G49a4@invoke-code))))) G49a1@G499f G49a0@G499e))))) (set! G318e@pre-compile-r6rs-top-level (lambda (G49a8@x*) (call-with-values (lambda () (G3110@top-level-expander G49a8@x*)) (lambda (G49ac@G49aa G49ad@G49ab) ((lambda (G49b0@invoke-code G49b1@lib*) (begin (for-each G2c43@G2ad8@invoke-library G49b1@lib*) (G299e@G28a7@compile-core (G2a04@G29ac@expanded->core G49b0@invoke-code)))) G49ad@G49ab G49ac@G49aa))))) (set! G3190@interaction-environment ((lambda (G49b4@the-env) (lambda () ((lambda (G49b6@t) (if G49b6@t G49b6@t (begin '#f ((lambda (G49b8@lib G49b9@rib) (begin ((lambda (G49bc@subst) (begin (G2ded@set-rib-sym*! G49b9@rib (map car G49bc@subst)) (G2def@set-rib-mark**! G49b9@rib (map (lambda (G49be@x) G2dc2@top-mark*) G49bc@subst)) (G2df1@set-rib-label*! G49b9@rib (map cdr G49bc@subst)))) (G2c18@G2a82@library-subst G49b8@lib)) ((lambda (G49c0@env) (begin (set! G49b4@the-env G49c0@env) G49c0@env)) (G3140@make-interaction-env G49b9@rib '() '())))) (G2c3c@G2aca@find-library-by-name '(mosh interaction)) (G2df9@make-cache-rib))))) G49b4@the-env))) '#f)) (set! G3192@top-level-context (G29a0@G28ab@make-parameter '#f)) (begin (set! G4acf@G3192@top-level-context G3192@top-level-context) (set! G4ace@G3190@interaction-environment G3190@interaction-environment) (set! G4acd@G318e@pre-compile-r6rs-top-level G318e@pre-compile-r6rs-top-level) (set! G4acc@G318c@compile-r6rs-top-level G318c@compile-r6rs-top-level) (set! G4acb@G318a@syntax->datum G318a@syntax->datum) (set! G4aca@G3188@datum->syntax G3188@datum->syntax) (set! G4ac9@G3186@identifier? G3186@identifier?) (set! G4ac8@G3184@syntax-violation G3184@syntax-violation) (set! G4ac7@G3182@syntax-violation* G3182@syntax-violation*) (set! G4ac6@G3180@extract-trace G3180@extract-trace) (set! G4ac5@G317e@syntax-error G317e@syntax-error) (set! G4ac4@G317c@assertion-error G317c@assertion-error) (set! G4ac3@G317a@expression-position G317a@expression-position) (set! G4ac2@G3178@extract-position-condition G3178@extract-position-condition) (set! G4ac1@G3176@make-source-condition G3176@make-source-condition) (set! G4ac0@G3174@bound-identifier=? G3174@bound-identifier=?) (set! G4abf@G3172@free-identifier=? G3172@free-identifier=?) (set! G4abe@G3170@generate-temporaries G3170@generate-temporaries) (set! G4abd@G316e@make-export-env/macros G316e@make-export-env/macros) (set! G4abc@G316c@make-export-subst G316c@make-export-subst) (set! G4abb@G316a@build-exports G316a@build-exports) (set! G4aba@G3168@rev-map-append G3168@rev-map-append) (set! G4ab9@G3166@boot-library-expand G3166@boot-library-expand) (set! G4ab8@G3164@library-expander G3164@library-expander) (set! G4ab7@G3162@eval G3162@eval) (set! G4ab6@G3160@expand G3160@expand) (set! G4ab5@G315e@scheme-report-environment G315e@scheme-report-environment) (set! G4ab4@G315c@null-environment G315c@null-environment) (set! G4ab3@G315a@environment G315a@environment) (set! G4ab2@G3158@environment-symbols G3158@environment-symbols) (set! G4ab1@G3156@environment? G3156@environment?) (set! G4ab0@G3154@parse-binding G3154@parse-binding) (set! G4aaf@G3152@environment-bindings G3152@environment-bindings) (set! G4aae@G3150@interaction-environment-symbols G3150@interaction-environment-symbols) (set! G4aad@G314e@rp G314e@rp) (set! G4aac@G314c@set-interaction-env-locs! G314c@set-interaction-env-locs!) (set! G4aab@G314a@set-interaction-env-r! G314a@set-interaction-env-r!) (set! G4aaa@G3148@set-interaction-env-rib! G3148@set-interaction-env-rib!) (set! G4aa9@G3146@interaction-env-locs G3146@interaction-env-locs) (set! G4aa8@G3144@interaction-env-r G3144@interaction-env-r) (set! G4aa7@G3142@interaction-env-rib G3142@interaction-env-rib) (set! G4aa6@G3140@make-interaction-env G3140@make-interaction-env) (set! G4aa5@G313e@interaction-env? G313e@interaction-env?) (set! G4aa4@G3139@G3131 G3139@G3131) (set! G4aa3@G3137@G3132 G3137@G3132) (set! G4aa2@G3135@G3130 G3135@G3130) (set! G4aa1@G312f@rp G312f@rp) (set! G4aa0@G312d@set-env-itc! G312d@set-env-itc!) (set! G4a9f@G312b@set-env-labels! G312b@set-env-labels!) (set! G4a9e@G3129@set-env-names! G3129@set-env-names!) (set! G4a9d@G3127@env-itc G3127@env-itc) (set! G4a9c@G3125@env-labels G3125@env-labels) (set! G4a9b@G3123@env-names G3123@env-names) (set! G4a9a@G3121@make-env G3121@make-env) (set! G4a99@G311f@env? G311f@env?) (set! G4a98@G311a@G3112 G311a@G3112) (set! G4a97@G3118@G3113 G3118@G3113) (set! G4a96@G3116@G3111 G3116@G3111) (set! G4a95@G3110@top-level-expander G3110@top-level-expander) (set! G4a94@G310e@parse-top-level-program G310e@parse-top-level-program) (set! G4a93@G310c@core-library-expander G310c@core-library-expander) (set! G4a92@G310a@library-body-expander G310a@library-body-expander) (set! G4a91@G3108@chi-interaction-expr G3108@chi-interaction-expr) (set! G4a90@G3106@chi-library-internal G3106@chi-library-internal) (set! G4a8f@G3104@imp-collector G3104@imp-collector) (set! G4a8e@G3102@vis-collector G3102@vis-collector) (set! G4a8d@G3100@inv-collector G3100@inv-collector) (set! G4a8c@G30fe@make-collector G30fe@make-collector) (set! G4a8b@G30fc@make-top-rib G30fc@make-top-rib) (set! G4a8a@G30fa@parse-import-spec* G30fa@parse-import-spec*) (set! G4a89@G30f8@parse-library G30f8@parse-library) (set! G4a88@G30f6@parse-library-name G30f6@parse-library-name) (set! G4a87@G30f4@parse-exports G30f4@parse-exports) (set! G4a86@G30f2@expand-transformer G30f2@expand-transformer) (set! G4a85@G30f0@chi-body* G30f0@chi-body*) (set! G4a84@G30ee@chi-internal-module G30ee@chi-internal-module) (set! G4a83@G30ec@module-interface-exp-id* G30ec@module-interface-exp-id*) (set! G4a82@G30ea@set-module-interface-exp-lab-vec! G30ea@set-module-interface-exp-lab-vec!) (set! G4a81@G30e8@set-module-interface-exp-id-vec! G30e8@set-module-interface-exp-id-vec!) (set! G4a80@G30e6@set-module-interface-first-mark! G30e6@set-module-interface-first-mark!) (set! G4a7f@G30e4@module-interface-exp-lab-vec G30e4@module-interface-exp-lab-vec) (set! G4a7e@G30e2@module-interface-exp-id-vec G30e2@module-interface-exp-id-vec) (set! G4a7d@G30e0@module-interface-first-mark G30e0@module-interface-first-mark) (set! G4a7c@G30de@make-module-interface G30de@make-module-interface) (set! G4a7b@G30dc@module-interface? G30dc@module-interface?) (set! G4a7a@G30d7@G30cf G30d7@G30cf) (set! G4a79@G30d5@G30d0 G30d5@G30d0) (set! G4a78@G30d3@G30ce G30d3@G30ce) (set! G4a77@G30cd@parse-module G30cd@parse-module) (set! G4a76@G30cb@chi-internal G30cb@chi-internal) (set! G4a75@G30c9@find-dups G30c9@find-dups) (set! G4a74@G30c7@find-bound=? G30c7@find-bound=?) (set! G4a73@G30c5@chi-rhs* G30c5@chi-rhs*) (set! G4a72@G30c3@expand-interaction-rhs*/init* G30c3@expand-interaction-rhs*/init*) (set! G4a71@G30c1@chi-rhs G30c1@chi-rhs) (set! G4a70@G30bf@chi-defun G30bf@chi-defun) (set! G4a6f@G30bd@chi-lambda-clause* G30bd@chi-lambda-clause*) (set! G4a6e@G30bb@chi-lambda-clause G30bb@chi-lambda-clause) (set! G4a6d@G30b9@verify-formals G30b9@verify-formals) (set! G4a6c@G30b7@chi-set! G30b7@chi-set!) (set! G4a6b@G30b5@chi-expr G30b5@chi-expr) (set! G4a6a@G30b3@chi-application G30b3@chi-application) (set! G4a69@G30b1@chi-expr* G30b1@chi-expr*) (set! G4a68@G30af@chi-global-macro G30af@chi-global-macro) (set! G4a67@G30ad@chi-local-macro G30ad@chi-local-macro) (set! G4a66@G30ab@chi-macro G30ab@chi-macro) (set! G4a65@G30a9@do-macro-call G30a9@do-macro-call) (set! G4a64@G30a7@local-macro-transformer G30a7@local-macro-transformer) (set! G4a63@G30a5@macro-transformer G30a5@macro-transformer) (set! G4a62@G30a3@symbol-macro G30a3@symbol-macro) (set! G4a61@G30a1@file-options-macro G30a1@file-options-macro) (set! G4a60@G309f@core-macro-transformer G309f@core-macro-transformer) (set! G4a5f@G309d@syntax-transformer G309d@syntax-transformer) (set! G4a5e@G309b@ellipsis-map G309b@ellipsis-map) (set! G4a5d@G3099@syntax-case-transformer G3099@syntax-case-transformer) (set! G4a5c@G3097@verify-literals G3097@verify-literals) (set! G4a5b@G3095@underscore? G3095@underscore?) (set! G4a5a@G3093@ellipsis? G3093@ellipsis?) (set! G4a59@G3091@syntax-dispatch G3091@syntax-dispatch) (set! G4a58@G308f@convert-pattern G308f@convert-pattern) (set! G4a57@G308d@foreign-call-transformer G308d@foreign-call-transformer) (set! G4a56@G308b@parameterize-macro G308b@parameterize-macro) (set! G4a55@G3089@incorrect-usage-macro G3089@incorrect-usage-macro) (set! G4a54@G3087@define-condition-type-macro G3087@define-condition-type-macro) (set! G4a53@G3085@define-record-type-macro G3085@define-record-type-macro) (set! G4a52@G3083@define-struct-macro G3083@define-struct-macro) (set! G4a51@G3081@quasisyntax-macro G3081@quasisyntax-macro) (set! G4a50@G307f@quasiquote-macro G307f@quasiquote-macro) (set! G4a4f@G307d@syntax-rules-macro G307d@syntax-rules-macro) (set! G4a4e@G307b@include-into-macro G307b@include-into-macro) (set! G4a4d@G3079@include-macro G3079@include-macro) (set! G4a4c@G3077@do-include G3077@do-include) (set! G4a4b@G3075@cond-macro G3075@cond-macro) (set! G4a4a@G3073@and-macro G3073@and-macro) (set! G4a49@G3071@or-macro G3071@or-macro) (set! G4a48@G306f@let*-macro G306f@let*-macro) (set! G4a47@G306d@do-macro G306d@do-macro) (set! G4a46@G306b@identifier-syntax-macro G306b@identifier-syntax-macro) (set! G4a45@G3069@endianness-macro G3069@endianness-macro) (set! G4a44@G3067@assert-macro G3067@assert-macro) (set! G4a43@G3065@delay-macro G3065@delay-macro) (set! G4a42@G3063@time-macro G3063@time-macro) (set! G4a41@G3061@define-enumeration-macro G3061@define-enumeration-macro) (set! G4a40@G305f@guard-macro G305f@guard-macro) (set! G4a3f@G305d@trace-letrec-syntax-macro G305d@trace-letrec-syntax-macro) (set! G4a3e@G305b@trace-let-syntax-macro G305b@trace-let-syntax-macro) (set! G4a3d@G3059@trace-let/rec-syntax G3059@trace-let/rec-syntax) (set! G4a3c@G3057@trace-define-syntax-macro G3057@trace-define-syntax-macro) (set! G4a3b@G3055@trace-define-macro G3055@trace-define-macro) (set! G4a3a@G3053@trace-lambda-macro G3053@trace-lambda-macro) (set! G4a39@G3051@let*-values-macro G3051@let*-values-macro) (set! G4a38@G304f@let-values-macro G304f@let-values-macro) (set! G4a37@G304d@let-macro G304d@let-macro) (set! G4a36@G304b@invalid-fmls-error G304b@invalid-fmls-error) (set! G4a35@G3049@with-syntax-macro G3049@with-syntax-macro) (set! G4a34@G3047@bless G3047@bless) (set! G4a33@G3045@lambda-transformer G3045@lambda-transformer) (set! G4a32@G3043@case-lambda-transformer G3043@case-lambda-transformer) (set! G4a31@G3041@quote-transformer G3041@quote-transformer) (set! G4a30@G303f@case-macro G303f@case-macro) (set! G4a2f@G303d@if-transformer G303d@if-transformer) (set! G4a2e@G303b@unless-macro G303b@unless-macro) (set! G4a2d@G3039@when-macro G3039@when-macro) (set! G4a2c@G3037@record-constructor-descriptor-transformer G3037@record-constructor-descriptor-transformer) (set! G4a2b@G3035@record-type-descriptor-transformer G3035@record-type-descriptor-transformer) (set! G4a2a@G3033@type-descriptor-transformer G3033@type-descriptor-transformer) (set! G4a29@G3031@fluid-let-syntax-transformer G3031@fluid-let-syntax-transformer) (set! G4a28@G302f@letrec*-transformer G302f@letrec*-transformer) (set! G4a27@G302d@letrec-transformer G302d@letrec-transformer) (set! G4a26@G302b@letrec-helper G302b@letrec-helper) (set! G4a25@G3029@add-lexicals G3029@add-lexicals) (set! G4a24@G3027@add-lexical G3027@add-lexical) (set! G4a23@G3025@set-lexical-mutable! G3025@set-lexical-mutable!) (set! G4a22@G3023@lexical-mutable? G3023@lexical-mutable?) (set! G4a21@G3021@lexical-var G3021@lexical-var) (set! G4a20@G301f@scheme-stx G301f@scheme-stx) (set! G4a1f@G301d@scheme-stx-hashtable G301d@scheme-stx-hashtable) (set! G4a1e@G301b@parse-define-syntax G301b@parse-define-syntax) (set! G4a1d@G3019@parse-define G3019@parse-define) (set! G4a1c@G2e95@make-eval-transformer G2e95@make-eval-transformer) (set! G4a1b@G2e93@variable-transformer-procedure G2e93@variable-transformer-procedure) (set! G4a1a@G2e91@variable-transformer? G2e91@variable-transformer?) (set! G4a19@G2e8f@make-variable-transformer G2e8f@make-variable-transformer) (set! G4a18@G2e8d@sanitize-binding G2e8d@sanitize-binding) (set! G4a17@G2e76@syntax-type G2e76@syntax-type) (set! G4a16@G2e74@raise-unbound-error G2e74@raise-unbound-error) (set! G4a15@G2e72@binding-value G2e72@binding-value) (set! G4a14@G2e70@binding-type G2e70@binding-type) (set! G4a13@G2e6e@make-binding G2e6e@make-binding) (set! G4a12@G2e6c@label->binding G2e6c@label->binding) (set! G4a11@G2e6a@id->real-label G2e6a@id->real-label) (set! G4a10@G2e68@id->label G2e68@id->label) (set! G4a0f@G2e66@same-marks*? G2e66@same-marks*?) (set! G4a0e@G2e64@stx->datum G2e64@stx->datum) (set! G4a0d@G2e62@strip G2e62@strip) (set! G4a0c@G2e60@strip-annotations G2e60@strip-annotations) (set! G4a0b@G2e5e@self-evaluating? G2e5e@self-evaluating?) (set! G4a0a@G2e5c@bound-id-member? G2e5c@bound-id-member?) (set! G4a09@G2e5a@distinct-bound-ids? G2e5a@distinct-bound-ids?) (set! G4a08@G2e58@valid-bound-ids? G2e58@valid-bound-ids?) (set! G4a07@G2e56@free-id=? G2e56@free-id=?) (set! G4a06@G2e54@bound-id=? G2e54@bound-id=?) (set! G4a05@G2e52@same-marks? G2e52@same-marks?) (set! G4a04@G2e50@id->sym G2e50@id->sym) (set! G4a03@G2e4e@id? G2e4e@id?) (set! G4a02@G2e4c@syntax->list G2e4c@syntax->list) (set! G4a01@G2e4a@syntax-cdr G2e4a@syntax-cdr) (set! G4a00@G2e48@syntax-car G2e48@syntax-car) (set! G49ff@G2e46@syntax-list? G2e46@syntax-list?) (set! G49fe@G2e44@syntax-null? G2e44@syntax-null?) (set! G49fd@G2e42@syntax-vector? G2e42@syntax-vector?) (set! G49fc@G2e40@syntax-pair? G2e40@syntax-pair?) (set! G49fb@G2e3e@syntax-vector->list G2e3e@syntax-vector->list) (set! G49fa@G2e3c@syntax-kind? G2e3c@syntax-kind?) (set! G49f9@G2e3a@add-subst G2e3a@add-subst) (set! G49f8@G2e38@add-mark G2e38@add-mark) (set! G49f7@G2e36@mkstx G2e36@mkstx) (set! G49f6@G2e34@join-wraps G2e34@join-wraps) (set! G49f5@G2e32@anti-mark? G2e32@anti-mark?) (set! G49f4@G2e30@anti-mark G2e30@anti-mark) (set! G49f3@G2e2e@gen-mark G2e2e@gen-mark) (set! G49f2@G2e2c@datum->stx G2e2c@datum->stx) (set! G49f1@G2e2a@rp G2e2a@rp) (set! G49f0@G2e28@set-stx-ae*! G2e28@set-stx-ae*!) (set! G49ef@G2e26@set-stx-subst*! G2e26@set-stx-subst*!) (set! G49ee@G2e24@set-stx-mark*! G2e24@set-stx-mark*!) (set! G49ed@G2e22@set-stx-expr! G2e22@set-stx-expr!) (set! G49ec@G2e20@stx-ae* G2e20@stx-ae*) (set! G49eb@G2e1e@stx-subst* G2e1e@stx-subst*) (set! G49ea@G2e1c@stx-mark* G2e1c@stx-mark*) (set! G49e9@G2e1a@stx-expr G2e1a@stx-expr) (set! G49e8@G2e18@make-stx G2e18@make-stx) (set! G49e7@G2e16@stx? G2e16@stx?) (set! G49e6@G2e11@G2e09 G2e11@G2e09) (set! G49e5@G2e0f@G2e0a G2e0f@G2e0a) (set! G49e4@G2e0d@G2e08 G2e0d@G2e08) (set! G49e3@G2e07@make-full-rib G2e07@make-full-rib) (set! G49e2@G2e05@unseal-rib! G2e05@unseal-rib!) (set! G49e1@G2e03@seal-rib! G2e03@seal-rib!) (set! G49e0@G2e01@make-rib-map G2e01@make-rib-map) (set! G49df@G2dff@extend-rib/nc! G2dff@extend-rib/nc!) (set! G49de@G2dfd@extend-rib! G2dfd@extend-rib!) (set! G49dd@G2dfb@find-label G2dfb@find-label) (set! G49dc@G2df9@make-cache-rib G2df9@make-cache-rib) (set! G49db@G2df7@make-empty-rib G2df7@make-empty-rib) (set! G49da@G2df5@set-rib-cache! G2df5@set-rib-cache!) (set! G49d9@G2df3@set-rib-sealed/freq! G2df3@set-rib-sealed/freq!) (set! G49d8@G2df1@set-rib-label*! G2df1@set-rib-label*!) (set! G49d7@G2def@set-rib-mark**! G2def@set-rib-mark**!) (set! G49d6@G2ded@set-rib-sym*! G2ded@set-rib-sym*!) (set! G49d5@G2deb@rib-cache G2deb@rib-cache) (set! G49d4@G2de9@rib-sealed/freq G2de9@rib-sealed/freq) (set! G49d3@G2de7@rib-label* G2de7@rib-label*) (set! G49d2@G2de5@rib-mark** G2de5@rib-mark**) (set! G49d1@G2de3@rib-sym* G2de3@rib-sym*) (set! G49d0@G2de1@make-rib G2de1@make-rib) (set! G49cf@G2ddf@rib? G2ddf@rib?) (set! G49ce@G2dda@G2dd2 G2dda@G2dd2) (set! G49cd@G2dd8@G2dd3 G2dd8@G2dd3) (set! G49cc@G2dd6@G2dd1 G2dd6@G2dd1) (set! G49cb@G2dd0@gen-define-label G2dd0@gen-define-label) (set! G49ca@G2dce@gen-define-label+loc G2dce@gen-define-label+loc) (set! G49c9@G2dcc@gen-top-level-label G2dcc@gen-top-level-label) (set! G49c8@G2dca@gen-label G2dca@gen-label) (set! G49c7@G2dc8@gen-global G2dc8@gen-global) (set! G49c6@G2dc6@gen-lexical G2dc6@gen-lexical) (set! G49c5@G2dc4@top-marked? G2dc4@top-marked?) (set! G49c4@G2dc2@top-mark* G2dc2@top-mark*) (set! G49c3@G2dbd@set-union G2dbd@set-union) (set! G49c2@G2dbb@set-cons G2dbb@set-cons) (G2c39@G2ac4@current-library-expander G3164@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4ad9@G4ad4 G4adb@G4ad6 G4add@G4ad5 G4ae2@&condition? G4ae4@make-&condition G4ae6@&condition-rtd G4ae8@&condition-rcd G4af0@G4aeb G4af2@G4aed G4af4@G4aec G4af9@G4aea G4afb@make-message-condition G4afd@G4ae9 G4aff@message-condition? G4b01@condition-message G4b08@G4b03 G4b0a@G4b05 G4b0c@G4b04 G4b11@G4b02 G4b13@make-warning G4b15@warning? G4b1c@G4b17 G4b1e@G4b19 G4b20@G4b18 G4b25@G4b16 G4b27@make-serious-condition G4b29@serious-condition? G4b30@G4b2b G4b32@G4b2d G4b34@G4b2c G4b39@G4b2a G4b3b@make-error G4b3d@error? G4b44@G4b3f G4b46@G4b41 G4b48@G4b40 G4b4d@G4b3e G4b4f@make-violation G4b51@violation? G4b58@G4b53 G4b5a@G4b55 G4b5c@G4b54 G4b61@G4b52 G4b63@make-assertion-violation G4b65@assertion-violation? G4b6d@G4b68 G4b6f@G4b6a G4b71@G4b69 G4b76@G4b67 G4b78@make-irritants-condition G4b7a@G4b66 G4b7c@irritants-condition? G4b7e@condition-irritants G4b86@G4b81 G4b88@G4b83 G4b8a@G4b82 G4b8f@G4b80 G4b91@make-who-condition G4b93@G4b7f G4b95@who-condition? G4b97@condition-who G4b9e@G4b99 G4ba0@G4b9b G4ba2@G4b9a G4ba7@G4b98 G4ba9@make-non-continuable-violation G4bab@non-continuable-violation? G4bb2@G4bad G4bb4@G4baf G4bb6@G4bae G4bbb@G4bac G4bbd@make-implementation-restriction-violation G4bbf@implementation-restriction-violation? G4bc6@G4bc1 G4bc8@G4bc3 G4bca@G4bc2 G4bcf@G4bc0 G4bd1@make-lexical-violation G4bd3@lexical-violation? G4bdc@G4bd7 G4bde@G4bd9 G4be0@G4bd8 G4be5@G4bd6 G4be7@make-syntax-violation G4be9@G4bd4 G4beb@G4bd5 G4bed@syntax-violation? G4bef@syntax-violation-form G4bf1@syntax-violation-subform G4bf8@G4bf3 G4bfa@G4bf5 G4bfc@G4bf4 G4c01@G4bf2 G4c03@make-undefined-violation G4c05@undefined-violation? G4c0c@G4c07 G4c0e@G4c09 G4c10@G4c08 G4c15@G4c06 G4c17@make-no-infinities-violation G4c19@no-infinities-violation? G4c20@G4c1b G4c22@G4c1d G4c24@G4c1c G4c29@G4c1a G4c2b@make-no-nans-violation G4c2d@no-nans-violation?) (begin (set! G4ad9@G4ad4 (make-record-type-descriptor '&condition '#f 'G4ad7 '#f '#f '#())) (set! G4adb@G4ad6 '#f) (set! G4add@G4ad5 (make-record-constructor-descriptor G4ad9@G4ad4 '#f G4adb@G4ad6)) (set! G4ae2@&condition? (record-predicate G4ad9@G4ad4)) (set! G4ae4@make-&condition (record-constructor G4add@G4ad5)) (set! G4ae6@&condition-rtd G4ad9@G4ad4) (set! G4ae8@&condition-rcd G4add@G4ad5) (set! G4af0@G4aeb (make-record-type-descriptor '&message G4ad9@G4ad4 'G4aee '#f '#f '#((immutable message)))) (set! G4af2@G4aed '#f) (set! G4af4@G4aec (make-record-constructor-descriptor G4af0@G4aeb G4add@G4ad5 G4af2@G4aed)) (set! G4af9@G4aea (record-predicate G4af0@G4aeb)) (set! G4afb@make-message-condition (record-constructor G4af4@G4aec)) (set! G4afd@G4ae9 (record-accessor G4af0@G4aeb '0)) (set! G4aff@message-condition? (condition-predicate G4af0@G4aeb)) (set! G4b01@condition-message (condition-accessor G4af0@G4aeb G4afd@G4ae9)) (set! G4b08@G4b03 (make-record-type-descriptor '&warning G4ad9@G4ad4 'G4b06 '#f '#f '#())) (set! G4b0a@G4b05 '#f) (set! G4b0c@G4b04 (make-record-constructor-descriptor G4b08@G4b03 G4add@G4ad5 G4b0a@G4b05)) (set! G4b11@G4b02 (record-predicate G4b08@G4b03)) (set! G4b13@make-warning (record-constructor G4b0c@G4b04)) (set! G4b15@warning? (condition-predicate G4b08@G4b03)) (set! G4b1c@G4b17 (make-record-type-descriptor '&serious G4ad9@G4ad4 'G4b1a '#f '#f '#())) (set! G4b1e@G4b19 '#f) (set! G4b20@G4b18 (make-record-constructor-descriptor G4b1c@G4b17 G4add@G4ad5 G4b1e@G4b19)) (set! G4b25@G4b16 (record-predicate G4b1c@G4b17)) (set! G4b27@make-serious-condition (record-constructor G4b20@G4b18)) (set! G4b29@serious-condition? (condition-predicate G4b1c@G4b17)) (set! G4b30@G4b2b (make-record-type-descriptor '&error G4b1c@G4b17 'G4b2e '#f '#f '#())) (set! G4b32@G4b2d '#f) (set! G4b34@G4b2c (make-record-constructor-descriptor G4b30@G4b2b G4b20@G4b18 G4b32@G4b2d)) (set! G4b39@G4b2a (record-predicate G4b30@G4b2b)) (set! G4b3b@make-error (record-constructor G4b34@G4b2c)) (set! G4b3d@error? (condition-predicate G4b30@G4b2b)) (set! G4b44@G4b3f (make-record-type-descriptor '&violation G4b1c@G4b17 'G4b42 '#f '#f '#())) (set! G4b46@G4b41 '#f) (set! G4b48@G4b40 (make-record-constructor-descriptor G4b44@G4b3f G4b20@G4b18 G4b46@G4b41)) (set! G4b4d@G4b3e (record-predicate G4b44@G4b3f)) (set! G4b4f@make-violation (record-constructor G4b48@G4b40)) (set! G4b51@violation? (condition-predicate G4b44@G4b3f)) (set! G4b58@G4b53 (make-record-type-descriptor '&assertion G4b44@G4b3f 'G4b56 '#f '#f '#())) (set! G4b5a@G4b55 '#f) (set! G4b5c@G4b54 (make-record-constructor-descriptor G4b58@G4b53 G4b48@G4b40 G4b5a@G4b55)) (set! G4b61@G4b52 (record-predicate G4b58@G4b53)) (set! G4b63@make-assertion-violation (record-constructor G4b5c@G4b54)) (set! G4b65@assertion-violation? (condition-predicate G4b58@G4b53)) (set! G4b6d@G4b68 (make-record-type-descriptor '&irritants G4ad9@G4ad4 'G4b6b '#f '#f '#((immutable irritants)))) (set! G4b6f@G4b6a '#f) (set! G4b71@G4b69 (make-record-constructor-descriptor G4b6d@G4b68 G4add@G4ad5 G4b6f@G4b6a)) (set! G4b76@G4b67 (record-predicate G4b6d@G4b68)) (set! G4b78@make-irritants-condition (record-constructor G4b71@G4b69)) (set! G4b7a@G4b66 (record-accessor G4b6d@G4b68 '0)) (set! G4b7c@irritants-condition? (condition-predicate G4b6d@G4b68)) (set! G4b7e@condition-irritants (condition-accessor G4b6d@G4b68 G4b7a@G4b66)) (set! G4b86@G4b81 (make-record-type-descriptor '&who G4ad9@G4ad4 'G4b84 '#f '#f '#((immutable who)))) (set! G4b88@G4b83 '#f) (set! G4b8a@G4b82 (make-record-constructor-descriptor G4b86@G4b81 G4add@G4ad5 G4b88@G4b83)) (set! G4b8f@G4b80 (record-predicate G4b86@G4b81)) (set! G4b91@make-who-condition (record-constructor G4b8a@G4b82)) (set! G4b93@G4b7f (record-accessor G4b86@G4b81 '0)) (set! G4b95@who-condition? (condition-predicate G4b86@G4b81)) (set! G4b97@condition-who (condition-accessor G4b86@G4b81 G4b93@G4b7f)) (set! G4b9e@G4b99 (make-record-type-descriptor '&non-continuable G4b44@G4b3f 'G4b9c '#f '#f '#())) (set! G4ba0@G4b9b '#f) (set! G4ba2@G4b9a (make-record-constructor-descriptor G4b9e@G4b99 G4b48@G4b40 G4ba0@G4b9b)) (set! G4ba7@G4b98 (record-predicate G4b9e@G4b99)) (set! G4ba9@make-non-continuable-violation (record-constructor G4ba2@G4b9a)) (set! G4bab@non-continuable-violation? (condition-predicate G4b9e@G4b99)) (set! G4bb2@G4bad (make-record-type-descriptor '&implementation-restriction G4b44@G4b3f 'G4bb0 '#f '#f '#())) (set! G4bb4@G4baf '#f) (set! G4bb6@G4bae (make-record-constructor-descriptor G4bb2@G4bad G4b48@G4b40 G4bb4@G4baf)) (set! G4bbb@G4bac (record-predicate G4bb2@G4bad)) (set! G4bbd@make-implementation-restriction-violation (record-constructor G4bb6@G4bae)) (set! G4bbf@implementation-restriction-violation? (condition-predicate G4bb2@G4bad)) (set! G4bc6@G4bc1 (make-record-type-descriptor '&lexical G4b44@G4b3f 'G4bc4 '#f '#f '#())) (set! G4bc8@G4bc3 '#f) (set! G4bca@G4bc2 (make-record-constructor-descriptor G4bc6@G4bc1 G4b48@G4b40 G4bc8@G4bc3)) (set! G4bcf@G4bc0 (record-predicate G4bc6@G4bc1)) (set! G4bd1@make-lexical-violation (record-constructor G4bca@G4bc2)) (set! G4bd3@lexical-violation? (condition-predicate G4bc6@G4bc1)) (set! G4bdc@G4bd7 (make-record-type-descriptor '&syntax G4b44@G4b3f 'G4bda '#f '#f '#((immutable form) (immutable subform)))) (set! G4bde@G4bd9 '#f) (set! G4be0@G4bd8 (make-record-constructor-descriptor G4bdc@G4bd7 G4b48@G4b40 G4bde@G4bd9)) (set! G4be5@G4bd6 (record-predicate G4bdc@G4bd7)) (set! G4be7@make-syntax-violation (record-constructor G4be0@G4bd8)) (set! G4be9@G4bd4 (record-accessor G4bdc@G4bd7 '0)) (set! G4beb@G4bd5 (record-accessor G4bdc@G4bd7 '1)) (set! G4bed@syntax-violation? (condition-predicate G4bdc@G4bd7)) (set! G4bef@syntax-violation-form (condition-accessor G4bdc@G4bd7 G4be9@G4bd4)) (set! G4bf1@syntax-violation-subform (condition-accessor G4bdc@G4bd7 G4beb@G4bd5)) (set! G4bf8@G4bf3 (make-record-type-descriptor '&undefined G4b44@G4b3f 'G4bf6 '#f '#f '#())) (set! G4bfa@G4bf5 '#f) (set! G4bfc@G4bf4 (make-record-constructor-descriptor G4bf8@G4bf3 G4b48@G4b40 G4bfa@G4bf5)) (set! G4c01@G4bf2 (record-predicate G4bf8@G4bf3)) (set! G4c03@make-undefined-violation (record-constructor G4bfc@G4bf4)) (set! G4c05@undefined-violation? (condition-predicate G4bf8@G4bf3)) (set! G4c0c@G4c07 (make-record-type-descriptor '&no-infinities G4bb2@G4bad 'G4c0a '#f '#f '#())) (set! G4c0e@G4c09 '#f) (set! G4c10@G4c08 (make-record-constructor-descriptor G4c0c@G4c07 G4bb6@G4bae G4c0e@G4c09)) (set! G4c15@G4c06 (record-predicate G4c0c@G4c07)) (set! G4c17@make-no-infinities-violation (record-constructor G4c10@G4c08)) (set! G4c19@no-infinities-violation? (condition-predicate G4c0c@G4c07)) (set! G4c20@G4c1b (make-record-type-descriptor '&no-nans G4bb2@G4bad 'G4c1e '#f '#f '#())) (set! G4c22@G4c1d '#f) (set! G4c24@G4c1c (make-record-constructor-descriptor G4c20@G4c1b G4bb6@G4bae G4c22@G4c1d)) (set! G4c29@G4c1a (record-predicate G4c20@G4c1b)) (set! G4c2b@make-no-nans-violation (record-constructor G4c24@G4c1c)) (set! G4c2d@no-nans-violation? (condition-predicate G4c20@G4c1b)) (begin (set! G4c98@G4c2d@no-nans-violation? G4c2d@no-nans-violation?) (set! G4c97@G4c2b@make-no-nans-violation G4c2b@make-no-nans-violation) (set! G4c96@G4c29@G4c1a G4c29@G4c1a) (set! G4c95@G4c24@G4c1c G4c24@G4c1c) (set! G4c94@G4c22@G4c1d G4c22@G4c1d) (set! G4c93@G4c20@G4c1b G4c20@G4c1b) (set! G4c92@G4c19@no-infinities-violation? G4c19@no-infinities-violation?) (set! G4c91@G4c17@make-no-infinities-violation G4c17@make-no-infinities-violation) (set! G4c90@G4c15@G4c06 G4c15@G4c06) (set! G4c8f@G4c10@G4c08 G4c10@G4c08) (set! G4c8e@G4c0e@G4c09 G4c0e@G4c09) (set! G4c8d@G4c0c@G4c07 G4c0c@G4c07) (set! G4c8c@G4c05@undefined-violation? G4c05@undefined-violation?) (set! G4c8b@G4c03@make-undefined-violation G4c03@make-undefined-violation) (set! G4c8a@G4c01@G4bf2 G4c01@G4bf2) (set! G4c89@G4bfc@G4bf4 G4bfc@G4bf4) (set! G4c88@G4bfa@G4bf5 G4bfa@G4bf5) (set! G4c87@G4bf8@G4bf3 G4bf8@G4bf3) (set! G4c86@G4bf1@syntax-violation-subform G4bf1@syntax-violation-subform) (set! G4c85@G4bef@syntax-violation-form G4bef@syntax-violation-form) (set! G4c84@G4bed@syntax-violation? G4bed@syntax-violation?) (set! G4c83@G4beb@G4bd5 G4beb@G4bd5) (set! G4c82@G4be9@G4bd4 G4be9@G4bd4) (set! G4c81@G4be7@make-syntax-violation G4be7@make-syntax-violation) (set! G4c80@G4be5@G4bd6 G4be5@G4bd6) (set! G4c7f@G4be0@G4bd8 G4be0@G4bd8) (set! G4c7e@G4bde@G4bd9 G4bde@G4bd9) (set! G4c7d@G4bdc@G4bd7 G4bdc@G4bd7) (set! G4c7c@G4bd3@lexical-violation? G4bd3@lexical-violation?) (set! G4c7b@G4bd1@make-lexical-violation G4bd1@make-lexical-violation) (set! G4c7a@G4bcf@G4bc0 G4bcf@G4bc0) (set! G4c79@G4bca@G4bc2 G4bca@G4bc2) (set! G4c78@G4bc8@G4bc3 G4bc8@G4bc3) (set! G4c77@G4bc6@G4bc1 G4bc6@G4bc1) (set! G4c76@G4bbf@implementation-restriction-violation? G4bbf@implementation-restriction-violation?) (set! G4c75@G4bbd@make-implementation-restriction-violation G4bbd@make-implementation-restriction-violation) (set! G4c74@G4bbb@G4bac G4bbb@G4bac) (set! G4c73@G4bb6@G4bae G4bb6@G4bae) (set! G4c72@G4bb4@G4baf G4bb4@G4baf) (set! G4c71@G4bb2@G4bad G4bb2@G4bad) (set! G4c70@G4bab@non-continuable-violation? G4bab@non-continuable-violation?) (set! G4c6f@G4ba9@make-non-continuable-violation G4ba9@make-non-continuable-violation) (set! G4c6e@G4ba7@G4b98 G4ba7@G4b98) (set! G4c6d@G4ba2@G4b9a G4ba2@G4b9a) (set! G4c6c@G4ba0@G4b9b G4ba0@G4b9b) (set! G4c6b@G4b9e@G4b99 G4b9e@G4b99) (set! G4c6a@G4b97@condition-who G4b97@condition-who) (set! G4c69@G4b95@who-condition? G4b95@who-condition?) (set! G4c68@G4b93@G4b7f G4b93@G4b7f) (set! G4c67@G4b91@make-who-condition G4b91@make-who-condition) (set! G4c66@G4b8f@G4b80 G4b8f@G4b80) (set! G4c65@G4b8a@G4b82 G4b8a@G4b82) (set! G4c64@G4b88@G4b83 G4b88@G4b83) (set! G4c63@G4b86@G4b81 G4b86@G4b81) (set! G4c62@G4b7e@condition-irritants G4b7e@condition-irritants) (set! G4c61@G4b7c@irritants-condition? G4b7c@irritants-condition?) (set! G4c60@G4b7a@G4b66 G4b7a@G4b66) (set! G4c5f@G4b78@make-irritants-condition G4b78@make-irritants-condition) (set! G4c5e@G4b76@G4b67 G4b76@G4b67) (set! G4c5d@G4b71@G4b69 G4b71@G4b69) (set! G4c5c@G4b6f@G4b6a G4b6f@G4b6a) (set! G4c5b@G4b6d@G4b68 G4b6d@G4b68) (set! G4c5a@G4b65@assertion-violation? G4b65@assertion-violation?) (set! G4c59@G4b63@make-assertion-violation G4b63@make-assertion-violation) (set! G4c58@G4b61@G4b52 G4b61@G4b52) (set! G4c57@G4b5c@G4b54 G4b5c@G4b54) (set! G4c56@G4b5a@G4b55 G4b5a@G4b55) (set! G4c55@G4b58@G4b53 G4b58@G4b53) (set! G4c54@G4b51@violation? G4b51@violation?) (set! G4c53@G4b4f@make-violation G4b4f@make-violation) (set! G4c52@G4b4d@G4b3e G4b4d@G4b3e) (set! G4c51@G4b48@G4b40 G4b48@G4b40) (set! G4c50@G4b46@G4b41 G4b46@G4b41) (set! G4c4f@G4b44@G4b3f G4b44@G4b3f) (set! G4c4e@G4b3d@error? G4b3d@error?) (set! G4c4d@G4b3b@make-error G4b3b@make-error) (set! G4c4c@G4b39@G4b2a G4b39@G4b2a) (set! G4c4b@G4b34@G4b2c G4b34@G4b2c) (set! G4c4a@G4b32@G4b2d G4b32@G4b2d) (set! G4c49@G4b30@G4b2b G4b30@G4b2b) (set! G4c48@G4b29@serious-condition? G4b29@serious-condition?) (set! G4c47@G4b27@make-serious-condition G4b27@make-serious-condition) (set! G4c46@G4b25@G4b16 G4b25@G4b16) (set! G4c45@G4b20@G4b18 G4b20@G4b18) (set! G4c44@G4b1e@G4b19 G4b1e@G4b19) (set! G4c43@G4b1c@G4b17 G4b1c@G4b17) (set! G4c42@G4b15@warning? G4b15@warning?) (set! G4c41@G4b13@make-warning G4b13@make-warning) (set! G4c40@G4b11@G4b02 G4b11@G4b02) (set! G4c3f@G4b0c@G4b04 G4b0c@G4b04) (set! G4c3e@G4b0a@G4b05 G4b0a@G4b05) (set! G4c3d@G4b08@G4b03 G4b08@G4b03) (set! G4c3c@G4b01@condition-message G4b01@condition-message) (set! G4c3b@G4aff@message-condition? G4aff@message-condition?) (set! G4c3a@G4afd@G4ae9 G4afd@G4ae9) (set! G4c39@G4afb@make-message-condition G4afb@make-message-condition) (set! G4c38@G4af9@G4aea G4af9@G4aea) (set! G4c37@G4af4@G4aec G4af4@G4aec) (set! G4c36@G4af2@G4aed G4af2@G4aed) (set! G4c35@G4af0@G4aeb G4af0@G4aeb) (set! G4c34@G4ae8@&condition-rcd G4ae8@&condition-rcd) (set! G4c33@G4ae6@&condition-rtd G4ae6@&condition-rtd) (set! G4c32@G4ae4@make-&condition G4ae4@make-&condition) (set! G4c31@G4ae2@&condition? G4ae2@&condition?) (set! G4c30@G4add@G4ad5 G4add@G4ad5) (set! G4c2f@G4adb@G4ad6 G4adb@G4ad6) (set! G4c2e@G4ad9@G4ad4 G4ad9@G4ad4)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4ca0@G4c9b G4ca2@G4c9d G4ca4@G4c9c G4ca9@G4c9a G4cab@make-i/o-error G4cad@i/o-error? G4cb4@G4caf G4cb6@G4cb1 G4cb8@G4cb0 G4cbd@G4cae G4cbf@make-i/o-read-error G4cc1@i/o-read-error? G4cc8@G4cc3 G4cca@G4cc5 G4ccc@G4cc4 G4cd1@G4cc2 G4cd3@make-i/o-write-error G4cd5@i/o-write-error? G4cdd@G4cd8 G4cdf@G4cda G4ce1@G4cd9 G4ce6@G4cd7 G4ce8@make-i/o-invalid-position-error G4cea@G4cd6 G4cec@i/o-invalid-position-error? G4cee@i/o-error-position G4cf6@G4cf1 G4cf8@G4cf3 G4cfa@G4cf2 G4cff@G4cf0 G4d01@make-i/o-filename-error G4d03@G4cef G4d05@i/o-filename-error? G4d07@i/o-error-filename G4d0e@G4d09 G4d10@G4d0b G4d12@G4d0a G4d17@G4d08 G4d19@make-i/o-file-protection-error G4d1b@i/o-file-protection-error? G4d22@G4d1d G4d24@G4d1f G4d26@G4d1e G4d2b@G4d1c G4d2d@make-i/o-file-is-read-only-error G4d2f@i/o-file-is-read-only-error? G4d36@G4d31 G4d38@G4d33 G4d3a@G4d32 G4d3f@G4d30 G4d41@make-i/o-file-already-exists-error G4d43@i/o-file-already-exists-error? G4d4a@G4d45 G4d4c@G4d47 G4d4e@G4d46 G4d53@G4d44 G4d55@make-i/o-file-does-not-exist-error G4d57@i/o-file-does-not-exist-error? G4d5f@G4d5a G4d61@G4d5c G4d63@G4d5b G4d68@G4d59 G4d6a@make-i/o-port-error G4d6c@G4d58 G4d6e@i/o-port-error? G4d70@i/o-error-port G4d77@G4d72 G4d79@G4d74 G4d7b@G4d73 G4d80@G4d71 G4d82@make-i/o-decoding-error G4d84@i/o-decoding-error? G4d8c@G4d87 G4d8e@G4d89 G4d90@G4d88 G4d95@G4d86 G4d97@make-i/o-encoding-error G4d99@G4d85 G4d9b@i/o-encoding-error? G4d9d@i/o-encoding-error-char) (begin (set! G4ca0@G4c9b (make-record-type-descriptor '&i/o &error-rtd 'G4c9e '#f '#f '#())) (set! G4ca2@G4c9d '#f) (set! G4ca4@G4c9c (make-record-constructor-descriptor G4ca0@G4c9b &error-rcd G4ca2@G4c9d)) (set! G4ca9@G4c9a (record-predicate G4ca0@G4c9b)) (set! G4cab@make-i/o-error (record-constructor G4ca4@G4c9c)) (set! G4cad@i/o-error? (condition-predicate G4ca0@G4c9b)) (set! G4cb4@G4caf (make-record-type-descriptor '&i/o-read G4ca0@G4c9b 'G4cb2 '#f '#f '#())) (set! G4cb6@G4cb1 '#f) (set! G4cb8@G4cb0 (make-record-constructor-descriptor G4cb4@G4caf G4ca4@G4c9c G4cb6@G4cb1)) (set! G4cbd@G4cae (record-predicate G4cb4@G4caf)) (set! G4cbf@make-i/o-read-error (record-constructor G4cb8@G4cb0)) (set! G4cc1@i/o-read-error? (condition-predicate G4cb4@G4caf)) (set! G4cc8@G4cc3 (make-record-type-descriptor '&i/o-write G4ca0@G4c9b 'G4cc6 '#f '#f '#())) (set! G4cca@G4cc5 '#f) (set! G4ccc@G4cc4 (make-record-constructor-descriptor G4cc8@G4cc3 G4ca4@G4c9c G4cca@G4cc5)) (set! G4cd1@G4cc2 (record-predicate G4cc8@G4cc3)) (set! G4cd3@make-i/o-write-error (record-constructor G4ccc@G4cc4)) (set! G4cd5@i/o-write-error? (condition-predicate G4cc8@G4cc3)) (set! G4cdd@G4cd8 (make-record-type-descriptor '&i/o-invalid-position G4ca0@G4c9b 'G4cdb '#f '#f '#((immutable position)))) (set! G4cdf@G4cda '#f) (set! G4ce1@G4cd9 (make-record-constructor-descriptor G4cdd@G4cd8 G4ca4@G4c9c G4cdf@G4cda)) (set! G4ce6@G4cd7 (record-predicate G4cdd@G4cd8)) (set! G4ce8@make-i/o-invalid-position-error (record-constructor G4ce1@G4cd9)) (set! G4cea@G4cd6 (record-accessor G4cdd@G4cd8 '0)) (set! G4cec@i/o-invalid-position-error? (condition-predicate G4cdd@G4cd8)) (set! G4cee@i/o-error-position (condition-accessor G4cdd@G4cd8 G4cea@G4cd6)) (set! G4cf6@G4cf1 (make-record-type-descriptor '&i/o-filename G4ca0@G4c9b 'G4cf4 '#f '#f '#((immutable filename)))) (set! G4cf8@G4cf3 '#f) (set! G4cfa@G4cf2 (make-record-constructor-descriptor G4cf6@G4cf1 G4ca4@G4c9c G4cf8@G4cf3)) (set! G4cff@G4cf0 (record-predicate G4cf6@G4cf1)) (set! G4d01@make-i/o-filename-error (record-constructor G4cfa@G4cf2)) (set! G4d03@G4cef (record-accessor G4cf6@G4cf1 '0)) (set! G4d05@i/o-filename-error? (condition-predicate G4cf6@G4cf1)) (set! G4d07@i/o-error-filename (condition-accessor G4cf6@G4cf1 G4d03@G4cef)) (set! G4d0e@G4d09 (make-record-type-descriptor '&i/o-file-protection G4ca0@G4c9b 'G4d0c '#f '#f '#())) (set! G4d10@G4d0b '#f) (set! G4d12@G4d0a (make-record-constructor-descriptor G4d0e@G4d09 G4ca4@G4c9c G4d10@G4d0b)) (set! G4d17@G4d08 (record-predicate G4d0e@G4d09)) (set! G4d19@make-i/o-file-protection-error (record-constructor G4d12@G4d0a)) (set! G4d1b@i/o-file-protection-error? (condition-predicate G4d0e@G4d09)) (set! G4d22@G4d1d (make-record-type-descriptor '&i/o-file-is-read-only G4d0e@G4d09 'G4d20 '#f '#f '#())) (set! G4d24@G4d1f '#f) (set! G4d26@G4d1e (make-record-constructor-descriptor G4d22@G4d1d G4d12@G4d0a G4d24@G4d1f)) (set! G4d2b@G4d1c (record-predicate G4d22@G4d1d)) (set! G4d2d@make-i/o-file-is-read-only-error (record-constructor G4d26@G4d1e)) (set! G4d2f@i/o-file-is-read-only-error? (condition-predicate G4d22@G4d1d)) (set! G4d36@G4d31 (make-record-type-descriptor '&i/o-file-already-exists G4cf6@G4cf1 'G4d34 '#f '#f '#())) (set! G4d38@G4d33 '#f) (set! G4d3a@G4d32 (make-record-constructor-descriptor G4d36@G4d31 G4cfa@G4cf2 G4d38@G4d33)) (set! G4d3f@G4d30 (record-predicate G4d36@G4d31)) (set! G4d41@make-i/o-file-already-exists-error (record-constructor G4d3a@G4d32)) (set! G4d43@i/o-file-already-exists-error? (condition-predicate G4d36@G4d31)) (set! G4d4a@G4d45 (make-record-type-descriptor '&i/o-file-does-not-exist G4cf6@G4cf1 'G4d48 '#f '#f '#())) (set! G4d4c@G4d47 '#f) (set! G4d4e@G4d46 (make-record-constructor-descriptor G4d4a@G4d45 G4cfa@G4cf2 G4d4c@G4d47)) (set! G4d53@G4d44 (record-predicate G4d4a@G4d45)) (set! G4d55@make-i/o-file-does-not-exist-error (record-constructor G4d4e@G4d46)) (set! G4d57@i/o-file-does-not-exist-error? (condition-predicate G4d4a@G4d45)) (set! G4d5f@G4d5a (make-record-type-descriptor '&i/o-port G4ca0@G4c9b 'G4d5d '#f '#f '#((immutable port)))) (set! G4d61@G4d5c '#f) (set! G4d63@G4d5b (make-record-constructor-descriptor G4d5f@G4d5a G4ca4@G4c9c G4d61@G4d5c)) (set! G4d68@G4d59 (record-predicate G4d5f@G4d5a)) (set! G4d6a@make-i/o-port-error (record-constructor G4d63@G4d5b)) (set! G4d6c@G4d58 (record-accessor G4d5f@G4d5a '0)) (set! G4d6e@i/o-port-error? (condition-predicate G4d5f@G4d5a)) (set! G4d70@i/o-error-port (condition-accessor G4d5f@G4d5a G4d6c@G4d58)) (set! G4d77@G4d72 (make-record-type-descriptor '&i/o-decoding G4d5f@G4d5a 'G4d75 '#f '#f '#())) (set! G4d79@G4d74 '#f) (set! G4d7b@G4d73 (make-record-constructor-descriptor G4d77@G4d72 G4d63@G4d5b G4d79@G4d74)) (set! G4d80@G4d71 (record-predicate G4d77@G4d72)) (set! G4d82@make-i/o-decoding-error (record-constructor G4d7b@G4d73)) (set! G4d84@i/o-decoding-error? (condition-predicate G4d77@G4d72)) (set! G4d8c@G4d87 (make-record-type-descriptor '&i/o-encoding G4d5f@G4d5a 'G4d8a '#f '#f '#((immutable char)))) (set! G4d8e@G4d89 '#f) (set! G4d90@G4d88 (make-record-constructor-descriptor G4d8c@G4d87 G4d63@G4d5b G4d8e@G4d89)) (set! G4d95@G4d86 (record-predicate G4d8c@G4d87)) (set! G4d97@make-i/o-encoding-error (record-constructor G4d90@G4d88)) (set! G4d99@G4d85 (record-accessor G4d8c@G4d87 '0)) (set! G4d9b@i/o-encoding-error? (condition-predicate G4d8c@G4d87)) (set! G4d9d@i/o-encoding-error-char (condition-accessor G4d8c@G4d87 G4d99@G4d85)) (begin (set! G4ded@G4d9d@i/o-encoding-error-char G4d9d@i/o-encoding-error-char) (set! G4dec@G4d9b@i/o-encoding-error? G4d9b@i/o-encoding-error?) (set! G4deb@G4d99@G4d85 G4d99@G4d85) (set! G4dea@G4d97@make-i/o-encoding-error G4d97@make-i/o-encoding-error) (set! G4de9@G4d95@G4d86 G4d95@G4d86) (set! G4de8@G4d90@G4d88 G4d90@G4d88) (set! G4de7@G4d8e@G4d89 G4d8e@G4d89) (set! G4de6@G4d8c@G4d87 G4d8c@G4d87) (set! G4de5@G4d84@i/o-decoding-error? G4d84@i/o-decoding-error?) (set! G4de4@G4d82@make-i/o-decoding-error G4d82@make-i/o-decoding-error) (set! G4de3@G4d80@G4d71 G4d80@G4d71) (set! G4de2@G4d7b@G4d73 G4d7b@G4d73) (set! G4de1@G4d79@G4d74 G4d79@G4d74) (set! G4de0@G4d77@G4d72 G4d77@G4d72) (set! G4ddf@G4d70@i/o-error-port G4d70@i/o-error-port) (set! G4dde@G4d6e@i/o-port-error? G4d6e@i/o-port-error?) (set! G4ddd@G4d6c@G4d58 G4d6c@G4d58) (set! G4ddc@G4d6a@make-i/o-port-error G4d6a@make-i/o-port-error) (set! G4ddb@G4d68@G4d59 G4d68@G4d59) (set! G4dda@G4d63@G4d5b G4d63@G4d5b) (set! G4dd9@G4d61@G4d5c G4d61@G4d5c) (set! G4dd8@G4d5f@G4d5a G4d5f@G4d5a) (set! G4dd7@G4d57@i/o-file-does-not-exist-error? G4d57@i/o-file-does-not-exist-error?) (set! G4dd6@G4d55@make-i/o-file-does-not-exist-error G4d55@make-i/o-file-does-not-exist-error) (set! G4dd5@G4d53@G4d44 G4d53@G4d44) (set! G4dd4@G4d4e@G4d46 G4d4e@G4d46) (set! G4dd3@G4d4c@G4d47 G4d4c@G4d47) (set! G4dd2@G4d4a@G4d45 G4d4a@G4d45) (set! G4dd1@G4d43@i/o-file-already-exists-error? G4d43@i/o-file-already-exists-error?) (set! G4dd0@G4d41@make-i/o-file-already-exists-error G4d41@make-i/o-file-already-exists-error) (set! G4dcf@G4d3f@G4d30 G4d3f@G4d30) (set! G4dce@G4d3a@G4d32 G4d3a@G4d32) (set! G4dcd@G4d38@G4d33 G4d38@G4d33) (set! G4dcc@G4d36@G4d31 G4d36@G4d31) (set! G4dcb@G4d2f@i/o-file-is-read-only-error? G4d2f@i/o-file-is-read-only-error?) (set! G4dca@G4d2d@make-i/o-file-is-read-only-error G4d2d@make-i/o-file-is-read-only-error) (set! G4dc9@G4d2b@G4d1c G4d2b@G4d1c) (set! G4dc8@G4d26@G4d1e G4d26@G4d1e) (set! G4dc7@G4d24@G4d1f G4d24@G4d1f) (set! G4dc6@G4d22@G4d1d G4d22@G4d1d) (set! G4dc5@G4d1b@i/o-file-protection-error? G4d1b@i/o-file-protection-error?) (set! G4dc4@G4d19@make-i/o-file-protection-error G4d19@make-i/o-file-protection-error) (set! G4dc3@G4d17@G4d08 G4d17@G4d08) (set! G4dc2@G4d12@G4d0a G4d12@G4d0a) (set! G4dc1@G4d10@G4d0b G4d10@G4d0b) (set! G4dc0@G4d0e@G4d09 G4d0e@G4d09) (set! G4dbf@G4d07@i/o-error-filename G4d07@i/o-error-filename) (set! G4dbe@G4d05@i/o-filename-error? G4d05@i/o-filename-error?) (set! G4dbd@G4d03@G4cef G4d03@G4cef) (set! G4dbc@G4d01@make-i/o-filename-error G4d01@make-i/o-filename-error) (set! G4dbb@G4cff@G4cf0 G4cff@G4cf0) (set! G4dba@G4cfa@G4cf2 G4cfa@G4cf2) (set! G4db9@G4cf8@G4cf3 G4cf8@G4cf3) (set! G4db8@G4cf6@G4cf1 G4cf6@G4cf1) (set! G4db7@G4cee@i/o-error-position G4cee@i/o-error-position) (set! G4db6@G4cec@i/o-invalid-position-error? G4cec@i/o-invalid-position-error?) (set! G4db5@G4cea@G4cd6 G4cea@G4cd6) (set! G4db4@G4ce8@make-i/o-invalid-position-error G4ce8@make-i/o-invalid-position-error) (set! G4db3@G4ce6@G4cd7 G4ce6@G4cd7) (set! G4db2@G4ce1@G4cd9 G4ce1@G4cd9) (set! G4db1@G4cdf@G4cda G4cdf@G4cda) (set! G4db0@G4cdd@G4cd8 G4cdd@G4cd8) (set! G4daf@G4cd5@i/o-write-error? G4cd5@i/o-write-error?) (set! G4dae@G4cd3@make-i/o-write-error G4cd3@make-i/o-write-error) (set! G4dad@G4cd1@G4cc2 G4cd1@G4cc2) (set! G4dac@G4ccc@G4cc4 G4ccc@G4cc4) (set! G4dab@G4cca@G4cc5 G4cca@G4cc5) (set! G4daa@G4cc8@G4cc3 G4cc8@G4cc3) (set! G4da9@G4cc1@i/o-read-error? G4cc1@i/o-read-error?) (set! G4da8@G4cbf@make-i/o-read-error G4cbf@make-i/o-read-error) (set! G4da7@G4cbd@G4cae G4cbd@G4cae) (set! G4da6@G4cb8@G4cb0 G4cb8@G4cb0) (set! G4da5@G4cb6@G4cb1 G4cb6@G4cb1) (set! G4da4@G4cb4@G4caf G4cb4@G4caf) (set! G4da3@G4cad@i/o-error? G4cad@i/o-error?) (set! G4da2@G4cab@make-i/o-error G4cab@make-i/o-error) (set! G4da1@G4ca9@G4c9a G4ca9@G4c9a) (set! G4da0@G4ca4@G4c9c G4ca4@G4c9c) (set! G4d9f@G4ca2@G4c9d G4ca2@G4c9d) (set! G4d9e@G4ca0@G4c9b G4ca0@G4c9b)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2a01@G29a6@current-primitive-locations (lambda (G51c4@x) ((lambda (G51c6@t) (if G51c6@t (cdr G51c6@t) '#f)) (assq G51c4@x '((syntax-error . G4ac5@G317e@syntax-error) (syntax-dispatch . G4a59@G3091@syntax-dispatch) (load . G4e8a@G4dfc@load) (interaction-environment . G4ace@G3190@interaction-environment) (make-parameter . G29a0@G28ab@make-parameter) (make-variable-transformer . G4a19@G2e8f@make-variable-transformer) (identifier? . G4ac9@G3186@identifier?) (generate-temporaries . G4abe@G3170@generate-temporaries) (free-identifier=? . G4abf@G3172@free-identifier=?) (syntax->datum . G4acb@G318a@syntax->datum) (datum->syntax . G4aca@G3188@datum->syntax) (bound-identifier=? . G4ac0@G3174@bound-identifier=?) (make-i/o-write-error . G4dae@G4cd3@make-i/o-write-error) (make-i/o-read-error . G4da8@G4cbf@make-i/o-read-error) (make-i/o-port-error . G4ddc@G4d6a@make-i/o-port-error) (make-i/o-invalid-position-error . G4db4@G4ce8@make-i/o-invalid-position-error) (make-i/o-filename-error . G4dbc@G4d01@make-i/o-filename-error) (make-i/o-file-protection-error . G4dc4@G4d19@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4dca@G4d2d@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4dd6@G4d55@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4dd0@G4d41@make-i/o-file-already-exists-error) (make-i/o-error . G4da2@G4cab@make-i/o-error) (make-i/o-encoding-error . G4dea@G4d97@make-i/o-encoding-error) (make-i/o-decoding-error . G4de4@G4d82@make-i/o-decoding-error) (i/o-write-error? . G4daf@G4cd5@i/o-write-error?) (i/o-read-error? . G4da9@G4cc1@i/o-read-error?) (i/o-port-error? . G4dde@G4d6e@i/o-port-error?) (i/o-invalid-position-error? . G4db6@G4cec@i/o-invalid-position-error?) (i/o-filename-error? . G4dbe@G4d05@i/o-filename-error?) (i/o-file-protection-error? . G4dc5@G4d1b@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4dcb@G4d2f@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4dd7@G4d57@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4dd1@G4d43@i/o-file-already-exists-error?) (i/o-error? . G4da3@G4cad@i/o-error?) (i/o-error-port . G4ddf@G4d70@i/o-error-port) (i/o-error-filename . G4dbf@G4d07@i/o-error-filename) (i/o-encoding-error? . G4dec@G4d9b@i/o-encoding-error?) (i/o-encoding-error-char . G4ded@G4d9d@i/o-encoding-error-char) (i/o-decoding-error? . G4de5@G4d84@i/o-decoding-error?) (scheme-report-environment . G4ab5@G315e@scheme-report-environment) (null-environment . G4ab4@G315c@null-environment) (command-line . G4e87@G4df6@command-line) (eval . G4ab7@G3162@eval) (environment . G4ab3@G315a@environment) (who-condition? . G4c69@G4b95@who-condition?) (warning? . G4c42@G4b15@warning?) (violation? . G4c54@G4b51@violation?) (undefined-violation? . G4c8c@G4c05@undefined-violation?) (syntax-violation? . G4c84@G4bed@syntax-violation?) (syntax-violation-subform . G4c86@G4bf1@syntax-violation-subform) (syntax-violation-form . G4c85@G4bef@syntax-violation-form) (syntax-violation . G4ac8@G3184@syntax-violation) (serious-condition? . G4c48@G4b29@serious-condition?) (non-continuable-violation? . G4c70@G4bab@non-continuable-violation?) (message-condition? . G4c3b@G4aff@message-condition?) (make-who-condition . G4c67@G4b91@make-who-condition) (make-warning . G4c41@G4b13@make-warning) (make-violation . G4c53@G4b4f@make-violation) (make-undefined-violation . G4c8b@G4c03@make-undefined-violation) (make-syntax-violation . G4c81@G4be7@make-syntax-violation) (make-serious-condition . G4c47@G4b27@make-serious-condition) (make-non-continuable-violation . G4c6f@G4ba9@make-non-continuable-violation) (make-message-condition . G4c39@G4afb@make-message-condition) (make-lexical-violation . G4c7b@G4bd1@make-lexical-violation) (make-irritants-condition . G4c5f@G4b78@make-irritants-condition) (make-implementation-restriction-violation . G4c75@G4bbd@make-implementation-restriction-violation) (make-error . G4c4d@G4b3b@make-error) (make-assertion-violation . G4c59@G4b63@make-assertion-violation) (lexical-violation? . G4c7c@G4bd3@lexical-violation?) (irritants-condition? . G4c61@G4b7c@irritants-condition?) (implementation-restriction-violation? . G4c76@G4bbf@implementation-restriction-violation?) (error? . G4c4e@G4b3d@error?) (condition-who . G4c6a@G4b97@condition-who) (condition-message . G4c3c@G4b01@condition-message) (condition-irritants . G4c62@G4b7e@condition-irritants) (assertion-violation? . G4c5a@G4b65@assertion-violation?) (no-nans-violation? . G4c98@G4c2d@no-nans-violation?) (no-infinities-violation? . G4c92@G4c19@no-infinities-violation?) (make-no-nans-violation . G4c97@G4c2b@make-no-nans-violation) (make-no-infinities-violation . G4c91@G4c17@make-no-infinities-violation)))))) (G2c41@G2ad4@install-library 'G5197 '(mosh interaction) '() '() '() '() '((string-upcase . G5111) (string-titlecase . G5110) (string-normalize-nfkd . G510f) (string-normalize-nfkc . G510e) (string-normalize-nfd . G510d) (string-normalize-nfc . G510c) (string-foldcase . G510b) (string-downcase . G510a) (string-ci>? . G5109) (string-ci>=? . G5108) (string-ci=? . G5107) (string-ci<? . G5106) (string-ci<=? . G5105) (char-whitespace? . G5104) (char-upper-case? . G5103) (char-title-case? . G5102) (char-numeric? . G5101) (char-lower-case? . G5100) (char-general-category . G50ff) (char-upcase . G50fe) (char-titlecase . G50fd) (char-foldcase . G50fc) (char-downcase . G50fb) (char-ci>? . G50fa) (char-ci>=? . G50f9) (char-ci=? . G50f8) (char-ci<? . G50f7) (char-ci<=? . G50f6) (char-alphabetic? . G50f5) (make-variable-transformer . G2e8e) (identifier? . G3185) (generate-temporaries . G316f) (free-identifier=? . G3171) (syntax->datum . G3189) (datum->syntax . G3187) (bound-identifier=? . G3173) (record-type-descriptor? . G50f4) (record-predicate . G50f3) (record-mutator . G50f2) (record-constructor . G50f1) (record-accessor . G50f0) (make-record-type-descriptor . G50ef) (make-record-constructor-descriptor . G50ee) (record? . G50ed) (record-type-uid . G50ec) (record-type-sealed? . G50eb) (record-type-parent . G50ea) (record-type-opaque? . G50e9) (record-type-name . G50e8) (record-type-generative? . G50e7) (record-type-field-names . G50e6) (record-rtd . G50e5) (record-field-mutable? . G50e4) (delete-file . G50e3) (file-exists? . G50e2) (vector-sort! . G50e1) (vector-sort . G50e0) (list-sort . G50df) (symbol-hash . G50de) (string-ci-hash . G50dd) (string-hash . G50dc) (equal-hash . G50db) (hashtable-equivalence-function . G50da) (make-hashtable . G50d9) (hashtable-hash-function . G50d8) (make-eqv-hashtable . G50d7) (make-eq-hashtable . G50d6) (hashtable? . G50d5) (hashtable-update! . G50d4) (hashtable-size . G50d3) (hashtable-set! . G50d2) (hashtable-ref . G50d1) (hashtable-mutable? . G50d0) (hashtable-keys . G50cf) (hashtable-entries . G50ce) (hashtable-delete! . G50cd) (hashtable-copy . G50cc) (hashtable-contains? . G50cb) (hashtable-clear! . G50ca) (call-with-output-file . G50c9) (call-with-input-file . G50c8) (write-char . G50c7) (write . G50c6) (with-output-to-file . G50c5) (with-input-from-file . G50c4) (read-char . G50c3) (read . G50c2) (peek-char . G50c1) (open-output-file . G50c0) (open-input-file . G50bf) (newline . G50be) (display . G50bd) (close-output-port . G50bc) (close-input-port . G50bb) (eof-object? . G50ba) (eof-object . G50b9) (current-error-port . G50b8) (current-output-port . G50b7) (current-input-port . G50b6) (output-port? . G50b5) (input-port? . G50b4) (utf-8-codec . G50b3) (utf-16-codec . G50b2) (transcoder-error-handling-mode . G50b1) (transcoder-eol-style . G50b0) (transcoder-codec . G50af) (transcoded-port . G50ae) (textual-port? . G50ad) (string->bytevector . G50ac) (standard-output-port . G50ab) (standard-input-port . G50aa) (standard-error-port . G50a9) (set-port-position! . G50a8) (put-u8 . G50a7) (put-string . G50a6) (put-datum . G50a5) (put-char . G50a4) (put-bytevector . G50a3) (port? . G50a2) (port-transcoder . G50a1) (port-position . G50a0) (port-has-set-port-position!? . G509f) (port-has-port-position? . G509e) (port-eof? . G509d) (output-port-buffer-mode . G509c) (open-string-output-port . G509b) (open-string-input-port . G509a) (open-file-output-port . G5099) (open-file-input/output-port . G5098) (open-file-input-port . G5097) (open-bytevector-output-port . G5096) (open-bytevector-input-port . G5095) (native-transcoder . G5094) (native-eol-style . G5093) (make-transcoder . G5092) (latin-1-codec . G5091) (make-i/o-write-error . G4cd2) (make-i/o-read-error . G4cbe) (make-i/o-port-error . G4d69) (make-i/o-invalid-position-error . G4ce7) (make-i/o-filename-error . G4d00) (make-i/o-file-protection-error . G4d18) (make-i/o-file-is-read-only-error . G4d2c) (make-i/o-file-does-not-exist-error . G4d54) (make-i/o-file-already-exists-error . G4d40) (make-i/o-error . G4caa) (make-i/o-encoding-error . G4d96) (make-i/o-decoding-error . G4d81) (make-custom-textual-output-port . G5090) (make-custom-textual-input/output-port . G508f) (make-custom-textual-input-port . G508e) (make-custom-binary-output-port . G508d) (make-custom-binary-input/output-port . G508c) (make-custom-binary-input-port . G508b) (make-bytevector . G508a) (lookahead-u8 . G5089) (lookahead-char . G5088) (i/o-write-error? . G4cd4) (i/o-read-error? . G4cc0) (i/o-port-error? . G4d6d) (i/o-invalid-position-error? . G4ceb) (i/o-filename-error? . G4d04) (i/o-file-protection-error? . G4d1a) (i/o-file-is-read-only-error? . G4d2e) (i/o-file-does-not-exist-error? . G4d56) (i/o-file-already-exists-error? . G4d42) (i/o-error? . G4cac) (i/o-error-port . G4d6f) (i/o-error-filename . G4d06) (i/o-encoding-error? . G4d9a) (i/o-encoding-error-char . G4d9c) (i/o-decoding-error? . G4d83) (get-u8 . G5087) (get-string-n! . G5086) (get-string-n . G5085) (get-string-all . G5084) (get-line . G5083) (get-datum . G5082) (get-char . G5081) (get-bytevector-some . G5080) (get-bytevector-n! . G507f) (get-bytevector-n . G507e) (get-bytevector-all . G507d) (flush-output-port . G507c) (close-port . G507b) (exit . G5074) (command-line . G4df5) (string-fill! . G5073) (string-set! . G5072) (set-cdr! . G5071) (set-car! . G5070) (remove . G506f) (remv . G506e) (remp . G506d) (remq . G506c) (partition . G506b) (memv . G506a) (memq . G5069) (memp . G5068) (member . G5067) (exists . G5066) (for-all . G5065) (fold-right . G5064) (fold-left . G5063) (find . G5062) (filter . G5061) (cons* . G5060) (assv . G505f) (assq . G505e) (assp . G505d) (assoc . G505c) (call-with-string-output-port . G505b) (call-with-port . G505a) (call-with-bytevector-output-port . G5059) (bytevector->string . G5058) (buffer-mode? . G5057) (binary-port? . G5056) (with-exception-handler . G5055) (raise-continuable . G5054) (raise . G5053) (eval . G3161) (environment . G3159) (make-enumeration . G5052) (enum-set=? . G5051) (enum-set-universe . G5050) (enum-set-union . G504f) (enum-set-subset? . G504e) (enum-set-projection . G504d) (enum-set-member? . G504c) (enum-set-intersection . G504b) (enum-set-indexer . G504a) (enum-set-difference . G5049) (enum-set-constructor . G5048) (enum-set-complement . G5047) (enum-set->list . G5046) (who-condition? . G4b94) (warning? . G4b14) (violation? . G4b50) (undefined-violation? . G4c04) (syntax-violation? . G4bec) (syntax-violation-subform . G4bf0) (syntax-violation-form . G4bee) (syntax-violation . G3183) (simple-conditions . G5045) (serious-condition? . G4b28) (non-continuable-violation? . G4baa) (message-condition? . G4afe) (make-who-condition . G4b90) (make-warning . G4b12) (make-violation . G4b4e) (make-undefined-violation . G4c02) (make-syntax-violation . G4be6) (make-serious-condition . G4b26) (make-non-continuable-violation . G4ba8) (make-message-condition . G4afa) (make-lexical-violation . G4bd0) (make-irritants-condition . G4b77) (make-implementation-restriction-violation . G4bbc) (make-error . G4b3a) (make-assertion-violation . G4b62) (lexical-violation? . G4bd2) (irritants-condition? . G4b7b) (implementation-restriction-violation? . G4bbe) (error? . G4b3c) (condition-who . G4b96) (condition-predicate . G5044) (condition-message . G4b00) (condition-irritants . G4b7d) (condition-accessor . G5043) (condition . G5042) (assertion-violation? . G4b64) (condition? . G5041) (utf32->string . G5040) (utf16->string . G503f) (utf8->string . G503e) (uint-list->bytevector . G503d) (u8-list->bytevector . G503c) (string->utf8 . G503b) (string->utf32 . G503a) (string->utf16 . G5039) (sint-list->bytevector . G5038) (native-endianness . G5037) (bytevector? . G5036) (bytevector=? . G5035) (bytevector-uint-set! . G5034) (bytevector-uint-ref . G5033) (bytevector-u8-set! . G5032) (bytevector-u8-ref . G5031) (bytevector-u64-set! . G5030) (bytevector-u64-ref . G502f) (bytevector-u64-native-set! . G502e) (bytevector-u64-native-ref . G502d) (bytevector-u32-set! . G502c) (bytevector-u32-ref . G502b) (bytevector-u32-native-set! . G502a) (bytevector-u32-native-ref . G5029) (bytevector-u16-set! . G5028) (bytevector-u16-ref . G5027) (bytevector-u16-native-set! . G5026) (bytevector-u16-native-ref . G5025) (bytevector-sint-set! . G5024) (bytevector-sint-ref . G5023) (bytevector-s8-set! . G5022) (bytevector-s8-ref . G5021) (bytevector-s64-set! . G5020) (bytevector-s64-ref . G501f) (bytevector-s64-native-set! . G501e) (bytevector-s64-native-ref . G501d) (bytevector-s32-set! . G501c) (bytevector-s32-ref . G501b) (bytevector-s32-native-set! . G501a) (bytevector-s32-native-ref . G5019) (bytevector-s16-set! . G5018) (bytevector-s16-ref . G5017) (bytevector-s16-native-set! . G5016) (bytevector-s16-native-ref . G5015) (bytevector-length . G5014) (bytevector-ieee-single-ref . G5013) (bytevector-ieee-single-set! . G5012) (bytevector-ieee-single-native-set! . G5011) (bytevector-ieee-single-native-ref . G5010) (bytevector-ieee-double-set! . G500f) (bytevector-ieee-double-ref . G500e) (bytevector-ieee-double-native-set! . G500d) (bytevector-ieee-double-native-ref . G500c) (bytevector-fill! . G500b) (bytevector-copy! . G500a) (bytevector-copy . G5009) (bytevector->uint-list . G5008) (bytevector->u8-list . G5007) (bytevector->sint-list . G5006) (no-nans-violation? . G4c2c) (no-infinities-violation? . G4c18) (make-no-nans-violation . G4c2a) (make-no-infinities-violation . G4c16) (real->flonum . G5005) (flzero? . G5004) (fltruncate . G5003) (fltan . G5002) (flsqrt . G5001) (flsin . G5000) (flround . G4fff) (flpositive? . G4ffe) (flonum? . G4ffd) (flodd? . G4ffc) (flnumerator . G4ffb) (flnegative? . G4ffa) (flnan? . G4ff9) (flmod0 . G4ff8) (flmod . G4ff7) (flmin . G4ff6) (flmax . G4ff5) (fllog . G4ff4) (flinteger? . G4ff3) (flinfinite? . G4ff2) (flfloor . G4ff1) (flfinite? . G4ff0) (flexpt . G4fef) (flexp . G4fee) (fleven? . G4fed) (fldiv0-and-mod0 . G4fec) (fldiv0 . G4feb) (fldiv-and-mod . G4fea) (fldiv . G4fe9) (fldenominator . G4fe8) (flcos . G4fe7) (flceiling . G4fe6) (flatan . G4fe5) (flasin . G4fe4) (flacos . G4fe3) (flabs . G4fe2) (fl>? . G4fe1) (fl>=? . G4fe0) (fl=? . G4fdf) (fl<? . G4fde) (fl<=? . G4fdd) (fl/ . G4fdc) (fl- . G4fdb) (fl+ . G4fda) (fl* . G4fd9) (fixnum->flonum . G4fd8) (fxzero? . G4fd7) (fxxor . G4fd6) (fxrotate-bit-field . G4fd5) (fxreverse-bit-field . G4fd4) (fxpositive? . G4fd3) (fxodd? . G4fd2) (fxnot . G4fd1) (fxnegative? . G4fd0) (fxmod0 . G4fcf) (fxmod . G4fce) (fxmin . G4fcd) (fxmax . G4fcc) (fxlength . G4fcb) (fxior . G4fca) (fxif . G4fc9) (fxfirst-bit-set . G4fc8) (fxeven? . G4fc7) (fxdiv0-and-mod0 . G4fc6) (fxdiv0 . G4fc5) (fxdiv-and-mod . G4fc4) (fxdiv . G4fc3) (fxcopy-bit-field . G4fc2) (fxcopy-bit . G4fc1) (fxbit-set? . G4fc0) (fxbit-field . G4fbf) (fxbit-count . G4fbe) (fxarithmetic-shift-right . G4fbd) (fxarithmetic-shift-left . G4fbc) (fxarithmetic-shift . G4fbb) (fxand . G4fba) (fx>? . G4fb9) (fx>=? . G4fb8) (fx=? . G4fb7) (fx<? . G4fb6) (fx<=? . G4fb5) (fx-/carry . G4fb4) (fx- . G4fb3) (fx+/carry . G4fb2) (fx+ . G4fb1) (fx*/carry . G4fb0) (fx* . G4faf) (greatest-fixnum . G4fae) (least-fixnum . G4fad) (fixnum-width . G4fac) (fixnum? . G4fab) (bitwise-rotate-bit-field . G4faa) (bitwise-reverse-bit-field . G4fa9) (bitwise-length . G4fa8) (bitwise-if . G4fa7) (bitwise-first-bit-set . G4fa6) (bitwise-copy-bit-field . G4fa5) (bitwise-copy-bit . G4fa4) (bitwise-bit-set? . G4fa3) (bitwise-bit-field . G4fa2) (bitwise-bit-count . G4fa1) (bitwise-xor . G4fa0) (bitwise-ior . G4f9f) (bitwise-and . G4f9e) (bitwise-not . G4f9d) (bitwise-arithmetic-shift-right . G4f9c) (bitwise-arithmetic-shift-left . G4f9b) (bitwise-arithmetic-shift . G4f9a) (zero? . G4f99) (vector? . G4f98) (vector-set! . G4f97) (vector-ref . G4f96) (vector-map . G4f95) (vector-length . G4f94) (vector-for-each . G4f93) (vector-fill! . G4f92) (vector->list . G4f91) (vector . G4f90) (values . G4f8f) (truncate . G4f8e) (tan . G4f8d) (symbol? . G4f8c) (symbol=? . G4f8b) (symbol->string . G4f8a) (substring . G4f89) (string? . G4f88) (string>? . G4f87) (string>=? . G4f86) (string=? . G4f85) (string<? . G4f84) (string<=? . G4f83) (string-ref . G4f82) (string-length . G4f81) (string-for-each . G4f80) (string-copy . G4f7f) (string-append . G4f7e) (string->symbol . G4f7d) (string->number . G4f7c) (string->list . G4f7b) (string . G4f7a) (sqrt . G4f79) (sin . G4f78) (round . G4f77) (reverse . G4f76) (real? . G4f75) (real-valued? . G4f74) (real-part . G4f73) (rationalize . G4f72) (rational? . G4f71) (rational-valued? . G4f70) (procedure? . G4f6f) (positive? . G4f6e) (pair? . G4f6d) (odd? . G4f6c) (numerator . G4f6b) (number? . G4f6a) (number->string . G4f69) (null? . G4f68) (not . G4f67) (negative? . G4f66) (nan? . G4f65) (min . G4f64) (max . G4f63) (map . G4f62) (make-vector . G4f61) (make-string . G4f60) (make-rectangular . G4f5f) (make-polar . G4f5e) (magnitude . G4f5d) (log . G4f5c) (list? . G4f5b) (list-tail . G4f5a) (list-ref . G4f59) (list->vector . G4f58) (list->string . G4f57) (list . G4f56) (length . G4f55) (lcm . G4f54) (integer? . G4f53) (integer-valued? . G4f52) (integer->char . G4f51) (infinite? . G4f50) (inexact? . G4f4f) (inexact . G4f4e) (imag-part . G4f4d) (gcd . G4f4c) (for-each . G4f4b) (floor . G4f4a) (finite? . G4f49) (expt . G4f48) (exp . G4f47) (exact? . G4f46) (exact-integer-sqrt . G4f45) (exact . G4f44) (even? . G4f43) (error . G4f42) (eqv? . G4f41) (equal? . G4f40) (eq? . G4f3f) (dynamic-wind . G4f3e) (div0-and-mod0 . G4f3d) (mod0 . G4f3c) (div0 . G4f3b) (div-and-mod . G4f3a) (mod . G4f39) (div . G4f38) (denominator . G4f37) (cos . G4f36) (cons . G4f35) (complex? . G4f34) (char? . G4f33) (char>? . G4f32) (char>=? . G4f31) (char=? . G4f30) (char<? . G4f2f) (char<=? . G4f2e) (char->integer . G4f2d) (ceiling . G4f2c) (call-with-values . G4f2b) (call/cc . G4f2a) (call-with-current-continuation . G4f29) (cddddr . G4f28) (cdddar . G4f27) (cddadr . G4f26) (cddaar . G4f25) (cdaddr . G4f24) (cdadar . G4f23) (cdaadr . G4f22) (cdaaar . G4f21) (cadddr . G4f20) (caddar . G4f1f) (cadadr . G4f1e) (cadaar . G4f1d) (caaddr . G4f1c) (caadar . G4f1b) (caaadr . G4f1a) (caaaar . G4f19) (cdddr . G4f18) (cddar . G4f17) (cdadr . G4f16) (cdaar . G4f15) (caddr . G4f14) (cadar . G4f13) (caadr . G4f12) (caaar . G4f11) (cddr . G4f10) (cdar . G4f0f) (cadr . G4f0e) (caar . G4f0d) (cdr . G4f0c) (car . G4f0b) (boolean? . G4f0a) (boolean=? . G4f09) (atan . G4f08) (assertion-violation . G4f07) (asin . G4f06) (apply . G4f05) (append . G4f04) (angle . G4f03) (acos . G4f02) (abs . G4f01) (/ . G4f00) (* . G4eff) (- . G4efe) (+ . G4efd) (>= . G4efc) (> . G4efb) (= . G4efa) (<= . G4ef9) (< . G4ef8) (library . G4ef7) (export . G4ef6) (&no-nans . G4ef5) (&no-infinities . G4ef4) (&i/o-encoding . G4ef3) (&i/o-decoding . G4ef2) (&i/o-port . G4ef1) (&i/o-file-does-not-exist . G4ef0) (&i/o-file-already-exists . G4eef) (&i/o-file-is-read-only . G4eee) (&i/o-file-protection . G4eed) (&i/o-filename . G4eec) (&i/o-invalid-position . G4eeb) (&i/o-write . G4eea) (&i/o-read . G4ee9) (&i/o . G4ee8) (&undefined . G4ee7) (&syntax . G4ee6) (&lexical . G4ee5) (&implementation-restriction . G4ee4) (&non-continuable . G4ee3) (&who . G4ee2) (&irritants . G4ee1) (&assertion . G4ee0) (&violation . G4edf) (&error . G4ede) (&serious . G4edd) (&warning . G4edc) (&message . G4edb) (&condition . G4eda) (define-condition-type . G4ed9) (define-enumeration . G4ed8) (define-record-type . G4ed7) (parent-rtd . G4ed6) (nongenerative . G4ed5) (opaque . G4ed4) (sealed . G4ed3) (protocol . G4ed2) (parent . G4ed1) (immutable . G4ed0) (mutable . G4ecf) (fields . G4ece) (error-handling-mode . G4ecd) (file-options . G4ecc) (buffer-mode . G4ecb) (eol-style . G4eca) (guard . G4ec9) (unsyntax-splicing . G4ec6) (unsyntax . G4ec5) (unquote-splicing . G4ec4) (unquote . G4ec3) (_ . G4ec2) (else . G4ec1) (=> . G4ec0) (... . G4ebf) (assert . G4ebe) (endianness . G4ebd) (or . G4eba) (and . G4eb9) (do . G4eb8) (cond . G4eb7) (let* . G4eb6) (let . G4eb5) (let*-values . G4eb4) (let-values . G4eb3) (identifier-syntax . G4eb2) (with-syntax . G4eb1) (quasisyntax . G4eb0) (quasiquote . G4eaf) (syntax-rules . G4eae) (include . G4ead) (record-constructor-descriptor . G4eab) (record-type-descriptor . G4eaa) (case . G4ea9) (unless . G4ea7) (when . G4ea6) (if . G4ea5) (letrec* . G4ea4) (letrec . G4ea3) (case-lambda . G4ea1) (lambda . G4ea0) (syntax . G4e9f) (syntax-case . G4e9e) (quote . G4e9d) (letrec-syntax . G4e9b) (let-syntax . G4e9a) (set! . G4e99) (import . G4e98) (begin . G4e97) (define-syntax . G4e95) (define . G4e94)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G5198 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G4ec4) (unquote . G4ec3) (delay . G4ebc) (or . G4eba) (and . G4eb9) (do . G4eb8) (cond . G4eb7) (let* . G4eb6) (let . G4eb5) (quasiquote . G4eaf) (syntax-rules . G4eae) (case . G4ea9) (if . G4ea5) (letrec . G4ea3) (lambda . G4ea0) (quote . G4e9d) (letrec-syntax . G4e9b) (let-syntax . G4e9a) (set! . G4e99) (begin . G4e97) (define-syntax . G4e95) (define . G4e94)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G5199 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G5109) (string-ci>=? . G5108) (string-ci=? . G5107) (string-ci<? . G5106) (string-ci<=? . G5105) (char-whitespace? . G5104) (char-upper-case? . G5103) (char-numeric? . G5101) (char-lower-case? . G5100) (char-upcase . G50fe) (char-downcase . G50fb) (char-ci>? . G50fa) (char-ci>=? . G50f9) (char-ci=? . G50f8) (char-ci<? . G50f7) (char-ci<=? . G50f6) (char-alphabetic? . G50f5) (call-with-output-file . G50c9) (call-with-input-file . G50c8) (write-char . G50c7) (write . G50c6) (with-output-to-file . G50c5) (with-input-from-file . G50c4) (read-char . G50c3) (read . G50c2) (peek-char . G50c1) (open-output-file . G50c0) (open-input-file . G50bf) (newline . G50be) (display . G50bd) (close-output-port . G50bc) (close-input-port . G50bb) (eof-object . G50b9) (current-output-port . G50b7) (current-input-port . G50b6) (output-port? . G50b5) (input-port? . G50b4) (scheme-report-environment . G315d) (quotient . G507a) (null-environment . G315b) (remainder . G5079) (modulo . G5078) (inexact->exact . G5077) (force . G5076) (exact->inexact . G5075) (string-fill! . G5073) (string-set! . G5072) (set-cdr! . G5071) (set-car! . G5070) (memv . G506a) (memq . G5069) (member . G5067) (assv . G505f) (assq . G505e) (assoc . G505c) (eval . G3161) (zero? . G4f99) (vector? . G4f98) (vector-set! . G4f97) (vector-ref . G4f96) (vector-length . G4f94) (vector-fill! . G4f92) (vector->list . G4f91) (vector . G4f90) (values . G4f8f) (truncate . G4f8e) (tan . G4f8d) (symbol? . G4f8c) (symbol->string . G4f8a) (substring . G4f89) (string? . G4f88) (string>? . G4f87) (string>=? . G4f86) (string=? . G4f85) (string<? . G4f84) (string<=? . G4f83) (string-ref . G4f82) (string-length . G4f81) (string-copy . G4f7f) (string-append . G4f7e) (string->symbol . G4f7d) (string->number . G4f7c) (string->list . G4f7b) (string . G4f7a) (sqrt . G4f79) (sin . G4f78) (round . G4f77) (reverse . G4f76) (real? . G4f75) (real-part . G4f73) (rationalize . G4f72) (rational? . G4f71) (procedure? . G4f6f) (positive? . G4f6e) (pair? . G4f6d) (odd? . G4f6c) (numerator . G4f6b) (number? . G4f6a) (number->string . G4f69) (not . G4f67) (negative? . G4f66) (min . G4f64) (max . G4f63) (map . G4f62) (make-vector . G4f61) (make-string . G4f60) (make-rectangular . G4f5f) (make-polar . G4f5e) (magnitude . G4f5d) (log . G4f5c) (list? . G4f5b) (list-tail . G4f5a) (list-ref . G4f59) (list->vector . G4f58) (list->string . G4f57) (list . G4f56) (length . G4f55) (lcm . G4f54) (integer? . G4f53) (integer->char . G4f51) (inexact? . G4f4f) (imag-part . G4f4d) (gcd . G4f4c) (for-each . G4f4b) (floor . G4f4a) (expt . G4f48) (exp . G4f47) (exact? . G4f46) (even? . G4f43) (eqv? . G4f41) (equal? . G4f40) (eq? . G4f3f) (dynamic-wind . G4f3e) (denominator . G4f37) (cos . G4f36) (cons . G4f35) (complex? . G4f34) (char? . G4f33) (char>? . G4f32) (char>=? . G4f31) (char=? . G4f30) (char<? . G4f2f) (char<=? . G4f2e) (char->integer . G4f2d) (ceiling . G4f2c) (call-with-values . G4f2b) (call-with-current-continuation . G4f29) (cddddr . G4f28) (cdddar . G4f27) (cddadr . G4f26) (cddaar . G4f25) (cdaddr . G4f24) (cdadar . G4f23) (cdaadr . G4f22) (cdaaar . G4f21) (cadddr . G4f20) (caddar . G4f1f) (cadadr . G4f1e) (cadaar . G4f1d) (caaddr . G4f1c) (caadar . G4f1b) (caaadr . G4f1a) (caaaar . G4f19) (cdddr . G4f18) (cddar . G4f17) (cdadr . G4f16) (cdaar . G4f15) (caddr . G4f14) (cadar . G4f13) (caadr . G4f12) (caaar . G4f11) (cddr . G4f10) (cdar . G4f0f) (cadr . G4f0e) (caar . G4f0d) (cdr . G4f0c) (car . G4f0b) (boolean? . G4f0a) (atan . G4f08) (asin . G4f06) (apply . G4f05) (append . G4f04) (angle . G4f03) (acos . G4f02) (abs . G4f01) (/ . G4f00) (* . G4eff) (- . G4efe) (+ . G4efd) (>= . G4efc) (> . G4efb) (= . G4efa) (<= . G4ef9) (< . G4ef8) (unquote-splicing . G4ec4) (unquote . G4ec3) (delay . G4ebc) (or . G4eba) (and . G4eb9) (do . G4eb8) (cond . G4eb7) (let* . G4eb6) (let . G4eb5) (quasiquote . G4eaf) (syntax-rules . G4eae) (case . G4ea9) (if . G4ea5) (letrec . G4ea3) (lambda . G4ea0) (quote . G4e9d) (letrec-syntax . G4e9b) (let-syntax . G4e9a) (set! . G4e99) (begin . G4e97) (define-syntax . G4e95) (define . G4e94)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G519a '(psyntax modules) '() '() '() '() '((module . G4e96)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G519b '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G519c '(rnrs) '(6) '() '() '() '((regexp? . G5157) (string-upcase . G5111) (string-titlecase . G5110) (string-normalize-nfkd . G510f) (string-normalize-nfkc . G510e) (string-normalize-nfd . G510d) (string-normalize-nfc . G510c) (string-foldcase . G510b) (string-downcase . G510a) (string-ci>? . G5109) (string-ci>=? . G5108) (string-ci=? . G5107) (string-ci<? . G5106) (string-ci<=? . G5105) (char-whitespace? . G5104) (char-upper-case? . G5103) (char-title-case? . G5102) (char-numeric? . G5101) (char-lower-case? . G5100) (char-general-category . G50ff) (char-upcase . G50fe) (char-titlecase . G50fd) (char-foldcase . G50fc) (char-downcase . G50fb) (char-ci>? . G50fa) (char-ci>=? . G50f9) (char-ci=? . G50f8) (char-ci<? . G50f7) (char-ci<=? . G50f6) (char-alphabetic? . G50f5) (make-variable-transformer . G2e8e) (identifier? . G3185) (generate-temporaries . G316f) (free-identifier=? . G3171) (syntax->datum . G3189) (datum->syntax . G3187) (bound-identifier=? . G3173) (record-type-descriptor? . G50f4) (record-predicate . G50f3) (record-mutator . G50f2) (record-constructor . G50f1) (record-accessor . G50f0) (make-record-type-descriptor . G50ef) (make-record-constructor-descriptor . G50ee) (record? . G50ed) (record-type-uid . G50ec) (record-type-sealed? . G50eb) (record-type-parent . G50ea) (record-type-opaque? . G50e9) (record-type-name . G50e8) (record-type-generative? . G50e7) (record-type-field-names . G50e6) (record-rtd . G50e5) (record-field-mutable? . G50e4) (delete-file . G50e3) (file-exists? . G50e2) (vector-sort! . G50e1) (vector-sort . G50e0) (list-sort . G50df) (symbol-hash . G50de) (string-ci-hash . G50dd) (string-hash . G50dc) (equal-hash . G50db) (hashtable-equivalence-function . G50da) (make-hashtable . G50d9) (hashtable-hash-function . G50d8) (make-eqv-hashtable . G50d7) (make-eq-hashtable . G50d6) (hashtable? . G50d5) (hashtable-update! . G50d4) (hashtable-size . G50d3) (hashtable-set! . G50d2) (hashtable-ref . G50d1) (hashtable-mutable? . G50d0) (hashtable-keys . G50cf) (hashtable-entries . G50ce) (hashtable-delete! . G50cd) (hashtable-copy . G50cc) (hashtable-contains? . G50cb) (hashtable-clear! . G50ca) (call-with-output-file . G50c9) (call-with-input-file . G50c8) (write-char . G50c7) (write . G50c6) (with-output-to-file . G50c5) (with-input-from-file . G50c4) (read-char . G50c3) (read . G50c2) (peek-char . G50c1) (open-output-file . G50c0) (open-input-file . G50bf) (newline . G50be) (display . G50bd) (close-output-port . G50bc) (close-input-port . G50bb) (eof-object? . G50ba) (eof-object . G50b9) (current-error-port . G50b8) (current-output-port . G50b7) (current-input-port . G50b6) (output-port? . G50b5) (input-port? . G50b4) (utf-8-codec . G50b3) (utf-16-codec . G50b2) (transcoder-error-handling-mode . G50b1) (transcoder-eol-style . G50b0) (transcoder-codec . G50af) (transcoded-port . G50ae) (textual-port? . G50ad) (string->bytevector . G50ac) (standard-output-port . G50ab) (standard-input-port . G50aa) (standard-error-port . G50a9) (set-port-position! . G50a8) (put-u8 . G50a7) (put-string . G50a6) (put-datum . G50a5) (put-char . G50a4) (put-bytevector . G50a3) (port? . G50a2) (port-transcoder . G50a1) (port-position . G50a0) (port-has-set-port-position!? . G509f) (port-has-port-position? . G509e) (port-eof? . G509d) (output-port-buffer-mode . G509c) (open-string-output-port . G509b) (open-string-input-port . G509a) (open-file-output-port . G5099) (open-file-input/output-port . G5098) (open-file-input-port . G5097) (open-bytevector-output-port . G5096) (open-bytevector-input-port . G5095) (native-transcoder . G5094) (native-eol-style . G5093) (make-transcoder . G5092) (latin-1-codec . G5091) (make-i/o-write-error . G4cd2) (make-i/o-read-error . G4cbe) (make-i/o-port-error . G4d69) (make-i/o-invalid-position-error . G4ce7) (make-i/o-filename-error . G4d00) (make-i/o-file-protection-error . G4d18) (make-i/o-file-is-read-only-error . G4d2c) (make-i/o-file-does-not-exist-error . G4d54) (make-i/o-file-already-exists-error . G4d40) (make-i/o-error . G4caa) (make-i/o-encoding-error . G4d96) (make-i/o-decoding-error . G4d81) (make-custom-textual-output-port . G5090) (make-custom-textual-input/output-port . G508f) (make-custom-textual-input-port . G508e) (make-custom-binary-output-port . G508d) (make-custom-binary-input/output-port . G508c) (make-custom-binary-input-port . G508b) (make-bytevector . G508a) (lookahead-u8 . G5089) (lookahead-char . G5088) (i/o-write-error? . G4cd4) (i/o-read-error? . G4cc0) (i/o-port-error? . G4d6d) (i/o-invalid-position-error? . G4ceb) (i/o-filename-error? . G4d04) (i/o-file-protection-error? . G4d1a) (i/o-file-is-read-only-error? . G4d2e) (i/o-file-does-not-exist-error? . G4d56) (i/o-file-already-exists-error? . G4d42) (i/o-error? . G4cac) (i/o-error-port . G4d6f) (i/o-error-filename . G4d06) (i/o-encoding-error? . G4d9a) (i/o-encoding-error-char . G4d9c) (i/o-decoding-error? . G4d83) (get-u8 . G5087) (get-string-n! . G5086) (get-string-n . G5085) (get-string-all . G5084) (get-line . G5083) (get-datum . G5082) (get-char . G5081) (get-bytevector-some . G5080) (get-bytevector-n! . G507f) (get-bytevector-n . G507e) (get-bytevector-all . G507d) (flush-output-port . G507c) (close-port . G507b) (exit . G5074) (command-line . G4df5) (remove . G506f) (remv . G506e) (remp . G506d) (remq . G506c) (partition . G506b) (memv . G506a) (memq . G5069) (memp . G5068) (member . G5067) (exists . G5066) (for-all . G5065) (fold-right . G5064) (fold-left . G5063) (find . G5062) (filter . G5061) (cons* . G5060) (assv . G505f) (assq . G505e) (assp . G505d) (assoc . G505c) (call-with-string-output-port . G505b) (call-with-port . G505a) (call-with-bytevector-output-port . G5059) (bytevector->string . G5058) (buffer-mode? . G5057) (binary-port? . G5056) (with-exception-handler . G5055) (raise-continuable . G5054) (raise . G5053) (make-enumeration . G5052) (enum-set=? . G5051) (enum-set-universe . G5050) (enum-set-union . G504f) (enum-set-subset? . G504e) (enum-set-projection . G504d) (enum-set-member? . G504c) (enum-set-intersection . G504b) (enum-set-indexer . G504a) (enum-set-difference . G5049) (enum-set-constructor . G5048) (enum-set-complement . G5047) (enum-set->list . G5046) (who-condition? . G4b94) (warning? . G4b14) (violation? . G4b50) (undefined-violation? . G4c04) (syntax-violation? . G4bec) (syntax-violation-subform . G4bf0) (syntax-violation-form . G4bee) (syntax-violation . G3183) (simple-conditions . G5045) (serious-condition? . G4b28) (non-continuable-violation? . G4baa) (message-condition? . G4afe) (make-who-condition . G4b90) (make-warning . G4b12) (make-violation . G4b4e) (make-undefined-violation . G4c02) (make-syntax-violation . G4be6) (make-serious-condition . G4b26) (make-non-continuable-violation . G4ba8) (make-message-condition . G4afa) (make-lexical-violation . G4bd0) (make-irritants-condition . G4b77) (make-implementation-restriction-violation . G4bbc) (make-error . G4b3a) (make-assertion-violation . G4b62) (lexical-violation? . G4bd2) (irritants-condition? . G4b7b) (implementation-restriction-violation? . G4bbe) (error? . G4b3c) (condition-who . G4b96) (condition-predicate . G5044) (condition-message . G4b00) (condition-irritants . G4b7d) (condition-accessor . G5043) (condition . G5042) (assertion-violation? . G4b64) (condition? . G5041) (utf32->string . G5040) (utf16->string . G503f) (utf8->string . G503e) (uint-list->bytevector . G503d) (u8-list->bytevector . G503c) (string->utf8 . G503b) (string->utf32 . G503a) (string->utf16 . G5039) (sint-list->bytevector . G5038) (native-endianness . G5037) (bytevector? . G5036) (bytevector=? . G5035) (bytevector-uint-set! . G5034) (bytevector-uint-ref . G5033) (bytevector-u8-set! . G5032) (bytevector-u8-ref . G5031) (bytevector-u64-set! . G5030) (bytevector-u64-ref . G502f) (bytevector-u64-native-set! . G502e) (bytevector-u64-native-ref . G502d) (bytevector-u32-set! . G502c) (bytevector-u32-ref . G502b) (bytevector-u32-native-set! . G502a) (bytevector-u32-native-ref . G5029) (bytevector-u16-set! . G5028) (bytevector-u16-ref . G5027) (bytevector-u16-native-set! . G5026) (bytevector-u16-native-ref . G5025) (bytevector-sint-set! . G5024) (bytevector-sint-ref . G5023) (bytevector-s8-set! . G5022) (bytevector-s8-ref . G5021) (bytevector-s64-set! . G5020) (bytevector-s64-ref . G501f) (bytevector-s64-native-set! . G501e) (bytevector-s64-native-ref . G501d) (bytevector-s32-set! . G501c) (bytevector-s32-ref . G501b) (bytevector-s32-native-set! . G501a) (bytevector-s32-native-ref . G5019) (bytevector-s16-set! . G5018) (bytevector-s16-ref . G5017) (bytevector-s16-native-set! . G5016) (bytevector-s16-native-ref . G5015) (bytevector-length . G5014) (bytevector-ieee-single-ref . G5013) (bytevector-ieee-single-set! . G5012) (bytevector-ieee-single-native-set! . G5011) (bytevector-ieee-single-native-ref . G5010) (bytevector-ieee-double-set! . G500f) (bytevector-ieee-double-ref . G500e) (bytevector-ieee-double-native-set! . G500d) (bytevector-ieee-double-native-ref . G500c) (bytevector-fill! . G500b) (bytevector-copy! . G500a) (bytevector-copy . G5009) (bytevector->uint-list . G5008) (bytevector->u8-list . G5007) (bytevector->sint-list . G5006) (no-nans-violation? . G4c2c) (no-infinities-violation? . G4c18) (make-no-nans-violation . G4c2a) (make-no-infinities-violation . G4c16) (real->flonum . G5005) (flzero? . G5004) (fltruncate . G5003) (fltan . G5002) (flsqrt . G5001) (flsin . G5000) (flround . G4fff) (flpositive? . G4ffe) (flonum? . G4ffd) (flodd? . G4ffc) (flnumerator . G4ffb) (flnegative? . G4ffa) (flnan? . G4ff9) (flmod0 . G4ff8) (flmod . G4ff7) (flmin . G4ff6) (flmax . G4ff5) (fllog . G4ff4) (flinteger? . G4ff3) (flinfinite? . G4ff2) (flfloor . G4ff1) (flfinite? . G4ff0) (flexpt . G4fef) (flexp . G4fee) (fleven? . G4fed) (fldiv0-and-mod0 . G4fec) (fldiv0 . G4feb) (fldiv-and-mod . G4fea) (fldiv . G4fe9) (fldenominator . G4fe8) (flcos . G4fe7) (flceiling . G4fe6) (flatan . G4fe5) (flasin . G4fe4) (flacos . G4fe3) (flabs . G4fe2) (fl>? . G4fe1) (fl>=? . G4fe0) (fl=? . G4fdf) (fl<? . G4fde) (fl<=? . G4fdd) (fl/ . G4fdc) (fl- . G4fdb) (fl+ . G4fda) (fl* . G4fd9) (fixnum->flonum . G4fd8) (fxzero? . G4fd7) (fxxor . G4fd6) (fxrotate-bit-field . G4fd5) (fxreverse-bit-field . G4fd4) (fxpositive? . G4fd3) (fxodd? . G4fd2) (fxnot . G4fd1) (fxnegative? . G4fd0) (fxmod0 . G4fcf) (fxmod . G4fce) (fxmin . G4fcd) (fxmax . G4fcc) (fxlength . G4fcb) (fxior . G4fca) (fxif . G4fc9) (fxfirst-bit-set . G4fc8) (fxeven? . G4fc7) (fxdiv0-and-mod0 . G4fc6) (fxdiv0 . G4fc5) (fxdiv-and-mod . G4fc4) (fxdiv . G4fc3) (fxcopy-bit-field . G4fc2) (fxcopy-bit . G4fc1) (fxbit-set? . G4fc0) (fxbit-field . G4fbf) (fxbit-count . G4fbe) (fxarithmetic-shift-right . G4fbd) (fxarithmetic-shift-left . G4fbc) (fxarithmetic-shift . G4fbb) (fxand . G4fba) (fx>? . G4fb9) (fx>=? . G4fb8) (fx=? . G4fb7) (fx<? . G4fb6) (fx<=? . G4fb5) (fx-/carry . G4fb4) (fx- . G4fb3) (fx+/carry . G4fb2) (fx+ . G4fb1) (fx*/carry . G4fb0) (fx* . G4faf) (greatest-fixnum . G4fae) (least-fixnum . G4fad) (fixnum-width . G4fac) (fixnum? . G4fab) (bitwise-rotate-bit-field . G4faa) (bitwise-reverse-bit-field . G4fa9) (bitwise-length . G4fa8) (bitwise-if . G4fa7) (bitwise-first-bit-set . G4fa6) (bitwise-copy-bit-field . G4fa5) (bitwise-copy-bit . G4fa4) (bitwise-bit-set? . G4fa3) (bitwise-bit-field . G4fa2) (bitwise-bit-count . G4fa1) (bitwise-xor . G4fa0) (bitwise-ior . G4f9f) (bitwise-and . G4f9e) (bitwise-not . G4f9d) (bitwise-arithmetic-shift-right . G4f9c) (bitwise-arithmetic-shift-left . G4f9b) (bitwise-arithmetic-shift . G4f9a) (zero? . G4f99) (vector? . G4f98) (vector-set! . G4f97) (vector-ref . G4f96) (vector-map . G4f95) (vector-length . G4f94) (vector-for-each . G4f93) (vector-fill! . G4f92) (vector->list . G4f91) (vector . G4f90) (values . G4f8f) (truncate . G4f8e) (tan . G4f8d) (symbol? . G4f8c) (symbol=? . G4f8b) (symbol->string . G4f8a) (substring . G4f89) (string? . G4f88) (string>? . G4f87) (string>=? . G4f86) (string=? . G4f85) (string<? . G4f84) (string<=? . G4f83) (string-ref . G4f82) (string-length . G4f81) (string-for-each . G4f80) (string-copy . G4f7f) (string-append . G4f7e) (string->symbol . G4f7d) (string->number . G4f7c) (string->list . G4f7b) (string . G4f7a) (sqrt . G4f79) (sin . G4f78) (round . G4f77) (reverse . G4f76) (real? . G4f75) (real-valued? . G4f74) (real-part . G4f73) (rationalize . G4f72) (rational? . G4f71) (rational-valued? . G4f70) (procedure? . G4f6f) (positive? . G4f6e) (pair? . G4f6d) (odd? . G4f6c) (numerator . G4f6b) (number? . G4f6a) (number->string . G4f69) (null? . G4f68) (not . G4f67) (negative? . G4f66) (nan? . G4f65) (min . G4f64) (max . G4f63) (map . G4f62) (make-vector . G4f61) (make-string . G4f60) (make-rectangular . G4f5f) (make-polar . G4f5e) (magnitude . G4f5d) (log . G4f5c) (list? . G4f5b) (list-tail . G4f5a) (list-ref . G4f59) (list->vector . G4f58) (list->string . G4f57) (list . G4f56) (length . G4f55) (lcm . G4f54) (integer? . G4f53) (integer-valued? . G4f52) (integer->char . G4f51) (infinite? . G4f50) (inexact? . G4f4f) (inexact . G4f4e) (imag-part . G4f4d) (gcd . G4f4c) (for-each . G4f4b) (floor . G4f4a) (finite? . G4f49) (expt . G4f48) (exp . G4f47) (exact? . G4f46) (exact-integer-sqrt . G4f45) (exact . G4f44) (even? . G4f43) (error . G4f42) (eqv? . G4f41) (equal? . G4f40) (eq? . G4f3f) (dynamic-wind . G4f3e) (div0-and-mod0 . G4f3d) (mod0 . G4f3c) (div0 . G4f3b) (div-and-mod . G4f3a) (mod . G4f39) (div . G4f38) (denominator . G4f37) (cos . G4f36) (cons . G4f35) (complex? . G4f34) (char? . G4f33) (char>? . G4f32) (char>=? . G4f31) (char=? . G4f30) (char<? . G4f2f) (char<=? . G4f2e) (char->integer . G4f2d) (ceiling . G4f2c) (call-with-values . G4f2b) (call/cc . G4f2a) (call-with-current-continuation . G4f29) (cddddr . G4f28) (cdddar . G4f27) (cddadr . G4f26) (cddaar . G4f25) (cdaddr . G4f24) (cdadar . G4f23) (cdaadr . G4f22) (cdaaar . G4f21) (cadddr . G4f20) (caddar . G4f1f) (cadadr . G4f1e) (cadaar . G4f1d) (caaddr . G4f1c) (caadar . G4f1b) (caaadr . G4f1a) (caaaar . G4f19) (cdddr . G4f18) (cddar . G4f17) (cdadr . G4f16) (cdaar . G4f15) (caddr . G4f14) (cadar . G4f13) (caadr . G4f12) (caaar . G4f11) (cddr . G4f10) (cdar . G4f0f) (cadr . G4f0e) (caar . G4f0d) (cdr . G4f0c) (car . G4f0b) (boolean? . G4f0a) (boolean=? . G4f09) (atan . G4f08) (assertion-violation . G4f07) (asin . G4f06) (apply . G4f05) (append . G4f04) (angle . G4f03) (acos . G4f02) (abs . G4f01) (/ . G4f00) (* . G4eff) (- . G4efe) (+ . G4efd) (>= . G4efc) (> . G4efb) (= . G4efa) (<= . G4ef9) (< . G4ef8) (&no-nans . G4ef5) (&no-infinities . G4ef4) (&i/o-encoding . G4ef3) (&i/o-decoding . G4ef2) (&i/o-port . G4ef1) (&i/o-file-does-not-exist . G4ef0) (&i/o-file-already-exists . G4eef) (&i/o-file-is-read-only . G4eee) (&i/o-file-protection . G4eed) (&i/o-filename . G4eec) (&i/o-invalid-position . G4eeb) (&i/o-write . G4eea) (&i/o-read . G4ee9) (&i/o . G4ee8) (&undefined . G4ee7) (&syntax . G4ee6) (&lexical . G4ee5) (&implementation-restriction . G4ee4) (&non-continuable . G4ee3) (&who . G4ee2) (&irritants . G4ee1) (&assertion . G4ee0) (&violation . G4edf) (&error . G4ede) (&serious . G4edd) (&warning . G4edc) (&message . G4edb) (&condition . G4eda) (define-condition-type . G4ed9) (define-enumeration . G4ed8) (define-record-type . G4ed7) (parent-rtd . G4ed6) (nongenerative . G4ed5) (opaque . G4ed4) (sealed . G4ed3) (protocol . G4ed2) (parent . G4ed1) (immutable . G4ed0) (mutable . G4ecf) (fields . G4ece) (error-handling-mode . G4ecd) (file-options . G4ecc) (buffer-mode . G4ecb) (eol-style . G4eca) (guard . G4ec9) (unsyntax-splicing . G4ec6) (unsyntax . G4ec5) (unquote-splicing . G4ec4) (unquote . G4ec3) (_ . G4ec2) (else . G4ec1) (=> . G4ec0) (... . G4ebf) (assert . G4ebe) (endianness . G4ebd) (or . G4eba) (and . G4eb9) (do . G4eb8) (cond . G4eb7) (let* . G4eb6) (let . G4eb5) (let*-values . G4eb4) (let-values . G4eb3) (identifier-syntax . G4eb2) (with-syntax . G4eb1) (quasisyntax . G4eb0) (quasiquote . G4eaf) (syntax-rules . G4eae) (record-constructor-descriptor . G4eab) (record-type-descriptor . G4eaa) (case . G4ea9) (unless . G4ea7) (when . G4ea6) (if . G4ea5) (letrec* . G4ea4) (letrec . G4ea3) (case-lambda . G4ea1) (lambda . G4ea0) (syntax . G4e9f) (syntax-case . G4e9e) (quote . G4e9d) (letrec-syntax . G4e9b) (let-syntax . G4e9a) (set! . G4e99) (begin . G4e97) (define-syntax . G4e95) (define . G4e94)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G519d '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G315d) (quotient . G507a) (null-environment . G315b) (remainder . G5079) (modulo . G5078) (inexact->exact . G5077) (force . G5076) (exact->inexact . G5075) (delay . G4ebc)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G519e '(rnrs control) '(6) '() '() '() '((do . G4eb8) (unless . G4ea7) (when . G4ea6) (case-lambda . G4ea1)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G519f '(rnrs eval) '(6) '() '() '() '((eval . G3161) (environment . G3159)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51a0 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G5071) (set-car! . G5070)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51a1 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G5073) (string-set! . G5072)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51a2 '(rnrs programs) '(6) '() '() '() '((exit . G5074) (command-line . G4df5)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51a3 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2e8e) (identifier? . G3185) (generate-temporaries . G316f) (free-identifier=? . G3171) (syntax->datum . G3189) (datum->syntax . G3187) (bound-identifier=? . G3173) (syntax-violation . G3183) (unsyntax-splicing . G4ec6) (unsyntax . G4ec5) (_ . G4ec2) (... . G4ebf) (with-syntax . G4eb1) (quasisyntax . G4eb0) (syntax . G4e9f) (syntax-case . G4e9e)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51a4 '(rnrs files) '(6) '() '() '() '((delete-file . G50e3) (file-exists? . G50e2) (make-i/o-write-error . G4cd2) (make-i/o-read-error . G4cbe) (make-i/o-port-error . G4d69) (make-i/o-invalid-position-error . G4ce7) (make-i/o-filename-error . G4d00) (make-i/o-file-protection-error . G4d18) (make-i/o-file-is-read-only-error . G4d2c) (make-i/o-file-does-not-exist-error . G4d54) (make-i/o-file-already-exists-error . G4d40) (make-i/o-error . G4caa) (i/o-write-error? . G4cd4) (i/o-read-error? . G4cc0) (i/o-port-error? . G4d6d) (i/o-invalid-position-error? . G4ceb) (i/o-filename-error? . G4d04) (i/o-file-protection-error? . G4d1a) (i/o-file-is-read-only-error? . G4d2e) (i/o-file-does-not-exist-error? . G4d56) (i/o-file-already-exists-error? . G4d42) (i/o-error? . G4cac) (i/o-error-port . G4d6f) (i/o-error-filename . G4d06) (&i/o-port . G4ef1) (&i/o-file-does-not-exist . G4ef0) (&i/o-file-already-exists . G4eef) (&i/o-file-is-read-only . G4eee) (&i/o-file-protection . G4eed) (&i/o-filename . G4eec) (&i/o-invalid-position . G4eeb) (&i/o-write . G4eea) (&i/o-read . G4ee9) (&i/o . G4ee8)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51a5 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G50e1) (vector-sort . G50e0) (list-sort . G50df)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51a6 '(rnrs base) '(6) '() '() '() '((zero? . G4f99) (vector? . G4f98) (vector-set! . G4f97) (vector-ref . G4f96) (vector-map . G4f95) (vector-length . G4f94) (vector-for-each . G4f93) (vector-fill! . G4f92) (vector->list . G4f91) (vector . G4f90) (values . G4f8f) (truncate . G4f8e) (tan . G4f8d) (symbol? . G4f8c) (symbol=? . G4f8b) (symbol->string . G4f8a) (substring . G4f89) (string? . G4f88) (string>? . G4f87) (string>=? . G4f86) (string=? . G4f85) (string<? . G4f84) (string<=? . G4f83) (string-ref . G4f82) (string-length . G4f81) (string-for-each . G4f80) (string-copy . G4f7f) (string-append . G4f7e) (string->symbol . G4f7d) (string->number . G4f7c) (string->list . G4f7b) (string . G4f7a) (sqrt . G4f79) (sin . G4f78) (round . G4f77) (reverse . G4f76) (real? . G4f75) (real-valued? . G4f74) (real-part . G4f73) (rationalize . G4f72) (rational? . G4f71) (rational-valued? . G4f70) (procedure? . G4f6f) (positive? . G4f6e) (pair? . G4f6d) (odd? . G4f6c) (numerator . G4f6b) (number? . G4f6a) (number->string . G4f69) (null? . G4f68) (not . G4f67) (negative? . G4f66) (nan? . G4f65) (min . G4f64) (max . G4f63) (map . G4f62) (make-vector . G4f61) (make-string . G4f60) (make-rectangular . G4f5f) (make-polar . G4f5e) (magnitude . G4f5d) (log . G4f5c) (list? . G4f5b) (list-tail . G4f5a) (list-ref . G4f59) (list->vector . G4f58) (list->string . G4f57) (list . G4f56) (length . G4f55) (lcm . G4f54) (integer? . G4f53) (integer-valued? . G4f52) (integer->char . G4f51) (infinite? . G4f50) (inexact? . G4f4f) (inexact . G4f4e) (imag-part . G4f4d) (gcd . G4f4c) (for-each . G4f4b) (floor . G4f4a) (finite? . G4f49) (expt . G4f48) (exp . G4f47) (exact? . G4f46) (exact-integer-sqrt . G4f45) (exact . G4f44) (even? . G4f43) (error . G4f42) (eqv? . G4f41) (equal? . G4f40) (eq? . G4f3f) (dynamic-wind . G4f3e) (div0-and-mod0 . G4f3d) (mod0 . G4f3c) (div0 . G4f3b) (div-and-mod . G4f3a) (mod . G4f39) (div . G4f38) (denominator . G4f37) (cos . G4f36) (cons . G4f35) (complex? . G4f34) (char? . G4f33) (char>? . G4f32) (char>=? . G4f31) (char=? . G4f30) (char<? . G4f2f) (char<=? . G4f2e) (char->integer . G4f2d) (ceiling . G4f2c) (call-with-values . G4f2b) (call/cc . G4f2a) (call-with-current-continuation . G4f29) (cddddr . G4f28) (cdddar . G4f27) (cddadr . G4f26) (cddaar . G4f25) (cdaddr . G4f24) (cdadar . G4f23) (cdaadr . G4f22) (cdaaar . G4f21) (cadddr . G4f20) (caddar . G4f1f) (cadadr . G4f1e) (cadaar . G4f1d) (caaddr . G4f1c) (caadar . G4f1b) (caaadr . G4f1a) (caaaar . G4f19) (cdddr . G4f18) (cddar . G4f17) (cdadr . G4f16) (cdaar . G4f15) (caddr . G4f14) (cadar . G4f13) (caadr . G4f12) (caaar . G4f11) (cddr . G4f10) (cdar . G4f0f) (cadr . G4f0e) (caar . G4f0d) (cdr . G4f0c) (car . G4f0b) (boolean? . G4f0a) (boolean=? . G4f09) (atan . G4f08) (assertion-violation . G4f07) (asin . G4f06) (apply . G4f05) (append . G4f04) (angle . G4f03) (acos . G4f02) (abs . G4f01) (/ . G4f00) (* . G4eff) (- . G4efe) (+ . G4efd) (>= . G4efc) (> . G4efb) (= . G4efa) (<= . G4ef9) (< . G4ef8) (unquote-splicing . G4ec4) (unquote . G4ec3) (_ . G4ec2) (else . G4ec1) (=> . G4ec0) (... . G4ebf) (assert . G4ebe) (or . G4eba) (and . G4eb9) (cond . G4eb7) (let* . G4eb6) (let . G4eb5) (let*-values . G4eb4) (let-values . G4eb3) (identifier-syntax . G4eb2) (quasiquote . G4eaf) (syntax-rules . G4eae) (case . G4ea9) (if . G4ea5) (letrec* . G4ea4) (letrec . G4ea3) (lambda . G4ea0) (quote . G4e9d) (letrec-syntax . G4e9b) (let-syntax . G4e9a) (set! . G4e99) (begin . G4e97) (define-syntax . G4e95) (define . G4e94)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51a7 '(rnrs lists) '(6) '() '() '() '((remove . G506f) (remv . G506e) (remp . G506d) (remq . G506c) (partition . G506b) (memv . G506a) (memq . G5069) (memp . G5068) (member . G5067) (exists . G5066) (for-all . G5065) (fold-right . G5064) (fold-left . G5063) (find . G5062) (filter . G5061) (cons* . G5060) (assv . G505f) (assq . G505e) (assp . G505d) (assoc . G505c)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51a8 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G50c9) (call-with-input-file . G50c8) (write-char . G50c7) (write . G50c6) (with-output-to-file . G50c5) (with-input-from-file . G50c4) (read-char . G50c3) (read . G50c2) (peek-char . G50c1) (open-output-file . G50c0) (open-input-file . G50bf) (newline . G50be) (display . G50bd) (close-output-port . G50bc) (close-input-port . G50bb) (eof-object? . G50ba) (eof-object . G50b9) (current-error-port . G50b8) (current-output-port . G50b7) (current-input-port . G50b6) (output-port? . G50b5) (input-port? . G50b4) (make-i/o-write-error . G4cd2) (make-i/o-read-error . G4cbe) (make-i/o-port-error . G4d69) (make-i/o-invalid-position-error . G4ce7) (make-i/o-filename-error . G4d00) (make-i/o-file-protection-error . G4d18) (make-i/o-file-is-read-only-error . G4d2c) (make-i/o-file-does-not-exist-error . G4d54) (make-i/o-file-already-exists-error . G4d40) (make-i/o-error . G4caa) (i/o-write-error? . G4cd4) (i/o-read-error? . G4cc0) (i/o-port-error? . G4d6d) (i/o-invalid-position-error? . G4ceb) (i/o-filename-error? . G4d04) (i/o-file-protection-error? . G4d1a) (i/o-file-is-read-only-error? . G4d2e) (i/o-file-does-not-exist-error? . G4d56) (i/o-file-already-exists-error? . G4d42) (i/o-error? . G4cac) (i/o-error-port . G4d6f) (i/o-error-filename . G4d06) (&i/o-port . G4ef1) (&i/o-file-does-not-exist . G4ef0) (&i/o-file-already-exists . G4eef) (&i/o-file-is-read-only . G4eee) (&i/o-file-protection . G4eed) (&i/o-filename . G4eec) (&i/o-invalid-position . G4eeb) (&i/o-write . G4eea) (&i/o-read . G4ee9) (&i/o . G4ee8)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51a9 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G508a) (utf32->string . G5040) (utf16->string . G503f) (utf8->string . G503e) (uint-list->bytevector . G503d) (u8-list->bytevector . G503c) (string->utf8 . G503b) (string->utf32 . G503a) (string->utf16 . G5039) (sint-list->bytevector . G5038) (native-endianness . G5037) (bytevector? . G5036) (bytevector=? . G5035) (bytevector-uint-set! . G5034) (bytevector-uint-ref . G5033) (bytevector-u8-set! . G5032) (bytevector-u8-ref . G5031) (bytevector-u64-set! . G5030) (bytevector-u64-ref . G502f) (bytevector-u64-native-set! . G502e) (bytevector-u64-native-ref . G502d) (bytevector-u32-set! . G502c) (bytevector-u32-ref . G502b) (bytevector-u32-native-set! . G502a) (bytevector-u32-native-ref . G5029) (bytevector-u16-set! . G5028) (bytevector-u16-ref . G5027) (bytevector-u16-native-set! . G5026) (bytevector-u16-native-ref . G5025) (bytevector-sint-set! . G5024) (bytevector-sint-ref . G5023) (bytevector-s8-set! . G5022) (bytevector-s8-ref . G5021) (bytevector-s64-set! . G5020) (bytevector-s64-ref . G501f) (bytevector-s64-native-set! . G501e) (bytevector-s64-native-ref . G501d) (bytevector-s32-set! . G501c) (bytevector-s32-ref . G501b) (bytevector-s32-native-set! . G501a) (bytevector-s32-native-ref . G5019) (bytevector-s16-set! . G5018) (bytevector-s16-ref . G5017) (bytevector-s16-native-set! . G5016) (bytevector-s16-native-ref . G5015) (bytevector-length . G5014) (bytevector-ieee-single-ref . G5013) (bytevector-ieee-single-set! . G5012) (bytevector-ieee-single-native-set! . G5011) (bytevector-ieee-single-native-ref . G5010) (bytevector-ieee-double-set! . G500f) (bytevector-ieee-double-ref . G500e) (bytevector-ieee-double-native-set! . G500d) (bytevector-ieee-double-native-ref . G500c) (bytevector-fill! . G500b) (bytevector-copy! . G500a) (bytevector-copy . G5009) (bytevector->uint-list . G5008) (bytevector->u8-list . G5007) (bytevector->sint-list . G5006) (endianness . G4ebd)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51aa '(rnrs unicode) '(6) '() '() '() '((string-upcase . G5111) (string-titlecase . G5110) (string-normalize-nfkd . G510f) (string-normalize-nfkc . G510e) (string-normalize-nfd . G510d) (string-normalize-nfc . G510c) (string-foldcase . G510b) (string-downcase . G510a) (string-ci>? . G5109) (string-ci>=? . G5108) (string-ci=? . G5107) (string-ci<? . G5106) (string-ci<=? . G5105) (char-whitespace? . G5104) (char-upper-case? . G5103) (char-title-case? . G5102) (char-numeric? . G5101) (char-lower-case? . G5100) (char-general-category . G50ff) (char-upcase . G50fe) (char-titlecase . G50fd) (char-foldcase . G50fc) (char-downcase . G50fb) (char-ci>? . G50fa) (char-ci>=? . G50f9) (char-ci=? . G50f8) (char-ci<? . G50f7) (char-ci<=? . G50f6) (char-alphabetic? . G50f5)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51ab '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G5055) (raise-continuable . G5054) (raise . G5053) (guard . G4ec9) (else . G4ec1) (=> . G4ec0)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51ac '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4faa) (bitwise-reverse-bit-field . G4fa9) (bitwise-length . G4fa8) (bitwise-if . G4fa7) (bitwise-first-bit-set . G4fa6) (bitwise-copy-bit-field . G4fa5) (bitwise-copy-bit . G4fa4) (bitwise-bit-set? . G4fa3) (bitwise-bit-field . G4fa2) (bitwise-bit-count . G4fa1) (bitwise-xor . G4fa0) (bitwise-ior . G4f9f) (bitwise-and . G4f9e) (bitwise-not . G4f9d) (bitwise-arithmetic-shift-right . G4f9c) (bitwise-arithmetic-shift-left . G4f9b) (bitwise-arithmetic-shift . G4f9a)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51ad '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4fd7) (fxxor . G4fd6) (fxrotate-bit-field . G4fd5) (fxreverse-bit-field . G4fd4) (fxpositive? . G4fd3) (fxodd? . G4fd2) (fxnot . G4fd1) (fxnegative? . G4fd0) (fxmod0 . G4fcf) (fxmod . G4fce) (fxmin . G4fcd) (fxmax . G4fcc) (fxlength . G4fcb) (fxior . G4fca) (fxif . G4fc9) (fxfirst-bit-set . G4fc8) (fxeven? . G4fc7) (fxdiv0-and-mod0 . G4fc6) (fxdiv0 . G4fc5) (fxdiv-and-mod . G4fc4) (fxdiv . G4fc3) (fxcopy-bit-field . G4fc2) (fxcopy-bit . G4fc1) (fxbit-set? . G4fc0) (fxbit-field . G4fbf) (fxbit-count . G4fbe) (fxarithmetic-shift-right . G4fbd) (fxarithmetic-shift-left . G4fbc) (fxarithmetic-shift . G4fbb) (fxand . G4fba) (fx>? . G4fb9) (fx>=? . G4fb8) (fx=? . G4fb7) (fx<? . G4fb6) (fx<=? . G4fb5) (fx-/carry . G4fb4) (fx- . G4fb3) (fx+/carry . G4fb2) (fx+ . G4fb1) (fx*/carry . G4fb0) (fx* . G4faf) (greatest-fixnum . G4fae) (least-fixnum . G4fad) (fixnum-width . G4fac) (fixnum? . G4fab)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51ae '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4c2c) (no-infinities-violation? . G4c18) (make-no-nans-violation . G4c2a) (make-no-infinities-violation . G4c16) (real->flonum . G5005) (flzero? . G5004) (fltruncate . G5003) (fltan . G5002) (flsqrt . G5001) (flsin . G5000) (flround . G4fff) (flpositive? . G4ffe) (flonum? . G4ffd) (flodd? . G4ffc) (flnumerator . G4ffb) (flnegative? . G4ffa) (flnan? . G4ff9) (flmod0 . G4ff8) (flmod . G4ff7) (flmin . G4ff6) (flmax . G4ff5) (fllog . G4ff4) (flinteger? . G4ff3) (flinfinite? . G4ff2) (flfloor . G4ff1) (flfinite? . G4ff0) (flexpt . G4fef) (flexp . G4fee) (fleven? . G4fed) (fldiv0-and-mod0 . G4fec) (fldiv0 . G4feb) (fldiv-and-mod . G4fea) (fldiv . G4fe9) (fldenominator . G4fe8) (flcos . G4fe7) (flceiling . G4fe6) (flatan . G4fe5) (flasin . G4fe4) (flacos . G4fe3) (flabs . G4fe2) (fl>? . G4fe1) (fl>=? . G4fe0) (fl=? . G4fdf) (fl<? . G4fde) (fl<=? . G4fdd) (fl/ . G4fdc) (fl- . G4fdb) (fl+ . G4fda) (fl* . G4fd9) (fixnum->flonum . G4fd8) (&no-nans . G4ef5) (&no-infinities . G4ef4)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51af '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G50de) (string-ci-hash . G50dd) (string-hash . G50dc) (equal-hash . G50db) (hashtable-equivalence-function . G50da) (make-hashtable . G50d9) (hashtable-hash-function . G50d8) (make-eqv-hashtable . G50d7) (make-eq-hashtable . G50d6) (hashtable? . G50d5) (hashtable-update! . G50d4) (hashtable-size . G50d3) (hashtable-set! . G50d2) (hashtable-ref . G50d1) (hashtable-mutable? . G50d0) (hashtable-keys . G50cf) (hashtable-entries . G50ce) (hashtable-delete! . G50cd) (hashtable-copy . G50cc) (hashtable-contains? . G50cb) (hashtable-clear! . G50ca)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51b0 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G50ba) (eof-object . G50b9) (current-error-port . G50b8) (current-output-port . G50b7) (current-input-port . G50b6) (output-port? . G50b5) (input-port? . G50b4) (utf-8-codec . G50b3) (utf-16-codec . G50b2) (transcoder-error-handling-mode . G50b1) (transcoder-eol-style . G50b0) (transcoder-codec . G50af) (transcoded-port . G50ae) (textual-port? . G50ad) (string->bytevector . G50ac) (standard-output-port . G50ab) (standard-input-port . G50aa) (standard-error-port . G50a9) (set-port-position! . G50a8) (put-u8 . G50a7) (put-string . G50a6) (put-datum . G50a5) (put-char . G50a4) (put-bytevector . G50a3) (port? . G50a2) (port-transcoder . G50a1) (port-position . G50a0) (port-has-set-port-position!? . G509f) (port-has-port-position? . G509e) (port-eof? . G509d) (output-port-buffer-mode . G509c) (open-string-output-port . G509b) (open-string-input-port . G509a) (open-file-output-port . G5099) (open-file-input/output-port . G5098) (open-file-input-port . G5097) (open-bytevector-output-port . G5096) (open-bytevector-input-port . G5095) (native-transcoder . G5094) (native-eol-style . G5093) (make-transcoder . G5092) (latin-1-codec . G5091) (make-i/o-write-error . G4cd2) (make-i/o-read-error . G4cbe) (make-i/o-port-error . G4d69) (make-i/o-invalid-position-error . G4ce7) (make-i/o-filename-error . G4d00) (make-i/o-file-protection-error . G4d18) (make-i/o-file-is-read-only-error . G4d2c) (make-i/o-file-does-not-exist-error . G4d54) (make-i/o-file-already-exists-error . G4d40) (make-i/o-error . G4caa) (make-i/o-encoding-error . G4d96) (make-i/o-decoding-error . G4d81) (make-custom-textual-output-port . G5090) (make-custom-textual-input/output-port . G508f) (make-custom-textual-input-port . G508e) (make-custom-binary-output-port . G508d) (make-custom-binary-input/output-port . G508c) (make-custom-binary-input-port . G508b) (lookahead-u8 . G5089) (lookahead-char . G5088) (i/o-write-error? . G4cd4) (i/o-read-error? . G4cc0) (i/o-port-error? . G4d6d) (i/o-invalid-position-error? . G4ceb) (i/o-filename-error? . G4d04) (i/o-file-protection-error? . G4d1a) (i/o-file-is-read-only-error? . G4d2e) (i/o-file-does-not-exist-error? . G4d56) (i/o-file-already-exists-error? . G4d42) (i/o-error? . G4cac) (i/o-error-port . G4d6f) (i/o-error-filename . G4d06) (i/o-encoding-error? . G4d9a) (i/o-encoding-error-char . G4d9c) (i/o-decoding-error? . G4d83) (get-u8 . G5087) (get-string-n! . G5086) (get-string-n . G5085) (get-string-all . G5084) (get-line . G5083) (get-datum . G5082) (get-char . G5081) (get-bytevector-some . G5080) (get-bytevector-n! . G507f) (get-bytevector-n . G507e) (get-bytevector-all . G507d) (flush-output-port . G507c) (close-port . G507b) (call-with-string-output-port . G505b) (call-with-port . G505a) (call-with-bytevector-output-port . G5059) (bytevector->string . G5058) (buffer-mode? . G5057) (binary-port? . G5056) (&i/o-encoding . G4ef3) (&i/o-decoding . G4ef2) (&i/o-port . G4ef1) (&i/o-file-does-not-exist . G4ef0) (&i/o-file-already-exists . G4eef) (&i/o-file-is-read-only . G4eee) (&i/o-file-protection . G4eed) (&i/o-filename . G4eec) (&i/o-invalid-position . G4eeb) (&i/o-write . G4eea) (&i/o-read . G4ee9) (&i/o . G4ee8) (error-handling-mode . G4ecd) (file-options . G4ecc) (buffer-mode . G4ecb) (eol-style . G4eca)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51b1 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G5052) (enum-set=? . G5051) (enum-set-universe . G5050) (enum-set-union . G504f) (enum-set-subset? . G504e) (enum-set-projection . G504d) (enum-set-member? . G504c) (enum-set-intersection . G504b) (enum-set-indexer . G504a) (enum-set-difference . G5049) (enum-set-constructor . G5048) (enum-set-complement . G5047) (enum-set->list . G5046) (define-enumeration . G4ed8)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51b2 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4b94) (warning? . G4b14) (violation? . G4b50) (undefined-violation? . G4c04) (syntax-violation? . G4bec) (syntax-violation-subform . G4bf0) (syntax-violation-form . G4bee) (syntax-violation . G3183) (simple-conditions . G5045) (serious-condition? . G4b28) (non-continuable-violation? . G4baa) (message-condition? . G4afe) (make-who-condition . G4b90) (make-warning . G4b12) (make-violation . G4b4e) (make-undefined-violation . G4c02) (make-syntax-violation . G4be6) (make-serious-condition . G4b26) (make-non-continuable-violation . G4ba8) (make-message-condition . G4afa) (make-lexical-violation . G4bd0) (make-irritants-condition . G4b77) (make-implementation-restriction-violation . G4bbc) (make-error . G4b3a) (make-assertion-violation . G4b62) (lexical-violation? . G4bd2) (irritants-condition? . G4b7b) (implementation-restriction-violation? . G4bbe) (error? . G4b3c) (condition-who . G4b96) (condition-predicate . G5044) (condition-message . G4b00) (condition-irritants . G4b7d) (condition-accessor . G5043) (condition . G5042) (assertion-violation? . G4b64) (condition? . G5041) (&undefined . G4ee7) (&syntax . G4ee6) (&lexical . G4ee5) (&implementation-restriction . G4ee4) (&non-continuable . G4ee3) (&who . G4ee2) (&irritants . G4ee1) (&assertion . G4ee0) (&violation . G4edf) (&error . G4ede) (&serious . G4edd) (&warning . G4edc) (&message . G4edb) (&condition . G4eda) (define-condition-type . G4ed9)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51b3 '(rnrs records inspection) '(6) '() '() '() '((record? . G50ed) (record-type-uid . G50ec) (record-type-sealed? . G50eb) (record-type-parent . G50ea) (record-type-opaque? . G50e9) (record-type-name . G50e8) (record-type-generative? . G50e7) (record-type-field-names . G50e6) (record-rtd . G50e5) (record-field-mutable? . G50e4)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51b4 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G50f4) (record-predicate . G50f3) (record-mutator . G50f2) (record-constructor . G50f1) (record-accessor . G50f0) (make-record-type-descriptor . G50ef) (make-record-constructor-descriptor . G50ee)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51b5 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4ed7) (parent-rtd . G4ed6) (nongenerative . G4ed5) (opaque . G4ed4) (sealed . G4ed3) (protocol . G4ed2) (parent . G4ed1) (immutable . G4ed0) (mutable . G4ecf) (fields . G4ece) (record-constructor-descriptor . G4eab) (record-type-descriptor . G4eaa)) '() values values '#f '#f '#t '#f) (G2c41@G2ad4@install-library 'G51b6 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G5196) (&no-nans-rtd . G5195) (&no-infinities-rcd . G5194) (&no-infinities-rtd . G5193) (&i/o-encoding-rcd . G5192) (&i/o-encoding-rtd . G5191) (&i/o-decoding-rcd . G5190) (&i/o-decoding-rtd . G518f) (&i/o-port-rcd . G518e) (&i/o-port-rtd . G518d) (&i/o-file-does-not-exist-rcd . G518c) (&i/o-file-does-not-exist-rtd . G518b) (&i/o-file-already-exists-rcd . G518a) (&i/o-file-already-exists-rtd . G5189) (&i/o-file-is-read-only-rcd . G5188) (&i/o-file-is-read-only-rtd . G5187) (&i/o-file-protection-rcd . G5186) (&i/o-file-protection-rtd . G5185) (&i/o-filename-rcd . G5184) (&i/o-filename-rtd . G5183) (&i/o-invalid-position-rcd . G5182) (&i/o-invalid-position-rtd . G5181) (&i/o-write-rcd . G5180) (&i/o-write-rtd . G517f) (&i/o-read-rcd . G517e) (&i/o-read-rtd . G517d) (&i/o-rcd . G517c) (&i/o-rtd . G517b) (&undefined-rcd . G517a) (&undefined-rtd . G5179) (&syntax-rcd . G5178) (&syntax-rtd . G5177) (&lexical-rcd . G5176) (&lexical-rtd . G5175) (&implementation-restriction-rcd . G5174) (&implementation-restriction-rtd . G5173) (&non-continuable-rcd . G5172) (&non-continuable-rtd . G5171) (&who-rcd . G5170) (&who-rtd . G516f) (&irritants-rcd . G516e) (&irritants-rtd . G516d) (&assertion-rcd . G516c) (&assertion-rtd . G516b) (&violation-rcd . G516a) (&violation-rtd . G5169) (&error-rcd . G5168) (&error-rtd . G5167) (&serious-rcd . G5166) (&serious-rtd . G5165) (&warning-rcd . G5164) (&warning-rtd . G5163) (&message-rcd . G5162) (&message-rtd . G5161) (&condition-rcd . G5160) (&condition-rtd . G515f) (syntax-error . G317d) (syntax-dispatch . G3090) (pretty-print . G515e) (eval-core . G515d) (set-symbol-value! . G515c) (symbol-value . G515b) (gensym . G515a) (void . G5159) (load . G4dfb) (interaction-environment . G318f) (char-ready? . G5158) (regexp? . G5157) (read-line . G5156) (dotted-list? . G5155) (circular-list? . G5154) (proper-list? . G5153) (circular-list . G5152) (last . G5151) (last-pair . G5150) (not-pair? . G514f) (split-at! . G514e) (split-at . G514d) (list= . G514c) (list-copy . G514b) (list-tabulate . G514a) (make-list . G5149) (xcons . G5148) (tenth . G5147) (ninth . G5146) (eighth . G5145) (seventh . G5144) (sixth . G5143) (fifth . G5142) (drop-right! . G5141) (drop-right . G5140) (take-right . G513f) (take! . G513e) (drop . G513d) (take . G513c) (car+cdr . G513b) (third . G513a) (second . G5139) (first . G5138) (iota . G5137) (every . G5136) (assoc-ref . G5135) (alist-cons . G5134) (append-map . G5133) (print . G5132) (format . G5131) (standard-library-path . G5130) (file-newer? . G512f) (stat-mtime . G512e) (current-directory . G512d) (write-to-file . G512c) (file->list . G512b) (file->string . G512a) (digit->integer . G5129) (call-with-string-input-port . G5128) (call-with-string-io . G5127) (string-split . G5126) (bytevector-for-each . G5125) (string->regexp . G5124) (rxmatch . G5123) (regexp-replace-all . G5122) (hashtable-for-each . G5121) (readdir . G5120) (get-environment-variables . G511f) (get-environment-variable . G511e) (get-timeofday . G511d) (get-command-line . G511c) (sys-display . G511b) (source-info . G511a) (make-compiler-instruction . G5119) (make-instruction . G5118) (set-source-info! . G5117) (bignum? . G5116) (make-complex . G5115) (fasl-read . G5114) (fasl-write . G5113) (receive . G5112) (make-parameter . G28aa) (string-upcase . G5111) (string-titlecase . G5110) (string-normalize-nfkd . G510f) (string-normalize-nfkc . G510e) (string-normalize-nfd . G510d) (string-normalize-nfc . G510c) (string-foldcase . G510b) (string-downcase . G510a) (string-ci>? . G5109) (string-ci>=? . G5108) (string-ci=? . G5107) (string-ci<? . G5106) (string-ci<=? . G5105) (char-whitespace? . G5104) (char-upper-case? . G5103) (char-title-case? . G5102) (char-numeric? . G5101) (char-lower-case? . G5100) (char-general-category . G50ff) (char-upcase . G50fe) (char-titlecase . G50fd) (char-foldcase . G50fc) (char-downcase . G50fb) (char-ci>? . G50fa) (char-ci>=? . G50f9) (char-ci=? . G50f8) (char-ci<? . G50f7) (char-ci<=? . G50f6) (char-alphabetic? . G50f5) (make-variable-transformer . G2e8e) (identifier? . G3185) (generate-temporaries . G316f) (free-identifier=? . G3171) (syntax->datum . G3189) (datum->syntax . G3187) (bound-identifier=? . G3173) (record-type-descriptor? . G50f4) (record-predicate . G50f3) (record-mutator . G50f2) (record-constructor . G50f1) (record-accessor . G50f0) (make-record-type-descriptor . G50ef) (make-record-constructor-descriptor . G50ee) (record? . G50ed) (record-type-uid . G50ec) (record-type-sealed? . G50eb) (record-type-parent . G50ea) (record-type-opaque? . G50e9) (record-type-name . G50e8) (record-type-generative? . G50e7) (record-type-field-names . G50e6) (record-rtd . G50e5) (record-field-mutable? . G50e4) (delete-file . G50e3) (file-exists? . G50e2) (vector-sort! . G50e1) (vector-sort . G50e0) (list-sort . G50df) (symbol-hash . G50de) (string-ci-hash . G50dd) (string-hash . G50dc) (equal-hash . G50db) (hashtable-equivalence-function . G50da) (make-hashtable . G50d9) (hashtable-hash-function . G50d8) (make-eqv-hashtable . G50d7) (make-eq-hashtable . G50d6) (hashtable? . G50d5) (hashtable-update! . G50d4) (hashtable-size . G50d3) (hashtable-set! . G50d2) (hashtable-ref . G50d1) (hashtable-mutable? . G50d0) (hashtable-keys . G50cf) (hashtable-entries . G50ce) (hashtable-delete! . G50cd) (hashtable-copy . G50cc) (hashtable-contains? . G50cb) (hashtable-clear! . G50ca) (call-with-output-file . G50c9) (call-with-input-file . G50c8) (write-char . G50c7) (write . G50c6) (with-output-to-file . G50c5) (with-input-from-file . G50c4) (read-char . G50c3) (read . G50c2) (peek-char . G50c1) (open-output-file . G50c0) (open-input-file . G50bf) (newline . G50be) (display . G50bd) (close-output-port . G50bc) (close-input-port . G50bb) (eof-object? . G50ba) (eof-object . G50b9) (current-error-port . G50b8) (current-output-port . G50b7) (current-input-port . G50b6) (output-port? . G50b5) (input-port? . G50b4) (utf-8-codec . G50b3) (utf-16-codec . G50b2) (transcoder-error-handling-mode . G50b1) (transcoder-eol-style . G50b0) (transcoder-codec . G50af) (transcoded-port . G50ae) (textual-port? . G50ad) (string->bytevector . G50ac) (standard-output-port . G50ab) (standard-input-port . G50aa) (standard-error-port . G50a9) (set-port-position! . G50a8) (put-u8 . G50a7) (put-string . G50a6) (put-datum . G50a5) (put-char . G50a4) (put-bytevector . G50a3) (port? . G50a2) (port-transcoder . G50a1) (port-position . G50a0) (port-has-set-port-position!? . G509f) (port-has-port-position? . G509e) (port-eof? . G509d) (output-port-buffer-mode . G509c) (open-string-output-port . G509b) (open-string-input-port . G509a) (open-file-output-port . G5099) (open-file-input/output-port . G5098) (open-file-input-port . G5097) (open-bytevector-output-port . G5096) (open-bytevector-input-port . G5095) (native-transcoder . G5094) (native-eol-style . G5093) (make-transcoder . G5092) (latin-1-codec . G5091) (make-i/o-write-error . G4cd2) (make-i/o-read-error . G4cbe) (make-i/o-port-error . G4d69) (make-i/o-invalid-position-error . G4ce7) (make-i/o-filename-error . G4d00) (make-i/o-file-protection-error . G4d18) (make-i/o-file-is-read-only-error . G4d2c) (make-i/o-file-does-not-exist-error . G4d54) (make-i/o-file-already-exists-error . G4d40) (make-i/o-error . G4caa) (make-i/o-encoding-error . G4d96) (make-i/o-decoding-error . G4d81) (make-custom-textual-output-port . G5090) (make-custom-textual-input/output-port . G508f) (make-custom-textual-input-port . G508e) (make-custom-binary-output-port . G508d) (make-custom-binary-input/output-port . G508c) (make-custom-binary-input-port . G508b) (make-bytevector . G508a) (lookahead-u8 . G5089) (lookahead-char . G5088) (i/o-write-error? . G4cd4) (i/o-read-error? . G4cc0) (i/o-port-error? . G4d6d) (i/o-invalid-position-error? . G4ceb) (i/o-filename-error? . G4d04) (i/o-file-protection-error? . G4d1a) (i/o-file-is-read-only-error? . G4d2e) (i/o-file-does-not-exist-error? . G4d56) (i/o-file-already-exists-error? . G4d42) (i/o-error? . G4cac) (i/o-error-port . G4d6f) (i/o-error-filename . G4d06) (i/o-encoding-error? . G4d9a) (i/o-encoding-error-char . G4d9c) (i/o-decoding-error? . G4d83) (get-u8 . G5087) (get-string-n! . G5086) (get-string-n . G5085) (get-string-all . G5084) (get-line . G5083) (get-datum . G5082) (get-char . G5081) (get-bytevector-some . G5080) (get-bytevector-n! . G507f) (get-bytevector-n . G507e) (get-bytevector-all . G507d) (flush-output-port . G507c) (close-port . G507b) (scheme-report-environment . G315d) (quotient . G507a) (null-environment . G315b) (remainder . G5079) (modulo . G5078) (inexact->exact . G5077) (force . G5076) (exact->inexact . G5075) (exit . G5074) (command-line . G4df5) (string-fill! . G5073) (string-set! . G5072) (set-cdr! . G5071) (set-car! . G5070) (remove . G506f) (remv . G506e) (remp . G506d) (remq . G506c) (partition . G506b) (memv . G506a) (memq . G5069) (memp . G5068) (member . G5067) (exists . G5066) (for-all . G5065) (fold-right . G5064) (fold-left . G5063) (find . G5062) (filter . G5061) (cons* . G5060) (assv . G505f) (assq . G505e) (assp . G505d) (assoc . G505c) (call-with-string-output-port . G505b) (call-with-port . G505a) (call-with-bytevector-output-port . G5059) (bytevector->string . G5058) (buffer-mode? . G5057) (binary-port? . G5056) (with-exception-handler . G5055) (raise-continuable . G5054) (raise . G5053) (eval . G3161) (environment . G3159) (make-enumeration . G5052) (enum-set=? . G5051) (enum-set-universe . G5050) (enum-set-union . G504f) (enum-set-subset? . G504e) (enum-set-projection . G504d) (enum-set-member? . G504c) (enum-set-intersection . G504b) (enum-set-indexer . G504a) (enum-set-difference . G5049) (enum-set-constructor . G5048) (enum-set-complement . G5047) (enum-set->list . G5046) (who-condition? . G4b94) (warning? . G4b14) (violation? . G4b50) (undefined-violation? . G4c04) (syntax-violation? . G4bec) (syntax-violation-subform . G4bf0) (syntax-violation-form . G4bee) (syntax-violation . G3183) (simple-conditions . G5045) (serious-condition? . G4b28) (non-continuable-violation? . G4baa) (message-condition? . G4afe) (make-who-condition . G4b90) (make-warning . G4b12) (make-violation . G4b4e) (make-undefined-violation . G4c02) (make-syntax-violation . G4be6) (make-serious-condition . G4b26) (make-non-continuable-violation . G4ba8) (make-message-condition . G4afa) (make-lexical-violation . G4bd0) (make-irritants-condition . G4b77) (make-implementation-restriction-violation . G4bbc) (make-error . G4b3a) (make-assertion-violation . G4b62) (lexical-violation? . G4bd2) (irritants-condition? . G4b7b) (implementation-restriction-violation? . G4bbe) (error? . G4b3c) (condition-who . G4b96) (condition-predicate . G5044) (condition-message . G4b00) (condition-irritants . G4b7d) (condition-accessor . G5043) (condition . G5042) (assertion-violation? . G4b64) (condition? . G5041) (utf32->string . G5040) (utf16->string . G503f) (utf8->string . G503e) (uint-list->bytevector . G503d) (u8-list->bytevector . G503c) (string->utf8 . G503b) (string->utf32 . G503a) (string->utf16 . G5039) (sint-list->bytevector . G5038) (native-endianness . G5037) (bytevector? . G5036) (bytevector=? . G5035) (bytevector-uint-set! . G5034) (bytevector-uint-ref . G5033) (bytevector-u8-set! . G5032) (bytevector-u8-ref . G5031) (bytevector-u64-set! . G5030) (bytevector-u64-ref . G502f) (bytevector-u64-native-set! . G502e) (bytevector-u64-native-ref . G502d) (bytevector-u32-set! . G502c) (bytevector-u32-ref . G502b) (bytevector-u32-native-set! . G502a) (bytevector-u32-native-ref . G5029) (bytevector-u16-set! . G5028) (bytevector-u16-ref . G5027) (bytevector-u16-native-set! . G5026) (bytevector-u16-native-ref . G5025) (bytevector-sint-set! . G5024) (bytevector-sint-ref . G5023) (bytevector-s8-set! . G5022) (bytevector-s8-ref . G5021) (bytevector-s64-set! . G5020) (bytevector-s64-ref . G501f) (bytevector-s64-native-set! . G501e) (bytevector-s64-native-ref . G501d) (bytevector-s32-set! . G501c) (bytevector-s32-ref . G501b) (bytevector-s32-native-set! . G501a) (bytevector-s32-native-ref . G5019) (bytevector-s16-set! . G5018) (bytevector-s16-ref . G5017) (bytevector-s16-native-set! . G5016) (bytevector-s16-native-ref . G5015) (bytevector-length . G5014) (bytevector-ieee-single-ref . G5013) (bytevector-ieee-single-set! . G5012) (bytevector-ieee-single-native-set! . G5011) (bytevector-ieee-single-native-ref . G5010) (bytevector-ieee-double-set! . G500f) (bytevector-ieee-double-ref . G500e) (bytevector-ieee-double-native-set! . G500d) (bytevector-ieee-double-native-ref . G500c) (bytevector-fill! . G500b) (bytevector-copy! . G500a) (bytevector-copy . G5009) (bytevector->uint-list . G5008) (bytevector->u8-list . G5007) (bytevector->sint-list . G5006) (no-nans-violation? . G4c2c) (no-infinities-violation? . G4c18) (make-no-nans-violation . G4c2a) (make-no-infinities-violation . G4c16) (real->flonum . G5005) (flzero? . G5004) (fltruncate . G5003) (fltan . G5002) (flsqrt . G5001) (flsin . G5000) (flround . G4fff) (flpositive? . G4ffe) (flonum? . G4ffd) (flodd? . G4ffc) (flnumerator . G4ffb) (flnegative? . G4ffa) (flnan? . G4ff9) (flmod0 . G4ff8) (flmod . G4ff7) (flmin . G4ff6) (flmax . G4ff5) (fllog . G4ff4) (flinteger? . G4ff3) (flinfinite? . G4ff2) (flfloor . G4ff1) (flfinite? . G4ff0) (flexpt . G4fef) (flexp . G4fee) (fleven? . G4fed) (fldiv0-and-mod0 . G4fec) (fldiv0 . G4feb) (fldiv-and-mod . G4fea) (fldiv . G4fe9) (fldenominator . G4fe8) (flcos . G4fe7) (flceiling . G4fe6) (flatan . G4fe5) (flasin . G4fe4) (flacos . G4fe3) (flabs . G4fe2) (fl>? . G4fe1) (fl>=? . G4fe0) (fl=? . G4fdf) (fl<? . G4fde) (fl<=? . G4fdd) (fl/ . G4fdc) (fl- . G4fdb) (fl+ . G4fda) (fl* . G4fd9) (fixnum->flonum . G4fd8) (fxzero? . G4fd7) (fxxor . G4fd6) (fxrotate-bit-field . G4fd5) (fxreverse-bit-field . G4fd4) (fxpositive? . G4fd3) (fxodd? . G4fd2) (fxnot . G4fd1) (fxnegative? . G4fd0) (fxmod0 . G4fcf) (fxmod . G4fce) (fxmin . G4fcd) (fxmax . G4fcc) (fxlength . G4fcb) (fxior . G4fca) (fxif . G4fc9) (fxfirst-bit-set . G4fc8) (fxeven? . G4fc7) (fxdiv0-and-mod0 . G4fc6) (fxdiv0 . G4fc5) (fxdiv-and-mod . G4fc4) (fxdiv . G4fc3) (fxcopy-bit-field . G4fc2) (fxcopy-bit . G4fc1) (fxbit-set? . G4fc0) (fxbit-field . G4fbf) (fxbit-count . G4fbe) (fxarithmetic-shift-right . G4fbd) (fxarithmetic-shift-left . G4fbc) (fxarithmetic-shift . G4fbb) (fxand . G4fba) (fx>? . G4fb9) (fx>=? . G4fb8) (fx=? . G4fb7) (fx<? . G4fb6) (fx<=? . G4fb5) (fx-/carry . G4fb4) (fx- . G4fb3) (fx+/carry . G4fb2) (fx+ . G4fb1) (fx*/carry . G4fb0) (fx* . G4faf) (greatest-fixnum . G4fae) (least-fixnum . G4fad) (fixnum-width . G4fac) (fixnum? . G4fab) (bitwise-rotate-bit-field . G4faa) (bitwise-reverse-bit-field . G4fa9) (bitwise-length . G4fa8) (bitwise-if . G4fa7) (bitwise-first-bit-set . G4fa6) (bitwise-copy-bit-field . G4fa5) (bitwise-copy-bit . G4fa4) (bitwise-bit-set? . G4fa3) (bitwise-bit-field . G4fa2) (bitwise-bit-count . G4fa1) (bitwise-xor . G4fa0) (bitwise-ior . G4f9f) (bitwise-and . G4f9e) (bitwise-not . G4f9d) (bitwise-arithmetic-shift-right . G4f9c) (bitwise-arithmetic-shift-left . G4f9b) (bitwise-arithmetic-shift . G4f9a) (zero? . G4f99) (vector? . G4f98) (vector-set! . G4f97) (vector-ref . G4f96) (vector-map . G4f95) (vector-length . G4f94) (vector-for-each . G4f93) (vector-fill! . G4f92) (vector->list . G4f91) (vector . G4f90) (values . G4f8f) (truncate . G4f8e) (tan . G4f8d) (symbol? . G4f8c) (symbol=? . G4f8b) (symbol->string . G4f8a) (substring . G4f89) (string? . G4f88) (string>? . G4f87) (string>=? . G4f86) (string=? . G4f85) (string<? . G4f84) (string<=? . G4f83) (string-ref . G4f82) (string-length . G4f81) (string-for-each . G4f80) (string-copy . G4f7f) (string-append . G4f7e) (string->symbol . G4f7d) (string->number . G4f7c) (string->list . G4f7b) (string . G4f7a) (sqrt . G4f79) (sin . G4f78) (round . G4f77) (reverse . G4f76) (real? . G4f75) (real-valued? . G4f74) (real-part . G4f73) (rationalize . G4f72) (rational? . G4f71) (rational-valued? . G4f70) (procedure? . G4f6f) (positive? . G4f6e) (pair? . G4f6d) (odd? . G4f6c) (numerator . G4f6b) (number? . G4f6a) (number->string . G4f69) (null? . G4f68) (not . G4f67) (negative? . G4f66) (nan? . G4f65) (min . G4f64) (max . G4f63) (map . G4f62) (make-vector . G4f61) (make-string . G4f60) (make-rectangular . G4f5f) (make-polar . G4f5e) (magnitude . G4f5d) (log . G4f5c) (list? . G4f5b) (list-tail . G4f5a) (list-ref . G4f59) (list->vector . G4f58) (list->string . G4f57) (list . G4f56) (length . G4f55) (lcm . G4f54) (integer? . G4f53) (integer-valued? . G4f52) (integer->char . G4f51) (infinite? . G4f50) (inexact? . G4f4f) (inexact . G4f4e) (imag-part . G4f4d) (gcd . G4f4c) (for-each . G4f4b) (floor . G4f4a) (finite? . G4f49) (expt . G4f48) (exp . G4f47) (exact? . G4f46) (exact-integer-sqrt . G4f45) (exact . G4f44) (even? . G4f43) (error . G4f42) (eqv? . G4f41) (equal? . G4f40) (eq? . G4f3f) (dynamic-wind . G4f3e) (div0-and-mod0 . G4f3d) (mod0 . G4f3c) (div0 . G4f3b) (div-and-mod . G4f3a) (mod . G4f39) (div . G4f38) (denominator . G4f37) (cos . G4f36) (cons . G4f35) (complex? . G4f34) (char? . G4f33) (char>? . G4f32) (char>=? . G4f31) (char=? . G4f30) (char<? . G4f2f) (char<=? . G4f2e) (char->integer . G4f2d) (ceiling . G4f2c) (call-with-values . G4f2b) (call/cc . G4f2a) (call-with-current-continuation . G4f29) (cddddr . G4f28) (cdddar . G4f27) (cddadr . G4f26) (cddaar . G4f25) (cdaddr . G4f24) (cdadar . G4f23) (cdaadr . G4f22) (cdaaar . G4f21) (cadddr . G4f20) (caddar . G4f1f) (cadadr . G4f1e) (cadaar . G4f1d) (caaddr . G4f1c) (caadar . G4f1b) (caaadr . G4f1a) (caaaar . G4f19) (cdddr . G4f18) (cddar . G4f17) (cdadr . G4f16) (cdaar . G4f15) (caddr . G4f14) (cadar . G4f13) (caadr . G4f12) (caaar . G4f11) (cddr . G4f10) (cdar . G4f0f) (cadr . G4f0e) (caar . G4f0d) (cdr . G4f0c) (car . G4f0b) (boolean? . G4f0a) (boolean=? . G4f09) (atan . G4f08) (assertion-violation . G4f07) (asin . G4f06) (apply . G4f05) (append . G4f04) (angle . G4f03) (acos . G4f02) (abs . G4f01) (/ . G4f00) (* . G4eff) (- . G4efe) (+ . G4efd) (>= . G4efc) (> . G4efb) (= . G4efa) (<= . G4ef9) (< . G4ef8) (library . G4ef7) (export . G4ef6) (&no-nans . G4ef5) (&no-infinities . G4ef4) (&i/o-encoding . G4ef3) (&i/o-decoding . G4ef2) (&i/o-port . G4ef1) (&i/o-file-does-not-exist . G4ef0) (&i/o-file-already-exists . G4eef) (&i/o-file-is-read-only . G4eee) (&i/o-file-protection . G4eed) (&i/o-filename . G4eec) (&i/o-invalid-position . G4eeb) (&i/o-write . G4eea) (&i/o-read . G4ee9) (&i/o . G4ee8) (&undefined . G4ee7) (&syntax . G4ee6) (&lexical . G4ee5) (&implementation-restriction . G4ee4) (&non-continuable . G4ee3) (&who . G4ee2) (&irritants . G4ee1) (&assertion . G4ee0) (&violation . G4edf) (&error . G4ede) (&serious . G4edd) (&warning . G4edc) (&message . G4edb) (&condition . G4eda) (define-condition-type . G4ed9) (define-enumeration . G4ed8) (define-record-type . G4ed7) (parent-rtd . G4ed6) (nongenerative . G4ed5) (opaque . G4ed4) (sealed . G4ed3) (protocol . G4ed2) (parent . G4ed1) (immutable . G4ed0) (mutable . G4ecf) (fields . G4ece) (error-handling-mode . G4ecd) (file-options . G4ecc) (buffer-mode . G4ecb) (eol-style . G4eca) (guard . G4ec9) (trace-define . G4ec8) (trace-lambda . G4ec7) (unsyntax-splicing . G4ec6) (unsyntax . G4ec5) (unquote-splicing . G4ec4) (unquote . G4ec3) (_ . G4ec2) (else . G4ec1) (=> . G4ec0) (... . G4ebf) (assert . G4ebe) (endianness . G4ebd) (delay . G4ebc) (time . G4ebb) (or . G4eba) (and . G4eb9) (do . G4eb8) (cond . G4eb7) (let* . G4eb6) (let . G4eb5) (let*-values . G4eb4) (let-values . G4eb3) (identifier-syntax . G4eb2) (with-syntax . G4eb1) (quasisyntax . G4eb0) (quasiquote . G4eaf) (syntax-rules . G4eae) (include . G4ead) (define-struct . G4eac) (record-constructor-descriptor . G4eab) (record-type-descriptor . G4eaa) (case . G4ea9) (parameterize . G4ea8) (unless . G4ea7) (when . G4ea6) (if . G4ea5) (letrec* . G4ea4) (letrec . G4ea3) (type-descriptor . G4ea2) (case-lambda . G4ea1) (lambda . G4ea0) (syntax . G4e9f) (syntax-case . G4e9e) (quote . G4e9d) (foreign-call . G4e9c) (letrec-syntax . G4e9b) (let-syntax . G4e9a) (set! . G4e99) (import . G4e98) (begin . G4e97) (module . G4e96) (define-syntax . G4e95) (define . G4e94)) '((G5196 core-prim . &no-nans-rcd) (G5195 core-prim . &no-nans-rtd) (G5194 core-prim . &no-infinities-rcd) (G5193 core-prim . &no-infinities-rtd) (G5192 core-prim . &i/o-encoding-rcd) (G5191 core-prim . &i/o-encoding-rtd) (G5190 core-prim . &i/o-decoding-rcd) (G518f core-prim . &i/o-decoding-rtd) (G518e core-prim . &i/o-port-rcd) (G518d core-prim . &i/o-port-rtd) (G518c core-prim . &i/o-file-does-not-exist-rcd) (G518b core-prim . &i/o-file-does-not-exist-rtd) (G518a core-prim . &i/o-file-already-exists-rcd) (G5189 core-prim . &i/o-file-already-exists-rtd) (G5188 core-prim . &i/o-file-is-read-only-rcd) (G5187 core-prim . &i/o-file-is-read-only-rtd) (G5186 core-prim . &i/o-file-protection-rcd) (G5185 core-prim . &i/o-file-protection-rtd) (G5184 core-prim . &i/o-filename-rcd) (G5183 core-prim . &i/o-filename-rtd) (G5182 core-prim . &i/o-invalid-position-rcd) (G5181 core-prim . &i/o-invalid-position-rtd) (G5180 core-prim . &i/o-write-rcd) (G517f core-prim . &i/o-write-rtd) (G517e core-prim . &i/o-read-rcd) (G517d core-prim . &i/o-read-rtd) (G517c core-prim . &i/o-rcd) (G517b core-prim . &i/o-rtd) (G517a core-prim . &undefined-rcd) (G5179 core-prim . &undefined-rtd) (G5178 core-prim . &syntax-rcd) (G5177 core-prim . &syntax-rtd) (G5176 core-prim . &lexical-rcd) (G5175 core-prim . &lexical-rtd) (G5174 core-prim . &implementation-restriction-rcd) (G5173 core-prim . &implementation-restriction-rtd) (G5172 core-prim . &non-continuable-rcd) (G5171 core-prim . &non-continuable-rtd) (G5170 core-prim . &who-rcd) (G516f core-prim . &who-rtd) (G516e core-prim . &irritants-rcd) (G516d core-prim . &irritants-rtd) (G516c core-prim . &assertion-rcd) (G516b core-prim . &assertion-rtd) (G516a core-prim . &violation-rcd) (G5169 core-prim . &violation-rtd) (G5168 core-prim . &error-rcd) (G5167 core-prim . &error-rtd) (G5166 core-prim . &serious-rcd) (G5165 core-prim . &serious-rtd) (G5164 core-prim . &warning-rcd) (G5163 core-prim . &warning-rtd) (G5162 core-prim . &message-rcd) (G5161 core-prim . &message-rtd) (G5160 core-prim . &condition-rcd) (G515f core-prim . &condition-rtd) (G317d core-prim . syntax-error) (G3090 core-prim . syntax-dispatch) (G515e core-prim . pretty-print) (G515d core-prim . eval-core) (G515c core-prim . set-symbol-value!) (G515b core-prim . symbol-value) (G515a core-prim . gensym) (G5159 core-prim . void) (G4dfb core-prim . load) (G318f core-prim . interaction-environment) (G5158 core-prim . char-ready?) (G5157 core-prim . regexp?) (G5156 core-prim . read-line) (G5155 core-prim . dotted-list?) (G5154 core-prim . circular-list?) (G5153 core-prim . proper-list?) (G5152 core-prim . circular-list) (G5151 core-prim . last) (G5150 core-prim . last-pair) (G514f core-prim . not-pair?) (G514e core-prim . split-at!) (G514d core-prim . split-at) (G514c core-prim . list=) (G514b core-prim . list-copy) (G514a core-prim . list-tabulate) (G5149 core-prim . make-list) (G5148 core-prim . xcons) (G5147 core-prim . tenth) (G5146 core-prim . ninth) (G5145 core-prim . eighth) (G5144 core-prim . seventh) (G5143 core-prim . sixth) (G5142 core-prim . fifth) (G5141 core-prim . drop-right!) (G5140 core-prim . drop-right) (G513f core-prim . take-right) (G513e core-prim . take!) (G513d core-prim . drop) (G513c core-prim . take) (G513b core-prim . car+cdr) (G513a core-prim . third) (G5139 core-prim . second) (G5138 core-prim . first) (G5137 core-prim . iota) (G5136 core-prim . every) (G5135 core-prim . assoc-ref) (G5134 core-prim . alist-cons) (G5133 core-prim . append-map) (G5132 core-prim . print) (G5131 core-prim . format) (G5130 core-prim . standard-library-path) (G512f core-prim . file-newer?) (G512e core-prim . stat-mtime) (G512d core-prim . current-directory) (G512c core-prim . write-to-file) (G512b core-prim . file->list) (G512a core-prim . file->string) (G5129 core-prim . digit->integer) (G5128 core-prim . call-with-string-input-port) (G5127 core-prim . call-with-string-io) (G5126 core-prim . string-split) (G5125 core-prim . bytevector-for-each) (G5124 core-prim . string->regexp) (G5123 core-prim . rxmatch) (G5122 core-prim . regexp-replace-all) (G5121 core-prim . hashtable-for-each) (G5120 core-prim . readdir) (G511f core-prim . get-environment-variables) (G511e core-prim . get-environment-variable) (G511d core-prim . get-timeofday) (G511c core-prim . get-command-line) (G511b core-prim . sys-display) (G511a core-prim . source-info) (G5119 core-prim . make-compiler-instruction) (G5118 core-prim . make-instruction) (G5117 core-prim . set-source-info!) (G5116 core-prim . bignum?) (G5115 core-prim . make-complex) (G5114 core-prim . fasl-read) (G5113 core-prim . fasl-write) (G5112 core-prim . receive) (G28aa core-prim . make-parameter) (G5111 core-prim . string-upcase) (G5110 core-prim . string-titlecase) (G510f core-prim . string-normalize-nfkd) (G510e core-prim . string-normalize-nfkc) (G510d core-prim . string-normalize-nfd) (G510c core-prim . string-normalize-nfc) (G510b core-prim . string-foldcase) (G510a core-prim . string-downcase) (G5109 core-prim . string-ci>?) (G5108 core-prim . string-ci>=?) (G5107 core-prim . string-ci=?) (G5106 core-prim . string-ci<?) (G5105 core-prim . string-ci<=?) (G5104 core-prim . char-whitespace?) (G5103 core-prim . char-upper-case?) (G5102 core-prim . char-title-case?) (G5101 core-prim . char-numeric?) (G5100 core-prim . char-lower-case?) (G50ff core-prim . char-general-category) (G50fe core-prim . char-upcase) (G50fd core-prim . char-titlecase) (G50fc core-prim . char-foldcase) (G50fb core-prim . char-downcase) (G50fa core-prim . char-ci>?) (G50f9 core-prim . char-ci>=?) (G50f8 core-prim . char-ci=?) (G50f7 core-prim . char-ci<?) (G50f6 core-prim . char-ci<=?) (G50f5 core-prim . char-alphabetic?) (G2e8e core-prim . make-variable-transformer) (G3185 core-prim . identifier?) (G316f core-prim . generate-temporaries) (G3171 core-prim . free-identifier=?) (G3189 core-prim . syntax->datum) (G3187 core-prim . datum->syntax) (G3173 core-prim . bound-identifier=?) (G50f4 core-prim . record-type-descriptor?) (G50f3 core-prim . record-predicate) (G50f2 core-prim . record-mutator) (G50f1 core-prim . record-constructor) (G50f0 core-prim . record-accessor) (G50ef core-prim . make-record-type-descriptor) (G50ee core-prim . make-record-constructor-descriptor) (G50ed core-prim . record?) (G50ec core-prim . record-type-uid) (G50eb core-prim . record-type-sealed?) (G50ea core-prim . record-type-parent) (G50e9 core-prim . record-type-opaque?) (G50e8 core-prim . record-type-name) (G50e7 core-prim . record-type-generative?) (G50e6 core-prim . record-type-field-names) (G50e5 core-prim . record-rtd) (G50e4 core-prim . record-field-mutable?) (G50e3 core-prim . delete-file) (G50e2 core-prim . file-exists?) (G50e1 core-prim . vector-sort!) (G50e0 core-prim . vector-sort) (G50df core-prim . list-sort) (G50de core-prim . symbol-hash) (G50dd core-prim . string-ci-hash) (G50dc core-prim . string-hash) (G50db core-prim . equal-hash) (G50da core-prim . hashtable-equivalence-function) (G50d9 core-prim . make-hashtable) (G50d8 core-prim . hashtable-hash-function) (G50d7 core-prim . make-eqv-hashtable) (G50d6 core-prim . make-eq-hashtable) (G50d5 core-prim . hashtable?) (G50d4 core-prim . hashtable-update!) (G50d3 core-prim . hashtable-size) (G50d2 core-prim . hashtable-set!) (G50d1 core-prim . hashtable-ref) (G50d0 core-prim . hashtable-mutable?) (G50cf core-prim . hashtable-keys) (G50ce core-prim . hashtable-entries) (G50cd core-prim . hashtable-delete!) (G50cc core-prim . hashtable-copy) (G50cb core-prim . hashtable-contains?) (G50ca core-prim . hashtable-clear!) (G50c9 core-prim . call-with-output-file) (G50c8 core-prim . call-with-input-file) (G50c7 core-prim . write-char) (G50c6 core-prim . write) (G50c5 core-prim . with-output-to-file) (G50c4 core-prim . with-input-from-file) (G50c3 core-prim . read-char) (G50c2 core-prim . read) (G50c1 core-prim . peek-char) (G50c0 core-prim . open-output-file) (G50bf core-prim . open-input-file) (G50be core-prim . newline) (G50bd core-prim . display) (G50bc core-prim . close-output-port) (G50bb core-prim . close-input-port) (G50ba core-prim . eof-object?) (G50b9 core-prim . eof-object) (G50b8 core-prim . current-error-port) (G50b7 core-prim . current-output-port) (G50b6 core-prim . current-input-port) (G50b5 core-prim . output-port?) (G50b4 core-prim . input-port?) (G50b3 core-prim . utf-8-codec) (G50b2 core-prim . utf-16-codec) (G50b1 core-prim . transcoder-error-handling-mode) (G50b0 core-prim . transcoder-eol-style) (G50af core-prim . transcoder-codec) (G50ae core-prim . transcoded-port) (G50ad core-prim . textual-port?) (G50ac core-prim . string->bytevector) (G50ab core-prim . standard-output-port) (G50aa core-prim . standard-input-port) (G50a9 core-prim . standard-error-port) (G50a8 core-prim . set-port-position!) (G50a7 core-prim . put-u8) (G50a6 core-prim . put-string) (G50a5 core-prim . put-datum) (G50a4 core-prim . put-char) (G50a3 core-prim . put-bytevector) (G50a2 core-prim . port?) (G50a1 core-prim . port-transcoder) (G50a0 core-prim . port-position) (G509f core-prim . port-has-set-port-position!?) (G509e core-prim . port-has-port-position?) (G509d core-prim . port-eof?) (G509c core-prim . output-port-buffer-mode) (G509b core-prim . open-string-output-port) (G509a core-prim . open-string-input-port) (G5099 core-prim . open-file-output-port) (G5098 core-prim . open-file-input/output-port) (G5097 core-prim . open-file-input-port) (G5096 core-prim . open-bytevector-output-port) (G5095 core-prim . open-bytevector-input-port) (G5094 core-prim . native-transcoder) (G5093 core-prim . native-eol-style) (G5092 core-prim . make-transcoder) (G5091 core-prim . latin-1-codec) (G4cd2 core-prim . make-i/o-write-error) (G4cbe core-prim . make-i/o-read-error) (G4d69 core-prim . make-i/o-port-error) (G4ce7 core-prim . make-i/o-invalid-position-error) (G4d00 core-prim . make-i/o-filename-error) (G4d18 core-prim . make-i/o-file-protection-error) (G4d2c core-prim . make-i/o-file-is-read-only-error) (G4d54 core-prim . make-i/o-file-does-not-exist-error) (G4d40 core-prim . make-i/o-file-already-exists-error) (G4caa core-prim . make-i/o-error) (G4d96 core-prim . make-i/o-encoding-error) (G4d81 core-prim . make-i/o-decoding-error) (G5090 core-prim . make-custom-textual-output-port) (G508f core-prim . make-custom-textual-input/output-port) (G508e core-prim . make-custom-textual-input-port) (G508d core-prim . make-custom-binary-output-port) (G508c core-prim . make-custom-binary-input/output-port) (G508b core-prim . make-custom-binary-input-port) (G508a core-prim . make-bytevector) (G5089 core-prim . lookahead-u8) (G5088 core-prim . lookahead-char) (G4cd4 core-prim . i/o-write-error?) (G4cc0 core-prim . i/o-read-error?) (G4d6d core-prim . i/o-port-error?) (G4ceb core-prim . i/o-invalid-position-error?) (G4d04 core-prim . i/o-filename-error?) (G4d1a core-prim . i/o-file-protection-error?) (G4d2e core-prim . i/o-file-is-read-only-error?) (G4d56 core-prim . i/o-file-does-not-exist-error?) (G4d42 core-prim . i/o-file-already-exists-error?) (G4cac core-prim . i/o-error?) (G4d6f core-prim . i/o-error-port) (G4d06 core-prim . i/o-error-filename) (G4d9a core-prim . i/o-encoding-error?) (G4d9c core-prim . i/o-encoding-error-char) (G4d83 core-prim . i/o-decoding-error?) (G5087 core-prim . get-u8) (G5086 core-prim . get-string-n!) (G5085 core-prim . get-string-n) (G5084 core-prim . get-string-all) (G5083 core-prim . get-line) (G5082 core-prim . get-datum) (G5081 core-prim . get-char) (G5080 core-prim . get-bytevector-some) (G507f core-prim . get-bytevector-n!) (G507e core-prim . get-bytevector-n) (G507d core-prim . get-bytevector-all) (G507c core-prim . flush-output-port) (G507b core-prim . close-port) (G315d core-prim . scheme-report-environment) (G507a core-prim . quotient) (G315b core-prim . null-environment) (G5079 core-prim . remainder) (G5078 core-prim . modulo) (G5077 core-prim . inexact->exact) (G5076 core-prim . force) (G5075 core-prim . exact->inexact) (G5074 core-prim . exit) (G4df5 core-prim . command-line) (G5073 core-prim . string-fill!) (G5072 core-prim . string-set!) (G5071 core-prim . set-cdr!) (G5070 core-prim . set-car!) (G506f core-prim . remove) (G506e core-prim . remv) (G506d core-prim . remp) (G506c core-prim . remq) (G506b core-prim . partition) (G506a core-prim . memv) (G5069 core-prim . memq) (G5068 core-prim . memp) (G5067 core-prim . member) (G5066 core-prim . exists) (G5065 core-prim . for-all) (G5064 core-prim . fold-right) (G5063 core-prim . fold-left) (G5062 core-prim . find) (G5061 core-prim . filter) (G5060 core-prim . cons*) (G505f core-prim . assv) (G505e core-prim . assq) (G505d core-prim . assp) (G505c core-prim . assoc) (G505b core-prim . call-with-string-output-port) (G505a core-prim . call-with-port) (G5059 core-prim . call-with-bytevector-output-port) (G5058 core-prim . bytevector->string) (G5057 core-prim . buffer-mode?) (G5056 core-prim . binary-port?) (G5055 core-prim . with-exception-handler) (G5054 core-prim . raise-continuable) (G5053 core-prim . raise) (G3161 core-prim . eval) (G3159 core-prim . environment) (G5052 core-prim . make-enumeration) (G5051 core-prim . enum-set=?) (G5050 core-prim . enum-set-universe) (G504f core-prim . enum-set-union) (G504e core-prim . enum-set-subset?) (G504d core-prim . enum-set-projection) (G504c core-prim . enum-set-member?) (G504b core-prim . enum-set-intersection) (G504a core-prim . enum-set-indexer) (G5049 core-prim . enum-set-difference) (G5048 core-prim . enum-set-constructor) (G5047 core-prim . enum-set-complement) (G5046 core-prim . enum-set->list) (G4b94 core-prim . who-condition?) (G4b14 core-prim . warning?) (G4b50 core-prim . violation?) (G4c04 core-prim . undefined-violation?) (G4bec core-prim . syntax-violation?) (G4bf0 core-prim . syntax-violation-subform) (G4bee core-prim . syntax-violation-form) (G3183 core-prim . syntax-violation) (G5045 core-prim . simple-conditions) (G4b28 core-prim . serious-condition?) (G4baa core-prim . non-continuable-violation?) (G4afe core-prim . message-condition?) (G4b90 core-prim . make-who-condition) (G4b12 core-prim . make-warning) (G4b4e core-prim . make-violation) (G4c02 core-prim . make-undefined-violation) (G4be6 core-prim . make-syntax-violation) (G4b26 core-prim . make-serious-condition) (G4ba8 core-prim . make-non-continuable-violation) (G4afa core-prim . make-message-condition) (G4bd0 core-prim . make-lexical-violation) (G4b77 core-prim . make-irritants-condition) (G4bbc core-prim . make-implementation-restriction-violation) (G4b3a core-prim . make-error) (G4b62 core-prim . make-assertion-violation) (G4bd2 core-prim . lexical-violation?) (G4b7b core-prim . irritants-condition?) (G4bbe core-prim . implementation-restriction-violation?) (G4b3c core-prim . error?) (G4b96 core-prim . condition-who) (G5044 core-prim . condition-predicate) (G4b00 core-prim . condition-message) (G4b7d core-prim . condition-irritants) (G5043 core-prim . condition-accessor) (G5042 core-prim . condition) (G4b64 core-prim . assertion-violation?) (G5041 core-prim . condition?) (G5040 core-prim . utf32->string) (G503f core-prim . utf16->string) (G503e core-prim . utf8->string) (G503d core-prim . uint-list->bytevector) (G503c core-prim . u8-list->bytevector) (G503b core-prim . string->utf8) (G503a core-prim . string->utf32) (G5039 core-prim . string->utf16) (G5038 core-prim . sint-list->bytevector) (G5037 core-prim . native-endianness) (G5036 core-prim . bytevector?) (G5035 core-prim . bytevector=?) (G5034 core-prim . bytevector-uint-set!) (G5033 core-prim . bytevector-uint-ref) (G5032 core-prim . bytevector-u8-set!) (G5031 core-prim . bytevector-u8-ref) (G5030 core-prim . bytevector-u64-set!) (G502f core-prim . bytevector-u64-ref) (G502e core-prim . bytevector-u64-native-set!) (G502d core-prim . bytevector-u64-native-ref) (G502c core-prim . bytevector-u32-set!) (G502b core-prim . bytevector-u32-ref) (G502a core-prim . bytevector-u32-native-set!) (G5029 core-prim . bytevector-u32-native-ref) (G5028 core-prim . bytevector-u16-set!) (G5027 core-prim . bytevector-u16-ref) (G5026 core-prim . bytevector-u16-native-set!) (G5025 core-prim . bytevector-u16-native-ref) (G5024 core-prim . bytevector-sint-set!) (G5023 core-prim . bytevector-sint-ref) (G5022 core-prim . bytevector-s8-set!) (G5021 core-prim . bytevector-s8-ref) (G5020 core-prim . bytevector-s64-set!) (G501f core-prim . bytevector-s64-ref) (G501e core-prim . bytevector-s64-native-set!) (G501d core-prim . bytevector-s64-native-ref) (G501c core-prim . bytevector-s32-set!) (G501b core-prim . bytevector-s32-ref) (G501a core-prim . bytevector-s32-native-set!) (G5019 core-prim . bytevector-s32-native-ref) (G5018 core-prim . bytevector-s16-set!) (G5017 core-prim . bytevector-s16-ref) (G5016 core-prim . bytevector-s16-native-set!) (G5015 core-prim . bytevector-s16-native-ref) (G5014 core-prim . bytevector-length) (G5013 core-prim . bytevector-ieee-single-ref) (G5012 core-prim . bytevector-ieee-single-set!) (G5011 core-prim . bytevector-ieee-single-native-set!) (G5010 core-prim . bytevector-ieee-single-native-ref) (G500f core-prim . bytevector-ieee-double-set!) (G500e core-prim . bytevector-ieee-double-ref) (G500d core-prim . bytevector-ieee-double-native-set!) (G500c core-prim . bytevector-ieee-double-native-ref) (G500b core-prim . bytevector-fill!) (G500a core-prim . bytevector-copy!) (G5009 core-prim . bytevector-copy) (G5008 core-prim . bytevector->uint-list) (G5007 core-prim . bytevector->u8-list) (G5006 core-prim . bytevector->sint-list) (G4c2c core-prim . no-nans-violation?) (G4c18 core-prim . no-infinities-violation?) (G4c2a core-prim . make-no-nans-violation) (G4c16 core-prim . make-no-infinities-violation) (G5005 core-prim . real->flonum) (G5004 core-prim . flzero?) (G5003 core-prim . fltruncate) (G5002 core-prim . fltan) (G5001 core-prim . flsqrt) (G5000 core-prim . flsin) (G4fff core-prim . flround) (G4ffe core-prim . flpositive?) (G4ffd core-prim . flonum?) (G4ffc core-prim . flodd?) (G4ffb core-prim . flnumerator) (G4ffa core-prim . flnegative?) (G4ff9 core-prim . flnan?) (G4ff8 core-prim . flmod0) (G4ff7 core-prim . flmod) (G4ff6 core-prim . flmin) (G4ff5 core-prim . flmax) (G4ff4 core-prim . fllog) (G4ff3 core-prim . flinteger?) (G4ff2 core-prim . flinfinite?) (G4ff1 core-prim . flfloor) (G4ff0 core-prim . flfinite?) (G4fef core-prim . flexpt) (G4fee core-prim . flexp) (G4fed core-prim . fleven?) (G4fec core-prim . fldiv0-and-mod0) (G4feb core-prim . fldiv0) (G4fea core-prim . fldiv-and-mod) (G4fe9 core-prim . fldiv) (G4fe8 core-prim . fldenominator) (G4fe7 core-prim . flcos) (G4fe6 core-prim . flceiling) (G4fe5 core-prim . flatan) (G4fe4 core-prim . flasin) (G4fe3 core-prim . flacos) (G4fe2 core-prim . flabs) (G4fe1 core-prim . fl>?) (G4fe0 core-prim . fl>=?) (G4fdf core-prim . fl=?) (G4fde core-prim . fl<?) (G4fdd core-prim . fl<=?) (G4fdc core-prim . fl/) (G4fdb core-prim . fl-) (G4fda core-prim . fl+) (G4fd9 core-prim . fl*) (G4fd8 core-prim . fixnum->flonum) (G4fd7 core-prim . fxzero?) (G4fd6 core-prim . fxxor) (G4fd5 core-prim . fxrotate-bit-field) (G4fd4 core-prim . fxreverse-bit-field) (G4fd3 core-prim . fxpositive?) (G4fd2 core-prim . fxodd?) (G4fd1 core-prim . fxnot) (G4fd0 core-prim . fxnegative?) (G4fcf core-prim . fxmod0) (G4fce core-prim . fxmod) (G4fcd core-prim . fxmin) (G4fcc core-prim . fxmax) (G4fcb core-prim . fxlength) (G4fca core-prim . fxior) (G4fc9 core-prim . fxif) (G4fc8 core-prim . fxfirst-bit-set) (G4fc7 core-prim . fxeven?) (G4fc6 core-prim . fxdiv0-and-mod0) (G4fc5 core-prim . fxdiv0) (G4fc4 core-prim . fxdiv-and-mod) (G4fc3 core-prim . fxdiv) (G4fc2 core-prim . fxcopy-bit-field) (G4fc1 core-prim . fxcopy-bit) (G4fc0 core-prim . fxbit-set?) (G4fbf core-prim . fxbit-field) (G4fbe core-prim . fxbit-count) (G4fbd core-prim . fxarithmetic-shift-right) (G4fbc core-prim . fxarithmetic-shift-left) (G4fbb core-prim . fxarithmetic-shift) (G4fba core-prim . fxand) (G4fb9 core-prim . fx>?) (G4fb8 core-prim . fx>=?) (G4fb7 core-prim . fx=?) (G4fb6 core-prim . fx<?) (G4fb5 core-prim . fx<=?) (G4fb4 core-prim . fx-/carry) (G4fb3 core-prim . fx-) (G4fb2 core-prim . fx+/carry) (G4fb1 core-prim . fx+) (G4fb0 core-prim . fx*/carry) (G4faf core-prim . fx*) (G4fae core-prim . greatest-fixnum) (G4fad core-prim . least-fixnum) (G4fac core-prim . fixnum-width) (G4fab core-prim . fixnum?) (G4faa core-prim . bitwise-rotate-bit-field) (G4fa9 core-prim . bitwise-reverse-bit-field) (G4fa8 core-prim . bitwise-length) (G4fa7 core-prim . bitwise-if) (G4fa6 core-prim . bitwise-first-bit-set) (G4fa5 core-prim . bitwise-copy-bit-field) (G4fa4 core-prim . bitwise-copy-bit) (G4fa3 core-prim . bitwise-bit-set?) (G4fa2 core-prim . bitwise-bit-field) (G4fa1 core-prim . bitwise-bit-count) (G4fa0 core-prim . bitwise-xor) (G4f9f core-prim . bitwise-ior) (G4f9e core-prim . bitwise-and) (G4f9d core-prim . bitwise-not) (G4f9c core-prim . bitwise-arithmetic-shift-right) (G4f9b core-prim . bitwise-arithmetic-shift-left) (G4f9a core-prim . bitwise-arithmetic-shift) (G4f99 core-prim . zero?) (G4f98 core-prim . vector?) (G4f97 core-prim . vector-set!) (G4f96 core-prim . vector-ref) (G4f95 core-prim . vector-map) (G4f94 core-prim . vector-length) (G4f93 core-prim . vector-for-each) (G4f92 core-prim . vector-fill!) (G4f91 core-prim . vector->list) (G4f90 core-prim . vector) (G4f8f core-prim . values) (G4f8e core-prim . truncate) (G4f8d core-prim . tan) (G4f8c core-prim . symbol?) (G4f8b core-prim . symbol=?) (G4f8a core-prim . symbol->string) (G4f89 core-prim . substring) (G4f88 core-prim . string?) (G4f87 core-prim . string>?) (G4f86 core-prim . string>=?) (G4f85 core-prim . string=?) (G4f84 core-prim . string<?) (G4f83 core-prim . string<=?) (G4f82 core-prim . string-ref) (G4f81 core-prim . string-length) (G4f80 core-prim . string-for-each) (G4f7f core-prim . string-copy) (G4f7e core-prim . string-append) (G4f7d core-prim . string->symbol) (G4f7c core-prim . string->number) (G4f7b core-prim . string->list) (G4f7a core-prim . string) (G4f79 core-prim . sqrt) (G4f78 core-prim . sin) (G4f77 core-prim . round) (G4f76 core-prim . reverse) (G4f75 core-prim . real?) (G4f74 core-prim . real-valued?) (G4f73 core-prim . real-part) (G4f72 core-prim . rationalize) (G4f71 core-prim . rational?) (G4f70 core-prim . rational-valued?) (G4f6f core-prim . procedure?) (G4f6e core-prim . positive?) (G4f6d core-prim . pair?) (G4f6c core-prim . odd?) (G4f6b core-prim . numerator) (G4f6a core-prim . number?) (G4f69 core-prim . number->string) (G4f68 core-prim . null?) (G4f67 core-prim . not) (G4f66 core-prim . negative?) (G4f65 core-prim . nan?) (G4f64 core-prim . min) (G4f63 core-prim . max) (G4f62 core-prim . map) (G4f61 core-prim . make-vector) (G4f60 core-prim . make-string) (G4f5f core-prim . make-rectangular) (G4f5e core-prim . make-polar) (G4f5d core-prim . magnitude) (G4f5c core-prim . log) (G4f5b core-prim . list?) (G4f5a core-prim . list-tail) (G4f59 core-prim . list-ref) (G4f58 core-prim . list->vector) (G4f57 core-prim . list->string) (G4f56 core-prim . list) (G4f55 core-prim . length) (G4f54 core-prim . lcm) (G4f53 core-prim . integer?) (G4f52 core-prim . integer-valued?) (G4f51 core-prim . integer->char) (G4f50 core-prim . infinite?) (G4f4f core-prim . inexact?) (G4f4e core-prim . inexact) (G4f4d core-prim . imag-part) (G4f4c core-prim . gcd) (G4f4b core-prim . for-each) (G4f4a core-prim . floor) (G4f49 core-prim . finite?) (G4f48 core-prim . expt) (G4f47 core-prim . exp) (G4f46 core-prim . exact?) (G4f45 core-prim . exact-integer-sqrt) (G4f44 core-prim . exact) (G4f43 core-prim . even?) (G4f42 core-prim . error) (G4f41 core-prim . eqv?) (G4f40 core-prim . equal?) (G4f3f core-prim . eq?) (G4f3e core-prim . dynamic-wind) (G4f3d core-prim . div0-and-mod0) (G4f3c core-prim . mod0) (G4f3b core-prim . div0) (G4f3a core-prim . div-and-mod) (G4f39 core-prim . mod) (G4f38 core-prim . div) (G4f37 core-prim . denominator) (G4f36 core-prim . cos) (G4f35 core-prim . cons) (G4f34 core-prim . complex?) (G4f33 core-prim . char?) (G4f32 core-prim . char>?) (G4f31 core-prim . char>=?) (G4f30 core-prim . char=?) (G4f2f core-prim . char<?) (G4f2e core-prim . char<=?) (G4f2d core-prim . char->integer) (G4f2c core-prim . ceiling) (G4f2b core-prim . call-with-values) (G4f2a core-prim . call/cc) (G4f29 core-prim . call-with-current-continuation) (G4f28 core-prim . cddddr) (G4f27 core-prim . cdddar) (G4f26 core-prim . cddadr) (G4f25 core-prim . cddaar) (G4f24 core-prim . cdaddr) (G4f23 core-prim . cdadar) (G4f22 core-prim . cdaadr) (G4f21 core-prim . cdaaar) (G4f20 core-prim . cadddr) (G4f1f core-prim . caddar) (G4f1e core-prim . cadadr) (G4f1d core-prim . cadaar) (G4f1c core-prim . caaddr) (G4f1b core-prim . caadar) (G4f1a core-prim . caaadr) (G4f19 core-prim . caaaar) (G4f18 core-prim . cdddr) (G4f17 core-prim . cddar) (G4f16 core-prim . cdadr) (G4f15 core-prim . cdaar) (G4f14 core-prim . caddr) (G4f13 core-prim . cadar) (G4f12 core-prim . caadr) (G4f11 core-prim . caaar) (G4f10 core-prim . cddr) (G4f0f core-prim . cdar) (G4f0e core-prim . cadr) (G4f0d core-prim . caar) (G4f0c core-prim . cdr) (G4f0b core-prim . car) (G4f0a core-prim . boolean?) (G4f09 core-prim . boolean=?) (G4f08 core-prim . atan) (G4f07 core-prim . assertion-violation) (G4f06 core-prim . asin) (G4f05 core-prim . apply) (G4f04 core-prim . append) (G4f03 core-prim . angle) (G4f02 core-prim . acos) (G4f01 core-prim . abs) (G4f00 core-prim . /) (G4eff core-prim . *) (G4efe core-prim . -) (G4efd core-prim . +) (G4efc core-prim . >=) (G4efb core-prim . >) (G4efa core-prim . =) (G4ef9 core-prim . <=) (G4ef8 core-prim . <) (G4ef7 core-prim . library) (G4ef6 core-prim . export) (G4ef5 $core-rtd &no-nans-rtd &no-nans-rcd) (G4ef4 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4ef3 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4ef2 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4ef1 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4ef0 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4eef $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4eee $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4eed $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4eec $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4eeb $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4eea $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4ee9 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4ee8 $core-rtd &i/o-rtd &i/o-rcd) (G4ee7 $core-rtd &undefined-rtd &undefined-rcd) (G4ee6 $core-rtd &syntax-rtd &syntax-rcd) (G4ee5 $core-rtd &lexical-rtd &lexical-rcd) (G4ee4 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4ee3 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4ee2 $core-rtd &who-rtd &who-rcd) (G4ee1 $core-rtd &irritants-rtd &irritants-rcd) (G4ee0 $core-rtd &assertion-rtd &assertion-rcd) (G4edf $core-rtd &violation-rtd &violation-rcd) (G4ede $core-rtd &error-rtd &error-rcd) (G4edd $core-rtd &serious-rtd &serious-rcd) (G4edc $core-rtd &warning-rtd &warning-rcd) (G4edb $core-rtd &message-rtd &message-rcd) (G4eda $core-rtd &condition-rtd &condition-rcd) (G4ed9 macro . define-condition-type) (G4ed8 macro . define-enumeration) (G4ed7 macro . define-record-type) (G4ed6 macro . parent-rtd) (G4ed5 macro . nongenerative) (G4ed4 macro . opaque) (G4ed3 macro . sealed) (G4ed2 macro . protocol) (G4ed1 macro . parent) (G4ed0 macro . immutable) (G4ecf macro . mutable) (G4ece macro . fields) (G4ecd macro . error-handling-mode) (G4ecc macro . file-options) (G4ecb macro . buffer-mode) (G4eca macro . eol-style) (G4ec9 macro . guard) (G4ec8 macro . trace-define) (G4ec7 macro . trace-lambda) (G4ec6 macro . unsyntax-splicing) (G4ec5 macro . unsyntax) (G4ec4 macro . unquote-splicing) (G4ec3 macro . unquote) (G4ec2 macro . _) (G4ec1 macro . else) (G4ec0 macro . =>) (G4ebf macro . ...) (G4ebe macro . assert) (G4ebd macro . endianness) (G4ebc macro . delay) (G4ebb macro . time) (G4eba macro . or) (G4eb9 macro . and) (G4eb8 macro . do) (G4eb7 macro . cond) (G4eb6 macro . let*) (G4eb5 macro . let) (G4eb4 macro . let*-values) (G4eb3 macro . let-values) (G4eb2 macro . identifier-syntax) (G4eb1 macro . with-syntax) (G4eb0 macro . quasisyntax) (G4eaf macro . quasiquote) (G4eae macro . syntax-rules) (G4ead macro . include) (G4eac macro . define-struct) (G4eab core-macro . record-constructor-descriptor) (G4eaa core-macro . record-type-descriptor) (G4ea9 macro . case) (G4ea8 macro . parameterize) (G4ea7 macro . unless) (G4ea6 macro . when) (G4ea5 core-macro . if) (G4ea4 core-macro . letrec*) (G4ea3 core-macro . letrec) (G4ea2 core-macro . type-descriptor) (G4ea1 core-macro . case-lambda) (G4ea0 core-macro . lambda) (G4e9f core-macro . syntax) (G4e9e core-macro . syntax-case) (G4e9d core-macro . quote) (G4e9c core-macro . foreign-call) (G4e9b letrec-syntax) (G4e9a let-syntax) (G4e99 set!) (G4e98 import) (G4e97 begin) (G4e96 module) (G4e95 define-syntax) (G4e94 define)) values values '#f '#f '#f '#f) (G2c41@G2ad4@install-library 'G51b7 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G515e) (eval-core . G515d) (set-symbol-value! . G515c) (symbol-value . G515b) (gensym . G515a) (void . G5159)) '() values values '#f '#f '#f '#f) (G2c41@G2ad4@install-library 'G51b8 '(mosh) '() '() '() '() '((set-symbol-value! . G515c) (symbol-value . G515b) (assoc-ref . G5135) (alist-cons . G5134) (print . G5132) (format . G5131) (standard-library-path . G5130) (file-newer? . G512f) (stat-mtime . G512e) (current-directory . G512d) (write-to-file . G512c) (file->list . G512b) (file->string . G512a) (digit->integer . G5129) (call-with-string-input-port . G5128) (call-with-string-io . G5127) (string-split . G5126) (bytevector-for-each . G5125) (string->regexp . G5124) (rxmatch . G5123) (regexp-replace-all . G5122) (hashtable-for-each . G5121) (get-timeofday . G511d) (get-command-line . G511c) (sys-display . G511b) (source-info . G511a) (make-compiler-instruction . G5119) (make-instruction . G5118) (set-source-info! . G5117) (bignum? . G5116) (make-complex . G5115) (fasl-read . G5114) (fasl-write . G5113) (include . G4ead)) '() values values '#f '#f '#f '#f) (G2c41@G2ad4@install-library 'G51b9 '(mosh backend) '() '() '() '() '((receive . G5112)) '() values values '#f '#f '#f '#f) (G2c41@G2ad4@install-library 'G51ba '(mosh file) '() '() '() '() '((read-line . G5156) (file-newer? . G512f) (stat-mtime . G512e) (current-directory . G512d) (write-to-file . G512c) (file->list . G512b) (file->string . G512a)) '() values values '#f '#f '#f '#f) (G2c41@G2ad4@install-library 'G51bb '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G5125)) '() values values '#f '#f '#f '#f) (G2c41@G2ad4@install-library 'G51bc '(mosh number) '() '() '() '() '((digit->integer . G5129)) '() values values '#f '#f '#f '#f) (G2c41@G2ad4@install-library 'G51bd '(mosh string) '() '() '() '() '((print . G5132) (format . G5131) (call-with-string-input-port . G5128) (call-with-string-io . G5127) (string-split . G5126) (string->regexp . G5124)) '() values values '#f '#f '#f '#f) (G2c41@G2ad4@install-library 'G51be '(mosh list) '() '() '() '() '((assoc-ref . G5135)) '() values values '#f '#f '#f '#f) (G2c41@G2ad4@install-library 'G51bf '(mosh regexp) '() '() '() '() '((rxmatch . G5123) (regexp-replace-all . G5122)) '() values values '#f '#f '#f '#f) (G2c41@G2ad4@install-library 'G51c0 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G5121)) '() values values '#f '#f '#f '#f) (G2c41@G2ad4@install-library 'G51c1 '(mosh parameters) '() '() '() '() '((make-parameter . G28aa) (parameterize . G4ea8)) '() values values '#f '#f '#f '#f) (G2c41@G2ad4@install-library 'G51c2 '(system) '() '() '() '() '((readdir . G5120) (get-environment-variables . G511f) (get-environment-variable . G511e)) '() values values '#f '#f '#f '#f) (G2c41@G2ad4@install-library 'G51c3 '(srfi :1) '() '() '() '() '((dotted-list? . G5155) (circular-list? . G5154) (proper-list? . G5153) (circular-list . G5152) (last . G5151) (last-pair . G5150) (not-pair? . G514f) (split-at! . G514e) (split-at . G514d) (list= . G514c) (list-copy . G514b) (list-tabulate . G514a) (make-list . G5149) (xcons . G5148) (tenth . G5147) (ninth . G5146) (eighth . G5145) (seventh . G5144) (sixth . G5143) (fifth . G5142) (drop-right! . G5141) (drop-right . G5140) (take-right . G513f) (take! . G513e) (drop . G513d) (take . G513c) (car+cdr . G513b) (third . G513a) (second . G5139) (first . G5138) (iota . G5137) (every . G5136) (alist-cons . G5134) (append-map . G5133)) '() values values '#f '#f '#f '#f))
((lambda (G4df0@for-each-with-index G4df2@repl G4df4@trace-printer G4df6@command-line G4df8@local-library-path G4dfa@load/args G4dfc@load G4dfe@ironscheme-build G4e00@eval-top-level G4e02@compile-system-libraries G4e04@compile G4e06@compile->closure G4e08@pre-compile-r6rs-file G4e0a@load-r6rs-top-level G4e0c@write-record) (begin (set! G4df0@for-each-with-index (lambda (G4e21@proc G4e22@lst) (letrec ((G4e25@loop (lambda (G4e27@i G4e28@lst) (if (null? G4e28@lst) (if '#f '#f (void)) (begin (G4e21@proc G4e27@i (car G4e28@lst)) (G4e25@loop (+ G4e27@i '1) (cdr G4e28@lst))))))) (G4e25@loop '1 G4e22@lst)))) (set! G4df2@repl (lambda G4e2b@x ((lambda (G4e2e@rec) (begin (set! G4e2e@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4e30@G4e2f) (with-exception-handler (lambda (G4e32@e) (G4e30@G4e2f (if '#t (G4df0@for-each-with-index (lambda (G4e34@i G4e35@x) ((lambda (G4e38@rtd) (begin (format '#t '"   ~d. ~a" G4e34@i (record-type-name G4e38@rtd)) ((lambda (G4e3a@v) ((lambda (G4e3c@t) (if (memv G4e3c@t '(0)) (newline) (if (memv G4e3c@t '(1)) (begin (display '": ") (write ((record-accessor G4e38@rtd '0) G4e35@x)) (newline)) (begin (display '":\n") ((letrec ((G4e3e@f (lambda (G4e40@i) (if (not (= G4e40@i (vector-length G4e3a@v))) (begin (display '"       ") (display (vector-ref G4e3a@v G4e40@i)) (display '": ") (write ((record-accessor G4e38@rtd G4e40@i) G4e35@x)) (newline) (G4e3e@f (+ G4e40@i '1))) (void))))) G4e3e@f) '0))))) (vector-length G4e3a@v))) (record-type-field-names G4e38@rtd)))) (record-rtd G4e35@x))) (simple-conditions G4e32@e)) (raise G4e32@e)))) (lambda () (begin '#f ((lambda (G4e42@line) (if (eof-object? G4e42@line) (exit) (write (G4e00@eval-top-level (call-with-port (open-string-input-port G4e42@line) read))))) (get-line (current-input-port)))))))) (newline) (G4e2e@rec)))) (G4e2e@rec))) '#f))) (set! G4df4@trace-printer (G29a0@G28ab@make-parameter write)) (set! G4df6@command-line (G29a0@G28ab@make-parameter (get-command-line))) (set! G4df8@local-library-path (lambda (G4e44@filename) (cons '"." (G2c31@G2ab4@library-path)))) (set! G4dfa@load/args (lambda (G4e46@filename . G4e48@args) (begin (apply G4e0a@load-r6rs-top-level G4e46@filename 'load G4e48@args) (void)))) (set! G4dfc@load (lambda (G4e4a@filename) (begin (apply G4e0a@load-r6rs-top-level G4e4a@filename 'load (G4df6@command-line)) (void)))) (set! G4dfe@ironscheme-build (lambda () (G4dfc@load '"ironscheme-buildscript.ss"))) (set! G4e00@eval-top-level (lambda (G4e4c@x) (G4ab7@G3162@eval G4e4c@x (G4ace@G3190@interaction-environment)))) (set! G4e02@compile-system-libraries (lambda () (G4e00@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4e04@compile (lambda (G4e4e@filename) (G4e0a@load-r6rs-top-level G4e4e@filename 'compile))) (set! G4e06@compile->closure (lambda (G4e50@filename) (G4e0a@load-r6rs-top-level G4e50@filename 'closure))) (set! G4e08@pre-compile-r6rs-file (lambda (G4e52@filename) (G4e0a@load-r6rs-top-level G4e52@filename 'compile))) (set! G4e0a@load-r6rs-top-level (lambda (G4e54@filename G4e55@how . G4e58@args) ((lambda (G4e5c@G4e5a@library-path G4e5d@G4e5b@library-path) ((lambda (G4e60@swap) (dynamic-wind G4e60@swap (lambda () ((lambda (G4e62@x*) ((lambda (G4e64@t) (if (memv G4e64@t '(closure)) (G4acd@G318e@pre-compile-r6rs-top-level G4e62@x*) (if (memv G4e64@t '(load)) ((lambda (G4e68@G4e66@command-line G4e69@G4e67@command-line) ((lambda (G4e6c@swap) (dynamic-wind G4e6c@swap (lambda () ((G4acc@G318c@compile-r6rs-top-level G4e62@x*))) G4e6c@swap)) (lambda () ((lambda (G4e6e@t) (begin (G4e68@G4e66@command-line G4e69@G4e67@command-line) (set! G4e69@G4e67@command-line G4e6e@t))) (G4e68@G4e66@command-line))))) G4df6@command-line (cons G4e54@filename (car G4e58@args))) (if (memv G4e64@t '(compile)) (begin (G4acc@G318c@compile-r6rs-top-level G4e62@x*) (G2c35@G2abc@serialize-all G299b@G28a1@serialize-library G2a05@G29ae@compile-core-expr)) (if '#f '#f (void)))))) G4e55@how)) (with-input-from-file G4e54@filename (lambda () ((letrec ((G4e70@f (lambda () ((lambda (G4e72@x) (if (eof-object? G4e72@x) '() (cons G4e72@x (G4e70@f)))) (G2993@G2891@read-annotated))))) G4e70@f)))))) G4e60@swap)) (lambda () ((lambda (G4e74@t) (begin (G4e5c@G4e5a@library-path G4e5d@G4e5b@library-path) (set! G4e5d@G4e5b@library-path G4e74@t))) (G4e5c@G4e5a@library-path))))) G2c31@G2ab4@library-path (G4df8@local-library-path G4e54@filename)))) (set! G4e0c@write-record (lambda (G4e76@record G4e77@port) ((lambda (G4e7a@rtd) (begin (format G4e77@port '"    ~a" (record-type-name G4e7a@rtd)) ((lambda (G4e7c@v) ((lambda (G4e7e@t) (if (memv G4e7e@t '(0)) (newline) (if (memv G4e7e@t '(1)) (begin (display '": " G4e77@port) (write ((record-accessor G4e7a@rtd '0) G4e76@record) G4e77@port) (newline G4e77@port)) (begin (display '":\n") ((letrec ((G4e80@f (lambda (G4e82@i) (if (not (= G4e82@i (vector-length G4e7c@v))) (begin (display '"       " G4e77@port) (display (vector-ref G4e7c@v G4e82@i) G4e77@port) (display '": " G4e77@port) (write ((record-accessor G4e7a@rtd G4e82@i) G4e76@record) G4e77@port) (newline G4e77@port) (G4e80@f (+ G4e82@i '1))) (void))))) G4e80@f) '0))))) (vector-length G4e7c@v))) (record-type-field-names G4e7a@rtd)))) (record-rtd G4e76@record)))) (begin (set! G4e92@G4e0c@write-record G4e0c@write-record) (set! G4e91@G4e0a@load-r6rs-top-level G4e0a@load-r6rs-top-level) (set! G4e90@G4e08@pre-compile-r6rs-file G4e08@pre-compile-r6rs-file) (set! G4e8f@G4e06@compile->closure G4e06@compile->closure) (set! G4e8e@G4e04@compile G4e04@compile) (set! G4e8d@G4e02@compile-system-libraries G4e02@compile-system-libraries) (set! G4e8c@G4e00@eval-top-level G4e00@eval-top-level) (set! G4e8b@G4dfe@ironscheme-build G4dfe@ironscheme-build) (set! G4e8a@G4dfc@load G4dfc@load) (set! G4e89@G4dfa@load/args G4dfa@load/args) (set! G4e88@G4df8@local-library-path G4df8@local-library-path) (set! G4e87@G4df6@command-line G4df6@command-line) (set! G4e86@G4df4@trace-printer G4df4@trace-printer) (set! G4e85@G4df2@repl G4df2@repl) (set! G4e84@G4df0@for-each-with-index G4df0@for-each-with-index) (G2c36@G2abe@current-precompiled-library-loader G299c@G28a3@load-serialized-library) (set-symbol-value! 'load G4dfc@load) (set-symbol-value! 'pre-compile-r6rs-file G4e08@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4e00@eval-top-level) (set-symbol-value! 'int-env-syms G4aae@G3150@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2a04@G29ac@expanded->core) (set-symbol-value! 'trace-printer G4df4@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2c31@G2ab4@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4e0d@args G4e0e@port) (with-exception-handler (lambda (G4e11@c) (begin (display '" Condition components:\n" G4e0e@port) (G4df0@for-each-with-index (lambda (G4e13@i G4e14@x) ((lambda (G4e17@rtd) (begin (format G4e0e@port '"   ~d. ~a" G4e13@i (record-type-name G4e17@rtd)) ((lambda (G4e19@v) ((lambda (G4e1b@t) (if (memv G4e1b@t '(0)) (newline) (if (memv G4e1b@t '(1)) (begin (display '": ") (write ((record-accessor G4e17@rtd '0) G4e14@x)) (newline)) (begin (display '":\n") ((letrec ((G4e1d@f (lambda (G4e1f@i) (if (not (= G4e1f@i (vector-length G4e19@v))) (begin (display '"       ") (display (vector-ref G4e19@v G4e1f@i)) (display '": ") (write ((record-accessor G4e17@rtd G4e1f@i) G4e14@x)) (newline) (G4e1d@f (+ G4e1f@i '1))) (void))))) G4e1d@f) '0))))) (vector-length G4e19@v))) (record-type-field-names G4e17@rtd)))) (record-rtd G4e14@x))) (simple-conditions G4e11@c)))) (lambda () (if (null? G4e0d@args) (G4df2@repl) (G4e0a@load-r6rs-top-level (car G4e0d@args) 'load (cdr G4e0d@args)))))) (G4df6@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
