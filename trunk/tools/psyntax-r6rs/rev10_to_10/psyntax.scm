;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2608@read-annotated G260a@annotation-stripped G260c@annotation? G260e@annotation-source G2610@annotation-expression G2612@scm->fasl G2614@fasl-save G2616@fasl-load G2618@serialize-library G261a@load-serialized-library G261c@make-record-printer G261e@compile-core G2620@read-library-source-file G2622@make-parameter G2686@file-options-spec) (begin (set! G2608@read-annotated read) (set! G260a@annotation-stripped (lambda (G2687@x) (G2610@annotation-expression G2687@x))) (set! G260c@annotation? (lambda (G2689@x) (source-info G2689@x))) (set! G260e@annotation-source (lambda (G268b@x) (source-info G268b@x))) (set! G2610@annotation-expression (lambda (G268d@x) (if (pair? G268d@x) (cons (car G268d@x) (cdr G268d@x)) (display '"line:46\n")))) (set! G2612@scm->fasl (lambda (G268f@filename) (string-append G268f@filename '".fasl"))) (set! G2614@fasl-save (lambda (G2691@filename G2692@obj) (call-with-port (open-file-output-port G2691@filename) (lambda (G2695@port) ((symbol-value 'fasl-write!) G2692@obj G2695@port))))) (set! G2616@fasl-load (lambda (G2697@filename) (call-with-port (open-file-input-port G2697@filename) (symbol-value 'fasl-read!)))) (set! G2618@serialize-library (lambda (G2699@filename G269a@obj) (begin (format '#t '"serialize-library ~a\n..." G2699@filename) ((lambda (G269d@expanded2core) ((lambda (G269f@compile) ((lambda (G26a1@code) ((lambda (G26a3@pivot) ((lambda (G26a5@visit) ((lambda () (begin (set-car! G26a3@pivot G26a5@visit) ((lambda (G26a7@pivot) ((lambda (G26a9@invoke) ((lambda () (set-car! G26a7@pivot G26a9@invoke)))) (G269f@compile (G269d@expanded2core (car G26a7@pivot))))) (cdr G26a3@pivot)))))) (G269f@compile (G269d@expanded2core (car G26a3@pivot))))) (cddddr (cddddr G26a1@code)))) G269a@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (G26ab@fasl-file) (begin (if (file-exists? G26ab@fasl-file) (delete-file G26ab@fasl-file) (void)) ((call/cc (lambda (G26af@G26ad) (lambda () (with-exception-handler (lambda (G26b1@c) ((call/cc (lambda (G26b3@G26ae) (G26af@G26ad (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G2699@filename) (if (file-exists? G26ab@fasl-file) (delete-file G26ab@fasl-file) (void)) '#f) (G26b3@G26ae (lambda () (raise-continuable G26b1@c)))))))))) (lambda () (begin (G2614@fasl-save G26ab@fasl-file G269a@obj) (display '"OK\n")))))))))) (G2612@scm->fasl G2699@filename))))) (set! G261a@load-serialized-library (lambda (G26b5@filename G26b6@obj) ((lambda (G26b9@fasl-file) (if (and (file-exists? G26b9@fasl-file) ((symbol-value 'file-newer?) G26b9@fasl-file G26b5@filename)) ((lambda (G26bb@expanded2core) ((lambda (G26bd@eval-compiled-core) ((lambda (G26bf@code) ((lambda (G26c1@pivot) ((lambda (G26c3@visit) ((lambda (G26c5@visit-proc) ((lambda () (begin (set-car! G26c1@pivot G26c5@visit-proc) ((lambda (G26c7@pivot) ((lambda (G26c9@invoke) ((lambda () (begin (set-car! G26c7@pivot (lambda () (G26bd@eval-compiled-core G26c9@invoke))) (apply G26b6@obj G26bf@code))))) (car G26c7@pivot))) (cdr G26c1@pivot)) '#t)))) (lambda () (G26bd@eval-compiled-core G26c3@visit)))) (car G26c1@pivot))) (cddddr (cddddr G26bf@code)))) (G2616@fasl-load G26b9@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (G2612@scm->fasl G26b5@filename)))) (set! G261c@make-record-printer (lambda (G26cb@name G26cc@printer) (lambda G26cf@x (begin (display '"record printer") (for-each display G26cf@x))))) (set! G261e@compile-core (lambda G26d1@x (apply error 'comile-core '"not implementated" G26d1@x))) (set! G2620@read-library-source-file (lambda (G26d3@file-name) (with-input-from-file G26d3@file-name G2608@read-annotated))) (set! G2622@make-parameter (lambda G26e3 ((lambda (G26e4) (if (= G26e4 '1) (apply (lambda (G26d5@x) (G2622@make-parameter G26d5@x (lambda (G26d7@x) G26d7@x))) G26e3) (if (= G26e4 '2) (apply (lambda (G26d9@x G26da@fender) ((lambda (G26dd@x) (lambda G26e1 ((lambda (G26e2) (if (= G26e2 '0) (apply (lambda () G26dd@x) G26e1) (if (= G26e2 '1) (apply (lambda (G26df@v) (set! G26dd@x (G26da@fender G26df@v))) G26e1) (error 'apply '"invalid arg count")))) (length G26e1)))) (G26da@fender G26d9@x))) G26e3) (error 'apply '"invalid arg count")))) (length G26e3)))) (set! G2686@file-options-spec (lambda (G26e5@x) G26e5@x)) (begin (set! G26f5@G2686@file-options-spec G2686@file-options-spec) (set! G26f4@G2622@make-parameter G2622@make-parameter) (set! G26f3@G2620@read-library-source-file G2620@read-library-source-file) (set! G26f2@G261e@compile-core G261e@compile-core) (set! G26f1@G261c@make-record-printer G261c@make-record-printer) (set! G26f0@G261a@load-serialized-library G261a@load-serialized-library) (set! G26ef@G2618@serialize-library G2618@serialize-library) (set! G26ee@G2616@fasl-load G2616@fasl-load) (set! G26ed@G2614@fasl-save G2614@fasl-save) (set! G26ec@G2612@scm->fasl G2612@scm->fasl) (set! G26eb@G2610@annotation-expression G2610@annotation-expression) (set! G26ea@G260e@annotation-source G260e@annotation-source) (set! G26e9@G260c@annotation? G260c@annotation?) (set! G26e8@G260a@annotation-stripped G260a@annotation-stripped) (set! G26e7@G2608@read-annotated G2608@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G26fa@current-primitive-locations G26fc@mutable? G26fe@rewriter G2700@expanded->core G2702@compile-core-expr G2704@pretty-print G2706@compile-core-expr-to-port) (begin (set! G26fa@current-primitive-locations (G26f4@G2622@make-parameter (lambda (G2707@x) '#f) (lambda (G2709@p) G2709@p))) (set! G26fc@mutable? (lambda (G270b@x) (or (pair? G270b@x) (vector? G270b@x) (hashtable? G270b@x)))) (set! G26fe@rewriter (lambda (G270d@quote-hack?) ((lambda (G2710@f) (begin (set! G2710@f (lambda (G2711@x) (if (pair? G2711@x) ((lambda (G2713@t) (if (memv G2713@t '(quote)) (if (and G270d@quote-hack? (G26fc@mutable? (cadr G2711@x))) ((lambda (G2715@g) (begin (set-symbol-value! G2715@g (cadr G2711@x)) G2715@g)) (gensym)) G2711@x) (if (memv G2713@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2717@x) (cons (car G2717@x) (map G2710@f (cdr G2717@x)))) (cdr G2711@x))) (if (memv G2713@t '(lambda)) (cons* 'lambda (cadr G2711@x) (map G2710@f (cddr G2711@x))) (if (memv G2713@t '(letrec)) ((lambda (G2719@bindings G271a@body*) ((lambda (G271d@lhs* G271e@rhs*) (cons* 'letrec (map list G271d@lhs* (map G2710@f G271e@rhs*)) (map G2710@f G271a@body*))) (map car G2719@bindings) (map cadr G2719@bindings))) (cadr G2711@x) (cddr G2711@x)) (if (memv G2713@t '(letrec*)) ((lambda (G2721@bindings G2722@body*) ((lambda (G2725@lhs* G2726@rhs*) (cons* 'letrec* (map list G2725@lhs* (map G2710@f G2726@rhs*)) (map G2710@f G2722@body*))) (map car G2721@bindings) (map cadr G2721@bindings))) (cadr G2711@x) (cddr G2711@x)) (if (memv G2713@t '(library-letrec*)) ((lambda (G2729@name G272a@x) ((lambda (G272d@bindings G272e@body*) ((lambda (G2731@lhs* G2732@lhs** G2733@rhs*) (cons* 'library-letrec* G2729@name (map list G2731@lhs* G2732@lhs** (map G2710@f G2733@rhs*)) (map G2710@f G272e@body*))) (map car G272d@bindings) (map cadr G272d@bindings) (map caddr G272d@bindings))) (cadr G272a@x) (cddr G272a@x))) (cadr G2711@x) (cdr G2711@x)) (if (memv G2713@t '(begin)) (cons 'begin (map G2710@f (cdr G2711@x))) (if (memv G2713@t '(set!)) (list 'set! (cadr G2711@x) (G2710@f (caddr G2711@x))) (if (memv G2713@t '(primitive)) ((lambda (G2737@op) ((lambda (G2739@t) (if G2739@t ((lambda (G273b@loc) G273b@loc) G2739@t) G2737@op)) ((G26fa@current-primitive-locations) G2737@op))) (cadr G2711@x)) (if (memv G2713@t '(define)) G2711@x (if (list? G2711@x) (map G2710@f G2711@x) (error 'rewrite '"invalid form ~s ~s" G2711@x (list? G2711@x)))))))))))))) (car G2711@x)) G2711@x))) G2710@f)) '#f))) (set! G2700@expanded->core (lambda (G273d@x) ((G26fe@rewriter '#f) G273d@x))) (set! G2702@compile-core-expr (lambda (G273f@x) ((G26fe@rewriter '#f) G273f@x))) (set! G2704@pretty-print write) (set! G2706@compile-core-expr-to-port (lambda (G2741@x G2742@p) (G2704@pretty-print ((G26fe@rewriter '#f) G2741@x) G2742@p))) (begin (set! G274b@G2706@compile-core-expr-to-port G2706@compile-core-expr-to-port) (set! G274a@G2704@pretty-print G2704@pretty-print) (set! G2749@G2702@compile-core-expr G2702@compile-core-expr) (set! G2748@G2700@expanded->core G2700@expanded->core) (set! G2747@G26fe@rewriter G26fe@rewriter) (set! G2746@G26fc@mutable? G26fc@mutable?) (set! G2745@G26fa@current-primitive-locations G26fa@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G279a@make-collection G279c@current-library-collection G27a2@G279d G27a4@G279f G27a6@G279e G27a9@library? G27ab@make-library G27ad@library-id G27af@library-name G27b1@library-version G27b3@library-imp* G27b5@library-vis* G27b7@library-inv* G27b9@library-subst G27bb@library-env G27bd@library-visit-state G27bf@library-invoke-state G27c1@library-visit-code G27c3@library-invoke-code G27c5@library-visible? G27c7@library-source-file-name G27c9@set-library-id! G27cb@set-library-name! G27cd@set-library-version! G27cf@set-library-imp*! G27d1@set-library-vis*! G27d3@set-library-inv*! G27d5@set-library-subst! G27d7@set-library-env! G27d9@set-library-visit-state! G27db@set-library-invoke-state! G27dd@set-library-visit-code! G27df@set-library-invoke-code! G27e1@set-library-visible?! G27e3@set-library-source-file-name! G27e5@rp G27e7@find-dependencies G27e9@find-library-by G27eb@library-path G27ed@library-extensions G27ef@library-name->file-name G27f1@file-locator G27f3@serialize-all G27f5@current-precompiled-library-loader G27f7@try-load-from-file G27f9@library-loader G27fb@current-library-expander G27fd@external-pending-libraries G27ff@find-external-library G2801@find-library-by-name G2803@library-exists? G2805@find-library-by-spec/die G2807@label->binding-table G2809@install-library-record G280b@install-library G280d@imported-label->binding G280f@invoke-library G2811@visit-library G2813@invoke-library-by-spec G2815@installed-libraries G2817@library-spec) (begin (set! G279a@make-collection (lambda () ((lambda (G2818@set) ((lambda (G281b@set-cons) (begin (set! G281b@set-cons (lambda (G2820@x G2821@ls) (if (memq G2820@x G2821@ls) G2821@ls (cons G2820@x G2821@ls)))) (lambda G281e ((lambda (G281f) (if (= G281f '0) (apply (lambda () G2818@set) G281e) (if (= G281f '1) (apply (lambda (G281c@x) (set! G2818@set (G281b@set-cons G281c@x G2818@set))) G281e) (error 'apply '"invalid arg count")))) (length G281e))))) '#f)) '()))) (set! G279c@current-library-collection (G26f4@G2622@make-parameter (G279a@make-collection) (lambda (G2824@x) (begin (if (not (procedure? G2824@x)) (assertion-violation 'current-library-collection '"not a procedure" G2824@x) (void)) G2824@x)))) (set! G27a2@G279d (make-record-type-descriptor 'library '#f 'G27a0 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G27a4@G279f '#f) (set! G27a6@G279e (make-record-constructor-descriptor G27a2@G279d '#f G27a4@G279f)) (set! G27a9@library? (record-predicate G27a2@G279d)) (set! G27ab@make-library (record-constructor G27a6@G279e)) (set! G27ad@library-id (record-accessor G27a2@G279d '0)) (set! G27af@library-name (record-accessor G27a2@G279d '1)) (set! G27b1@library-version (record-accessor G27a2@G279d '2)) (set! G27b3@library-imp* (record-accessor G27a2@G279d '3)) (set! G27b5@library-vis* (record-accessor G27a2@G279d '4)) (set! G27b7@library-inv* (record-accessor G27a2@G279d '5)) (set! G27b9@library-subst (record-accessor G27a2@G279d '6)) (set! G27bb@library-env (record-accessor G27a2@G279d '7)) (set! G27bd@library-visit-state (record-accessor G27a2@G279d '8)) (set! G27bf@library-invoke-state (record-accessor G27a2@G279d '9)) (set! G27c1@library-visit-code (record-accessor G27a2@G279d '10)) (set! G27c3@library-invoke-code (record-accessor G27a2@G279d '11)) (set! G27c5@library-visible? (record-accessor G27a2@G279d '12)) (set! G27c7@library-source-file-name (record-accessor G27a2@G279d '13)) (set! G27c9@set-library-id! (record-mutator G27a2@G279d '0)) (set! G27cb@set-library-name! (record-mutator G27a2@G279d '1)) (set! G27cd@set-library-version! (record-mutator G27a2@G279d '2)) (set! G27cf@set-library-imp*! (record-mutator G27a2@G279d '3)) (set! G27d1@set-library-vis*! (record-mutator G27a2@G279d '4)) (set! G27d3@set-library-inv*! (record-mutator G27a2@G279d '5)) (set! G27d5@set-library-subst! (record-mutator G27a2@G279d '6)) (set! G27d7@set-library-env! (record-mutator G27a2@G279d '7)) (set! G27d9@set-library-visit-state! (record-mutator G27a2@G279d '8)) (set! G27db@set-library-invoke-state! (record-mutator G27a2@G279d '9)) (set! G27dd@set-library-visit-code! (record-mutator G27a2@G279d '10)) (set! G27df@set-library-invoke-code! (record-mutator G27a2@G279d '11)) (set! G27e1@set-library-visible?! (record-mutator G27a2@G279d '12)) (set! G27e3@set-library-source-file-name! (record-mutator G27a2@G279d '13)) (set! G27e5@rp (G26f1@G261c@make-record-printer 'library (lambda (G2826@x G2827@p G2828@wr) (begin (if (not (G27a9@library? G2826@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G27b1@library-version G2826@x)) (G27af@library-name G2826@x) (append (G27af@library-name G2826@x) (list (G27b1@library-version G2826@x))))) G2827@p))))) (set! G27e7@find-dependencies (lambda (G282c@ls) (if (null? G282c@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G27e9@find-library-by (lambda (G282e@pred) ((letrec ((G2830@f (lambda (G2832@ls) (if (null? G2832@ls) '#f (if (G282e@pred (car G2832@ls)) (car G2832@ls) (G2830@f (cdr G2832@ls))))))) G2830@f) ((G279c@current-library-collection))))) (set! G27eb@library-path (G26f4@G2622@make-parameter '(".") (lambda (G2834@x) (if (and (list? G2834@x) (for-all string? G2834@x)) (map (lambda (G2836@x) G2836@x) G2834@x) (assertion-violation 'library-path '"not a list of strings" G2834@x))))) (set! G27ed@library-extensions (G26f4@G2622@make-parameter '(".sls" ".ss" ".scm") (lambda (G2838@x) (if (and (list? G2838@x) (for-all string? G2838@x)) (map (lambda (G283a@x) G283a@x) G2838@x) (assertion-violation 'library-extensions '"not a list of strings" G2838@x))))) (set! G27ef@library-name->file-name (lambda (G283c@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2840@G283e G2841@G283f) ((lambda (G2844@extract G2845@p) ((lambda (G2849@display-hex) (begin (set! G2849@display-hex (lambda (G2852@n) (if (<= '0 G2852@n '9) (display G2852@n G2845@p) (display (integer->char (+ (char->integer '#\a) (- G2852@n '10))) G2845@p)))) (begin ((letrec ((G284a@f (lambda (G284c@ls) (if (not (null? G284c@ls)) (begin (display '"/" G2845@p) (for-each (lambda (G284e@c) (if (or (char<=? '#\a G284e@c '#\z) (char<=? '#\A G284e@c '#\Z) (char<=? '#\0 G284e@c '#\9) (memv G284e@c '(#\- #\. #\_ #\~))) (display G284e@c G2845@p) (begin (display '"%" G2845@p) ((lambda (G2850@n) (begin (G2849@display-hex (quotient G2850@n '16)) (G2849@display-hex (remainder G2850@n '16)))) (char->integer G284e@c))))) (string->list (symbol->string (car G284c@ls)))) (G284a@f (cdr G284c@ls))) (void))))) G284a@f) G283c@x) (G2844@extract)))) '#f)) G2841@G283f G2840@G283e))))) (set! G27f1@file-locator (G26f4@G2622@make-parameter (lambda (G2854@x) ((lambda (G2856@str) ((letrec ((G2858@f (lambda (G285a@ls G285b@exts G285c@failed-list) (if (null? G285a@ls) ((lambda () ((lambda (G2868@G2863 G286a@G2865 G286c@G2864 G286f@G2862 G2871@make-library-resolution-condition G2873@G2860 G2875@G2861 G2877@library-resolution-condition? G2879@condition-library G287b@condition-files) (begin (set! G2868@G2863 (make-record-type-descriptor '&library-resolution G49cc@G471f@&condition-rtd 'G2866 '#f '#f '#((immutable library) (immutable files)))) (set! G286a@G2865 '#f) (set! G286c@G2864 (make-record-constructor-descriptor G2868@G2863 G49cd@G4721@&condition-rcd G286a@G2865)) (set! G286f@G2862 (record-predicate G2868@G2863)) (set! G2871@make-library-resolution-condition (record-constructor G286c@G2864)) (set! G2873@G2860 (record-accessor G2868@G2863 '0)) (set! G2875@G2861 (record-accessor G2868@G2863 '1)) (set! G2877@library-resolution-condition? (condition-predicate G2868@G2863)) (set! G2879@condition-library (condition-accessor G2868@G2863 G2873@G2860)) (set! G287b@condition-files (condition-accessor G2868@G2863 G2875@G2861)) (raise (condition (G49ec@G47b5@make-error) (G4a0e@G480f@make-who-condition 'expander) (G49d2@G4772@make-message-condition '"cannot locate library in library-path") (G2871@make-library-resolution-condition G2854@x (reverse G285c@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G285b@exts) (G2858@f (cdr G285a@ls) (G27ed@library-extensions) G285c@failed-list) ((lambda (G287c@name) (if (file-exists? G287c@name) G287c@name (G2858@f G285a@ls (cdr G285b@exts) (cons G287c@name G285c@failed-list)))) (string-append (car G285a@ls) G2856@str (car G285b@exts)))))))) G2858@f) (G27eb@library-path) (G27ed@library-extensions) '())) (G27ef@library-name->file-name G2854@x))) (lambda (G287e@f) (if (procedure? G287e@f) G287e@f (assertion-violation 'file-locator '"not a procedure" G287e@f))))) (set! G27f3@serialize-all (lambda (G2880@serialize G2881@compile) ((lambda (G2885@library-desc) (begin (set! G2885@library-desc (lambda (G2888@x) (list (G27ad@library-id G2888@x) (G27af@library-name G2888@x)))) (for-each (lambda (G2886@x) (if (G27c7@library-source-file-name G2886@x) (G2880@serialize (G27c7@library-source-file-name G2886@x) (list (G27ad@library-id G2886@x) (G27af@library-name G2886@x) (G27b1@library-version G2886@x) (map G2885@library-desc (G27b3@library-imp* G2886@x)) (map G2885@library-desc (G27b5@library-vis* G2886@x)) (map G2885@library-desc (G27b7@library-inv* G2886@x)) (G27b9@library-subst G2886@x) (G27bb@library-env G2886@x) (G2881@compile (G27c1@library-visit-code G2886@x)) (G2881@compile (G27c3@library-invoke-code G2886@x)) (G27c5@library-visible? G2886@x))) (void))) ((G279c@current-library-collection))))) '#f))) (set! G27f5@current-precompiled-library-loader (G26f4@G2622@make-parameter (lambda (G288a@filename G288b@sk) '#f))) (set! G27f7@try-load-from-file (lambda (G288e@filename) ((G27f5@current-precompiled-library-loader) G288e@filename (lambda G28b4 ((lambda (G28b5) (if (= G28b5 '11) (apply (lambda (G2890@id G2891@name G2892@ver G2893@imp* G2894@vis* G2895@inv* G2896@exp-subst G2897@exp-env G2898@visit-proc G2899@invoke-proc G289a@visible?) ((letrec ((G28a6@f (lambda (G28a8@deps) (if (null? G28a8@deps) (begin (G280b@install-library G2890@id G2891@name G2892@ver G2893@imp* G2894@vis* G2895@inv* G2896@exp-subst G2897@exp-env G2898@visit-proc G2899@invoke-proc '#f '#f G289a@visible? '#f) '#t) ((lambda (G28aa@d) ((lambda (G28ac@label G28ad@dname) ((lambda (G28b0@l) (if (and (G27a9@library? G28b0@l) (eq? G28ac@label (G27ad@library-id G28b0@l))) (G28a6@f (cdr G28a8@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2891@name G28ad@dname G288e@filename G28b0@l G28ac@label (G27ad@library-id G28b0@l)) '#f))) (G2801@find-library-by-name G28ad@dname))) (car G28aa@d) (cadr G28aa@d))) (car G28a8@deps)))))) G28a6@f) (append G2893@imp* G2894@vis* G2895@inv*))) G28b4) (if (>= G28b5 '0) (apply (lambda G28b2@others '#f) G28b4) (error 'apply '"invalid arg count")))) (length G28b4)))))) (set! G27f9@library-loader (G26f4@G2622@make-parameter (lambda (G28b6@x) ((lambda (G28b8@file-name) (if (not G28b8@file-name) (assertion-violation '#f '"cannot file library" G28b6@x) (or (G27f7@try-load-from-file G28b8@file-name) ((G27fb@current-library-expander) (G26f3@G2620@read-library-source-file G28b8@file-name) G28b8@file-name (lambda (G28ba@name) (if (not (fast-equal? G28ba@name G28b6@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G28be@G28bc G28bf@G28bd) ((lambda (G28c2@e G28c3@p) (begin (display '"expected to find library " G28c3@p) (write G28b6@x G28c3@p) (display '" in file " G28c3@p) (display G28b8@file-name G28c3@p) (display '", found " G28c3@p) (write G28ba@name G28c3@p) (display '" instead" G28c3@p) (G28c2@e))) G28bf@G28bd G28be@G28bc)))) (void))))))) ((G27f1@file-locator) G28b6@x))) (lambda (G28c6@f) (if (procedure? G28c6@f) G28c6@f (assertion-violation 'library-locator '"not a procedure" G28c6@f))))) (set! G27fb@current-library-expander (G26f4@G2622@make-parameter (lambda (G28c8@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G28ca@f) (if (procedure? G28ca@f) G28ca@f (assertion-violation 'library-expander '"not a procedure" G28ca@f))))) (set! G27fd@external-pending-libraries (G26f4@G2622@make-parameter '())) (set! G27ff@find-external-library (lambda (G28cc@name) (begin (if (member G28cc@name (G27fd@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G28cc@name) (void)) ((lambda (G28d0@G28ce G28d1@G28cf) ((lambda (G28d4@swap) (dynamic-wind G28d4@swap (lambda () (begin ((G27f9@library-loader) G28cc@name) (or (G27e9@find-library-by (lambda (G28d6@x) (fast-equal? (G27af@library-name G28d6@x) G28cc@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G28cc@name)))) G28d4@swap)) (lambda () ((lambda (G28d8@t) (begin (G28d0@G28ce G28d1@G28cf) (set! G28d1@G28cf G28d8@t))) (G28d0@G28ce))))) G27fd@external-pending-libraries (cons G28cc@name (G27fd@external-pending-libraries)))))) (set! G2801@find-library-by-name (lambda (G28da@name) (or (G27e9@find-library-by (lambda (G28dc@x) (fast-equal? (G27af@library-name G28dc@x) G28da@name))) (G27ff@find-external-library G28da@name)))) (set! G2803@library-exists? (lambda (G28de@name) (and (G27e9@find-library-by (lambda (G28e0@x) (fast-equal? (G27af@library-name G28e0@x) G28de@name))) '#t))) (set! G2805@find-library-by-spec/die (lambda (G28e2@spec) ((lambda (G28e4@id) (or (G27e9@find-library-by (lambda (G28e6@x) (eq? G28e4@id (G27ad@library-id G28e6@x)))) (assertion-violation '#f '"cannot find library with required spec" G28e2@spec))) (car G28e2@spec)))) (set! G2807@label->binding-table (make-eq-hashtable)) (set! G2809@install-library-record (lambda (G28e8@lib) (begin ((lambda (G28ea@exp-env) (for-each (lambda (G28ec@x) ((lambda (G28ee@label G28ef@binding) ((lambda (G28f2@binding) (hashtable-set! G2807@label->binding-table G28ee@label G28f2@binding)) ((lambda (G28f4@t) (if (memv G28f4@t '(global)) (cons 'global (cons G28e8@lib (cdr G28ef@binding))) (if (memv G28f4@t '(global-macro)) (cons 'global-macro (cons G28e8@lib (cdr G28ef@binding))) (if (memv G28f4@t '(global-macro!)) (cons 'global-macro! (cons G28e8@lib (cdr G28ef@binding))) G28ef@binding)))) (car G28ef@binding)))) (car G28ec@x) (cdr G28ec@x))) G28ea@exp-env)) (G27bb@library-env G28e8@lib)) ((G279c@current-library-collection) G28e8@lib)))) (set! G280b@install-library (lambda (G28f6@id G28f7@name G28f8@ver G28f9@imp* G28fa@vis* G28fb@inv* G28fc@exp-subst G28fd@exp-env G28fe@visit-proc G28ff@invoke-proc G2900@visit-code G2901@invoke-code G2902@visible? G2903@source-file-name) ((lambda (G2912@imp-lib* G2913@vis-lib* G2914@inv-lib*) (begin (if (not (and (symbol? G28f6@id) (list? G28f7@name) (list? G28f8@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G28f6@id G28f7@name G28f8@ver) (void)) (if (G2803@library-exists? G28f7@name) (assertion-violation 'install-library '"library is already installed" G28f7@name) (void)) ((lambda (G2918@lib) (G2809@install-library-record G2918@lib)) (G27ab@make-library G28f6@id G28f7@name G28f8@ver G2912@imp-lib* G2913@vis-lib* G2914@inv-lib* G28fc@exp-subst G28fd@exp-env G28fe@visit-proc G28ff@invoke-proc G2900@visit-code G2901@invoke-code G2902@visible? G2903@source-file-name)))) (map G2805@find-library-by-spec/die G28f9@imp*) (map G2805@find-library-by-spec/die G28fa@vis*) (map G2805@find-library-by-spec/die G28fb@inv*)))) (set! G280d@imported-label->binding (lambda (G291a@lab) (hashtable-ref G2807@label->binding-table G291a@lab '#f))) (set! G280f@invoke-library (lambda (G291c@lib) ((lambda (G291e@invoke) (if (procedure? G291e@invoke) (begin (G27db@set-library-invoke-state! G291c@lib (lambda () (assertion-violation 'invoke '"circularity detected" G291c@lib))) (for-each G280f@invoke-library (G27b7@library-inv* G291c@lib)) (G27db@set-library-invoke-state! G291c@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G291c@lib))) (G291e@invoke) (G27db@set-library-invoke-state! G291c@lib '#t)) (void))) (G27bf@library-invoke-state G291c@lib)))) (set! G2811@visit-library (lambda (G2920@lib) ((lambda (G2922@visit) (if (procedure? G2922@visit) (begin (G27d9@set-library-visit-state! G2920@lib (lambda () (assertion-violation 'visit '"circularity detected" G2920@lib))) (for-each G280f@invoke-library (G27b5@library-vis* G2920@lib)) (G27d9@set-library-visit-state! G2920@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2920@lib))) (G2922@visit) (G27d9@set-library-visit-state! G2920@lib '#t)) (void))) (G27bd@library-visit-state G2920@lib)))) (set! G2813@invoke-library-by-spec (lambda (G2924@spec) (G280f@invoke-library (G2805@find-library-by-spec/die G2924@spec)))) (set! G2815@installed-libraries (lambda G292c ((lambda (G292d) (if (= G292d '1) (apply (lambda (G2926@all?) ((letrec ((G2928@f (lambda (G292a@ls) (if (null? G292a@ls) '() (if (or G2926@all? (G27c5@library-visible? (car G292a@ls))) (cons (car G292a@ls) (G2928@f (cdr G292a@ls))) (G2928@f (cdr G292a@ls))))))) G2928@f) ((G279c@current-library-collection)))) G292c) (if (= G292d '0) (apply (lambda () (G2815@installed-libraries '#f)) G292c) (error 'apply '"invalid arg count")))) (length G292c)))) (set! G2817@library-spec (lambda (G292e@x) (begin (if (not (G27a9@library? G292e@x)) (assertion-violation 'library-spec '"not a library" G292e@x) (void)) (list (G27ad@library-id G292e@x) (G27af@library-name G292e@x) (G27b1@library-version G292e@x))))) (begin (set! G296c@G2817@library-spec G2817@library-spec) (set! G296b@G2815@installed-libraries G2815@installed-libraries) (set! G296a@G2813@invoke-library-by-spec G2813@invoke-library-by-spec) (set! G2969@G2811@visit-library G2811@visit-library) (set! G2968@G280f@invoke-library G280f@invoke-library) (set! G2967@G280d@imported-label->binding G280d@imported-label->binding) (set! G2966@G280b@install-library G280b@install-library) (set! G2965@G2809@install-library-record G2809@install-library-record) (set! G2964@G2807@label->binding-table G2807@label->binding-table) (set! G2963@G2805@find-library-by-spec/die G2805@find-library-by-spec/die) (set! G2962@G2803@library-exists? G2803@library-exists?) (set! G2961@G2801@find-library-by-name G2801@find-library-by-name) (set! G2960@G27ff@find-external-library G27ff@find-external-library) (set! G295f@G27fd@external-pending-libraries G27fd@external-pending-libraries) (set! G295e@G27fb@current-library-expander G27fb@current-library-expander) (set! G295d@G27f9@library-loader G27f9@library-loader) (set! G295c@G27f7@try-load-from-file G27f7@try-load-from-file) (set! G295b@G27f5@current-precompiled-library-loader G27f5@current-precompiled-library-loader) (set! G295a@G27f3@serialize-all G27f3@serialize-all) (set! G2959@G27f1@file-locator G27f1@file-locator) (set! G2958@G27ef@library-name->file-name G27ef@library-name->file-name) (set! G2957@G27ed@library-extensions G27ed@library-extensions) (set! G2956@G27eb@library-path G27eb@library-path) (set! G2955@G27e9@find-library-by G27e9@find-library-by) (set! G2954@G27e7@find-dependencies G27e7@find-dependencies) (set! G2953@G27e5@rp G27e5@rp) (set! G2952@G27e3@set-library-source-file-name! G27e3@set-library-source-file-name!) (set! G2951@G27e1@set-library-visible?! G27e1@set-library-visible?!) (set! G2950@G27df@set-library-invoke-code! G27df@set-library-invoke-code!) (set! G294f@G27dd@set-library-visit-code! G27dd@set-library-visit-code!) (set! G294e@G27db@set-library-invoke-state! G27db@set-library-invoke-state!) (set! G294d@G27d9@set-library-visit-state! G27d9@set-library-visit-state!) (set! G294c@G27d7@set-library-env! G27d7@set-library-env!) (set! G294b@G27d5@set-library-subst! G27d5@set-library-subst!) (set! G294a@G27d3@set-library-inv*! G27d3@set-library-inv*!) (set! G2949@G27d1@set-library-vis*! G27d1@set-library-vis*!) (set! G2948@G27cf@set-library-imp*! G27cf@set-library-imp*!) (set! G2947@G27cd@set-library-version! G27cd@set-library-version!) (set! G2946@G27cb@set-library-name! G27cb@set-library-name!) (set! G2945@G27c9@set-library-id! G27c9@set-library-id!) (set! G2944@G27c7@library-source-file-name G27c7@library-source-file-name) (set! G2943@G27c5@library-visible? G27c5@library-visible?) (set! G2942@G27c3@library-invoke-code G27c3@library-invoke-code) (set! G2941@G27c1@library-visit-code G27c1@library-visit-code) (set! G2940@G27bf@library-invoke-state G27bf@library-invoke-state) (set! G293f@G27bd@library-visit-state G27bd@library-visit-state) (set! G293e@G27bb@library-env G27bb@library-env) (set! G293d@G27b9@library-subst G27b9@library-subst) (set! G293c@G27b7@library-inv* G27b7@library-inv*) (set! G293b@G27b5@library-vis* G27b5@library-vis*) (set! G293a@G27b3@library-imp* G27b3@library-imp*) (set! G2939@G27b1@library-version G27b1@library-version) (set! G2938@G27af@library-name G27af@library-name) (set! G2937@G27ad@library-id G27ad@library-id) (set! G2936@G27ab@make-library G27ab@make-library) (set! G2935@G27a9@library? G27a9@library?) (set! G2934@G27a6@G279e G27a6@G279e) (set! G2933@G27a4@G279f G27a4@G279f) (set! G2932@G27a2@G279d G27a2@G279d) (set! G2931@G279c@current-library-collection G279c@current-library-collection) (set! G2930@G279a@make-collection G279a@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G296f@build-global-define G29e0@build-lambda G29e2@build-case-lambda G29e4@build-let G2a12@build-sequence G2a14@build-void G2a16@build-letrec G2a18@build-letrec* G2a1a@build-library-letrec* G2a1c@build-receive) (begin (set! G296f@build-global-define (lambda (G2a1d@x) (G2a14@build-void))) (set! G29e0@build-lambda (lambda (G2a1f@ae G2a20@vars G2a21@exp) (list 'lambda G2a20@vars G2a21@exp))) (set! G29e2@build-case-lambda (lambda (G2a25@ae G2a26@vars* G2a27@exp*) ((lambda (G2a2c@build-error G2a2e@build-pred G2a30@build-apply G2a32@expand-case-lambda) (begin (set! G2a2c@build-error (lambda (G2a61@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2a2e@build-pred (lambda (G2a4b@ae G2a4c@n G2a4d@vars) (call-with-values (lambda () ((letrec ((G2a53@f (lambda (G2a55@vars G2a56@count) (if (pair? G2a55@vars) (G2a53@f (cdr G2a55@vars) (+ G2a56@count '1)) (if (null? G2a55@vars) (values G2a56@count '=) (values G2a56@count '>=)))))) G2a53@f) G2a4d@vars '0)) (lambda (G2a59@G2a51 G2a5a@G2a52) ((lambda (G2a5d@pred G2a5e@count) (list (list 'primitive G2a5d@pred) G2a4c@n (list 'quote G2a5e@count))) G2a5a@G2a52 G2a59@G2a51))))) (set! G2a30@build-apply (lambda (G2a43@ae G2a44@g G2a45@vars G2a46@exp) (list '(primitive apply) (G29e0@build-lambda G2a43@ae G2a45@vars G2a46@exp) G2a44@g))) (set! G2a32@expand-case-lambda (lambda (G2a33@ae G2a34@vars G2a35@exp*) ((lambda (G2a39@g G2a3a@n) (list 'lambda G2a39@g (G29e4@build-let G2a33@ae (list G2a3a@n) (list (list '(primitive length) G2a39@g)) ((letrec ((G2a3d@f (lambda (G2a3f@vars* G2a40@exp*) (if (null? G2a3f@vars*) (G2a2c@build-error G2a33@ae) (list 'if (G2a2e@build-pred G2a33@ae G2a3a@n (car G2a3f@vars*)) (G2a30@build-apply G2a33@ae G2a39@g (car G2a3f@vars*) (car G2a40@exp*)) (G2a3d@f (cdr G2a3f@vars*) (cdr G2a40@exp*))))))) G2a3d@f) G2a26@vars* G2a35@exp*)))) (gensym) (gensym)))) (if (= (length G2a27@exp*) '1) (G29e0@build-lambda G2a25@ae (car G2a26@vars*) (car G2a27@exp*)) (G2a32@expand-case-lambda G2a25@ae G2a26@vars* G2a27@exp*)))) '#f '#f '#f '#f))) (set! G29e4@build-let (lambda (G2a63@ae G2a64@lhs* G2a65@rhs* G2a66@body) (cons (G29e0@build-lambda G2a63@ae G2a64@lhs* G2a66@body) G2a65@rhs*))) (set! G2a12@build-sequence (lambda (G2a6b@ae G2a6c@exps) ((letrec ((G2a6f@loop (lambda (G2a71@exps) (if (null? (cdr G2a71@exps)) (car G2a71@exps) (if (equal? (car G2a71@exps) (G2a14@build-void)) (G2a6f@loop (cdr G2a71@exps)) (cons 'begin G2a71@exps)))))) G2a6f@loop) G2a6c@exps))) (set! G2a14@build-void (lambda () '((primitive void)))) (set! G2a16@build-letrec (lambda (G2a73@ae G2a74@vars G2a75@val-exps G2a76@body-exp) (if (null? G2a74@vars) G2a76@body-exp (list 'letrec (map list G2a74@vars G2a75@val-exps) G2a76@body-exp)))) (set! G2a18@build-letrec* (lambda (G2a7b@ae G2a7c@vars G2a7d@val-exps G2a7e@body-exp) (if (null? G2a7c@vars) G2a7e@body-exp (G29e4@build-let G2a7b@ae G2a7c@vars (map (lambda (G2a83@x) (list 'quote '#f)) G2a7c@vars) (G2a12@build-sequence G2a7b@ae (append (map (lambda (G2a85@lhs G2a86@rhs) (list 'set! G2a85@lhs G2a86@rhs)) G2a7c@vars G2a7d@val-exps) (list G2a7e@body-exp))))))) (set! G2a1a@build-library-letrec* (lambda (G2a89@ae G2a8a@name G2a8b@vars G2a8c@locs G2a8d@val-exps G2a8e@body-exp) (list 'library-letrec* G2a8a@name (map list G2a8b@vars G2a8c@locs G2a8d@val-exps) G2a8e@body-exp))) (set! G2a1c@build-receive (lambda (G2a95@ae G2a96@vars G2a97@producer G2a98@body*) (begin (display '"************** in ") (cons 'receive (cons G2a96@vars (cons G2a97@producer G2a98@body*)))))) (begin (set! G2aa6@G2a1c@build-receive G2a1c@build-receive) (set! G2aa5@G2a1a@build-library-letrec* G2a1a@build-library-letrec*) (set! G2aa4@G2a18@build-letrec* G2a18@build-letrec*) (set! G2aa3@G2a16@build-letrec G2a16@build-letrec) (set! G2aa2@G2a14@build-void G2a14@build-void) (set! G2aa1@G2a12@build-sequence G2a12@build-sequence) (set! G2aa0@G29e4@build-let G29e4@build-let) (set! G2a9f@G29e2@build-case-lambda G29e2@build-case-lambda) (set! G2a9e@G29e0@build-lambda G29e0@build-lambda) (set! G2a9d@G296f@build-global-define G296f@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2ab5@set-cons G2ab7@set-union G2abc@top-mark* G2abe@top-marked? G2ac0@gen-lexical G2ac2@gen-global G2ac4@gen-label G2ac6@gen-top-level-label G2ac8@gen-define-label+loc G2aca@gen-define-label G2ad0@G2acb G2ad2@G2acd G2ad4@G2acc G2ad7@rib? G2ad9@make-rib G2adb@rib-sym* G2add@rib-mark** G2adf@rib-label* G2ae1@rib-sealed/freq G2ae3@rib-cache G2ae5@set-rib-sym*! G2ae7@set-rib-mark**! G2ae9@set-rib-label*! G2aeb@set-rib-sealed/freq! G2aed@set-rib-cache! G2aef@make-empty-rib G2af1@extend-rib! G2af3@extend-rib/nc! G2af5@make-rib-map G2af7@seal-rib! G2af9@unseal-rib! G2afb@make-full-rib G2b01@G2afc G2b03@G2afe G2b05@G2afd G2b08@stx? G2b0a@make-stx G2b0c@stx-expr G2b0e@stx-mark* G2b10@stx-subst* G2b12@stx-ae* G2b14@set-stx-expr! G2b16@set-stx-mark*! G2b18@set-stx-subst*! G2b1a@set-stx-ae*! G2b1c@rp G2b1e@datum->stx G2b20@gen-mark G2b22@anti-mark G2b24@anti-mark? G2b26@join-wraps G2b28@mkstx G2b2a@add-mark G2b2c@add-subst G2b2e@syntax-kind? G2b30@syntax-vector->list G2b32@syntax-pair? G2b34@syntax-vector? G2b36@syntax-null? G2b38@syntax-list? G2b3a@syntax-car G2b3c@syntax-cdr G2b3e@syntax->list G2b40@id? G2b42@id->sym G2b44@same-marks? G2b46@bound-id=? G2b48@free-id=? G2b4a@valid-bound-ids? G2b4c@distinct-bound-ids? G2b4e@bound-id-member? G2b50@self-evaluating? G2b52@strip-annotations G2b54@strip G2b56@stx->datum G2b58@same-marks*? G2b5a@id->label G2b5c@id->real-label G2b5e@label->binding G2b60@make-binding G2b62@binding-type G2b64@binding-value G2b66@raise-unbound-error G2b68@syntax-type G2b76@sanitize-binding G2b78@make-variable-transformer G2b7a@variable-transformer? G2b7c@variable-transformer-procedure G2b7e@make-eval-transformer G2cb5@parse-define G2cb7@parse-define-syntax G2cb9@scheme-stx-hashtable G2cbb@scheme-stx G2cbd@lexical-var G2cbf@lexical-mutable? G2cc1@set-lexical-mutable! G2cc3@add-lexical G2cc5@add-lexicals G2cc7@letrec-helper G2cc9@letrec-transformer G2ccb@letrec*-transformer G2ccd@fluid-let-syntax-transformer G2ccf@type-descriptor-transformer G2cd1@record-type-descriptor-transformer G2cd3@record-constructor-descriptor-transformer G2cd5@when-macro G2cd7@unless-macro G2cd9@if-transformer G2cdb@and-transformer G2cdd@or-transformer G2cdf@case-macro G2ce1@quote-transformer G2ce3@case-lambda-transformer G2ce5@lambda-transformer G2ce7@bless G2ce9@with-syntax-macro G2ceb@invalid-fmls-error G2ced@let-macro G2cef@let-values-macro G2cf1@let*-values-macro G2cf3@trace-lambda-macro G2cf5@trace-define-macro G2cf7@trace-define-syntax-macro G2cf9@trace-let/rec-syntax G2cfb@trace-let-syntax-macro G2cfd@trace-letrec-syntax-macro G2cff@guard-macro G2d01@define-enumeration-macro G2d03@time-macro G2d05@delay-macro G2d07@assert-macro G2d09@endianness-macro G2d0b@identifier-syntax-macro G2d0d@do-macro G2d0f@let*-macro G2d11@or-macro G2d13@and-macro G2d15@cond-macro G2d17@do-include G2d19@include-macro G2d1b@include-into-macro G2d1d@syntax-rules-macro G2d1f@quasiquote-macro G2d21@quasisyntax-macro G2d23@define-struct-macro G2d25@define-record-type-macro G2d27@define-condition-type-macro G2d29@incorrect-usage-macro G2d2b@parameterize-macro G2d2d@foreign-call-transformer G2d2f@convert-pattern G2d31@syntax-dispatch G2d33@ellipsis? G2d35@underscore? G2d37@verify-literals G2d39@syntax-case-transformer G2d3b@ellipsis-map G2d3d@syntax-transformer G2d3f@core-macro-transformer G2d41@file-options-macro G2d43@symbol-macro G2d45@macro-transformer G2d47@local-macro-transformer G2d49@do-macro-call G2d4b@chi-macro G2d4d@chi-local-macro G2d4f@chi-global-macro G2d51@chi-expr* G2d53@chi-application G2d55@chi-expr G2d57@chi-set! G2d59@verify-formals G2d5b@chi-lambda-clause G2d5d@chi-lambda-clause* G2d5f@chi-defun G2d61@chi-rhs G2d63@expand-interaction-rhs*/init* G2d65@chi-rhs* G2d67@find-bound=? G2d69@find-dups G2d6b@chi-internal G2d6d@parse-module G2d73@G2d6e G2d75@G2d70 G2d77@G2d6f G2d7a@module-interface? G2d7c@make-module-interface G2d7e@module-interface-first-mark G2d80@module-interface-exp-id-vec G2d82@module-interface-exp-lab-vec G2d84@set-module-interface-first-mark! G2d86@set-module-interface-exp-id-vec! G2d88@set-module-interface-exp-lab-vec! G2d8a@module-interface-exp-id* G2d8c@chi-internal-module G2d8e@chi-body* G2d90@expand-transformer G2d92@parse-exports G2d94@parse-library-name G2d96@parse-library G2d98@parse-import-spec* G2d9a@make-top-rib G2d9c@make-collector G2d9e@inv-collector G2da0@vis-collector G2da2@imp-collector G2da4@chi-library-internal G2da6@chi-interaction-expr G2da8@library-body-expander G2daa@core-library-expander G2dac@parse-top-level-program G2dae@top-level-expander G2db4@G2daf G2db6@G2db1 G2db8@G2db0 G2dbb@env? G2dbd@make-env G2dbf@env-names G2dc1@env-labels G2dc3@env-itc G2dc5@set-env-names! G2dc7@set-env-labels! G2dc9@set-env-itc! G2dcb@rp G2dd1@G2dcc G2dd3@G2dce G2dd5@G2dcd G2dd8@interaction-env? G2dda@make-interaction-env G2ddc@interaction-env-rib G2dde@interaction-env-r G2de0@interaction-env-locs G2de2@set-interaction-env-rib! G2de4@set-interaction-env-r! G2de6@set-interaction-env-locs! G2de8@rp G2dea@interaction-environment-symbols G2dec@environment-bindings G2dee@parse-binding G2df0@environment? G2df2@environment-symbols G2df4@environment G2df6@null-environment G2df8@scheme-report-environment G2dfa@expand G2dfc@eval G2dfe@library-expander G2e00@boot-library-expand G2e02@rev-map-append G2e04@build-exports G2e06@make-export-subst G2e08@make-export-env/macros G2e0a@generate-temporaries G2e0c@free-identifier=? G2e0e@bound-identifier=? G2e10@make-source-condition G2e12@extract-position-condition G2e14@expression-position G2e16@assertion-error G2e18@syntax-error G2e1a@syntax-violation* G2e1c@syntax-violation G2e1e@identifier? G2e20@datum->syntax G2e22@syntax->datum G2e24@compile-r6rs-top-level G2e26@pre-compile-r6rs-top-level G2e28@interaction-environment G2e2a@top-level-context) (begin (set! G2ab5@set-cons (lambda (G2e2b@x G2e2c@ls) (if (memq G2e2b@x G2e2c@ls) G2e2c@ls (cons G2e2b@x G2e2c@ls)))) (set! G2ab7@set-union (lambda (G2e2f@ls1 G2e30@ls2) (if (null? G2e2f@ls1) G2e30@ls2 (if (memq (car G2e2f@ls1) G2e30@ls2) (G2ab7@set-union (cdr G2e2f@ls1) G2e30@ls2) (cons (car G2e2f@ls1) (G2ab7@set-union (cdr G2e2f@ls1) G2e30@ls2)))))) (set! G2abc@top-mark* '(top)) (set! G2abe@top-marked? (lambda (G2e33@m*) (memq 'top G2e33@m*))) (set! G2ac0@gen-lexical (lambda (G2e35@sym) (if (symbol? G2e35@sym) (gensym G2e35@sym) (if (G2b08@stx? G2e35@sym) (G2ac0@gen-lexical (G2b42@id->sym G2e35@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G2e35@sym))))) (set! G2ac2@gen-global (lambda (G2e37@x) (G2ac0@gen-lexical G2e37@x))) (set! G2ac4@gen-label (lambda (G2e39@_) (gensym))) (set! G2ac6@gen-top-level-label (lambda (G2e3b@id G2e3c@rib) ((lambda (G2e40@find) (begin (set! G2e40@find (lambda (G2e4b@sym G2e4c@mark* G2e4d@sym* G2e4e@mark** G2e4f@label*) (and (pair? G2e4d@sym*) (if (and (eq? G2e4b@sym (car G2e4d@sym*)) (G2b44@same-marks? G2e4c@mark* (car G2e4e@mark**))) (car G2e4f@label*) (G2e40@find G2e4b@sym G2e4c@mark* (cdr G2e4d@sym*) (cdr G2e4e@mark**) (cdr G2e4f@label*)))))) ((lambda (G2e41@sym G2e42@mark*) ((lambda (G2e45@sym*) ((lambda (G2e47@t) (if G2e47@t ((lambda (G2e49@label) (if (G2967@G280d@imported-label->binding G2e49@label) (gensym) G2e49@label)) G2e47@t) (gensym))) (and (memq G2e41@sym (G2adb@rib-sym* G2e3c@rib)) (G2e40@find G2e41@sym G2e42@mark* G2e45@sym* (G2add@rib-mark** G2e3c@rib) (G2adf@rib-label* G2e3c@rib))))) (G2adb@rib-sym* G2e3c@rib))) (G2b42@id->sym G2e3b@id) (G2b0e@stx-mark* G2e3b@id)))) '#f))) (set! G2ac8@gen-define-label+loc (lambda (G2e55@id G2e56@rib) ((lambda (G2e59@t) (if G2e59@t ((lambda (G2e5b@env) ((lambda (G2e5d@label G2e5e@locs) (values G2e5d@label ((lambda (G2e61@t) (if G2e61@t (cdr G2e61@t) ((lambda (G2e63@loc) (begin (G2de6@set-interaction-env-locs! G2e5b@env (cons (cons G2e5d@label G2e63@loc) G2e5e@locs)) G2e63@loc)) (G2ac0@gen-lexical G2e55@id)))) (assq G2e5d@label G2e5e@locs)))) (G2ac6@gen-top-level-label G2e55@id G2e56@rib) (G2de0@interaction-env-locs G2e5b@env))) G2e59@t) (values (gensym) (G2ac0@gen-lexical G2e55@id)))) (G2e2a@top-level-context)))) (set! G2aca@gen-define-label (lambda (G2e65@id G2e66@rib) (if (G2e2a@top-level-context) (G2ac6@gen-top-level-label G2e65@id G2e66@rib) (gensym)))) (set! G2ad0@G2acb (make-record-type-descriptor 'rib '#f 'G2ace '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2ad2@G2acd '#f) (set! G2ad4@G2acc (make-record-constructor-descriptor G2ad0@G2acb '#f G2ad2@G2acd)) (set! G2ad7@rib? (record-predicate G2ad0@G2acb)) (set! G2ad9@make-rib (record-constructor G2ad4@G2acc)) (set! G2adb@rib-sym* (record-accessor G2ad0@G2acb '0)) (set! G2add@rib-mark** (record-accessor G2ad0@G2acb '1)) (set! G2adf@rib-label* (record-accessor G2ad0@G2acb '2)) (set! G2ae1@rib-sealed/freq (record-accessor G2ad0@G2acb '3)) (set! G2ae3@rib-cache (record-accessor G2ad0@G2acb '4)) (set! G2ae5@set-rib-sym*! (record-mutator G2ad0@G2acb '0)) (set! G2ae7@set-rib-mark**! (record-mutator G2ad0@G2acb '1)) (set! G2ae9@set-rib-label*! (record-mutator G2ad0@G2acb '2)) (set! G2aeb@set-rib-sealed/freq! (record-mutator G2ad0@G2acb '3)) (set! G2aed@set-rib-cache! (record-mutator G2ad0@G2acb '4)) (set! G2aef@make-empty-rib (lambda () (G2ad9@make-rib '() '() '() '#f '#f))) (set! G2af1@extend-rib! (lambda (G2e69@rib G2e6a@id G2e6b@label) ((lambda (G2e70@find) (begin (set! G2e70@find (lambda (G2e7d@sym G2e7e@mark* G2e7f@sym* G2e80@mark** G2e81@label*) (and (pair? G2e7f@sym*) (if (and (eq? G2e7d@sym (car G2e7f@sym*)) (G2b44@same-marks? G2e7e@mark* (car G2e80@mark**))) G2e81@label* (G2e70@find G2e7d@sym G2e7e@mark* (cdr G2e7f@sym*) (cdr G2e80@mark**) (cdr G2e81@label*)))))) (begin (if (G2ae1@rib-sealed/freq G2e69@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G2e69@rib) (void)) ((lambda (G2e71@sym G2e72@mark*) ((lambda (G2e75@sym*) ((lambda (G2e77@t) (if G2e77@t ((lambda (G2e79@p) (if (not (eq? G2e6b@label (car G2e79@p))) (if (G2e2a@top-level-context) (set-car! G2e79@p G2e6b@label) (G2e1c@syntax-violation '#f '"multiple definitions of identifier" G2e6a@id)) (void))) G2e77@t) (begin (if (G2ae3@rib-cache G2e69@rib) (hashtable-update! (G2ae3@rib-cache G2e69@rib) G2e71@sym (lambda (G2e7b@e) (cons (cons G2e72@mark* G2e6b@label) G2e7b@e)) '()) (void)) (G2ae5@set-rib-sym*! G2e69@rib (cons G2e71@sym G2e75@sym*)) (G2ae7@set-rib-mark**! G2e69@rib (cons G2e72@mark* (G2add@rib-mark** G2e69@rib))) (G2ae9@set-rib-label*! G2e69@rib (cons G2e6b@label (G2adf@rib-label* G2e69@rib)))))) (and (memq G2e71@sym (G2adb@rib-sym* G2e69@rib)) (G2e70@find G2e71@sym G2e72@mark* G2e75@sym* (G2add@rib-mark** G2e69@rib) (G2adf@rib-label* G2e69@rib))))) (G2adb@rib-sym* G2e69@rib))) (G2b42@id->sym G2e6a@id) (G2b0e@stx-mark* G2e6a@id))))) '#f))) (set! G2af3@extend-rib/nc! (lambda (G2e87@rib G2e88@id G2e89@label) ((lambda (G2e8d@sym G2e8e@mark*) ((lambda (G2e91@sym*) (begin (if (G2ae3@rib-cache G2e87@rib) (hashtable-update! (G2ae3@rib-cache G2e87@rib) G2e8d@sym (lambda (G2e93@e) (cons (cons G2e8e@mark* G2e89@label) G2e93@e)) '()) (void)) (G2ae5@set-rib-sym*! G2e87@rib (cons G2e8d@sym G2e91@sym*)) (G2ae7@set-rib-mark**! G2e87@rib (cons G2e8e@mark* (G2add@rib-mark** G2e87@rib))) (G2ae9@set-rib-label*! G2e87@rib (cons G2e89@label (G2adf@rib-label* G2e87@rib))))) (G2adb@rib-sym* G2e87@rib))) (G2b42@id->sym G2e88@id) (G2b0e@stx-mark* G2e88@id)))) (set! G2af5@make-rib-map (lambda (G2e95@sym*) ((lambda (G2e97@ht) ((letrec ((G2e99@f (lambda (G2e9b@i G2e9c@sym*) (if (null? G2e9c@sym*) G2e97@ht (begin (hashtable-update! G2e97@ht (car G2e9c@sym*) (lambda (G2e9f@x) (cons G2e9b@i G2e9f@x)) '()) (G2e99@f (+ G2e9b@i '1) (cdr G2e9c@sym*))))))) G2e99@f) '0 G2e95@sym*)) (make-eq-hashtable)))) (set! G2af7@seal-rib! (lambda (G2ea1@rib) ((lambda (G2ea3@sym*) (if (not (null? G2ea3@sym*)) (begin (G2ae5@set-rib-sym*! G2ea1@rib (list->vector G2ea3@sym*)) (G2ae7@set-rib-mark**! G2ea1@rib (list->vector (G2add@rib-mark** G2ea1@rib))) (G2ae9@set-rib-label*! G2ea1@rib (list->vector (G2adf@rib-label* G2ea1@rib))) (G2aeb@set-rib-sealed/freq! G2ea1@rib (G2af5@make-rib-map G2ea3@sym*))) (void))) (G2adb@rib-sym* G2ea1@rib)))) (set! G2af9@unseal-rib! (lambda (G2ea5@rib) (if (G2ae1@rib-sealed/freq G2ea5@rib) (begin (G2aeb@set-rib-sealed/freq! G2ea5@rib '#f) (G2ae5@set-rib-sym*! G2ea5@rib (vector->list (G2adb@rib-sym* G2ea5@rib))) (G2ae7@set-rib-mark**! G2ea5@rib (vector->list (G2add@rib-mark** G2ea5@rib))) (G2ae9@set-rib-label*! G2ea5@rib (vector->list (G2adf@rib-label* G2ea5@rib)))) (void)))) (set! G2afb@make-full-rib (lambda (G2ea7@id* G2ea8@label*) ((lambda (G2eab@r) (begin (G2af7@seal-rib! G2eab@r) G2eab@r)) (G2ad9@make-rib (map G2b42@id->sym G2ea7@id*) (map G2b0e@stx-mark* G2ea7@id*) G2ea8@label* '#f '#f)))) (set! G2b01@G2afc (make-record-type-descriptor 'stx '#f 'G2aff '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2b03@G2afe '#f) (set! G2b05@G2afd (make-record-constructor-descriptor G2b01@G2afc '#f G2b03@G2afe)) (set! G2b08@stx? (record-predicate G2b01@G2afc)) (set! G2b0a@make-stx (record-constructor G2b05@G2afd)) (set! G2b0c@stx-expr (record-accessor G2b01@G2afc '0)) (set! G2b0e@stx-mark* (record-accessor G2b01@G2afc '1)) (set! G2b10@stx-subst* (record-accessor G2b01@G2afc '2)) (set! G2b12@stx-ae* (record-accessor G2b01@G2afc '3)) (set! G2b14@set-stx-expr! (record-mutator G2b01@G2afc '0)) (set! G2b16@set-stx-mark*! (record-mutator G2b01@G2afc '1)) (set! G2b18@set-stx-subst*! (record-mutator G2b01@G2afc '2)) (set! G2b1a@set-stx-ae*! (record-mutator G2b01@G2afc '3)) (set! G2b1c@rp (G26f1@G261c@make-record-printer 'stx (lambda (G2ead@x G2eae@p G2eaf@wr) (begin (display '"#<syntax " G2eae@p) (write (G2b56@stx->datum G2ead@x) G2eae@p) ((lambda (G2eb3@expr) (if (G26e9@G260c@annotation? G2eb3@expr) ((lambda (G2eb5@src) (if (pair? G2eb5@src) (begin (display '" [" G2eae@p) (display (cdr G2eb5@src) G2eae@p) (display '" of " G2eae@p) (display (car G2eb5@src) G2eae@p) (display '"]" G2eae@p)) (void))) (G26ea@G260e@annotation-source G2eb3@expr)) (void))) (G2b0c@stx-expr G2ead@x)) (display '">" G2eae@p))))) (set! G2b1e@datum->stx (lambda (G2eb7@id G2eb8@datum) (G2b0a@make-stx G2eb8@datum (G2b0e@stx-mark* G2eb7@id) (G2b10@stx-subst* G2eb7@id) (G2b12@stx-ae* G2eb7@id)))) (set! G2b20@gen-mark (lambda () (string '#\m))) (set! G2b22@anti-mark '#f) (set! G2b24@anti-mark? not) (set! G2b26@join-wraps (lambda (G2ebb@m1* G2ebc@s1* G2ebd@ae1* G2ebe@e) ((lambda (G2ec4@cancel) (begin (set! G2ec4@cancel (lambda (G2ecb@ls1 G2ecc@ls2) ((letrec ((G2ecf@f (lambda (G2ed1@x G2ed2@ls1) (if (null? G2ed2@ls1) (cdr G2ecc@ls2) (cons G2ed1@x (G2ecf@f (car G2ed2@ls1) (cdr G2ed2@ls1))))))) G2ecf@f) (car G2ecb@ls1) (cdr G2ecb@ls1)))) ((lambda (G2ec5@m2* G2ec6@s2* G2ec7@ae2*) (if (and (not (null? G2ebb@m1*)) (not (null? G2ec5@m2*)) (G2b24@anti-mark? (car G2ec5@m2*))) (values (G2ec4@cancel G2ebb@m1* G2ec5@m2*) (G2ec4@cancel G2ebc@s1* G2ec6@s2*) (G2ec4@cancel G2ebd@ae1* G2ec7@ae2*)) (values (append G2ebb@m1* G2ec5@m2*) (append G2ebc@s1* G2ec6@s2*) (append G2ebd@ae1* G2ec7@ae2*)))) (G2b0e@stx-mark* G2ebe@e) (G2b10@stx-subst* G2ebe@e) (G2b12@stx-ae* G2ebe@e)))) '#f))) (set! G2b28@mkstx (lambda (G2ed5@e G2ed6@m* G2ed7@s* G2ed8@ae*) (if (and (G2b08@stx? G2ed5@e) (not (G2abe@top-marked? G2ed6@m*))) (call-with-values (lambda () (G2b26@join-wraps G2ed6@m* G2ed7@s* G2ed8@ae* G2ed5@e)) (lambda (G2ee0@G2edd G2ee1@G2ede G2ee2@G2edf) ((lambda (G2ee6@ae* G2ee7@s* G2ee8@m*) (G2b0a@make-stx (G2b0c@stx-expr G2ed5@e) G2ee8@m* G2ee7@s* G2ee6@ae*)) G2ee2@G2edf G2ee1@G2ede G2ee0@G2edd))) (G2b0a@make-stx G2ed5@e G2ed6@m* G2ed7@s* G2ed8@ae*)))) (set! G2b2a@add-mark (lambda (G2eec@m G2eed@e G2eee@ae) (G2b28@mkstx G2eed@e (list G2eec@m) '(shift) (list G2eee@ae)))) (set! G2b2c@add-subst (lambda (G2ef2@subst G2ef3@e) (G2b28@mkstx G2ef3@e '() (list G2ef2@subst) '()))) (set! G2b2e@syntax-kind? (lambda (G2ef6@x G2ef7@p?) (if (G2b08@stx? G2ef6@x) (G2b2e@syntax-kind? (G2b0c@stx-expr G2ef6@x) G2ef7@p?) (if (G26e9@G260c@annotation? G2ef6@x) (G2b2e@syntax-kind? (G26eb@G2610@annotation-expression G2ef6@x) G2ef7@p?) (G2ef7@p? G2ef6@x))))) (set! G2b30@syntax-vector->list (lambda (G2efa@x) (if (G2b08@stx? G2efa@x) ((lambda (G2efc@ls G2efd@m* G2efe@s* G2eff@ae*) (map (lambda (G2f04@x) (G2b28@mkstx G2f04@x G2efd@m* G2efe@s* G2eff@ae*)) G2efc@ls)) (G2b30@syntax-vector->list (G2b0c@stx-expr G2efa@x)) (G2b0e@stx-mark* G2efa@x) (G2b10@stx-subst* G2efa@x) (G2b12@stx-ae* G2efa@x)) (if (G26e9@G260c@annotation? G2efa@x) (G2b30@syntax-vector->list (G26eb@G2610@annotation-expression G2efa@x)) (if (vector? G2efa@x) (vector->list G2efa@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G2efa@x)))))) (set! G2b32@syntax-pair? (lambda (G2f06@x) (G2b2e@syntax-kind? G2f06@x pair?))) (set! G2b34@syntax-vector? (lambda (G2f08@x) (G2b2e@syntax-kind? G2f08@x vector?))) (set! G2b36@syntax-null? (lambda (G2f0a@x) (G2b2e@syntax-kind? G2f0a@x null?))) (set! G2b38@syntax-list? (lambda (G2f0c@x) (or (G2b36@syntax-null? G2f0c@x) (and (G2b32@syntax-pair? G2f0c@x) (G2b38@syntax-list? (G2b3c@syntax-cdr G2f0c@x)))))) (set! G2b3a@syntax-car (lambda (G2f0e@x) (if (G2b08@stx? G2f0e@x) (G2b28@mkstx (G2b3a@syntax-car (G2b0c@stx-expr G2f0e@x)) (G2b0e@stx-mark* G2f0e@x) (G2b10@stx-subst* G2f0e@x) (G2b12@stx-ae* G2f0e@x)) (if (G26e9@G260c@annotation? G2f0e@x) (G2b3a@syntax-car (G26eb@G2610@annotation-expression G2f0e@x)) (if (pair? G2f0e@x) (car G2f0e@x) (assertion-violation 'syntax-car '"BUG: not a pair" G2f0e@x)))))) (set! G2b3c@syntax-cdr (lambda (G2f10@x) (if (G2b08@stx? G2f10@x) (G2b28@mkstx (G2b3c@syntax-cdr (G2b0c@stx-expr G2f10@x)) (G2b0e@stx-mark* G2f10@x) (G2b10@stx-subst* G2f10@x) (G2b12@stx-ae* G2f10@x)) (if (G26e9@G260c@annotation? G2f10@x) (G2b3c@syntax-cdr (G26eb@G2610@annotation-expression G2f10@x)) (if (pair? G2f10@x) (cdr G2f10@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G2f10@x)))))) (set! G2b3e@syntax->list (lambda (G2f12@x) (if (G2b32@syntax-pair? G2f12@x) (cons (G2b3a@syntax-car G2f12@x) (G2b3e@syntax->list (G2b3c@syntax-cdr G2f12@x))) (if (G2b36@syntax-null? G2f12@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G2f12@x))))) (set! G2b40@id? (lambda (G2f14@x) (and (G2b08@stx? G2f14@x) ((lambda (G2f16@expr) (symbol? (if (G26e9@G260c@annotation? G2f16@expr) (G26e8@G260a@annotation-stripped G2f16@expr) G2f16@expr))) (G2b0c@stx-expr G2f14@x))))) (set! G2b42@id->sym (lambda (G2f18@x) (begin (if (not (G2b08@stx? G2f18@x)) (error 'id->sym '"BUG in ikarus: not an id" G2f18@x) (void)) ((lambda (G2f1a@expr) ((lambda (G2f1c@sym) (if (symbol? G2f1c@sym) G2f1c@sym (error 'id->sym '"BUG in ikarus: not an id" G2f18@x))) (if (G26e9@G260c@annotation? G2f1a@expr) (G26e8@G260a@annotation-stripped G2f1a@expr) G2f1a@expr))) (G2b0c@stx-expr G2f18@x))))) (set! G2b44@same-marks? (lambda (G2f1e@x G2f1f@y) (or (and (null? G2f1e@x) (null? G2f1f@y)) (and (pair? G2f1e@x) (pair? G2f1f@y) (eq? (car G2f1e@x) (car G2f1f@y)) (G2b44@same-marks? (cdr G2f1e@x) (cdr G2f1f@y)))))) (set! G2b46@bound-id=? (lambda (G2f22@x G2f23@y) (and (eq? (G2b42@id->sym G2f22@x) (G2b42@id->sym G2f23@y)) (G2b44@same-marks? (G2b0e@stx-mark* G2f22@x) (G2b0e@stx-mark* G2f23@y))))) (set! G2b48@free-id=? (lambda (G2f26@i G2f27@j) ((lambda (G2f2a@t0 G2f2b@t1) (if (or G2f2a@t0 G2f2b@t1) (eq? G2f2a@t0 G2f2b@t1) (eq? (G2b42@id->sym G2f26@i) (G2b42@id->sym G2f27@j)))) (G2b5c@id->real-label G2f26@i) (G2b5c@id->real-label G2f27@j)))) (set! G2b4a@valid-bound-ids? (lambda (G2f2e@id*) (and (for-all G2b40@id? G2f2e@id*) (G2b4c@distinct-bound-ids? G2f2e@id*)))) (set! G2b4c@distinct-bound-ids? (lambda (G2f30@id*) (or (null? G2f30@id*) (and (not (G2b4e@bound-id-member? (car G2f30@id*) (cdr G2f30@id*))) (G2b4c@distinct-bound-ids? (cdr G2f30@id*)))))) (set! G2b4e@bound-id-member? (lambda (G2f32@id G2f33@id*) (and (pair? G2f33@id*) (or (G2b46@bound-id=? G2f32@id (car G2f33@id*)) (G2b4e@bound-id-member? G2f32@id (cdr G2f33@id*)))))) (set! G2b50@self-evaluating? (lambda (G2f36@x) (or (number? G2f36@x) (string? G2f36@x) (char? G2f36@x) (boolean? G2f36@x) (regexp? G2f36@x) (bytevector? G2f36@x)))) (set! G2b52@strip-annotations (lambda (G2f38@x) (if (pair? G2f38@x) (cons (G2b52@strip-annotations (car G2f38@x)) (G2b52@strip-annotations (cdr G2f38@x))) (if (vector? G2f38@x) (vector-map G2b52@strip-annotations G2f38@x) (if (G26e9@G260c@annotation? G2f38@x) (G26e8@G260a@annotation-stripped G2f38@x) G2f38@x))))) (set! G2b54@strip (lambda (G2f3a@x G2f3b@m*) (if (G2abe@top-marked? G2f3b@m*) (if (or (G26e9@G260c@annotation? G2f3a@x) (and (pair? G2f3a@x) (G26e9@G260c@annotation? (car G2f3a@x))) (and (vector? G2f3a@x) (> (vector-length G2f3a@x) '0) (G26e9@G260c@annotation? (vector-ref G2f3a@x '0)))) (G2b52@strip-annotations G2f3a@x) G2f3a@x) ((letrec ((G2f3e@f (lambda (G2f40@x) (if (G2b08@stx? G2f40@x) (G2b54@strip (G2b0c@stx-expr G2f40@x) (G2b0e@stx-mark* G2f40@x)) (if (G26e9@G260c@annotation? G2f40@x) (G26e8@G260a@annotation-stripped G2f40@x) (if (pair? G2f40@x) ((lambda (G2f42@a G2f43@d) (if (and (eq? G2f42@a (car G2f40@x)) (eq? G2f43@d (cdr G2f40@x))) G2f40@x (cons G2f42@a G2f43@d))) (G2f3e@f (car G2f40@x)) (G2f3e@f (cdr G2f40@x))) (if (vector? G2f40@x) ((lambda (G2f46@old) ((lambda (G2f48@new) (if (for-all eq? G2f46@old G2f48@new) G2f40@x (list->vector G2f48@new))) (map G2f3e@f G2f46@old))) (vector->list G2f40@x)) G2f40@x))))))) G2f3e@f) G2f3a@x)))) (set! G2b56@stx->datum (lambda (G2f4a@x) (G2b54@strip G2f4a@x '()))) (set! G2b58@same-marks*? (lambda (G2f4c@mark* G2f4d@mark** G2f4e@si) (if (null? G2f4e@si) '#f (if (G2b44@same-marks? G2f4c@mark* (vector-ref G2f4d@mark** (car G2f4e@si))) (car G2f4e@si) (G2b58@same-marks*? G2f4c@mark* G2f4d@mark** (cdr G2f4e@si)))))) (set! G2b5a@id->label (lambda (G2f52@id) (or (G2b5c@id->real-label G2f52@id) ((lambda (G2f54@t) (if G2f54@t ((lambda (G2f56@env) ((lambda (G2f58@rib) (call-with-values (lambda () (G2ac8@gen-define-label+loc G2f52@id G2f58@rib)) (lambda (G2f5c@G2f5a G2f5d@G2f5b) ((lambda (G2f60@loc_ G2f61@lab) (begin (G2af1@extend-rib! G2f58@rib G2f52@id G2f61@lab) G2f61@lab)) G2f5d@G2f5b G2f5c@G2f5a)))) (G2ddc@interaction-env-rib G2f56@env))) G2f54@t) '#f)) (G2e2a@top-level-context))))) (set! G2b5c@id->real-label (lambda (G2f64@id) ((lambda (G2f66@sym) ((letrec ((G2f68@search (lambda (G2f6a@subst* G2f6b@mark*) (if (null? G2f6a@subst*) '#f (if (eq? (car G2f6a@subst*) 'shift) (G2f68@search (cdr G2f6a@subst*) (cdr G2f6b@mark*)) ((lambda (G2f6e@rib) ((lambda (G2f70@t) (if G2f70@t ((lambda (G2f72@ht) ((lambda (G2f74@si) ((lambda (G2f76@i) (if G2f76@i (vector-ref (G2adf@rib-label* G2f6e@rib) G2f76@i) (G2f68@search (cdr G2f6a@subst*) G2f6b@mark*))) (and G2f74@si (G2b58@same-marks*? G2f6b@mark* (G2add@rib-mark** G2f6e@rib) (reverse G2f74@si))))) (hashtable-ref G2f72@ht G2f66@sym '#f))) G2f70@t) ((letrec ((G2f78@f (lambda (G2f7a@sym* G2f7b@mark** G2f7c@label*) (if (null? G2f7a@sym*) (G2f68@search (cdr G2f6a@subst*) G2f6b@mark*) (if (and (eq? (car G2f7a@sym*) G2f66@sym) (G2b44@same-marks? (car G2f7b@mark**) G2f6b@mark*)) (car G2f7c@label*) (G2f78@f (cdr G2f7a@sym*) (cdr G2f7b@mark**) (cdr G2f7c@label*))))))) G2f78@f) (G2adb@rib-sym* G2f6e@rib) (G2add@rib-mark** G2f6e@rib) (G2adf@rib-label* G2f6e@rib)))) (G2ae1@rib-sealed/freq G2f6e@rib))) (car G2f6a@subst*))))))) G2f68@search) (G2b10@stx-subst* G2f64@id) (G2b0e@stx-mark* G2f64@id))) (G2b42@id->sym G2f64@id)))) (set! G2b5e@label->binding (lambda (G2f80@x G2f81@r) ((lambda (G2f84@t) (if G2f84@t ((lambda (G2f86@b) (if (and (pair? G2f86@b) (eq? (car G2f86@b) '$core-rtd)) (cons '$rtd (map G2ce7@bless (cdr G2f86@b))) (if (and (pair? G2f86@b) (eq? (car G2f86@b) 'global-rtd)) ((lambda (G2f88@lib G2f89@loc) (cons '$rtd (symbol-value G2f89@loc))) (cadr G2f86@b) (cddr G2f86@b)) G2f86@b))) G2f84@t) ((lambda (G2f8c@t) (if G2f8c@t (cdr G2f8c@t) ((lambda (G2f8e@t) (if G2f8e@t ((lambda (G2f90@env) ((lambda (G2f92@t) (if G2f92@t ((lambda (G2f94@p) (cons* 'lexical (cdr G2f94@p) '#f)) G2f92@t) '(displaced-lexical . #f))) (assq G2f80@x (G2de0@interaction-env-locs G2f90@env)))) G2f8e@t) '(displaced-lexical . #f))) (G2e2a@top-level-context)))) (assq G2f80@x G2f81@r)))) (G2967@G280d@imported-label->binding G2f80@x)))) (set! G2b60@make-binding cons) (set! G2b62@binding-type car) (set! G2b64@binding-value cdr) (set! G2b66@raise-unbound-error (lambda (G2f96@id) (G2e1a@syntax-violation* '#f '"unbound identifier" G2f96@id (G4a3c@G4886@make-undefined-violation)))) (set! G2b68@syntax-type (lambda (G2f98@e G2f99@r) (if (G2b40@id? G2f98@e) ((lambda (G2f9c@id) ((lambda (G2f9e@label) ((lambda (G2fa0@b) ((lambda (G2fa2@type) ((lambda () (begin (if (not G2f9e@label) (G2b66@raise-unbound-error G2f9c@id) (void)) ((lambda (G2fa4@t) (if (memv G2fa4@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G2fa2@type (G2b64@binding-value G2fa0@b) G2f9c@id) (values 'other '#f '#f))) G2fa2@type))))) (G2b62@binding-type G2fa0@b))) (G2b5e@label->binding G2f9e@label G2f99@r))) (G2b5a@id->label G2f9c@id))) G2f98@e) (if (G2b32@syntax-pair? G2f98@e) ((lambda (G2fa6@id) (if (G2b40@id? G2fa6@id) ((lambda (G2fa8@label) ((lambda (G2faa@b) ((lambda (G2fac@type) ((lambda () (begin (if (not G2fa8@label) (G2b66@raise-unbound-error G2fa6@id) (void)) ((lambda (G2fae@t) (if (memv G2fae@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G2fac@type (G2b64@binding-value G2faa@b) G2fa6@id) (values 'call '#f '#f))) G2fac@type))))) (G2b62@binding-type G2faa@b))) (G2b5e@label->binding G2fa8@label G2f99@r))) (G2b5a@id->label G2fa6@id)) (values 'call '#f '#f))) (G2b3a@syntax-car G2f98@e)) ((lambda (G2fb0@d) (if (G2b50@self-evaluating? G2fb0@d) (values 'constant G2fb0@d '#f) (values 'other '#f '#f))) (G2b56@stx->datum G2f98@e)))))) (set! G2b76@sanitize-binding (lambda (G2fb2@x G2fb3@src) (if (procedure? G2fb2@x) (cons* 'local-macro G2fb2@x G2fb3@src) (if (and (pair? G2fb2@x) (eq? (car G2fb2@x) 'macro!) (procedure? (cdr G2fb2@x))) (cons* 'local-macro! (cdr G2fb2@x) G2fb3@src) (if (and (pair? G2fb2@x) (eq? (car G2fb2@x) '$rtd)) G2fb2@x (assertion-violation 'expand '"invalid transformer" G2fb2@x)))))) (set! G2b78@make-variable-transformer (lambda (G2fb6@x) (if (procedure? G2fb6@x) (cons 'macro! G2fb6@x) (assertion-violation 'make-variable-transformer '"not a procedure" G2fb6@x)))) (set! G2b7a@variable-transformer? (lambda (G2fb8@x) (and (pair? G2fb8@x) (eq? (car G2fb8@x) 'macro!) (procedure? (cdr G2fb8@x))))) (set! G2b7c@variable-transformer-procedure (lambda (G2fba@x) (if (G2b7a@variable-transformer? G2fba@x) (cdr G2fba@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G2fba@x)))) (set! G2b7e@make-eval-transformer (lambda (G2fbc@x) (G2b76@sanitize-binding (eval-core (G2748@G2700@expanded->core G2fbc@x)) G2fbc@x))) (set! G2cb5@parse-define (lambda (G2fbe@x) ((lambda (G2fc0@t) ((lambda (G2fc2@ls/false) (if (and G2fc2@ls/false (apply (lambda (G2fc4@id G2fc5@fmls G2fc6@b G2fc7@b*) (G2b40@id? G2fc4@id)) G2fc2@ls/false)) (apply (lambda (G2fcc@id G2fcd@fmls G2fce@b G2fcf@b*) (begin (G2d59@verify-formals G2fcd@fmls G2fbe@x) (values G2fcc@id (cons 'defun (cons G2fcd@fmls (cons G2fce@b G2fcf@b*)))))) G2fc2@ls/false) ((lambda (G2fd4@t) ((lambda (G2fd6@ls/false) (if (and G2fd6@ls/false (apply (lambda (G2fd8@id G2fd9@val) (G2b40@id? G2fd8@id)) G2fd6@ls/false)) (apply (lambda (G2fdc@id G2fdd@val) (values G2fdc@id (cons 'expr G2fdd@val))) G2fd6@ls/false) ((lambda (G2fe0@t) ((lambda (G2fe2@ls/false) (if (and G2fe2@ls/false (apply (lambda (G2fe4@id) (G2b40@id? G2fe4@id)) G2fe2@ls/false)) (apply (lambda (G2fe6@id) (values G2fe6@id (cons 'expr (G2ce7@bless '(void))))) G2fe2@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G2fe0@t))) (G2d31@syntax-dispatch G2fe0@t '(_ any)))) G2fd4@t))) (G2d31@syntax-dispatch G2fd4@t '(_ any any)))) G2fc0@t))) (G2d31@syntax-dispatch G2fc0@t '(_ (any . any) any . each-any)))) G2fbe@x))) (set! G2cb7@parse-define-syntax (lambda (G2fe8@x) ((lambda (G2fea@t) ((lambda (G2fec@ls/false) (if (and G2fec@ls/false (apply (lambda (G2fee@id G2fef@val) (G2b40@id? G2fee@id)) G2fec@ls/false)) (apply (lambda (G2ff2@id G2ff3@val) (values G2ff2@id G2ff3@val)) G2fec@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G2fea@t))) (G2d31@syntax-dispatch G2fea@t '(_ any any)))) G2fe8@x))) (set! G2cb9@scheme-stx-hashtable (make-eq-hashtable)) (set! G2cbb@scheme-stx (lambda (G2ff6@sym) (or (hashtable-ref G2cb9@scheme-stx-hashtable G2ff6@sym '#f) ((lambda (G2ff8@subst) ((lambda (G2ffa@stx) ((lambda (G2ffc@stx) ((lambda () (begin (hashtable-set! G2cb9@scheme-stx-hashtable G2ff6@sym G2ffc@stx) G2ffc@stx)))) ((lambda (G2ffe@t) (if G2ffe@t ((lambda (G3000@x) ((lambda (G3002@name G3003@label) (G2b2c@add-subst (G2ad9@make-rib (list G3002@name) (list G2abc@top-mark*) (list G3003@label) '#f '#f) G2ffa@stx)) (car G3000@x) (cdr G3000@x))) G2ffe@t) G2ffa@stx)) (assq G2ff6@sym G2ff8@subst)))) (G2b0a@make-stx G2ff6@sym G2abc@top-mark* '() '()))) (G293d@G27b9@library-subst (G2961@G2801@find-library-by-name '(psyntax system $all))))))) (set! G2cbd@lexical-var car) (set! G2cbf@lexical-mutable? cdr) (set! G2cc1@set-lexical-mutable! set-cdr!) (set! G2cc3@add-lexical (lambda (G3006@lab G3007@lex G3008@r) (cons (cons* G3006@lab 'lexical G3007@lex '#f) G3008@r))) (set! G2cc5@add-lexicals (lambda (G300c@lab* G300d@lex* G300e@r) (if (null? G300c@lab*) G300e@r (G2cc5@add-lexicals (cdr G300c@lab*) (cdr G300d@lex*) (G2cc3@add-lexical (car G300c@lab*) (car G300d@lex*) G300e@r))))) (set! G2cc7@letrec-helper (lambda (G3012@e G3013@r G3014@mr G3015@build) ((lambda (G301a@t) ((lambda (G301c@ls/false) (if G301c@ls/false (apply (lambda (G301e@lhs* G301f@rhs* G3020@b G3021@b*) (if (not (G2b4a@valid-bound-ids? G301e@lhs*)) (G2ceb@invalid-fmls-error G3012@e G301e@lhs*) ((lambda (G3026@lex* G3027@lab*) ((lambda (G302a@rib G302b@r) ((lambda (G302e@body G302f@rhs*) (G3015@build '#f G3026@lex* G302f@rhs* G302e@body)) (G2d6b@chi-internal (G2b2c@add-subst G302a@rib (cons G3020@b G3021@b*)) G302b@r G3014@mr) (G2d51@chi-expr* (map (lambda (G3032@x) (G2b2c@add-subst G302a@rib G3032@x)) G301f@rhs*) G302b@r G3014@mr))) (G2afb@make-full-rib G301e@lhs* G3027@lab*) (G2cc5@add-lexicals G3027@lab* G3026@lex* G3013@r))) (map G2ac0@gen-lexical G301e@lhs*) (map G2ac4@gen-label G301e@lhs*)))) G301c@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G301a@t))) (G2d31@syntax-dispatch G301a@t '(_ #(each (any any)) any . each-any)))) G3012@e))) (set! G2cc9@letrec-transformer (lambda (G3034@e G3035@r G3036@mr) (G2cc7@letrec-helper G3034@e G3035@r G3036@mr G2aa3@G2a16@build-letrec))) (set! G2ccb@letrec*-transformer (lambda (G303a@e G303b@r G303c@mr) (G2cc7@letrec-helper G303a@e G303b@r G303c@mr G2aa4@G2a18@build-letrec*))) (set! G2ccd@fluid-let-syntax-transformer (lambda (G3040@e G3041@r G3042@mr) ((lambda (G3047@lookup) (begin (set! G3047@lookup (lambda (G305a@x) (or (G2b5a@id->label G305a@x) (G2e1c@syntax-violation '#f '"unbound identifier" G3040@e G305a@x)))) ((lambda (G3048@t) ((lambda (G304a@ls/false) (if G304a@ls/false (apply (lambda (G304c@lhs* G304d@rhs* G304e@b G304f@b*) (if (not (G2b4a@valid-bound-ids? G304c@lhs*)) (G2ceb@invalid-fmls-error G3040@e G304c@lhs*) ((lambda (G3054@lab* G3055@rhs*) (G2d6b@chi-internal (cons G304e@b G304f@b*) (append (map cons G3054@lab* G3055@rhs*) G3041@r) (append (map cons G3054@lab* G3055@rhs*) G3042@mr))) (map G3047@lookup G304c@lhs*) (map (lambda (G3058@x) (G2b7e@make-eval-transformer (G2d90@expand-transformer G3058@x G3042@mr))) G304d@rhs*)))) G304a@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3048@t))) (G2d31@syntax-dispatch G3048@t '(_ #(each (any any)) any . each-any)))) G3040@e))) '#f))) (set! G2ccf@type-descriptor-transformer (lambda (G305c@e G305d@r G305e@mr) ((lambda (G3062@t) ((lambda (G3064@ls/false) (if (and G3064@ls/false (apply (lambda (G3066@id) (G2b40@id? G3066@id)) G3064@ls/false)) (apply (lambda (G3068@id) ((lambda (G306a@lab) ((lambda (G306c@b) ((lambda (G306e@type) ((lambda () (begin (if (not G306a@lab) (G2b66@raise-unbound-error G3068@id) (void)) (if (not (and (eq? G306e@type '$rtd) (not (list? (G2b64@binding-value G306c@b))))) (G2e1c@syntax-violation '#f '"not a record type" G305c@e) (void)) (list 'quote (G2b64@binding-value G306c@b)))))) (G2b62@binding-type G306c@b))) (G2b5e@label->binding G306a@lab G305d@r))) (G2b5a@id->label G3068@id))) G3064@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3062@t))) (G2d31@syntax-dispatch G3062@t '(_ any)))) G305c@e))) (set! G2cd1@record-type-descriptor-transformer (lambda (G3070@e G3071@r G3072@mr) ((lambda (G3076@t) ((lambda (G3078@ls/false) (if (and G3078@ls/false (apply (lambda (G307a@id) (G2b40@id? G307a@id)) G3078@ls/false)) (apply (lambda (G307c@id) ((lambda (G307e@lab) ((lambda (G3080@b) ((lambda (G3082@type) ((lambda () (begin (if (not G307e@lab) (G2b66@raise-unbound-error G307c@id) (void)) (if (not (and (eq? G3082@type '$rtd) (list? (G2b64@binding-value G3080@b)))) (G2e1c@syntax-violation '#f '"not a record type" G3070@e) (void)) (G2d55@chi-expr (car (G2b64@binding-value G3080@b)) G3071@r G3072@mr))))) (G2b62@binding-type G3080@b))) (G2b5e@label->binding G307e@lab G3071@r))) (G2b5a@id->label G307c@id))) G3078@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3076@t))) (G2d31@syntax-dispatch G3076@t '(_ any)))) G3070@e))) (set! G2cd3@record-constructor-descriptor-transformer (lambda (G3084@e G3085@r G3086@mr) ((lambda (G308a@t) ((lambda (G308c@ls/false) (if (and G308c@ls/false (apply (lambda (G308e@id) (G2b40@id? G308e@id)) G308c@ls/false)) (apply (lambda (G3090@id) ((lambda (G3092@lab) ((lambda (G3094@b) ((lambda (G3096@type) ((lambda () (begin (if (not G3092@lab) (G2b66@raise-unbound-error G3090@id) (void)) (if (not (and (eq? G3096@type '$rtd) (list? (G2b64@binding-value G3094@b)))) (G2e1c@syntax-violation '#f '"invalid type" G3084@e) (void)) (G2d55@chi-expr (cadr (G2b64@binding-value G3094@b)) G3085@r G3086@mr))))) (G2b62@binding-type G3094@b))) (G2b5e@label->binding G3092@lab G3085@r))) (G2b5a@id->label G3090@id))) G308c@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G308a@t))) (G2d31@syntax-dispatch G308a@t '(_ any)))) G3084@e))) (set! G2cd5@when-macro (lambda (G3098@e) ((lambda (G309a@t) ((lambda (G309c@ls/false) (if G309c@ls/false (apply (lambda (G309e@test G309f@e G30a0@e*) (G2ce7@bless (list 'if G309e@test (cons 'begin (cons G309f@e G30a0@e*))))) G309c@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G309a@t))) (G2d31@syntax-dispatch G309a@t '(_ any any . each-any)))) G3098@e))) (set! G2cd7@unless-macro (lambda (G30a4@e) ((lambda (G30a6@t) ((lambda (G30a8@ls/false) (if G30a8@ls/false (apply (lambda (G30aa@test G30ab@e G30ac@e*) (G2ce7@bless (list 'if (list 'not G30aa@test) (cons 'begin (cons G30ab@e G30ac@e*))))) G30a8@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G30a6@t))) (G2d31@syntax-dispatch G30a6@t '(_ any any . each-any)))) G30a4@e))) (set! G2cd9@if-transformer (lambda (G30b0@e G30b1@r G30b2@mr) ((lambda (G30b6@t) ((lambda (G30b8@ls/false) (if G30b8@ls/false (apply (lambda (G30ba@e0 G30bb@e1 G30bc@e2) (list 'if (G2d55@chi-expr G30ba@e0 G30b1@r G30b2@mr) (G2d55@chi-expr G30bb@e1 G30b1@r G30b2@mr) (G2d55@chi-expr G30bc@e2 G30b1@r G30b2@mr))) G30b8@ls/false) ((lambda (G30c0@t) ((lambda (G30c2@ls/false) (if G30c2@ls/false (apply (lambda (G30c4@e0 G30c5@e1) (list 'if (G2d55@chi-expr G30c4@e0 G30b1@r G30b2@mr) (G2d55@chi-expr G30c5@e1 G30b1@r G30b2@mr) (G2aa2@G2a14@build-void))) G30c2@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G30c0@t))) (G2d31@syntax-dispatch G30c0@t '(_ any any)))) G30b6@t))) (G2d31@syntax-dispatch G30b6@t '(_ any any any)))) G30b0@e))) (set! G2cdb@and-transformer (lambda (G30c8@e G30c9@r G30ca@mr) ((lambda (G30ce@t) ((lambda (G30d0@ls/false) (if G30d0@ls/false (apply (lambda (G30d2@e*) (cons 'and (G2d51@chi-expr* G30d2@e* G30c9@r G30ca@mr))) G30d0@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G30ce@t))) (G2d31@syntax-dispatch G30ce@t '(_ . each-any)))) G30c8@e))) (set! G2cdd@or-transformer (lambda (G30d4@e G30d5@r G30d6@mr) ((lambda (G30da@t) ((lambda (G30dc@ls/false) (if G30dc@ls/false (apply (lambda (G30de@e*) (cons 'or (G2d51@chi-expr* G30de@e* G30d5@r G30d6@mr))) G30dc@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G30da@t))) (G2d31@syntax-dispatch G30da@t '(_ . each-any)))) G30d4@e))) (set! G2cdf@case-macro (lambda (G30e0@e) ((lambda (G30e3@build-last G30e5@build-one) (begin (set! G30e3@build-last (lambda (G310a@cls) ((lambda (G310c@t) ((lambda (G310e@ls/false) (if G310e@ls/false (apply (lambda (G3110@e G3111@e*) (cons 'begin (cons G3110@e G3111@e*))) G310e@ls/false) ((lambda (G3114@t) ((lambda (G3116@ls/false) (if G3116@ls/false (apply (lambda () (G30e5@build-one G310a@cls '(if #f #f))) G3116@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3114@t))) (G2d31@syntax-dispatch G3114@t '_))) G310c@t))) (G2d31@syntax-dispatch G310c@t '(#(scheme-id else) any . each-any)))) G310a@cls))) (set! G30e5@build-one (lambda (G30fc@cls G30fd@k) ((lambda (G3100@t) ((lambda (G3102@ls/false) (if G3102@ls/false (apply (lambda (G3104@d* G3105@e G3106@e*) (list 'if (list 'memv 't (list 'quote G3104@d*)) (cons 'begin (cons G3105@e G3106@e*)) G30fd@k)) G3102@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3100@t))) (G2d31@syntax-dispatch G3100@t '(each-any any . each-any)))) G30fc@cls))) ((lambda (G30e6@t) ((lambda (G30e8@ls/false) (if G30e8@ls/false (apply (lambda (G30ea@expr) (G2ce7@bless (cons 'let (cons (list (list 't G30ea@expr)) '((if #f #f)))))) G30e8@ls/false) ((lambda (G30ec@t) ((lambda (G30ee@ls/false) (if G30ee@ls/false (apply (lambda (G30f0@expr G30f1@cls G30f2@cls*) (G2ce7@bless (list 'let (list (list 't G30f0@expr)) ((letrec ((G30f6@f (lambda (G30f8@cls G30f9@cls*) (if (null? G30f9@cls*) (G30e3@build-last G30f8@cls) (G30e5@build-one G30f8@cls (G30f6@f (car G30f9@cls*) (cdr G30f9@cls*))))))) G30f6@f) G30f1@cls G30f2@cls*)))) G30ee@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G30ec@t))) (G2d31@syntax-dispatch G30ec@t '(_ any any . each-any)))) G30e6@t))) (G2d31@syntax-dispatch G30e6@t '(_ any)))) G30e0@e))) '#f '#f))) (set! G2ce1@quote-transformer (lambda (G3118@e G3119@r G311a@mr) ((lambda (G311e@t) ((lambda (G3120@ls/false) (if G3120@ls/false (apply (lambda (G3122@datum) (list 'quote (G2b56@stx->datum G3122@datum))) G3120@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G311e@t))) (G2d31@syntax-dispatch G311e@t '(_ any)))) G3118@e))) (set! G2ce3@case-lambda-transformer (lambda (G3124@e G3125@r G3126@mr) ((lambda (G312a@t) ((lambda (G312c@ls/false) (if G312c@ls/false (apply (lambda (G312e@fmls* G312f@b* G3130@b**) (call-with-values (lambda () (G2d5d@chi-lambda-clause* G3124@e G312e@fmls* (map cons G312f@b* G3130@b**) G3125@r G3126@mr)) (lambda (G3136@G3134 G3137@G3135) ((lambda (G313a@body* G313b@fmls*) (G2a9f@G29e2@build-case-lambda '#f G313b@fmls* G313a@body*)) G3137@G3135 G3136@G3134)))) G312c@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G312a@t))) (G2d31@syntax-dispatch G312a@t '(_ . #(each (any any . each-any)))))) G3124@e))) (set! G2ce5@lambda-transformer (lambda (G313e@e G313f@r G3140@mr) ((lambda (G3144@t) ((lambda (G3146@ls/false) (if G3146@ls/false (apply (lambda (G3148@fmls G3149@b G314a@b*) (call-with-values (lambda () (G2d5b@chi-lambda-clause G313e@e G3148@fmls (cons G3149@b G314a@b*) G313f@r G3140@mr)) (lambda (G3150@G314e G3151@G314f) ((lambda (G3154@body G3155@fmls) (G2a9e@G29e0@build-lambda '#f G3155@fmls G3154@body)) G3151@G314f G3150@G314e)))) G3146@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3144@t))) (G2d31@syntax-dispatch G3144@t '(_ any any . each-any)))) G313e@e))) (set! G2ce7@bless (lambda (G3158@x) (G2b28@mkstx ((letrec ((G315a@f (lambda (G315c@x) (if (G2b08@stx? G315c@x) G315c@x (if (pair? G315c@x) (cons (G315a@f (car G315c@x)) (G315a@f (cdr G315c@x))) (if (symbol? G315c@x) (G2cbb@scheme-stx G315c@x) (if (vector? G315c@x) (vector-map G315a@f G315c@x) G315c@x))))))) G315a@f) G3158@x) '() '() '()))) (set! G2ce9@with-syntax-macro (lambda (G315e@e) ((lambda (G3160@t) ((lambda (G3162@ls/false) (if G3162@ls/false (apply (lambda (G3164@pat* G3165@expr* G3166@b G3167@b*) ((lambda (G316c@idn*) (begin (G2d59@verify-formals (map car G316c@idn*) G315e@e) ((lambda (G316e@t*) (G2ce7@bless (list 'let (map list G316e@t* G3165@expr*) ((letrec ((G3170@f (lambda (G3172@pat* G3173@t*) (if (null? G3172@pat*) (cons 'begin (cons '#f (cons G3166@b G3167@b*))) (list 'syntax-case (car G3173@t*) '() (list (car G3172@pat*) (G3170@f (cdr G3172@pat*) (cdr G3173@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G3172@pat*)) (car G3173@t*)))))))) G3170@f) G3164@pat* G316e@t*)))) (G2e0a@generate-temporaries G3165@expr*)))) ((letrec ((G3176@f (lambda (G3178@pat*) (if (null? G3178@pat*) '() (call-with-values (lambda () (G2d2f@convert-pattern (car G3178@pat*) '())) (lambda (G317c@G317a G317d@G317b) ((lambda (G3180@idn* G3181@pat) (append G3180@idn* (G3176@f (cdr G3178@pat*)))) G317d@G317b G317c@G317a))))))) G3176@f) G3164@pat*))) G3162@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3160@t))) (G2d31@syntax-dispatch G3160@t '(_ #(each (any any)) any . each-any)))) G315e@e))) (set! G2ceb@invalid-fmls-error (lambda (G3184@stx G3185@fmls) ((lambda (G3188@t) ((lambda (G318a@ls/false) (if G318a@ls/false (apply (lambda (G318c@id* G318d@last) ((letrec ((G3190@f (lambda (G3192@id*) (if (null? G3192@id*) (values) (if (not (G2b40@id? (car G3192@id*))) (G2e1c@syntax-violation '#f '"not an identifier" G3184@stx (car G3192@id*)) (begin (G3190@f (cdr G3192@id*)) (if (G2b4e@bound-id-member? (car G3192@id*) (cdr G3192@id*)) (G2e1c@syntax-violation '#f '"duplicate binding" G3184@stx (car G3192@id*)) (void)))))))) G3190@f) (if (G2b40@id? G318d@last) (cons G318d@last G318c@id*) (if (G2b36@syntax-null? G318d@last) G318c@id* (G2e1c@syntax-violation '#f '"not an identifier" G3184@stx G318d@last))))) G318a@ls/false) ((lambda (G3194@t) ((lambda (G3196@ls/false) (if G3196@ls/false (apply (lambda () (G2e1c@syntax-violation '#f '"malformed binding form" G3184@stx G3185@fmls)) G3196@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3194@t))) (G2d31@syntax-dispatch G3194@t '_))) G3188@t))) (G2d31@syntax-dispatch G3188@t '#(each+ any () any)))) G3185@fmls))) (set! G2ced@let-macro (lambda (G3198@stx) ((lambda (G319a@t) ((lambda (G319c@ls/false) (if G319c@ls/false (apply (lambda (G319e@lhs* G319f@rhs* G31a0@b G31a1@b*) (if (G2b4a@valid-bound-ids? G319e@lhs*) (G2ce7@bless (cons (cons 'lambda (cons G319e@lhs* (cons G31a0@b G31a1@b*))) G319f@rhs*)) (G2ceb@invalid-fmls-error G3198@stx G319e@lhs*))) G319c@ls/false) ((lambda (G31a6@t) ((lambda (G31a8@ls/false) (if (and G31a8@ls/false (apply (lambda (G31aa@f G31ab@lhs* G31ac@rhs* G31ad@b G31ae@b*) (G2b40@id? G31aa@f)) G31a8@ls/false)) (apply (lambda (G31b4@f G31b5@lhs* G31b6@rhs* G31b7@b G31b8@b*) (if (G2b4a@valid-bound-ids? G31b5@lhs*) (G2ce7@bless (cons (list 'letrec (list (list G31b4@f (cons 'lambda (cons G31b5@lhs* (cons G31b7@b G31b8@b*))))) G31b4@f) G31b6@rhs*)) (G2ceb@invalid-fmls-error G3198@stx G31b5@lhs*))) G31a8@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G31a6@t))) (G2d31@syntax-dispatch G31a6@t '(_ any #(each (any any)) any . each-any)))) G319a@t))) (G2d31@syntax-dispatch G319a@t '(_ #(each (any any)) any . each-any)))) G3198@stx))) (set! G2cef@let-values-macro (lambda (G31be@stx) ((lambda (G31c1@rename G31c3@rename*) (begin (set! G31c1@rename (lambda (G3223@x G3224@old* G3225@new*) (begin (if (not (G2b40@id? G3223@x)) (G2e1c@syntax-violation '#f '"not an indentifier" G31be@stx G3223@x) (void)) (if (G2b4e@bound-id-member? G3223@x G3224@old*) (G2e1c@syntax-violation '#f '"duplicate binding" G31be@stx G3223@x) (void)) ((lambda (G3229@y) (values G3229@y (cons G3223@x G3224@old*) (cons G3229@y G3225@new*))) (gensym (G2e22@syntax->datum G3223@x)))))) (set! G31c3@rename* (lambda (G3211@x* G3212@old* G3213@new*) (if (null? G3211@x*) (values '() G3212@old* G3213@new*) (call-with-values (lambda () (G31c1@rename (car G3211@x*) G3212@old* G3213@new*)) (lambda (G3217@x G3218@old* G3219@new*) (call-with-values (lambda () (G31c3@rename* (cdr G3211@x*) G3218@old* G3219@new*)) (lambda (G321d@x* G321e@old* G321f@new*) (values (cons G3217@x G321d@x*) G321e@old* G321f@new*)))))))) ((lambda (G31c4@t) ((lambda (G31c6@ls/false) (if G31c6@ls/false (apply (lambda (G31c8@b G31c9@b*) (cons* (G2ce7@bless 'let) '() G31c8@b G31c9@b*)) G31c6@ls/false) ((lambda (G31cc@t) ((lambda (G31ce@ls/false) (if G31ce@ls/false (apply (lambda (G31d0@lhs* G31d1@rhs* G31d2@b G31d3@b*) (G2ce7@bless ((letrec ((G31d8@f (lambda (G31da@lhs* G31db@rhs* G31dc@old* G31dd@new*) (if (null? G31da@lhs*) (cons 'let (cons (map list G31dc@old* G31dd@new*) (cons G31d2@b G31d3@b*))) ((lambda (G31e2@t) ((lambda (G31e4@ls/false) (if G31e4@ls/false (apply (lambda (G31e6@x*) (call-with-values (lambda () (G31c3@rename* G31e6@x* G31dc@old* G31dd@new*)) (lambda (G31eb@G31e8 G31ec@G31e9 G31ed@G31ea) ((lambda (G31f1@new* G31f2@old* G31f3@y*) (list 'call-with-values (list 'lambda '() (car G31db@rhs*)) (list 'lambda G31f3@y* (G31d8@f (cdr G31da@lhs*) (cdr G31db@rhs*) G31f2@old* G31f1@new*)))) G31ed@G31ea G31ec@G31e9 G31eb@G31e8)))) G31e4@ls/false) ((lambda (G31f7@t) ((lambda (G31f9@ls/false) (if G31f9@ls/false (apply (lambda (G31fb@x* G31fc@x) (call-with-values (lambda () (G31c1@rename G31fc@x G31dc@old* G31dd@new*)) (lambda (G31ff@y G3200@old* G3201@new*) (call-with-values (lambda () (G31c3@rename* G31fb@x* G3200@old* G3201@new*)) (lambda (G3205@y* G3206@old* G3207@new*) (list 'call-with-values (list 'lambda '() (car G31db@rhs*)) (list 'lambda (append G3205@y* G31ff@y) (G31d8@f (cdr G31da@lhs*) (cdr G31db@rhs*) G3206@old* G3207@new*)))))))) G31f9@ls/false) ((lambda (G320b@t) ((lambda (G320d@ls/false) (if G320d@ls/false (apply (lambda (G320f@others) (G2e1c@syntax-violation '#f '"malformed bindings" G31be@stx G320f@others)) G320d@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G320b@t))) (G2d31@syntax-dispatch G320b@t 'any))) G31f7@t))) (G2d31@syntax-dispatch G31f7@t '#(each+ any () any)))) G31e2@t))) (G2d31@syntax-dispatch G31e2@t 'each-any))) (car G31da@lhs*)))))) G31d8@f) G31d0@lhs* G31d1@rhs* '() '()))) G31ce@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G31cc@t))) (G2d31@syntax-dispatch G31cc@t '(_ #(each (any any)) any . each-any)))) G31c4@t))) (G2d31@syntax-dispatch G31c4@t '(_ () any . each-any)))) G31be@stx))) '#f '#f))) (set! G2cf1@let*-values-macro (lambda (G322b@stx) ((lambda (G322e@check) (begin (set! G322e@check (lambda (G325d@x*) (if (not (null? G325d@x*)) ((lambda (G325f@x) (begin (if (not (G2b40@id? G325f@x)) (G2e1c@syntax-violation '#f '"not an identifier" G322b@stx G325f@x) (void)) (G322e@check (cdr G325d@x*)) (if (G2b4e@bound-id-member? G325f@x (cdr G325d@x*)) (G2e1c@syntax-violation '#f '"duplicate identifier" G322b@stx G325f@x) (void)))) (car G325d@x*)) (void)))) ((lambda (G322f@t) ((lambda (G3231@ls/false) (if G3231@ls/false (apply (lambda (G3233@b G3234@b*) (cons* (G2ce7@bless 'let) '() G3233@b G3234@b*)) G3231@ls/false) ((lambda (G3237@t) ((lambda (G3239@ls/false) (if G3239@ls/false (apply (lambda (G323b@lhs* G323c@rhs* G323d@b G323e@b*) (G2ce7@bless ((letrec ((G3243@f (lambda (G3245@lhs* G3246@rhs*) (if (null? G3245@lhs*) (cons 'begin (cons G323d@b G323e@b*)) ((lambda (G3249@t) ((lambda (G324b@ls/false) (if G324b@ls/false (apply (lambda (G324d@x*) (begin (G322e@check G324d@x*) (list 'call-with-values (list 'lambda '() (car G3246@rhs*)) (list 'lambda G324d@x* (G3243@f (cdr G3245@lhs*) (cdr G3246@rhs*)))))) G324b@ls/false) ((lambda (G324f@t) ((lambda (G3251@ls/false) (if G3251@ls/false (apply (lambda (G3253@x* G3254@x) (begin (G322e@check (cons G3254@x G3253@x*)) (list 'call-with-values (list 'lambda '() (car G3246@rhs*)) (list 'lambda (append G3253@x* G3254@x) (G3243@f (cdr G3245@lhs*) (cdr G3246@rhs*)))))) G3251@ls/false) ((lambda (G3257@t) ((lambda (G3259@ls/false) (if G3259@ls/false (apply (lambda (G325b@others) (G2e1c@syntax-violation '#f '"malformed bindings" G322b@stx G325b@others)) G3259@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3257@t))) (G2d31@syntax-dispatch G3257@t 'any))) G324f@t))) (G2d31@syntax-dispatch G324f@t '#(each+ any () any)))) G3249@t))) (G2d31@syntax-dispatch G3249@t 'each-any))) (car G3245@lhs*)))))) G3243@f) G323b@lhs* G323c@rhs*))) G3239@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3237@t))) (G2d31@syntax-dispatch G3237@t '(_ #(each (any any)) any . each-any)))) G322f@t))) (G2d31@syntax-dispatch G322f@t '(_ () any . each-any)))) G322b@stx))) '#f))) (set! G2cf3@trace-lambda-macro (lambda (G3261@stx) ((lambda (G3263@t) ((lambda (G3265@ls/false) (if G3265@ls/false (apply (lambda (G3267@who G3268@fmls G3269@b G326a@b*) (if (G2b4a@valid-bound-ids? G3268@fmls) (G2ce7@bless (list 'make-traced-procedure (list 'quote G3267@who) (cons 'lambda (cons G3268@fmls (cons G3269@b G326a@b*))))) (G2ceb@invalid-fmls-error G3261@stx G3268@fmls))) G3265@ls/false) ((lambda (G326f@t) ((lambda (G3271@ls/false) (if G3271@ls/false (apply (lambda (G3273@who G3274@fmls G3275@last G3276@b G3277@b*) (if (G2b4a@valid-bound-ids? (cons G3275@last G3274@fmls)) (G2ce7@bless (list 'make-traced-procedure (list 'quote G3273@who) (cons 'lambda (cons (append G3274@fmls G3275@last) (cons G3276@b G3277@b*))))) (G2ceb@invalid-fmls-error G3261@stx (append G3274@fmls G3275@last)))) G3271@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G326f@t))) (G2d31@syntax-dispatch G326f@t '(_ any #(each+ any () any) any . each-any)))) G3263@t))) (G2d31@syntax-dispatch G3263@t '(_ any each-any any . each-any)))) G3261@stx))) (set! G2cf5@trace-define-macro (lambda (G327d@stx) ((lambda (G327f@t) ((lambda (G3281@ls/false) (if G3281@ls/false (apply (lambda (G3283@who G3284@fmls G3285@b G3286@b*) (if (G2b4a@valid-bound-ids? G3284@fmls) (G2ce7@bless (list 'define G3283@who (list 'make-traced-procedure (list 'quote G3283@who) (cons 'lambda (cons G3284@fmls (cons G3285@b G3286@b*)))))) (G2ceb@invalid-fmls-error G327d@stx G3284@fmls))) G3281@ls/false) ((lambda (G328b@t) ((lambda (G328d@ls/false) (if G328d@ls/false (apply (lambda (G328f@who G3290@fmls G3291@last G3292@b G3293@b*) (if (G2b4a@valid-bound-ids? (cons G3291@last G3290@fmls)) (G2ce7@bless (list 'define G328f@who (list 'make-traced-procedure (list 'quote G328f@who) (cons 'lambda (cons (append G3290@fmls G3291@last) (cons G3292@b G3293@b*)))))) (G2ceb@invalid-fmls-error G327d@stx (append G3290@fmls G3291@last)))) G328d@ls/false) ((lambda (G3299@t) ((lambda (G329b@ls/false) (if G329b@ls/false (apply (lambda (G329d@who G329e@expr) (if (G2b40@id? G329d@who) (G2ce7@bless (list 'define G329d@who (list 'let (list (list 'v G329e@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G329d@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G2e1c@syntax-violation '#f '"invalid name" G327d@stx))) G329b@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3299@t))) (G2d31@syntax-dispatch G3299@t '(_ any any)))) G328b@t))) (G2d31@syntax-dispatch G328b@t '(_ (any . #(each+ any () any)) any . each-any)))) G327f@t))) (G2d31@syntax-dispatch G327f@t '(_ (any . each-any) any . each-any)))) G327d@stx))) (set! G2cf7@trace-define-syntax-macro (lambda (G32a1@stx) ((lambda (G32a3@t) ((lambda (G32a5@ls/false) (if G32a5@ls/false (apply (lambda (G32a7@who G32a8@expr) (if (G2b40@id? G32a7@who) (G2ce7@bless (list 'define-syntax G32a7@who (list 'make-traced-macro (list 'quote G32a7@who) G32a8@expr))) (G2e1c@syntax-violation '#f '"invalid name" G32a1@stx))) G32a5@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G32a3@t))) (G2d31@syntax-dispatch G32a3@t '(_ any any)))) G32a1@stx))) (set! G2cf9@trace-let/rec-syntax (lambda (G32ab@who) (lambda (G32ad@stx) ((lambda (G32af@t) ((lambda (G32b1@ls/false) (if G32b1@ls/false (apply (lambda (G32b3@lhs* G32b4@rhs* G32b5@b G32b6@b*) (if (G2b4a@valid-bound-ids? G32b3@lhs*) ((lambda (G32bb@rhs*) (G2ce7@bless (cons G32ab@who (cons (map list G32b3@lhs* G32bb@rhs*) (cons G32b5@b G32b6@b*))))) (map (lambda (G32bd@lhs G32be@rhs) (list 'make-traced-macro (list 'quote G32bd@lhs) G32be@rhs)) G32b3@lhs* G32b4@rhs*)) (G2ceb@invalid-fmls-error G32ad@stx G32b3@lhs*))) G32b1@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G32af@t))) (G2d31@syntax-dispatch G32af@t '(_ #(each (any any)) any . each-any)))) G32ad@stx)))) (set! G2cfb@trace-let-syntax-macro (G2cf9@trace-let/rec-syntax 'let-syntax)) (set! G2cfd@trace-letrec-syntax-macro (G2cf9@trace-let/rec-syntax 'letrec-syntax)) (set! G2cff@guard-macro (lambda (G32c1@x) ((lambda (G32c4@gen-clauses) (begin (set! G32c4@gen-clauses (lambda (G32db@con G32dc@outerk G32dd@clause*) ((lambda (G32e2@f G32e4@f*) (begin (set! G32e2@f (lambda (G3317@x G3318@k) ((lambda (G331b@t) ((lambda (G331d@ls/false) (if G331d@ls/false (apply (lambda (G331f@e G3320@p) ((lambda (G3323@t) (list 'let (list (list G3323@t G331f@e)) (list 'if G3323@t (list G3320@p G3323@t) G3318@k))) (gensym))) G331d@ls/false) ((lambda (G3325@t) ((lambda (G3327@ls/false) (if G3327@ls/false (apply (lambda (G3329@e) ((lambda (G332b@t) (list 'let (list (list G332b@t G3329@e)) (list 'if G332b@t G332b@t G3318@k))) (gensym))) G3327@ls/false) ((lambda (G332d@t) ((lambda (G332f@ls/false) (if G332f@ls/false (apply (lambda (G3331@e G3332@v G3333@v*) (list 'if G3331@e (cons 'begin (cons G3332@v G3333@v*)) G3318@k)) G332f@ls/false) ((lambda (G3337@t) ((lambda (G3339@ls/false) (if G3339@ls/false (apply (lambda () (G2e1c@syntax-violation '#f '"invalid guard clause" G3317@x)) G3339@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3337@t))) (G2d31@syntax-dispatch G3337@t '_))) G332d@t))) (G2d31@syntax-dispatch G332d@t '(any any . each-any)))) G3325@t))) (G2d31@syntax-dispatch G3325@t '(any)))) G331b@t))) (G2d31@syntax-dispatch G331b@t '(any #(scheme-id =>) any)))) G3317@x))) (set! G32e4@f* (lambda (G32ef@x*) ((lambda (G32f1@t) ((lambda (G32f3@ls/false) (if G32f3@ls/false (apply (lambda () ((lambda (G32f5@g) (values (list G32f5@g (list 'lambda '() (list 'raise-continuable G32db@con))) G32f5@g)) (gensym))) G32f3@ls/false) ((lambda (G32f7@t) ((lambda (G32f9@ls/false) (if G32f9@ls/false (apply (lambda (G32fb@e G32fc@e*) (values (cons 'begin (cons G32fb@e G32fc@e*)) '#f)) G32f9@ls/false) ((lambda (G32ff@t) ((lambda (G3301@ls/false) (if G3301@ls/false (apply (lambda (G3303@cls G3304@cls*) (call-with-values (lambda () (G32e4@f* G3304@cls*)) (lambda (G3309@G3307 G330a@G3308) ((lambda (G330d@g G330e@e) (values (G32e2@f G3303@cls G330e@e) G330d@g)) G330a@G3308 G3309@G3307)))) G3301@ls/false) ((lambda (G3311@t) ((lambda (G3313@ls/false) (if G3313@ls/false (apply (lambda (G3315@others) (G2e1c@syntax-violation '#f '"invalid guard clause" G3315@others)) G3313@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3311@t))) (G2d31@syntax-dispatch G3311@t 'any))) G32ff@t))) (G2d31@syntax-dispatch G32ff@t '(any . any)))) G32f7@t))) (G2d31@syntax-dispatch G32f7@t '((#(scheme-id else) any . each-any))))) G32f1@t))) (G2d31@syntax-dispatch G32f1@t '()))) G32ef@x*))) (call-with-values (lambda () (G32e4@f* G32dd@clause*)) (lambda (G32e7@G32e5 G32e8@G32e6) ((lambda (G32eb@raisek G32ec@code) (if G32eb@raisek (list (list 'call/cc (list 'lambda (list G32eb@raisek) (list G32dc@outerk (list 'lambda '() G32ec@code))))) (list G32dc@outerk (list 'lambda '() G32ec@code)))) G32e8@G32e6 G32e7@G32e5))))) '#f '#f))) ((lambda (G32c5@t) ((lambda (G32c7@ls/false) (if (and G32c7@ls/false (apply (lambda (G32c9@con G32ca@clause* G32cb@b G32cc@b*) (G2b40@id? G32c9@con)) G32c7@ls/false)) (apply (lambda (G32d1@con G32d2@clause* G32d3@b G32d4@b*) ((lambda (G32d9@outerk) (G2ce7@bless (list (list 'call/cc (list 'lambda (list G32d9@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G32d1@con) (G32c4@gen-clauses G32d1@con G32d9@outerk G32d2@clause*)) (cons 'lambda (cons '() (cons G32d3@b G32d4@b*)))))))))) (gensym))) G32c7@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G32c5@t))) (G2d31@syntax-dispatch G32c5@t '(_ (any . each-any) any . each-any)))) G32c1@x))) '#f))) (set! G2d01@define-enumeration-macro (lambda (G333b@stx) ((lambda (G333e@set? G3340@remove-dups) (begin (set! G333e@set? (lambda (G3357@x) (or (null? G3357@x) (and (not (memq (car G3357@x) (cdr G3357@x))) (G333e@set? (cdr G3357@x)))))) (set! G3340@remove-dups (lambda (G3355@ls) (if (null? G3355@ls) '() (cons (car G3355@ls) (G3340@remove-dups (remq (car G3355@ls) (cdr G3355@ls))))))) ((lambda (G3341@t) ((lambda (G3343@ls/false) (if (and G3343@ls/false (apply (lambda (G3345@name G3346@id* G3347@maker) (and (G2b40@id? G3345@name) (G2b40@id? G3347@maker) (for-all G2b40@id? G3346@id*))) G3343@ls/false)) (apply (lambda (G334b@name G334c@id* G334d@maker) ((lambda (G3351@name* G3352@mk) (G2ce7@bless (list 'begin (list 'define G3352@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3351@name*)))) (list 'define-syntax G334b@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3351@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G334b@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G334d@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G334d@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3351@name*)) (cons 'syntax-violation (cons (list 'quote G334d@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3352@mk '('(n* ...)))))))))))) (G3340@remove-dups (G2e22@syntax->datum G334c@id*)) (gensym))) G3343@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3341@t))) (G2d31@syntax-dispatch G3341@t '(_ any each-any any)))) G333b@stx))) '#f '#f))) (set! G2d03@time-macro (lambda (G3359@stx) ((lambda (G335b@t) ((lambda (G335d@ls/false) (if G335d@ls/false (apply (lambda (G335f@expr) ((lambda (G3361@str) (G2ce7@bless (list 'time-it G3361@str (list 'lambda '() G335f@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G3365@G3363 G3366@G3364) ((lambda (G3369@e G336a@p) (begin (write (G2e22@syntax->datum G335f@expr) G336a@p) (G3369@e))) G3366@G3364 G3365@G3363))))) G335d@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G335b@t))) (G2d31@syntax-dispatch G335b@t '(_ any)))) G3359@stx))) (set! G2d05@delay-macro (lambda (G336d@stx) ((lambda (G336f@t) ((lambda (G3371@ls/false) (if G3371@ls/false (apply (lambda (G3373@expr) (G2ce7@bless (list 'make-promise (list 'lambda '() G3373@expr)))) G3371@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G336f@t))) (G2d31@syntax-dispatch G336f@t '(_ any)))) G336d@stx))) (set! G2d07@assert-macro (lambda (G3375@stx) ((lambda (G3377@t) ((lambda (G3379@ls/false) (if G3379@ls/false (apply (lambda (G337b@expr) ((lambda (G337d@pos) (G2ce7@bless (list 'unless G337b@expr (list 'assertion-error (list 'quote G337b@expr) (list 'quote G337d@pos))))) (or (G2e14@expression-position G3375@stx) (G2e14@expression-position G337b@expr)))) G3379@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3377@t))) (G2d31@syntax-dispatch G3377@t '(_ any)))) G3375@stx))) (set! G2d09@endianness-macro (lambda (G337f@stx) ((lambda (G3381@t) ((lambda (G3383@ls/false) (if G3383@ls/false (apply (lambda (G3385@e) ((lambda (G3387@t) (if (memv G3387@t '(little)) (G2ce7@bless ''little) (if (memv G3387@t '(big)) (G2ce7@bless ''big) (G2e1c@syntax-violation '#f '"endianness must be big or little" G337f@stx)))) (G2e22@syntax->datum G3385@e))) G3383@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3381@t))) (G2d31@syntax-dispatch G3381@t '(_ any)))) G337f@stx))) (set! G2d0b@identifier-syntax-macro (lambda (G3389@stx) ((lambda (G338b@t) ((lambda (G338d@ls/false) (if G338d@ls/false (apply (lambda (G338f@expr) (G2ce7@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G338f@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G338f@expr) '((syntax (e* ...)))))))))) G338d@ls/false) ((lambda (G3391@t) ((lambda (G3393@ls/false) (if (and G3393@ls/false (apply (lambda (G3395@id1 G3396@expr1 G3397@id2 G3398@expr2 G3399@expr3) (and (G2b40@id? G3395@id1) (G2b40@id? G3397@id2) (G2b40@id? G3398@expr2))) G3393@ls/false)) (apply (lambda (G339f@id1 G33a0@expr1 G33a1@id2 G33a2@expr2 G33a3@expr3) (G2ce7@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G33a0@expr1)) (list (list 'set! 'id G33a2@expr2) (list 'syntax G33a3@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G33a0@expr1 '(e* ...))))))))) G3393@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3391@t))) (G2d31@syntax-dispatch G3391@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G338b@t))) (G2d31@syntax-dispatch G338b@t '(_ any)))) G3389@stx))) (set! G2d0d@do-macro (lambda (G33a9@stx) ((lambda (G33ac@bind) (begin (set! G33ac@bind (lambda (G33c3@x) ((lambda (G33c5@t) ((lambda (G33c7@ls/false) (if G33c7@ls/false (apply (lambda (G33c9@x G33ca@init) (list G33c9@x G33ca@init G33c9@x)) G33c7@ls/false) ((lambda (G33cd@t) ((lambda (G33cf@ls/false) (if G33cf@ls/false (apply (lambda (G33d1@x G33d2@init G33d3@step) (list G33d1@x G33d2@init G33d3@step)) G33cf@ls/false) ((lambda (G33d7@t) ((lambda (G33d9@ls/false) (if G33d9@ls/false (apply (lambda () (G2e1c@syntax-violation '#f '"invalid binding" G33a9@stx)) G33d9@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G33d7@t))) (G2d31@syntax-dispatch G33d7@t '_))) G33cd@t))) (G2d31@syntax-dispatch G33cd@t '(any any any)))) G33c5@t))) (G2d31@syntax-dispatch G33c5@t '(any any)))) G33c3@x))) ((lambda (G33ad@t) ((lambda (G33af@ls/false) (if G33af@ls/false (apply (lambda (G33b1@binding* G33b2@test G33b3@expr* G33b4@command*) ((lambda (G33b9@t) ((lambda (G33bb@ls/false) (if G33bb@ls/false (apply (lambda (G33bd@x* G33be@init* G33bf@step*) (if (G2b4a@valid-bound-ids? G33bd@x*) (G2ce7@bless (list 'letrec (list (list 'loop (list 'lambda G33bd@x* (list 'if G33b2@test (cons 'begin (cons '(if #f #f) G33b3@expr*)) (cons 'begin (append G33b4@command* (list (cons 'loop G33bf@step*)))))))) (cons 'loop G33be@init*))) (G2e1c@syntax-violation '#f '"invalid bindings" G33a9@stx))) G33bb@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G33b9@t))) (G2d31@syntax-dispatch G33b9@t '#(each (any any any))))) (map G33ac@bind G33b1@binding*))) G33af@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G33ad@t))) (G2d31@syntax-dispatch G33ad@t '(_ each-any (any . each-any) . each-any)))) G33a9@stx))) '#f))) (set! G2d0f@let*-macro (lambda (G33db@stx) ((lambda (G33dd@t) ((lambda (G33df@ls/false) (if (and G33df@ls/false (apply (lambda (G33e1@lhs* G33e2@rhs* G33e3@b G33e4@b*) (for-all G2b40@id? G33e1@lhs*)) G33df@ls/false)) (apply (lambda (G33e9@lhs* G33ea@rhs* G33eb@b G33ec@b*) (G2ce7@bless ((letrec ((G33f1@f (lambda (G33f3@x*) (if (null? G33f3@x*) (cons 'let (cons '() (cons G33eb@b G33ec@b*))) (list 'let (list (car G33f3@x*)) (G33f1@f (cdr G33f3@x*))))))) G33f1@f) (map list G33e9@lhs* G33ea@rhs*)))) G33df@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G33dd@t))) (G2d31@syntax-dispatch G33dd@t '(_ #(each (any any)) any . each-any)))) G33db@stx))) (set! G2d11@or-macro (lambda (G33f5@stx) ((lambda (G33f7@t) ((lambda (G33f9@ls/false) (if G33f9@ls/false (apply (lambda () '#f) G33f9@ls/false) ((lambda (G33fb@t) ((lambda (G33fd@ls/false) (if G33fd@ls/false (apply (lambda (G33ff@e G3400@e*) (G2ce7@bless ((letrec ((G3403@f (lambda (G3405@e G3406@e*) (if (null? G3406@e*) (list 'begin '#f G3405@e) (list 'let (list (list 't G3405@e)) (list 'if 't 't (G3403@f (car G3406@e*) (cdr G3406@e*)))))))) G3403@f) G33ff@e G3400@e*))) G33fd@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G33fb@t))) (G2d31@syntax-dispatch G33fb@t '(_ any . each-any)))) G33f7@t))) (G2d31@syntax-dispatch G33f7@t '(_)))) G33f5@stx))) (set! G2d13@and-macro (lambda (G3409@stx) ((lambda (G340b@t) ((lambda (G340d@ls/false) (if G340d@ls/false (apply (lambda () '#t) G340d@ls/false) ((lambda (G340f@t) ((lambda (G3411@ls/false) (if G3411@ls/false (apply (lambda (G3413@e G3414@e*) (G2ce7@bless ((letrec ((G3417@f (lambda (G3419@e G341a@e*) (if (null? G341a@e*) (list 'begin '#f G3419@e) (cons 'if (cons G3419@e (cons (G3417@f (car G341a@e*) (cdr G341a@e*)) '(#f)))))))) G3417@f) G3413@e G3414@e*))) G3411@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G340f@t))) (G2d31@syntax-dispatch G340f@t '(_ any . each-any)))) G340b@t))) (G2d31@syntax-dispatch G340b@t '(_)))) G3409@stx))) (set! G2d15@cond-macro (lambda (G341d@stx) ((lambda (G341f@t) ((lambda (G3421@ls/false) (if G3421@ls/false (apply (lambda (G3423@cls G3424@cls*) (G2ce7@bless ((letrec ((G3427@f (lambda (G3429@cls G342a@cls*) (if (null? G342a@cls*) ((lambda (G342d@t) ((lambda (G342f@ls/false) (if G342f@ls/false (apply (lambda (G3431@e G3432@e*) (cons 'begin (cons G3431@e G3432@e*))) G342f@ls/false) ((lambda (G3435@t) ((lambda (G3437@ls/false) (if G3437@ls/false (apply (lambda (G3439@e G343a@p) (list 'let (list (list 't G3439@e)) (list 'if 't (cons G343a@p '(t))))) G3437@ls/false) ((lambda (G343d@t) ((lambda (G343f@ls/false) (if G343f@ls/false (apply (lambda (G3441@e) (cons 'or (cons G3441@e '((if #f #f))))) G343f@ls/false) ((lambda (G3443@t) ((lambda (G3445@ls/false) (if G3445@ls/false (apply (lambda (G3447@e G3448@e*) (list 'if G3447@e (cons 'begin G3448@e*))) G3445@ls/false) ((lambda (G344b@t) ((lambda (G344d@ls/false) (if G344d@ls/false (apply (lambda () (G2e1c@syntax-violation '#f '"invalid last clause" G341d@stx)) G344d@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G344b@t))) (G2d31@syntax-dispatch G344b@t '_))) G3443@t))) (G2d31@syntax-dispatch G3443@t '(any . each-any)))) G343d@t))) (G2d31@syntax-dispatch G343d@t '(any)))) G3435@t))) (G2d31@syntax-dispatch G3435@t '(any #(scheme-id =>) any)))) G342d@t))) (G2d31@syntax-dispatch G342d@t '(#(scheme-id else) any . each-any)))) G3429@cls) ((lambda (G344f@t) ((lambda (G3451@ls/false) (if G3451@ls/false (apply (lambda (G3453@e G3454@e*) (G2e1c@syntax-violation '#f '"incorrect position of keyword else" G341d@stx)) G3451@ls/false) ((lambda (G3457@t) ((lambda (G3459@ls/false) (if G3459@ls/false (apply (lambda (G345b@e G345c@p) (list 'let (list (list 't G345b@e)) (list 'if 't (cons G345c@p '(t)) (G3427@f (car G342a@cls*) (cdr G342a@cls*))))) G3459@ls/false) ((lambda (G345f@t) ((lambda (G3461@ls/false) (if G3461@ls/false (apply (lambda (G3463@e) (list 'or G3463@e (G3427@f (car G342a@cls*) (cdr G342a@cls*)))) G3461@ls/false) ((lambda (G3465@t) ((lambda (G3467@ls/false) (if G3467@ls/false (apply (lambda (G3469@e G346a@e*) (list 'if G3469@e (cons 'begin G346a@e*) (G3427@f (car G342a@cls*) (cdr G342a@cls*)))) G3467@ls/false) ((lambda (G346d@t) ((lambda (G346f@ls/false) (if G346f@ls/false (apply (lambda () (G2e1c@syntax-violation '#f '"invalid last clause" G341d@stx)) G346f@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G346d@t))) (G2d31@syntax-dispatch G346d@t '_))) G3465@t))) (G2d31@syntax-dispatch G3465@t '(any . each-any)))) G345f@t))) (G2d31@syntax-dispatch G345f@t '(any)))) G3457@t))) (G2d31@syntax-dispatch G3457@t '(any #(scheme-id =>) any)))) G344f@t))) (G2d31@syntax-dispatch G344f@t '(#(scheme-id else) any . each-any)))) G3429@cls))))) G3427@f) G3423@cls G3424@cls*))) G3421@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G341f@t))) (G2d31@syntax-dispatch G341f@t '(_ any . each-any)))) G341d@stx))) (set! G2d17@do-include (lambda (G3471@stx G3472@id G3473@filename) ((lambda (G3477@filename) (begin (if (not (and (string? G3477@filename) (G2b40@id? G3472@id))) (G2e1c@syntax-violation '#f '"invalid syntax" G3471@stx) (void)) (cons (G2ce7@bless 'begin) (with-input-from-file G3477@filename (lambda () ((letrec ((G3479@f (lambda (G347b@ls) ((lambda (G347d@x) (if (eof-object? G347d@x) (reverse G347b@ls) (G3479@f (cons (G2b1e@datum->stx G3472@id G347d@x) G347b@ls)))) (G26e7@G2608@read-annotated))))) G3479@f) '())))))) (G2b56@stx->datum G3473@filename)))) (set! G2d19@include-macro (lambda (G347f@e) ((lambda (G3481@t) ((lambda (G3483@ls/false) (if G3483@ls/false (apply (lambda (G3485@id G3486@filename) (G2d17@do-include G347f@e G3485@id G3486@filename)) G3483@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3481@t))) (G2d31@syntax-dispatch G3481@t '(any any)))) G347f@e))) (set! G2d1b@include-into-macro (lambda (G3489@e) ((lambda (G348b@t) ((lambda (G348d@ls/false) (if G348d@ls/false (apply (lambda (G348f@id G3490@filename) (G2d17@do-include G3489@e G348f@id G3490@filename)) G348d@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G348b@t))) (G2d31@syntax-dispatch G348b@t '(_ any any)))) G3489@e))) (set! G2d1d@syntax-rules-macro (lambda (G3493@e) ((lambda (G3495@t) ((lambda (G3497@ls/false) (if G3497@ls/false (apply (lambda (G3499@lits G349a@pat* G349b@tmp*) (begin (G2d37@verify-literals G3499@lits G3493@e) (G2ce7@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G3499@lits (map (lambda (G349f@pat G34a0@tmp) ((lambda (G34a3@t) ((lambda (G34a5@ls/false) (if G34a5@ls/false (apply (lambda (G34a7@rest) (list (cons 'g G34a7@rest) (list 'syntax G34a0@tmp))) G34a5@ls/false) ((lambda (G34a9@t) ((lambda (G34ab@ls/false) (if G34ab@ls/false (apply (lambda () (G2e1c@syntax-violation '#f '"invalid syntax-rules pattern" G3493@e G349f@pat)) G34ab@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G34a9@t))) (G2d31@syntax-dispatch G34a9@t '_))) G34a3@t))) (G2d31@syntax-dispatch G34a3@t '(_ . any)))) G349f@pat)) G349a@pat* G349b@tmp*)))))))) G3497@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3495@t))) (G2d31@syntax-dispatch G3495@t '(_ each-any . #(each (any any)))))) G3493@e))) (set! G2d1f@quasiquote-macro ((lambda () ((lambda (G34ae@datum G34ca@quasicons* G34cc@quasicons G34ce@quasiappend G34d0@quasivector G34d2@vquasi G34d4@quasi) (begin (set! G34ae@datum (lambda (G35af@x) (list (G2cbb@scheme-stx 'quote) (G2b28@mkstx G35af@x '() '() '())))) (set! G34ca@quasicons* (lambda (G35a7@x G35a8@y) ((letrec ((G35ab@f (lambda (G35ad@x) (if (null? G35ad@x) G35a8@y (G34cc@quasicons (car G35ad@x) (G35ab@f (cdr G35ad@x))))))) G35ab@f) G35a7@x))) (set! G34cc@quasicons (lambda (G3581@x G3582@y) ((lambda (G3585@t) ((lambda (G3587@ls/false) (if G3587@ls/false (apply (lambda (G3589@dy) ((lambda (G358b@t) ((lambda (G358d@ls/false) (if G358d@ls/false (apply (lambda (G358f@dx) (list (G2cbb@scheme-stx 'quote) (cons G358f@dx G3589@dy))) G358d@ls/false) ((lambda (G3591@t) ((lambda (G3593@ls/false) (if G3593@ls/false (apply (lambda () ((lambda (G3595@t) ((lambda (G3597@ls/false) (if G3597@ls/false (apply (lambda () (list (G2cbb@scheme-stx 'list) G3581@x)) G3597@ls/false) ((lambda (G3599@t) ((lambda (G359b@ls/false) (if G359b@ls/false (apply (lambda () (list (G2cbb@scheme-stx 'cons) G3581@x G3582@y)) G359b@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3599@t))) (G2d31@syntax-dispatch G3599@t '_))) G3595@t))) (G2d31@syntax-dispatch G3595@t '()))) G3589@dy)) G3593@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3591@t))) (G2d31@syntax-dispatch G3591@t '_))) G358b@t))) (G2d31@syntax-dispatch G358b@t '(#(scheme-id quote) any)))) G3581@x)) G3587@ls/false) ((lambda (G359d@t) ((lambda (G359f@ls/false) (if G359f@ls/false (apply (lambda (G35a1@stuff) (cons* (G2cbb@scheme-stx 'list) G3581@x G35a1@stuff)) G359f@ls/false) ((lambda (G35a3@t) ((lambda (G35a5@ls/false) (if G35a5@ls/false (apply (lambda () (list (G2cbb@scheme-stx 'cons) G3581@x G3582@y)) G35a5@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G35a3@t))) (G2d31@syntax-dispatch G35a3@t '_))) G359d@t))) (G2d31@syntax-dispatch G359d@t '(#(scheme-id list) . each-any)))) G3585@t))) (G2d31@syntax-dispatch G3585@t '(#(scheme-id quote) any)))) G3582@y))) (set! G34ce@quasiappend (lambda (G3567@x G3568@y) ((lambda (G356b@ls) (if (null? G356b@ls) (list (G2cbb@scheme-stx 'quote) '()) (if (null? (cdr G356b@ls)) (car G356b@ls) (cons* (G2cbb@scheme-stx 'append) G356b@ls)))) ((letrec ((G356d@f (lambda (G356f@x) (if (null? G356f@x) ((lambda (G3571@t) ((lambda (G3573@ls/false) (if G3573@ls/false (apply (lambda () '()) G3573@ls/false) ((lambda (G3575@t) ((lambda (G3577@ls/false) (if G3577@ls/false (apply (lambda () (list G3568@y)) G3577@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3575@t))) (G2d31@syntax-dispatch G3575@t '_))) G3571@t))) (G2d31@syntax-dispatch G3571@t '(#(scheme-id quote) ())))) G3568@y) ((lambda (G3579@t) ((lambda (G357b@ls/false) (if G357b@ls/false (apply (lambda () (G356d@f (cdr G356f@x))) G357b@ls/false) ((lambda (G357d@t) ((lambda (G357f@ls/false) (if G357f@ls/false (apply (lambda () (cons (car G356f@x) (G356d@f (cdr G356f@x)))) G357f@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G357d@t))) (G2d31@syntax-dispatch G357d@t '_))) G3579@t))) (G2d31@syntax-dispatch G3579@t '(#(scheme-id quote) ())))) (car G356f@x)))))) G356d@f) G3567@x)))) (set! G34d0@quasivector (lambda (G3535@x) ((lambda (G3537@pat-x) ((lambda (G3539@t) ((lambda (G353b@ls/false) (if G353b@ls/false (apply (lambda (G353d@x*) (list (G2cbb@scheme-stx 'quote) (list->vector G353d@x*))) G353b@ls/false) ((lambda (G353f@t) ((lambda (G3541@ls/false) (if G3541@ls/false (apply (lambda () ((letrec ((G3543@f (lambda (G3545@x G3546@k) ((lambda (G3549@t) ((lambda (G354b@ls/false) (if G354b@ls/false (apply (lambda (G354d@x*) (G3546@k (map (lambda (G354f@x) (list (G2cbb@scheme-stx 'quote) G354f@x)) G354d@x*))) G354b@ls/false) ((lambda (G3551@t) ((lambda (G3553@ls/false) (if G3553@ls/false (apply (lambda (G3555@x*) (G3546@k G3555@x*)) G3553@ls/false) ((lambda (G3557@t) ((lambda (G3559@ls/false) (if G3559@ls/false (apply (lambda (G355b@x G355c@y) (G3543@f G355c@y (lambda (G355f@ls) (G3546@k (cons G355b@x G355f@ls))))) G3559@ls/false) ((lambda (G3561@t) ((lambda (G3563@ls/false) (if G3563@ls/false (apply (lambda () (list (G2cbb@scheme-stx 'list->vector) G3537@pat-x)) G3563@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3561@t))) (G2d31@syntax-dispatch G3561@t '_))) G3557@t))) (G2d31@syntax-dispatch G3557@t '(#(scheme-id cons) any any)))) G3551@t))) (G2d31@syntax-dispatch G3551@t '(#(scheme-id list) . each-any)))) G3549@t))) (G2d31@syntax-dispatch G3549@t '(#(scheme-id quote) each-any)))) G3545@x)))) G3543@f) G3535@x (lambda (G3565@ls) (cons* (G2cbb@scheme-stx 'vector) G3565@ls)))) G3541@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G353f@t))) (G2d31@syntax-dispatch G353f@t '_))) G3539@t))) (G2d31@syntax-dispatch G3539@t '(#(scheme-id quote) each-any)))) G3537@pat-x)) G3535@x))) (set! G34d2@vquasi (lambda (G3513@p G3514@lev) ((lambda (G3517@t) ((lambda (G3519@ls/false) (if G3519@ls/false (apply (lambda (G351b@p G351c@q) ((lambda (G351f@t) ((lambda (G3521@ls/false) (if G3521@ls/false (apply (lambda (G3523@p) (if (= G3514@lev '0) (G34ca@quasicons* G3523@p (G34d2@vquasi G351c@q G3514@lev)) (G34cc@quasicons (G34cc@quasicons (G34ae@datum 'unquote) (G34d4@quasi G3523@p (- G3514@lev '1))) (G34d2@vquasi G351c@q G3514@lev)))) G3521@ls/false) ((lambda (G3525@t) ((lambda (G3527@ls/false) (if G3527@ls/false (apply (lambda (G3529@p) (if (= G3514@lev '0) (G34ce@quasiappend G3529@p (G34d2@vquasi G351c@q G3514@lev)) (G34cc@quasicons (G34cc@quasicons (G34ae@datum 'unquote-splicing) (G34d4@quasi G3529@p (- G3514@lev '1))) (G34d2@vquasi G351c@q G3514@lev)))) G3527@ls/false) ((lambda (G352b@t) ((lambda (G352d@ls/false) (if G352d@ls/false (apply (lambda (G352f@p) (G34cc@quasicons (G34d4@quasi G352f@p G3514@lev) (G34d2@vquasi G351c@q G3514@lev))) G352d@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G352b@t))) (G2d31@syntax-dispatch G352b@t 'any))) G3525@t))) (G2d31@syntax-dispatch G3525@t '(#(scheme-id unquote-splicing) . each-any)))) G351f@t))) (G2d31@syntax-dispatch G351f@t '(#(scheme-id unquote) . each-any)))) G351b@p)) G3519@ls/false) ((lambda (G3531@t) ((lambda (G3533@ls/false) (if G3533@ls/false (apply (lambda () (list (G2cbb@scheme-stx 'quote) '())) G3533@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3531@t))) (G2d31@syntax-dispatch G3531@t '()))) G3517@t))) (G2d31@syntax-dispatch G3517@t '(any . any)))) G3513@p))) (set! G34d4@quasi (lambda (G34dd@p G34de@lev) ((lambda (G34e1@t) ((lambda (G34e3@ls/false) (if G34e3@ls/false (apply (lambda (G34e5@p) (if (= G34de@lev '0) G34e5@p (G34cc@quasicons (G34ae@datum 'unquote) (G34d4@quasi (list G34e5@p) (- G34de@lev '1))))) G34e3@ls/false) ((lambda (G34e7@t) ((lambda (G34e9@ls/false) (if G34e9@ls/false (apply (lambda (G34eb@p G34ec@q) (if (= G34de@lev '0) (G34ca@quasicons* G34eb@p (G34d4@quasi G34ec@q G34de@lev)) (G34cc@quasicons (G34cc@quasicons (G34ae@datum 'unquote) (G34d4@quasi G34eb@p (- G34de@lev '1))) (G34d4@quasi G34ec@q G34de@lev)))) G34e9@ls/false) ((lambda (G34ef@t) ((lambda (G34f1@ls/false) (if G34f1@ls/false (apply (lambda (G34f3@p G34f4@q) (if (= G34de@lev '0) (G34ce@quasiappend G34f3@p (G34d4@quasi G34f4@q G34de@lev)) (G34cc@quasicons (G34cc@quasicons (G34ae@datum 'unquote-splicing) (G34d4@quasi G34f3@p (- G34de@lev '1))) (G34d4@quasi G34f4@q G34de@lev)))) G34f1@ls/false) ((lambda (G34f7@t) ((lambda (G34f9@ls/false) (if G34f9@ls/false (apply (lambda (G34fb@p) (G34cc@quasicons (G34ae@datum 'quasiquote) (G34d4@quasi (list G34fb@p) (+ G34de@lev '1)))) G34f9@ls/false) ((lambda (G34fd@t) ((lambda (G34ff@ls/false) (if G34ff@ls/false (apply (lambda (G3501@p G3502@q) (G34cc@quasicons (G34d4@quasi G3501@p G34de@lev) (G34d4@quasi G3502@q G34de@lev))) G34ff@ls/false) ((lambda (G3505@t) ((lambda (G3507@ls/false) (if (and G3507@ls/false (apply (lambda (G3509@x) (not (G2b08@stx? G3509@x))) G3507@ls/false)) (apply (lambda (G350b@x) (G34d0@quasivector (G34d2@vquasi G350b@x G34de@lev))) G3507@ls/false) ((lambda (G350d@t) ((lambda (G350f@ls/false) (if G350f@ls/false (apply (lambda (G3511@p) (list (G2cbb@scheme-stx 'quote) G3511@p)) G350f@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G350d@t))) (G2d31@syntax-dispatch G350d@t 'any))) G3505@t))) (G2d31@syntax-dispatch G3505@t '#(vector each-any)))) G34fd@t))) (G2d31@syntax-dispatch G34fd@t '(any . any)))) G34f7@t))) (G2d31@syntax-dispatch G34f7@t '(#(scheme-id quasiquote) any)))) G34ef@t))) (G2d31@syntax-dispatch G34ef@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G34e7@t))) (G2d31@syntax-dispatch G34e7@t '((#(scheme-id unquote) . each-any) . any)))) G34e1@t))) (G2d31@syntax-dispatch G34e1@t '(#(scheme-id unquote) any)))) G34dd@p))) (lambda (G34d5@x) ((lambda (G34d7@t) ((lambda (G34d9@ls/false) (if G34d9@ls/false (apply (lambda (G34db@e) (G34d4@quasi G34db@e '0)) G34d9@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G34d7@t))) (G2d31@syntax-dispatch G34d7@t '(_ any)))) G34d5@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d21@quasisyntax-macro ((lambda () ((lambda (G35b2@quasi) (begin (set! G35b2@quasi (lambda (G35ca@p G35cb@lev) ((lambda (G35ce@t) ((lambda (G35d0@ls/false) (if G35d0@ls/false (apply (lambda (G35d2@p) (if (= G35cb@lev '0) ((lambda (G35d4@g) (values (list G35d4@g) (list G35d2@p) G35d4@g)) (gensym)) (call-with-values (lambda () (G35b2@quasi G35d2@p (- G35cb@lev '1))) (lambda (G35d9@G35d6 G35da@G35d7 G35db@G35d8) ((lambda (G35df@p G35e0@rhs* G35e1@lhs*) (values G35e1@lhs* G35e0@rhs* (list 'unsyntax G35df@p))) G35db@G35d8 G35da@G35d7 G35d9@G35d6))))) G35d0@ls/false) ((lambda (G35e5@t) ((lambda (G35e7@ls/false) (if (and G35e7@ls/false (apply (lambda () (= G35cb@lev '0)) G35e7@ls/false)) (apply (lambda () (G2e1c@syntax-violation '#f '"incorrect use of unsyntax" G35ca@p)) G35e7@ls/false) ((lambda (G35e9@t) ((lambda (G35eb@ls/false) (if G35eb@ls/false (apply (lambda (G35ed@p* G35ee@q) (call-with-values (lambda () (G35b2@quasi G35ee@q G35cb@lev)) (lambda (G35f4@G35f1 G35f5@G35f2 G35f6@G35f3) ((lambda (G35fa@q G35fb@rhs* G35fc@lhs*) (if (= G35cb@lev '0) ((lambda (G3600@g*) (values (append G3600@g* G35fc@lhs*) (append G35ed@p* G35fb@rhs*) (append G3600@g* G35fa@q))) (map (lambda (G3602@x) (gensym)) G35ed@p*)) (call-with-values (lambda () (G35b2@quasi G35ed@p* (- G35cb@lev '1))) (lambda (G3607@G3604 G3608@G3605 G3609@G3606) ((lambda (G360d@p* G360e@rhs2* G360f@lhs2*) (values (append G360f@lhs2* G35fc@lhs*) (append G360e@rhs2* G35fb@rhs*) (cons (cons 'unsyntax G360d@p*) G35fa@q))) G3609@G3606 G3608@G3605 G3607@G3604))))) G35f6@G35f3 G35f5@G35f2 G35f4@G35f1)))) G35eb@ls/false) ((lambda (G3613@t) ((lambda (G3615@ls/false) (if G3615@ls/false (apply (lambda (G3617@p* G3618@q) (call-with-values (lambda () (G35b2@quasi G3618@q G35cb@lev)) (lambda (G361e@G361b G361f@G361c G3620@G361d) ((lambda (G3624@q G3625@rhs* G3626@lhs*) (if (= G35cb@lev '0) ((lambda (G362a@g*) (values (append (map (lambda (G362c@g) (cons G362c@g '(...))) G362a@g*) G3626@lhs*) (append G3617@p* G3625@rhs*) (append (apply append (map (lambda (G362e@g) (cons G362e@g '(...))) G362a@g*)) G3624@q))) (map (lambda (G3630@x) (gensym)) G3617@p*)) (call-with-values (lambda () (G35b2@quasi G3617@p* (- G35cb@lev '1))) (lambda (G3635@G3632 G3636@G3633 G3637@G3634) ((lambda (G363b@p* G363c@rhs2* G363d@lhs2*) (values (append G363d@lhs2* G3626@lhs*) (append G363c@rhs2* G3625@rhs*) (cons (cons 'unsyntax-splicing G363b@p*) G3624@q))) G3637@G3634 G3636@G3633 G3635@G3632))))) G3620@G361d G361f@G361c G361e@G361b)))) G3615@ls/false) ((lambda (G3641@t) ((lambda (G3643@ls/false) (if (and G3643@ls/false (apply (lambda () (= G35cb@lev '0)) G3643@ls/false)) (apply (lambda () (G2e1c@syntax-violation '#f '"incorrect use of unsyntax-splicing" G35ca@p)) G3643@ls/false) ((lambda (G3645@t) ((lambda (G3647@ls/false) (if G3647@ls/false (apply (lambda (G3649@p) (call-with-values (lambda () (G35b2@quasi G3649@p (+ G35cb@lev '1))) (lambda (G364e@G364b G364f@G364c G3650@G364d) ((lambda (G3654@p G3655@rhs* G3656@lhs*) (values G3656@lhs* G3655@rhs* (list 'quasisyntax G3654@p))) G3650@G364d G364f@G364c G364e@G364b)))) G3647@ls/false) ((lambda (G365a@t) ((lambda (G365c@ls/false) (if G365c@ls/false (apply (lambda (G365e@p G365f@q) (call-with-values (lambda () (G35b2@quasi G365e@p G35cb@lev)) (lambda (G3668@G3662 G3669@G3663 G366a@G3664) (call-with-values (lambda () (G35b2@quasi G365f@q G35cb@lev)) (lambda (G366e@G3665 G366f@G3666 G3670@G3667) ((lambda (G3674@q G3675@rhs2* G3676@lhs2* G3677@p G3678@rhs* G3679@lhs*) (values (append G3676@lhs2* G3679@lhs*) (append G3675@rhs2* G3678@rhs*) (cons G3677@p G3674@q))) G3670@G3667 G366f@G3666 G366e@G3665 G366a@G3664 G3669@G3663 G3668@G3662)))))) G365c@ls/false) ((lambda (G3680@t) ((lambda (G3682@ls/false) (if G3682@ls/false (apply (lambda (G3684@x*) (call-with-values (lambda () (G35b2@quasi G3684@x* G35cb@lev)) (lambda (G3689@G3686 G368a@G3687 G368b@G3688) ((lambda (G368f@x* G3690@rhs* G3691@lhs*) (values G3691@lhs* G3690@rhs* (list->vector G368f@x*))) G368b@G3688 G368a@G3687 G3689@G3686)))) G3682@ls/false) ((lambda (G3695@t) ((lambda (G3697@ls/false) (if G3697@ls/false (apply (lambda () (values '() '() G35ca@p)) G3697@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3695@t))) (G2d31@syntax-dispatch G3695@t '_))) G3680@t))) (G2d31@syntax-dispatch G3680@t '#(vector each-any)))) G365a@t))) (G2d31@syntax-dispatch G365a@t '(any . any)))) G3645@t))) (G2d31@syntax-dispatch G3645@t '(#(scheme-id quasisyntax) any)))) G3641@t))) (G2d31@syntax-dispatch G3641@t '#(scheme-id unsyntax-splicing)))) G3613@t))) (G2d31@syntax-dispatch G3613@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G35e9@t))) (G2d31@syntax-dispatch G35e9@t '((#(scheme-id unsyntax) . each-any) . any)))) G35e5@t))) (G2d31@syntax-dispatch G35e5@t '#(scheme-id unsyntax)))) G35ce@t))) (G2d31@syntax-dispatch G35ce@t '(#(scheme-id unsyntax) any)))) G35ca@p))) (lambda (G35b3@x) ((lambda (G35b5@t) ((lambda (G35b7@ls/false) (if G35b7@ls/false (apply (lambda (G35b9@e) (call-with-values (lambda () (G35b2@quasi G35b9@e '0)) (lambda (G35be@G35bb G35bf@G35bc G35c0@G35bd) ((lambda (G35c4@v G35c5@rhs* G35c6@lhs*) (G2ce7@bless (list 'syntax-case (cons 'list G35c5@rhs*) '() (list G35c6@lhs* (list 'syntax G35c4@v))))) G35c0@G35bd G35bf@G35bc G35be@G35bb)))) G35b7@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G35b5@t))) (G2d31@syntax-dispatch G35b5@t '(_ any)))) G35b3@x)))) '#f)))) (set! G2d23@define-struct-macro (lambda (G3699@stx) (G2e1c@syntax-violation '#f '"define-struct not supported" G3699@stx))) (set! G2d25@define-record-type-macro (lambda (G369b@x) ((lambda (G369e@id G36a0@get-record-name G36a2@get-record-constructor-name G36a4@get-record-predicate-name G36a6@get-clause G36a8@foo-rtd-code G36aa@parent-rtd-code G36ac@parent-rcd-code G36ae@foo-rcd-code G36b0@get-protocol-code G36b2@get-fields G36b4@get-mutator-indices G36b6@get-mutators G36b8@get-accessors G36ba@enumerate G36bc@do-define-record G36be@verify-clauses) (begin (set! G369e@id (lambda (G3891@ctxt . G3893@str*) (G2e20@datum->syntax G3891@ctxt (string->symbol (apply string-append (map (lambda (G3895@x) (if (symbol? G3895@x) (symbol->string G3895@x) (if (string? G3895@x) G3895@x (assertion-violation 'define-record-type '"BUG")))) G3893@str*)))))) (set! G36a0@get-record-name (lambda (G387f@spec) ((lambda (G3881@t) ((lambda (G3883@ls/false) (if G3883@ls/false (apply (lambda (G3885@foo G3886@make-foo G3887@foo?) G3885@foo) G3883@ls/false) ((lambda (G388b@t) ((lambda (G388d@ls/false) (if G388d@ls/false (apply (lambda (G388f@foo) G388f@foo) G388d@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G388b@t))) (G2d31@syntax-dispatch G388b@t 'any))) G3881@t))) (G2d31@syntax-dispatch G3881@t '(any any any)))) G387f@spec))) (set! G36a2@get-record-constructor-name (lambda (G386b@spec) ((lambda (G386d@t) ((lambda (G386f@ls/false) (if G386f@ls/false (apply (lambda (G3871@foo G3872@make-foo G3873@foo?) G3872@make-foo) G386f@ls/false) ((lambda (G3877@t) ((lambda (G3879@ls/false) (if (and G3879@ls/false (apply (lambda (G387b@foo) (G2b40@id? G387b@foo)) G3879@ls/false)) (apply (lambda (G387d@foo) (G369e@id G387d@foo '"make-" (G2b56@stx->datum G387d@foo))) G3879@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3877@t))) (G2d31@syntax-dispatch G3877@t 'any))) G386d@t))) (G2d31@syntax-dispatch G386d@t '(any any any)))) G386b@spec))) (set! G36a4@get-record-predicate-name (lambda (G3857@spec) ((lambda (G3859@t) ((lambda (G385b@ls/false) (if G385b@ls/false (apply (lambda (G385d@foo G385e@make-foo G385f@foo?) G385f@foo?) G385b@ls/false) ((lambda (G3863@t) ((lambda (G3865@ls/false) (if (and G3865@ls/false (apply (lambda (G3867@foo) (G2b40@id? G3867@foo)) G3865@ls/false)) (apply (lambda (G3869@foo) (G369e@id G3869@foo (G2b56@stx->datum G3869@foo) '"?")) G3865@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3863@t))) (G2d31@syntax-dispatch G3863@t 'any))) G3859@t))) (G2d31@syntax-dispatch G3859@t '(any any any)))) G3857@spec))) (set! G36a6@get-clause (lambda (G3845@id G3846@ls) ((lambda (G3849@t) ((lambda (G384b@ls/false) (if G384b@ls/false (apply (lambda () '#f) G384b@ls/false) ((lambda (G384d@t) ((lambda (G384f@ls/false) (if G384f@ls/false (apply (lambda (G3851@x G3852@rest G3853@ls) (if (G2b48@free-id=? (G2ce7@bless G3845@id) G3851@x) (cons G3851@x G3852@rest) (G36a6@get-clause G3845@id G3853@ls))) G384f@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G384d@t))) (G2d31@syntax-dispatch G384d@t '((any . any) . any)))) G3849@t))) (G2d31@syntax-dispatch G3849@t '()))) G3846@ls))) (set! G36a8@foo-rtd-code (lambda (G37f3@name G37f4@clause* G37f5@parent-rtd-code) ((lambda (G37fa@convert-field-spec*) (begin (set! G37fa@convert-field-spec* (lambda (G382b@ls) (list->vector (map (lambda (G382d@x) ((lambda (G382f@t) ((lambda (G3831@ls/false) (if G3831@ls/false (apply (lambda (G3833@name G3834@rest) (list 'mutable G3833@name)) G3831@ls/false) ((lambda (G3837@t) ((lambda (G3839@ls/false) (if G3839@ls/false (apply (lambda (G383b@name G383c@rest) (list 'immutable G383b@name)) G3839@ls/false) ((lambda (G383f@t) ((lambda (G3841@ls/false) (if G3841@ls/false (apply (lambda (G3843@name) (list 'immutable G3843@name)) G3841@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G383f@t))) (G2d31@syntax-dispatch G383f@t 'any))) G3837@t))) (G2d31@syntax-dispatch G3837@t '(#(scheme-id immutable) any . any)))) G382f@t))) (G2d31@syntax-dispatch G382f@t '(#(scheme-id mutable) any . any)))) G382d@x)) G382b@ls)))) ((lambda (G37fb@uid-code G37fc@sealed? G37fd@opaque? G37fe@fields) (G2ce7@bless (list 'make-record-type-descriptor (list 'quote G37f3@name) G37f5@parent-rtd-code G37fb@uid-code G37fc@sealed? G37fd@opaque? G37fe@fields))) ((lambda (G3803@t) ((lambda (G3805@ls/false) (if G3805@ls/false (apply (lambda () (list 'quote (gensym))) G3805@ls/false) ((lambda (G3807@t) ((lambda (G3809@ls/false) (if G3809@ls/false (apply (lambda (G380b@uid) (list 'quote G380b@uid)) G3809@ls/false) ((lambda (G380d@t) ((lambda (G380f@ls/false) (if G380f@ls/false (apply (lambda () '#f) G380f@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G380d@t))) (G2d31@syntax-dispatch G380d@t '_))) G3807@t))) (G2d31@syntax-dispatch G3807@t '(_ any)))) G3803@t))) (G2d31@syntax-dispatch G3803@t '(_)))) (G36a6@get-clause 'nongenerative G37f4@clause*)) ((lambda (G3811@t) ((lambda (G3813@ls/false) (if G3813@ls/false (apply (lambda () '#t) G3813@ls/false) ((lambda (G3815@t) ((lambda (G3817@ls/false) (if G3817@ls/false (apply (lambda () '#f) G3817@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3815@t))) (G2d31@syntax-dispatch G3815@t '_))) G3811@t))) (G2d31@syntax-dispatch G3811@t '(_ #(atom #t))))) (G36a6@get-clause 'sealed G37f4@clause*)) ((lambda (G3819@t) ((lambda (G381b@ls/false) (if G381b@ls/false (apply (lambda () '#t) G381b@ls/false) ((lambda (G381d@t) ((lambda (G381f@ls/false) (if G381f@ls/false (apply (lambda () '#f) G381f@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G381d@t))) (G2d31@syntax-dispatch G381d@t '_))) G3819@t))) (G2d31@syntax-dispatch G3819@t '(_ #(atom #t))))) (G36a6@get-clause 'opaque G37f4@clause*)) ((lambda (G3821@t) ((lambda (G3823@ls/false) (if G3823@ls/false (apply (lambda (G3825@field-spec*) (list 'quote (G37fa@convert-field-spec* G3825@field-spec*))) G3823@ls/false) ((lambda (G3827@t) ((lambda (G3829@ls/false) (if G3829@ls/false (apply (lambda () ''#()) G3829@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3827@t))) (G2d31@syntax-dispatch G3827@t '_))) G3821@t))) (G2d31@syntax-dispatch G3821@t '(_ . each-any)))) (G36a6@get-clause 'fields G37f4@clause*))))) '#f))) (set! G36aa@parent-rtd-code (lambda (G37db@clause*) ((lambda (G37dd@t) ((lambda (G37df@ls/false) (if G37df@ls/false (apply (lambda (G37e1@name) (list 'record-type-descriptor G37e1@name)) G37df@ls/false) ((lambda (G37e3@t) ((lambda (G37e5@ls/false) (if G37e5@ls/false (apply (lambda () ((lambda (G37e7@t) ((lambda (G37e9@ls/false) (if G37e9@ls/false (apply (lambda (G37eb@rtd G37ec@rcd) G37eb@rtd) G37e9@ls/false) ((lambda (G37ef@t) ((lambda (G37f1@ls/false) (if G37f1@ls/false (apply (lambda () '#f) G37f1@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G37ef@t))) (G2d31@syntax-dispatch G37ef@t '#(atom #f)))) G37e7@t))) (G2d31@syntax-dispatch G37e7@t '(_ any any)))) (G36a6@get-clause 'parent-rtd G37db@clause*))) G37e5@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G37e3@t))) (G2d31@syntax-dispatch G37e3@t '#(atom #f)))) G37dd@t))) (G2d31@syntax-dispatch G37dd@t '(_ any)))) (G36a6@get-clause 'parent G37db@clause*)))) (set! G36ac@parent-rcd-code (lambda (G37c3@clause*) ((lambda (G37c5@t) ((lambda (G37c7@ls/false) (if G37c7@ls/false (apply (lambda (G37c9@name) (list 'record-constructor-descriptor G37c9@name)) G37c7@ls/false) ((lambda (G37cb@t) ((lambda (G37cd@ls/false) (if G37cd@ls/false (apply (lambda () ((lambda (G37cf@t) ((lambda (G37d1@ls/false) (if G37d1@ls/false (apply (lambda (G37d3@rtd G37d4@rcd) G37d4@rcd) G37d1@ls/false) ((lambda (G37d7@t) ((lambda (G37d9@ls/false) (if G37d9@ls/false (apply (lambda () '#f) G37d9@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G37d7@t))) (G2d31@syntax-dispatch G37d7@t '#(atom #f)))) G37cf@t))) (G2d31@syntax-dispatch G37cf@t '(_ any any)))) (G36a6@get-clause 'parent-rtd G37c3@clause*))) G37cd@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G37cb@t))) (G2d31@syntax-dispatch G37cb@t '#(atom #f)))) G37c5@t))) (G2d31@syntax-dispatch G37c5@t '(_ any)))) (G36a6@get-clause 'parent G37c3@clause*)))) (set! G36ae@foo-rcd-code (lambda (G37bb@clause* G37bc@foo-rtd G37bd@protocol G37be@parent-rcd-code) (list 'make-record-constructor-descriptor G37bc@foo-rtd G37be@parent-rcd-code G37bd@protocol))) (set! G36b0@get-protocol-code (lambda (G37af@clause*) ((lambda (G37b1@t) ((lambda (G37b3@ls/false) (if G37b3@ls/false (apply (lambda (G37b5@expr) G37b5@expr) G37b3@ls/false) ((lambda (G37b7@t) ((lambda (G37b9@ls/false) (if G37b9@ls/false (apply (lambda () '#f) G37b9@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G37b7@t))) (G2d31@syntax-dispatch G37b7@t '_))) G37b1@t))) (G2d31@syntax-dispatch G37b1@t '(_ any)))) (G36a6@get-clause 'protocol G37af@clause*)))) (set! G36b2@get-fields (lambda (G379d@clause*) ((lambda (G379f@t) ((lambda (G37a1@ls/false) (if G37a1@ls/false (apply (lambda () '()) G37a1@ls/false) ((lambda (G37a3@t) ((lambda (G37a5@ls/false) (if G37a5@ls/false (apply (lambda (G37a7@f*) G37a7@f*) G37a5@ls/false) ((lambda (G37a9@t) ((lambda (G37ab@ls/false) (if G37ab@ls/false (apply (lambda (G37ad@rest) (G36b2@get-fields G37ad@rest)) G37ab@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G37a9@t))) (G2d31@syntax-dispatch G37a9@t '(_ . any)))) G37a3@t))) (G2d31@syntax-dispatch G37a3@t '((#(scheme-id fields) . each-any) . _)))) G379f@t))) (G2d31@syntax-dispatch G379f@t '()))) G379d@clause*))) (set! G36b4@get-mutator-indices (lambda (G3785@fields) ((letrec ((G3787@f (lambda (G3789@fields G378a@i) ((lambda (G378d@t) ((lambda (G378f@ls/false) (if G378f@ls/false (apply (lambda () '()) G378f@ls/false) ((lambda (G3791@t) ((lambda (G3793@ls/false) (if G3793@ls/false (apply (lambda (G3795@rest) (cons G378a@i (G3787@f G3795@rest (+ G378a@i '1)))) G3793@ls/false) ((lambda (G3797@t) ((lambda (G3799@ls/false) (if G3799@ls/false (apply (lambda (G379b@rest) (G3787@f G379b@rest (+ G378a@i '1))) G3799@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3797@t))) (G2d31@syntax-dispatch G3797@t '(_ . any)))) G3791@t))) (G2d31@syntax-dispatch G3791@t '((#(scheme-id mutable) . _) . any)))) G378d@t))) (G2d31@syntax-dispatch G378d@t '()))) G3789@fields)))) G3787@f) G3785@fields '0))) (set! G36b6@get-mutators (lambda (G375b@foo G375c@fields) ((lambda (G3760@gen-name) (begin (set! G3760@gen-name (lambda (G3783@x) (G2e20@datum->syntax G375b@foo (string->symbol (string-append (symbol->string (G2e22@syntax->datum G375b@foo)) '"-" (symbol->string (G2e22@syntax->datum G3783@x)) '"-set!"))))) ((letrec ((G3761@f (lambda (G3763@fields) ((lambda (G3765@t) ((lambda (G3767@ls/false) (if G3767@ls/false (apply (lambda () '()) G3767@ls/false) ((lambda (G3769@t) ((lambda (G376b@ls/false) (if G376b@ls/false (apply (lambda (G376d@name G376e@accessor G376f@mutator G3770@rest) (cons G376f@mutator (G3761@f G3770@rest))) G376b@ls/false) ((lambda (G3775@t) ((lambda (G3777@ls/false) (if G3777@ls/false (apply (lambda (G3779@name G377a@rest) (cons (G3760@gen-name G3779@name) (G3761@f G377a@rest))) G3777@ls/false) ((lambda (G377d@t) ((lambda (G377f@ls/false) (if G377f@ls/false (apply (lambda (G3781@rest) (G3761@f G3781@rest)) G377f@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G377d@t))) (G2d31@syntax-dispatch G377d@t '(_ . any)))) G3775@t))) (G2d31@syntax-dispatch G3775@t '((#(scheme-id mutable) any) . any)))) G3769@t))) (G2d31@syntax-dispatch G3769@t '((#(scheme-id mutable) any any any) . any)))) G3765@t))) (G2d31@syntax-dispatch G3765@t '()))) G3763@fields)))) G3761@f) G375c@fields))) '#f))) (set! G36b8@get-accessors (lambda (G3717@foo G3718@fields) ((lambda (G371c@gen-name) (begin (set! G371c@gen-name (lambda (G3759@x) (G2e20@datum->syntax G3717@foo (string->symbol (string-append (symbol->string (G2e22@syntax->datum G3717@foo)) '"-" (symbol->string (G2e22@syntax->datum G3759@x))))))) (map (lambda (G371d@field) ((lambda (G371f@t) ((lambda (G3721@ls/false) (if (and G3721@ls/false (apply (lambda (G3723@name G3724@accessor G3725@mutator) (G2b40@id? G3724@accessor)) G3721@ls/false)) (apply (lambda (G3729@name G372a@accessor G372b@mutator) G372a@accessor) G3721@ls/false) ((lambda (G372f@t) ((lambda (G3731@ls/false) (if (and G3731@ls/false (apply (lambda (G3733@name G3734@accessor) (G2b40@id? G3734@accessor)) G3731@ls/false)) (apply (lambda (G3737@name G3738@accessor) G3738@accessor) G3731@ls/false) ((lambda (G373b@t) ((lambda (G373d@ls/false) (if (and G373d@ls/false (apply (lambda (G373f@name) (G2b40@id? G373f@name)) G373d@ls/false)) (apply (lambda (G3741@name) (G371c@gen-name G3741@name)) G373d@ls/false) ((lambda (G3743@t) ((lambda (G3745@ls/false) (if (and G3745@ls/false (apply (lambda (G3747@name) (G2b40@id? G3747@name)) G3745@ls/false)) (apply (lambda (G3749@name) (G371c@gen-name G3749@name)) G3745@ls/false) ((lambda (G374b@t) ((lambda (G374d@ls/false) (if (and G374d@ls/false (apply (lambda (G374f@name) (G2b40@id? G374f@name)) G374d@ls/false)) (apply (lambda (G3751@name) (G371c@gen-name G3751@name)) G374d@ls/false) ((lambda (G3753@t) ((lambda (G3755@ls/false) (if G3755@ls/false (apply (lambda (G3757@others) (G2e1c@syntax-violation '#f '"invalid field spec" G371d@field)) G3755@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3753@t))) (G2d31@syntax-dispatch G3753@t 'any))) G374b@t))) (G2d31@syntax-dispatch G374b@t 'any))) G3743@t))) (G2d31@syntax-dispatch G3743@t '(#(scheme-id immutable) any)))) G373b@t))) (G2d31@syntax-dispatch G373b@t '(#(scheme-id mutable) any)))) G372f@t))) (G2d31@syntax-dispatch G372f@t '(#(scheme-id immutable) any any)))) G371f@t))) (G2d31@syntax-dispatch G371f@t '(#(scheme-id mutable) any any any)))) G371d@field)) G3718@fields))) '#f))) (set! G36ba@enumerate (lambda (G370f@ls) ((letrec ((G3711@f (lambda (G3713@ls G3714@i) (if (null? G3713@ls) '() (cons G3714@i (G3711@f (cdr G3713@ls) (+ G3714@i '1))))))) G3711@f) G370f@ls '0))) (set! G36bc@do-define-record (lambda (G36e7@namespec G36e8@clause*) ((lambda (G36eb@foo) ((lambda (G36ed@foo-rtd) ((lambda (G36ef@foo-rcd) ((lambda (G36f1@protocol) ((lambda (G36f3@make-foo) ((lambda (G36f5@fields) ((lambda (G36f7@idx*) ((lambda (G36f9@foo-x*) ((lambda (G36fb@set-foo-x!*) ((lambda (G36fd@set-foo-idx*) ((lambda (G36ff@foo?) ((lambda (G3701@foo-rtd-code) ((lambda (G3703@foo-rcd-code) ((lambda (G3705@protocol-code) ((lambda () (G2ce7@bless (cons 'begin (cons (list 'define G36ed@foo-rtd G3701@foo-rtd-code) (cons (list 'define G36f1@protocol G3705@protocol-code) (cons (list 'define G36ef@foo-rcd G3703@foo-rcd-code) (cons (list 'define-syntax G36eb@foo (list 'list ''$rtd (list 'syntax G36ed@foo-rtd) (list 'syntax G36ef@foo-rcd))) (cons (list 'define G36ff@foo? (list 'record-predicate G36ed@foo-rtd)) (cons (list 'define G36f3@make-foo (list 'record-constructor G36ef@foo-rcd)) (append (map (lambda (G3707@foo-x G3708@idx) (list 'define G3707@foo-x (list 'record-accessor G36ed@foo-rtd G3708@idx))) G36f9@foo-x* G36f7@idx*) (map (lambda (G370b@set-foo-x! G370c@idx) (list 'define G370b@set-foo-x! (list 'record-mutator G36ed@foo-rtd G370c@idx))) G36fb@set-foo-x!* G36fd@set-foo-idx*))))))))))))) (G36b0@get-protocol-code G36e8@clause*))) (G36ae@foo-rcd-code G36e8@clause* G36ed@foo-rtd G36f1@protocol (G36ac@parent-rcd-code G36e8@clause*)))) (G36a8@foo-rtd-code G36eb@foo G36e8@clause* (G36aa@parent-rtd-code G36e8@clause*)))) (G36a4@get-record-predicate-name G36e7@namespec))) (G36b4@get-mutator-indices G36f5@fields))) (G36b6@get-mutators G36eb@foo G36f5@fields))) (G36b8@get-accessors G36eb@foo G36f5@fields))) (G36ba@enumerate G36f5@fields))) (G36b2@get-fields G36e8@clause*))) (G36a2@get-record-constructor-name G36e7@namespec))) (gensym))) (gensym))) (gensym))) (G36a0@get-record-name G36e7@namespec)))) (set! G36be@verify-clauses (lambda (G36c7@x G36c8@cls*) ((lambda (G36cc@valid-kwds G36ce@free-id-member?) (begin (set! G36cc@valid-kwds (map G2ce7@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G36ce@free-id-member? (lambda (G36e3@x G36e4@ls) (and (pair? G36e4@ls) (or (G2b48@free-id=? G36e3@x (car G36e4@ls)) (G36ce@free-id-member? G36e3@x (cdr G36e4@ls)))))) ((letrec ((G36cf@f (lambda (G36d1@cls* G36d2@seen*) (if (not (null? G36d1@cls*)) ((lambda (G36d5@t) ((lambda (G36d7@ls/false) (if G36d7@ls/false (apply (lambda (G36d9@kwd G36da@rest) (if (or (not (G2b40@id? G36d9@kwd)) (not (G36ce@free-id-member? G36d9@kwd G36cc@valid-kwds))) (G2e1c@syntax-violation '#f '"not a valid define-record-type keyword" G36d9@kwd) (if (G2b4e@bound-id-member? G36d9@kwd G36d2@seen*) (G2e1c@syntax-violation '#f '"duplicate use of keyword " G36c7@x G36d9@kwd) (G36cf@f (cdr G36d1@cls*) (cons G36d9@kwd G36d2@seen*))))) G36d7@ls/false) ((lambda (G36dd@t) ((lambda (G36df@ls/false) (if G36df@ls/false (apply (lambda (G36e1@cls) (G2e1c@syntax-violation '#f '"malformed define-record-type clause" G36e1@cls)) G36df@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G36dd@t))) (G2d31@syntax-dispatch G36dd@t 'any))) G36d5@t))) (G2d31@syntax-dispatch G36d5@t '(any . any)))) (car G36d1@cls*)) (void))))) G36cf@f) G36c8@cls* '()))) '#f '#f))) ((lambda (G36bf@t) ((lambda (G36c1@ls/false) (if G36c1@ls/false (apply (lambda (G36c3@namespec G36c4@clause*) (begin (G36be@verify-clauses G369b@x G36c4@clause*) (G36bc@do-define-record G36c3@namespec G36c4@clause*))) G36c1@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G36bf@t))) (G2d31@syntax-dispatch G36bf@t '(_ any . each-any)))) G369b@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2d27@define-condition-type-macro (lambda (G3897@x) ((lambda (G389a@mkname) (begin (set! G389a@mkname (lambda (G38c7@name G38c8@suffix) (G2e20@datum->syntax G38c7@name (string->symbol (string-append (symbol->string (G2e22@syntax->datum G38c7@name)) G38c8@suffix))))) ((lambda (G389b@t) ((lambda (G389d@ls/false) (if (and G389d@ls/false (apply (lambda (G389f@ctxt G38a0@name G38a1@super G38a2@constructor G38a3@predicate G38a4@field* G38a5@accessor*) (and (G2b40@id? G38a0@name) (G2b40@id? G38a1@super) (G2b40@id? G38a2@constructor) (G2b40@id? G38a3@predicate) (for-all G2b40@id? G38a4@field*) (for-all G2b40@id? G38a5@accessor*))) G389d@ls/false)) (apply (lambda (G38ad@ctxt G38ae@name G38af@super G38b0@constructor G38b1@predicate G38b2@field* G38b3@accessor*) ((lambda (G38bb@aux-accessor*) (G2ce7@bless (cons 'begin (cons (cons 'define-record-type (cons (list G38ae@name G38b0@constructor (gensym)) (cons (list 'parent G38af@super) (cons (cons 'fields (map (lambda (G38bd@field G38be@aux) (list 'immutable G38bd@field G38be@aux)) G38b2@field* G38bb@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G38b1@predicate (list 'condition-predicate (list 'record-type-descriptor G38ae@name))) (map (lambda (G38c1@accessor G38c2@aux) (list 'define G38c1@accessor (list 'condition-accessor (list 'record-type-descriptor G38ae@name) G38c2@aux))) G38b3@accessor* G38bb@aux-accessor*)))))) (map (lambda (G38c5@x) (gensym)) G38b3@accessor*))) G389d@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G389b@t))) (G2d31@syntax-dispatch G389b@t '(any any any any any . #(each (any any)))))) G3897@x))) '#f))) (set! G2d29@incorrect-usage-macro (lambda (G38cb@e) (G2e1c@syntax-violation '#f '"incorrect usage of auxiliary keyword" G38cb@e))) (set! G2d2b@parameterize-macro (lambda (G38cd@e) ((lambda (G38cf@t) ((lambda (G38d1@ls/false) (if G38d1@ls/false (apply (lambda (G38d3@b G38d4@b*) (G2ce7@bless (cons 'let (cons '() (cons G38d3@b G38d4@b*))))) G38d1@ls/false) ((lambda (G38d7@t) ((lambda (G38d9@ls/false) (if G38d9@ls/false (apply (lambda (G38db@olhs* G38dc@orhs* G38dd@b G38de@b*) ((lambda (G38e3@lhs* G38e4@rhs*) (G2ce7@bless (cons (list 'lambda (append G38e3@lhs* G38e4@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G38e7@lhs G38e8@rhs) (list 'let (list (list 't (list G38e7@lhs))) (list G38e7@lhs G38e8@rhs) (cons 'set! (cons G38e8@rhs '(t))))) G38e3@lhs* G38e4@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G38dd@b G38de@b*))) '(swap)))))) (append G38db@olhs* G38dc@orhs*)))) (G2e0a@generate-temporaries G38db@olhs*) (G2e0a@generate-temporaries G38dc@orhs*))) G38d9@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G38d7@t))) (G2d31@syntax-dispatch G38d7@t '(_ #(each (any any)) any . each-any)))) G38cf@t))) (G2d31@syntax-dispatch G38cf@t '(_ () any . each-any)))) G38cd@e))) (set! G2d2d@foreign-call-transformer (lambda (G38eb@e G38ec@r G38ed@mr) ((lambda (G38f1@t) ((lambda (G38f3@ls/false) (if G38f3@ls/false (apply (lambda (G38f5@name G38f6@arg*) (cons 'foreign-call (cons (G2d55@chi-expr G38f5@name G38ec@r G38ed@mr) (G2d51@chi-expr* G38f6@arg* G38ec@r G38ed@mr)))) G38f3@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G38f1@t))) (G2d31@syntax-dispatch G38f1@t '(_ any . each-any)))) G38eb@e))) (set! G2d2f@convert-pattern (lambda (G38f9@pattern G38fa@keys) ((lambda (G38fe@cvt* G3900@cvt) (begin (set! G38fe@cvt* (lambda (G398f@p* G3990@n G3991@ids) (if (null? G398f@p*) (values '() G3991@ids) (call-with-values (lambda () (G38fe@cvt* (cdr G398f@p*) G3990@n G3991@ids)) (lambda (G3997@G3995 G3998@G3996) ((lambda (G399b@ids G399c@y) (call-with-values (lambda () (G3900@cvt (car G398f@p*) G3990@n G399b@ids)) (lambda (G39a1@G399f G39a2@G39a0) ((lambda (G39a5@ids G39a6@x) (values (cons G39a6@x G399c@y) G39a5@ids)) G39a2@G39a0 G39a1@G399f)))) G3998@G3996 G3997@G3995)))))) (set! G3900@cvt (lambda (G3901@p G3902@n G3903@ids) ((lambda (G3907@t) ((lambda (G3909@ls/false) (if (and G3909@ls/false (apply (lambda (G390b@id) (G2b40@id? G390b@id)) G3909@ls/false)) (apply (lambda (G390d@id) (if (G2b4e@bound-id-member? G3901@p G38fa@keys) (values (vector 'free-id G3901@p) G3903@ids) (if (G2b48@free-id=? G3901@p (G2cbb@scheme-stx '_)) (values '_ G3903@ids) (values 'any (cons (cons G3901@p G3902@n) G3903@ids))))) G3909@ls/false) ((lambda (G390f@t) ((lambda (G3911@ls/false) (if (and G3911@ls/false (apply (lambda (G3913@p G3914@dots) (G2d33@ellipsis? G3914@dots)) G3911@ls/false)) (apply (lambda (G3917@p G3918@dots) (call-with-values (lambda () (G3900@cvt G3917@p (+ G3902@n '1) G3903@ids)) (lambda (G391d@G391b G391e@G391c) ((lambda (G3921@ids G3922@p) (values (if (eq? G3922@p 'any) 'each-any (vector 'each G3922@p)) G3921@ids)) G391e@G391c G391d@G391b)))) G3911@ls/false) ((lambda (G3925@t) ((lambda (G3927@ls/false) (if (and G3927@ls/false (apply (lambda (G3929@x G392a@dots G392b@ys G392c@z) (G2d33@ellipsis? G392a@dots)) G3927@ls/false)) (apply (lambda (G3931@x G3932@dots G3933@ys G3934@z) (call-with-values (lambda () (G3900@cvt G3934@z G3902@n G3903@ids)) (lambda (G393b@G3939 G393c@G393a) ((lambda (G393f@ids G3940@z) (call-with-values (lambda () (G38fe@cvt* G3933@ys G3902@n G393f@ids)) (lambda (G3945@G3943 G3946@G3944) ((lambda (G3949@ids G394a@ys) (call-with-values (lambda () (G3900@cvt G3931@x (+ G3902@n '1) G3949@ids)) (lambda (G394f@G394d G3950@G394e) ((lambda (G3953@ids G3954@x) (values (vector 'each+ G3954@x (reverse G394a@ys) G3940@z) G3953@ids)) G3950@G394e G394f@G394d)))) G3946@G3944 G3945@G3943)))) G393c@G393a G393b@G3939)))) G3927@ls/false) ((lambda (G3957@t) ((lambda (G3959@ls/false) (if G3959@ls/false (apply (lambda (G395b@x G395c@y) (call-with-values (lambda () (G3900@cvt G395c@y G3902@n G3903@ids)) (lambda (G3961@G395f G3962@G3960) ((lambda (G3965@ids G3966@y) (call-with-values (lambda () (G3900@cvt G395b@x G3902@n G3965@ids)) (lambda (G396b@G3969 G396c@G396a) ((lambda (G396f@ids G3970@x) (values (cons G3970@x G3966@y) G396f@ids)) G396c@G396a G396b@G3969)))) G3962@G3960 G3961@G395f)))) G3959@ls/false) ((lambda (G3973@t) ((lambda (G3975@ls/false) (if G3975@ls/false (apply (lambda () (values '() G3903@ids)) G3975@ls/false) ((lambda (G3977@t) ((lambda (G3979@ls/false) (if (and G3979@ls/false (apply (lambda (G397b@p) (not (G2b08@stx? G397b@p))) G3979@ls/false)) (apply (lambda (G397d@p) (call-with-values (lambda () (G3900@cvt G397d@p G3902@n G3903@ids)) (lambda (G3981@G397f G3982@G3980) ((lambda (G3985@ids G3986@p) (values (vector 'vector G3986@p) G3985@ids)) G3982@G3980 G3981@G397f)))) G3979@ls/false) ((lambda (G3989@t) ((lambda (G398b@ls/false) (if G398b@ls/false (apply (lambda (G398d@datum) (values (vector 'atom (G2b56@stx->datum G398d@datum)) G3903@ids)) G398b@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3989@t))) (G2d31@syntax-dispatch G3989@t 'any))) G3977@t))) (G2d31@syntax-dispatch G3977@t '#(vector each-any)))) G3973@t))) (G2d31@syntax-dispatch G3973@t '()))) G3957@t))) (G2d31@syntax-dispatch G3957@t '(any . any)))) G3925@t))) (G2d31@syntax-dispatch G3925@t '(any any . #(each+ any () any))))) G390f@t))) (G2d31@syntax-dispatch G390f@t '(any any)))) G3907@t))) (G2d31@syntax-dispatch G3907@t 'any))) G3901@p))) (G3900@cvt G38f9@pattern '0 '()))) '#f '#f))) (set! G2d31@syntax-dispatch ((lambda () ((lambda (G39aa@stx^ G39ac@match-each G39ae@match-each+ G39b0@match-each-any G39b2@match-empty G39b4@combine G39b6@match* G39b8@match) (begin (set! G39aa@stx^ (lambda (G3a73@e G3a74@m* G3a75@s* G3a76@ae*) (if (and (null? G3a74@m*) (null? G3a75@s*) (null? G3a76@ae*)) G3a73@e (G2b28@mkstx G3a73@e G3a74@m* G3a75@s* G3a76@ae*)))) (set! G39ac@match-each (lambda (G3a56@e G3a57@p G3a58@m* G3a59@s* G3a5a@ae*) (if (pair? G3a56@e) ((lambda (G3a60@first) (and G3a60@first ((lambda (G3a62@rest) (and G3a62@rest (cons G3a60@first G3a62@rest))) (G39ac@match-each (cdr G3a56@e) G3a57@p G3a58@m* G3a59@s* G3a5a@ae*)))) (G39b8@match (car G3a56@e) G3a57@p G3a58@m* G3a59@s* G3a5a@ae* '())) (if (null? G3a56@e) '() (if (G2b08@stx? G3a56@e) (and (not (G2abe@top-marked? G3a58@m*)) (call-with-values (lambda () (G2b26@join-wraps G3a58@m* G3a59@s* G3a5a@ae* G3a56@e)) (lambda (G3a67@G3a64 G3a68@G3a65 G3a69@G3a66) ((lambda (G3a6d@ae* G3a6e@s* G3a6f@m*) (G39ac@match-each (G2b0c@stx-expr G3a56@e) G3a57@p G3a6f@m* G3a6e@s* G3a6d@ae*)) G3a69@G3a66 G3a68@G3a65 G3a67@G3a64)))) (if (G26e9@G260c@annotation? G3a56@e) (G39ac@match-each (G26eb@G2610@annotation-expression G3a56@e) G3a57@p G3a58@m* G3a59@s* G3a5a@ae*) '#f)))))) (set! G39ae@match-each+ (lambda (G3a1c@e G3a1d@x-pat G3a1e@y-pat G3a1f@z-pat G3a20@m* G3a21@s* G3a22@ae* G3a23@r) ((letrec ((G3a2c@f (lambda (G3a2e@e G3a2f@m* G3a30@s* G3a31@ae*) (if (pair? G3a2e@e) (call-with-values (lambda () (G3a2c@f (cdr G3a2e@e) G3a2f@m* G3a30@s* G3a31@ae*)) (lambda (G3a39@G3a36 G3a3a@G3a37 G3a3b@G3a38) ((lambda (G3a3f@r G3a40@y-pat G3a41@xr*) (if G3a3f@r (if (null? G3a40@y-pat) ((lambda (G3a45@xr) (if G3a45@xr (values (cons G3a45@xr G3a41@xr*) G3a40@y-pat G3a3f@r) (values '#f '#f '#f))) (G39b8@match (car G3a2e@e) G3a1d@x-pat G3a2f@m* G3a30@s* G3a31@ae* '())) (values '() (cdr G3a40@y-pat) (G39b8@match (car G3a2e@e) (car G3a40@y-pat) G3a2f@m* G3a30@s* G3a31@ae* G3a3f@r))) (values '#f '#f '#f))) G3a3b@G3a38 G3a3a@G3a37 G3a39@G3a36))) (if (G2b08@stx? G3a2e@e) (if (G2abe@top-marked? G3a2f@m*) (values '() G3a1e@y-pat (G39b8@match G3a2e@e G3a1f@z-pat G3a2f@m* G3a30@s* G3a31@ae* G3a23@r)) (call-with-values (lambda () (G2b26@join-wraps G3a2f@m* G3a30@s* G3a31@ae* G3a2e@e)) (lambda (G3a4a@G3a47 G3a4b@G3a48 G3a4c@G3a49) ((lambda (G3a50@ae* G3a51@s* G3a52@m*) (G3a2c@f (G2b0c@stx-expr G3a2e@e) G3a52@m* G3a51@s* G3a50@ae*)) G3a4c@G3a49 G3a4b@G3a48 G3a4a@G3a47)))) (if (G26e9@G260c@annotation? G3a2e@e) (G3a2c@f (G26eb@G2610@annotation-expression G3a2e@e) G3a2f@m* G3a30@s* G3a31@ae*) (values '() G3a1e@y-pat (G39b8@match G3a2e@e G3a1f@z-pat G3a2f@m* G3a30@s* G3a31@ae* G3a23@r)))))))) G3a2c@f) G3a1c@e G3a20@m* G3a21@s* G3a22@ae*))) (set! G39b0@match-each-any (lambda (G3a03@e G3a04@m* G3a05@s* G3a06@ae*) (if (pair? G3a03@e) ((lambda (G3a0b@l) (and G3a0b@l (cons (G39aa@stx^ (car G3a03@e) G3a04@m* G3a05@s* G3a06@ae*) G3a0b@l))) (G39b0@match-each-any (cdr G3a03@e) G3a04@m* G3a05@s* G3a06@ae*)) (if (null? G3a03@e) '() (if (G2b08@stx? G3a03@e) (and (not (G2abe@top-marked? G3a04@m*)) (call-with-values (lambda () (G2b26@join-wraps G3a04@m* G3a05@s* G3a06@ae* G3a03@e)) (lambda (G3a10@G3a0d G3a11@G3a0e G3a12@G3a0f) ((lambda (G3a16@ae* G3a17@s* G3a18@m*) (G39b0@match-each-any (G2b0c@stx-expr G3a03@e) G3a18@m* G3a17@s* G3a16@ae*)) G3a12@G3a0f G3a11@G3a0e G3a10@G3a0d)))) (if (G26e9@G260c@annotation? G3a03@e) (G39b0@match-each-any (G26eb@G2610@annotation-expression G3a03@e) G3a04@m* G3a05@s* G3a06@ae*) '#f)))))) (set! G39b2@match-empty (lambda (G39fd@p G39fe@r) (if (null? G39fd@p) G39fe@r (if (eq? G39fd@p '_) G39fe@r (if (eq? G39fd@p 'any) (cons '() G39fe@r) (if (pair? G39fd@p) (G39b2@match-empty (car G39fd@p) (G39b2@match-empty (cdr G39fd@p) G39fe@r)) (if (eq? G39fd@p 'each-any) (cons '() G39fe@r) ((lambda (G3a01@t) (if (memv G3a01@t '(each)) (G39b2@match-empty (vector-ref G39fd@p '1) G39fe@r) (if (memv G3a01@t '(each+)) (G39b2@match-empty (vector-ref G39fd@p '1) (G39b2@match-empty (reverse (vector-ref G39fd@p '2)) (G39b2@match-empty (vector-ref G39fd@p '3) G39fe@r))) (if (memv G3a01@t '(free-id atom)) G39fe@r (if (memv G3a01@t '(scheme-id atom)) G39fe@r (if (memv G3a01@t '(vector)) (G39b2@match-empty (vector-ref G39fd@p '1) G39fe@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G39fd@p))))))) (vector-ref G39fd@p '0))))))))) (set! G39b4@combine (lambda (G39f9@r* G39fa@r) (if (null? (car G39f9@r*)) G39fa@r (cons (map car G39f9@r*) (G39b4@combine (map cdr G39f9@r*) G39fa@r))))) (set! G39b6@match* (lambda (G39d8@e G39d9@p G39da@m* G39db@s* G39dc@ae* G39dd@r) (if (null? G39d9@p) (and (null? G39d8@e) G39dd@r) (if (pair? G39d9@p) (and (pair? G39d8@e) (G39b8@match (car G39d8@e) (car G39d9@p) G39da@m* G39db@s* G39dc@ae* (G39b8@match (cdr G39d8@e) (cdr G39d9@p) G39da@m* G39db@s* G39dc@ae* G39dd@r))) (if (eq? G39d9@p 'each-any) ((lambda (G39e4@l) (and G39e4@l (cons G39e4@l G39dd@r))) (G39b0@match-each-any G39d8@e G39da@m* G39db@s* G39dc@ae*)) ((lambda (G39e6@t) (if (memv G39e6@t '(each)) (if (null? G39d8@e) (G39b2@match-empty (vector-ref G39d9@p '1) G39dd@r) ((lambda (G39e8@r*) (and G39e8@r* (G39b4@combine G39e8@r* G39dd@r))) (G39ac@match-each G39d8@e (vector-ref G39d9@p '1) G39da@m* G39db@s* G39dc@ae*))) (if (memv G39e6@t '(free-id)) (and (symbol? G39d8@e) (G2abe@top-marked? G39da@m*) (G2b48@free-id=? (G39aa@stx^ G39d8@e G39da@m* G39db@s* G39dc@ae*) (vector-ref G39d9@p '1)) G39dd@r) (if (memv G39e6@t '(scheme-id)) (and (symbol? G39d8@e) (G2abe@top-marked? G39da@m*) (G2b48@free-id=? (G39aa@stx^ G39d8@e G39da@m* G39db@s* G39dc@ae*) (G2cbb@scheme-stx (vector-ref G39d9@p '1))) G39dd@r) (if (memv G39e6@t '(each+)) (call-with-values (lambda () (G39ae@match-each+ G39d8@e (vector-ref G39d9@p '1) (vector-ref G39d9@p '2) (vector-ref G39d9@p '3) G39da@m* G39db@s* G39dc@ae* G39dd@r)) (lambda (G39ed@G39ea G39ee@G39eb G39ef@G39ec) ((lambda (G39f3@r G39f4@y-pat G39f5@xr*) (and G39f3@r (null? G39f4@y-pat) (if (null? G39f5@xr*) (G39b2@match-empty (vector-ref G39d9@p '1) G39f3@r) (G39b4@combine G39f5@xr* G39f3@r)))) G39ef@G39ec G39ee@G39eb G39ed@G39ea))) (if (memv G39e6@t '(atom)) (and (fast-equal? (vector-ref G39d9@p '1) (G2b54@strip G39d8@e G39da@m*)) G39dd@r) (if (memv G39e6@t '(vector)) (and (vector? G39d8@e) (G39b8@match (vector->list G39d8@e) (vector-ref G39d9@p '1) G39da@m* G39db@s* G39dc@ae* G39dd@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G39d9@p)))))))) (vector-ref G39d9@p '0))))))) (set! G39b8@match (lambda (G39bd@e G39be@p G39bf@m* G39c0@s* G39c1@ae* G39c2@r) (if (not G39c2@r) '#f (if (eq? G39be@p '_) G39c2@r (if (eq? G39be@p 'any) (cons (G39aa@stx^ G39bd@e G39bf@m* G39c0@s* G39c1@ae*) G39c2@r) (if (G2b08@stx? G39bd@e) (and (not (G2abe@top-marked? G39bf@m*)) (call-with-values (lambda () (G2b26@join-wraps G39bf@m* G39c0@s* G39c1@ae* G39bd@e)) (lambda (G39cc@G39c9 G39cd@G39ca G39ce@G39cb) ((lambda (G39d2@ae* G39d3@s* G39d4@m*) (G39b8@match (G2b0c@stx-expr G39bd@e) G39be@p G39d4@m* G39d3@s* G39d2@ae* G39c2@r)) G39ce@G39cb G39cd@G39ca G39cc@G39c9)))) (if (G26e9@G260c@annotation? G39bd@e) (G39b8@match (G26eb@G2610@annotation-expression G39bd@e) G39be@p G39bf@m* G39c0@s* G39c1@ae* G39c2@r) (G39b6@match* G39bd@e G39be@p G39bf@m* G39c0@s* G39c1@ae* G39c2@r)))))))) (lambda (G39b9@e G39ba@p) (G39b8@match G39b9@e G39ba@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d33@ellipsis? (lambda (G3a7b@x) (and (G2b40@id? G3a7b@x) (G2b48@free-id=? G3a7b@x (G2cbb@scheme-stx '...))))) (set! G2d35@underscore? (lambda (G3a7d@x) (and (G2b40@id? G3a7d@x) (G2b48@free-id=? G3a7d@x (G2cbb@scheme-stx '_))))) (set! G2d37@verify-literals (lambda (G3a7f@lits G3a80@expr) (for-each (lambda (G3a83@x) (if (or (not (G2b40@id? G3a83@x)) (G2d33@ellipsis? G3a83@x) (G2d35@underscore? G3a83@x)) (G2e1c@syntax-violation '#f '"invalid literal" G3a80@expr G3a83@x) (void))) G3a7f@lits))) (set! G2d39@syntax-case-transformer ((lambda () ((lambda (G3a86@build-dispatch-call G3a88@invalid-ids-error G3a8a@gen-clause G3a8c@gen-syntax-case) (begin (set! G3a86@build-dispatch-call (lambda (G3af5@pvars G3af6@expr G3af7@y G3af8@r G3af9@mr) ((lambda (G3aff@ids G3b00@levels) ((lambda (G3b03@labels G3b04@new-vars) ((lambda (G3b07@body) (list '(primitive apply) (G2a9e@G29e0@build-lambda '#f G3b04@new-vars G3b07@body) G3af7@y)) (G2d55@chi-expr (G2b2c@add-subst (G2afb@make-full-rib G3aff@ids G3b03@labels) G3af6@expr) (append (map (lambda (G3b09@label G3b0a@var G3b0b@level) (cons G3b09@label (G2b60@make-binding 'syntax (cons G3b0a@var G3b0b@level)))) G3b03@labels G3b04@new-vars (map cdr G3af5@pvars)) G3af8@r) G3af9@mr))) (map G2ac4@gen-label G3aff@ids) (map G2ac0@gen-lexical G3aff@ids))) (map car G3af5@pvars) (map cdr G3af5@pvars)))) (set! G3a88@invalid-ids-error (lambda (G3ae9@id* G3aea@e G3aeb@class) ((letrec ((G3aef@find (lambda (G3af1@id* G3af2@ok*) (if (null? G3af1@id*) (G2e1c@syntax-violation '#f '"invalid syntax" G3aea@e) (if (G2b40@id? (car G3af1@id*)) (if (G2b4e@bound-id-member? (car G3af1@id*) G3af2@ok*) (G2e18@syntax-error (car G3af1@id*) '"duplicate " G3aeb@class) (G3aef@find (cdr G3af1@id*) (cons (car G3af1@id*) G3af2@ok*))) (G2e18@syntax-error (car G3af1@id*) '"invalid " G3aeb@class)))))) G3aef@find) G3ae9@id* '()))) (set! G3a8a@gen-clause (lambda (G3ac3@x G3ac4@keys G3ac5@clauses G3ac6@r G3ac7@mr G3ac8@pat G3ac9@fender G3aca@expr) (call-with-values (lambda () (G2d2f@convert-pattern G3ac8@pat G3ac4@keys)) (lambda (G3ad5@G3ad3 G3ad6@G3ad4) ((lambda (G3ad9@pvars G3ada@p) (if (not (G2b4c@distinct-bound-ids? (map car G3ad9@pvars))) (G3a88@invalid-ids-error (map car G3ad9@pvars) G3ac8@pat '"pattern variable") (if (not (for-all (lambda (G3add@x) (not (G2d33@ellipsis? (car G3add@x)))) G3ad9@pvars)) (G2e1c@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3ac8@pat) ((lambda (G3adf@y) ((lambda (G3ae1@test) ((lambda (G3ae3@conseq) ((lambda (G3ae5@altern) (list (G2a9e@G29e0@build-lambda '#f (list G3adf@y) (list 'if G3ae1@test G3ae3@conseq G3ae5@altern)) (list '(primitive syntax-dispatch) G3ac3@x (list 'quote G3ada@p)))) (G3a8c@gen-syntax-case G3ac3@x G3ac4@keys G3ac5@clauses G3ac6@r G3ac7@mr))) (G3a86@build-dispatch-call G3ad9@pvars G3aca@expr G3adf@y G3ac6@r G3ac7@mr))) (if (eq? G3ac9@fender '#t) G3adf@y ((lambda (G3ae7@call) (list 'if G3adf@y G3ae7@call (list 'quote '#f))) (G3a86@build-dispatch-call G3ad9@pvars G3ac9@fender G3adf@y G3ac6@r G3ac7@mr))))) (G2ac0@gen-lexical 'tmp))))) G3ad6@G3ad4 G3ad5@G3ad3))))) (set! G3a8c@gen-syntax-case (lambda (G3aa1@x G3aa2@keys G3aa3@clauses G3aa4@r G3aa5@mr) (if (null? G3aa3@clauses) (list '(primitive syntax-error) G3aa1@x) ((lambda (G3aab@t) ((lambda (G3aad@ls/false) (if G3aad@ls/false (apply (lambda (G3aaf@pat G3ab0@expr) (if (and (G2b40@id? G3aaf@pat) (not (G2b4e@bound-id-member? G3aaf@pat G3aa2@keys)) (not (G2d33@ellipsis? G3aaf@pat))) (if (G2b48@free-id=? G3aaf@pat (G2cbb@scheme-stx '_)) (G2d55@chi-expr G3ab0@expr G3aa4@r G3aa5@mr) ((lambda (G3ab3@lab G3ab4@lex) ((lambda (G3ab7@body) (list (G2a9e@G29e0@build-lambda '#f (list G3ab4@lex) G3ab7@body) G3aa1@x)) (G2d55@chi-expr (G2b2c@add-subst (G2afb@make-full-rib (list G3aaf@pat) (list G3ab3@lab)) G3ab0@expr) (cons (cons G3ab3@lab (G2b60@make-binding 'syntax (cons G3ab4@lex '0))) G3aa4@r) G3aa5@mr))) (G2ac4@gen-label G3aaf@pat) (G2ac0@gen-lexical G3aaf@pat))) (G3a8a@gen-clause G3aa1@x G3aa2@keys (cdr G3aa3@clauses) G3aa4@r G3aa5@mr G3aaf@pat '#t G3ab0@expr))) G3aad@ls/false) ((lambda (G3ab9@t) ((lambda (G3abb@ls/false) (if G3abb@ls/false (apply (lambda (G3abd@pat G3abe@fender G3abf@expr) (G3a8a@gen-clause G3aa1@x G3aa2@keys (cdr G3aa3@clauses) G3aa4@r G3aa5@mr G3abd@pat G3abe@fender G3abf@expr)) G3abb@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3ab9@t))) (G2d31@syntax-dispatch G3ab9@t '(any any any)))) G3aab@t))) (G2d31@syntax-dispatch G3aab@t '(any any)))) (car G3aa3@clauses))))) (lambda (G3a8d@e G3a8e@r G3a8f@mr) ((lambda (G3a93@t) ((lambda (G3a95@ls/false) (if G3a95@ls/false (apply (lambda (G3a97@expr G3a98@keys G3a99@clauses) (begin (G2d37@verify-literals G3a98@keys G3a8d@e) ((lambda (G3a9d@x) ((lambda (G3a9f@body) (list (G2a9e@G29e0@build-lambda '#f (list G3a9d@x) G3a9f@body) (G2d55@chi-expr G3a97@expr G3a8e@r G3a8f@mr))) (G3a8c@gen-syntax-case G3a9d@x G3a98@keys G3a99@clauses G3a8e@r G3a8f@mr))) (G2ac0@gen-lexical 'tmp)))) G3a95@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3a93@t))) (G2d31@syntax-dispatch G3a93@t '(_ any each-any . each-any)))) G3a8d@e)))) '#f '#f '#f '#f)))) (set! G2d3b@ellipsis-map (lambda (G3b0f@proc G3b10@ls . G3b13@ls*) ((lambda (G3b16@who) (begin (set! G3b16@who '...) (begin (if (not (list? G3b10@ls)) (assertion-violation G3b16@who '"not a list" G3b10@ls) (void)) (if (not (null? G3b13@ls*)) ((lambda (G3b17@n) (for-each (lambda (G3b19@x) (begin (if (not (list? G3b19@x)) (assertion-violation G3b16@who '"not a list" G3b19@x) (void)) (if (not (= (length G3b19@x) G3b17@n)) (assertion-violation G3b16@who '"length mismatch" G3b10@ls G3b19@x) (void)))) G3b13@ls*)) (length G3b10@ls)) (void)) (apply map G3b0f@proc G3b10@ls G3b13@ls*)))) '#f))) (set! G2d3d@syntax-transformer ((lambda () ((lambda (G3b1c@gen-syntax G3b1e@gen-ref G3b20@gen-append G3b22@gen-mappend G3b24@gen-map G3b26@gen-cons G3b28@gen-vector G3b2a@regen) (begin (set! G3b1c@gen-syntax (lambda (G3b8f@src G3b90@e G3b91@r G3b92@maps G3b93@ellipsis? G3b94@vec?) ((lambda (G3b9b@t) ((lambda (G3b9d@ls/false) (if (and G3b9d@ls/false (apply (lambda (G3b9f@dots) (G3b93@ellipsis? G3b9f@dots)) G3b9d@ls/false)) (apply (lambda (G3ba1@dots) (G2e1c@syntax-violation '#f '"misplaced ellipsis in syntax form" G3b8f@src)) G3b9d@ls/false) ((lambda (G3ba3@t) ((lambda (G3ba5@ls/false) (if (and G3ba5@ls/false (apply (lambda (G3ba7@id) (G2b40@id? G3ba7@id)) G3ba5@ls/false)) (apply (lambda (G3ba9@id) ((lambda (G3bab@label) ((lambda (G3bad@b) ((lambda () (if (eq? (G2b62@binding-type G3bad@b) 'syntax) (call-with-values (lambda () ((lambda (G3bb1@var.lev) (G3b1e@gen-ref G3b8f@src (car G3bb1@var.lev) (cdr G3bb1@var.lev) G3b92@maps)) (G2b64@binding-value G3bad@b))) (lambda (G3bb3@G3baf G3bb4@G3bb0) ((lambda (G3bb7@maps G3bb8@var) (values (list 'ref G3bb8@var) G3bb7@maps)) G3bb4@G3bb0 G3bb3@G3baf))) (values (list 'quote G3b90@e) G3b92@maps))))) (G2b5e@label->binding G3bab@label G3b91@r))) (G2b5a@id->label G3b90@e))) G3ba5@ls/false) ((lambda (G3bbb@t) ((lambda (G3bbd@ls/false) (if (and G3bbd@ls/false (apply (lambda (G3bbf@dots G3bc0@e) (G3b93@ellipsis? G3bbf@dots)) G3bbd@ls/false)) (apply (lambda (G3bc3@dots G3bc4@e) (if G3b94@vec? (G2e1c@syntax-violation '#f '"misplaced ellipsis in syntax form" G3b8f@src) (G3b1c@gen-syntax G3b8f@src G3bc4@e G3b91@r G3b92@maps (lambda (G3bc7@x) '#f) '#f))) G3bbd@ls/false) ((lambda (G3bc9@t) ((lambda (G3bcb@ls/false) (if (and G3bcb@ls/false (apply (lambda (G3bcd@x G3bce@dots G3bcf@y) (G3b93@ellipsis? G3bce@dots)) G3bcb@ls/false)) (apply (lambda (G3bd3@x G3bd4@dots G3bd5@y) ((letrec ((G3bd9@f (lambda (G3bdb@y G3bdc@k) ((lambda (G3bdf@t) ((lambda (G3be1@ls/false) (if G3be1@ls/false (apply (lambda () (G3bdc@k G3b92@maps)) G3be1@ls/false) ((lambda (G3be3@t) ((lambda (G3be5@ls/false) (if (and G3be5@ls/false (apply (lambda (G3be7@dots G3be8@y) (G3b93@ellipsis? G3be7@dots)) G3be5@ls/false)) (apply (lambda (G3beb@dots G3bec@y) (G3bd9@f G3bec@y (lambda (G3bef@maps) (call-with-values (lambda () (G3bdc@k (cons '() G3bef@maps))) (lambda (G3bf3@G3bf1 G3bf4@G3bf2) ((lambda (G3bf7@maps G3bf8@x) (if (null? (car G3bf7@maps)) (G2e1c@syntax-violation '#f '"extra ellipsis in syntax form" G3b8f@src) (values (G3b22@gen-mappend G3bf8@x (car G3bf7@maps)) (cdr G3bf7@maps)))) G3bf4@G3bf2 G3bf3@G3bf1)))))) G3be5@ls/false) ((lambda (G3bfb@t) ((lambda (G3bfd@ls/false) (if G3bfd@ls/false (apply (lambda () (call-with-values (lambda () (G3b1c@gen-syntax G3b8f@src G3bdb@y G3b91@r G3b92@maps G3b93@ellipsis? G3b94@vec?)) (lambda (G3c01@G3bff G3c02@G3c00) ((lambda (G3c05@maps G3c06@y) (call-with-values (lambda () (G3bdc@k G3c05@maps)) (lambda (G3c0b@G3c09 G3c0c@G3c0a) ((lambda (G3c0f@maps G3c10@x) (values (G3b20@gen-append G3c10@x G3c06@y) G3c0f@maps)) G3c0c@G3c0a G3c0b@G3c09)))) G3c02@G3c00 G3c01@G3bff)))) G3bfd@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3bfb@t))) (G2d31@syntax-dispatch G3bfb@t '_))) G3be3@t))) (G2d31@syntax-dispatch G3be3@t '(any . any)))) G3bdf@t))) (G2d31@syntax-dispatch G3bdf@t '()))) G3bdb@y)))) G3bd9@f) G3bd5@y (lambda (G3c13@maps) (call-with-values (lambda () (G3b1c@gen-syntax G3b8f@src G3bd3@x G3b91@r (cons '() G3c13@maps) G3b93@ellipsis? '#f)) (lambda (G3c17@G3c15 G3c18@G3c16) ((lambda (G3c1b@maps G3c1c@x) (if (null? (car G3c1b@maps)) (G2e1c@syntax-violation '#f '"extra ellipsis in syntax form" G3b8f@src) (values (G3b24@gen-map G3c1c@x (car G3c1b@maps)) (cdr G3c1b@maps)))) G3c18@G3c16 G3c17@G3c15)))))) G3bcb@ls/false) ((lambda (G3c1f@t) ((lambda (G3c21@ls/false) (if G3c21@ls/false (apply (lambda (G3c23@x G3c24@y) (call-with-values (lambda () (G3b1c@gen-syntax G3b8f@src G3c23@x G3b91@r G3b92@maps G3b93@ellipsis? '#f)) (lambda (G3c29@G3c27 G3c2a@G3c28) ((lambda (G3c2d@maps G3c2e@xnew) (call-with-values (lambda () (G3b1c@gen-syntax G3b8f@src G3c24@y G3b91@r G3c2d@maps G3b93@ellipsis? G3b94@vec?)) (lambda (G3c33@G3c31 G3c34@G3c32) ((lambda (G3c37@maps G3c38@ynew) (values (G3b26@gen-cons G3b90@e G3c23@x G3c24@y G3c2e@xnew G3c38@ynew) G3c37@maps)) G3c34@G3c32 G3c33@G3c31)))) G3c2a@G3c28 G3c29@G3c27)))) G3c21@ls/false) ((lambda (G3c3b@t) ((lambda (G3c3d@ls/false) (if G3c3d@ls/false (apply (lambda (G3c3f@ls) (call-with-values (lambda () (G3b1c@gen-syntax G3b8f@src G3c3f@ls G3b91@r G3b92@maps G3b93@ellipsis? '#t)) (lambda (G3c43@G3c41 G3c44@G3c42) ((lambda (G3c47@maps G3c48@lsnew) (values (G3b28@gen-vector G3b90@e G3c3f@ls G3c48@lsnew) G3c47@maps)) G3c44@G3c42 G3c43@G3c41)))) G3c3d@ls/false) ((lambda (G3c4b@t) ((lambda (G3c4d@ls/false) (if G3c4d@ls/false (apply (lambda () (values (list 'quote G3b90@e) G3b92@maps)) G3c4d@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3c4b@t))) (G2d31@syntax-dispatch G3c4b@t '_))) G3c3b@t))) (G2d31@syntax-dispatch G3c3b@t '#(vector each-any)))) G3c1f@t))) (G2d31@syntax-dispatch G3c1f@t '(any . any)))) G3bc9@t))) (G2d31@syntax-dispatch G3bc9@t '(any any . any)))) G3bbb@t))) (G2d31@syntax-dispatch G3bbb@t '(any any)))) G3ba3@t))) (G2d31@syntax-dispatch G3ba3@t 'any))) G3b9b@t))) (G2d31@syntax-dispatch G3b9b@t 'any))) G3b90@e))) (set! G3b1e@gen-ref (lambda (G3b77@src G3b78@var G3b79@level G3b7a@maps) (if (= G3b79@level '0) (values G3b78@var G3b7a@maps) (if (null? G3b7a@maps) (G2e1c@syntax-violation '#f '"missing ellipsis in syntax form" G3b77@src) (call-with-values (lambda () (G3b1e@gen-ref G3b77@src G3b78@var (- G3b79@level '1) (cdr G3b7a@maps))) (lambda (G3b81@G3b7f G3b82@G3b80) ((lambda (G3b85@outer-maps G3b86@outer-var) ((lambda (G3b89@t) (if G3b89@t ((lambda (G3b8b@b) (values (cdr G3b8b@b) G3b7a@maps)) G3b89@t) ((lambda (G3b8d@inner-var) (values G3b8d@inner-var (cons (cons (cons G3b86@outer-var G3b8d@inner-var) (car G3b7a@maps)) G3b85@outer-maps))) (G2ac0@gen-lexical 'tmp)))) (assq G3b86@outer-var (car G3b7a@maps)))) G3b82@G3b80 G3b81@G3b7f))))))) (set! G3b20@gen-append (lambda (G3b73@x G3b74@y) (if (fast-equal? G3b74@y ''()) G3b73@x (list 'append G3b73@x G3b74@y)))) (set! G3b22@gen-mappend (lambda (G3b6f@e G3b70@map-env) (list 'apply '(primitive append) (G3b24@gen-map G3b6f@e G3b70@map-env)))) (set! G3b24@gen-map (lambda (G3b5d@e G3b5e@map-env) ((lambda (G3b61@formals G3b62@actuals) (if (eq? (car G3b5d@e) 'ref) (car G3b62@actuals) (if (for-all (lambda (G3b65@x) (and (eq? (car G3b65@x) 'ref) (memq (cadr G3b65@x) G3b61@formals))) (cdr G3b5d@e)) ((lambda (G3b67@args) (cons 'map (cons (list 'primitive (car G3b5d@e)) G3b67@args))) (map ((lambda (G3b69@r) (lambda (G3b6b@x) (cdr (assq (cadr G3b6b@x) G3b69@r)))) (map cons G3b61@formals G3b62@actuals)) (cdr G3b5d@e))) (cons* 'map (list 'lambda G3b61@formals G3b5d@e) G3b62@actuals)))) (map cdr G3b5e@map-env) (map (lambda (G3b6d@x) (list 'ref (car G3b6d@x))) G3b5e@map-env)))) (set! G3b26@gen-cons (lambda (G3b4d@e G3b4e@x G3b4f@y G3b50@xnew G3b51@ynew) ((lambda (G3b57@t) (if (memv G3b57@t '(quote)) (if (eq? (car G3b50@xnew) 'quote) ((lambda (G3b59@xnew G3b5a@ynew) (if (and (eq? G3b59@xnew G3b4e@x) (eq? G3b5a@ynew G3b4f@y)) (list 'quote G3b4d@e) (list 'quote (cons G3b59@xnew G3b5a@ynew)))) (cadr G3b50@xnew) (cadr G3b51@ynew)) (if (null? (cadr G3b51@ynew)) (list 'list G3b50@xnew) (list 'cons G3b50@xnew G3b51@ynew))) (if (memv G3b57@t '(list)) (cons 'list (cons G3b50@xnew (cdr G3b51@ynew))) (list 'cons G3b50@xnew G3b51@ynew)))) (car G3b51@ynew)))) (set! G3b28@gen-vector (lambda (G3b47@e G3b48@ls G3b49@lsnew) (if (eq? (car G3b49@lsnew) 'quote) (if (eq? (cadr G3b49@lsnew) G3b48@ls) (list 'quote G3b47@e) (list 'quote (list->vector (cadr G3b49@lsnew)))) (if (eq? (car G3b49@lsnew) 'list) (cons 'vector (cdr G3b49@lsnew)) (list 'list->vector G3b49@lsnew))))) (set! G3b2a@regen (lambda (G3b41@x) ((lambda (G3b43@t) (if (memv G3b43@t '(ref)) (cadr G3b41@x) (if (memv G3b43@t '(primitive)) (list 'primitive (cadr G3b41@x)) (if (memv G3b43@t '(quote)) (list 'quote (cadr G3b41@x)) (if (memv G3b43@t '(lambda)) (G2a9e@G29e0@build-lambda '#f (cadr G3b41@x) (G3b2a@regen (caddr G3b41@x))) (if (memv G3b43@t '(map)) ((lambda (G3b45@ls) (cons '(primitive ellipsis-map) G3b45@ls)) (map G3b2a@regen (cdr G3b41@x))) (cons (list 'primitive (car G3b41@x)) (map G3b2a@regen (cdr G3b41@x))))))))) (car G3b41@x)))) (lambda (G3b2b@e G3b2c@r G3b2d@mr) ((lambda (G3b31@t) ((lambda (G3b33@ls/false) (if G3b33@ls/false (apply (lambda (G3b35@x) (call-with-values (lambda () (G3b1c@gen-syntax G3b2b@e G3b35@x G3b2c@r '() G2d33@ellipsis? '#f)) (lambda (G3b39@G3b37 G3b3a@G3b38) ((lambda (G3b3d@maps G3b3e@e) (G3b2a@regen G3b3e@e)) G3b3a@G3b38 G3b39@G3b37)))) G3b33@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3b31@t))) (G2d31@syntax-dispatch G3b31@t '(_ any)))) G3b2b@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d3f@core-macro-transformer (lambda (G3c4f@name) ((lambda (G3c51@t) (if (memv G3c51@t '(quote)) G2ce1@quote-transformer (if (memv G3c51@t '(lambda)) G2ce5@lambda-transformer (if (memv G3c51@t '(case-lambda)) G2ce3@case-lambda-transformer (if (memv G3c51@t '(letrec)) G2cc9@letrec-transformer (if (memv G3c51@t '(letrec*)) G2ccb@letrec*-transformer (if (memv G3c51@t '(if)) G2cd9@if-transformer (if (memv G3c51@t '(and)) G2cdb@and-transformer (if (memv G3c51@t '(or)) G2cdd@or-transformer (if (memv G3c51@t '(foreign-call)) G2d2d@foreign-call-transformer (if (memv G3c51@t '(syntax-case)) G2d39@syntax-case-transformer (if (memv G3c51@t '(syntax)) G2d3d@syntax-transformer (if (memv G3c51@t '(type-descriptor)) G2ccf@type-descriptor-transformer (if (memv G3c51@t '(record-type-descriptor)) G2cd1@record-type-descriptor-transformer (if (memv G3c51@t '(record-constructor-descriptor)) G2cd3@record-constructor-descriptor-transformer (if (memv G3c51@t '(fluid-let-syntax)) G2ccd@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3c4f@name))))))))))))))))) G3c4f@name))) (set! G2d41@file-options-macro (lambda (G3c53@x) ((lambda (G3c56@valid-option?) (begin (set! G3c56@valid-option? (lambda (G3c5f@x) (and (G2b40@id? G3c5f@x) (memq (G2b42@id->sym G3c5f@x) '(no-fail no-create no-truncate))))) ((lambda (G3c57@t) ((lambda (G3c59@ls/false) (if (and G3c59@ls/false (apply (lambda (G3c5b@opt*) (and (for-all G3c56@valid-option? G3c5b@opt*) (G26f5@G2686@file-options-spec (map G2b42@id->sym G3c5b@opt*)))) G3c59@ls/false)) (apply (lambda (G3c5d@opt*) (G2ce7@bless (list 'quote (G26f5@G2686@file-options-spec (map G2b42@id->sym G3c5d@opt*))))) G3c59@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3c57@t))) (G2d31@syntax-dispatch G3c57@t '(_ . each-any)))) G3c53@x))) '#f))) (set! G2d43@symbol-macro (lambda (G3c61@x G3c62@set) ((lambda (G3c65@t) ((lambda (G3c67@ls/false) (if (and G3c67@ls/false (apply (lambda (G3c69@name) (and (G2b40@id? G3c69@name) (memq (G2b42@id->sym G3c69@name) G3c62@set))) G3c67@ls/false)) (apply (lambda (G3c6b@name) (G2ce7@bless (list 'quote G3c6b@name))) G3c67@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3c65@t))) (G2d31@syntax-dispatch G3c65@t '(_ any)))) G3c61@x))) (set! G2d45@macro-transformer (lambda (G3c6d@x) (if (procedure? G3c6d@x) G3c6d@x (if (symbol? G3c6d@x) ((lambda (G3c6f@t) (if (memv G3c6f@t '(define-record-type)) G2d25@define-record-type-macro (if (memv G3c6f@t '(define-struct)) G2d23@define-struct-macro (if (memv G3c6f@t '(include)) G2d19@include-macro (if (memv G3c6f@t '(cond)) G2d15@cond-macro (if (memv G3c6f@t '(let)) G2ced@let-macro (if (memv G3c6f@t '(do)) G2d0d@do-macro (if (memv G3c6f@t '(or)) G2d11@or-macro (if (memv G3c6f@t '(and)) G2d13@and-macro (if (memv G3c6f@t '(let*)) G2d0f@let*-macro (if (memv G3c6f@t '(let-values)) G2cef@let-values-macro (if (memv G3c6f@t '(let*-values)) G2cf1@let*-values-macro (if (memv G3c6f@t '(syntax-rules)) G2d1d@syntax-rules-macro (if (memv G3c6f@t '(quasiquote)) G2d1f@quasiquote-macro (if (memv G3c6f@t '(quasisyntax)) G2d21@quasisyntax-macro (if (memv G3c6f@t '(with-syntax)) G2ce9@with-syntax-macro (if (memv G3c6f@t '(when)) G2cd5@when-macro (if (memv G3c6f@t '(unless)) G2cd7@unless-macro (if (memv G3c6f@t '(case)) G2cdf@case-macro (if (memv G3c6f@t '(identifier-syntax)) G2d0b@identifier-syntax-macro (if (memv G3c6f@t '(time)) G2d03@time-macro (if (memv G3c6f@t '(delay)) G2d05@delay-macro (if (memv G3c6f@t '(assert)) G2d07@assert-macro (if (memv G3c6f@t '(endianness)) G2d09@endianness-macro (if (memv G3c6f@t '(guard)) G2cff@guard-macro (if (memv G3c6f@t '(define-enumeration)) G2d01@define-enumeration-macro (if (memv G3c6f@t '(trace-lambda)) G2cf3@trace-lambda-macro (if (memv G3c6f@t '(trace-define)) G2cf5@trace-define-macro (if (memv G3c6f@t '(trace-define-syntax)) G2cf7@trace-define-syntax-macro (if (memv G3c6f@t '(trace-let-syntax)) G2cfb@trace-let-syntax-macro (if (memv G3c6f@t '(trace-letrec-syntax)) G2cfd@trace-letrec-syntax-macro (if (memv G3c6f@t '(define-condition-type)) G2d27@define-condition-type-macro (if (memv G3c6f@t '(parameterize)) G2d2b@parameterize-macro (if (memv G3c6f@t '(include-into)) G2d1b@include-into-macro (if (memv G3c6f@t '(eol-style)) (lambda (G3c71@x) (G2d43@symbol-macro G3c71@x '(none lf cr crlf nel crnel ls))) (if (memv G3c6f@t '(error-handling-mode)) (lambda (G3c73@x) (G2d43@symbol-macro G3c73@x '(ignore raise replace))) (if (memv G3c6f@t '(buffer-mode)) (lambda (G3c75@x) (G2d43@symbol-macro G3c75@x '(none line block))) (if (memv G3c6f@t '(file-options)) G2d41@file-options-macro (if (memv G3c6f@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2d29@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3c6d@x)))))))))))))))))))))))))))))))))))))))) G3c6d@x) (error 'core-macro-transformer '"BUG: invalid macro" G3c6d@x))))) (set! G2d47@local-macro-transformer (lambda (G3c77@x) (car G3c77@x))) (set! G2d49@do-macro-call (lambda (G3c79@transformer G3c7a@expr) ((lambda (G3c7d@out) (begin ((letrec ((G3c7f@f (lambda (G3c81@x) (if (not (G2b08@stx? G3c81@x)) (if (pair? G3c81@x) (begin (G3c7f@f (car G3c81@x)) (G3c7f@f (cdr G3c81@x))) (if (vector? G3c81@x) (vector-for-each G3c7f@f G3c81@x) (if (symbol? G3c81@x) (G2e1c@syntax-violation '#f '"raw symbol encountered in output of macro" G3c7a@expr G3c81@x) (void)))) (void))))) G3c7f@f) G3c7d@out) (G2b2a@add-mark (G2b20@gen-mark) G3c7d@out G3c7a@expr))) (G3c79@transformer (G2b2a@add-mark G2b22@anti-mark G3c7a@expr '#f))))) (set! G2d4b@chi-macro (lambda (G3c83@p G3c84@e) (G2d49@do-macro-call (G2d45@macro-transformer G3c83@p) G3c84@e))) (set! G2d4d@chi-local-macro (lambda (G3c87@p G3c88@e) (G2d49@do-macro-call (G2d47@local-macro-transformer G3c87@p) G3c88@e))) (set! G2d4f@chi-global-macro (lambda (G3c8b@p G3c8c@e) ((lambda (G3c8f@lib G3c90@loc) (begin (G2969@G2811@visit-library G3c8f@lib) ((lambda (G3c93@x) ((lambda (G3c95@transformer) (G2d49@do-macro-call G3c95@transformer G3c8c@e)) (if (procedure? G3c93@x) G3c93@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3c93@x)))) (symbol-value G3c90@loc)))) (car G3c8b@p) (cdr G3c8b@p)))) (set! G2d51@chi-expr* (lambda (G3c97@e* G3c98@r G3c99@mr) (if (null? G3c97@e*) '() ((lambda (G3c9d@e) (cons G3c9d@e (G2d51@chi-expr* (cdr G3c97@e*) G3c98@r G3c99@mr))) (G2d55@chi-expr (car G3c97@e*) G3c98@r G3c99@mr))))) (set! G2d53@chi-application (lambda (G3c9f@e G3ca0@r G3ca1@mr) ((lambda (G3ca5@t) ((lambda (G3ca7@ls/false) (if G3ca7@ls/false (apply (lambda (G3ca9@rator G3caa@rands) ((lambda (G3cad@rator) (cons G3cad@rator (G2d51@chi-expr* G3caa@rands G3ca0@r G3ca1@mr))) (G2d55@chi-expr G3ca9@rator G3ca0@r G3ca1@mr))) G3ca7@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3ca5@t))) (G2d31@syntax-dispatch G3ca5@t '(any . each-any)))) G3c9f@e))) (set! G2d55@chi-expr (lambda (G3caf@e G3cb0@r G3cb1@mr) (call-with-values (lambda () (G2b68@syntax-type G3caf@e G3cb0@r)) (lambda (G3cb8@G3cb5 G3cb9@G3cb6 G3cba@G3cb7) ((lambda (G3cbe@kwd G3cbf@value G3cc0@type) ((lambda (G3cc4@t) (if (memv G3cc4@t '(core-macro)) ((lambda (G3cc6@transformer) (G3cc6@transformer G3caf@e G3cb0@r G3cb1@mr)) (G2d3f@core-macro-transformer G3cbf@value)) (if (memv G3cc4@t '(global)) ((lambda (G3cc8@lib) ((lambda (G3cca@loc) ((lambda () (begin ((G2d9e@inv-collector) G3cc8@lib) G3cca@loc)))) (cdr G3cbf@value))) (car G3cbf@value)) (if (memv G3cc4@t '(core-prim)) ((lambda (G3ccc@name) (list 'primitive G3ccc@name)) G3cbf@value) (if (memv G3cc4@t '(call)) (G2d53@chi-application G3caf@e G3cb0@r G3cb1@mr) (if (memv G3cc4@t '(lexical)) ((lambda (G3cce@lex) G3cce@lex) (G2cbd@lexical-var G3cbf@value)) (if (memv G3cc4@t '(global-macro global-macro!)) (G2d55@chi-expr (G2d4f@chi-global-macro G3cbf@value G3caf@e) G3cb0@r G3cb1@mr) (if (memv G3cc4@t '(local-macro local-macro!)) (G2d55@chi-expr (G2d4d@chi-local-macro G3cbf@value G3caf@e) G3cb0@r G3cb1@mr) (if (memv G3cc4@t '(macro macro!)) (G2d55@chi-expr (G2d4b@chi-macro G3cbf@value G3caf@e) G3cb0@r G3cb1@mr) (if (memv G3cc4@t '(constant)) ((lambda (G3cd0@datum) (list 'quote G3cd0@datum)) G3cbf@value) (if (memv G3cc4@t '(set!)) (G2d57@chi-set! G3caf@e G3cb0@r G3cb1@mr) (if (memv G3cc4@t '(begin)) ((lambda (G3cd2@t) ((lambda (G3cd4@ls/false) (if G3cd4@ls/false (apply (lambda (G3cd6@x G3cd7@x*) (G2aa1@G2a12@build-sequence '#f (G2d51@chi-expr* (cons G3cd6@x G3cd7@x*) G3cb0@r G3cb1@mr))) G3cd4@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3cd2@t))) (G2d31@syntax-dispatch G3cd2@t '(_ any . each-any)))) G3caf@e) (if (memv G3cc4@t '(let-syntax letrec-syntax)) ((lambda (G3cda@t) ((lambda (G3cdc@ls/false) (if (and G3cdc@ls/false (apply (lambda (G3cde@xlhs* G3cdf@xrhs* G3ce0@xbody G3ce1@xbody*) (if (not (G2b4a@valid-bound-ids? G3cde@xlhs*)) (G2e1c@syntax-violation '#f '"invalid identifiers" G3caf@e) (void))) G3cdc@ls/false)) (apply (lambda (G3ce6@xlhs* G3ce7@xrhs* G3ce8@xbody G3ce9@xbody*) ((lambda (G3cee@xlab*) ((lambda (G3cf0@xrib) ((lambda (G3cf2@xb*) ((lambda () (G2aa1@G2a12@build-sequence '#f (G2d51@chi-expr* (map (lambda (G3cf4@x) (G2b2c@add-subst G3cf0@xrib G3cf4@x)) (cons G3ce8@xbody G3ce9@xbody*)) (append (map cons G3cee@xlab* G3cf2@xb*) G3cb0@r) (append (map cons G3cee@xlab* G3cf2@xb*) G3cb1@mr)))))) (map (lambda (G3cf6@x) (G2b7e@make-eval-transformer (G2d90@expand-transformer (if (eq? G3cc0@type 'let-syntax) G3cf6@x (G2b2c@add-subst G3cf0@xrib G3cf6@x)) G3cb1@mr))) G3ce7@xrhs*))) (G2afb@make-full-rib G3ce6@xlhs* G3cee@xlab*))) (map G2ac4@gen-label G3ce6@xlhs*))) G3cdc@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3cda@t))) (G2d31@syntax-dispatch G3cda@t '(_ #(each (any any)) any . each-any)))) G3caf@e) (if (memv G3cc4@t '(displaced-lexical)) (G2e1c@syntax-violation '#f '"identifier out of context" G3caf@e) (if (memv G3cc4@t '(syntax)) (G2e1c@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3caf@e) (if (memv G3cc4@t '(define define-syntax module import library)) (G2e1c@syntax-violation '#f (string-append ((lambda (G3cf8@t) (if (memv G3cf8@t '(define)) '"a definition" (if (memv G3cf8@t '(define-syntax)) '"a define-syntax" (if (memv G3cf8@t '(module)) '"a module definition" (if (memv G3cf8@t '(library)) '"a library definition" (if (memv G3cf8@t '(import)) '"an import declaration" (if (memv G3cf8@t '(export)) '"an export declaration" '"a non-expression"))))))) G3cc0@type) '" was found where an expression was expected") G3caf@e) (if (memv G3cc4@t '(mutable)) (G2e1c@syntax-violation '#f '"attempt to reference an unexportable variable" G3caf@e) (G2e1c@syntax-violation '#f '"invalid expression" G3caf@e)))))))))))))))))) G3cc0@type)) G3cba@G3cb7 G3cb9@G3cb6 G3cb8@G3cb5))))) (set! G2d57@chi-set! (lambda (G3cfa@e G3cfb@r G3cfc@mr) ((lambda (G3d00@t) ((lambda (G3d02@ls/false) (if (and G3d02@ls/false (apply (lambda (G3d04@x G3d05@v) (G2b40@id? G3d04@x)) G3d02@ls/false)) (apply (lambda (G3d08@x G3d09@v) (call-with-values (lambda () (G2b68@syntax-type G3d08@x G3cfb@r)) (lambda (G3d0f@G3d0c G3d10@G3d0d G3d11@G3d0e) ((lambda (G3d15@kwd G3d16@value G3d17@type) ((lambda (G3d1b@t) (if (memv G3d1b@t '(lexical)) (begin (G2cc1@set-lexical-mutable! G3d16@value '#t) (list 'set! (G2cbd@lexical-var G3d16@value) (G2d55@chi-expr G3d09@v G3cfb@r G3cfc@mr))) (if (memv G3d1b@t '(core-prim)) (G2e1c@syntax-violation '#f '"cannot modify imported core primitive" G3cfa@e) (if (memv G3d1b@t '(global)) (G2e1c@syntax-violation '#f '"attempt to modify imported binding" G3cfa@e) (if (memv G3d1b@t '(global-macro!)) (G2d55@chi-expr (G2d4f@chi-global-macro G3d16@value G3cfa@e) G3cfb@r G3cfc@mr) (if (memv G3d1b@t '(local-macro!)) (G2d55@chi-expr (G2d4d@chi-local-macro G3d16@value G3cfa@e) G3cfb@r G3cfc@mr) (if (memv G3d1b@t '(mutable)) (G2e1c@syntax-violation '#f '"attempt to assign to an unexportable variable" G3cfa@e) (G2e1c@syntax-violation '#f '"invalid syntax" G3cfa@e)))))))) G3d17@type)) G3d11@G3d0e G3d10@G3d0d G3d0f@G3d0c)))) G3d02@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3d00@t))) (G2d31@syntax-dispatch G3d00@t '(_ any any)))) G3cfa@e))) (set! G2d59@verify-formals (lambda (G3d1d@fmls G3d1e@stx) ((lambda (G3d21@t) ((lambda (G3d23@ls/false) (if G3d23@ls/false (apply (lambda (G3d25@x*) (if (not (G2b4a@valid-bound-ids? G3d25@x*)) (G2ceb@invalid-fmls-error G3d1e@stx G3d1d@fmls) (void))) G3d23@ls/false) ((lambda (G3d27@t) ((lambda (G3d29@ls/false) (if G3d29@ls/false (apply (lambda (G3d2b@x* G3d2c@x) (if (not (G2b4a@valid-bound-ids? (cons G3d2c@x G3d2b@x*))) (G2ceb@invalid-fmls-error G3d1e@stx G3d1d@fmls) (void))) G3d29@ls/false) ((lambda (G3d2f@t) ((lambda (G3d31@ls/false) (if G3d31@ls/false (apply (lambda () (G2e1c@syntax-violation '#f '"invalid syntax" G3d1e@stx)) G3d31@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3d2f@t))) (G2d31@syntax-dispatch G3d2f@t '_))) G3d27@t))) (G2d31@syntax-dispatch G3d27@t '#(each+ any () any)))) G3d21@t))) (G2d31@syntax-dispatch G3d21@t 'each-any))) G3d1d@fmls))) (set! G2d5b@chi-lambda-clause (lambda (G3d33@stx G3d34@fmls G3d35@body* G3d36@r G3d37@mr) ((lambda (G3d3d@t) ((lambda (G3d3f@ls/false) (if G3d3f@ls/false (apply (lambda (G3d41@x*) (begin (G2d59@verify-formals G3d34@fmls G3d33@stx) ((lambda (G3d43@lex* G3d44@lab*) (values G3d43@lex* (G2d6b@chi-internal (G2b2c@add-subst (G2afb@make-full-rib G3d41@x* G3d44@lab*) G3d35@body*) (G2cc5@add-lexicals G3d44@lab* G3d43@lex* G3d36@r) G3d37@mr))) (map G2ac0@gen-lexical G3d41@x*) (map G2ac4@gen-label G3d41@x*)))) G3d3f@ls/false) ((lambda (G3d47@t) ((lambda (G3d49@ls/false) (if G3d49@ls/false (apply (lambda (G3d4b@x* G3d4c@x) (begin (G2d59@verify-formals G3d34@fmls G3d33@stx) ((lambda (G3d4f@lex* G3d50@lab* G3d51@lex G3d52@lab) (values (append G3d4f@lex* G3d51@lex) (G2d6b@chi-internal (G2b2c@add-subst (G2afb@make-full-rib (cons G3d4c@x G3d4b@x*) (cons G3d52@lab G3d50@lab*)) G3d35@body*) (G2cc5@add-lexicals (cons G3d52@lab G3d50@lab*) (cons G3d51@lex G3d4f@lex*) G3d36@r) G3d37@mr))) (map G2ac0@gen-lexical G3d4b@x*) (map G2ac4@gen-label G3d4b@x*) (G2ac0@gen-lexical G3d4c@x) (G2ac4@gen-label G3d4c@x)))) G3d49@ls/false) ((lambda (G3d57@t) ((lambda (G3d59@ls/false) (if G3d59@ls/false (apply (lambda () (G2e1c@syntax-violation '#f '"invalid syntax" G3d34@fmls)) G3d59@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3d57@t))) (G2d31@syntax-dispatch G3d57@t '_))) G3d47@t))) (G2d31@syntax-dispatch G3d47@t '#(each+ any () any)))) G3d3d@t))) (G2d31@syntax-dispatch G3d3d@t 'each-any))) G3d34@fmls))) (set! G2d5d@chi-lambda-clause* (lambda (G3d5b@stx G3d5c@fmls* G3d5d@body** G3d5e@r G3d5f@mr) (if (null? G3d5c@fmls*) (values '() '()) (call-with-values (lambda () (G2d5b@chi-lambda-clause G3d5b@stx (car G3d5c@fmls*) (car G3d5d@body**) G3d5e@r G3d5f@mr)) (lambda (G3d67@G3d65 G3d68@G3d66) ((lambda (G3d6b@b G3d6c@a) (call-with-values (lambda () (G2d5d@chi-lambda-clause* G3d5b@stx (cdr G3d5c@fmls*) (cdr G3d5d@body**) G3d5e@r G3d5f@mr)) (lambda (G3d71@G3d6f G3d72@G3d70) ((lambda (G3d75@b* G3d76@a*) (values (cons G3d6c@a G3d76@a*) (cons G3d6b@b G3d75@b*))) G3d72@G3d70 G3d71@G3d6f)))) G3d68@G3d66 G3d67@G3d65)))))) (set! G2d5f@chi-defun (lambda (G3d79@x G3d7a@r G3d7b@mr) ((lambda (G3d7f@fmls G3d80@body*) (call-with-values (lambda () (G2d5b@chi-lambda-clause G3d7f@fmls G3d7f@fmls G3d80@body* G3d7a@r G3d7b@mr)) (lambda (G3d85@G3d83 G3d86@G3d84) ((lambda (G3d89@body G3d8a@fmls) (G2a9e@G29e0@build-lambda '#f G3d8a@fmls G3d89@body)) G3d86@G3d84 G3d85@G3d83)))) (car G3d79@x) (cdr G3d79@x)))) (set! G2d61@chi-rhs (lambda (G3d8d@rhs G3d8e@r G3d8f@mr) ((lambda (G3d93@t) (if (memv G3d93@t '(defun)) (G2d5f@chi-defun (cdr G3d8d@rhs) G3d8e@r G3d8f@mr) (if (memv G3d93@t '(expr)) ((lambda (G3d95@expr) (G2d55@chi-expr G3d95@expr G3d8e@r G3d8f@mr)) (cdr G3d8d@rhs)) (if (memv G3d93@t '(top-expr)) ((lambda (G3d97@expr) (G2aa1@G2a12@build-sequence '#f (list (G2d55@chi-expr G3d97@expr G3d8e@r G3d8f@mr) (G2aa2@G2a14@build-void)))) (cdr G3d8d@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3d8d@rhs))))) (car G3d8d@rhs)))) (set! G2d63@expand-interaction-rhs*/init* (lambda (G3d99@lhs* G3d9a@rhs* G3d9b@init* G3d9c@r G3d9d@mr) ((letrec ((G3da3@f (lambda (G3da5@lhs* G3da6@rhs*) (if (null? G3da5@lhs*) (map (lambda (G3da9@x) (G2d55@chi-expr G3da9@x G3d9c@r G3d9d@mr)) G3d9b@init*) ((lambda (G3dab@lhs G3dac@rhs) ((lambda (G3daf@t) (if (memv G3daf@t '(defun)) ((lambda (G3db1@rhs) (cons (list 'set! G3dab@lhs G3db1@rhs) (G3da3@f (cdr G3da5@lhs*) (cdr G3da6@rhs*)))) (G2d5f@chi-defun (cdr G3dac@rhs) G3d9c@r G3d9d@mr)) (if (memv G3daf@t '(expr)) ((lambda (G3db3@rhs) (cons (list 'set! G3dab@lhs G3db3@rhs) (G3da3@f (cdr G3da5@lhs*) (cdr G3da6@rhs*)))) (G2d55@chi-expr (cdr G3dac@rhs) G3d9c@r G3d9d@mr)) (if (memv G3daf@t '(top-expr)) ((lambda (G3db5@e) (cons G3db5@e (G3da3@f (cdr G3da5@lhs*) (cdr G3da6@rhs*)))) (G2d55@chi-expr (cdr G3dac@rhs) G3d9c@r G3d9d@mr)) (error 'expand-interaction '"invallid" G3dac@rhs))))) (car G3dac@rhs))) (car G3da5@lhs*) (car G3da6@rhs*)))))) G3da3@f) G3d99@lhs* G3d9a@rhs*))) (set! G2d65@chi-rhs* (lambda (G3db7@rhs* G3db8@r G3db9@mr) ((letrec ((G3dbd@f (lambda (G3dbf@ls) (if (null? G3dbf@ls) '() ((lambda (G3dc1@a) (cons G3dc1@a (G3dbd@f (cdr G3dbf@ls)))) (G2d61@chi-rhs (car G3dbf@ls) G3db8@r G3db9@mr)))))) G3dbd@f) G3db7@rhs*))) (set! G2d67@find-bound=? (lambda (G3dc3@x G3dc4@lhs* G3dc5@rhs*) (if (null? G3dc4@lhs*) '#f (if (G2b46@bound-id=? G3dc3@x (car G3dc4@lhs*)) (car G3dc5@rhs*) (G2d67@find-bound=? G3dc3@x (cdr G3dc4@lhs*) (cdr G3dc5@rhs*)))))) (set! G2d69@find-dups (lambda (G3dc9@ls) ((letrec ((G3dcb@f (lambda (G3dcd@ls G3dce@dups) (if (null? G3dcd@ls) G3dce@dups ((lambda (G3dd1@t) (if G3dd1@t ((lambda (G3dd3@x) (G3dcb@f (cdr G3dcd@ls) (cons (list (car G3dcd@ls) G3dd3@x) G3dce@dups))) G3dd1@t) (G3dcb@f (cdr G3dcd@ls) G3dce@dups))) (G2d67@find-bound=? (car G3dcd@ls) (cdr G3dcd@ls) (cdr G3dcd@ls))))))) G3dcb@f) G3dc9@ls '()))) (set! G2d6b@chi-internal (lambda (G3dd5@e* G3dd6@r G3dd7@mr) ((lambda (G3ddb@rib) (call-with-values (lambda () (G2d8e@chi-body* (map (lambda (G3de5@x) (G2b2c@add-subst G3ddb@rib G3de5@x)) (G2b3e@syntax->list G3dd5@e*)) G3dd6@r G3dd7@mr '() '() '() '() '() G3ddb@rib '#f)) (lambda (G3de7@G3ddd G3de8@G3dde G3de9@G3ddf G3dea@G3de0 G3deb@G3de1 G3dec@G3de2 G3ded@G3de3 G3dee@G3de4) ((lambda (G3df7@_exp* G3df8@kwd* G3df9@mod** G3dfa@rhs* G3dfb@lex* G3dfc@mr G3dfd@r G3dfe@e*) (begin (if (null? G3dfe@e*) (G2e1c@syntax-violation '#f '"no expression in body" G3dfe@e*) (void)) ((lambda (G3e07@init*) ((lambda (G3e09@rhs*) ((lambda () (G2aa4@G2a18@build-letrec* '#f (reverse G3dfb@lex*) (reverse G3e09@rhs*) (G2aa1@G2a12@build-sequence '#f G3e07@init*))))) (G2d65@chi-rhs* G3dfa@rhs* G3dfd@r G3dfc@mr))) (G2d51@chi-expr* (append (apply append (reverse G3df9@mod**)) G3dfe@e*) G3dfd@r G3dfc@mr)))) G3dee@G3de4 G3ded@G3de3 G3dec@G3de2 G3deb@G3de1 G3dea@G3de0 G3de9@G3ddf G3de8@G3dde G3de7@G3ddd)))) (G2aef@make-empty-rib)))) (set! G2d6d@parse-module (lambda (G3e0b@e) ((lambda (G3e0d@t) ((lambda (G3e0f@ls/false) (if G3e0f@ls/false (apply (lambda (G3e11@export* G3e12@b*) (begin (if (not (for-all G2b40@id? G3e11@export*)) (G2e1c@syntax-violation '#f '"module exports must be identifiers" G3e0b@e) (void)) (values '#f (list->vector G3e11@export*) G3e12@b*))) G3e0f@ls/false) ((lambda (G3e15@t) ((lambda (G3e17@ls/false) (if G3e17@ls/false (apply (lambda (G3e19@name G3e1a@export* G3e1b@b*) (begin (if (not (G2b40@id? G3e19@name)) (G2e1c@syntax-violation '#f '"module name must be an identifier" G3e0b@e) (void)) (if (not (for-all G2b40@id? G3e1a@export*)) (G2e1c@syntax-violation '#f '"module exports must be identifiers" G3e0b@e) (void)) (values G3e19@name (list->vector G3e1a@export*) G3e1b@b*))) G3e17@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3e15@t))) (G2d31@syntax-dispatch G3e15@t '(_ any each-any . each-any)))) G3e0d@t))) (G2d31@syntax-dispatch G3e0d@t '(_ each-any . each-any)))) G3e0b@e))) (set! G2d73@G2d6e (make-record-type-descriptor 'module-interface '#f 'G2d71 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2d75@G2d70 '#f) (set! G2d77@G2d6f (make-record-constructor-descriptor G2d73@G2d6e '#f G2d75@G2d70)) (set! G2d7a@module-interface? (record-predicate G2d73@G2d6e)) (set! G2d7c@make-module-interface (record-constructor G2d77@G2d6f)) (set! G2d7e@module-interface-first-mark (record-accessor G2d73@G2d6e '0)) (set! G2d80@module-interface-exp-id-vec (record-accessor G2d73@G2d6e '1)) (set! G2d82@module-interface-exp-lab-vec (record-accessor G2d73@G2d6e '2)) (set! G2d84@set-module-interface-first-mark! (record-mutator G2d73@G2d6e '0)) (set! G2d86@set-module-interface-exp-id-vec! (record-mutator G2d73@G2d6e '1)) (set! G2d88@set-module-interface-exp-lab-vec! (record-mutator G2d73@G2d6e '2)) (set! G2d8a@module-interface-exp-id* (lambda (G3e1f@iface G3e20@id) ((lambda (G3e24@diff-marks) (begin (set! G3e24@diff-marks (lambda (G3e2b@ls G3e2c@x) (begin (if (null? G3e2b@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G3e2f@a) (if (eq? G3e2f@a G3e2c@x) '() (cons G3e2f@a (G3e24@diff-marks (cdr G3e2b@ls) G3e2c@x)))) (car G3e2b@ls))))) ((lambda (G3e25@diff G3e26@id-vec) (if (null? G3e25@diff) G3e26@id-vec (vector-map (lambda (G3e29@x) (G2b0a@make-stx (G2b0c@stx-expr G3e29@x) (append G3e25@diff (G2b0e@stx-mark* G3e29@x)) '() '())) G3e26@id-vec))) (G3e24@diff-marks (G2b0e@stx-mark* G3e20@id) (G2d7e@module-interface-first-mark G3e1f@iface)) (G2d80@module-interface-exp-id-vec G3e1f@iface)))) '#f))) (set! G2d8c@chi-internal-module (lambda (G3e31@e G3e32@r G3e33@mr G3e34@lex* G3e35@rhs* G3e36@mod** G3e37@kwd*) (call-with-values (lambda () (G2d6d@parse-module G3e31@e)) (lambda (G3e42@G3e3f G3e43@G3e40 G3e44@G3e41) ((lambda (G3e48@e* G3e49@exp-id* G3e4a@name) ((lambda (G3e4e@rib) ((lambda (G3e50@e*) ((lambda () (call-with-values (lambda () (G2d8e@chi-body* G3e50@e* G3e32@r G3e33@mr G3e34@lex* G3e35@rhs* G3e36@mod** G3e37@kwd* '() G3e4e@rib '#f)) (lambda (G3e5a@G3e52 G3e5b@G3e53 G3e5c@G3e54 G3e5d@G3e55 G3e5e@G3e56 G3e5f@G3e57 G3e60@G3e58 G3e61@G3e59) ((lambda (G3e6a@_exp* G3e6b@kwd* G3e6c@mod** G3e6d@rhs* G3e6e@lex* G3e6f@mr G3e70@r G3e71@e*) ((lambda (G3e7a@exp-lab* G3e7b@mod**) (if (not G3e4a@name) (values G3e6e@lex* G3e6d@rhs* G3e49@exp-id* G3e7a@exp-lab* G3e70@r G3e6f@mr G3e7b@mod** G3e6b@kwd*) ((lambda (G3e7e@lab G3e7f@iface) (values G3e6e@lex* G3e6d@rhs* (vector G3e4a@name) (vector G3e7e@lab) (cons (cons G3e7e@lab (cons '$module G3e7f@iface)) G3e70@r) (cons (cons G3e7e@lab (cons '$module G3e7f@iface)) G3e6f@mr) G3e7b@mod** G3e6b@kwd*)) (G2ac4@gen-label 'module) (G2d7c@make-module-interface (car (G2b0e@stx-mark* G3e4a@name)) (vector-map (lambda (G3e82@x) (G2b0a@make-stx (G2b0c@stx-expr G3e82@x) (G2b0e@stx-mark* G3e82@x) '() '())) G3e49@exp-id*) G3e7a@exp-lab*)))) (vector-map (lambda (G3e84@x) (or (G2b5a@id->label (G2b0a@make-stx (G2b42@id->sym G3e84@x) (G2b0e@stx-mark* G3e84@x) (list G3e4e@rib) '())) (G2e1c@syntax-violation '#f '"cannot find module export" G3e84@x))) G3e49@exp-id*) (cons G3e71@e* G3e6c@mod**))) G3e61@G3e59 G3e60@G3e58 G3e5f@G3e57 G3e5e@G3e56 G3e5d@G3e55 G3e5c@G3e54 G3e5b@G3e53 G3e5a@G3e52)))))) (map (lambda (G3e86@x) (G2b2c@add-subst G3e4e@rib G3e86@x)) (G2b3e@syntax->list G3e48@e*)))) (G2aef@make-empty-rib))) G3e44@G3e41 G3e43@G3e40 G3e42@G3e3f))))) (set! G2d8e@chi-body* (lambda (G3e88@e* G3e89@r G3e8a@mr G3e8b@lex* G3e8c@rhs* G3e8d@mod** G3e8e@kwd* G3e8f@exp* G3e90@rib G3e91@top?) (if (null? G3e88@e*) (values G3e88@e* G3e89@r G3e8a@mr G3e8b@lex* G3e8c@rhs* G3e8d@mod** G3e8e@kwd* G3e8f@exp*) ((lambda (G3e9c@e) (call-with-values (lambda () (G2b68@syntax-type G3e9c@e G3e89@r)) (lambda (G3ea1@G3e9e G3ea2@G3e9f G3ea3@G3ea0) ((lambda (G3ea7@kwd G3ea8@value G3ea9@type) ((lambda (G3ead@kwd*) ((lambda (G3eaf@t) (if (memv G3eaf@t '(define)) (call-with-values (lambda () (G2cb5@parse-define G3e9c@e)) (lambda (G3eb3@G3eb1 G3eb4@G3eb2) ((lambda (G3eb7@rhs G3eb8@id) (begin (if (G2b4e@bound-id-member? G3eb8@id G3ead@kwd*) (G2e1c@syntax-violation '#f '"cannot redefine keyword" G3e9c@e) (void)) (call-with-values (lambda () (G2ac8@gen-define-label+loc G3eb8@id G3e90@rib)) (lambda (G3ebd@G3ebb G3ebe@G3ebc) ((lambda (G3ec1@lex G3ec2@lab) (begin (G2af1@extend-rib! G3e90@rib G3eb8@id G3ec2@lab) (G2d8e@chi-body* (cdr G3e88@e*) (G2cc3@add-lexical G3ec2@lab G3ec1@lex G3e89@r) G3e8a@mr (cons G3ec1@lex G3e8b@lex*) (cons G3eb7@rhs G3e8c@rhs*) G3e8d@mod** G3ead@kwd* G3e8f@exp* G3e90@rib G3e91@top?))) G3ebe@G3ebc G3ebd@G3ebb))))) G3eb4@G3eb2 G3eb3@G3eb1))) (if (memv G3eaf@t '(define-syntax)) (call-with-values (lambda () (G2cb7@parse-define-syntax G3e9c@e)) (lambda (G3ec7@G3ec5 G3ec8@G3ec6) ((lambda (G3ecb@rhs G3ecc@id) (begin (if (G2b4e@bound-id-member? G3ecc@id G3ead@kwd*) (G2e1c@syntax-violation '#f '"cannot redefine keyword" G3e9c@e) (void)) ((lambda (G3ecf@lab G3ed0@expanded-rhs) (begin (G2af1@extend-rib! G3e90@rib G3ecc@id G3ecf@lab) ((lambda (G3ed3@b) (G2d8e@chi-body* (cdr G3e88@e*) (cons (cons G3ecf@lab G3ed3@b) G3e89@r) (cons (cons G3ecf@lab G3ed3@b) G3e8a@mr) G3e8b@lex* G3e8c@rhs* G3e8d@mod** G3ead@kwd* G3e8f@exp* G3e90@rib G3e91@top?)) (G2b7e@make-eval-transformer G3ed0@expanded-rhs)))) (G2aca@gen-define-label G3ecc@id G3e90@rib) (G2d90@expand-transformer G3ecb@rhs G3e8a@mr)))) G3ec8@G3ec6 G3ec7@G3ec5))) (if (memv G3eaf@t '(let-syntax letrec-syntax)) ((lambda (G3ed5@t) ((lambda (G3ed7@ls/false) (if (and G3ed7@ls/false (apply (lambda (G3ed9@xlhs* G3eda@xrhs* G3edb@xbody*) (if (not (G2b4a@valid-bound-ids? G3ed9@xlhs*)) (G2e1c@syntax-violation '#f '"invalid identifiers" G3e9c@e) (void))) G3ed7@ls/false)) (apply (lambda (G3edf@xlhs* G3ee0@xrhs* G3ee1@xbody*) ((lambda (G3ee5@xlab*) ((lambda (G3ee7@xrib) ((lambda (G3ee9@xb*) ((lambda () (G2d8e@chi-body* (append (map (lambda (G3eeb@x) (G2b2c@add-subst G3ee7@xrib G3eeb@x)) G3ee1@xbody*) (cdr G3e88@e*)) (append (map cons G3ee5@xlab* G3ee9@xb*) G3e89@r) (append (map cons G3ee5@xlab* G3ee9@xb*) G3e8a@mr) G3e8b@lex* G3e8c@rhs* G3e8d@mod** G3ead@kwd* G3e8f@exp* G3e90@rib G3e91@top?)))) (map (lambda (G3eed@x) (G2b7e@make-eval-transformer (G2d90@expand-transformer (if (eq? G3ea9@type 'let-syntax) G3eed@x (G2b2c@add-subst G3ee7@xrib G3eed@x)) G3e8a@mr))) G3ee0@xrhs*))) (G2afb@make-full-rib G3edf@xlhs* G3ee5@xlab*))) (map G2ac4@gen-label G3edf@xlhs*))) G3ed7@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3ed5@t))) (G2d31@syntax-dispatch G3ed5@t '(_ #(each (any any)) . each-any)))) G3e9c@e) (if (memv G3eaf@t '(begin)) ((lambda (G3eef@t) ((lambda (G3ef1@ls/false) (if G3ef1@ls/false (apply (lambda (G3ef3@x*) (G2d8e@chi-body* (append G3ef3@x* (cdr G3e88@e*)) G3e89@r G3e8a@mr G3e8b@lex* G3e8c@rhs* G3e8d@mod** G3ead@kwd* G3e8f@exp* G3e90@rib G3e91@top?)) G3ef1@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3eef@t))) (G2d31@syntax-dispatch G3eef@t '(_ . each-any)))) G3e9c@e) (if (memv G3eaf@t '(global-macro global-macro!)) (G2d8e@chi-body* (cons (G2b2c@add-subst G3e90@rib (G2d4f@chi-global-macro G3ea8@value G3e9c@e)) (cdr G3e88@e*)) G3e89@r G3e8a@mr G3e8b@lex* G3e8c@rhs* G3e8d@mod** G3ead@kwd* G3e8f@exp* G3e90@rib G3e91@top?) (if (memv G3eaf@t '(local-macro local-macro!)) (G2d8e@chi-body* (cons (G2b2c@add-subst G3e90@rib (G2d4d@chi-local-macro G3ea8@value G3e9c@e)) (cdr G3e88@e*)) G3e89@r G3e8a@mr G3e8b@lex* G3e8c@rhs* G3e8d@mod** G3ead@kwd* G3e8f@exp* G3e90@rib G3e91@top?) (if (memv G3eaf@t '(macro macro!)) (G2d8e@chi-body* (cons (G2b2c@add-subst G3e90@rib (G2d4b@chi-macro G3ea8@value G3e9c@e)) (cdr G3e88@e*)) G3e89@r G3e8a@mr G3e8b@lex* G3e8c@rhs* G3e8d@mod** G3ead@kwd* G3e8f@exp* G3e90@rib G3e91@top?) (if (memv G3eaf@t '(module)) (call-with-values (lambda () (G2d8c@chi-internal-module G3e9c@e G3e89@r G3e8a@mr G3e8b@lex* G3e8c@rhs* G3e8d@mod** G3ead@kwd*)) (lambda (G3efd@G3ef5 G3efe@G3ef6 G3eff@G3ef7 G3f00@G3ef8 G3f01@G3ef9 G3f02@G3efa G3f03@G3efb G3f04@G3efc) ((lambda (G3f0d@kwd* G3f0e@mod** G3f0f@mr G3f10@r G3f11@m-exp-lab* G3f12@m-exp-id* G3f13@rhs* G3f14@lex*) (begin (vector-for-each (lambda (G3f1d@id G3f1e@lab) (G2af1@extend-rib! G3e90@rib G3f1d@id G3f1e@lab)) G3f12@m-exp-id* G3f11@m-exp-lab*) (G2d8e@chi-body* (cdr G3e88@e*) G3f10@r G3f0f@mr G3f14@lex* G3f13@rhs* G3f0e@mod** G3f0d@kwd* G3e8f@exp* G3e90@rib G3e91@top?))) G3f04@G3efc G3f03@G3efb G3f02@G3efa G3f01@G3ef9 G3f00@G3ef8 G3eff@G3ef7 G3efe@G3ef6 G3efd@G3ef5))) (if (memv G3eaf@t '(library)) (begin (G2dfe@library-expander (G2b56@stx->datum G3e9c@e)) (G2d8e@chi-body* (cdr G3e88@e*) G3e89@r G3e8a@mr G3e8b@lex* G3e8c@rhs* G3e8d@mod** G3ead@kwd* G3e8f@exp* G3e90@rib G3e91@top?)) (if (memv G3eaf@t '(export)) ((lambda (G3f21@t) ((lambda (G3f23@ls/false) (if G3f23@ls/false (apply (lambda (G3f25@exp-decl*) (G2d8e@chi-body* (cdr G3e88@e*) G3e89@r G3e8a@mr G3e8b@lex* G3e8c@rhs* G3e8d@mod** G3ead@kwd* (append G3f25@exp-decl* G3e8f@exp*) G3e90@rib G3e91@top?)) G3f23@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3f21@t))) (G2d31@syntax-dispatch G3f21@t '(_ . each-any)))) G3e9c@e) (if (memv G3eaf@t '(import)) ((lambda () ((lambda (G3f28@module-import? G3f2a@module-import G3f2c@library-import) (begin (set! G3f28@module-import? (lambda (G3f74@e) ((lambda (G3f76@t) ((lambda (G3f78@ls/false) (if (and G3f78@ls/false (apply (lambda (G3f7a@id) (G2b40@id? G3f7a@id)) G3f78@ls/false)) (apply (lambda (G3f7c@id) '#t) G3f78@ls/false) ((lambda (G3f7e@t) ((lambda (G3f80@ls/false) (if G3f80@ls/false (apply (lambda (G3f82@imp*) '#f) G3f80@ls/false) ((lambda (G3f84@t) ((lambda (G3f86@ls/false) (if G3f86@ls/false (apply (lambda () (G2e1c@syntax-violation '#f '"malformed import form" G3f74@e)) G3f86@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3f84@t))) (G2d31@syntax-dispatch G3f84@t '_))) G3f7e@t))) (G2d31@syntax-dispatch G3f7e@t '(_ . each-any)))) G3f76@t))) (G2d31@syntax-dispatch G3f76@t '(_ any)))) G3f74@e))) (set! G3f2a@module-import (lambda (G3f55@e G3f56@r) ((lambda (G3f59@t) ((lambda (G3f5b@ls/false) (if (and G3f5b@ls/false (apply (lambda (G3f5d@id) (G2b40@id? G3f5d@id)) G3f5b@ls/false)) (apply (lambda (G3f5f@id) (call-with-values (lambda () (G2b68@syntax-type G3f5f@id G3f56@r)) (lambda (G3f64@G3f61 G3f65@G3f62 G3f66@G3f63) ((lambda (G3f6a@kwd G3f6b@value G3f6c@type) ((lambda (G3f70@t) (if (memv G3f70@t '($module)) ((lambda (G3f72@iface) (values (G2d8a@module-interface-exp-id* G3f72@iface G3f5f@id) (G2d82@module-interface-exp-lab-vec G3f72@iface))) G3f6b@value) (G2e1c@syntax-violation '#f '"invalid import" G3f55@e))) G3f6c@type)) G3f66@G3f63 G3f65@G3f62 G3f64@G3f61)))) G3f5b@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3f59@t))) (G2d31@syntax-dispatch G3f59@t '(_ any)))) G3f55@e))) (set! G3f2c@library-import (lambda (G3f3b@e) ((lambda (G3f3d@t) ((lambda (G3f3f@ls/false) (if G3f3f@ls/false (apply (lambda (G3f41@ctxt G3f42@imp*) (call-with-values (lambda () (G2d98@parse-import-spec* (G2e22@syntax->datum G3f42@imp*))) (lambda (G3f47@G3f45 G3f48@G3f46) ((lambda (G3f4b@subst-labels G3f4c@subst-names) (values (vector-map (lambda (G3f4f@name) (G2b1e@datum->stx G3f41@ctxt G3f4f@name)) G3f4c@subst-names) G3f4b@subst-labels)) G3f48@G3f46 G3f47@G3f45)))) G3f3f@ls/false) ((lambda (G3f51@t) ((lambda (G3f53@ls/false) (if G3f53@ls/false (apply (lambda () (G2e1c@syntax-violation '#f '"invalid import form" G3f3b@e)) G3f53@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3f51@t))) (G2d31@syntax-dispatch G3f51@t '_))) G3f3d@t))) (G2d31@syntax-dispatch G3f3d@t '(any . each-any)))) G3f3b@e))) (begin (call-with-values (lambda () (if (G3f28@module-import? G3e9c@e) (G3f2a@module-import G3e9c@e G3e89@r) (G3f2c@library-import G3e9c@e))) (lambda (G3f2f@G3f2d G3f30@G3f2e) ((lambda (G3f33@lab* G3f34@id*) (vector-for-each (lambda (G3f37@id G3f38@lab) (G2af1@extend-rib! G3e90@rib G3f37@id G3f38@lab)) G3f34@id* G3f33@lab*)) G3f30@G3f2e G3f2f@G3f2d))) (G2d8e@chi-body* (cdr G3e88@e*) G3e89@r G3e8a@mr G3e8b@lex* G3e8c@rhs* G3e8d@mod** G3ead@kwd* G3e8f@exp* G3e90@rib G3e91@top?)))) '#f '#f '#f))) (if G3e91@top? (G2d8e@chi-body* (cdr G3e88@e*) G3e89@r G3e8a@mr (cons (G2ac0@gen-lexical 'dummy) G3e8b@lex*) (cons (cons 'top-expr G3e9c@e) G3e8c@rhs*) G3e8d@mod** G3ead@kwd* G3e8f@exp* G3e90@rib G3e91@top?) (values G3e88@e* G3e89@r G3e8a@mr G3e8b@lex* G3e8c@rhs* G3e8d@mod** G3ead@kwd* G3e8f@exp*)))))))))))))) G3ea9@type)) (if (G2b40@id? G3ea7@kwd) (cons G3ea7@kwd G3e8e@kwd*) G3e8e@kwd*))) G3ea3@G3ea0 G3ea2@G3e9f G3ea1@G3e9e)))) (car G3e88@e*))))) (set! G2d90@expand-transformer (lambda (G3f88@expr G3f89@r) ((lambda (G3f8c@rtc) ((lambda (G3f8e@expanded-rhs) (begin (for-each ((lambda (G3f90@mark-visit) (lambda (G3f92@x) (begin (G2968@G280f@invoke-library G3f92@x) (G3f90@mark-visit G3f92@x)))) (G2da0@vis-collector)) (G3f8c@rtc)) G3f8e@expanded-rhs)) ((lambda (G3f98@G3f94 G3f99@G3f95 G3f9a@G3f96 G3f9b@G3f97) ((lambda (G3fa0@swap) (dynamic-wind G3fa0@swap (lambda () (G2d55@chi-expr G3f88@expr G3f89@r G3f89@r)) G3fa0@swap)) (lambda () (begin ((lambda (G3fa2@t) (begin (G3f98@G3f94 G3f9a@G3f96) (set! G3f9a@G3f96 G3fa2@t))) (G3f98@G3f94)) ((lambda (G3fa4@t) (begin (G3f99@G3f95 G3f9b@G3f97) (set! G3f9b@G3f97 G3fa4@t))) (G3f99@G3f95)))))) G2d9e@inv-collector G2da0@vis-collector G3f8c@rtc (lambda (G3fa6@x) (values))))) (G2d9c@make-collector)))) (set! G2d92@parse-exports (lambda (G3fa8@exp*) ((letrec ((G3faa@f (lambda (G3fac@exp* G3fad@int* G3fae@ext*) (if (null? G3fac@exp*) (begin (if (not (G2b4a@valid-bound-ids? G3fae@ext*)) (G2e1c@syntax-violation 'export '"invalid exports" (G2d69@find-dups G3fae@ext*)) (void)) (values (map G2e22@syntax->datum G3fae@ext*) G3fad@int*)) ((lambda (G3fb2@t) ((lambda (G3fb4@ls/false) (if G3fb4@ls/false (apply (lambda (G3fb6@rename G3fb7@i* G3fb8@e*) (begin (if (not (and (eq? (G2e22@syntax->datum G3fb6@rename) 'rename) (for-all G2b40@id? G3fb7@i*) (for-all G2b40@id? G3fb8@e*))) (G2e1c@syntax-violation 'export '"invalid export specifier" (car G3fac@exp*)) (void)) (G3faa@f (cdr G3fac@exp*) (append G3fb7@i* G3fad@int*) (append G3fb8@e* G3fae@ext*)))) G3fb4@ls/false) ((lambda (G3fbc@t) ((lambda (G3fbe@ls/false) (if G3fbe@ls/false (apply (lambda (G3fc0@ie) (begin (if (not (G2b40@id? G3fc0@ie)) (G2e1c@syntax-violation 'export '"invalid export" G3fc0@ie) (void)) (G3faa@f (cdr G3fac@exp*) (cons G3fc0@ie G3fad@int*) (cons G3fc0@ie G3fae@ext*)))) G3fbe@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3fbc@t))) (G2d31@syntax-dispatch G3fbc@t 'any))) G3fb2@t))) (G2d31@syntax-dispatch G3fb2@t '(any . #(each (any any)))))) (car G3fac@exp*)))))) G3faa@f) G3fa8@exp* '() '()))) (set! G2d94@parse-library-name (lambda (G3fc2@spec) ((lambda (G3fc5@parse) (begin (set! G3fc5@parse (lambda (G3fd0@x) ((lambda (G3fd2@t) ((lambda (G3fd4@ls/false) (if (and G3fd4@ls/false (apply (lambda (G3fd6@v*) (for-all (lambda (G3fd8@x) ((lambda (G3fda@x) (and (integer? G3fda@x) (exact? G3fda@x))) (G2e22@syntax->datum G3fd8@x))) G3fd6@v*)) G3fd4@ls/false)) (apply (lambda (G3fdc@v*) (values '() (map G2e22@syntax->datum G3fdc@v*))) G3fd4@ls/false) ((lambda (G3fde@t) ((lambda (G3fe0@ls/false) (if (and G3fe0@ls/false (apply (lambda (G3fe2@x G3fe3@rest) (symbol? (G2e22@syntax->datum G3fe2@x))) G3fe0@ls/false)) (apply (lambda (G3fe6@x G3fe7@rest) (call-with-values (lambda () (G3fc5@parse G3fe7@rest)) (lambda (G3fec@G3fea G3fed@G3feb) ((lambda (G3ff0@v* G3ff1@x*) (values (cons (G2e22@syntax->datum G3fe6@x) G3ff1@x*) G3ff0@v*)) G3fed@G3feb G3fec@G3fea)))) G3fe0@ls/false) ((lambda (G3ff4@t) ((lambda (G3ff6@ls/false) (if G3ff6@ls/false (apply (lambda () (values '() '())) G3ff6@ls/false) ((lambda (G3ff8@t) ((lambda (G3ffa@ls/false) (if G3ffa@ls/false (apply (lambda () (G2e1c@syntax-violation '#f '"invalid library name" G3fc2@spec)) G3ffa@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G3ff8@t))) (G2d31@syntax-dispatch G3ff8@t '_))) G3ff4@t))) (G2d31@syntax-dispatch G3ff4@t '()))) G3fde@t))) (G2d31@syntax-dispatch G3fde@t '(any . any)))) G3fd2@t))) (G2d31@syntax-dispatch G3fd2@t '(each-any)))) G3fd0@x))) (call-with-values (lambda () (G3fc5@parse G3fc2@spec)) (lambda (G3fc8@G3fc6 G3fc9@G3fc7) ((lambda (G3fcc@ver* G3fcd@name*) (begin (if (null? G3fcd@name*) (G2e1c@syntax-violation '#f '"empty library name" G3fc2@spec) (void)) (values G3fcd@name* G3fcc@ver*))) G3fc9@G3fc7 G3fc8@G3fc6))))) '#f))) (set! G2d96@parse-library (lambda (G3ffc@e) ((lambda (G3ffe@t) ((lambda (G4000@ls/false) (if (and G4000@ls/false (apply (lambda (G4002@library G4003@name* G4004@export G4005@exp* G4006@import G4007@imp* G4008@b*) (and (eq? (G2e22@syntax->datum G4004@export) 'export) (eq? (G2e22@syntax->datum G4006@import) 'import) (eq? (G2e22@syntax->datum G4002@library) 'library))) G4000@ls/false)) (apply (lambda (G4010@library G4011@name* G4012@export G4013@exp* G4014@import G4015@imp* G4016@b*) (values G4011@name* G4013@exp* G4015@imp* G4016@b*)) G4000@ls/false) ((lambda (G401e@t) ((lambda (G4020@ls/false) (if G4020@ls/false (apply (lambda () (G2e1c@syntax-violation '#f '"malformed library" G3ffc@e)) G4020@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G401e@t))) (G2d31@syntax-dispatch G401e@t '_))) G3ffe@t))) (G2d31@syntax-dispatch G3ffe@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G3ffc@e))) (set! G2d98@parse-import-spec* ((lambda () ((lambda (G4023@idsyn? G4025@dup-error G4027@merge-substs G4029@exclude* G402b@find* G402d@rem* G402f@remove-dups G4031@parse-library-name G4033@import-library G4035@get-import G4037@add-imports!) (begin (set! G4023@idsyn? (lambda (G4222@x) (symbol? (G2e22@syntax->datum G4222@x)))) (set! G4025@dup-error (lambda (G4220@name) (G2e1c@syntax-violation 'import '"two imports with different bindings" G4220@name))) (set! G4027@merge-substs (lambda (G420e@s G420f@subst) ((lambda (G4213@insert-to-subst) (begin (set! G4213@insert-to-subst (lambda (G4214@a G4215@subst) ((lambda (G4218@name G4219@label) ((lambda (G421c@t) (if G421c@t ((lambda (G421e@x) (if (eq? (cdr G421e@x) G4219@label) G4215@subst (G4025@dup-error G4218@name))) G421c@t) (cons G4214@a G4215@subst))) (assq G4218@name G4215@subst))) (car G4214@a) (cdr G4214@a)))) (if (null? G420e@s) G420f@subst (G4213@insert-to-subst (car G420e@s) (G4027@merge-substs (cdr G420e@s) G420f@subst))))) '#f))) (set! G4029@exclude* (lambda (G41e4@sym* G41e5@subst) ((lambda (G41e9@exclude) (begin (set! G41e9@exclude (lambda (G41fe@sym G41ff@subst) (if (null? G41ff@subst) (G2e1c@syntax-violation 'import '"cannot rename unbound identifier" G41fe@sym) (if (eq? G41fe@sym (caar G41ff@subst)) (values (cdar G41ff@subst) (cdr G41ff@subst)) ((lambda (G4202@a) (call-with-values (lambda () (G41e9@exclude G41fe@sym (cdr G41ff@subst))) (lambda (G4206@G4204 G4207@G4205) ((lambda (G420a@subst G420b@old) (values G420b@old (cons G4202@a G420a@subst))) G4207@G4205 G4206@G4204)))) (car G41ff@subst)))))) (if (null? G41e4@sym*) (values '() G41e5@subst) (call-with-values (lambda () (G41e9@exclude (car G41e4@sym*) G41e5@subst)) (lambda (G41ec@G41ea G41ed@G41eb) ((lambda (G41f0@subst G41f1@old) (call-with-values (lambda () (G4029@exclude* (cdr G41e4@sym*) G41f0@subst)) (lambda (G41f6@G41f4 G41f7@G41f5) ((lambda (G41fa@subst G41fb@old*) (values (cons G41f1@old G41fb@old*) G41fa@subst)) G41f7@G41f5 G41f6@G41f4)))) G41ed@G41eb G41ec@G41ea)))))) '#f))) (set! G402b@find* (lambda (G41dc@sym* G41dd@subst) (map (lambda (G41e0@x) ((lambda (G41e2@t) (if G41e2@t (cdr G41e2@t) (G2e1c@syntax-violation 'import '"cannot find identifier" G41e0@x))) (assq G41e0@x G41dd@subst))) G41dc@sym*))) (set! G402d@rem* (lambda (G41d4@sym* G41d5@subst) ((letrec ((G41d8@f (lambda (G41da@subst) (if (null? G41da@subst) '() (if (memq (caar G41da@subst) G41d4@sym*) (G41d8@f (cdr G41da@subst)) (cons (car G41da@subst) (G41d8@f (cdr G41da@subst)))))))) G41d8@f) G41d5@subst))) (set! G402f@remove-dups (lambda (G41d2@ls) (if (null? G41d2@ls) '() (if (memq (car G41d2@ls) (cdr G41d2@ls)) (G402f@remove-dups (cdr G41d2@ls)) (cons (car G41d2@ls) (G402f@remove-dups (cdr G41d2@ls))))))) (set! G4031@parse-library-name (lambda (G40ec@spec) ((lambda (G40ef@subversion? G40f1@subversion-pred G40f3@version-pred) (begin (set! G40ef@subversion? (lambda (G41ce@x) ((lambda (G41d0@x) (and (integer? G41d0@x) (exact? G41d0@x) (>= G41d0@x '0))) (G2e22@syntax->datum G41ce@x)))) (set! G40f1@subversion-pred (lambda (G416e@x*) ((lambda (G4170@t) ((lambda (G4172@ls/false) (if (and G4172@ls/false (apply (lambda (G4174@n) (G40ef@subversion? G4174@n)) G4172@ls/false)) (apply (lambda (G4176@n) (lambda (G4178@x) (= G4178@x (G2e22@syntax->datum G4176@n)))) G4172@ls/false) ((lambda (G417a@t) ((lambda (G417c@ls/false) (if (and G417c@ls/false (apply (lambda (G417e@p? G417f@sub*) (eq? (G2e22@syntax->datum G417e@p?) 'and)) G417c@ls/false)) (apply (lambda (G4182@p? G4183@sub*) ((lambda (G4186@p*) (lambda (G4188@x) (for-all (lambda (G418a@p) (G418a@p G4188@x)) G4186@p*))) (map G40f1@subversion-pred G4183@sub*))) G417c@ls/false) ((lambda (G418c@t) ((lambda (G418e@ls/false) (if (and G418e@ls/false (apply (lambda (G4190@p? G4191@sub*) (eq? (G2e22@syntax->datum G4190@p?) 'or)) G418e@ls/false)) (apply (lambda (G4194@p? G4195@sub*) ((lambda (G4198@p*) (lambda (G419a@x) (exists (lambda (G419c@p) (G419c@p G419a@x)) G4198@p*))) (map G40f1@subversion-pred G4195@sub*))) G418e@ls/false) ((lambda (G419e@t) ((lambda (G41a0@ls/false) (if (and G41a0@ls/false (apply (lambda (G41a2@p? G41a3@sub) (eq? (G2e22@syntax->datum G41a2@p?) 'not)) G41a0@ls/false)) (apply (lambda (G41a6@p? G41a7@sub) ((lambda (G41aa@p) (lambda (G41ac@x) (not (G41aa@p G41ac@x)))) (G40f1@subversion-pred G41a7@sub))) G41a0@ls/false) ((lambda (G41ae@t) ((lambda (G41b0@ls/false) (if (and G41b0@ls/false (apply (lambda (G41b2@p? G41b3@n) (and (eq? (G2e22@syntax->datum G41b2@p?) '<=) (G40ef@subversion? G41b3@n))) G41b0@ls/false)) (apply (lambda (G41b6@p? G41b7@n) (lambda (G41ba@x) (<= G41ba@x (G2e22@syntax->datum G41b7@n)))) G41b0@ls/false) ((lambda (G41bc@t) ((lambda (G41be@ls/false) (if (and G41be@ls/false (apply (lambda (G41c0@p? G41c1@n) (and (eq? (G2e22@syntax->datum G41c0@p?) '>=) (G40ef@subversion? G41c1@n))) G41be@ls/false)) (apply (lambda (G41c4@p? G41c5@n) (lambda (G41c8@x) (>= G41c8@x (G2e22@syntax->datum G41c5@n)))) G41be@ls/false) ((lambda (G41ca@t) ((lambda (G41cc@ls/false) (if G41cc@ls/false (apply (lambda () (G2e1c@syntax-violation 'import '"invalid sub-version spec" G40ec@spec G416e@x*)) G41cc@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G41ca@t))) (G2d31@syntax-dispatch G41ca@t '_))) G41bc@t))) (G2d31@syntax-dispatch G41bc@t '(any any)))) G41ae@t))) (G2d31@syntax-dispatch G41ae@t '(any any)))) G419e@t))) (G2d31@syntax-dispatch G419e@t '(any any)))) G418c@t))) (G2d31@syntax-dispatch G418c@t '(any . each-any)))) G417a@t))) (G2d31@syntax-dispatch G417a@t '(any . each-any)))) G4170@t))) (G2d31@syntax-dispatch G4170@t 'any))) G416e@x*))) (set! G40f3@version-pred (lambda (G411e@x*) ((lambda (G4120@t) ((lambda (G4122@ls/false) (if G4122@ls/false (apply (lambda () (lambda (G4124@x) '#t)) G4122@ls/false) ((lambda (G4126@t) ((lambda (G4128@ls/false) (if (and G4128@ls/false (apply (lambda (G412a@c G412b@ver*) (eq? (G2e22@syntax->datum G412a@c) 'and)) G4128@ls/false)) (apply (lambda (G412e@c G412f@ver*) ((lambda (G4132@p*) (lambda (G4134@x) (for-all (lambda (G4136@p) (G4136@p G4134@x)) G4132@p*))) (map G40f3@version-pred G412f@ver*))) G4128@ls/false) ((lambda (G4138@t) ((lambda (G413a@ls/false) (if (and G413a@ls/false (apply (lambda (G413c@c G413d@ver*) (eq? (G2e22@syntax->datum G413c@c) 'or)) G413a@ls/false)) (apply (lambda (G4140@c G4141@ver*) ((lambda (G4144@p*) (lambda (G4146@x) (exists (lambda (G4148@p) (G4148@p G4146@x)) G4144@p*))) (map G40f3@version-pred G4141@ver*))) G413a@ls/false) ((lambda (G414a@t) ((lambda (G414c@ls/false) (if (and G414c@ls/false (apply (lambda (G414e@c G414f@ver) (eq? (G2e22@syntax->datum G414e@c) 'not)) G414c@ls/false)) (apply (lambda (G4152@c G4153@ver) ((lambda (G4156@p) (lambda (G4158@x) (not (G4156@p G4158@x)))) (G40f3@version-pred G4153@ver))) G414c@ls/false) ((lambda (G415a@t) ((lambda (G415c@ls/false) (if G415c@ls/false (apply (lambda (G415e@sub*) ((lambda (G4160@p*) (lambda (G4162@x) ((letrec ((G4164@f (lambda (G4166@p* G4167@x) (if (null? G4166@p*) '#t (if (null? G4167@x) '#f (and ((car G4166@p*) (car G4167@x)) (G4164@f (cdr G4166@p*) (cdr G4167@x)))))))) G4164@f) G4160@p* G4162@x))) (map G40f1@subversion-pred G415e@sub*))) G415c@ls/false) ((lambda (G416a@t) ((lambda (G416c@ls/false) (if G416c@ls/false (apply (lambda () (G2e1c@syntax-violation 'import '"invalid version spec" G40ec@spec G411e@x*)) G416c@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G416a@t))) (G2d31@syntax-dispatch G416a@t '_))) G415a@t))) (G2d31@syntax-dispatch G415a@t 'each-any))) G414a@t))) (G2d31@syntax-dispatch G414a@t '(any any)))) G4138@t))) (G2d31@syntax-dispatch G4138@t '(any . each-any)))) G4126@t))) (G2d31@syntax-dispatch G4126@t '(any . each-any)))) G4120@t))) (G2d31@syntax-dispatch G4120@t '()))) G411e@x*))) ((letrec ((G40f4@f (lambda (G40f6@x) ((lambda (G40f8@t) ((lambda (G40fa@ls/false) (if G40fa@ls/false (apply (lambda (G40fc@version-spec*) (values '() (G40f3@version-pred G40fc@version-spec*))) G40fa@ls/false) ((lambda (G40fe@t) ((lambda (G4100@ls/false) (if (and G4100@ls/false (apply (lambda (G4102@x G4103@x*) (G4023@idsyn? G4102@x)) G4100@ls/false)) (apply (lambda (G4106@x G4107@x*) (call-with-values (lambda () (G40f4@f G4107@x*)) (lambda (G410c@G410a G410d@G410b) ((lambda (G4110@pred G4111@name) (values (cons (G2e22@syntax->datum G4106@x) G4111@name) G4110@pred)) G410d@G410b G410c@G410a)))) G4100@ls/false) ((lambda (G4114@t) ((lambda (G4116@ls/false) (if G4116@ls/false (apply (lambda () (values '() (lambda (G4118@x) '#t))) G4116@ls/false) ((lambda (G411a@t) ((lambda (G411c@ls/false) (if G411c@ls/false (apply (lambda () (G2e1c@syntax-violation '#f '"invalid import spec" G40ec@spec)) G411c@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G411a@t))) (G2d31@syntax-dispatch G411a@t '_))) G4114@t))) (G2d31@syntax-dispatch G4114@t '()))) G40fe@t))) (G2d31@syntax-dispatch G40fe@t '(any . any)))) G40f8@t))) (G2d31@syntax-dispatch G40f8@t '(each-any)))) G40f6@x)))) G40f4@f) G40ec@spec))) '#f '#f '#f))) (set! G4033@import-library (lambda (G40de@spec*) (call-with-values (lambda () (G4031@parse-library-name G40de@spec*)) (lambda (G40e2@G40e0 G40e3@G40e1) ((lambda (G40e6@pred G40e7@name) (begin (if (null? G40e7@name) (G2e1c@syntax-violation 'import '"empty library name" G40de@spec*) (void)) ((lambda (G40ea@lib) (begin (if (not G40ea@lib) (G2e1c@syntax-violation 'import '"cannot find library with required name" G40e7@name) (void)) (if (not (G40e6@pred (G2939@G27b1@library-version G40ea@lib))) (G2e1c@syntax-violation 'import '"library does not satisfy version specification" G40de@spec* G40ea@lib) (void)) ((G2da2@imp-collector) G40ea@lib) (G293d@G27b9@library-subst G40ea@lib))) (G2961@G2801@find-library-by-name G40e7@name)))) G40e3@G40e1 G40e2@G40e0))))) (set! G4035@get-import (lambda (G4050@spec) ((lambda (G4052@t) ((lambda (G4054@ls/false) (if (and G4054@ls/false (apply (lambda (G4056@x G4057@x*) (not (memq (G2e22@syntax->datum G4056@x) '(for rename except only prefix library)))) G4054@ls/false)) (apply (lambda (G405a@x G405b@x*) (G4033@import-library (cons G405a@x G405b@x*))) G4054@ls/false) ((lambda (G405e@t) ((lambda (G4060@ls/false) (if (and G4060@ls/false (apply (lambda (G4062@rename G4063@isp G4064@old* G4065@new*) (and (eq? (G2e22@syntax->datum G4062@rename) 'rename) (for-all G4023@idsyn? G4064@old*) (for-all G4023@idsyn? G4065@new*))) G4060@ls/false)) (apply (lambda (G406a@rename G406b@isp G406c@old* G406d@new*) ((lambda (G4072@subst G4073@old* G4074@new*) ((lambda (G4078@old-label*) ((lambda (G407a@subst) (G4027@merge-substs (map cons G4074@new* G4078@old-label*) G407a@subst)) (G402d@rem* G4073@old* G4072@subst))) (G402b@find* G4073@old* G4072@subst))) (G4035@get-import G406b@isp) (map G2e22@syntax->datum G406c@old*) (map G2e22@syntax->datum G406d@new*))) G4060@ls/false) ((lambda (G407c@t) ((lambda (G407e@ls/false) (if (and G407e@ls/false (apply (lambda (G4080@except G4081@isp G4082@sym*) (and (eq? (G2e22@syntax->datum G4080@except) 'except) (for-all G4023@idsyn? G4082@sym*))) G407e@ls/false)) (apply (lambda (G4086@except G4087@isp G4088@sym*) ((lambda (G408c@subst) (G402d@rem* (map G2e22@syntax->datum G4088@sym*) G408c@subst)) (G4035@get-import G4087@isp))) G407e@ls/false) ((lambda (G408e@t) ((lambda (G4090@ls/false) (if (and G4090@ls/false (apply (lambda (G4092@only G4093@isp G4094@sym*) (and (eq? (G2e22@syntax->datum G4092@only) 'only) (for-all G4023@idsyn? G4094@sym*))) G4090@ls/false)) (apply (lambda (G4098@only G4099@isp G409a@sym*) ((lambda (G409e@subst G409f@sym*) ((lambda (G40a2@sym*) ((lambda (G40a4@lab*) (map cons G40a2@sym* G40a4@lab*)) (G402b@find* G40a2@sym* G409e@subst))) (G402f@remove-dups G409f@sym*))) (G4035@get-import G4099@isp) (map G2e22@syntax->datum G409a@sym*))) G4090@ls/false) ((lambda (G40a6@t) ((lambda (G40a8@ls/false) (if (and G40a8@ls/false (apply (lambda (G40aa@prefix G40ab@isp G40ac@p) (and (eq? (G2e22@syntax->datum G40aa@prefix) 'prefix) (G4023@idsyn? G40ac@p))) G40a8@ls/false)) (apply (lambda (G40b0@prefix G40b1@isp G40b2@p) ((lambda (G40b6@subst G40b7@prefix) (map (lambda (G40ba@x) (cons (string->symbol (string-append G40b7@prefix (symbol->string (car G40ba@x)))) (cdr G40ba@x))) G40b6@subst)) (G4035@get-import G40b1@isp) (symbol->string (G2e22@syntax->datum G40b2@p)))) G40a8@ls/false) ((lambda (G40bc@t) ((lambda (G40be@ls/false) (if (and G40be@ls/false (apply (lambda (G40c0@library G40c1@spec*) (eq? (G2e22@syntax->datum G40c0@library) 'library)) G40be@ls/false)) (apply (lambda (G40c4@library G40c5@spec*) (G4033@import-library G40c5@spec*)) G40be@ls/false) ((lambda (G40c8@t) ((lambda (G40ca@ls/false) (if (and G40ca@ls/false (apply (lambda (G40cc@for G40cd@isp G40ce@rest) (eq? (G2e22@syntax->datum G40cc@for) 'for)) G40ca@ls/false)) (apply (lambda (G40d2@for G40d3@isp G40d4@rest) (G4035@get-import G40d3@isp)) G40ca@ls/false) ((lambda (G40d8@t) ((lambda (G40da@ls/false) (if G40da@ls/false (apply (lambda (G40dc@spec) (G2e1c@syntax-violation 'import '"invalid import spec" G40dc@spec)) G40da@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G40d8@t))) (G2d31@syntax-dispatch G40d8@t 'any))) G40c8@t))) (G2d31@syntax-dispatch G40c8@t '(any any . any)))) G40bc@t))) (G2d31@syntax-dispatch G40bc@t '(any each-any)))) G40a6@t))) (G2d31@syntax-dispatch G40a6@t '(any any any)))) G408e@t))) (G2d31@syntax-dispatch G408e@t '(any any . each-any)))) G407c@t))) (G2d31@syntax-dispatch G407c@t '(any any . each-any)))) G405e@t))) (G2d31@syntax-dispatch G405e@t '(any any . #(each (any any)))))) G4052@t))) (G2d31@syntax-dispatch G4052@t '(any . each-any)))) G4050@spec))) (set! G4037@add-imports! (lambda (G4040@imp G4041@h) ((lambda (G4044@subst) (for-each (lambda (G4046@x) ((lambda (G4048@name G4049@label) ((lambda (G404c@t) (if G404c@t ((lambda (G404e@l) (if (not (eq? G404e@l G4049@label)) (G4025@dup-error G4048@name) (void))) G404c@t) (hashtable-set! G4041@h G4048@name G4049@label))) (hashtable-ref G4041@h G4048@name '#f))) (car G4046@x) (cdr G4046@x))) G4044@subst)) (G4035@get-import G4040@imp)))) (lambda (G4038@imp*) ((letrec ((G403a@f (lambda (G403c@imp* G403d@h) (if (null? G403c@imp*) (hashtable-entries G403d@h) (begin (G4037@add-imports! (car G403c@imp*) G403d@h) (G403a@f (cdr G403c@imp*) G403d@h)))))) G403a@f) G4038@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d9a@make-top-rib (lambda (G4224@names G4225@labels) ((lambda (G4228@rib) (begin (vector-for-each (lambda (G422a@name G422b@label) (begin (if (not (symbol? G422a@name)) (error 'make-top-rib '"BUG: not a symbol" G422a@name) (void)) (G2af3@extend-rib/nc! G4228@rib (G2b0a@make-stx G422a@name G2abc@top-mark* '() '()) G422b@label))) G4224@names G4225@labels) G4228@rib)) (G2aef@make-empty-rib)))) (set! G2d9c@make-collector (lambda () ((lambda (G422e@ls) (lambda G4232 ((lambda (G4233) (if (= G4233 '0) (apply (lambda () G422e@ls) G4232) (if (= G4233 '1) (apply (lambda (G4230@x) (set! G422e@ls (G2ab5@set-cons G4230@x G422e@ls))) G4232) (error 'apply '"invalid arg count")))) (length G4232)))) '()))) (set! G2d9e@inv-collector (G26f4@G2622@make-parameter (lambda G4234@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4236@x) (begin (if (not (procedure? G4236@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4236@x) (void)) G4236@x)))) (set! G2da0@vis-collector (G26f4@G2622@make-parameter (lambda G4238@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G423a@x) (begin (if (not (procedure? G423a@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G423a@x) (void)) G423a@x)))) (set! G2da2@imp-collector (G26f4@G2622@make-parameter (lambda G423c@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G423e@x) (begin (if (not (procedure? G423e@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G423e@x) (void)) G423e@x)))) (set! G2da4@chi-library-internal (lambda (G4240@e* G4241@rib G4242@top?) (call-with-values (lambda () (G2d8e@chi-body* G4240@e* '() '() '() '() '() '() '() G4241@rib G4242@top?)) (lambda (G424e@G4246 G424f@G4247 G4250@G4248 G4251@G4249 G4252@G424a G4253@G424b G4254@G424c G4255@G424d) ((lambda (G425e@exp* G425f@_kwd* G4260@mod** G4261@rhs* G4262@lex* G4263@mr G4264@r G4265@e*) (values (append (apply append (reverse G4260@mod**)) G4265@e*) G4264@r G4263@mr (reverse G4262@lex*) (reverse G4261@rhs*) G425e@exp*)) G4255@G424d G4254@G424c G4253@G424b G4252@G424a G4251@G4249 G4250@G4248 G424f@G4247 G424e@G4246))))) (set! G2da6@chi-interaction-expr (lambda (G426e@e G426f@rib G4270@r) (call-with-values (lambda () (G2d8e@chi-body* (list G426e@e) G4270@r G4270@r '() '() '() '() '() G426f@rib '#t)) (lambda (G427c@G4274 G427d@G4275 G427e@G4276 G427f@G4277 G4280@G4278 G4281@G4279 G4282@G427a G4283@G427b) ((lambda (G428c@_exp* G428d@_kwd* G428e@mod** G428f@rhs* G4290@lex* G4291@mr G4292@r G4293@e*) ((lambda (G429c@e*) ((lambda (G429e@e) (values G429e@e G4292@r)) (if (null? G429c@e*) (G2aa2@G2a14@build-void) (if (null? (cdr G429c@e*)) (car G429c@e*) (G2aa1@G2a12@build-sequence '#f G429c@e*))))) (G2d63@expand-interaction-rhs*/init* (reverse G4290@lex*) (reverse G428f@rhs*) (append (apply append (reverse G428e@mod**)) G4293@e*) G4292@r G4291@mr))) G4283@G427b G4282@G427a G4281@G4279 G4280@G4278 G427f@G4277 G427e@G4276 G427d@G4275 G427c@G4274))))) (set! G2da8@library-body-expander (lambda (G42a0@name G42a1@main-exp* G42a2@imp* G42a3@b* G42a4@top?) ((lambda (G42ab@itc) (begin (set! G42ab@itc (G2d9c@make-collector)) ((lambda (G42b0@G42ac G42b1@G42ad G42b2@G42ae G42b3@G42af) ((lambda (G42b8@swap) (dynamic-wind G42b8@swap (lambda () (call-with-values (lambda () (G2d98@parse-import-spec* G42a2@imp*)) (lambda (G42bc@G42ba G42bd@G42bb) ((lambda (G42c0@subst-labels G42c1@subst-names) ((lambda (G42c4@rib) ((lambda (G42c7@wrap) (begin (set! G42c7@wrap (lambda (G4333@x) (G2b0a@make-stx G4333@x G2abc@top-mark* (list G42c4@rib) '()))) ((lambda (G42c8@b* G42c9@main-exp* G42ca@rtc G42cb@vtc) ((lambda (G42d4@G42d0 G42d5@G42d1 G42d6@G42d2 G42d7@G42d3) ((lambda (G42dc@swap) (dynamic-wind G42dc@swap (lambda () (call-with-values (lambda () (G2da4@chi-library-internal G42c8@b* G42c4@rib G42a4@top?)) (lambda (G42e4@G42de G42e5@G42df G42e6@G42e0 G42e7@G42e1 G42e8@G42e2 G42e9@G42e3) ((lambda (G42f0@internal-exp* G42f1@rhs* G42f2@lex* G42f3@mr G42f4@r G42f5@init*) (call-with-values (lambda () (G2d92@parse-exports (append G42c9@main-exp* G42f0@internal-exp*))) (lambda (G42fe@G42fc G42ff@G42fd) ((lambda (G4302@exp-id* G4303@exp-name*) (begin (G2af7@seal-rib! G42c4@rib) ((lambda (G4306@init*) ((lambda (G4308@rhs*) ((lambda () (begin (G2af9@unseal-rib! G42c4@rib) ((lambda (G430a@loc* G430b@export-subst) ((lambda (G430f@errstr) (begin (set! G430f@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G2e08@make-export-env/macros G42f2@lex* G430a@loc* G42f4@r)) (lambda (G4313@G4310 G4314@G4311 G4315@G4312) ((lambda (G4319@macro* G431a@global* G431b@export-env) (begin (for-each (lambda (G431f@s) ((lambda (G4321@name G4322@label) ((lambda (G4325@p) (if G4325@p ((lambda (G4327@b) ((lambda (G4329@type) (if (eq? G4329@type 'mutable) (G2e1c@syntax-violation 'export G430f@errstr G4321@name) (void))) (car G4327@b))) (cdr G4325@p)) (void))) (assq G4322@label G431b@export-env))) (car G431f@s) (cdr G431f@s))) G430b@export-subst) ((lambda (G432b@invoke-body G432c@invoke-definitions) (values (G42ab@itc) (G42ca@rtc) (G42cb@vtc) (G2aa1@G2a12@build-sequence '#f (append G432c@invoke-definitions (list G432b@invoke-body))) G4319@macro* G430b@export-subst G431b@export-env)) (G2aa4@G2a18@build-letrec* '#f G42f2@lex* G4308@rhs* (G2e04@build-exports G431a@global* G4306@init*)) (map G2a9d@G296f@build-global-define (map cdr G431a@global*))))) G4315@G4312 G4314@G4311 G4313@G4310))))) '#f)) (map G2ac2@gen-global G42f2@lex*) (G2e06@make-export-subst G4303@exp-name* G4302@exp-id*)))))) (G2d65@chi-rhs* G42f1@rhs* G42f4@r G42f3@mr))) (G2d51@chi-expr* G42f5@init* G42f4@r G42f3@mr)))) G42ff@G42fd G42fe@G42fc)))) G42e9@G42e3 G42e8@G42e2 G42e7@G42e1 G42e6@G42e0 G42e5@G42df G42e4@G42de)))) G42dc@swap)) (lambda () (begin ((lambda (G432f@t) (begin (G42d4@G42d0 G42d6@G42d2) (set! G42d6@G42d2 G432f@t))) (G42d4@G42d0)) ((lambda (G4331@t) (begin (G42d5@G42d1 G42d7@G42d3) (set! G42d7@G42d3 G4331@t))) (G42d5@G42d1)))))) G2d9e@inv-collector G2da0@vis-collector G42ca@rtc G42cb@vtc)) (map G42c7@wrap G42a3@b*) (map G42c7@wrap G42a1@main-exp*) (G2d9c@make-collector) (G2d9c@make-collector)))) '#f)) (G2d9a@make-top-rib G42c1@subst-names G42c0@subst-labels))) G42bd@G42bb G42bc@G42ba)))) G42b8@swap)) (lambda () (begin ((lambda (G4335@t) (begin (G42b0@G42ac G42b2@G42ae) (set! G42b2@G42ae G4335@t))) (G42b0@G42ac)) ((lambda (G4337@t) (begin (G42b1@G42ad G42b3@G42af) (set! G42b3@G42af G4337@t))) (G42b1@G42ad)))))) G2da2@imp-collector G2e2a@top-level-context G42ab@itc '#f))) '#f))) (set! G2daa@core-library-expander (lambda (G4339@e G433a@verify-name) (call-with-values (lambda () (G2d96@parse-library G4339@e)) (lambda (G4341@G433d G4342@G433e G4343@G433f G4344@G4340) ((lambda (G4349@b* G434a@imp* G434b@exp* G434c@name*) (call-with-values (lambda () (G2d94@parse-library-name G434c@name*)) (lambda (G4353@G4351 G4354@G4352) ((lambda (G4357@ver G4358@name) (begin (G433a@verify-name G4358@name) (call-with-values (lambda () (G2da8@library-body-expander G4358@name G434b@exp* G434a@imp* G4349@b* '#f)) (lambda (G4362@G435b G4363@G435c G4364@G435d G4365@G435e G4366@G435f G4367@G4360 G4368@G4361) ((lambda (G4370@export-env G4371@export-subst G4372@visit-code G4373@invoke-code G4374@visit-req* G4375@invoke-req* G4376@imp*) (values G4358@name G4357@ver G4376@imp* G4375@invoke-req* G4374@visit-req* G4373@invoke-code G4372@visit-code G4371@export-subst G4370@export-env)) G4368@G4361 G4367@G4360 G4366@G435f G4365@G435e G4364@G435d G4363@G435c G4362@G435b))))) G4354@G4352 G4353@G4351)))) G4344@G4340 G4343@G433f G4342@G433e G4341@G433d))))) (set! G2dac@parse-top-level-program (lambda (G437e@e*) ((lambda (G4380@t) ((lambda (G4382@ls/false) (if (and G4382@ls/false (apply (lambda (G4384@import G4385@imp* G4386@b*) (eq? (G2e22@syntax->datum G4384@import) 'import)) G4382@ls/false)) (apply (lambda (G438a@import G438b@imp* G438c@b*) (values G438b@imp* G438c@b*)) G4382@ls/false) ((lambda (G4390@t) ((lambda (G4392@ls/false) (if (and G4392@ls/false (apply (lambda (G4394@import G4395@x G4396@y) (eq? (G2e22@syntax->datum G4394@import) 'import)) G4392@ls/false)) (apply (lambda (G439a@import G439b@x G439c@y) (G2e1c@syntax-violation 'expander '"invalid syntax of top-level program" (G2b3a@syntax-car G437e@e*))) G4392@ls/false) ((lambda (G43a0@t) ((lambda (G43a2@ls/false) (if G43a2@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G43a2@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G43a0@t))) (G2d31@syntax-dispatch G43a0@t '_))) G4390@t))) (G2d31@syntax-dispatch G4390@t '((any . any) . any)))) G4380@t))) (G2d31@syntax-dispatch G4380@t '((any . each-any) . each-any)))) G437e@e*))) (set! G2dae@top-level-expander (lambda (G43a4@e*) (call-with-values (lambda () (G2dac@parse-top-level-program G43a4@e*)) (lambda (G43a8@G43a6 G43a9@G43a7) ((lambda (G43ac@b* G43ad@imp*) (call-with-values (lambda () (G2da8@library-body-expander '() '() G43ad@imp* G43ac@b* '#t)) (lambda (G43b7@G43b0 G43b8@G43b1 G43b9@G43b2 G43ba@G43b3 G43bb@G43b4 G43bc@G43b5 G43bd@G43b6) ((lambda (G43c5@export-env G43c6@export-subst G43c7@visit-code G43c8@invoke-code G43c9@visit-req* G43ca@invoke-req* G43cb@imp*) (values G43ca@invoke-req* G43c8@invoke-code)) G43bd@G43b6 G43bc@G43b5 G43bb@G43b4 G43ba@G43b3 G43b9@G43b2 G43b8@G43b1 G43b7@G43b0)))) G43a9@G43a7 G43a8@G43a6))))) (set! G2db4@G2daf (make-record-type-descriptor 'env '#f 'G2db2 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2db6@G2db1 '#f) (set! G2db8@G2db0 (make-record-constructor-descriptor G2db4@G2daf '#f G2db6@G2db1)) (set! G2dbb@env? (record-predicate G2db4@G2daf)) (set! G2dbd@make-env (record-constructor G2db8@G2db0)) (set! G2dbf@env-names (record-accessor G2db4@G2daf '0)) (set! G2dc1@env-labels (record-accessor G2db4@G2daf '1)) (set! G2dc3@env-itc (record-accessor G2db4@G2daf '2)) (set! G2dc5@set-env-names! (record-mutator G2db4@G2daf '0)) (set! G2dc7@set-env-labels! (record-mutator G2db4@G2daf '1)) (set! G2dc9@set-env-itc! (record-mutator G2db4@G2daf '2)) (set! G2dcb@rp (G26f1@G261c@make-record-printer 'env (lambda (G43d3@x G43d4@p G43d5@wr) (display '"#<environment>" G43d4@p)))) (set! G2dd1@G2dcc (make-record-type-descriptor 'interaction-env '#f 'G2dcf '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G2dd3@G2dce '#f) (set! G2dd5@G2dcd (make-record-constructor-descriptor G2dd1@G2dcc '#f G2dd3@G2dce)) (set! G2dd8@interaction-env? (record-predicate G2dd1@G2dcc)) (set! G2dda@make-interaction-env (record-constructor G2dd5@G2dcd)) (set! G2ddc@interaction-env-rib (record-accessor G2dd1@G2dcc '0)) (set! G2dde@interaction-env-r (record-accessor G2dd1@G2dcc '1)) (set! G2de0@interaction-env-locs (record-accessor G2dd1@G2dcc '2)) (set! G2de2@set-interaction-env-rib! (record-mutator G2dd1@G2dcc '0)) (set! G2de4@set-interaction-env-r! (record-mutator G2dd1@G2dcc '1)) (set! G2de6@set-interaction-env-locs! (record-mutator G2dd1@G2dcc '2)) (set! G2de8@rp (G26f1@G261c@make-record-printer 'interaction-env (lambda (G43d9@x G43da@p G43db@wr) (display '"#<environment>" G43da@p)))) (set! G2dea@interaction-environment-symbols (lambda () (G2df2@environment-symbols (G2e28@interaction-environment)))) (set! G2dec@environment-bindings (lambda (G43df@e) (vector->list (vector-map (lambda (G43e1@name G43e2@label) (G2dee@parse-binding (cons G43e1@name (G2967@G280d@imported-label->binding G43e2@label)))) (G2dbf@env-names G43df@e) (G2dc1@env-labels G43df@e))))) (set! G2dee@parse-binding (lambda (G43e5@b) (cons (car G43e5@b) ((lambda (G43e7@t) (if (memv G43e7@t '(core-prim global)) 'procedure (if (memv G43e7@t '(core-macro macro global-macro)) 'syntax (if (memv G43e7@t '($core-rtd)) 'record (if (eq? (car G43e5@b) (cadr G43e5@b)) 'syntax 'unknown))))) (cadr G43e5@b))))) (set! G2df0@environment? (lambda (G43e9@x) (or (G2dbb@env? G43e9@x) (G2dd8@interaction-env? G43e9@x)))) (set! G2df2@environment-symbols (lambda (G43eb@x) (if (G2dbb@env? G43eb@x) (vector->list (G2dbf@env-names G43eb@x)) (if (G2dd8@interaction-env? G43eb@x) (map values (G2adb@rib-sym* (G2ddc@interaction-env-rib G43eb@x))) (assertion-violation 'environment-symbols '"not an environment" G43eb@x))))) (set! G2df4@environment (lambda G43ed@imp* ((lambda (G43ef@itc) ((lambda (G43f3@G43f1 G43f4@G43f2) ((lambda (G43f7@swap) (dynamic-wind G43f7@swap (lambda () (call-with-values (lambda () (G2d98@parse-import-spec* G43ed@imp*)) (lambda (G43fb@G43f9 G43fc@G43fa) ((lambda (G43ff@subst-labels G4400@subst-names) (G2dbd@make-env G4400@subst-names G43ff@subst-labels G43ef@itc)) G43fc@G43fa G43fb@G43f9)))) G43f7@swap)) (lambda () ((lambda (G4403@t) (begin (G43f3@G43f1 G43f4@G43f2) (set! G43f4@G43f2 G4403@t))) (G43f3@G43f1))))) G2da2@imp-collector G43ef@itc)) (G2d9c@make-collector)))) (set! G2df6@null-environment (lambda (G4405@n) (begin (if (not (eqv? G4405@n '5)) (assertion-violation 'null-environment '"not 5" G4405@n) (void)) (G2df4@environment '(psyntax null-environment-5))))) (set! G2df8@scheme-report-environment (lambda (G4407@n) (begin (if (not (eqv? G4407@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4407@n) (void)) (G2df4@environment '(psyntax scheme-report-environment-5))))) (set! G2dfa@expand (lambda (G4409@x G440a@env) (if (G2dbb@env? G440a@env) ((lambda (G440d@rib) ((lambda (G440f@x G4410@itc G4411@rtc G4412@vtc) ((lambda (G4417@x) (begin (G2af7@seal-rib! G440d@rib) (values G4417@x (G4411@rtc)))) ((lambda (G4421@G4419 G4422@G441a G4423@G441b G4424@G441c G4425@G441d G4426@G441e G4427@G441f G4428@G4420) ((lambda (G4431@swap) (dynamic-wind G4431@swap (lambda () (G2d55@chi-expr G440f@x '() '())) G4431@swap)) (lambda () (begin ((lambda (G4433@t) (begin (G4421@G4419 G4425@G441d) (set! G4425@G441d G4433@t))) (G4421@G4419)) ((lambda (G4435@t) (begin (G4422@G441a G4426@G441e) (set! G4426@G441e G4435@t))) (G4422@G441a)) ((lambda (G4437@t) (begin (G4423@G441b G4427@G441f) (set! G4427@G441f G4437@t))) (G4423@G441b)) ((lambda (G4439@t) (begin (G4424@G441c G4428@G4420) (set! G4428@G4420 G4439@t))) (G4424@G441c)))))) G2e2a@top-level-context G2d9e@inv-collector G2da0@vis-collector G2da2@imp-collector '#f G4411@rtc G4412@vtc G4410@itc))) (G2b0a@make-stx G4409@x G2abc@top-mark* (list G440d@rib) '()) (G2dc3@env-itc G440a@env) (G2d9c@make-collector) (G2d9c@make-collector))) (G2d9a@make-top-rib (G2dbf@env-names G440a@env) (G2dc1@env-labels G440a@env))) (if (G2dd8@interaction-env? G440a@env) ((lambda (G443b@rib G443c@r G443d@rtc) ((lambda (G4441@x) (call-with-values (lambda () ((lambda (G444d@G4445 G444e@G4446 G444f@G4447 G4450@G4448 G4451@G4449 G4452@G444a G4453@G444b G4454@G444c) ((lambda (G445d@swap) (dynamic-wind G445d@swap (lambda () (G2da6@chi-interaction-expr G4441@x G443b@rib G443c@r)) G445d@swap)) (lambda () (begin ((lambda (G445f@t) (begin (G444d@G4445 G4451@G4449) (set! G4451@G4449 G445f@t))) (G444d@G4445)) ((lambda (G4461@t) (begin (G444e@G4446 G4452@G444a) (set! G4452@G444a G4461@t))) (G444e@G4446)) ((lambda (G4463@t) (begin (G444f@G4447 G4453@G444b) (set! G4453@G444b G4463@t))) (G444f@G4447)) ((lambda (G4465@t) (begin (G4450@G4448 G4454@G444c) (set! G4454@G444c G4465@t))) (G4450@G4448)))))) G2e2a@top-level-context G2d9e@inv-collector G2da0@vis-collector G2da2@imp-collector G440a@env G443d@rtc (G2d9c@make-collector) (G2d9c@make-collector))) (lambda (G4467@G4443 G4468@G4444) ((lambda (G446b@r^ G446c@e) (begin (G2de4@set-interaction-env-r! G440a@env G446b@r^) (values G446c@e (G443d@rtc)))) G4468@G4444 G4467@G4443)))) (G2b0a@make-stx G4409@x G2abc@top-mark* (list G443b@rib) '()))) (G2ddc@interaction-env-rib G440a@env) (G2dde@interaction-env-r G440a@env) (G2d9c@make-collector)) (assertion-violation 'expand '"not an environment" G440a@env))))) (set! G2dfc@eval (lambda (G446f@x G4470@env) (begin (if (not (G2df0@environment? G4470@env)) (error 'eval '"not an environment" G4470@env) (void)) (call-with-values (lambda () (G2dfa@expand G446f@x G4470@env)) (lambda (G4475@G4473 G4476@G4474) ((lambda (G4479@invoke-req* G447a@x) (begin (for-each G2968@G280f@invoke-library G4479@invoke-req*) (eval-core (G2748@G2700@expanded->core G447a@x)))) G4476@G4474 G4475@G4473)))))) (set! G2dfe@library-expander (lambda G44e2 ((lambda (G44e3) (if (= G44e3 '3) (apply (lambda (G447d@x G447e@filename G447f@verify-name) ((lambda (G4484@build-visit-code G4486@visit!) (begin (set! G4484@build-visit-code (lambda (G44d0@macro*) (if (null? G44d0@macro*) (G2aa2@G2a14@build-void) (G2aa1@G2a12@build-sequence '#f (map (lambda (G44d2@x) ((lambda (G44d4@loc G44d5@src) (list 'set! G44d4@loc G44d5@src)) (car G44d2@x) (cddr G44d2@x))) G44d0@macro*))))) (set! G4486@visit! (lambda (G44c8@macro*) (for-each (lambda (G44ca@x) ((lambda (G44cc@loc G44cd@proc) (set-symbol-value! G44cc@loc G44cd@proc)) (car G44ca@x) (cadr G44ca@x))) G44c8@macro*))) (call-with-values (lambda () (G2daa@core-library-expander G447d@x G447f@verify-name)) (lambda (G4490@G4487 G4491@G4488 G4492@G4489 G4493@G448a G4494@G448b G4495@G448c G4496@G448d G4497@G448e G4498@G448f) ((lambda (G44a2@export-env G44a3@export-subst G44a4@macro* G44a5@invoke-code G44a6@vis* G44a7@inv* G44a8@imp* G44a9@ver G44aa@name) ((lambda (G44b4@id G44b5@name G44b6@ver G44b7@imp* G44b8@vis* G44b9@inv* G44ba@visit-proc G44bb@invoke-proc G44bc@visit-code G44bd@invoke-code) (begin (G2966@G280b@install-library G44b4@id G44b5@name G44b6@ver G44b7@imp* G44b8@vis* G44b9@inv* G44a3@export-subst G44a2@export-env G44ba@visit-proc G44bb@invoke-proc G44bc@visit-code G44bd@invoke-code '#t G447e@filename) (values G44b4@id G44b5@name G44b6@ver G44b7@imp* G44b8@vis* G44b9@inv* G44bd@invoke-code G44bc@visit-code G44a3@export-subst G44a2@export-env))) (gensym) G44aa@name G44a9@ver (map G296c@G2817@library-spec G44a8@imp*) (map G296c@G2817@library-spec G44a6@vis*) (map G296c@G2817@library-spec G44a7@inv*) (lambda () (G4486@visit! G44a4@macro*)) (lambda () (eval-core (G2748@G2700@expanded->core G44a5@invoke-code))) (G4484@build-visit-code G44a4@macro*) G44a5@invoke-code)) G4498@G448f G4497@G448e G4496@G448d G4495@G448c G4494@G448b G4493@G448a G4492@G4489 G4491@G4488 G4490@G4487))))) '#f '#f)) G44e2) (if (= G44e3 '2) (apply (lambda (G44d8@x G44d9@filename) (G2dfe@library-expander G44d8@x G44d9@filename (lambda (G44dc@x) (values)))) G44e2) (if (= G44e3 '1) (apply (lambda (G44de@x) (G2dfe@library-expander G44de@x '#f (lambda (G44e0@x) (values)))) G44e2) (error 'apply '"invalid arg count"))))) (length G44e2)))) (set! G2e00@boot-library-expand (lambda (G44e4@x) (call-with-values (lambda () (G2dfe@library-expander G44e4@x)) (lambda (G44f0@G44e6 G44f1@G44e7 G44f2@G44e8 G44f3@G44e9 G44f4@G44ea G44f5@G44eb G44f6@G44ec G44f7@G44ed G44f8@G44ee G44f9@G44ef) ((lambda (G4504@export-env G4505@export-subst G4506@visit-code G4507@invoke-code G4508@inv* G4509@vis* G450a@imp* G450b@ver G450c@name G450d@id) (values G450c@name G4507@invoke-code G4505@export-subst G4504@export-env)) G44f9@G44ef G44f8@G44ee G44f7@G44ed G44f6@G44ec G44f5@G44eb G44f4@G44ea G44f3@G44e9 G44f2@G44e8 G44f1@G44e7 G44f0@G44e6))))) (set! G2e02@rev-map-append (lambda (G4518@f G4519@ls G451a@ac) (if (null? G4519@ls) G451a@ac (G2e02@rev-map-append G4518@f (cdr G4519@ls) (cons (G4518@f (car G4519@ls)) G451a@ac))))) (set! G2e04@build-exports (lambda (G451e@lex*+loc* G451f@init*) (G2aa1@G2a12@build-sequence '#f (cons (G2aa2@G2a14@build-void) (G2e02@rev-map-append (lambda (G4522@x) (list 'set! (cdr G4522@x) (car G4522@x))) G451e@lex*+loc* G451f@init*))))) (set! G2e06@make-export-subst (lambda (G4524@name* G4525@id*) (map (lambda (G4528@name G4529@id) ((lambda (G452c@label) (begin (if (not G452c@label) (G2e1c@syntax-violation '#f '"cannot export unbound identifier" G4529@id) (void)) (cons G4528@name G452c@label))) (G2b5a@id->label G4529@id))) G4524@name* G4525@id*))) (set! G2e08@make-export-env/macros (lambda (G452e@lex* G452f@loc* G4530@r) ((lambda (G4535@lookup) (begin (set! G4535@lookup (lambda (G4552@x) ((letrec ((G4554@f (lambda (G4556@x G4557@lex* G4558@loc*) (if (pair? G4557@lex*) (if (eq? G4556@x (car G4557@lex*)) (car G4558@loc*) (G4554@f G4556@x (cdr G4557@lex*) (cdr G4558@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4554@f) G4552@x G452e@lex* G452f@loc*))) ((letrec ((G4536@f (lambda (G4538@r G4539@env G453a@global* G453b@macro*) (if (null? G4538@r) (values G4539@env G453a@global* G453b@macro*) ((lambda (G4540@x) ((lambda (G4542@label G4543@b) ((lambda (G4546@t) (if (memv G4546@t '(lexical)) ((lambda (G4548@v) ((lambda (G454a@loc G454b@type) (G4536@f (cdr G4538@r) (cons (cons* G4542@label G454b@type G454a@loc) G4539@env) (cons (cons (G2cbd@lexical-var G4548@v) G454a@loc) G453a@global*) G453b@macro*)) (G4535@lookup (G2cbd@lexical-var G4548@v)) (if (G2cbf@lexical-mutable? G4548@v) 'mutable 'global))) (G2b64@binding-value G4543@b)) (if (memv G4546@t '(local-macro)) ((lambda (G454e@loc) (G4536@f (cdr G4538@r) (cons (cons* G4542@label 'global-macro G454e@loc) G4539@env) G453a@global* (cons (cons G454e@loc (G2b64@binding-value G4543@b)) G453b@macro*))) (gensym)) (if (memv G4546@t '(local-macro!)) ((lambda (G4550@loc) (G4536@f (cdr G4538@r) (cons (cons* G4542@label 'global-macro! G4550@loc) G4539@env) G453a@global* (cons (cons G4550@loc (G2b64@binding-value G4543@b)) G453b@macro*))) (gensym)) (if (memv G4546@t '($rtd $module)) (G4536@f (cdr G4538@r) (cons G4540@x G4539@env) G453a@global* G453b@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2b62@binding-type G4543@b) (G2b64@binding-value G4543@b))))))) (G2b62@binding-type G4543@b))) (car G4540@x) (cdr G4540@x))) (car G4538@r)))))) G4536@f) G4530@r '() '() '()))) '#f))) (set! G2e0a@generate-temporaries (lambda (G455c@ls) ((lambda (G455e@t) ((lambda (G4560@ls/false) (if G4560@ls/false (apply (lambda (G4562@ls) (map (lambda (G4564@x) (G2b0a@make-stx ((lambda (G4566@x) (if (or (symbol? G4566@x) (string? G4566@x)) (gensym G4566@x) (gensym 't))) (G2e22@syntax->datum G4564@x)) G2abc@top-mark* '() '())) G4562@ls)) G4560@ls/false) ((lambda (G4568@t) ((lambda (G456a@ls/false) (if G456a@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G456a@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G4568@t))) (G2d31@syntax-dispatch G4568@t '_))) G455e@t))) (G2d31@syntax-dispatch G455e@t 'each-any))) G455c@ls))) (set! G2e0c@free-identifier=? (lambda (G456c@x G456d@y) (if (G2b40@id? G456c@x) (if (G2b40@id? G456d@y) (G2b48@free-id=? G456c@x G456d@y) (assertion-violation 'free-identifier=? '"not an identifier" G456d@y)) (assertion-violation 'free-identifier=? '"not an identifier" G456c@x)))) (set! G2e0e@bound-identifier=? (lambda (G4570@x G4571@y) (if (G2b40@id? G4570@x) (if (G2b40@id? G4571@y) (G2b46@bound-id=? G4570@x G4571@y) (assertion-violation 'bound-identifier=? '"not an identifier" G4571@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G4570@x)))) (set! G2e10@make-source-condition (lambda (G4574@x) ((lambda (G457e@G4579 G4580@G457b G4582@G457a G4585@G4578 G4587@make-source-condition G4589@G4576 G458b@G4577 G458d@source-condition? G458f@source-filename G4591@source-character) (begin (set! G457e@G4579 (make-record-type-descriptor '&source-information G49cc@G471f@&condition-rtd 'G457c '#f '#f '#((immutable file-name) (immutable character)))) (set! G4580@G457b '#f) (set! G4582@G457a (make-record-constructor-descriptor G457e@G4579 G49cd@G4721@&condition-rcd G4580@G457b)) (set! G4585@G4578 (record-predicate G457e@G4579)) (set! G4587@make-source-condition (record-constructor G4582@G457a)) (set! G4589@G4576 (record-accessor G457e@G4579 '0)) (set! G458b@G4577 (record-accessor G457e@G4579 '1)) (set! G458d@source-condition? (condition-predicate G457e@G4579)) (set! G458f@source-filename (condition-accessor G457e@G4579 G4589@G4576)) (set! G4591@source-character (condition-accessor G457e@G4579 G458b@G4577)) (if (pair? G4574@x) (G4587@make-source-condition (car G4574@x) (cdr G4574@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2e12@extract-position-condition (lambda (G4592@x) (G2e10@make-source-condition (G2e14@expression-position G4592@x)))) (set! G2e14@expression-position (lambda (G4594@x) (and (G2b08@stx? G4594@x) ((lambda (G4596@x) (and (G26e9@G260c@annotation? G4596@x) (G26ea@G260e@annotation-source G4596@x))) (G2b0c@stx-expr G4594@x))))) (set! G2e16@assertion-error (lambda (G4598@expr G4599@pos) (raise (condition (G49fc@G47df@make-assertion-violation) (G4a0e@G480f@make-who-condition 'assert) (G49d2@G4772@make-message-condition '"assertion failed") (G4a04@G47f5@make-irritants-condition (list G4598@expr)) (G2e10@make-source-condition G4599@pos))))) (set! G2e18@syntax-error (lambda (G459c@x . G459e@args) (begin (if (not (for-all string? G459e@args)) (assertion-violation 'syntax-error '"invalid argument" G459e@args) (void)) (raise (condition (G49d2@G4772@make-message-condition (if (null? G459e@args) '"invalid syntax" (apply string-append G459e@args))) (G4a30@G4869@make-syntax-violation (G2e22@syntax->datum G459c@x) '#f) (G2e12@extract-position-condition G459c@x)))))) (set! G2e1a@syntax-violation* (lambda (G45a0@who G45a1@msg G45a2@form G45a3@condition-object) (begin (if (not (string? G45a1@msg)) (assertion-violation 'syntax-violation '"message is not a string" G45a1@msg) (void)) ((lambda (G45a8@who) (raise (condition (if G45a8@who (G4a0e@G480f@make-who-condition G45a8@who) (condition)) (G49d2@G4772@make-message-condition G45a1@msg) G45a3@condition-object (G2e12@extract-position-condition G45a2@form)))) (if (or (string? G45a0@who) (symbol? G45a0@who)) G45a0@who (if (not G45a0@who) ((lambda (G45aa@t) ((lambda (G45ac@ls/false) (if (and G45ac@ls/false (apply (lambda (G45ae@id) (G2b40@id? G45ae@id)) G45ac@ls/false)) (apply (lambda (G45b0@id) (G2e22@syntax->datum G45b0@id)) G45ac@ls/false) ((lambda (G45b2@t) ((lambda (G45b4@ls/false) (if (and G45b4@ls/false (apply (lambda (G45b6@id G45b7@rest) (G2b40@id? G45b6@id)) G45b4@ls/false)) (apply (lambda (G45ba@id G45bb@rest) (G2e22@syntax->datum G45ba@id)) G45b4@ls/false) ((lambda (G45be@t) ((lambda (G45c0@ls/false) (if G45c0@ls/false (apply (lambda () '#f) G45c0@ls/false) (G2e1c@syntax-violation '#f '"invalid syntax" G45be@t))) (G2d31@syntax-dispatch G45be@t '_))) G45b2@t))) (G2d31@syntax-dispatch G45b2@t '(any . any)))) G45aa@t))) (G2d31@syntax-dispatch G45aa@t 'any))) G45a2@form) (assertion-violation 'syntax-violation '"invalid who argument" G45a0@who))))))) (set! G2e1c@syntax-violation (lambda G45d0 ((lambda (G45d1) (if (= G45d1 '3) (apply (lambda (G45c2@who G45c3@msg G45c4@form) (G2e1c@syntax-violation G45c2@who G45c3@msg G45c4@form '#f)) G45d0) (if (= G45d1 '4) (apply (lambda (G45c8@who G45c9@msg G45ca@form G45cb@subform) (G2e1a@syntax-violation* G45c8@who G45c9@msg G45ca@form (G4a30@G4869@make-syntax-violation (G2e22@syntax->datum G45ca@form) (G2e22@syntax->datum G45cb@subform)))) G45d0) (error 'apply '"invalid arg count")))) (length G45d0)))) (set! G2e1e@identifier? (lambda (G45d2@x) (G2b40@id? G45d2@x))) (set! G2e20@datum->syntax (lambda (G45d4@id G45d5@datum) (if (G2b40@id? G45d4@id) (G2b1e@datum->stx G45d4@id G45d5@datum) (assertion-violation 'datum->syntax '"not an identifier" G45d4@id)))) (set! G2e22@syntax->datum (lambda (G45d8@x) (G2b56@stx->datum G45d8@x))) (set! G2e24@compile-r6rs-top-level (lambda (G45da@x*) (call-with-values (lambda () (G2dae@top-level-expander G45da@x*)) (lambda (G45de@G45dc G45df@G45dd) ((lambda (G45e2@invoke-code G45e3@lib*) (lambda () (begin (for-each G2968@G280f@invoke-library G45e3@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2748@G2700@expanded->core G45e2@invoke-code)) (void)) (eval-core (G2748@G2700@expanded->core G45e2@invoke-code))))) G45df@G45dd G45de@G45dc))))) (set! G2e26@pre-compile-r6rs-top-level (lambda (G45e6@x*) (call-with-values (lambda () (G2dae@top-level-expander G45e6@x*)) (lambda (G45ea@G45e8 G45eb@G45e9) ((lambda (G45ee@invoke-code G45ef@lib*) (begin (for-each G2968@G280f@invoke-library G45ef@lib*) (G26f2@G261e@compile-core (G2748@G2700@expanded->core G45ee@invoke-code)))) G45eb@G45e9 G45ea@G45e8))))) (set! G2e28@interaction-environment ((lambda (G45f2@the-env) (lambda () (or G45f2@the-env ((lambda (G45f4@lib G45f5@rib) (begin ((lambda (G45f8@subst) (begin (G2ae5@set-rib-sym*! G45f5@rib (map car G45f8@subst)) (G2ae7@set-rib-mark**! G45f5@rib (map (lambda (G45fa@x) G2abc@top-mark*) G45f8@subst)) (G2ae9@set-rib-label*! G45f5@rib (map cdr G45f8@subst)))) (G293d@G27b9@library-subst G45f4@lib)) ((lambda (G45fc@env) (begin (set! G45f2@the-env G45fc@env) G45fc@env)) (G2dda@make-interaction-env G45f5@rib '() '())))) (G2961@G2801@find-library-by-name '(mosh interaction)) (G2aef@make-empty-rib))))) '#f)) (set! G2e2a@top-level-context (G26f4@G2622@make-parameter '#f)) (begin (set! G470a@G2e2a@top-level-context G2e2a@top-level-context) (set! G4709@G2e28@interaction-environment G2e28@interaction-environment) (set! G4708@G2e26@pre-compile-r6rs-top-level G2e26@pre-compile-r6rs-top-level) (set! G4707@G2e24@compile-r6rs-top-level G2e24@compile-r6rs-top-level) (set! G4706@G2e22@syntax->datum G2e22@syntax->datum) (set! G4705@G2e20@datum->syntax G2e20@datum->syntax) (set! G4704@G2e1e@identifier? G2e1e@identifier?) (set! G4703@G2e1c@syntax-violation G2e1c@syntax-violation) (set! G4702@G2e1a@syntax-violation* G2e1a@syntax-violation*) (set! G4701@G2e18@syntax-error G2e18@syntax-error) (set! G4700@G2e16@assertion-error G2e16@assertion-error) (set! G46ff@G2e14@expression-position G2e14@expression-position) (set! G46fe@G2e12@extract-position-condition G2e12@extract-position-condition) (set! G46fd@G2e10@make-source-condition G2e10@make-source-condition) (set! G46fc@G2e0e@bound-identifier=? G2e0e@bound-identifier=?) (set! G46fb@G2e0c@free-identifier=? G2e0c@free-identifier=?) (set! G46fa@G2e0a@generate-temporaries G2e0a@generate-temporaries) (set! G46f9@G2e08@make-export-env/macros G2e08@make-export-env/macros) (set! G46f8@G2e06@make-export-subst G2e06@make-export-subst) (set! G46f7@G2e04@build-exports G2e04@build-exports) (set! G46f6@G2e02@rev-map-append G2e02@rev-map-append) (set! G46f5@G2e00@boot-library-expand G2e00@boot-library-expand) (set! G46f4@G2dfe@library-expander G2dfe@library-expander) (set! G46f3@G2dfc@eval G2dfc@eval) (set! G46f2@G2dfa@expand G2dfa@expand) (set! G46f1@G2df8@scheme-report-environment G2df8@scheme-report-environment) (set! G46f0@G2df6@null-environment G2df6@null-environment) (set! G46ef@G2df4@environment G2df4@environment) (set! G46ee@G2df2@environment-symbols G2df2@environment-symbols) (set! G46ed@G2df0@environment? G2df0@environment?) (set! G46ec@G2dee@parse-binding G2dee@parse-binding) (set! G46eb@G2dec@environment-bindings G2dec@environment-bindings) (set! G46ea@G2dea@interaction-environment-symbols G2dea@interaction-environment-symbols) (set! G46e9@G2de8@rp G2de8@rp) (set! G46e8@G2de6@set-interaction-env-locs! G2de6@set-interaction-env-locs!) (set! G46e7@G2de4@set-interaction-env-r! G2de4@set-interaction-env-r!) (set! G46e6@G2de2@set-interaction-env-rib! G2de2@set-interaction-env-rib!) (set! G46e5@G2de0@interaction-env-locs G2de0@interaction-env-locs) (set! G46e4@G2dde@interaction-env-r G2dde@interaction-env-r) (set! G46e3@G2ddc@interaction-env-rib G2ddc@interaction-env-rib) (set! G46e2@G2dda@make-interaction-env G2dda@make-interaction-env) (set! G46e1@G2dd8@interaction-env? G2dd8@interaction-env?) (set! G46e0@G2dd5@G2dcd G2dd5@G2dcd) (set! G46df@G2dd3@G2dce G2dd3@G2dce) (set! G46de@G2dd1@G2dcc G2dd1@G2dcc) (set! G46dd@G2dcb@rp G2dcb@rp) (set! G46dc@G2dc9@set-env-itc! G2dc9@set-env-itc!) (set! G46db@G2dc7@set-env-labels! G2dc7@set-env-labels!) (set! G46da@G2dc5@set-env-names! G2dc5@set-env-names!) (set! G46d9@G2dc3@env-itc G2dc3@env-itc) (set! G46d8@G2dc1@env-labels G2dc1@env-labels) (set! G46d7@G2dbf@env-names G2dbf@env-names) (set! G46d6@G2dbd@make-env G2dbd@make-env) (set! G46d5@G2dbb@env? G2dbb@env?) (set! G46d4@G2db8@G2db0 G2db8@G2db0) (set! G46d3@G2db6@G2db1 G2db6@G2db1) (set! G46d2@G2db4@G2daf G2db4@G2daf) (set! G46d1@G2dae@top-level-expander G2dae@top-level-expander) (set! G46d0@G2dac@parse-top-level-program G2dac@parse-top-level-program) (set! G46cf@G2daa@core-library-expander G2daa@core-library-expander) (set! G46ce@G2da8@library-body-expander G2da8@library-body-expander) (set! G46cd@G2da6@chi-interaction-expr G2da6@chi-interaction-expr) (set! G46cc@G2da4@chi-library-internal G2da4@chi-library-internal) (set! G46cb@G2da2@imp-collector G2da2@imp-collector) (set! G46ca@G2da0@vis-collector G2da0@vis-collector) (set! G46c9@G2d9e@inv-collector G2d9e@inv-collector) (set! G46c8@G2d9c@make-collector G2d9c@make-collector) (set! G46c7@G2d9a@make-top-rib G2d9a@make-top-rib) (set! G46c6@G2d98@parse-import-spec* G2d98@parse-import-spec*) (set! G46c5@G2d96@parse-library G2d96@parse-library) (set! G46c4@G2d94@parse-library-name G2d94@parse-library-name) (set! G46c3@G2d92@parse-exports G2d92@parse-exports) (set! G46c2@G2d90@expand-transformer G2d90@expand-transformer) (set! G46c1@G2d8e@chi-body* G2d8e@chi-body*) (set! G46c0@G2d8c@chi-internal-module G2d8c@chi-internal-module) (set! G46bf@G2d8a@module-interface-exp-id* G2d8a@module-interface-exp-id*) (set! G46be@G2d88@set-module-interface-exp-lab-vec! G2d88@set-module-interface-exp-lab-vec!) (set! G46bd@G2d86@set-module-interface-exp-id-vec! G2d86@set-module-interface-exp-id-vec!) (set! G46bc@G2d84@set-module-interface-first-mark! G2d84@set-module-interface-first-mark!) (set! G46bb@G2d82@module-interface-exp-lab-vec G2d82@module-interface-exp-lab-vec) (set! G46ba@G2d80@module-interface-exp-id-vec G2d80@module-interface-exp-id-vec) (set! G46b9@G2d7e@module-interface-first-mark G2d7e@module-interface-first-mark) (set! G46b8@G2d7c@make-module-interface G2d7c@make-module-interface) (set! G46b7@G2d7a@module-interface? G2d7a@module-interface?) (set! G46b6@G2d77@G2d6f G2d77@G2d6f) (set! G46b5@G2d75@G2d70 G2d75@G2d70) (set! G46b4@G2d73@G2d6e G2d73@G2d6e) (set! G46b3@G2d6d@parse-module G2d6d@parse-module) (set! G46b2@G2d6b@chi-internal G2d6b@chi-internal) (set! G46b1@G2d69@find-dups G2d69@find-dups) (set! G46b0@G2d67@find-bound=? G2d67@find-bound=?) (set! G46af@G2d65@chi-rhs* G2d65@chi-rhs*) (set! G46ae@G2d63@expand-interaction-rhs*/init* G2d63@expand-interaction-rhs*/init*) (set! G46ad@G2d61@chi-rhs G2d61@chi-rhs) (set! G46ac@G2d5f@chi-defun G2d5f@chi-defun) (set! G46ab@G2d5d@chi-lambda-clause* G2d5d@chi-lambda-clause*) (set! G46aa@G2d5b@chi-lambda-clause G2d5b@chi-lambda-clause) (set! G46a9@G2d59@verify-formals G2d59@verify-formals) (set! G46a8@G2d57@chi-set! G2d57@chi-set!) (set! G46a7@G2d55@chi-expr G2d55@chi-expr) (set! G46a6@G2d53@chi-application G2d53@chi-application) (set! G46a5@G2d51@chi-expr* G2d51@chi-expr*) (set! G46a4@G2d4f@chi-global-macro G2d4f@chi-global-macro) (set! G46a3@G2d4d@chi-local-macro G2d4d@chi-local-macro) (set! G46a2@G2d4b@chi-macro G2d4b@chi-macro) (set! G46a1@G2d49@do-macro-call G2d49@do-macro-call) (set! G46a0@G2d47@local-macro-transformer G2d47@local-macro-transformer) (set! G469f@G2d45@macro-transformer G2d45@macro-transformer) (set! G469e@G2d43@symbol-macro G2d43@symbol-macro) (set! G469d@G2d41@file-options-macro G2d41@file-options-macro) (set! G469c@G2d3f@core-macro-transformer G2d3f@core-macro-transformer) (set! G469b@G2d3d@syntax-transformer G2d3d@syntax-transformer) (set! G469a@G2d3b@ellipsis-map G2d3b@ellipsis-map) (set! G4699@G2d39@syntax-case-transformer G2d39@syntax-case-transformer) (set! G4698@G2d37@verify-literals G2d37@verify-literals) (set! G4697@G2d35@underscore? G2d35@underscore?) (set! G4696@G2d33@ellipsis? G2d33@ellipsis?) (set! G4695@G2d31@syntax-dispatch G2d31@syntax-dispatch) (set! G4694@G2d2f@convert-pattern G2d2f@convert-pattern) (set! G4693@G2d2d@foreign-call-transformer G2d2d@foreign-call-transformer) (set! G4692@G2d2b@parameterize-macro G2d2b@parameterize-macro) (set! G4691@G2d29@incorrect-usage-macro G2d29@incorrect-usage-macro) (set! G4690@G2d27@define-condition-type-macro G2d27@define-condition-type-macro) (set! G468f@G2d25@define-record-type-macro G2d25@define-record-type-macro) (set! G468e@G2d23@define-struct-macro G2d23@define-struct-macro) (set! G468d@G2d21@quasisyntax-macro G2d21@quasisyntax-macro) (set! G468c@G2d1f@quasiquote-macro G2d1f@quasiquote-macro) (set! G468b@G2d1d@syntax-rules-macro G2d1d@syntax-rules-macro) (set! G468a@G2d1b@include-into-macro G2d1b@include-into-macro) (set! G4689@G2d19@include-macro G2d19@include-macro) (set! G4688@G2d17@do-include G2d17@do-include) (set! G4687@G2d15@cond-macro G2d15@cond-macro) (set! G4686@G2d13@and-macro G2d13@and-macro) (set! G4685@G2d11@or-macro G2d11@or-macro) (set! G4684@G2d0f@let*-macro G2d0f@let*-macro) (set! G4683@G2d0d@do-macro G2d0d@do-macro) (set! G4682@G2d0b@identifier-syntax-macro G2d0b@identifier-syntax-macro) (set! G4681@G2d09@endianness-macro G2d09@endianness-macro) (set! G4680@G2d07@assert-macro G2d07@assert-macro) (set! G467f@G2d05@delay-macro G2d05@delay-macro) (set! G467e@G2d03@time-macro G2d03@time-macro) (set! G467d@G2d01@define-enumeration-macro G2d01@define-enumeration-macro) (set! G467c@G2cff@guard-macro G2cff@guard-macro) (set! G467b@G2cfd@trace-letrec-syntax-macro G2cfd@trace-letrec-syntax-macro) (set! G467a@G2cfb@trace-let-syntax-macro G2cfb@trace-let-syntax-macro) (set! G4679@G2cf9@trace-let/rec-syntax G2cf9@trace-let/rec-syntax) (set! G4678@G2cf7@trace-define-syntax-macro G2cf7@trace-define-syntax-macro) (set! G4677@G2cf5@trace-define-macro G2cf5@trace-define-macro) (set! G4676@G2cf3@trace-lambda-macro G2cf3@trace-lambda-macro) (set! G4675@G2cf1@let*-values-macro G2cf1@let*-values-macro) (set! G4674@G2cef@let-values-macro G2cef@let-values-macro) (set! G4673@G2ced@let-macro G2ced@let-macro) (set! G4672@G2ceb@invalid-fmls-error G2ceb@invalid-fmls-error) (set! G4671@G2ce9@with-syntax-macro G2ce9@with-syntax-macro) (set! G4670@G2ce7@bless G2ce7@bless) (set! G466f@G2ce5@lambda-transformer G2ce5@lambda-transformer) (set! G466e@G2ce3@case-lambda-transformer G2ce3@case-lambda-transformer) (set! G466d@G2ce1@quote-transformer G2ce1@quote-transformer) (set! G466c@G2cdf@case-macro G2cdf@case-macro) (set! G466b@G2cdd@or-transformer G2cdd@or-transformer) (set! G466a@G2cdb@and-transformer G2cdb@and-transformer) (set! G4669@G2cd9@if-transformer G2cd9@if-transformer) (set! G4668@G2cd7@unless-macro G2cd7@unless-macro) (set! G4667@G2cd5@when-macro G2cd5@when-macro) (set! G4666@G2cd3@record-constructor-descriptor-transformer G2cd3@record-constructor-descriptor-transformer) (set! G4665@G2cd1@record-type-descriptor-transformer G2cd1@record-type-descriptor-transformer) (set! G4664@G2ccf@type-descriptor-transformer G2ccf@type-descriptor-transformer) (set! G4663@G2ccd@fluid-let-syntax-transformer G2ccd@fluid-let-syntax-transformer) (set! G4662@G2ccb@letrec*-transformer G2ccb@letrec*-transformer) (set! G4661@G2cc9@letrec-transformer G2cc9@letrec-transformer) (set! G4660@G2cc7@letrec-helper G2cc7@letrec-helper) (set! G465f@G2cc5@add-lexicals G2cc5@add-lexicals) (set! G465e@G2cc3@add-lexical G2cc3@add-lexical) (set! G465d@G2cc1@set-lexical-mutable! G2cc1@set-lexical-mutable!) (set! G465c@G2cbf@lexical-mutable? G2cbf@lexical-mutable?) (set! G465b@G2cbd@lexical-var G2cbd@lexical-var) (set! G465a@G2cbb@scheme-stx G2cbb@scheme-stx) (set! G4659@G2cb9@scheme-stx-hashtable G2cb9@scheme-stx-hashtable) (set! G4658@G2cb7@parse-define-syntax G2cb7@parse-define-syntax) (set! G4657@G2cb5@parse-define G2cb5@parse-define) (set! G4656@G2b7e@make-eval-transformer G2b7e@make-eval-transformer) (set! G4655@G2b7c@variable-transformer-procedure G2b7c@variable-transformer-procedure) (set! G4654@G2b7a@variable-transformer? G2b7a@variable-transformer?) (set! G4653@G2b78@make-variable-transformer G2b78@make-variable-transformer) (set! G4652@G2b76@sanitize-binding G2b76@sanitize-binding) (set! G4651@G2b68@syntax-type G2b68@syntax-type) (set! G4650@G2b66@raise-unbound-error G2b66@raise-unbound-error) (set! G464f@G2b64@binding-value G2b64@binding-value) (set! G464e@G2b62@binding-type G2b62@binding-type) (set! G464d@G2b60@make-binding G2b60@make-binding) (set! G464c@G2b5e@label->binding G2b5e@label->binding) (set! G464b@G2b5c@id->real-label G2b5c@id->real-label) (set! G464a@G2b5a@id->label G2b5a@id->label) (set! G4649@G2b58@same-marks*? G2b58@same-marks*?) (set! G4648@G2b56@stx->datum G2b56@stx->datum) (set! G4647@G2b54@strip G2b54@strip) (set! G4646@G2b52@strip-annotations G2b52@strip-annotations) (set! G4645@G2b50@self-evaluating? G2b50@self-evaluating?) (set! G4644@G2b4e@bound-id-member? G2b4e@bound-id-member?) (set! G4643@G2b4c@distinct-bound-ids? G2b4c@distinct-bound-ids?) (set! G4642@G2b4a@valid-bound-ids? G2b4a@valid-bound-ids?) (set! G4641@G2b48@free-id=? G2b48@free-id=?) (set! G4640@G2b46@bound-id=? G2b46@bound-id=?) (set! G463f@G2b44@same-marks? G2b44@same-marks?) (set! G463e@G2b42@id->sym G2b42@id->sym) (set! G463d@G2b40@id? G2b40@id?) (set! G463c@G2b3e@syntax->list G2b3e@syntax->list) (set! G463b@G2b3c@syntax-cdr G2b3c@syntax-cdr) (set! G463a@G2b3a@syntax-car G2b3a@syntax-car) (set! G4639@G2b38@syntax-list? G2b38@syntax-list?) (set! G4638@G2b36@syntax-null? G2b36@syntax-null?) (set! G4637@G2b34@syntax-vector? G2b34@syntax-vector?) (set! G4636@G2b32@syntax-pair? G2b32@syntax-pair?) (set! G4635@G2b30@syntax-vector->list G2b30@syntax-vector->list) (set! G4634@G2b2e@syntax-kind? G2b2e@syntax-kind?) (set! G4633@G2b2c@add-subst G2b2c@add-subst) (set! G4632@G2b2a@add-mark G2b2a@add-mark) (set! G4631@G2b28@mkstx G2b28@mkstx) (set! G4630@G2b26@join-wraps G2b26@join-wraps) (set! G462f@G2b24@anti-mark? G2b24@anti-mark?) (set! G462e@G2b22@anti-mark G2b22@anti-mark) (set! G462d@G2b20@gen-mark G2b20@gen-mark) (set! G462c@G2b1e@datum->stx G2b1e@datum->stx) (set! G462b@G2b1c@rp G2b1c@rp) (set! G462a@G2b1a@set-stx-ae*! G2b1a@set-stx-ae*!) (set! G4629@G2b18@set-stx-subst*! G2b18@set-stx-subst*!) (set! G4628@G2b16@set-stx-mark*! G2b16@set-stx-mark*!) (set! G4627@G2b14@set-stx-expr! G2b14@set-stx-expr!) (set! G4626@G2b12@stx-ae* G2b12@stx-ae*) (set! G4625@G2b10@stx-subst* G2b10@stx-subst*) (set! G4624@G2b0e@stx-mark* G2b0e@stx-mark*) (set! G4623@G2b0c@stx-expr G2b0c@stx-expr) (set! G4622@G2b0a@make-stx G2b0a@make-stx) (set! G4621@G2b08@stx? G2b08@stx?) (set! G4620@G2b05@G2afd G2b05@G2afd) (set! G461f@G2b03@G2afe G2b03@G2afe) (set! G461e@G2b01@G2afc G2b01@G2afc) (set! G461d@G2afb@make-full-rib G2afb@make-full-rib) (set! G461c@G2af9@unseal-rib! G2af9@unseal-rib!) (set! G461b@G2af7@seal-rib! G2af7@seal-rib!) (set! G461a@G2af5@make-rib-map G2af5@make-rib-map) (set! G4619@G2af3@extend-rib/nc! G2af3@extend-rib/nc!) (set! G4618@G2af1@extend-rib! G2af1@extend-rib!) (set! G4617@G2aef@make-empty-rib G2aef@make-empty-rib) (set! G4616@G2aed@set-rib-cache! G2aed@set-rib-cache!) (set! G4615@G2aeb@set-rib-sealed/freq! G2aeb@set-rib-sealed/freq!) (set! G4614@G2ae9@set-rib-label*! G2ae9@set-rib-label*!) (set! G4613@G2ae7@set-rib-mark**! G2ae7@set-rib-mark**!) (set! G4612@G2ae5@set-rib-sym*! G2ae5@set-rib-sym*!) (set! G4611@G2ae3@rib-cache G2ae3@rib-cache) (set! G4610@G2ae1@rib-sealed/freq G2ae1@rib-sealed/freq) (set! G460f@G2adf@rib-label* G2adf@rib-label*) (set! G460e@G2add@rib-mark** G2add@rib-mark**) (set! G460d@G2adb@rib-sym* G2adb@rib-sym*) (set! G460c@G2ad9@make-rib G2ad9@make-rib) (set! G460b@G2ad7@rib? G2ad7@rib?) (set! G460a@G2ad4@G2acc G2ad4@G2acc) (set! G4609@G2ad2@G2acd G2ad2@G2acd) (set! G4608@G2ad0@G2acb G2ad0@G2acb) (set! G4607@G2aca@gen-define-label G2aca@gen-define-label) (set! G4606@G2ac8@gen-define-label+loc G2ac8@gen-define-label+loc) (set! G4605@G2ac6@gen-top-level-label G2ac6@gen-top-level-label) (set! G4604@G2ac4@gen-label G2ac4@gen-label) (set! G4603@G2ac2@gen-global G2ac2@gen-global) (set! G4602@G2ac0@gen-lexical G2ac0@gen-lexical) (set! G4601@G2abe@top-marked? G2abe@top-marked?) (set! G4600@G2abc@top-mark* G2abc@top-mark*) (set! G45ff@G2ab7@set-union G2ab7@set-union) (set! G45fe@G2ab5@set-cons G2ab5@set-cons) (G295e@G27fb@current-library-expander G2dfe@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4714@G470f G4716@G4711 G4718@G4710 G471b@&condition? G471d@make-&condition G471f@&condition-rtd G4721@&condition-rcd G4769@G4764 G476b@G4766 G476d@G4765 G4770@p? G4772@make-message-condition G4774@G4763 G4776@message-condition? G4778@condition-message G477a@&message-rtd G477c@&message-rcd G4782@G477d G4784@G477f G4786@G477e G4789@p? G478b@make-warning G478d@warning? G478f@&warning-rtd G4791@&warning-rcd G4797@G4792 G4799@G4794 G479b@G4793 G479e@p? G47a0@make-serious-condition G47a2@serious-condition? G47a4@&serious-rtd G47a6@&serious-rcd G47ac@G47a7 G47ae@G47a9 G47b0@G47a8 G47b3@p? G47b5@make-error G47b7@error? G47b9@&error-rtd G47bb@&error-rcd G47c1@G47bc G47c3@G47be G47c5@G47bd G47c8@p? G47ca@make-violation G47cc@violation? G47ce@&violation-rtd G47d0@&violation-rcd G47d6@G47d1 G47d8@G47d3 G47da@G47d2 G47dd@p? G47df@make-assertion-violation G47e1@assertion-violation? G47e3@&assertion-rtd G47e5@&assertion-rcd G47ec@G47e7 G47ee@G47e9 G47f0@G47e8 G47f3@p? G47f5@make-irritants-condition G47f7@G47e6 G47f9@irritants-condition? G47fb@condition-irritants G47fd@&irritants-rtd G47ff@&irritants-rcd G4806@G4801 G4808@G4803 G480a@G4802 G480d@p? G480f@make-who-condition G4811@G4800 G4813@who-condition? G4815@condition-who G4817@&who-rtd G4819@&who-rcd G481f@G481a G4821@G481c G4823@G481b G4826@p? G4828@make-non-continuable-violation G482a@non-continuable-violation? G482c@&non-continuable-rtd G482e@&non-continuable-rcd G4834@G482f G4836@G4831 G4838@G4830 G483b@p? G483d@make-implementation-restriction-violation G483f@implementation-restriction-violation? G4841@&implementation-restriction-rtd G4843@&implementation-restriction-rcd G4849@G4844 G484b@G4846 G484d@G4845 G4850@p? G4852@make-lexical-violation G4854@lexical-violation? G4856@&lexical-rtd G4858@&lexical-rcd G4860@G485b G4862@G485d G4864@G485c G4867@p? G4869@make-syntax-violation G486b@G4859 G486d@G485a G486f@syntax-violation? G4871@syntax-violation-form G4873@syntax-violation-subform G4875@&syntax-rtd G4877@&syntax-rcd G487d@G4878 G487f@G487a G4881@G4879 G4884@p? G4886@make-undefined-violation G4888@undefined-violation? G488a@&undefined-rtd G488c@&undefined-rcd G4892@G488d G4894@G488f G4896@G488e G4899@p? G489b@make-i/o-error G489d@i/o-error? G489f@&i/o-rtd G48a1@&i/o-rcd G48a7@G48a2 G48a9@G48a4 G48ab@G48a3 G48ae@p? G48b0@make-i/o-read-error G48b2@i/o-read-error? G48b4@&i/o-read-rtd G48b6@&i/o-read-rcd G48bc@G48b7 G48be@G48b9 G48c0@G48b8 G48c3@p? G48c5@make-i/o-write-error G48c7@i/o-write-error? G48c9@&i/o-write-rtd G48cb@&i/o-write-rcd G48d2@G48cd G48d4@G48cf G48d6@G48ce G48d9@p? G48db@make-i/o-invalid-position-error G48dd@G48cc G48df@i/o-invalid-position-error? G48e1@i/o-error-position G48e3@&i/o-invalid-position-rtd G48e5@&i/o-invalid-position-rcd G48ec@G48e7 G48ee@G48e9 G48f0@G48e8 G48f3@p? G48f5@make-i/o-filename-error G48f7@G48e6 G48f9@i/o-filename-error? G48fb@i/o-error-filename G48fd@&i/o-filename-rtd G48ff@&i/o-filename-rcd G4905@G4900 G4907@G4902 G4909@G4901 G490c@p? G490e@make-i/o-file-protection-error G4910@i/o-file-protection-error? G4912@&i/o-file-protection-rtd G4914@&i/o-file-protection-rcd G491a@G4915 G491c@G4917 G491e@G4916 G4921@p? G4923@make-i/o-file-is-read-only-error G4925@i/o-file-is-read-only-error? G4927@&i/o-file-is-read-only-rtd G4929@&i/o-file-is-read-only-rcd G492f@G492a G4931@G492c G4933@G492b G4936@p? G4938@make-i/o-file-already-exists-error G493a@i/o-file-already-exists-error? G493c@&i/o-file-already-exists-rtd G493e@&i/o-file-already-exists-rcd G4944@G493f G4946@G4941 G4948@G4940 G494b@p? G494d@make-i/o-file-does-not-exist-error G494f@i/o-file-does-not-exist-error? G4951@&i/o-file-does-not-exist-rtd G4953@&i/o-file-does-not-exist-rcd G495a@G4955 G495c@G4957 G495e@G4956 G4961@p? G4963@make-i/o-port-error G4965@G4954 G4967@i/o-port-error? G4969@i/o-error-port G496b@&i/o-port-rtd G496d@&i/o-port-rcd G4973@G496e G4975@G4970 G4977@G496f G497a@p? G497c@make-i/o-decoding-error G497e@i/o-decoding-error? G4980@&i/o-decoding-rtd G4982@&i/o-decoding-rcd G4989@G4984 G498b@G4986 G498d@G4985 G4990@p? G4992@make-i/o-encoding-error G4994@G4983 G4996@i/o-encoding-error? G4998@i/o-encoding-error-char G499a@&i/o-encoding-rtd G499c@&i/o-encoding-rcd G49a2@G499d G49a4@G499f G49a6@G499e G49a9@p? G49ab@make-no-infinities-violation G49ad@no-infinities-violation? G49af@&no-infinities-rtd G49b1@&no-infinities-rcd G49b7@G49b2 G49b9@G49b4 G49bb@G49b3 G49be@p? G49c0@make-no-nans-violation G49c2@no-nans-violation? G49c4@&no-nans-rtd G49c6@&no-nans-rcd) (begin (set! G4714@G470f (make-record-type-descriptor '&condition '#f 'G4712 '#f '#f '#())) (set! G4716@G4711 '#f) (set! G4718@G4710 (make-record-constructor-descriptor G4714@G470f '#f G4716@G4711)) (set! G471b@&condition? (record-predicate G4714@G470f)) (set! G471d@make-&condition (record-constructor G4718@G4710)) (set! G471f@&condition-rtd G4714@G470f) (set! G4721@&condition-rcd G4718@G4710) (set! G4769@G4764 (make-record-type-descriptor '&message G4714@G470f 'G4767 '#f '#f '#((immutable message)))) (set! G476b@G4766 '#f) (set! G476d@G4765 (make-record-constructor-descriptor G4769@G4764 G4718@G4710 G476b@G4766)) (set! G4770@p? (record-predicate G4769@G4764)) (set! G4772@make-message-condition (record-constructor G476d@G4765)) (set! G4774@G4763 (record-accessor G4769@G4764 '0)) (set! G4776@message-condition? (condition-predicate G4769@G4764)) (set! G4778@condition-message (condition-accessor G4769@G4764 G4774@G4763)) (set! G477a@&message-rtd G4769@G4764) (set! G477c@&message-rcd G476d@G4765) (set! G4782@G477d (make-record-type-descriptor '&warning G4714@G470f 'G4780 '#f '#f '#())) (set! G4784@G477f '#f) (set! G4786@G477e (make-record-constructor-descriptor G4782@G477d G4718@G4710 G4784@G477f)) (set! G4789@p? (record-predicate G4782@G477d)) (set! G478b@make-warning (record-constructor G4786@G477e)) (set! G478d@warning? (condition-predicate G4782@G477d)) (set! G478f@&warning-rtd G4782@G477d) (set! G4791@&warning-rcd G4786@G477e) (set! G4797@G4792 (make-record-type-descriptor '&serious G4714@G470f 'G4795 '#f '#f '#())) (set! G4799@G4794 '#f) (set! G479b@G4793 (make-record-constructor-descriptor G4797@G4792 G4718@G4710 G4799@G4794)) (set! G479e@p? (record-predicate G4797@G4792)) (set! G47a0@make-serious-condition (record-constructor G479b@G4793)) (set! G47a2@serious-condition? (condition-predicate G4797@G4792)) (set! G47a4@&serious-rtd G4797@G4792) (set! G47a6@&serious-rcd G479b@G4793) (set! G47ac@G47a7 (make-record-type-descriptor '&error G4797@G4792 'G47aa '#f '#f '#())) (set! G47ae@G47a9 '#f) (set! G47b0@G47a8 (make-record-constructor-descriptor G47ac@G47a7 G479b@G4793 G47ae@G47a9)) (set! G47b3@p? (record-predicate G47ac@G47a7)) (set! G47b5@make-error (record-constructor G47b0@G47a8)) (set! G47b7@error? (condition-predicate G47ac@G47a7)) (set! G47b9@&error-rtd G47ac@G47a7) (set! G47bb@&error-rcd G47b0@G47a8) (set! G47c1@G47bc (make-record-type-descriptor '&violation G4797@G4792 'G47bf '#f '#f '#())) (set! G47c3@G47be '#f) (set! G47c5@G47bd (make-record-constructor-descriptor G47c1@G47bc G479b@G4793 G47c3@G47be)) (set! G47c8@p? (record-predicate G47c1@G47bc)) (set! G47ca@make-violation (record-constructor G47c5@G47bd)) (set! G47cc@violation? (condition-predicate G47c1@G47bc)) (set! G47ce@&violation-rtd G47c1@G47bc) (set! G47d0@&violation-rcd G47c5@G47bd) (set! G47d6@G47d1 (make-record-type-descriptor '&assertion G47c1@G47bc 'G47d4 '#f '#f '#())) (set! G47d8@G47d3 '#f) (set! G47da@G47d2 (make-record-constructor-descriptor G47d6@G47d1 G47c5@G47bd G47d8@G47d3)) (set! G47dd@p? (record-predicate G47d6@G47d1)) (set! G47df@make-assertion-violation (record-constructor G47da@G47d2)) (set! G47e1@assertion-violation? (condition-predicate G47d6@G47d1)) (set! G47e3@&assertion-rtd G47d6@G47d1) (set! G47e5@&assertion-rcd G47da@G47d2) (set! G47ec@G47e7 (make-record-type-descriptor '&irritants G4714@G470f 'G47ea '#f '#f '#((immutable irritants)))) (set! G47ee@G47e9 '#f) (set! G47f0@G47e8 (make-record-constructor-descriptor G47ec@G47e7 G4718@G4710 G47ee@G47e9)) (set! G47f3@p? (record-predicate G47ec@G47e7)) (set! G47f5@make-irritants-condition (record-constructor G47f0@G47e8)) (set! G47f7@G47e6 (record-accessor G47ec@G47e7 '0)) (set! G47f9@irritants-condition? (condition-predicate G47ec@G47e7)) (set! G47fb@condition-irritants (condition-accessor G47ec@G47e7 G47f7@G47e6)) (set! G47fd@&irritants-rtd G47ec@G47e7) (set! G47ff@&irritants-rcd G47f0@G47e8) (set! G4806@G4801 (make-record-type-descriptor '&who G4714@G470f 'G4804 '#f '#f '#((immutable who)))) (set! G4808@G4803 '#f) (set! G480a@G4802 (make-record-constructor-descriptor G4806@G4801 G4718@G4710 G4808@G4803)) (set! G480d@p? (record-predicate G4806@G4801)) (set! G480f@make-who-condition (record-constructor G480a@G4802)) (set! G4811@G4800 (record-accessor G4806@G4801 '0)) (set! G4813@who-condition? (condition-predicate G4806@G4801)) (set! G4815@condition-who (condition-accessor G4806@G4801 G4811@G4800)) (set! G4817@&who-rtd G4806@G4801) (set! G4819@&who-rcd G480a@G4802) (set! G481f@G481a (make-record-type-descriptor '&non-continuable G47c1@G47bc 'G481d '#f '#f '#())) (set! G4821@G481c '#f) (set! G4823@G481b (make-record-constructor-descriptor G481f@G481a G47c5@G47bd G4821@G481c)) (set! G4826@p? (record-predicate G481f@G481a)) (set! G4828@make-non-continuable-violation (record-constructor G4823@G481b)) (set! G482a@non-continuable-violation? (condition-predicate G481f@G481a)) (set! G482c@&non-continuable-rtd G481f@G481a) (set! G482e@&non-continuable-rcd G4823@G481b) (set! G4834@G482f (make-record-type-descriptor '&implementation-restriction G47c1@G47bc 'G4832 '#f '#f '#())) (set! G4836@G4831 '#f) (set! G4838@G4830 (make-record-constructor-descriptor G4834@G482f G47c5@G47bd G4836@G4831)) (set! G483b@p? (record-predicate G4834@G482f)) (set! G483d@make-implementation-restriction-violation (record-constructor G4838@G4830)) (set! G483f@implementation-restriction-violation? (condition-predicate G4834@G482f)) (set! G4841@&implementation-restriction-rtd G4834@G482f) (set! G4843@&implementation-restriction-rcd G4838@G4830) (set! G4849@G4844 (make-record-type-descriptor '&lexical G47c1@G47bc 'G4847 '#f '#f '#())) (set! G484b@G4846 '#f) (set! G484d@G4845 (make-record-constructor-descriptor G4849@G4844 G47c5@G47bd G484b@G4846)) (set! G4850@p? (record-predicate G4849@G4844)) (set! G4852@make-lexical-violation (record-constructor G484d@G4845)) (set! G4854@lexical-violation? (condition-predicate G4849@G4844)) (set! G4856@&lexical-rtd G4849@G4844) (set! G4858@&lexical-rcd G484d@G4845) (set! G4860@G485b (make-record-type-descriptor '&syntax G47c1@G47bc 'G485e '#f '#f '#((immutable form) (immutable subform)))) (set! G4862@G485d '#f) (set! G4864@G485c (make-record-constructor-descriptor G4860@G485b G47c5@G47bd G4862@G485d)) (set! G4867@p? (record-predicate G4860@G485b)) (set! G4869@make-syntax-violation (record-constructor G4864@G485c)) (set! G486b@G4859 (record-accessor G4860@G485b '0)) (set! G486d@G485a (record-accessor G4860@G485b '1)) (set! G486f@syntax-violation? (condition-predicate G4860@G485b)) (set! G4871@syntax-violation-form (condition-accessor G4860@G485b G486b@G4859)) (set! G4873@syntax-violation-subform (condition-accessor G4860@G485b G486d@G485a)) (set! G4875@&syntax-rtd G4860@G485b) (set! G4877@&syntax-rcd G4864@G485c) (set! G487d@G4878 (make-record-type-descriptor '&undefined G47c1@G47bc 'G487b '#f '#f '#())) (set! G487f@G487a '#f) (set! G4881@G4879 (make-record-constructor-descriptor G487d@G4878 G47c5@G47bd G487f@G487a)) (set! G4884@p? (record-predicate G487d@G4878)) (set! G4886@make-undefined-violation (record-constructor G4881@G4879)) (set! G4888@undefined-violation? (condition-predicate G487d@G4878)) (set! G488a@&undefined-rtd G487d@G4878) (set! G488c@&undefined-rcd G4881@G4879) (set! G4892@G488d (make-record-type-descriptor '&i/o G47ac@G47a7 'G4890 '#f '#f '#())) (set! G4894@G488f '#f) (set! G4896@G488e (make-record-constructor-descriptor G4892@G488d G47b0@G47a8 G4894@G488f)) (set! G4899@p? (record-predicate G4892@G488d)) (set! G489b@make-i/o-error (record-constructor G4896@G488e)) (set! G489d@i/o-error? (condition-predicate G4892@G488d)) (set! G489f@&i/o-rtd G4892@G488d) (set! G48a1@&i/o-rcd G4896@G488e) (set! G48a7@G48a2 (make-record-type-descriptor '&i/o-read G4892@G488d 'G48a5 '#f '#f '#())) (set! G48a9@G48a4 '#f) (set! G48ab@G48a3 (make-record-constructor-descriptor G48a7@G48a2 G4896@G488e G48a9@G48a4)) (set! G48ae@p? (record-predicate G48a7@G48a2)) (set! G48b0@make-i/o-read-error (record-constructor G48ab@G48a3)) (set! G48b2@i/o-read-error? (condition-predicate G48a7@G48a2)) (set! G48b4@&i/o-read-rtd G48a7@G48a2) (set! G48b6@&i/o-read-rcd G48ab@G48a3) (set! G48bc@G48b7 (make-record-type-descriptor '&i/o-write G4892@G488d 'G48ba '#f '#f '#())) (set! G48be@G48b9 '#f) (set! G48c0@G48b8 (make-record-constructor-descriptor G48bc@G48b7 G4896@G488e G48be@G48b9)) (set! G48c3@p? (record-predicate G48bc@G48b7)) (set! G48c5@make-i/o-write-error (record-constructor G48c0@G48b8)) (set! G48c7@i/o-write-error? (condition-predicate G48bc@G48b7)) (set! G48c9@&i/o-write-rtd G48bc@G48b7) (set! G48cb@&i/o-write-rcd G48c0@G48b8) (set! G48d2@G48cd (make-record-type-descriptor '&i/o-invalid-position G4892@G488d 'G48d0 '#f '#f '#((immutable position)))) (set! G48d4@G48cf '#f) (set! G48d6@G48ce (make-record-constructor-descriptor G48d2@G48cd G4896@G488e G48d4@G48cf)) (set! G48d9@p? (record-predicate G48d2@G48cd)) (set! G48db@make-i/o-invalid-position-error (record-constructor G48d6@G48ce)) (set! G48dd@G48cc (record-accessor G48d2@G48cd '0)) (set! G48df@i/o-invalid-position-error? (condition-predicate G48d2@G48cd)) (set! G48e1@i/o-error-position (condition-accessor G48d2@G48cd G48dd@G48cc)) (set! G48e3@&i/o-invalid-position-rtd G48d2@G48cd) (set! G48e5@&i/o-invalid-position-rcd G48d6@G48ce) (set! G48ec@G48e7 (make-record-type-descriptor '&i/o-filename G4892@G488d 'G48ea '#f '#f '#((immutable filename)))) (set! G48ee@G48e9 '#f) (set! G48f0@G48e8 (make-record-constructor-descriptor G48ec@G48e7 G4896@G488e G48ee@G48e9)) (set! G48f3@p? (record-predicate G48ec@G48e7)) (set! G48f5@make-i/o-filename-error (record-constructor G48f0@G48e8)) (set! G48f7@G48e6 (record-accessor G48ec@G48e7 '0)) (set! G48f9@i/o-filename-error? (condition-predicate G48ec@G48e7)) (set! G48fb@i/o-error-filename (condition-accessor G48ec@G48e7 G48f7@G48e6)) (set! G48fd@&i/o-filename-rtd G48ec@G48e7) (set! G48ff@&i/o-filename-rcd G48f0@G48e8) (set! G4905@G4900 (make-record-type-descriptor '&i/o-file-protection G48ec@G48e7 'G4903 '#f '#f '#())) (set! G4907@G4902 '#f) (set! G4909@G4901 (make-record-constructor-descriptor G4905@G4900 G48f0@G48e8 G4907@G4902)) (set! G490c@p? (record-predicate G4905@G4900)) (set! G490e@make-i/o-file-protection-error (record-constructor G4909@G4901)) (set! G4910@i/o-file-protection-error? (condition-predicate G4905@G4900)) (set! G4912@&i/o-file-protection-rtd G4905@G4900) (set! G4914@&i/o-file-protection-rcd G4909@G4901) (set! G491a@G4915 (make-record-type-descriptor '&i/o-file-is-read-only G4905@G4900 'G4918 '#f '#f '#())) (set! G491c@G4917 '#f) (set! G491e@G4916 (make-record-constructor-descriptor G491a@G4915 G4909@G4901 G491c@G4917)) (set! G4921@p? (record-predicate G491a@G4915)) (set! G4923@make-i/o-file-is-read-only-error (record-constructor G491e@G4916)) (set! G4925@i/o-file-is-read-only-error? (condition-predicate G491a@G4915)) (set! G4927@&i/o-file-is-read-only-rtd G491a@G4915) (set! G4929@&i/o-file-is-read-only-rcd G491e@G4916) (set! G492f@G492a (make-record-type-descriptor '&i/o-file-already-exists G48ec@G48e7 'G492d '#f '#f '#())) (set! G4931@G492c '#f) (set! G4933@G492b (make-record-constructor-descriptor G492f@G492a G48f0@G48e8 G4931@G492c)) (set! G4936@p? (record-predicate G492f@G492a)) (set! G4938@make-i/o-file-already-exists-error (record-constructor G4933@G492b)) (set! G493a@i/o-file-already-exists-error? (condition-predicate G492f@G492a)) (set! G493c@&i/o-file-already-exists-rtd G492f@G492a) (set! G493e@&i/o-file-already-exists-rcd G4933@G492b) (set! G4944@G493f (make-record-type-descriptor '&i/o-file-does-not-exist G48ec@G48e7 'G4942 '#f '#f '#())) (set! G4946@G4941 '#f) (set! G4948@G4940 (make-record-constructor-descriptor G4944@G493f G48f0@G48e8 G4946@G4941)) (set! G494b@p? (record-predicate G4944@G493f)) (set! G494d@make-i/o-file-does-not-exist-error (record-constructor G4948@G4940)) (set! G494f@i/o-file-does-not-exist-error? (condition-predicate G4944@G493f)) (set! G4951@&i/o-file-does-not-exist-rtd G4944@G493f) (set! G4953@&i/o-file-does-not-exist-rcd G4948@G4940) (set! G495a@G4955 (make-record-type-descriptor '&i/o-port G4892@G488d 'G4958 '#f '#f '#((immutable port)))) (set! G495c@G4957 '#f) (set! G495e@G4956 (make-record-constructor-descriptor G495a@G4955 G4896@G488e G495c@G4957)) (set! G4961@p? (record-predicate G495a@G4955)) (set! G4963@make-i/o-port-error (record-constructor G495e@G4956)) (set! G4965@G4954 (record-accessor G495a@G4955 '0)) (set! G4967@i/o-port-error? (condition-predicate G495a@G4955)) (set! G4969@i/o-error-port (condition-accessor G495a@G4955 G4965@G4954)) (set! G496b@&i/o-port-rtd G495a@G4955) (set! G496d@&i/o-port-rcd G495e@G4956) (set! G4973@G496e (make-record-type-descriptor '&i/o-decoding G495a@G4955 'G4971 '#f '#f '#())) (set! G4975@G4970 '#f) (set! G4977@G496f (make-record-constructor-descriptor G4973@G496e G495e@G4956 G4975@G4970)) (set! G497a@p? (record-predicate G4973@G496e)) (set! G497c@make-i/o-decoding-error (record-constructor G4977@G496f)) (set! G497e@i/o-decoding-error? (condition-predicate G4973@G496e)) (set! G4980@&i/o-decoding-rtd G4973@G496e) (set! G4982@&i/o-decoding-rcd G4977@G496f) (set! G4989@G4984 (make-record-type-descriptor '&i/o-encoding G495a@G4955 'G4987 '#f '#f '#((immutable char)))) (set! G498b@G4986 '#f) (set! G498d@G4985 (make-record-constructor-descriptor G4989@G4984 G495e@G4956 G498b@G4986)) (set! G4990@p? (record-predicate G4989@G4984)) (set! G4992@make-i/o-encoding-error (record-constructor G498d@G4985)) (set! G4994@G4983 (record-accessor G4989@G4984 '0)) (set! G4996@i/o-encoding-error? (condition-predicate G4989@G4984)) (set! G4998@i/o-encoding-error-char (condition-accessor G4989@G4984 G4994@G4983)) (set! G499a@&i/o-encoding-rtd G4989@G4984) (set! G499c@&i/o-encoding-rcd G498d@G4985) (set! G49a2@G499d (make-record-type-descriptor '&no-infinities G4834@G482f 'G49a0 '#f '#f '#())) (set! G49a4@G499f '#f) (set! G49a6@G499e (make-record-constructor-descriptor G49a2@G499d G4838@G4830 G49a4@G499f)) (set! G49a9@p? (record-predicate G49a2@G499d)) (set! G49ab@make-no-infinities-violation (record-constructor G49a6@G499e)) (set! G49ad@no-infinities-violation? (condition-predicate G49a2@G499d)) (set! G49af@&no-infinities-rtd G49a2@G499d) (set! G49b1@&no-infinities-rcd G49a6@G499e) (set! G49b7@G49b2 (make-record-type-descriptor '&no-nans G4834@G482f 'G49b5 '#f '#f '#())) (set! G49b9@G49b4 '#f) (set! G49bb@G49b3 (make-record-constructor-descriptor G49b7@G49b2 G4838@G4830 G49b9@G49b4)) (set! G49be@p? (record-predicate G49b7@G49b2)) (set! G49c0@make-no-nans-violation (record-constructor G49bb@G49b3)) (set! G49c2@no-nans-violation? (condition-predicate G49b7@G49b2)) (set! G49c4@&no-nans-rtd G49b7@G49b2) (set! G49c6@&no-nans-rcd G49bb@G49b3) (begin (set! G4ab7@G49c6@&no-nans-rcd G49c6@&no-nans-rcd) (set! G4ab6@G49c4@&no-nans-rtd G49c4@&no-nans-rtd) (set! G4ab5@G49c2@no-nans-violation? G49c2@no-nans-violation?) (set! G4ab4@G49c0@make-no-nans-violation G49c0@make-no-nans-violation) (set! G4ab3@G49be@p? G49be@p?) (set! G4ab2@G49bb@G49b3 G49bb@G49b3) (set! G4ab1@G49b9@G49b4 G49b9@G49b4) (set! G4ab0@G49b7@G49b2 G49b7@G49b2) (set! G4aaf@G49b1@&no-infinities-rcd G49b1@&no-infinities-rcd) (set! G4aae@G49af@&no-infinities-rtd G49af@&no-infinities-rtd) (set! G4aad@G49ad@no-infinities-violation? G49ad@no-infinities-violation?) (set! G4aac@G49ab@make-no-infinities-violation G49ab@make-no-infinities-violation) (set! G4aab@G49a9@p? G49a9@p?) (set! G4aaa@G49a6@G499e G49a6@G499e) (set! G4aa9@G49a4@G499f G49a4@G499f) (set! G4aa8@G49a2@G499d G49a2@G499d) (set! G4aa7@G499c@&i/o-encoding-rcd G499c@&i/o-encoding-rcd) (set! G4aa6@G499a@&i/o-encoding-rtd G499a@&i/o-encoding-rtd) (set! G4aa5@G4998@i/o-encoding-error-char G4998@i/o-encoding-error-char) (set! G4aa4@G4996@i/o-encoding-error? G4996@i/o-encoding-error?) (set! G4aa3@G4994@G4983 G4994@G4983) (set! G4aa2@G4992@make-i/o-encoding-error G4992@make-i/o-encoding-error) (set! G4aa1@G4990@p? G4990@p?) (set! G4aa0@G498d@G4985 G498d@G4985) (set! G4a9f@G498b@G4986 G498b@G4986) (set! G4a9e@G4989@G4984 G4989@G4984) (set! G4a9d@G4982@&i/o-decoding-rcd G4982@&i/o-decoding-rcd) (set! G4a9c@G4980@&i/o-decoding-rtd G4980@&i/o-decoding-rtd) (set! G4a9b@G497e@i/o-decoding-error? G497e@i/o-decoding-error?) (set! G4a9a@G497c@make-i/o-decoding-error G497c@make-i/o-decoding-error) (set! G4a99@G497a@p? G497a@p?) (set! G4a98@G4977@G496f G4977@G496f) (set! G4a97@G4975@G4970 G4975@G4970) (set! G4a96@G4973@G496e G4973@G496e) (set! G4a95@G496d@&i/o-port-rcd G496d@&i/o-port-rcd) (set! G4a94@G496b@&i/o-port-rtd G496b@&i/o-port-rtd) (set! G4a93@G4969@i/o-error-port G4969@i/o-error-port) (set! G4a92@G4967@i/o-port-error? G4967@i/o-port-error?) (set! G4a91@G4965@G4954 G4965@G4954) (set! G4a90@G4963@make-i/o-port-error G4963@make-i/o-port-error) (set! G4a8f@G4961@p? G4961@p?) (set! G4a8e@G495e@G4956 G495e@G4956) (set! G4a8d@G495c@G4957 G495c@G4957) (set! G4a8c@G495a@G4955 G495a@G4955) (set! G4a8b@G4953@&i/o-file-does-not-exist-rcd G4953@&i/o-file-does-not-exist-rcd) (set! G4a8a@G4951@&i/o-file-does-not-exist-rtd G4951@&i/o-file-does-not-exist-rtd) (set! G4a89@G494f@i/o-file-does-not-exist-error? G494f@i/o-file-does-not-exist-error?) (set! G4a88@G494d@make-i/o-file-does-not-exist-error G494d@make-i/o-file-does-not-exist-error) (set! G4a87@G494b@p? G494b@p?) (set! G4a86@G4948@G4940 G4948@G4940) (set! G4a85@G4946@G4941 G4946@G4941) (set! G4a84@G4944@G493f G4944@G493f) (set! G4a83@G493e@&i/o-file-already-exists-rcd G493e@&i/o-file-already-exists-rcd) (set! G4a82@G493c@&i/o-file-already-exists-rtd G493c@&i/o-file-already-exists-rtd) (set! G4a81@G493a@i/o-file-already-exists-error? G493a@i/o-file-already-exists-error?) (set! G4a80@G4938@make-i/o-file-already-exists-error G4938@make-i/o-file-already-exists-error) (set! G4a7f@G4936@p? G4936@p?) (set! G4a7e@G4933@G492b G4933@G492b) (set! G4a7d@G4931@G492c G4931@G492c) (set! G4a7c@G492f@G492a G492f@G492a) (set! G4a7b@G4929@&i/o-file-is-read-only-rcd G4929@&i/o-file-is-read-only-rcd) (set! G4a7a@G4927@&i/o-file-is-read-only-rtd G4927@&i/o-file-is-read-only-rtd) (set! G4a79@G4925@i/o-file-is-read-only-error? G4925@i/o-file-is-read-only-error?) (set! G4a78@G4923@make-i/o-file-is-read-only-error G4923@make-i/o-file-is-read-only-error) (set! G4a77@G4921@p? G4921@p?) (set! G4a76@G491e@G4916 G491e@G4916) (set! G4a75@G491c@G4917 G491c@G4917) (set! G4a74@G491a@G4915 G491a@G4915) (set! G4a73@G4914@&i/o-file-protection-rcd G4914@&i/o-file-protection-rcd) (set! G4a72@G4912@&i/o-file-protection-rtd G4912@&i/o-file-protection-rtd) (set! G4a71@G4910@i/o-file-protection-error? G4910@i/o-file-protection-error?) (set! G4a70@G490e@make-i/o-file-protection-error G490e@make-i/o-file-protection-error) (set! G4a6f@G490c@p? G490c@p?) (set! G4a6e@G4909@G4901 G4909@G4901) (set! G4a6d@G4907@G4902 G4907@G4902) (set! G4a6c@G4905@G4900 G4905@G4900) (set! G4a6b@G48ff@&i/o-filename-rcd G48ff@&i/o-filename-rcd) (set! G4a6a@G48fd@&i/o-filename-rtd G48fd@&i/o-filename-rtd) (set! G4a69@G48fb@i/o-error-filename G48fb@i/o-error-filename) (set! G4a68@G48f9@i/o-filename-error? G48f9@i/o-filename-error?) (set! G4a67@G48f7@G48e6 G48f7@G48e6) (set! G4a66@G48f5@make-i/o-filename-error G48f5@make-i/o-filename-error) (set! G4a65@G48f3@p? G48f3@p?) (set! G4a64@G48f0@G48e8 G48f0@G48e8) (set! G4a63@G48ee@G48e9 G48ee@G48e9) (set! G4a62@G48ec@G48e7 G48ec@G48e7) (set! G4a61@G48e5@&i/o-invalid-position-rcd G48e5@&i/o-invalid-position-rcd) (set! G4a60@G48e3@&i/o-invalid-position-rtd G48e3@&i/o-invalid-position-rtd) (set! G4a5f@G48e1@i/o-error-position G48e1@i/o-error-position) (set! G4a5e@G48df@i/o-invalid-position-error? G48df@i/o-invalid-position-error?) (set! G4a5d@G48dd@G48cc G48dd@G48cc) (set! G4a5c@G48db@make-i/o-invalid-position-error G48db@make-i/o-invalid-position-error) (set! G4a5b@G48d9@p? G48d9@p?) (set! G4a5a@G48d6@G48ce G48d6@G48ce) (set! G4a59@G48d4@G48cf G48d4@G48cf) (set! G4a58@G48d2@G48cd G48d2@G48cd) (set! G4a57@G48cb@&i/o-write-rcd G48cb@&i/o-write-rcd) (set! G4a56@G48c9@&i/o-write-rtd G48c9@&i/o-write-rtd) (set! G4a55@G48c7@i/o-write-error? G48c7@i/o-write-error?) (set! G4a54@G48c5@make-i/o-write-error G48c5@make-i/o-write-error) (set! G4a53@G48c3@p? G48c3@p?) (set! G4a52@G48c0@G48b8 G48c0@G48b8) (set! G4a51@G48be@G48b9 G48be@G48b9) (set! G4a50@G48bc@G48b7 G48bc@G48b7) (set! G4a4f@G48b6@&i/o-read-rcd G48b6@&i/o-read-rcd) (set! G4a4e@G48b4@&i/o-read-rtd G48b4@&i/o-read-rtd) (set! G4a4d@G48b2@i/o-read-error? G48b2@i/o-read-error?) (set! G4a4c@G48b0@make-i/o-read-error G48b0@make-i/o-read-error) (set! G4a4b@G48ae@p? G48ae@p?) (set! G4a4a@G48ab@G48a3 G48ab@G48a3) (set! G4a49@G48a9@G48a4 G48a9@G48a4) (set! G4a48@G48a7@G48a2 G48a7@G48a2) (set! G4a47@G48a1@&i/o-rcd G48a1@&i/o-rcd) (set! G4a46@G489f@&i/o-rtd G489f@&i/o-rtd) (set! G4a45@G489d@i/o-error? G489d@i/o-error?) (set! G4a44@G489b@make-i/o-error G489b@make-i/o-error) (set! G4a43@G4899@p? G4899@p?) (set! G4a42@G4896@G488e G4896@G488e) (set! G4a41@G4894@G488f G4894@G488f) (set! G4a40@G4892@G488d G4892@G488d) (set! G4a3f@G488c@&undefined-rcd G488c@&undefined-rcd) (set! G4a3e@G488a@&undefined-rtd G488a@&undefined-rtd) (set! G4a3d@G4888@undefined-violation? G4888@undefined-violation?) (set! G4a3c@G4886@make-undefined-violation G4886@make-undefined-violation) (set! G4a3b@G4884@p? G4884@p?) (set! G4a3a@G4881@G4879 G4881@G4879) (set! G4a39@G487f@G487a G487f@G487a) (set! G4a38@G487d@G4878 G487d@G4878) (set! G4a37@G4877@&syntax-rcd G4877@&syntax-rcd) (set! G4a36@G4875@&syntax-rtd G4875@&syntax-rtd) (set! G4a35@G4873@syntax-violation-subform G4873@syntax-violation-subform) (set! G4a34@G4871@syntax-violation-form G4871@syntax-violation-form) (set! G4a33@G486f@syntax-violation? G486f@syntax-violation?) (set! G4a32@G486d@G485a G486d@G485a) (set! G4a31@G486b@G4859 G486b@G4859) (set! G4a30@G4869@make-syntax-violation G4869@make-syntax-violation) (set! G4a2f@G4867@p? G4867@p?) (set! G4a2e@G4864@G485c G4864@G485c) (set! G4a2d@G4862@G485d G4862@G485d) (set! G4a2c@G4860@G485b G4860@G485b) (set! G4a2b@G4858@&lexical-rcd G4858@&lexical-rcd) (set! G4a2a@G4856@&lexical-rtd G4856@&lexical-rtd) (set! G4a29@G4854@lexical-violation? G4854@lexical-violation?) (set! G4a28@G4852@make-lexical-violation G4852@make-lexical-violation) (set! G4a27@G4850@p? G4850@p?) (set! G4a26@G484d@G4845 G484d@G4845) (set! G4a25@G484b@G4846 G484b@G4846) (set! G4a24@G4849@G4844 G4849@G4844) (set! G4a23@G4843@&implementation-restriction-rcd G4843@&implementation-restriction-rcd) (set! G4a22@G4841@&implementation-restriction-rtd G4841@&implementation-restriction-rtd) (set! G4a21@G483f@implementation-restriction-violation? G483f@implementation-restriction-violation?) (set! G4a20@G483d@make-implementation-restriction-violation G483d@make-implementation-restriction-violation) (set! G4a1f@G483b@p? G483b@p?) (set! G4a1e@G4838@G4830 G4838@G4830) (set! G4a1d@G4836@G4831 G4836@G4831) (set! G4a1c@G4834@G482f G4834@G482f) (set! G4a1b@G482e@&non-continuable-rcd G482e@&non-continuable-rcd) (set! G4a1a@G482c@&non-continuable-rtd G482c@&non-continuable-rtd) (set! G4a19@G482a@non-continuable-violation? G482a@non-continuable-violation?) (set! G4a18@G4828@make-non-continuable-violation G4828@make-non-continuable-violation) (set! G4a17@G4826@p? G4826@p?) (set! G4a16@G4823@G481b G4823@G481b) (set! G4a15@G4821@G481c G4821@G481c) (set! G4a14@G481f@G481a G481f@G481a) (set! G4a13@G4819@&who-rcd G4819@&who-rcd) (set! G4a12@G4817@&who-rtd G4817@&who-rtd) (set! G4a11@G4815@condition-who G4815@condition-who) (set! G4a10@G4813@who-condition? G4813@who-condition?) (set! G4a0f@G4811@G4800 G4811@G4800) (set! G4a0e@G480f@make-who-condition G480f@make-who-condition) (set! G4a0d@G480d@p? G480d@p?) (set! G4a0c@G480a@G4802 G480a@G4802) (set! G4a0b@G4808@G4803 G4808@G4803) (set! G4a0a@G4806@G4801 G4806@G4801) (set! G4a09@G47ff@&irritants-rcd G47ff@&irritants-rcd) (set! G4a08@G47fd@&irritants-rtd G47fd@&irritants-rtd) (set! G4a07@G47fb@condition-irritants G47fb@condition-irritants) (set! G4a06@G47f9@irritants-condition? G47f9@irritants-condition?) (set! G4a05@G47f7@G47e6 G47f7@G47e6) (set! G4a04@G47f5@make-irritants-condition G47f5@make-irritants-condition) (set! G4a03@G47f3@p? G47f3@p?) (set! G4a02@G47f0@G47e8 G47f0@G47e8) (set! G4a01@G47ee@G47e9 G47ee@G47e9) (set! G4a00@G47ec@G47e7 G47ec@G47e7) (set! G49ff@G47e5@&assertion-rcd G47e5@&assertion-rcd) (set! G49fe@G47e3@&assertion-rtd G47e3@&assertion-rtd) (set! G49fd@G47e1@assertion-violation? G47e1@assertion-violation?) (set! G49fc@G47df@make-assertion-violation G47df@make-assertion-violation) (set! G49fb@G47dd@p? G47dd@p?) (set! G49fa@G47da@G47d2 G47da@G47d2) (set! G49f9@G47d8@G47d3 G47d8@G47d3) (set! G49f8@G47d6@G47d1 G47d6@G47d1) (set! G49f7@G47d0@&violation-rcd G47d0@&violation-rcd) (set! G49f6@G47ce@&violation-rtd G47ce@&violation-rtd) (set! G49f5@G47cc@violation? G47cc@violation?) (set! G49f4@G47ca@make-violation G47ca@make-violation) (set! G49f3@G47c8@p? G47c8@p?) (set! G49f2@G47c5@G47bd G47c5@G47bd) (set! G49f1@G47c3@G47be G47c3@G47be) (set! G49f0@G47c1@G47bc G47c1@G47bc) (set! G49ef@G47bb@&error-rcd G47bb@&error-rcd) (set! G49ee@G47b9@&error-rtd G47b9@&error-rtd) (set! G49ed@G47b7@error? G47b7@error?) (set! G49ec@G47b5@make-error G47b5@make-error) (set! G49eb@G47b3@p? G47b3@p?) (set! G49ea@G47b0@G47a8 G47b0@G47a8) (set! G49e9@G47ae@G47a9 G47ae@G47a9) (set! G49e8@G47ac@G47a7 G47ac@G47a7) (set! G49e7@G47a6@&serious-rcd G47a6@&serious-rcd) (set! G49e6@G47a4@&serious-rtd G47a4@&serious-rtd) (set! G49e5@G47a2@serious-condition? G47a2@serious-condition?) (set! G49e4@G47a0@make-serious-condition G47a0@make-serious-condition) (set! G49e3@G479e@p? G479e@p?) (set! G49e2@G479b@G4793 G479b@G4793) (set! G49e1@G4799@G4794 G4799@G4794) (set! G49e0@G4797@G4792 G4797@G4792) (set! G49df@G4791@&warning-rcd G4791@&warning-rcd) (set! G49de@G478f@&warning-rtd G478f@&warning-rtd) (set! G49dd@G478d@warning? G478d@warning?) (set! G49dc@G478b@make-warning G478b@make-warning) (set! G49db@G4789@p? G4789@p?) (set! G49da@G4786@G477e G4786@G477e) (set! G49d9@G4784@G477f G4784@G477f) (set! G49d8@G4782@G477d G4782@G477d) (set! G49d7@G477c@&message-rcd G477c@&message-rcd) (set! G49d6@G477a@&message-rtd G477a@&message-rtd) (set! G49d5@G4778@condition-message G4778@condition-message) (set! G49d4@G4776@message-condition? G4776@message-condition?) (set! G49d3@G4774@G4763 G4774@G4763) (set! G49d2@G4772@make-message-condition G4772@make-message-condition) (set! G49d1@G4770@p? G4770@p?) (set! G49d0@G476d@G4765 G476d@G4765) (set! G49cf@G476b@G4766 G476b@G4766) (set! G49ce@G4769@G4764 G4769@G4764) (set! G49cd@G4721@&condition-rcd G4721@&condition-rcd) (set! G49cc@G471f@&condition-rtd G471f@&condition-rtd) (set! G49cb@G471d@make-&condition G471d@make-&condition) (set! G49ca@G471b@&condition? G471b@&condition?) (set! G49c9@G4718@G4710 G4718@G4710) (set! G49c8@G4716@G4711 G4716@G4711) (set! G49c7@G4714@G470f G4714@G470f)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2745@G26fa@current-primitive-locations (lambda (G4eae@x) ((lambda (G4eb0@t) (if G4eb0@t (cdr G4eb0@t) '#f)) (assq G4eae@x '((&no-nans-rcd . G4ab7@G49c6@&no-nans-rcd) (&no-nans-rtd . G4ab6@G49c4@&no-nans-rtd) (&no-infinities-rcd . G4aaf@G49b1@&no-infinities-rcd) (&no-infinities-rtd . G4aae@G49af@&no-infinities-rtd) (&i/o-encoding-rcd . G4aa7@G499c@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4aa6@G499a@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4a9d@G4982@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4a9c@G4980@&i/o-decoding-rtd) (&i/o-port-rcd . G4a95@G496d@&i/o-port-rcd) (&i/o-port-rtd . G4a94@G496b@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4a8b@G4953@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4a8a@G4951@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4a83@G493e@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4a82@G493c@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4a7b@G4929@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4a7a@G4927@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4a73@G4914@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4a72@G4912@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4a6b@G48ff@&i/o-filename-rcd) (&i/o-filename-rtd . G4a6a@G48fd@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4a61@G48e5@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4a60@G48e3@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4a57@G48cb@&i/o-write-rcd) (&i/o-write-rtd . G4a56@G48c9@&i/o-write-rtd) (&i/o-read-rcd . G4a4f@G48b6@&i/o-read-rcd) (&i/o-read-rtd . G4a4e@G48b4@&i/o-read-rtd) (&i/o-rcd . G4a47@G48a1@&i/o-rcd) (&i/o-rtd . G4a46@G489f@&i/o-rtd) (&undefined-rcd . G4a3f@G488c@&undefined-rcd) (&undefined-rtd . G4a3e@G488a@&undefined-rtd) (&syntax-rcd . G4a37@G4877@&syntax-rcd) (&syntax-rtd . G4a36@G4875@&syntax-rtd) (&lexical-rcd . G4a2b@G4858@&lexical-rcd) (&lexical-rtd . G4a2a@G4856@&lexical-rtd) (&implementation-restriction-rcd . G4a23@G4843@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4a22@G4841@&implementation-restriction-rtd) (&non-continuable-rcd . G4a1b@G482e@&non-continuable-rcd) (&non-continuable-rtd . G4a1a@G482c@&non-continuable-rtd) (&who-rcd . G4a13@G4819@&who-rcd) (&who-rtd . G4a12@G4817@&who-rtd) (&irritants-rcd . G4a09@G47ff@&irritants-rcd) (&irritants-rtd . G4a08@G47fd@&irritants-rtd) (&assertion-rcd . G49ff@G47e5@&assertion-rcd) (&assertion-rtd . G49fe@G47e3@&assertion-rtd) (&violation-rcd . G49f7@G47d0@&violation-rcd) (&violation-rtd . G49f6@G47ce@&violation-rtd) (&error-rcd . G49ef@G47bb@&error-rcd) (&error-rtd . G49ee@G47b9@&error-rtd) (&serious-rcd . G49e7@G47a6@&serious-rcd) (&serious-rtd . G49e6@G47a4@&serious-rtd) (&warning-rcd . G49df@G4791@&warning-rcd) (&warning-rtd . G49de@G478f@&warning-rtd) (&message-rcd . G49d7@G477c@&message-rcd) (&message-rtd . G49d6@G477a@&message-rtd) (&condition-rcd . G49cd@G4721@&condition-rcd) (&condition-rtd . G49cc@G471f@&condition-rtd) (syntax-error . G4701@G2e18@syntax-error) (syntax-dispatch . G4695@G2d31@syntax-dispatch) (load . G4bc0@G4ad3@load) (interaction-environment . G4709@G2e28@interaction-environment) (library-path . G2956@G27eb@library-path) (make-parameter . G26f4@G2622@make-parameter) (make-variable-transformer . G4653@G2b78@make-variable-transformer) (identifier? . G4704@G2e1e@identifier?) (generate-temporaries . G46fa@G2e0a@generate-temporaries) (free-identifier=? . G46fb@G2e0c@free-identifier=?) (syntax->datum . G4706@G2e22@syntax->datum) (datum->syntax . G4705@G2e20@datum->syntax) (bound-identifier=? . G46fc@G2e0e@bound-identifier=?) (make-i/o-write-error . G4a54@G48c5@make-i/o-write-error) (make-i/o-read-error . G4a4c@G48b0@make-i/o-read-error) (make-i/o-port-error . G4a90@G4963@make-i/o-port-error) (make-i/o-invalid-position-error . G4a5c@G48db@make-i/o-invalid-position-error) (make-i/o-filename-error . G4a66@G48f5@make-i/o-filename-error) (make-i/o-file-protection-error . G4a70@G490e@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4a78@G4923@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4a88@G494d@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4a80@G4938@make-i/o-file-already-exists-error) (make-i/o-error . G4a44@G489b@make-i/o-error) (make-i/o-encoding-error . G4aa2@G4992@make-i/o-encoding-error) (make-i/o-decoding-error . G4a9a@G497c@make-i/o-decoding-error) (i/o-write-error? . G4a55@G48c7@i/o-write-error?) (i/o-read-error? . G4a4d@G48b2@i/o-read-error?) (i/o-port-error? . G4a92@G4967@i/o-port-error?) (i/o-invalid-position-error? . G4a5e@G48df@i/o-invalid-position-error?) (i/o-filename-error? . G4a68@G48f9@i/o-filename-error?) (i/o-file-protection-error? . G4a71@G4910@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4a79@G4925@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4a89@G494f@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4a81@G493a@i/o-file-already-exists-error?) (i/o-error? . G4a45@G489d@i/o-error?) (i/o-error-position . G4a5f@G48e1@i/o-error-position) (i/o-error-port . G4a93@G4969@i/o-error-port) (i/o-error-filename . G4a69@G48fb@i/o-error-filename) (i/o-encoding-error? . G4aa4@G4996@i/o-encoding-error?) (i/o-encoding-error-char . G4aa5@G4998@i/o-encoding-error-char) (i/o-decoding-error? . G4a9b@G497e@i/o-decoding-error?) (scheme-report-environment . G46f1@G2df8@scheme-report-environment) (null-environment . G46f0@G2df6@null-environment) (command-line . G4bbd@G4acd@command-line) (eval . G46f3@G2dfc@eval) (environment . G46ef@G2df4@environment) (who-condition? . G4a10@G4813@who-condition?) (warning? . G49dd@G478d@warning?) (violation? . G49f5@G47cc@violation?) (undefined-violation? . G4a3d@G4888@undefined-violation?) (syntax-violation? . G4a33@G486f@syntax-violation?) (syntax-violation-subform . G4a35@G4873@syntax-violation-subform) (syntax-violation-form . G4a34@G4871@syntax-violation-form) (syntax-violation . G4703@G2e1c@syntax-violation) (serious-condition? . G49e5@G47a2@serious-condition?) (non-continuable-violation? . G4a19@G482a@non-continuable-violation?) (message-condition? . G49d4@G4776@message-condition?) (make-who-condition . G4a0e@G480f@make-who-condition) (make-warning . G49dc@G478b@make-warning) (make-violation . G49f4@G47ca@make-violation) (make-undefined-violation . G4a3c@G4886@make-undefined-violation) (make-syntax-violation . G4a30@G4869@make-syntax-violation) (make-serious-condition . G49e4@G47a0@make-serious-condition) (make-non-continuable-violation . G4a18@G4828@make-non-continuable-violation) (make-message-condition . G49d2@G4772@make-message-condition) (make-lexical-violation . G4a28@G4852@make-lexical-violation) (make-irritants-condition . G4a04@G47f5@make-irritants-condition) (make-implementation-restriction-violation . G4a20@G483d@make-implementation-restriction-violation) (make-error . G49ec@G47b5@make-error) (make-assertion-violation . G49fc@G47df@make-assertion-violation) (lexical-violation? . G4a29@G4854@lexical-violation?) (irritants-condition? . G4a06@G47f9@irritants-condition?) (implementation-restriction-violation? . G4a21@G483f@implementation-restriction-violation?) (error? . G49ed@G47b7@error?) (condition-who . G4a11@G4815@condition-who) (condition-message . G49d5@G4778@condition-message) (condition-irritants . G4a07@G47fb@condition-irritants) (assertion-violation? . G49fd@G47e1@assertion-violation?) (no-nans-violation? . G4ab5@G49c2@no-nans-violation?) (no-infinities-violation? . G4aad@G49ad@no-infinities-violation?) (make-no-nans-violation . G4ab4@G49c0@make-no-nans-violation) (make-no-infinities-violation . G4aac@G49ab@make-no-infinities-violation)))))) (G2966@G280b@install-library 'G4e8b '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . G4e80) (format . G4e7d) (string-split . G4e72) (call-process . G4e6c) (set-current-directory! . G4e68) (expand-path . G4e67) (current-directory . G4e66) (%spawn . G4e65) (%waitpid . G4e64) (%ffi-supported? . G4e63) (%ffi-pointer-ref . G4e62) (%ffi-pointer->string . G4e61) (%ffi-call->string-or-zero . G4e60) (%ffi-call->double . G4e5f) (%ffi-call->void* . G4e5e) (%ffi-call->void . G4e5d) (%ffi-call->int . G4e5c) (%ffi-lookup . G4e5b) (%ffi-open . G4e5a) (%fork . G4e59) (%pipe . G4e58) (p . G4e57) (string-upcase . G4e46) (string-titlecase . G4e45) (string-normalize-nfkd . G4e44) (string-normalize-nfkc . G4e43) (string-normalize-nfd . G4e42) (string-normalize-nfc . G4e41) (string-foldcase . G4e40) (string-downcase . G4e3f) (string-ci>? . G4e3e) (string-ci>=? . G4e3d) (string-ci=? . G4e3c) (string-ci<? . G4e3b) (string-ci<=? . G4e3a) (char-whitespace? . G4e39) (char-upper-case? . G4e38) (char-title-case? . G4e37) (char-numeric? . G4e36) (char-lower-case? . G4e35) (char-general-category . G4e34) (char-upcase . G4e33) (char-titlecase . G4e32) (char-foldcase . G4e31) (char-downcase . G4e30) (char-ci>? . G4e2f) (char-ci>=? . G4e2e) (char-ci=? . G4e2d) (char-ci<? . G4e2c) (char-ci<=? . G4e2b) (char-alphabetic? . G4e2a) (make-variable-transformer . G2b77) (identifier? . G2e1d) (generate-temporaries . G2e09) (free-identifier=? . G2e0b) (syntax->datum . G2e21) (datum->syntax . G2e1f) (bound-identifier=? . G2e0d) (record-type-descriptor? . G4e29) (record-predicate . G4e28) (record-mutator . G4e27) (record-constructor . G4e26) (record-accessor . G4e25) (make-record-type-descriptor . G4e24) (make-record-constructor-descriptor . G4e23) (record? . G4e22) (record-type-uid . G4e21) (record-type-sealed? . G4e20) (record-type-parent . G4e1f) (record-type-opaque? . G4e1e) (record-type-name . G4e1d) (record-type-generative? . G4e1c) (record-type-field-names . G4e1b) (record-rtd . G4e1a) (record-field-mutable? . G4e19) (delete-file . G4e18) (file-exists? . G4e17) (vector-sort! . G4e16) (vector-sort . G4e15) (list-sort . G4e14) (symbol-hash . G4e13) (string-ci-hash . G4e12) (string-hash . G4e11) (equal-hash . G4e10) (hashtable-equivalence-function . G4e0f) (make-hashtable . G4e0e) (hashtable-hash-function . G4e0d) (make-eqv-hashtable . G4e0c) (make-eq-hashtable . G4e0b) (hashtable? . G4e0a) (hashtable-update! . G4e09) (hashtable-size . G4e08) (hashtable-set! . G4e07) (hashtable-ref . G4e06) (hashtable-mutable? . G4e05) (hashtable-keys . G4e04) (hashtable-entries . G4e03) (hashtable-delete! . G4e02) (hashtable-copy . G4e01) (hashtable-contains? . G4e00) (hashtable-clear! . G4dff) (call-with-output-file . G4dfe) (call-with-input-file . G4dfd) (write-char . G4dfc) (write . G4dfb) (with-output-to-file . G4dfa) (with-input-from-file . G4df9) (read-char . G4df8) (read . G4df7) (peek-char . G4df6) (open-output-file . G4df5) (open-input-file . G4df4) (newline . G4df3) (display . G4df2) (close-output-port . G4df1) (close-input-port . G4df0) (eof-object? . G4def) (eof-object . G4dee) (current-error-port . G4ded) (current-output-port . G4dec) (current-input-port . G4deb) (output-port? . G4dea) (input-port? . G4de9) (utf-8-codec . G4de8) (utf-16-codec . G4de7) (transcoder-error-handling-mode . G4de6) (transcoder-eol-style . G4de5) (transcoder-codec . G4de4) (transcoded-port . G4de3) (textual-port? . G4de2) (string->bytevector . G4de1) (standard-output-port . G4de0) (standard-input-port . G4ddf) (standard-error-port . G4dde) (set-port-position! . G4ddd) (put-u8 . G4ddc) (put-string . G4ddb) (put-datum . G4dda) (put-char . G4dd9) (put-bytevector . G4dd8) (port? . G4dd7) (port-transcoder . G4dd6) (port-position . G4dd5) (port-has-set-port-position!? . G4dd4) (port-has-port-position? . G4dd3) (port-eof? . G4dd2) (output-port-buffer-mode . G4dd1) (open-string-output-port . G4dd0) (open-string-input-port . G4dcf) (open-file-output-port . G4dce) (open-file-input/output-port . G4dcd) (open-file-input-port . G4dcc) (open-bytevector-output-port . G4dcb) (open-bytevector-input-port . G4dca) (native-transcoder . G4dc9) (native-eol-style . G4dc8) (make-transcoder . G4dc7) (latin-1-codec . G4dc6) (make-i/o-write-error . G48c4) (make-i/o-read-error . G48af) (make-i/o-port-error . G4962) (make-i/o-invalid-position-error . G48da) (make-i/o-filename-error . G48f4) (make-i/o-file-protection-error . G490d) (make-i/o-file-is-read-only-error . G4922) (make-i/o-file-does-not-exist-error . G494c) (make-i/o-file-already-exists-error . G4937) (make-i/o-error . G489a) (make-i/o-encoding-error . G4991) (make-i/o-decoding-error . G497b) (make-custom-textual-output-port . G4dc5) (make-custom-textual-input/output-port . G4dc4) (make-custom-textual-input-port . G4dc3) (make-custom-binary-output-port . G4dc2) (make-custom-binary-input/output-port . G4dc1) (make-custom-binary-input-port . G4dc0) (make-bytevector . G4dbf) (lookahead-u8 . G4dbe) (lookahead-char . G4dbd) (i/o-write-error? . G48c6) (i/o-read-error? . G48b1) (i/o-port-error? . G4966) (i/o-invalid-position-error? . G48de) (i/o-filename-error? . G48f8) (i/o-file-protection-error? . G490f) (i/o-file-is-read-only-error? . G4924) (i/o-file-does-not-exist-error? . G494e) (i/o-file-already-exists-error? . G4939) (i/o-error? . G489c) (i/o-error-position . G48e0) (i/o-error-port . G4968) (i/o-error-filename . G48fa) (i/o-encoding-error? . G4995) (i/o-encoding-error-char . G4997) (i/o-decoding-error? . G497d) (get-u8 . G4dbc) (get-string-n! . G4dbb) (get-string-n . G4dba) (get-string-all . G4db9) (get-line . G4db8) (get-datum . G4db7) (get-char . G4db6) (get-bytevector-some . G4db5) (get-bytevector-n! . G4db4) (get-bytevector-n . G4db3) (get-bytevector-all . G4db2) (flush-output-port . G4db1) (close-port . G4db0) (exit . G4da8) (command-line . G4acc) (string-fill! . G4da7) (string-set! . G4da6) (set-cdr! . G4da5) (set-car! . G4da4) (remove . G4da3) (remv . G4da2) (remp . G4da1) (remq . G4da0) (partition . G4d9f) (memv . G4d9e) (memq . G4d9d) (memp . G4d9c) (member . G4d9b) (exists . G4d9a) (for-all . G4d99) (fold-right . G4d98) (fold-left . G4d97) (find . G4d96) (filter . G4d95) (cons* . G4d94) (assv . G4d93) (assq . G4d92) (assp . G4d91) (assoc . G4d90) (call-with-string-output-port . G4d8f) (call-with-port . G4d8e) (call-with-bytevector-output-port . G4d8d) (bytevector->string . G4d8c) (buffer-mode? . G4d8b) (binary-port? . G4d8a) (with-exception-handler . G4d89) (raise-continuable . G4d88) (raise . G4d87) (eval . G2dfb) (environment . G2df3) (make-enumeration . G4d86) (enum-set=? . G4d85) (enum-set-universe . G4d84) (enum-set-union . G4d83) (enum-set-subset? . G4d82) (enum-set-projection . G4d81) (enum-set-member? . G4d80) (enum-set-intersection . G4d7f) (enum-set-indexer . G4d7e) (enum-set-difference . G4d7d) (enum-set-constructor . G4d7c) (enum-set-complement . G4d7b) (enum-set->list . G4d7a) (who-condition? . G4812) (warning? . G478c) (violation? . G47cb) (undefined-violation? . G4887) (syntax-violation? . G486e) (syntax-violation-subform . G4872) (syntax-violation-form . G4870) (syntax-violation . G2e1b) (simple-conditions . G4d79) (serious-condition? . G47a1) (non-continuable-violation? . G4829) (message-condition? . G4775) (make-who-condition . G480e) (make-warning . G478a) (make-violation . G47c9) (make-undefined-violation . G4885) (make-syntax-violation . G4868) (make-serious-condition . G479f) (make-non-continuable-violation . G4827) (make-message-condition . G4771) (make-lexical-violation . G4851) (make-irritants-condition . G47f4) (make-implementation-restriction-violation . G483c) (make-error . G47b4) (make-assertion-violation . G47de) (lexical-violation? . G4853) (irritants-condition? . G47f8) (implementation-restriction-violation? . G483e) (error? . G47b6) (condition-who . G4814) (condition-predicate . G4d78) (condition-message . G4777) (condition-irritants . G47fa) (condition-accessor . G4d77) (condition . G4d76) (assertion-violation? . G47e0) (condition? . G4d75) (utf32->string . G4d74) (utf16->string . G4d73) (utf8->string . G4d72) (uint-list->bytevector . G4d71) (u8-list->bytevector . G4d70) (string->utf8 . G4d6f) (string->utf32 . G4d6e) (string->utf16 . G4d6d) (sint-list->bytevector . G4d6c) (native-endianness . G4d6b) (bytevector? . G4d6a) (bytevector=? . G4d69) (bytevector-uint-set! . G4d68) (bytevector-uint-ref . G4d67) (bytevector-u8-set! . G4d66) (bytevector-u8-ref . G4d65) (bytevector-u64-set! . G4d64) (bytevector-u64-ref . G4d63) (bytevector-u64-native-set! . G4d62) (bytevector-u64-native-ref . G4d61) (bytevector-u32-set! . G4d60) (bytevector-u32-ref . G4d5f) (bytevector-u32-native-set! . G4d5e) (bytevector-u32-native-ref . G4d5d) (bytevector-u16-set! . G4d5c) (bytevector-u16-ref . G4d5b) (bytevector-u16-native-set! . G4d5a) (bytevector-u16-native-ref . G4d59) (bytevector-sint-set! . G4d58) (bytevector-sint-ref . G4d57) (bytevector-s8-set! . G4d56) (bytevector-s8-ref . G4d55) (bytevector-s64-set! . G4d54) (bytevector-s64-ref . G4d53) (bytevector-s64-native-set! . G4d52) (bytevector-s64-native-ref . G4d51) (bytevector-s32-set! . G4d50) (bytevector-s32-ref . G4d4f) (bytevector-s32-native-set! . G4d4e) (bytevector-s32-native-ref . G4d4d) (bytevector-s16-set! . G4d4c) (bytevector-s16-ref . G4d4b) (bytevector-s16-native-set! . G4d4a) (bytevector-s16-native-ref . G4d49) (bytevector-length . G4d48) (bytevector-ieee-single-ref . G4d47) (bytevector-ieee-single-set! . G4d46) (bytevector-ieee-single-native-set! . G4d45) (bytevector-ieee-single-native-ref . G4d44) (bytevector-ieee-double-set! . G4d43) (bytevector-ieee-double-ref . G4d42) (bytevector-ieee-double-native-set! . G4d41) (bytevector-ieee-double-native-ref . G4d40) (bytevector-fill! . G4d3f) (bytevector-copy! . G4d3e) (bytevector-copy . G4d3d) (bytevector->uint-list . G4d3c) (bytevector->u8-list . G4d3b) (bytevector->sint-list . G4d3a) (no-nans-violation? . G49c1) (no-infinities-violation? . G49ac) (make-no-nans-violation . G49bf) (make-no-infinities-violation . G49aa) (real->flonum . G4d39) (flzero? . G4d38) (fltruncate . G4d37) (fltan . G4d36) (flsqrt . G4d35) (flsin . G4d34) (flround . G4d33) (flpositive? . G4d32) (flonum? . G4d31) (flodd? . G4d30) (flnumerator . G4d2f) (flnegative? . G4d2e) (flnan? . G4d2d) (flmod0 . G4d2c) (flmod . G4d2b) (flmin . G4d2a) (flmax . G4d29) (fllog . G4d28) (flinteger? . G4d27) (flinfinite? . G4d26) (flfloor . G4d25) (flfinite? . G4d24) (flexpt . G4d23) (flexp . G4d22) (fleven? . G4d21) (fldiv0-and-mod0 . G4d20) (fldiv0 . G4d1f) (fldiv-and-mod . G4d1e) (fldiv . G4d1d) (fldenominator . G4d1c) (flcos . G4d1b) (flceiling . G4d1a) (flatan . G4d19) (flasin . G4d18) (flacos . G4d17) (flabs . G4d16) (fl>? . G4d15) (fl>=? . G4d14) (fl=? . G4d13) (fl<? . G4d12) (fl<=? . G4d11) (fl/ . G4d10) (fl- . G4d0f) (fl+ . G4d0e) (fl* . G4d0d) (fixnum->flonum . G4d0c) (fxzero? . G4d0b) (fxxor . G4d0a) (fxrotate-bit-field . G4d09) (fxreverse-bit-field . G4d08) (fxpositive? . G4d07) (fxodd? . G4d06) (fxnot . G4d05) (fxnegative? . G4d04) (fxmod0 . G4d03) (fxmod . G4d02) (fxmin . G4d01) (fxmax . G4d00) (fxlength . G4cff) (fxior . G4cfe) (fxif . G4cfd) (fxfirst-bit-set . G4cfc) (fxeven? . G4cfb) (fxdiv0-and-mod0 . G4cfa) (fxdiv0 . G4cf9) (fxdiv-and-mod . G4cf8) (fxdiv . G4cf7) (fxcopy-bit-field . G4cf6) (fxcopy-bit . G4cf5) (fxbit-set? . G4cf4) (fxbit-field . G4cf3) (fxbit-count . G4cf2) (fxarithmetic-shift-right . G4cf1) (fxarithmetic-shift-left . G4cf0) (fxarithmetic-shift . G4cef) (fxand . G4cee) (fx>? . G4ced) (fx>=? . G4cec) (fx=? . G4ceb) (fx<? . G4cea) (fx<=? . G4ce9) (fx-/carry . G4ce8) (fx- . G4ce7) (fx+/carry . G4ce6) (fx+ . G4ce5) (fx*/carry . G4ce4) (fx* . G4ce3) (greatest-fixnum . G4ce2) (least-fixnum . G4ce1) (fixnum-width . G4ce0) (fixnum? . G4cdf) (bitwise-rotate-bit-field . G4cde) (bitwise-reverse-bit-field . G4cdd) (bitwise-length . G4cdc) (bitwise-if . G4cdb) (bitwise-first-bit-set . G4cda) (bitwise-copy-bit-field . G4cd9) (bitwise-copy-bit . G4cd8) (bitwise-bit-set? . G4cd7) (bitwise-bit-field . G4cd6) (bitwise-bit-count . G4cd5) (bitwise-xor . G4cd4) (bitwise-ior . G4cd3) (bitwise-and . G4cd2) (bitwise-not . G4cd1) (bitwise-arithmetic-shift-right . G4cd0) (bitwise-arithmetic-shift-left . G4ccf) (bitwise-arithmetic-shift . G4cce) (zero? . G4ccd) (vector? . G4ccc) (vector-set! . G4ccb) (vector-ref . G4cca) (vector-map . G4cc9) (vector-length . G4cc8) (vector-for-each . G4cc7) (vector-fill! . G4cc6) (vector->list . G4cc5) (vector . G4cc4) (values . G4cc3) (truncate . G4cc2) (tan . G4cc1) (symbol? . G4cc0) (symbol=? . G4cbf) (symbol->string . G4cbe) (substring . G4cbd) (string? . G4cbc) (string>? . G4cbb) (string>=? . G4cba) (string=? . G4cb9) (string<? . G4cb8) (string<=? . G4cb7) (string-ref . G4cb6) (string-length . G4cb5) (string-for-each . G4cb4) (string-copy . G4cb3) (string-append . G4cb2) (string->symbol . G4cb1) (string->number . G4cb0) (string->list . G4caf) (string . G4cae) (sqrt . G4cad) (sin . G4cac) (round . G4cab) (reverse . G4caa) (real? . G4ca9) (real-valued? . G4ca8) (real-part . G4ca7) (rationalize . G4ca6) (rational? . G4ca5) (rational-valued? . G4ca4) (procedure? . G4ca3) (positive? . G4ca2) (pair? . G4ca1) (odd? . G4ca0) (numerator . G4c9f) (number? . G4c9e) (number->string . G4c9d) (null? . G4c9c) (not . G4c9b) (negative? . G4c9a) (nan? . G4c99) (min . G4c98) (max . G4c97) (map . G4c96) (make-vector . G4c95) (make-string . G4c94) (make-rectangular . G4c93) (make-polar . G4c92) (magnitude . G4c91) (log . G4c90) (list? . G4c8f) (list-tail . G4c8e) (list-ref . G4c8d) (list->vector . G4c8c) (list->string . G4c8b) (list . G4c8a) (length . G4c89) (lcm . G4c88) (integer? . G4c87) (integer-valued? . G4c86) (integer->char . G4c85) (infinite? . G4c84) (inexact? . G4c83) (inexact . G4c82) (imag-part . G4c81) (gcd . G4c80) (for-each . G4c7f) (floor . G4c7e) (finite? . G4c7d) (expt . G4c7c) (exp . G4c7b) (exact? . G4c7a) (exact-integer-sqrt . G4c79) (exact . G4c78) (even? . G4c77) (error . G4c76) (eqv? . G4c75) (equal? . G4c74) (eq? . G4c73) (dynamic-wind . G4c72) (div0-and-mod0 . G4c71) (mod0 . G4c70) (div0 . G4c6f) (div-and-mod . G4c6e) (mod . G4c6d) (div . G4c6c) (denominator . G4c6b) (cos . G4c6a) (cons . G4c69) (complex? . G4c68) (char? . G4c67) (char>? . G4c66) (char>=? . G4c65) (char=? . G4c64) (char<? . G4c63) (char<=? . G4c62) (char->integer . G4c61) (ceiling . G4c60) (call-with-values . G4c5f) (call/cc . G4c5e) (call-with-current-continuation . G4c5d) (cddddr . G4c5c) (cdddar . G4c5b) (cddadr . G4c5a) (cddaar . G4c59) (cdaddr . G4c58) (cdadar . G4c57) (cdaadr . G4c56) (cdaaar . G4c55) (cadddr . G4c54) (caddar . G4c53) (cadadr . G4c52) (cadaar . G4c51) (caaddr . G4c50) (caadar . G4c4f) (caaadr . G4c4e) (caaaar . G4c4d) (cdddr . G4c4c) (cddar . G4c4b) (cdadr . G4c4a) (cdaar . G4c49) (caddr . G4c48) (cadar . G4c47) (caadr . G4c46) (caaar . G4c45) (cddr . G4c44) (cdar . G4c43) (cadr . G4c42) (caar . G4c41) (cdr . G4c40) (car . G4c3f) (boolean? . G4c3e) (boolean=? . G4c3d) (atan . G4c3c) (assertion-violation . G4c3b) (asin . G4c3a) (apply . G4c39) (append . G4c38) (angle . G4c37) (acos . G4c36) (abs . G4c35) (/ . G4c34) (* . G4c33) (- . G4c32) (+ . G4c31) (>= . G4c30) (> . G4c2f) (= . G4c2e) (<= . G4c2d) (< . G4c2c) (library . G4c2b) (&no-nans . G4c2a) (&no-infinities . G4c29) (&i/o-encoding . G4c28) (&i/o-decoding . G4c27) (&i/o-port . G4c26) (&i/o-file-does-not-exist . G4c25) (&i/o-file-already-exists . G4c24) (&i/o-file-is-read-only . G4c23) (&i/o-file-protection . G4c22) (&i/o-filename . G4c21) (&i/o-invalid-position . G4c20) (&i/o-write . G4c1f) (&i/o-read . G4c1e) (&i/o . G4c1d) (&undefined . G4c1c) (&syntax . G4c1b) (&lexical . G4c1a) (&implementation-restriction . G4c19) (&non-continuable . G4c18) (&who . G4c17) (&irritants . G4c16) (&assertion . G4c15) (&violation . G4c14) (&error . G4c13) (&serious . G4c12) (&warning . G4c11) (&message . G4c10) (&condition . G4c0f) (define-condition-type . G4c0e) (define-enumeration . G4c0d) (define-record-type . G4c0c) (parent-rtd . G4c0b) (nongenerative . G4c0a) (opaque . G4c09) (sealed . G4c08) (protocol . G4c07) (parent . G4c06) (immutable . G4c05) (mutable . G4c04) (fields . G4c03) (error-handling-mode . G4c02) (file-options . G4c01) (buffer-mode . G4c00) (eol-style . G4bff) (guard . G4bfe) (unsyntax-splicing . G4bfb) (unsyntax . G4bfa) (unquote-splicing . G4bf9) (unquote . G4bf8) (_ . G4bf7) (else . G4bf6) (=> . G4bf5) (... . G4bf4) (assert . G4bf3) (endianness . G4bf2) (do . G4bef) (cond . G4bee) (let* . G4bed) (let . G4bec) (let*-values . G4beb) (let-values . G4bea) (identifier-syntax . G4be9) (with-syntax . G4be8) (quasisyntax . G4be7) (quasiquote . G4be6) (syntax-rules . G4be5) (include . G4be4) (record-constructor-descriptor . G4be2) (record-type-descriptor . G4be1) (case . G4be0) (unless . G4bde) (when . G4bdd) (or . G4bdc) (and . G4bdb) (if . G4bda) (letrec* . G4bd9) (letrec . G4bd8) (case-lambda . G4bd6) (lambda . G4bd5) (syntax . G4bd4) (syntax-case . G4bd3) (quote . G4bd2) (letrec-syntax . G4bd0) (let-syntax . G4bcf) (set! . G4bce) (import . G4bcd) (begin . G4bcc) (define-syntax . G4bca) (define . G4bc9)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e8c '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4da9) (unquote-splicing . G4bf9) (unquote . G4bf8) (_ . G4bf7) (else . G4bf6) (=> . G4bf5) (... . G4bf4) (delay . G4bf1) (do . G4bef) (cond . G4bee) (let* . G4bed) (let . G4bec) (quasiquote . G4be6) (syntax-rules . G4be5) (case . G4be0) (or . G4bdc) (and . G4bdb) (if . G4bda) (letrec . G4bd8) (lambda . G4bd5) (quote . G4bd2) (letrec-syntax . G4bd0) (let-syntax . G4bcf) (set! . G4bce) (begin . G4bcc) (define-syntax . G4bca) (define . G4bc9)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e8d '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G4e3e) (string-ci>=? . G4e3d) (string-ci=? . G4e3c) (string-ci<? . G4e3b) (string-ci<=? . G4e3a) (char-whitespace? . G4e39) (char-upper-case? . G4e38) (char-numeric? . G4e36) (char-lower-case? . G4e35) (char-upcase . G4e33) (char-downcase . G4e30) (char-ci>? . G4e2f) (char-ci>=? . G4e2e) (char-ci=? . G4e2d) (char-ci<? . G4e2c) (char-ci<=? . G4e2b) (char-alphabetic? . G4e2a) (call-with-output-file . G4dfe) (call-with-input-file . G4dfd) (write-char . G4dfc) (write . G4dfb) (with-output-to-file . G4dfa) (with-input-from-file . G4df9) (read-char . G4df8) (read . G4df7) (peek-char . G4df6) (open-output-file . G4df5) (open-input-file . G4df4) (newline . G4df3) (display . G4df2) (close-output-port . G4df1) (close-input-port . G4df0) (eof-object . G4dee) (current-output-port . G4dec) (current-input-port . G4deb) (output-port? . G4dea) (input-port? . G4de9) (scheme-report-environment . G2df7) (quotient . G4daf) (null-environment . G2df5) (remainder . G4dae) (modulo . G4dad) (inexact->exact . G4dac) (force . G4dab) (exact->inexact . G4daa) (make-promise . G4da9) (string-fill! . G4da7) (string-set! . G4da6) (set-cdr! . G4da5) (set-car! . G4da4) (memv . G4d9e) (memq . G4d9d) (member . G4d9b) (assv . G4d93) (assq . G4d92) (assoc . G4d90) (eval . G2dfb) (zero? . G4ccd) (vector? . G4ccc) (vector-set! . G4ccb) (vector-ref . G4cca) (vector-length . G4cc8) (vector-fill! . G4cc6) (vector->list . G4cc5) (vector . G4cc4) (values . G4cc3) (truncate . G4cc2) (tan . G4cc1) (symbol? . G4cc0) (symbol->string . G4cbe) (substring . G4cbd) (string? . G4cbc) (string>? . G4cbb) (string>=? . G4cba) (string=? . G4cb9) (string<? . G4cb8) (string<=? . G4cb7) (string-ref . G4cb6) (string-length . G4cb5) (string-copy . G4cb3) (string-append . G4cb2) (string->symbol . G4cb1) (string->number . G4cb0) (string->list . G4caf) (string . G4cae) (sqrt . G4cad) (sin . G4cac) (round . G4cab) (reverse . G4caa) (real? . G4ca9) (real-part . G4ca7) (rationalize . G4ca6) (rational? . G4ca5) (procedure? . G4ca3) (positive? . G4ca2) (pair? . G4ca1) (odd? . G4ca0) (numerator . G4c9f) (number? . G4c9e) (number->string . G4c9d) (not . G4c9b) (negative? . G4c9a) (min . G4c98) (max . G4c97) (map . G4c96) (make-vector . G4c95) (make-string . G4c94) (make-rectangular . G4c93) (make-polar . G4c92) (magnitude . G4c91) (log . G4c90) (list? . G4c8f) (list-tail . G4c8e) (list-ref . G4c8d) (list->vector . G4c8c) (list->string . G4c8b) (list . G4c8a) (length . G4c89) (lcm . G4c88) (integer? . G4c87) (integer->char . G4c85) (inexact? . G4c83) (imag-part . G4c81) (gcd . G4c80) (for-each . G4c7f) (floor . G4c7e) (expt . G4c7c) (exp . G4c7b) (exact? . G4c7a) (even? . G4c77) (eqv? . G4c75) (equal? . G4c74) (eq? . G4c73) (dynamic-wind . G4c72) (denominator . G4c6b) (cos . G4c6a) (cons . G4c69) (complex? . G4c68) (char? . G4c67) (char>? . G4c66) (char>=? . G4c65) (char=? . G4c64) (char<? . G4c63) (char<=? . G4c62) (char->integer . G4c61) (ceiling . G4c60) (call-with-values . G4c5f) (call-with-current-continuation . G4c5d) (cddddr . G4c5c) (cdddar . G4c5b) (cddadr . G4c5a) (cddaar . G4c59) (cdaddr . G4c58) (cdadar . G4c57) (cdaadr . G4c56) (cdaaar . G4c55) (cadddr . G4c54) (caddar . G4c53) (cadadr . G4c52) (cadaar . G4c51) (caaddr . G4c50) (caadar . G4c4f) (caaadr . G4c4e) (caaaar . G4c4d) (cdddr . G4c4c) (cddar . G4c4b) (cdadr . G4c4a) (cdaar . G4c49) (caddr . G4c48) (cadar . G4c47) (caadr . G4c46) (caaar . G4c45) (cddr . G4c44) (cdar . G4c43) (cadr . G4c42) (caar . G4c41) (cdr . G4c40) (car . G4c3f) (boolean? . G4c3e) (atan . G4c3c) (asin . G4c3a) (apply . G4c39) (append . G4c38) (angle . G4c37) (acos . G4c36) (abs . G4c35) (/ . G4c34) (* . G4c33) (- . G4c32) (+ . G4c31) (>= . G4c30) (> . G4c2f) (= . G4c2e) (<= . G4c2d) (< . G4c2c) (unquote-splicing . G4bf9) (unquote . G4bf8) (else . G4bf6) (=> . G4bf5) (... . G4bf4) (delay . G4bf1) (do . G4bef) (cond . G4bee) (let* . G4bed) (let . G4bec) (quasiquote . G4be6) (syntax-rules . G4be5) (case . G4be0) (or . G4bdc) (and . G4bdb) (if . G4bda) (letrec . G4bd8) (lambda . G4bd5) (quote . G4bd2) (letrec-syntax . G4bd0) (let-syntax . G4bcf) (set! . G4bce) (begin . G4bcc) (define-syntax . G4bca) (define . G4bc9)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e8e '(psyntax modules) '() '() '() '() '((module . G4bcb)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e8f '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e90 '(rnrs) '(6) '() '() '() '((regexp? . G4e83) (string-upcase . G4e46) (string-titlecase . G4e45) (string-normalize-nfkd . G4e44) (string-normalize-nfkc . G4e43) (string-normalize-nfd . G4e42) (string-normalize-nfc . G4e41) (string-foldcase . G4e40) (string-downcase . G4e3f) (string-ci>? . G4e3e) (string-ci>=? . G4e3d) (string-ci=? . G4e3c) (string-ci<? . G4e3b) (string-ci<=? . G4e3a) (char-whitespace? . G4e39) (char-upper-case? . G4e38) (char-title-case? . G4e37) (char-numeric? . G4e36) (char-lower-case? . G4e35) (char-general-category . G4e34) (char-upcase . G4e33) (char-titlecase . G4e32) (char-foldcase . G4e31) (char-downcase . G4e30) (char-ci>? . G4e2f) (char-ci>=? . G4e2e) (char-ci=? . G4e2d) (char-ci<? . G4e2c) (char-ci<=? . G4e2b) (char-alphabetic? . G4e2a) (make-variable-transformer . G2b77) (identifier? . G2e1d) (generate-temporaries . G2e09) (free-identifier=? . G2e0b) (syntax->datum . G2e21) (datum->syntax . G2e1f) (bound-identifier=? . G2e0d) (record-type-descriptor? . G4e29) (record-predicate . G4e28) (record-mutator . G4e27) (record-constructor . G4e26) (record-accessor . G4e25) (make-record-type-descriptor . G4e24) (make-record-constructor-descriptor . G4e23) (record? . G4e22) (record-type-uid . G4e21) (record-type-sealed? . G4e20) (record-type-parent . G4e1f) (record-type-opaque? . G4e1e) (record-type-name . G4e1d) (record-type-generative? . G4e1c) (record-type-field-names . G4e1b) (record-rtd . G4e1a) (record-field-mutable? . G4e19) (delete-file . G4e18) (file-exists? . G4e17) (vector-sort! . G4e16) (vector-sort . G4e15) (list-sort . G4e14) (symbol-hash . G4e13) (string-ci-hash . G4e12) (string-hash . G4e11) (equal-hash . G4e10) (hashtable-equivalence-function . G4e0f) (make-hashtable . G4e0e) (hashtable-hash-function . G4e0d) (make-eqv-hashtable . G4e0c) (make-eq-hashtable . G4e0b) (hashtable? . G4e0a) (hashtable-update! . G4e09) (hashtable-size . G4e08) (hashtable-set! . G4e07) (hashtable-ref . G4e06) (hashtable-mutable? . G4e05) (hashtable-keys . G4e04) (hashtable-entries . G4e03) (hashtable-delete! . G4e02) (hashtable-copy . G4e01) (hashtable-contains? . G4e00) (hashtable-clear! . G4dff) (call-with-output-file . G4dfe) (call-with-input-file . G4dfd) (write-char . G4dfc) (write . G4dfb) (with-output-to-file . G4dfa) (with-input-from-file . G4df9) (read-char . G4df8) (read . G4df7) (peek-char . G4df6) (open-output-file . G4df5) (open-input-file . G4df4) (newline . G4df3) (display . G4df2) (close-output-port . G4df1) (close-input-port . G4df0) (eof-object? . G4def) (eof-object . G4dee) (current-error-port . G4ded) (current-output-port . G4dec) (current-input-port . G4deb) (output-port? . G4dea) (input-port? . G4de9) (utf-8-codec . G4de8) (utf-16-codec . G4de7) (transcoder-error-handling-mode . G4de6) (transcoder-eol-style . G4de5) (transcoder-codec . G4de4) (transcoded-port . G4de3) (textual-port? . G4de2) (string->bytevector . G4de1) (standard-output-port . G4de0) (standard-input-port . G4ddf) (standard-error-port . G4dde) (set-port-position! . G4ddd) (put-u8 . G4ddc) (put-string . G4ddb) (put-datum . G4dda) (put-char . G4dd9) (put-bytevector . G4dd8) (port? . G4dd7) (port-transcoder . G4dd6) (port-position . G4dd5) (port-has-set-port-position!? . G4dd4) (port-has-port-position? . G4dd3) (port-eof? . G4dd2) (output-port-buffer-mode . G4dd1) (open-string-output-port . G4dd0) (open-string-input-port . G4dcf) (open-file-output-port . G4dce) (open-file-input/output-port . G4dcd) (open-file-input-port . G4dcc) (open-bytevector-output-port . G4dcb) (open-bytevector-input-port . G4dca) (native-transcoder . G4dc9) (native-eol-style . G4dc8) (make-transcoder . G4dc7) (latin-1-codec . G4dc6) (make-i/o-write-error . G48c4) (make-i/o-read-error . G48af) (make-i/o-port-error . G4962) (make-i/o-invalid-position-error . G48da) (make-i/o-filename-error . G48f4) (make-i/o-file-protection-error . G490d) (make-i/o-file-is-read-only-error . G4922) (make-i/o-file-does-not-exist-error . G494c) (make-i/o-file-already-exists-error . G4937) (make-i/o-error . G489a) (make-i/o-encoding-error . G4991) (make-i/o-decoding-error . G497b) (make-custom-textual-output-port . G4dc5) (make-custom-textual-input/output-port . G4dc4) (make-custom-textual-input-port . G4dc3) (make-custom-binary-output-port . G4dc2) (make-custom-binary-input/output-port . G4dc1) (make-custom-binary-input-port . G4dc0) (make-bytevector . G4dbf) (lookahead-u8 . G4dbe) (lookahead-char . G4dbd) (i/o-write-error? . G48c6) (i/o-read-error? . G48b1) (i/o-port-error? . G4966) (i/o-invalid-position-error? . G48de) (i/o-filename-error? . G48f8) (i/o-file-protection-error? . G490f) (i/o-file-is-read-only-error? . G4924) (i/o-file-does-not-exist-error? . G494e) (i/o-file-already-exists-error? . G4939) (i/o-error? . G489c) (i/o-error-position . G48e0) (i/o-error-port . G4968) (i/o-error-filename . G48fa) (i/o-encoding-error? . G4995) (i/o-encoding-error-char . G4997) (i/o-decoding-error? . G497d) (get-u8 . G4dbc) (get-string-n! . G4dbb) (get-string-n . G4dba) (get-string-all . G4db9) (get-line . G4db8) (get-datum . G4db7) (get-char . G4db6) (get-bytevector-some . G4db5) (get-bytevector-n! . G4db4) (get-bytevector-n . G4db3) (get-bytevector-all . G4db2) (flush-output-port . G4db1) (close-port . G4db0) (exit . G4da8) (command-line . G4acc) (remove . G4da3) (remv . G4da2) (remp . G4da1) (remq . G4da0) (partition . G4d9f) (memv . G4d9e) (memq . G4d9d) (memp . G4d9c) (member . G4d9b) (exists . G4d9a) (for-all . G4d99) (fold-right . G4d98) (fold-left . G4d97) (find . G4d96) (filter . G4d95) (cons* . G4d94) (assv . G4d93) (assq . G4d92) (assp . G4d91) (assoc . G4d90) (call-with-string-output-port . G4d8f) (call-with-port . G4d8e) (call-with-bytevector-output-port . G4d8d) (bytevector->string . G4d8c) (buffer-mode? . G4d8b) (binary-port? . G4d8a) (with-exception-handler . G4d89) (raise-continuable . G4d88) (raise . G4d87) (make-enumeration . G4d86) (enum-set=? . G4d85) (enum-set-universe . G4d84) (enum-set-union . G4d83) (enum-set-subset? . G4d82) (enum-set-projection . G4d81) (enum-set-member? . G4d80) (enum-set-intersection . G4d7f) (enum-set-indexer . G4d7e) (enum-set-difference . G4d7d) (enum-set-constructor . G4d7c) (enum-set-complement . G4d7b) (enum-set->list . G4d7a) (who-condition? . G4812) (warning? . G478c) (violation? . G47cb) (undefined-violation? . G4887) (syntax-violation? . G486e) (syntax-violation-subform . G4872) (syntax-violation-form . G4870) (syntax-violation . G2e1b) (simple-conditions . G4d79) (serious-condition? . G47a1) (non-continuable-violation? . G4829) (message-condition? . G4775) (make-who-condition . G480e) (make-warning . G478a) (make-violation . G47c9) (make-undefined-violation . G4885) (make-syntax-violation . G4868) (make-serious-condition . G479f) (make-non-continuable-violation . G4827) (make-message-condition . G4771) (make-lexical-violation . G4851) (make-irritants-condition . G47f4) (make-implementation-restriction-violation . G483c) (make-error . G47b4) (make-assertion-violation . G47de) (lexical-violation? . G4853) (irritants-condition? . G47f8) (implementation-restriction-violation? . G483e) (error? . G47b6) (condition-who . G4814) (condition-predicate . G4d78) (condition-message . G4777) (condition-irritants . G47fa) (condition-accessor . G4d77) (condition . G4d76) (assertion-violation? . G47e0) (condition? . G4d75) (utf32->string . G4d74) (utf16->string . G4d73) (utf8->string . G4d72) (uint-list->bytevector . G4d71) (u8-list->bytevector . G4d70) (string->utf8 . G4d6f) (string->utf32 . G4d6e) (string->utf16 . G4d6d) (sint-list->bytevector . G4d6c) (native-endianness . G4d6b) (bytevector? . G4d6a) (bytevector=? . G4d69) (bytevector-uint-set! . G4d68) (bytevector-uint-ref . G4d67) (bytevector-u8-set! . G4d66) (bytevector-u8-ref . G4d65) (bytevector-u64-set! . G4d64) (bytevector-u64-ref . G4d63) (bytevector-u64-native-set! . G4d62) (bytevector-u64-native-ref . G4d61) (bytevector-u32-set! . G4d60) (bytevector-u32-ref . G4d5f) (bytevector-u32-native-set! . G4d5e) (bytevector-u32-native-ref . G4d5d) (bytevector-u16-set! . G4d5c) (bytevector-u16-ref . G4d5b) (bytevector-u16-native-set! . G4d5a) (bytevector-u16-native-ref . G4d59) (bytevector-sint-set! . G4d58) (bytevector-sint-ref . G4d57) (bytevector-s8-set! . G4d56) (bytevector-s8-ref . G4d55) (bytevector-s64-set! . G4d54) (bytevector-s64-ref . G4d53) (bytevector-s64-native-set! . G4d52) (bytevector-s64-native-ref . G4d51) (bytevector-s32-set! . G4d50) (bytevector-s32-ref . G4d4f) (bytevector-s32-native-set! . G4d4e) (bytevector-s32-native-ref . G4d4d) (bytevector-s16-set! . G4d4c) (bytevector-s16-ref . G4d4b) (bytevector-s16-native-set! . G4d4a) (bytevector-s16-native-ref . G4d49) (bytevector-length . G4d48) (bytevector-ieee-single-ref . G4d47) (bytevector-ieee-single-set! . G4d46) (bytevector-ieee-single-native-set! . G4d45) (bytevector-ieee-single-native-ref . G4d44) (bytevector-ieee-double-set! . G4d43) (bytevector-ieee-double-ref . G4d42) (bytevector-ieee-double-native-set! . G4d41) (bytevector-ieee-double-native-ref . G4d40) (bytevector-fill! . G4d3f) (bytevector-copy! . G4d3e) (bytevector-copy . G4d3d) (bytevector->uint-list . G4d3c) (bytevector->u8-list . G4d3b) (bytevector->sint-list . G4d3a) (no-nans-violation? . G49c1) (no-infinities-violation? . G49ac) (make-no-nans-violation . G49bf) (make-no-infinities-violation . G49aa) (real->flonum . G4d39) (flzero? . G4d38) (fltruncate . G4d37) (fltan . G4d36) (flsqrt . G4d35) (flsin . G4d34) (flround . G4d33) (flpositive? . G4d32) (flonum? . G4d31) (flodd? . G4d30) (flnumerator . G4d2f) (flnegative? . G4d2e) (flnan? . G4d2d) (flmod0 . G4d2c) (flmod . G4d2b) (flmin . G4d2a) (flmax . G4d29) (fllog . G4d28) (flinteger? . G4d27) (flinfinite? . G4d26) (flfloor . G4d25) (flfinite? . G4d24) (flexpt . G4d23) (flexp . G4d22) (fleven? . G4d21) (fldiv0-and-mod0 . G4d20) (fldiv0 . G4d1f) (fldiv-and-mod . G4d1e) (fldiv . G4d1d) (fldenominator . G4d1c) (flcos . G4d1b) (flceiling . G4d1a) (flatan . G4d19) (flasin . G4d18) (flacos . G4d17) (flabs . G4d16) (fl>? . G4d15) (fl>=? . G4d14) (fl=? . G4d13) (fl<? . G4d12) (fl<=? . G4d11) (fl/ . G4d10) (fl- . G4d0f) (fl+ . G4d0e) (fl* . G4d0d) (fixnum->flonum . G4d0c) (fxzero? . G4d0b) (fxxor . G4d0a) (fxrotate-bit-field . G4d09) (fxreverse-bit-field . G4d08) (fxpositive? . G4d07) (fxodd? . G4d06) (fxnot . G4d05) (fxnegative? . G4d04) (fxmod0 . G4d03) (fxmod . G4d02) (fxmin . G4d01) (fxmax . G4d00) (fxlength . G4cff) (fxior . G4cfe) (fxif . G4cfd) (fxfirst-bit-set . G4cfc) (fxeven? . G4cfb) (fxdiv0-and-mod0 . G4cfa) (fxdiv0 . G4cf9) (fxdiv-and-mod . G4cf8) (fxdiv . G4cf7) (fxcopy-bit-field . G4cf6) (fxcopy-bit . G4cf5) (fxbit-set? . G4cf4) (fxbit-field . G4cf3) (fxbit-count . G4cf2) (fxarithmetic-shift-right . G4cf1) (fxarithmetic-shift-left . G4cf0) (fxarithmetic-shift . G4cef) (fxand . G4cee) (fx>? . G4ced) (fx>=? . G4cec) (fx=? . G4ceb) (fx<? . G4cea) (fx<=? . G4ce9) (fx-/carry . G4ce8) (fx- . G4ce7) (fx+/carry . G4ce6) (fx+ . G4ce5) (fx*/carry . G4ce4) (fx* . G4ce3) (greatest-fixnum . G4ce2) (least-fixnum . G4ce1) (fixnum-width . G4ce0) (fixnum? . G4cdf) (bitwise-rotate-bit-field . G4cde) (bitwise-reverse-bit-field . G4cdd) (bitwise-length . G4cdc) (bitwise-if . G4cdb) (bitwise-first-bit-set . G4cda) (bitwise-copy-bit-field . G4cd9) (bitwise-copy-bit . G4cd8) (bitwise-bit-set? . G4cd7) (bitwise-bit-field . G4cd6) (bitwise-bit-count . G4cd5) (bitwise-xor . G4cd4) (bitwise-ior . G4cd3) (bitwise-and . G4cd2) (bitwise-not . G4cd1) (bitwise-arithmetic-shift-right . G4cd0) (bitwise-arithmetic-shift-left . G4ccf) (bitwise-arithmetic-shift . G4cce) (zero? . G4ccd) (vector? . G4ccc) (vector-set! . G4ccb) (vector-ref . G4cca) (vector-map . G4cc9) (vector-length . G4cc8) (vector-for-each . G4cc7) (vector-fill! . G4cc6) (vector->list . G4cc5) (vector . G4cc4) (values . G4cc3) (truncate . G4cc2) (tan . G4cc1) (symbol? . G4cc0) (symbol=? . G4cbf) (symbol->string . G4cbe) (substring . G4cbd) (string? . G4cbc) (string>? . G4cbb) (string>=? . G4cba) (string=? . G4cb9) (string<? . G4cb8) (string<=? . G4cb7) (string-ref . G4cb6) (string-length . G4cb5) (string-for-each . G4cb4) (string-copy . G4cb3) (string-append . G4cb2) (string->symbol . G4cb1) (string->number . G4cb0) (string->list . G4caf) (string . G4cae) (sqrt . G4cad) (sin . G4cac) (round . G4cab) (reverse . G4caa) (real? . G4ca9) (real-valued? . G4ca8) (real-part . G4ca7) (rationalize . G4ca6) (rational? . G4ca5) (rational-valued? . G4ca4) (procedure? . G4ca3) (positive? . G4ca2) (pair? . G4ca1) (odd? . G4ca0) (numerator . G4c9f) (number? . G4c9e) (number->string . G4c9d) (null? . G4c9c) (not . G4c9b) (negative? . G4c9a) (nan? . G4c99) (min . G4c98) (max . G4c97) (map . G4c96) (make-vector . G4c95) (make-string . G4c94) (make-rectangular . G4c93) (make-polar . G4c92) (magnitude . G4c91) (log . G4c90) (list? . G4c8f) (list-tail . G4c8e) (list-ref . G4c8d) (list->vector . G4c8c) (list->string . G4c8b) (list . G4c8a) (length . G4c89) (lcm . G4c88) (integer? . G4c87) (integer-valued? . G4c86) (integer->char . G4c85) (infinite? . G4c84) (inexact? . G4c83) (inexact . G4c82) (imag-part . G4c81) (gcd . G4c80) (for-each . G4c7f) (floor . G4c7e) (finite? . G4c7d) (expt . G4c7c) (exp . G4c7b) (exact? . G4c7a) (exact-integer-sqrt . G4c79) (exact . G4c78) (even? . G4c77) (error . G4c76) (eqv? . G4c75) (equal? . G4c74) (eq? . G4c73) (dynamic-wind . G4c72) (div0-and-mod0 . G4c71) (mod0 . G4c70) (div0 . G4c6f) (div-and-mod . G4c6e) (mod . G4c6d) (div . G4c6c) (denominator . G4c6b) (cos . G4c6a) (cons . G4c69) (complex? . G4c68) (char? . G4c67) (char>? . G4c66) (char>=? . G4c65) (char=? . G4c64) (char<? . G4c63) (char<=? . G4c62) (char->integer . G4c61) (ceiling . G4c60) (call-with-values . G4c5f) (call/cc . G4c5e) (call-with-current-continuation . G4c5d) (cddddr . G4c5c) (cdddar . G4c5b) (cddadr . G4c5a) (cddaar . G4c59) (cdaddr . G4c58) (cdadar . G4c57) (cdaadr . G4c56) (cdaaar . G4c55) (cadddr . G4c54) (caddar . G4c53) (cadadr . G4c52) (cadaar . G4c51) (caaddr . G4c50) (caadar . G4c4f) (caaadr . G4c4e) (caaaar . G4c4d) (cdddr . G4c4c) (cddar . G4c4b) (cdadr . G4c4a) (cdaar . G4c49) (caddr . G4c48) (cadar . G4c47) (caadr . G4c46) (caaar . G4c45) (cddr . G4c44) (cdar . G4c43) (cadr . G4c42) (caar . G4c41) (cdr . G4c40) (car . G4c3f) (boolean? . G4c3e) (boolean=? . G4c3d) (atan . G4c3c) (assertion-violation . G4c3b) (asin . G4c3a) (apply . G4c39) (append . G4c38) (angle . G4c37) (acos . G4c36) (abs . G4c35) (/ . G4c34) (* . G4c33) (- . G4c32) (+ . G4c31) (>= . G4c30) (> . G4c2f) (= . G4c2e) (<= . G4c2d) (< . G4c2c) (&no-nans . G4c2a) (&no-infinities . G4c29) (&i/o-encoding . G4c28) (&i/o-decoding . G4c27) (&i/o-port . G4c26) (&i/o-file-does-not-exist . G4c25) (&i/o-file-already-exists . G4c24) (&i/o-file-is-read-only . G4c23) (&i/o-file-protection . G4c22) (&i/o-filename . G4c21) (&i/o-invalid-position . G4c20) (&i/o-write . G4c1f) (&i/o-read . G4c1e) (&i/o . G4c1d) (&undefined . G4c1c) (&syntax . G4c1b) (&lexical . G4c1a) (&implementation-restriction . G4c19) (&non-continuable . G4c18) (&who . G4c17) (&irritants . G4c16) (&assertion . G4c15) (&violation . G4c14) (&error . G4c13) (&serious . G4c12) (&warning . G4c11) (&message . G4c10) (&condition . G4c0f) (define-condition-type . G4c0e) (define-enumeration . G4c0d) (define-record-type . G4c0c) (parent-rtd . G4c0b) (nongenerative . G4c0a) (opaque . G4c09) (sealed . G4c08) (protocol . G4c07) (parent . G4c06) (immutable . G4c05) (mutable . G4c04) (fields . G4c03) (error-handling-mode . G4c02) (file-options . G4c01) (buffer-mode . G4c00) (eol-style . G4bff) (guard . G4bfe) (unsyntax-splicing . G4bfb) (unsyntax . G4bfa) (unquote-splicing . G4bf9) (unquote . G4bf8) (_ . G4bf7) (else . G4bf6) (=> . G4bf5) (... . G4bf4) (assert . G4bf3) (endianness . G4bf2) (do . G4bef) (cond . G4bee) (let* . G4bed) (let . G4bec) (let*-values . G4beb) (let-values . G4bea) (identifier-syntax . G4be9) (with-syntax . G4be8) (quasisyntax . G4be7) (quasiquote . G4be6) (syntax-rules . G4be5) (record-constructor-descriptor . G4be2) (record-type-descriptor . G4be1) (case . G4be0) (unless . G4bde) (when . G4bdd) (or . G4bdc) (and . G4bdb) (if . G4bda) (letrec* . G4bd9) (letrec . G4bd8) (case-lambda . G4bd6) (lambda . G4bd5) (syntax . G4bd4) (syntax-case . G4bd3) (quote . G4bd2) (letrec-syntax . G4bd0) (let-syntax . G4bcf) (set! . G4bce) (begin . G4bcc) (define-syntax . G4bca) (define . G4bc9)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e91 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G2df7) (quotient . G4daf) (null-environment . G2df5) (remainder . G4dae) (modulo . G4dad) (inexact->exact . G4dac) (force . G4dab) (exact->inexact . G4daa) (make-promise . G4da9) (delay . G4bf1)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e92 '(rnrs control) '(6) '() '() '() '((do . G4bef) (unless . G4bde) (when . G4bdd) (case-lambda . G4bd6)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e93 '(rnrs eval) '(6) '() '() '() '((eval . G2dfb) (environment . G2df3)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e94 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4da5) (set-car! . G4da4)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e95 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4da7) (string-set! . G4da6)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e96 '(rnrs programs) '(6) '() '() '() '((exit . G4da8) (command-line . G4acc)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e97 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2b77) (identifier? . G2e1d) (generate-temporaries . G2e09) (free-identifier=? . G2e0b) (syntax->datum . G2e21) (datum->syntax . G2e1f) (bound-identifier=? . G2e0d) (syntax-violation . G2e1b) (unsyntax-splicing . G4bfb) (unsyntax . G4bfa) (_ . G4bf7) (... . G4bf4) (with-syntax . G4be8) (quasisyntax . G4be7) (syntax . G4bd4) (syntax-case . G4bd3)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e98 '(rnrs files) '(6) '() '() '() '((delete-file . G4e18) (file-exists? . G4e17) (make-i/o-write-error . G48c4) (make-i/o-read-error . G48af) (make-i/o-port-error . G4962) (make-i/o-invalid-position-error . G48da) (make-i/o-filename-error . G48f4) (make-i/o-file-protection-error . G490d) (make-i/o-file-is-read-only-error . G4922) (make-i/o-file-does-not-exist-error . G494c) (make-i/o-file-already-exists-error . G4937) (make-i/o-error . G489a) (i/o-write-error? . G48c6) (i/o-read-error? . G48b1) (i/o-port-error? . G4966) (i/o-invalid-position-error? . G48de) (i/o-filename-error? . G48f8) (i/o-file-protection-error? . G490f) (i/o-file-is-read-only-error? . G4924) (i/o-file-does-not-exist-error? . G494e) (i/o-file-already-exists-error? . G4939) (i/o-error? . G489c) (i/o-error-position . G48e0) (i/o-error-port . G4968) (i/o-error-filename . G48fa) (&i/o-port . G4c26) (&i/o-file-does-not-exist . G4c25) (&i/o-file-already-exists . G4c24) (&i/o-file-is-read-only . G4c23) (&i/o-file-protection . G4c22) (&i/o-filename . G4c21) (&i/o-invalid-position . G4c20) (&i/o-write . G4c1f) (&i/o-read . G4c1e) (&i/o . G4c1d)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e99 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G4e16) (vector-sort . G4e15) (list-sort . G4e14)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e9a '(rnrs base) '(6) '() '() '() '((zero? . G4ccd) (vector? . G4ccc) (vector-set! . G4ccb) (vector-ref . G4cca) (vector-map . G4cc9) (vector-length . G4cc8) (vector-for-each . G4cc7) (vector-fill! . G4cc6) (vector->list . G4cc5) (vector . G4cc4) (values . G4cc3) (truncate . G4cc2) (tan . G4cc1) (symbol? . G4cc0) (symbol=? . G4cbf) (symbol->string . G4cbe) (substring . G4cbd) (string? . G4cbc) (string>? . G4cbb) (string>=? . G4cba) (string=? . G4cb9) (string<? . G4cb8) (string<=? . G4cb7) (string-ref . G4cb6) (string-length . G4cb5) (string-for-each . G4cb4) (string-copy . G4cb3) (string-append . G4cb2) (string->symbol . G4cb1) (string->number . G4cb0) (string->list . G4caf) (string . G4cae) (sqrt . G4cad) (sin . G4cac) (round . G4cab) (reverse . G4caa) (real? . G4ca9) (real-valued? . G4ca8) (real-part . G4ca7) (rationalize . G4ca6) (rational? . G4ca5) (rational-valued? . G4ca4) (procedure? . G4ca3) (positive? . G4ca2) (pair? . G4ca1) (odd? . G4ca0) (numerator . G4c9f) (number? . G4c9e) (number->string . G4c9d) (null? . G4c9c) (not . G4c9b) (negative? . G4c9a) (nan? . G4c99) (min . G4c98) (max . G4c97) (map . G4c96) (make-vector . G4c95) (make-string . G4c94) (make-rectangular . G4c93) (make-polar . G4c92) (magnitude . G4c91) (log . G4c90) (list? . G4c8f) (list-tail . G4c8e) (list-ref . G4c8d) (list->vector . G4c8c) (list->string . G4c8b) (list . G4c8a) (length . G4c89) (lcm . G4c88) (integer? . G4c87) (integer-valued? . G4c86) (integer->char . G4c85) (infinite? . G4c84) (inexact? . G4c83) (inexact . G4c82) (imag-part . G4c81) (gcd . G4c80) (for-each . G4c7f) (floor . G4c7e) (finite? . G4c7d) (expt . G4c7c) (exp . G4c7b) (exact? . G4c7a) (exact-integer-sqrt . G4c79) (exact . G4c78) (even? . G4c77) (error . G4c76) (eqv? . G4c75) (equal? . G4c74) (eq? . G4c73) (dynamic-wind . G4c72) (div0-and-mod0 . G4c71) (mod0 . G4c70) (div0 . G4c6f) (div-and-mod . G4c6e) (mod . G4c6d) (div . G4c6c) (denominator . G4c6b) (cos . G4c6a) (cons . G4c69) (complex? . G4c68) (char? . G4c67) (char>? . G4c66) (char>=? . G4c65) (char=? . G4c64) (char<? . G4c63) (char<=? . G4c62) (char->integer . G4c61) (ceiling . G4c60) (call-with-values . G4c5f) (call/cc . G4c5e) (call-with-current-continuation . G4c5d) (cddddr . G4c5c) (cdddar . G4c5b) (cddadr . G4c5a) (cddaar . G4c59) (cdaddr . G4c58) (cdadar . G4c57) (cdaadr . G4c56) (cdaaar . G4c55) (cadddr . G4c54) (caddar . G4c53) (cadadr . G4c52) (cadaar . G4c51) (caaddr . G4c50) (caadar . G4c4f) (caaadr . G4c4e) (caaaar . G4c4d) (cdddr . G4c4c) (cddar . G4c4b) (cdadr . G4c4a) (cdaar . G4c49) (caddr . G4c48) (cadar . G4c47) (caadr . G4c46) (caaar . G4c45) (cddr . G4c44) (cdar . G4c43) (cadr . G4c42) (caar . G4c41) (cdr . G4c40) (car . G4c3f) (boolean? . G4c3e) (boolean=? . G4c3d) (atan . G4c3c) (assertion-violation . G4c3b) (asin . G4c3a) (apply . G4c39) (append . G4c38) (angle . G4c37) (acos . G4c36) (abs . G4c35) (/ . G4c34) (* . G4c33) (- . G4c32) (+ . G4c31) (>= . G4c30) (> . G4c2f) (= . G4c2e) (<= . G4c2d) (< . G4c2c) (unquote-splicing . G4bf9) (unquote . G4bf8) (_ . G4bf7) (else . G4bf6) (=> . G4bf5) (... . G4bf4) (assert . G4bf3) (cond . G4bee) (let* . G4bed) (let . G4bec) (let*-values . G4beb) (let-values . G4bea) (identifier-syntax . G4be9) (quasiquote . G4be6) (syntax-rules . G4be5) (case . G4be0) (or . G4bdc) (and . G4bdb) (if . G4bda) (letrec* . G4bd9) (letrec . G4bd8) (lambda . G4bd5) (quote . G4bd2) (letrec-syntax . G4bd0) (let-syntax . G4bcf) (set! . G4bce) (begin . G4bcc) (define-syntax . G4bca) (define . G4bc9)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e9b '(rnrs lists) '(6) '() '() '() '((remove . G4da3) (remv . G4da2) (remp . G4da1) (remq . G4da0) (partition . G4d9f) (memv . G4d9e) (memq . G4d9d) (memp . G4d9c) (member . G4d9b) (exists . G4d9a) (for-all . G4d99) (fold-right . G4d98) (fold-left . G4d97) (find . G4d96) (filter . G4d95) (cons* . G4d94) (assv . G4d93) (assq . G4d92) (assp . G4d91) (assoc . G4d90)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e9c '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G4dfe) (call-with-input-file . G4dfd) (write-char . G4dfc) (write . G4dfb) (with-output-to-file . G4dfa) (with-input-from-file . G4df9) (read-char . G4df8) (read . G4df7) (peek-char . G4df6) (open-output-file . G4df5) (open-input-file . G4df4) (newline . G4df3) (display . G4df2) (close-output-port . G4df1) (close-input-port . G4df0) (eof-object? . G4def) (eof-object . G4dee) (current-error-port . G4ded) (current-output-port . G4dec) (current-input-port . G4deb) (output-port? . G4dea) (input-port? . G4de9) (make-i/o-write-error . G48c4) (make-i/o-read-error . G48af) (make-i/o-port-error . G4962) (make-i/o-invalid-position-error . G48da) (make-i/o-filename-error . G48f4) (make-i/o-file-protection-error . G490d) (make-i/o-file-is-read-only-error . G4922) (make-i/o-file-does-not-exist-error . G494c) (make-i/o-file-already-exists-error . G4937) (make-i/o-error . G489a) (i/o-write-error? . G48c6) (i/o-read-error? . G48b1) (i/o-port-error? . G4966) (i/o-invalid-position-error? . G48de) (i/o-filename-error? . G48f8) (i/o-file-protection-error? . G490f) (i/o-file-is-read-only-error? . G4924) (i/o-file-does-not-exist-error? . G494e) (i/o-file-already-exists-error? . G4939) (i/o-error? . G489c) (i/o-error-position . G48e0) (i/o-error-port . G4968) (i/o-error-filename . G48fa) (&i/o-port . G4c26) (&i/o-file-does-not-exist . G4c25) (&i/o-file-already-exists . G4c24) (&i/o-file-is-read-only . G4c23) (&i/o-file-protection . G4c22) (&i/o-filename . G4c21) (&i/o-invalid-position . G4c20) (&i/o-write . G4c1f) (&i/o-read . G4c1e) (&i/o . G4c1d)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e9d '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4dbf) (utf32->string . G4d74) (utf16->string . G4d73) (utf8->string . G4d72) (uint-list->bytevector . G4d71) (u8-list->bytevector . G4d70) (string->utf8 . G4d6f) (string->utf32 . G4d6e) (string->utf16 . G4d6d) (sint-list->bytevector . G4d6c) (native-endianness . G4d6b) (bytevector? . G4d6a) (bytevector=? . G4d69) (bytevector-uint-set! . G4d68) (bytevector-uint-ref . G4d67) (bytevector-u8-set! . G4d66) (bytevector-u8-ref . G4d65) (bytevector-u64-set! . G4d64) (bytevector-u64-ref . G4d63) (bytevector-u64-native-set! . G4d62) (bytevector-u64-native-ref . G4d61) (bytevector-u32-set! . G4d60) (bytevector-u32-ref . G4d5f) (bytevector-u32-native-set! . G4d5e) (bytevector-u32-native-ref . G4d5d) (bytevector-u16-set! . G4d5c) (bytevector-u16-ref . G4d5b) (bytevector-u16-native-set! . G4d5a) (bytevector-u16-native-ref . G4d59) (bytevector-sint-set! . G4d58) (bytevector-sint-ref . G4d57) (bytevector-s8-set! . G4d56) (bytevector-s8-ref . G4d55) (bytevector-s64-set! . G4d54) (bytevector-s64-ref . G4d53) (bytevector-s64-native-set! . G4d52) (bytevector-s64-native-ref . G4d51) (bytevector-s32-set! . G4d50) (bytevector-s32-ref . G4d4f) (bytevector-s32-native-set! . G4d4e) (bytevector-s32-native-ref . G4d4d) (bytevector-s16-set! . G4d4c) (bytevector-s16-ref . G4d4b) (bytevector-s16-native-set! . G4d4a) (bytevector-s16-native-ref . G4d49) (bytevector-length . G4d48) (bytevector-ieee-single-ref . G4d47) (bytevector-ieee-single-set! . G4d46) (bytevector-ieee-single-native-set! . G4d45) (bytevector-ieee-single-native-ref . G4d44) (bytevector-ieee-double-set! . G4d43) (bytevector-ieee-double-ref . G4d42) (bytevector-ieee-double-native-set! . G4d41) (bytevector-ieee-double-native-ref . G4d40) (bytevector-fill! . G4d3f) (bytevector-copy! . G4d3e) (bytevector-copy . G4d3d) (bytevector->uint-list . G4d3c) (bytevector->u8-list . G4d3b) (bytevector->sint-list . G4d3a) (endianness . G4bf2)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e9e '(rnrs unicode) '(6) '() '() '() '((string-upcase . G4e46) (string-titlecase . G4e45) (string-normalize-nfkd . G4e44) (string-normalize-nfkc . G4e43) (string-normalize-nfd . G4e42) (string-normalize-nfc . G4e41) (string-foldcase . G4e40) (string-downcase . G4e3f) (string-ci>? . G4e3e) (string-ci>=? . G4e3d) (string-ci=? . G4e3c) (string-ci<? . G4e3b) (string-ci<=? . G4e3a) (char-whitespace? . G4e39) (char-upper-case? . G4e38) (char-title-case? . G4e37) (char-numeric? . G4e36) (char-lower-case? . G4e35) (char-general-category . G4e34) (char-upcase . G4e33) (char-titlecase . G4e32) (char-foldcase . G4e31) (char-downcase . G4e30) (char-ci>? . G4e2f) (char-ci>=? . G4e2e) (char-ci=? . G4e2d) (char-ci<? . G4e2c) (char-ci<=? . G4e2b) (char-alphabetic? . G4e2a)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4e9f '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4d89) (raise-continuable . G4d88) (raise . G4d87) (guard . G4bfe) (else . G4bf6) (=> . G4bf5)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4ea0 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4cde) (bitwise-reverse-bit-field . G4cdd) (bitwise-length . G4cdc) (bitwise-if . G4cdb) (bitwise-first-bit-set . G4cda) (bitwise-copy-bit-field . G4cd9) (bitwise-copy-bit . G4cd8) (bitwise-bit-set? . G4cd7) (bitwise-bit-field . G4cd6) (bitwise-bit-count . G4cd5) (bitwise-xor . G4cd4) (bitwise-ior . G4cd3) (bitwise-and . G4cd2) (bitwise-not . G4cd1) (bitwise-arithmetic-shift-right . G4cd0) (bitwise-arithmetic-shift-left . G4ccf) (bitwise-arithmetic-shift . G4cce)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4ea1 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4d0b) (fxxor . G4d0a) (fxrotate-bit-field . G4d09) (fxreverse-bit-field . G4d08) (fxpositive? . G4d07) (fxodd? . G4d06) (fxnot . G4d05) (fxnegative? . G4d04) (fxmod0 . G4d03) (fxmod . G4d02) (fxmin . G4d01) (fxmax . G4d00) (fxlength . G4cff) (fxior . G4cfe) (fxif . G4cfd) (fxfirst-bit-set . G4cfc) (fxeven? . G4cfb) (fxdiv0-and-mod0 . G4cfa) (fxdiv0 . G4cf9) (fxdiv-and-mod . G4cf8) (fxdiv . G4cf7) (fxcopy-bit-field . G4cf6) (fxcopy-bit . G4cf5) (fxbit-set? . G4cf4) (fxbit-field . G4cf3) (fxbit-count . G4cf2) (fxarithmetic-shift-right . G4cf1) (fxarithmetic-shift-left . G4cf0) (fxarithmetic-shift . G4cef) (fxand . G4cee) (fx>? . G4ced) (fx>=? . G4cec) (fx=? . G4ceb) (fx<? . G4cea) (fx<=? . G4ce9) (fx-/carry . G4ce8) (fx- . G4ce7) (fx+/carry . G4ce6) (fx+ . G4ce5) (fx*/carry . G4ce4) (fx* . G4ce3) (greatest-fixnum . G4ce2) (least-fixnum . G4ce1) (fixnum-width . G4ce0) (fixnum? . G4cdf)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4ea2 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G49c1) (no-infinities-violation? . G49ac) (make-no-nans-violation . G49bf) (make-no-infinities-violation . G49aa) (real->flonum . G4d39) (flzero? . G4d38) (fltruncate . G4d37) (fltan . G4d36) (flsqrt . G4d35) (flsin . G4d34) (flround . G4d33) (flpositive? . G4d32) (flonum? . G4d31) (flodd? . G4d30) (flnumerator . G4d2f) (flnegative? . G4d2e) (flnan? . G4d2d) (flmod0 . G4d2c) (flmod . G4d2b) (flmin . G4d2a) (flmax . G4d29) (fllog . G4d28) (flinteger? . G4d27) (flinfinite? . G4d26) (flfloor . G4d25) (flfinite? . G4d24) (flexpt . G4d23) (flexp . G4d22) (fleven? . G4d21) (fldiv0-and-mod0 . G4d20) (fldiv0 . G4d1f) (fldiv-and-mod . G4d1e) (fldiv . G4d1d) (fldenominator . G4d1c) (flcos . G4d1b) (flceiling . G4d1a) (flatan . G4d19) (flasin . G4d18) (flacos . G4d17) (flabs . G4d16) (fl>? . G4d15) (fl>=? . G4d14) (fl=? . G4d13) (fl<? . G4d12) (fl<=? . G4d11) (fl/ . G4d10) (fl- . G4d0f) (fl+ . G4d0e) (fl* . G4d0d) (fixnum->flonum . G4d0c) (&no-nans . G4c2a) (&no-infinities . G4c29)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4ea3 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G4e13) (string-ci-hash . G4e12) (string-hash . G4e11) (equal-hash . G4e10) (hashtable-equivalence-function . G4e0f) (make-hashtable . G4e0e) (hashtable-hash-function . G4e0d) (make-eqv-hashtable . G4e0c) (make-eq-hashtable . G4e0b) (hashtable? . G4e0a) (hashtable-update! . G4e09) (hashtable-size . G4e08) (hashtable-set! . G4e07) (hashtable-ref . G4e06) (hashtable-mutable? . G4e05) (hashtable-keys . G4e04) (hashtable-entries . G4e03) (hashtable-delete! . G4e02) (hashtable-copy . G4e01) (hashtable-contains? . G4e00) (hashtable-clear! . G4dff)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4ea4 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4def) (eof-object . G4dee) (current-error-port . G4ded) (current-output-port . G4dec) (current-input-port . G4deb) (output-port? . G4dea) (input-port? . G4de9) (utf-8-codec . G4de8) (utf-16-codec . G4de7) (transcoder-error-handling-mode . G4de6) (transcoder-eol-style . G4de5) (transcoder-codec . G4de4) (transcoded-port . G4de3) (textual-port? . G4de2) (string->bytevector . G4de1) (standard-output-port . G4de0) (standard-input-port . G4ddf) (standard-error-port . G4dde) (set-port-position! . G4ddd) (put-u8 . G4ddc) (put-string . G4ddb) (put-datum . G4dda) (put-char . G4dd9) (put-bytevector . G4dd8) (port? . G4dd7) (port-transcoder . G4dd6) (port-position . G4dd5) (port-has-set-port-position!? . G4dd4) (port-has-port-position? . G4dd3) (port-eof? . G4dd2) (output-port-buffer-mode . G4dd1) (open-string-output-port . G4dd0) (open-string-input-port . G4dcf) (open-file-output-port . G4dce) (open-file-input/output-port . G4dcd) (open-file-input-port . G4dcc) (open-bytevector-output-port . G4dcb) (open-bytevector-input-port . G4dca) (native-transcoder . G4dc9) (native-eol-style . G4dc8) (make-transcoder . G4dc7) (latin-1-codec . G4dc6) (make-i/o-write-error . G48c4) (make-i/o-read-error . G48af) (make-i/o-port-error . G4962) (make-i/o-invalid-position-error . G48da) (make-i/o-filename-error . G48f4) (make-i/o-file-protection-error . G490d) (make-i/o-file-is-read-only-error . G4922) (make-i/o-file-does-not-exist-error . G494c) (make-i/o-file-already-exists-error . G4937) (make-i/o-error . G489a) (make-i/o-encoding-error . G4991) (make-i/o-decoding-error . G497b) (make-custom-textual-output-port . G4dc5) (make-custom-textual-input/output-port . G4dc4) (make-custom-textual-input-port . G4dc3) (make-custom-binary-output-port . G4dc2) (make-custom-binary-input/output-port . G4dc1) (make-custom-binary-input-port . G4dc0) (lookahead-u8 . G4dbe) (lookahead-char . G4dbd) (i/o-write-error? . G48c6) (i/o-read-error? . G48b1) (i/o-port-error? . G4966) (i/o-invalid-position-error? . G48de) (i/o-filename-error? . G48f8) (i/o-file-protection-error? . G490f) (i/o-file-is-read-only-error? . G4924) (i/o-file-does-not-exist-error? . G494e) (i/o-file-already-exists-error? . G4939) (i/o-error? . G489c) (i/o-error-position . G48e0) (i/o-error-port . G4968) (i/o-error-filename . G48fa) (i/o-encoding-error? . G4995) (i/o-encoding-error-char . G4997) (i/o-decoding-error? . G497d) (get-u8 . G4dbc) (get-string-n! . G4dbb) (get-string-n . G4dba) (get-string-all . G4db9) (get-line . G4db8) (get-datum . G4db7) (get-char . G4db6) (get-bytevector-some . G4db5) (get-bytevector-n! . G4db4) (get-bytevector-n . G4db3) (get-bytevector-all . G4db2) (flush-output-port . G4db1) (close-port . G4db0) (call-with-string-output-port . G4d8f) (call-with-port . G4d8e) (call-with-bytevector-output-port . G4d8d) (bytevector->string . G4d8c) (buffer-mode? . G4d8b) (binary-port? . G4d8a) (&i/o-encoding . G4c28) (&i/o-decoding . G4c27) (&i/o-port . G4c26) (&i/o-file-does-not-exist . G4c25) (&i/o-file-already-exists . G4c24) (&i/o-file-is-read-only . G4c23) (&i/o-file-protection . G4c22) (&i/o-filename . G4c21) (&i/o-invalid-position . G4c20) (&i/o-write . G4c1f) (&i/o-read . G4c1e) (&i/o . G4c1d) (error-handling-mode . G4c02) (file-options . G4c01) (buffer-mode . G4c00) (eol-style . G4bff)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4ea5 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4d86) (enum-set=? . G4d85) (enum-set-universe . G4d84) (enum-set-union . G4d83) (enum-set-subset? . G4d82) (enum-set-projection . G4d81) (enum-set-member? . G4d80) (enum-set-intersection . G4d7f) (enum-set-indexer . G4d7e) (enum-set-difference . G4d7d) (enum-set-constructor . G4d7c) (enum-set-complement . G4d7b) (enum-set->list . G4d7a) (define-enumeration . G4c0d)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4ea6 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4812) (warning? . G478c) (violation? . G47cb) (undefined-violation? . G4887) (syntax-violation? . G486e) (syntax-violation-subform . G4872) (syntax-violation-form . G4870) (syntax-violation . G2e1b) (simple-conditions . G4d79) (serious-condition? . G47a1) (non-continuable-violation? . G4829) (message-condition? . G4775) (make-who-condition . G480e) (make-warning . G478a) (make-violation . G47c9) (make-undefined-violation . G4885) (make-syntax-violation . G4868) (make-serious-condition . G479f) (make-non-continuable-violation . G4827) (make-message-condition . G4771) (make-lexical-violation . G4851) (make-irritants-condition . G47f4) (make-implementation-restriction-violation . G483c) (make-error . G47b4) (make-assertion-violation . G47de) (lexical-violation? . G4853) (irritants-condition? . G47f8) (implementation-restriction-violation? . G483e) (error? . G47b6) (condition-who . G4814) (condition-predicate . G4d78) (condition-message . G4777) (condition-irritants . G47fa) (condition-accessor . G4d77) (condition . G4d76) (assertion-violation? . G47e0) (condition? . G4d75) (&undefined . G4c1c) (&syntax . G4c1b) (&lexical . G4c1a) (&implementation-restriction . G4c19) (&non-continuable . G4c18) (&who . G4c17) (&irritants . G4c16) (&assertion . G4c15) (&violation . G4c14) (&error . G4c13) (&serious . G4c12) (&warning . G4c11) (&message . G4c10) (&condition . G4c0f) (define-condition-type . G4c0e)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4ea7 '(rnrs records inspection) '(6) '() '() '() '((record? . G4e22) (record-type-uid . G4e21) (record-type-sealed? . G4e20) (record-type-parent . G4e1f) (record-type-opaque? . G4e1e) (record-type-name . G4e1d) (record-type-generative? . G4e1c) (record-type-field-names . G4e1b) (record-rtd . G4e1a) (record-field-mutable? . G4e19)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4ea8 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G4e29) (record-predicate . G4e28) (record-mutator . G4e27) (record-constructor . G4e26) (record-accessor . G4e25) (make-record-type-descriptor . G4e24) (make-record-constructor-descriptor . G4e23)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4ea9 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4c0c) (parent-rtd . G4c0b) (nongenerative . G4c0a) (opaque . G4c09) (sealed . G4c08) (protocol . G4c07) (parent . G4c06) (immutable . G4c05) (mutable . G4c04) (fields . G4c03) (record-constructor-descriptor . G4be2) (record-type-descriptor . G4be1)) '() values values '#f '#f '#t '#f) (G2966@G280b@install-library 'G4eaa '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G49c5) (&no-nans-rtd . G49c3) (&no-infinities-rcd . G49b0) (&no-infinities-rtd . G49ae) (&i/o-encoding-rcd . G499b) (&i/o-encoding-rtd . G4999) (&i/o-decoding-rcd . G4981) (&i/o-decoding-rtd . G497f) (&i/o-port-rcd . G496c) (&i/o-port-rtd . G496a) (&i/o-file-does-not-exist-rcd . G4952) (&i/o-file-does-not-exist-rtd . G4950) (&i/o-file-already-exists-rcd . G493d) (&i/o-file-already-exists-rtd . G493b) (&i/o-file-is-read-only-rcd . G4928) (&i/o-file-is-read-only-rtd . G4926) (&i/o-file-protection-rcd . G4913) (&i/o-file-protection-rtd . G4911) (&i/o-filename-rcd . G48fe) (&i/o-filename-rtd . G48fc) (&i/o-invalid-position-rcd . G48e4) (&i/o-invalid-position-rtd . G48e2) (&i/o-write-rcd . G48ca) (&i/o-write-rtd . G48c8) (&i/o-read-rcd . G48b5) (&i/o-read-rtd . G48b3) (&i/o-rcd . G48a0) (&i/o-rtd . G489e) (&undefined-rcd . G488b) (&undefined-rtd . G4889) (&syntax-rcd . G4876) (&syntax-rtd . G4874) (&lexical-rcd . G4857) (&lexical-rtd . G4855) (&implementation-restriction-rcd . G4842) (&implementation-restriction-rtd . G4840) (&non-continuable-rcd . G482d) (&non-continuable-rtd . G482b) (&who-rcd . G4818) (&who-rtd . G4816) (&irritants-rcd . G47fe) (&irritants-rtd . G47fc) (&assertion-rcd . G47e4) (&assertion-rtd . G47e2) (&violation-rcd . G47cf) (&violation-rtd . G47cd) (&error-rcd . G47ba) (&error-rtd . G47b8) (&serious-rcd . G47a5) (&serious-rtd . G47a3) (&warning-rcd . G4790) (&warning-rtd . G478e) (&message-rcd . G477b) (&message-rtd . G4779) (&condition-rcd . G4720) (&condition-rtd . G471e) (syntax-error . G2e17) (syntax-dispatch . G2d30) (pretty-print . G4e8a) (eval-core . G4e89) (set-symbol-value! . G4e88) (symbol-value . G4e87) (gensym . G4e86) (void . G4e85) (load . G4ad2) (interaction-environment . G2e27) (char-ready? . G4e84) (regexp? . G4e83) (read-line . G4e82) (ungensym . G4e81) (alist->eq-hash-table . G4e80) (assoc-ref . G4e7f) (print . G4e7e) (format . G4e7d) (host-os . G4e7c) (library-path . G27ea) (standard-library-path . G4e7b) (file-newer? . G4e7a) (stat-mtime . G4e79) (write-to-file . G4e78) (file->list . G4e77) (file->string . G4e76) (digit->integer . G4e75) (call-with-string-input-port . G4e74) (call-with-string-io . G4e73) (string-split . G4e72) (bytevector-for-each . G4e71) (string->regexp . G4e70) (rxmatch . G4e6f) (regexp-replace-all . G4e6e) (hashtable-for-each . G4e6d) (call-process . G4e6c) (local-tz-offset . G4e6b) (microseconds . G4e6a) (readdir . G4e69) (set-current-directory! . G4e68) (expand-path . G4e67) (current-directory . G4e66) (%spawn . G4e65) (%waitpid . G4e64) (%ffi-supported? . G4e63) (%ffi-pointer-ref . G4e62) (%ffi-pointer->string . G4e61) (%ffi-call->string-or-zero . G4e60) (%ffi-call->double . G4e5f) (%ffi-call->void* . G4e5e) (%ffi-call->void . G4e5d) (%ffi-call->int . G4e5c) (%ffi-lookup . G4e5b) (%ffi-open . G4e5a) (%fork . G4e59) (%pipe . G4e58) (p . G4e57) (open-output-string . G4e56) (get-output-string . G4e55) (get-environment-variables . G4e54) (get-environment-variable . G4e53) (get-timeofday . G4e52) (get-command-line . G4e51) (sys-display . G4e50) (source-info . G4e4f) (make-compiler-instruction . G4e4e) (make-instruction . G4e4d) (set-source-info! . G4e4c) (bignum? . G4e4b) (fast-equal? . G4e4a) (fasl-read . G4e49) (fasl-write . G4e48) (time-usage . G4e47) (make-parameter . G2621) (string-upcase . G4e46) (string-titlecase . G4e45) (string-normalize-nfkd . G4e44) (string-normalize-nfkc . G4e43) (string-normalize-nfd . G4e42) (string-normalize-nfc . G4e41) (string-foldcase . G4e40) (string-downcase . G4e3f) (string-ci>? . G4e3e) (string-ci>=? . G4e3d) (string-ci=? . G4e3c) (string-ci<? . G4e3b) (string-ci<=? . G4e3a) (char-whitespace? . G4e39) (char-upper-case? . G4e38) (char-title-case? . G4e37) (char-numeric? . G4e36) (char-lower-case? . G4e35) (char-general-category . G4e34) (char-upcase . G4e33) (char-titlecase . G4e32) (char-foldcase . G4e31) (char-downcase . G4e30) (char-ci>? . G4e2f) (char-ci>=? . G4e2e) (char-ci=? . G4e2d) (char-ci<? . G4e2c) (char-ci<=? . G4e2b) (char-alphabetic? . G4e2a) (make-variable-transformer . G2b77) (identifier? . G2e1d) (generate-temporaries . G2e09) (free-identifier=? . G2e0b) (syntax->datum . G2e21) (datum->syntax . G2e1f) (bound-identifier=? . G2e0d) (record-type-descriptor? . G4e29) (record-predicate . G4e28) (record-mutator . G4e27) (record-constructor . G4e26) (record-accessor . G4e25) (make-record-type-descriptor . G4e24) (make-record-constructor-descriptor . G4e23) (record? . G4e22) (record-type-uid . G4e21) (record-type-sealed? . G4e20) (record-type-parent . G4e1f) (record-type-opaque? . G4e1e) (record-type-name . G4e1d) (record-type-generative? . G4e1c) (record-type-field-names . G4e1b) (record-rtd . G4e1a) (record-field-mutable? . G4e19) (delete-file . G4e18) (file-exists? . G4e17) (vector-sort! . G4e16) (vector-sort . G4e15) (list-sort . G4e14) (symbol-hash . G4e13) (string-ci-hash . G4e12) (string-hash . G4e11) (equal-hash . G4e10) (hashtable-equivalence-function . G4e0f) (make-hashtable . G4e0e) (hashtable-hash-function . G4e0d) (make-eqv-hashtable . G4e0c) (make-eq-hashtable . G4e0b) (hashtable? . G4e0a) (hashtable-update! . G4e09) (hashtable-size . G4e08) (hashtable-set! . G4e07) (hashtable-ref . G4e06) (hashtable-mutable? . G4e05) (hashtable-keys . G4e04) (hashtable-entries . G4e03) (hashtable-delete! . G4e02) (hashtable-copy . G4e01) (hashtable-contains? . G4e00) (hashtable-clear! . G4dff) (call-with-output-file . G4dfe) (call-with-input-file . G4dfd) (write-char . G4dfc) (write . G4dfb) (with-output-to-file . G4dfa) (with-input-from-file . G4df9) (read-char . G4df8) (read . G4df7) (peek-char . G4df6) (open-output-file . G4df5) (open-input-file . G4df4) (newline . G4df3) (display . G4df2) (close-output-port . G4df1) (close-input-port . G4df0) (eof-object? . G4def) (eof-object . G4dee) (current-error-port . G4ded) (current-output-port . G4dec) (current-input-port . G4deb) (output-port? . G4dea) (input-port? . G4de9) (utf-8-codec . G4de8) (utf-16-codec . G4de7) (transcoder-error-handling-mode . G4de6) (transcoder-eol-style . G4de5) (transcoder-codec . G4de4) (transcoded-port . G4de3) (textual-port? . G4de2) (string->bytevector . G4de1) (standard-output-port . G4de0) (standard-input-port . G4ddf) (standard-error-port . G4dde) (set-port-position! . G4ddd) (put-u8 . G4ddc) (put-string . G4ddb) (put-datum . G4dda) (put-char . G4dd9) (put-bytevector . G4dd8) (port? . G4dd7) (port-transcoder . G4dd6) (port-position . G4dd5) (port-has-set-port-position!? . G4dd4) (port-has-port-position? . G4dd3) (port-eof? . G4dd2) (output-port-buffer-mode . G4dd1) (open-string-output-port . G4dd0) (open-string-input-port . G4dcf) (open-file-output-port . G4dce) (open-file-input/output-port . G4dcd) (open-file-input-port . G4dcc) (open-bytevector-output-port . G4dcb) (open-bytevector-input-port . G4dca) (native-transcoder . G4dc9) (native-eol-style . G4dc8) (make-transcoder . G4dc7) (latin-1-codec . G4dc6) (make-i/o-write-error . G48c4) (make-i/o-read-error . G48af) (make-i/o-port-error . G4962) (make-i/o-invalid-position-error . G48da) (make-i/o-filename-error . G48f4) (make-i/o-file-protection-error . G490d) (make-i/o-file-is-read-only-error . G4922) (make-i/o-file-does-not-exist-error . G494c) (make-i/o-file-already-exists-error . G4937) (make-i/o-error . G489a) (make-i/o-encoding-error . G4991) (make-i/o-decoding-error . G497b) (make-custom-textual-output-port . G4dc5) (make-custom-textual-input/output-port . G4dc4) (make-custom-textual-input-port . G4dc3) (make-custom-binary-output-port . G4dc2) (make-custom-binary-input/output-port . G4dc1) (make-custom-binary-input-port . G4dc0) (make-bytevector . G4dbf) (lookahead-u8 . G4dbe) (lookahead-char . G4dbd) (i/o-write-error? . G48c6) (i/o-read-error? . G48b1) (i/o-port-error? . G4966) (i/o-invalid-position-error? . G48de) (i/o-filename-error? . G48f8) (i/o-file-protection-error? . G490f) (i/o-file-is-read-only-error? . G4924) (i/o-file-does-not-exist-error? . G494e) (i/o-file-already-exists-error? . G4939) (i/o-error? . G489c) (i/o-error-position . G48e0) (i/o-error-port . G4968) (i/o-error-filename . G48fa) (i/o-encoding-error? . G4995) (i/o-encoding-error-char . G4997) (i/o-decoding-error? . G497d) (get-u8 . G4dbc) (get-string-n! . G4dbb) (get-string-n . G4dba) (get-string-all . G4db9) (get-line . G4db8) (get-datum . G4db7) (get-char . G4db6) (get-bytevector-some . G4db5) (get-bytevector-n! . G4db4) (get-bytevector-n . G4db3) (get-bytevector-all . G4db2) (flush-output-port . G4db1) (close-port . G4db0) (scheme-report-environment . G2df7) (quotient . G4daf) (null-environment . G2df5) (remainder . G4dae) (modulo . G4dad) (inexact->exact . G4dac) (force . G4dab) (exact->inexact . G4daa) (make-promise . G4da9) (exit . G4da8) (command-line . G4acc) (string-fill! . G4da7) (string-set! . G4da6) (set-cdr! . G4da5) (set-car! . G4da4) (remove . G4da3) (remv . G4da2) (remp . G4da1) (remq . G4da0) (partition . G4d9f) (memv . G4d9e) (memq . G4d9d) (memp . G4d9c) (member . G4d9b) (exists . G4d9a) (for-all . G4d99) (fold-right . G4d98) (fold-left . G4d97) (find . G4d96) (filter . G4d95) (cons* . G4d94) (assv . G4d93) (assq . G4d92) (assp . G4d91) (assoc . G4d90) (call-with-string-output-port . G4d8f) (call-with-port . G4d8e) (call-with-bytevector-output-port . G4d8d) (bytevector->string . G4d8c) (buffer-mode? . G4d8b) (binary-port? . G4d8a) (with-exception-handler . G4d89) (raise-continuable . G4d88) (raise . G4d87) (eval . G2dfb) (environment . G2df3) (make-enumeration . G4d86) (enum-set=? . G4d85) (enum-set-universe . G4d84) (enum-set-union . G4d83) (enum-set-subset? . G4d82) (enum-set-projection . G4d81) (enum-set-member? . G4d80) (enum-set-intersection . G4d7f) (enum-set-indexer . G4d7e) (enum-set-difference . G4d7d) (enum-set-constructor . G4d7c) (enum-set-complement . G4d7b) (enum-set->list . G4d7a) (who-condition? . G4812) (warning? . G478c) (violation? . G47cb) (undefined-violation? . G4887) (syntax-violation? . G486e) (syntax-violation-subform . G4872) (syntax-violation-form . G4870) (syntax-violation . G2e1b) (simple-conditions . G4d79) (serious-condition? . G47a1) (non-continuable-violation? . G4829) (message-condition? . G4775) (make-who-condition . G480e) (make-warning . G478a) (make-violation . G47c9) (make-undefined-violation . G4885) (make-syntax-violation . G4868) (make-serious-condition . G479f) (make-non-continuable-violation . G4827) (make-message-condition . G4771) (make-lexical-violation . G4851) (make-irritants-condition . G47f4) (make-implementation-restriction-violation . G483c) (make-error . G47b4) (make-assertion-violation . G47de) (lexical-violation? . G4853) (irritants-condition? . G47f8) (implementation-restriction-violation? . G483e) (error? . G47b6) (condition-who . G4814) (condition-predicate . G4d78) (condition-message . G4777) (condition-irritants . G47fa) (condition-accessor . G4d77) (condition . G4d76) (assertion-violation? . G47e0) (condition? . G4d75) (utf32->string . G4d74) (utf16->string . G4d73) (utf8->string . G4d72) (uint-list->bytevector . G4d71) (u8-list->bytevector . G4d70) (string->utf8 . G4d6f) (string->utf32 . G4d6e) (string->utf16 . G4d6d) (sint-list->bytevector . G4d6c) (native-endianness . G4d6b) (bytevector? . G4d6a) (bytevector=? . G4d69) (bytevector-uint-set! . G4d68) (bytevector-uint-ref . G4d67) (bytevector-u8-set! . G4d66) (bytevector-u8-ref . G4d65) (bytevector-u64-set! . G4d64) (bytevector-u64-ref . G4d63) (bytevector-u64-native-set! . G4d62) (bytevector-u64-native-ref . G4d61) (bytevector-u32-set! . G4d60) (bytevector-u32-ref . G4d5f) (bytevector-u32-native-set! . G4d5e) (bytevector-u32-native-ref . G4d5d) (bytevector-u16-set! . G4d5c) (bytevector-u16-ref . G4d5b) (bytevector-u16-native-set! . G4d5a) (bytevector-u16-native-ref . G4d59) (bytevector-sint-set! . G4d58) (bytevector-sint-ref . G4d57) (bytevector-s8-set! . G4d56) (bytevector-s8-ref . G4d55) (bytevector-s64-set! . G4d54) (bytevector-s64-ref . G4d53) (bytevector-s64-native-set! . G4d52) (bytevector-s64-native-ref . G4d51) (bytevector-s32-set! . G4d50) (bytevector-s32-ref . G4d4f) (bytevector-s32-native-set! . G4d4e) (bytevector-s32-native-ref . G4d4d) (bytevector-s16-set! . G4d4c) (bytevector-s16-ref . G4d4b) (bytevector-s16-native-set! . G4d4a) (bytevector-s16-native-ref . G4d49) (bytevector-length . G4d48) (bytevector-ieee-single-ref . G4d47) (bytevector-ieee-single-set! . G4d46) (bytevector-ieee-single-native-set! . G4d45) (bytevector-ieee-single-native-ref . G4d44) (bytevector-ieee-double-set! . G4d43) (bytevector-ieee-double-ref . G4d42) (bytevector-ieee-double-native-set! . G4d41) (bytevector-ieee-double-native-ref . G4d40) (bytevector-fill! . G4d3f) (bytevector-copy! . G4d3e) (bytevector-copy . G4d3d) (bytevector->uint-list . G4d3c) (bytevector->u8-list . G4d3b) (bytevector->sint-list . G4d3a) (no-nans-violation? . G49c1) (no-infinities-violation? . G49ac) (make-no-nans-violation . G49bf) (make-no-infinities-violation . G49aa) (real->flonum . G4d39) (flzero? . G4d38) (fltruncate . G4d37) (fltan . G4d36) (flsqrt . G4d35) (flsin . G4d34) (flround . G4d33) (flpositive? . G4d32) (flonum? . G4d31) (flodd? . G4d30) (flnumerator . G4d2f) (flnegative? . G4d2e) (flnan? . G4d2d) (flmod0 . G4d2c) (flmod . G4d2b) (flmin . G4d2a) (flmax . G4d29) (fllog . G4d28) (flinteger? . G4d27) (flinfinite? . G4d26) (flfloor . G4d25) (flfinite? . G4d24) (flexpt . G4d23) (flexp . G4d22) (fleven? . G4d21) (fldiv0-and-mod0 . G4d20) (fldiv0 . G4d1f) (fldiv-and-mod . G4d1e) (fldiv . G4d1d) (fldenominator . G4d1c) (flcos . G4d1b) (flceiling . G4d1a) (flatan . G4d19) (flasin . G4d18) (flacos . G4d17) (flabs . G4d16) (fl>? . G4d15) (fl>=? . G4d14) (fl=? . G4d13) (fl<? . G4d12) (fl<=? . G4d11) (fl/ . G4d10) (fl- . G4d0f) (fl+ . G4d0e) (fl* . G4d0d) (fixnum->flonum . G4d0c) (fxzero? . G4d0b) (fxxor . G4d0a) (fxrotate-bit-field . G4d09) (fxreverse-bit-field . G4d08) (fxpositive? . G4d07) (fxodd? . G4d06) (fxnot . G4d05) (fxnegative? . G4d04) (fxmod0 . G4d03) (fxmod . G4d02) (fxmin . G4d01) (fxmax . G4d00) (fxlength . G4cff) (fxior . G4cfe) (fxif . G4cfd) (fxfirst-bit-set . G4cfc) (fxeven? . G4cfb) (fxdiv0-and-mod0 . G4cfa) (fxdiv0 . G4cf9) (fxdiv-and-mod . G4cf8) (fxdiv . G4cf7) (fxcopy-bit-field . G4cf6) (fxcopy-bit . G4cf5) (fxbit-set? . G4cf4) (fxbit-field . G4cf3) (fxbit-count . G4cf2) (fxarithmetic-shift-right . G4cf1) (fxarithmetic-shift-left . G4cf0) (fxarithmetic-shift . G4cef) (fxand . G4cee) (fx>? . G4ced) (fx>=? . G4cec) (fx=? . G4ceb) (fx<? . G4cea) (fx<=? . G4ce9) (fx-/carry . G4ce8) (fx- . G4ce7) (fx+/carry . G4ce6) (fx+ . G4ce5) (fx*/carry . G4ce4) (fx* . G4ce3) (greatest-fixnum . G4ce2) (least-fixnum . G4ce1) (fixnum-width . G4ce0) (fixnum? . G4cdf) (bitwise-rotate-bit-field . G4cde) (bitwise-reverse-bit-field . G4cdd) (bitwise-length . G4cdc) (bitwise-if . G4cdb) (bitwise-first-bit-set . G4cda) (bitwise-copy-bit-field . G4cd9) (bitwise-copy-bit . G4cd8) (bitwise-bit-set? . G4cd7) (bitwise-bit-field . G4cd6) (bitwise-bit-count . G4cd5) (bitwise-xor . G4cd4) (bitwise-ior . G4cd3) (bitwise-and . G4cd2) (bitwise-not . G4cd1) (bitwise-arithmetic-shift-right . G4cd0) (bitwise-arithmetic-shift-left . G4ccf) (bitwise-arithmetic-shift . G4cce) (zero? . G4ccd) (vector? . G4ccc) (vector-set! . G4ccb) (vector-ref . G4cca) (vector-map . G4cc9) (vector-length . G4cc8) (vector-for-each . G4cc7) (vector-fill! . G4cc6) (vector->list . G4cc5) (vector . G4cc4) (values . G4cc3) (truncate . G4cc2) (tan . G4cc1) (symbol? . G4cc0) (symbol=? . G4cbf) (symbol->string . G4cbe) (substring . G4cbd) (string? . G4cbc) (string>? . G4cbb) (string>=? . G4cba) (string=? . G4cb9) (string<? . G4cb8) (string<=? . G4cb7) (string-ref . G4cb6) (string-length . G4cb5) (string-for-each . G4cb4) (string-copy . G4cb3) (string-append . G4cb2) (string->symbol . G4cb1) (string->number . G4cb0) (string->list . G4caf) (string . G4cae) (sqrt . G4cad) (sin . G4cac) (round . G4cab) (reverse . G4caa) (real? . G4ca9) (real-valued? . G4ca8) (real-part . G4ca7) (rationalize . G4ca6) (rational? . G4ca5) (rational-valued? . G4ca4) (procedure? . G4ca3) (positive? . G4ca2) (pair? . G4ca1) (odd? . G4ca0) (numerator . G4c9f) (number? . G4c9e) (number->string . G4c9d) (null? . G4c9c) (not . G4c9b) (negative? . G4c9a) (nan? . G4c99) (min . G4c98) (max . G4c97) (map . G4c96) (make-vector . G4c95) (make-string . G4c94) (make-rectangular . G4c93) (make-polar . G4c92) (magnitude . G4c91) (log . G4c90) (list? . G4c8f) (list-tail . G4c8e) (list-ref . G4c8d) (list->vector . G4c8c) (list->string . G4c8b) (list . G4c8a) (length . G4c89) (lcm . G4c88) (integer? . G4c87) (integer-valued? . G4c86) (integer->char . G4c85) (infinite? . G4c84) (inexact? . G4c83) (inexact . G4c82) (imag-part . G4c81) (gcd . G4c80) (for-each . G4c7f) (floor . G4c7e) (finite? . G4c7d) (expt . G4c7c) (exp . G4c7b) (exact? . G4c7a) (exact-integer-sqrt . G4c79) (exact . G4c78) (even? . G4c77) (error . G4c76) (eqv? . G4c75) (equal? . G4c74) (eq? . G4c73) (dynamic-wind . G4c72) (div0-and-mod0 . G4c71) (mod0 . G4c70) (div0 . G4c6f) (div-and-mod . G4c6e) (mod . G4c6d) (div . G4c6c) (denominator . G4c6b) (cos . G4c6a) (cons . G4c69) (complex? . G4c68) (char? . G4c67) (char>? . G4c66) (char>=? . G4c65) (char=? . G4c64) (char<? . G4c63) (char<=? . G4c62) (char->integer . G4c61) (ceiling . G4c60) (call-with-values . G4c5f) (call/cc . G4c5e) (call-with-current-continuation . G4c5d) (cddddr . G4c5c) (cdddar . G4c5b) (cddadr . G4c5a) (cddaar . G4c59) (cdaddr . G4c58) (cdadar . G4c57) (cdaadr . G4c56) (cdaaar . G4c55) (cadddr . G4c54) (caddar . G4c53) (cadadr . G4c52) (cadaar . G4c51) (caaddr . G4c50) (caadar . G4c4f) (caaadr . G4c4e) (caaaar . G4c4d) (cdddr . G4c4c) (cddar . G4c4b) (cdadr . G4c4a) (cdaar . G4c49) (caddr . G4c48) (cadar . G4c47) (caadr . G4c46) (caaar . G4c45) (cddr . G4c44) (cdar . G4c43) (cadr . G4c42) (caar . G4c41) (cdr . G4c40) (car . G4c3f) (boolean? . G4c3e) (boolean=? . G4c3d) (atan . G4c3c) (assertion-violation . G4c3b) (asin . G4c3a) (apply . G4c39) (append . G4c38) (angle . G4c37) (acos . G4c36) (abs . G4c35) (/ . G4c34) (* . G4c33) (- . G4c32) (+ . G4c31) (>= . G4c30) (> . G4c2f) (= . G4c2e) (<= . G4c2d) (< . G4c2c) (library . G4c2b) (&no-nans . G4c2a) (&no-infinities . G4c29) (&i/o-encoding . G4c28) (&i/o-decoding . G4c27) (&i/o-port . G4c26) (&i/o-file-does-not-exist . G4c25) (&i/o-file-already-exists . G4c24) (&i/o-file-is-read-only . G4c23) (&i/o-file-protection . G4c22) (&i/o-filename . G4c21) (&i/o-invalid-position . G4c20) (&i/o-write . G4c1f) (&i/o-read . G4c1e) (&i/o . G4c1d) (&undefined . G4c1c) (&syntax . G4c1b) (&lexical . G4c1a) (&implementation-restriction . G4c19) (&non-continuable . G4c18) (&who . G4c17) (&irritants . G4c16) (&assertion . G4c15) (&violation . G4c14) (&error . G4c13) (&serious . G4c12) (&warning . G4c11) (&message . G4c10) (&condition . G4c0f) (define-condition-type . G4c0e) (define-enumeration . G4c0d) (define-record-type . G4c0c) (parent-rtd . G4c0b) (nongenerative . G4c0a) (opaque . G4c09) (sealed . G4c08) (protocol . G4c07) (parent . G4c06) (immutable . G4c05) (mutable . G4c04) (fields . G4c03) (error-handling-mode . G4c02) (file-options . G4c01) (buffer-mode . G4c00) (eol-style . G4bff) (guard . G4bfe) (trace-define . G4bfd) (trace-lambda . G4bfc) (unsyntax-splicing . G4bfb) (unsyntax . G4bfa) (unquote-splicing . G4bf9) (unquote . G4bf8) (_ . G4bf7) (else . G4bf6) (=> . G4bf5) (... . G4bf4) (assert . G4bf3) (endianness . G4bf2) (delay . G4bf1) (time . G4bf0) (do . G4bef) (cond . G4bee) (let* . G4bed) (let . G4bec) (let*-values . G4beb) (let-values . G4bea) (identifier-syntax . G4be9) (with-syntax . G4be8) (quasisyntax . G4be7) (quasiquote . G4be6) (syntax-rules . G4be5) (include . G4be4) (define-struct . G4be3) (record-constructor-descriptor . G4be2) (record-type-descriptor . G4be1) (case . G4be0) (parameterize . G4bdf) (unless . G4bde) (when . G4bdd) (or . G4bdc) (and . G4bdb) (if . G4bda) (letrec* . G4bd9) (letrec . G4bd8) (type-descriptor . G4bd7) (case-lambda . G4bd6) (lambda . G4bd5) (syntax . G4bd4) (syntax-case . G4bd3) (quote . G4bd2) (foreign-call . G4bd1) (letrec-syntax . G4bd0) (let-syntax . G4bcf) (set! . G4bce) (import . G4bcd) (begin . G4bcc) (module . G4bcb) (define-syntax . G4bca) (define . G4bc9)) '((G49c5 core-prim . &no-nans-rcd) (G49c3 core-prim . &no-nans-rtd) (G49b0 core-prim . &no-infinities-rcd) (G49ae core-prim . &no-infinities-rtd) (G499b core-prim . &i/o-encoding-rcd) (G4999 core-prim . &i/o-encoding-rtd) (G4981 core-prim . &i/o-decoding-rcd) (G497f core-prim . &i/o-decoding-rtd) (G496c core-prim . &i/o-port-rcd) (G496a core-prim . &i/o-port-rtd) (G4952 core-prim . &i/o-file-does-not-exist-rcd) (G4950 core-prim . &i/o-file-does-not-exist-rtd) (G493d core-prim . &i/o-file-already-exists-rcd) (G493b core-prim . &i/o-file-already-exists-rtd) (G4928 core-prim . &i/o-file-is-read-only-rcd) (G4926 core-prim . &i/o-file-is-read-only-rtd) (G4913 core-prim . &i/o-file-protection-rcd) (G4911 core-prim . &i/o-file-protection-rtd) (G48fe core-prim . &i/o-filename-rcd) (G48fc core-prim . &i/o-filename-rtd) (G48e4 core-prim . &i/o-invalid-position-rcd) (G48e2 core-prim . &i/o-invalid-position-rtd) (G48ca core-prim . &i/o-write-rcd) (G48c8 core-prim . &i/o-write-rtd) (G48b5 core-prim . &i/o-read-rcd) (G48b3 core-prim . &i/o-read-rtd) (G48a0 core-prim . &i/o-rcd) (G489e core-prim . &i/o-rtd) (G488b core-prim . &undefined-rcd) (G4889 core-prim . &undefined-rtd) (G4876 core-prim . &syntax-rcd) (G4874 core-prim . &syntax-rtd) (G4857 core-prim . &lexical-rcd) (G4855 core-prim . &lexical-rtd) (G4842 core-prim . &implementation-restriction-rcd) (G4840 core-prim . &implementation-restriction-rtd) (G482d core-prim . &non-continuable-rcd) (G482b core-prim . &non-continuable-rtd) (G4818 core-prim . &who-rcd) (G4816 core-prim . &who-rtd) (G47fe core-prim . &irritants-rcd) (G47fc core-prim . &irritants-rtd) (G47e4 core-prim . &assertion-rcd) (G47e2 core-prim . &assertion-rtd) (G47cf core-prim . &violation-rcd) (G47cd core-prim . &violation-rtd) (G47ba core-prim . &error-rcd) (G47b8 core-prim . &error-rtd) (G47a5 core-prim . &serious-rcd) (G47a3 core-prim . &serious-rtd) (G4790 core-prim . &warning-rcd) (G478e core-prim . &warning-rtd) (G477b core-prim . &message-rcd) (G4779 core-prim . &message-rtd) (G4720 core-prim . &condition-rcd) (G471e core-prim . &condition-rtd) (G2e17 core-prim . syntax-error) (G2d30 core-prim . syntax-dispatch) (G4e8a core-prim . pretty-print) (G4e89 core-prim . eval-core) (G4e88 core-prim . set-symbol-value!) (G4e87 core-prim . symbol-value) (G4e86 core-prim . gensym) (G4e85 core-prim . void) (G4ad2 core-prim . load) (G2e27 core-prim . interaction-environment) (G4e84 core-prim . char-ready?) (G4e83 core-prim . regexp?) (G4e82 core-prim . read-line) (G4e81 core-prim . ungensym) (G4e80 core-prim . alist->eq-hash-table) (G4e7f core-prim . assoc-ref) (G4e7e core-prim . print) (G4e7d core-prim . format) (G4e7c core-prim . host-os) (G27ea core-prim . library-path) (G4e7b core-prim . standard-library-path) (G4e7a core-prim . file-newer?) (G4e79 core-prim . stat-mtime) (G4e78 core-prim . write-to-file) (G4e77 core-prim . file->list) (G4e76 core-prim . file->string) (G4e75 core-prim . digit->integer) (G4e74 core-prim . call-with-string-input-port) (G4e73 core-prim . call-with-string-io) (G4e72 core-prim . string-split) (G4e71 core-prim . bytevector-for-each) (G4e70 core-prim . string->regexp) (G4e6f core-prim . rxmatch) (G4e6e core-prim . regexp-replace-all) (G4e6d core-prim . hashtable-for-each) (G4e6c core-prim . call-process) (G4e6b core-prim . local-tz-offset) (G4e6a core-prim . microseconds) (G4e69 core-prim . readdir) (G4e68 core-prim . set-current-directory!) (G4e67 core-prim . expand-path) (G4e66 core-prim . current-directory) (G4e65 core-prim . %spawn) (G4e64 core-prim . %waitpid) (G4e63 core-prim . %ffi-supported?) (G4e62 core-prim . %ffi-pointer-ref) (G4e61 core-prim . %ffi-pointer->string) (G4e60 core-prim . %ffi-call->string-or-zero) (G4e5f core-prim . %ffi-call->double) (G4e5e core-prim . %ffi-call->void*) (G4e5d core-prim . %ffi-call->void) (G4e5c core-prim . %ffi-call->int) (G4e5b core-prim . %ffi-lookup) (G4e5a core-prim . %ffi-open) (G4e59 core-prim . %fork) (G4e58 core-prim . %pipe) (G4e57 core-prim . p) (G4e56 core-prim . open-output-string) (G4e55 core-prim . get-output-string) (G4e54 core-prim . get-environment-variables) (G4e53 core-prim . get-environment-variable) (G4e52 core-prim . get-timeofday) (G4e51 core-prim . get-command-line) (G4e50 core-prim . sys-display) (G4e4f core-prim . source-info) (G4e4e core-prim . make-compiler-instruction) (G4e4d core-prim . make-instruction) (G4e4c core-prim . set-source-info!) (G4e4b core-prim . bignum?) (G4e4a core-prim . fast-equal?) (G4e49 core-prim . fasl-read) (G4e48 core-prim . fasl-write) (G4e47 core-prim . time-usage) (G2621 core-prim . make-parameter) (G4e46 core-prim . string-upcase) (G4e45 core-prim . string-titlecase) (G4e44 core-prim . string-normalize-nfkd) (G4e43 core-prim . string-normalize-nfkc) (G4e42 core-prim . string-normalize-nfd) (G4e41 core-prim . string-normalize-nfc) (G4e40 core-prim . string-foldcase) (G4e3f core-prim . string-downcase) (G4e3e core-prim . string-ci>?) (G4e3d core-prim . string-ci>=?) (G4e3c core-prim . string-ci=?) (G4e3b core-prim . string-ci<?) (G4e3a core-prim . string-ci<=?) (G4e39 core-prim . char-whitespace?) (G4e38 core-prim . char-upper-case?) (G4e37 core-prim . char-title-case?) (G4e36 core-prim . char-numeric?) (G4e35 core-prim . char-lower-case?) (G4e34 core-prim . char-general-category) (G4e33 core-prim . char-upcase) (G4e32 core-prim . char-titlecase) (G4e31 core-prim . char-foldcase) (G4e30 core-prim . char-downcase) (G4e2f core-prim . char-ci>?) (G4e2e core-prim . char-ci>=?) (G4e2d core-prim . char-ci=?) (G4e2c core-prim . char-ci<?) (G4e2b core-prim . char-ci<=?) (G4e2a core-prim . char-alphabetic?) (G2b77 core-prim . make-variable-transformer) (G2e1d core-prim . identifier?) (G2e09 core-prim . generate-temporaries) (G2e0b core-prim . free-identifier=?) (G2e21 core-prim . syntax->datum) (G2e1f core-prim . datum->syntax) (G2e0d core-prim . bound-identifier=?) (G4e29 core-prim . record-type-descriptor?) (G4e28 core-prim . record-predicate) (G4e27 core-prim . record-mutator) (G4e26 core-prim . record-constructor) (G4e25 core-prim . record-accessor) (G4e24 core-prim . make-record-type-descriptor) (G4e23 core-prim . make-record-constructor-descriptor) (G4e22 core-prim . record?) (G4e21 core-prim . record-type-uid) (G4e20 core-prim . record-type-sealed?) (G4e1f core-prim . record-type-parent) (G4e1e core-prim . record-type-opaque?) (G4e1d core-prim . record-type-name) (G4e1c core-prim . record-type-generative?) (G4e1b core-prim . record-type-field-names) (G4e1a core-prim . record-rtd) (G4e19 core-prim . record-field-mutable?) (G4e18 core-prim . delete-file) (G4e17 core-prim . file-exists?) (G4e16 core-prim . vector-sort!) (G4e15 core-prim . vector-sort) (G4e14 core-prim . list-sort) (G4e13 core-prim . symbol-hash) (G4e12 core-prim . string-ci-hash) (G4e11 core-prim . string-hash) (G4e10 core-prim . equal-hash) (G4e0f core-prim . hashtable-equivalence-function) (G4e0e core-prim . make-hashtable) (G4e0d core-prim . hashtable-hash-function) (G4e0c core-prim . make-eqv-hashtable) (G4e0b core-prim . make-eq-hashtable) (G4e0a core-prim . hashtable?) (G4e09 core-prim . hashtable-update!) (G4e08 core-prim . hashtable-size) (G4e07 core-prim . hashtable-set!) (G4e06 core-prim . hashtable-ref) (G4e05 core-prim . hashtable-mutable?) (G4e04 core-prim . hashtable-keys) (G4e03 core-prim . hashtable-entries) (G4e02 core-prim . hashtable-delete!) (G4e01 core-prim . hashtable-copy) (G4e00 core-prim . hashtable-contains?) (G4dff core-prim . hashtable-clear!) (G4dfe core-prim . call-with-output-file) (G4dfd core-prim . call-with-input-file) (G4dfc core-prim . write-char) (G4dfb core-prim . write) (G4dfa core-prim . with-output-to-file) (G4df9 core-prim . with-input-from-file) (G4df8 core-prim . read-char) (G4df7 core-prim . read) (G4df6 core-prim . peek-char) (G4df5 core-prim . open-output-file) (G4df4 core-prim . open-input-file) (G4df3 core-prim . newline) (G4df2 core-prim . display) (G4df1 core-prim . close-output-port) (G4df0 core-prim . close-input-port) (G4def core-prim . eof-object?) (G4dee core-prim . eof-object) (G4ded core-prim . current-error-port) (G4dec core-prim . current-output-port) (G4deb core-prim . current-input-port) (G4dea core-prim . output-port?) (G4de9 core-prim . input-port?) (G4de8 core-prim . utf-8-codec) (G4de7 core-prim . utf-16-codec) (G4de6 core-prim . transcoder-error-handling-mode) (G4de5 core-prim . transcoder-eol-style) (G4de4 core-prim . transcoder-codec) (G4de3 core-prim . transcoded-port) (G4de2 core-prim . textual-port?) (G4de1 core-prim . string->bytevector) (G4de0 core-prim . standard-output-port) (G4ddf core-prim . standard-input-port) (G4dde core-prim . standard-error-port) (G4ddd core-prim . set-port-position!) (G4ddc core-prim . put-u8) (G4ddb core-prim . put-string) (G4dda core-prim . put-datum) (G4dd9 core-prim . put-char) (G4dd8 core-prim . put-bytevector) (G4dd7 core-prim . port?) (G4dd6 core-prim . port-transcoder) (G4dd5 core-prim . port-position) (G4dd4 core-prim . port-has-set-port-position!?) (G4dd3 core-prim . port-has-port-position?) (G4dd2 core-prim . port-eof?) (G4dd1 core-prim . output-port-buffer-mode) (G4dd0 core-prim . open-string-output-port) (G4dcf core-prim . open-string-input-port) (G4dce core-prim . open-file-output-port) (G4dcd core-prim . open-file-input/output-port) (G4dcc core-prim . open-file-input-port) (G4dcb core-prim . open-bytevector-output-port) (G4dca core-prim . open-bytevector-input-port) (G4dc9 core-prim . native-transcoder) (G4dc8 core-prim . native-eol-style) (G4dc7 core-prim . make-transcoder) (G4dc6 core-prim . latin-1-codec) (G48c4 core-prim . make-i/o-write-error) (G48af core-prim . make-i/o-read-error) (G4962 core-prim . make-i/o-port-error) (G48da core-prim . make-i/o-invalid-position-error) (G48f4 core-prim . make-i/o-filename-error) (G490d core-prim . make-i/o-file-protection-error) (G4922 core-prim . make-i/o-file-is-read-only-error) (G494c core-prim . make-i/o-file-does-not-exist-error) (G4937 core-prim . make-i/o-file-already-exists-error) (G489a core-prim . make-i/o-error) (G4991 core-prim . make-i/o-encoding-error) (G497b core-prim . make-i/o-decoding-error) (G4dc5 core-prim . make-custom-textual-output-port) (G4dc4 core-prim . make-custom-textual-input/output-port) (G4dc3 core-prim . make-custom-textual-input-port) (G4dc2 core-prim . make-custom-binary-output-port) (G4dc1 core-prim . make-custom-binary-input/output-port) (G4dc0 core-prim . make-custom-binary-input-port) (G4dbf core-prim . make-bytevector) (G4dbe core-prim . lookahead-u8) (G4dbd core-prim . lookahead-char) (G48c6 core-prim . i/o-write-error?) (G48b1 core-prim . i/o-read-error?) (G4966 core-prim . i/o-port-error?) (G48de core-prim . i/o-invalid-position-error?) (G48f8 core-prim . i/o-filename-error?) (G490f core-prim . i/o-file-protection-error?) (G4924 core-prim . i/o-file-is-read-only-error?) (G494e core-prim . i/o-file-does-not-exist-error?) (G4939 core-prim . i/o-file-already-exists-error?) (G489c core-prim . i/o-error?) (G48e0 core-prim . i/o-error-position) (G4968 core-prim . i/o-error-port) (G48fa core-prim . i/o-error-filename) (G4995 core-prim . i/o-encoding-error?) (G4997 core-prim . i/o-encoding-error-char) (G497d core-prim . i/o-decoding-error?) (G4dbc core-prim . get-u8) (G4dbb core-prim . get-string-n!) (G4dba core-prim . get-string-n) (G4db9 core-prim . get-string-all) (G4db8 core-prim . get-line) (G4db7 core-prim . get-datum) (G4db6 core-prim . get-char) (G4db5 core-prim . get-bytevector-some) (G4db4 core-prim . get-bytevector-n!) (G4db3 core-prim . get-bytevector-n) (G4db2 core-prim . get-bytevector-all) (G4db1 core-prim . flush-output-port) (G4db0 core-prim . close-port) (G2df7 core-prim . scheme-report-environment) (G4daf core-prim . quotient) (G2df5 core-prim . null-environment) (G4dae core-prim . remainder) (G4dad core-prim . modulo) (G4dac core-prim . inexact->exact) (G4dab core-prim . force) (G4daa core-prim . exact->inexact) (G4da9 core-prim . make-promise) (G4da8 core-prim . exit) (G4acc core-prim . command-line) (G4da7 core-prim . string-fill!) (G4da6 core-prim . string-set!) (G4da5 core-prim . set-cdr!) (G4da4 core-prim . set-car!) (G4da3 core-prim . remove) (G4da2 core-prim . remv) (G4da1 core-prim . remp) (G4da0 core-prim . remq) (G4d9f core-prim . partition) (G4d9e core-prim . memv) (G4d9d core-prim . memq) (G4d9c core-prim . memp) (G4d9b core-prim . member) (G4d9a core-prim . exists) (G4d99 core-prim . for-all) (G4d98 core-prim . fold-right) (G4d97 core-prim . fold-left) (G4d96 core-prim . find) (G4d95 core-prim . filter) (G4d94 core-prim . cons*) (G4d93 core-prim . assv) (G4d92 core-prim . assq) (G4d91 core-prim . assp) (G4d90 core-prim . assoc) (G4d8f core-prim . call-with-string-output-port) (G4d8e core-prim . call-with-port) (G4d8d core-prim . call-with-bytevector-output-port) (G4d8c core-prim . bytevector->string) (G4d8b core-prim . buffer-mode?) (G4d8a core-prim . binary-port?) (G4d89 core-prim . with-exception-handler) (G4d88 core-prim . raise-continuable) (G4d87 core-prim . raise) (G2dfb core-prim . eval) (G2df3 core-prim . environment) (G4d86 core-prim . make-enumeration) (G4d85 core-prim . enum-set=?) (G4d84 core-prim . enum-set-universe) (G4d83 core-prim . enum-set-union) (G4d82 core-prim . enum-set-subset?) (G4d81 core-prim . enum-set-projection) (G4d80 core-prim . enum-set-member?) (G4d7f core-prim . enum-set-intersection) (G4d7e core-prim . enum-set-indexer) (G4d7d core-prim . enum-set-difference) (G4d7c core-prim . enum-set-constructor) (G4d7b core-prim . enum-set-complement) (G4d7a core-prim . enum-set->list) (G4812 core-prim . who-condition?) (G478c core-prim . warning?) (G47cb core-prim . violation?) (G4887 core-prim . undefined-violation?) (G486e core-prim . syntax-violation?) (G4872 core-prim . syntax-violation-subform) (G4870 core-prim . syntax-violation-form) (G2e1b core-prim . syntax-violation) (G4d79 core-prim . simple-conditions) (G47a1 core-prim . serious-condition?) (G4829 core-prim . non-continuable-violation?) (G4775 core-prim . message-condition?) (G480e core-prim . make-who-condition) (G478a core-prim . make-warning) (G47c9 core-prim . make-violation) (G4885 core-prim . make-undefined-violation) (G4868 core-prim . make-syntax-violation) (G479f core-prim . make-serious-condition) (G4827 core-prim . make-non-continuable-violation) (G4771 core-prim . make-message-condition) (G4851 core-prim . make-lexical-violation) (G47f4 core-prim . make-irritants-condition) (G483c core-prim . make-implementation-restriction-violation) (G47b4 core-prim . make-error) (G47de core-prim . make-assertion-violation) (G4853 core-prim . lexical-violation?) (G47f8 core-prim . irritants-condition?) (G483e core-prim . implementation-restriction-violation?) (G47b6 core-prim . error?) (G4814 core-prim . condition-who) (G4d78 core-prim . condition-predicate) (G4777 core-prim . condition-message) (G47fa core-prim . condition-irritants) (G4d77 core-prim . condition-accessor) (G4d76 core-prim . condition) (G47e0 core-prim . assertion-violation?) (G4d75 core-prim . condition?) (G4d74 core-prim . utf32->string) (G4d73 core-prim . utf16->string) (G4d72 core-prim . utf8->string) (G4d71 core-prim . uint-list->bytevector) (G4d70 core-prim . u8-list->bytevector) (G4d6f core-prim . string->utf8) (G4d6e core-prim . string->utf32) (G4d6d core-prim . string->utf16) (G4d6c core-prim . sint-list->bytevector) (G4d6b core-prim . native-endianness) (G4d6a core-prim . bytevector?) (G4d69 core-prim . bytevector=?) (G4d68 core-prim . bytevector-uint-set!) (G4d67 core-prim . bytevector-uint-ref) (G4d66 core-prim . bytevector-u8-set!) (G4d65 core-prim . bytevector-u8-ref) (G4d64 core-prim . bytevector-u64-set!) (G4d63 core-prim . bytevector-u64-ref) (G4d62 core-prim . bytevector-u64-native-set!) (G4d61 core-prim . bytevector-u64-native-ref) (G4d60 core-prim . bytevector-u32-set!) (G4d5f core-prim . bytevector-u32-ref) (G4d5e core-prim . bytevector-u32-native-set!) (G4d5d core-prim . bytevector-u32-native-ref) (G4d5c core-prim . bytevector-u16-set!) (G4d5b core-prim . bytevector-u16-ref) (G4d5a core-prim . bytevector-u16-native-set!) (G4d59 core-prim . bytevector-u16-native-ref) (G4d58 core-prim . bytevector-sint-set!) (G4d57 core-prim . bytevector-sint-ref) (G4d56 core-prim . bytevector-s8-set!) (G4d55 core-prim . bytevector-s8-ref) (G4d54 core-prim . bytevector-s64-set!) (G4d53 core-prim . bytevector-s64-ref) (G4d52 core-prim . bytevector-s64-native-set!) (G4d51 core-prim . bytevector-s64-native-ref) (G4d50 core-prim . bytevector-s32-set!) (G4d4f core-prim . bytevector-s32-ref) (G4d4e core-prim . bytevector-s32-native-set!) (G4d4d core-prim . bytevector-s32-native-ref) (G4d4c core-prim . bytevector-s16-set!) (G4d4b core-prim . bytevector-s16-ref) (G4d4a core-prim . bytevector-s16-native-set!) (G4d49 core-prim . bytevector-s16-native-ref) (G4d48 core-prim . bytevector-length) (G4d47 core-prim . bytevector-ieee-single-ref) (G4d46 core-prim . bytevector-ieee-single-set!) (G4d45 core-prim . bytevector-ieee-single-native-set!) (G4d44 core-prim . bytevector-ieee-single-native-ref) (G4d43 core-prim . bytevector-ieee-double-set!) (G4d42 core-prim . bytevector-ieee-double-ref) (G4d41 core-prim . bytevector-ieee-double-native-set!) (G4d40 core-prim . bytevector-ieee-double-native-ref) (G4d3f core-prim . bytevector-fill!) (G4d3e core-prim . bytevector-copy!) (G4d3d core-prim . bytevector-copy) (G4d3c core-prim . bytevector->uint-list) (G4d3b core-prim . bytevector->u8-list) (G4d3a core-prim . bytevector->sint-list) (G49c1 core-prim . no-nans-violation?) (G49ac core-prim . no-infinities-violation?) (G49bf core-prim . make-no-nans-violation) (G49aa core-prim . make-no-infinities-violation) (G4d39 core-prim . real->flonum) (G4d38 core-prim . flzero?) (G4d37 core-prim . fltruncate) (G4d36 core-prim . fltan) (G4d35 core-prim . flsqrt) (G4d34 core-prim . flsin) (G4d33 core-prim . flround) (G4d32 core-prim . flpositive?) (G4d31 core-prim . flonum?) (G4d30 core-prim . flodd?) (G4d2f core-prim . flnumerator) (G4d2e core-prim . flnegative?) (G4d2d core-prim . flnan?) (G4d2c core-prim . flmod0) (G4d2b core-prim . flmod) (G4d2a core-prim . flmin) (G4d29 core-prim . flmax) (G4d28 core-prim . fllog) (G4d27 core-prim . flinteger?) (G4d26 core-prim . flinfinite?) (G4d25 core-prim . flfloor) (G4d24 core-prim . flfinite?) (G4d23 core-prim . flexpt) (G4d22 core-prim . flexp) (G4d21 core-prim . fleven?) (G4d20 core-prim . fldiv0-and-mod0) (G4d1f core-prim . fldiv0) (G4d1e core-prim . fldiv-and-mod) (G4d1d core-prim . fldiv) (G4d1c core-prim . fldenominator) (G4d1b core-prim . flcos) (G4d1a core-prim . flceiling) (G4d19 core-prim . flatan) (G4d18 core-prim . flasin) (G4d17 core-prim . flacos) (G4d16 core-prim . flabs) (G4d15 core-prim . fl>?) (G4d14 core-prim . fl>=?) (G4d13 core-prim . fl=?) (G4d12 core-prim . fl<?) (G4d11 core-prim . fl<=?) (G4d10 core-prim . fl/) (G4d0f core-prim . fl-) (G4d0e core-prim . fl+) (G4d0d core-prim . fl*) (G4d0c core-prim . fixnum->flonum) (G4d0b core-prim . fxzero?) (G4d0a core-prim . fxxor) (G4d09 core-prim . fxrotate-bit-field) (G4d08 core-prim . fxreverse-bit-field) (G4d07 core-prim . fxpositive?) (G4d06 core-prim . fxodd?) (G4d05 core-prim . fxnot) (G4d04 core-prim . fxnegative?) (G4d03 core-prim . fxmod0) (G4d02 core-prim . fxmod) (G4d01 core-prim . fxmin) (G4d00 core-prim . fxmax) (G4cff core-prim . fxlength) (G4cfe core-prim . fxior) (G4cfd core-prim . fxif) (G4cfc core-prim . fxfirst-bit-set) (G4cfb core-prim . fxeven?) (G4cfa core-prim . fxdiv0-and-mod0) (G4cf9 core-prim . fxdiv0) (G4cf8 core-prim . fxdiv-and-mod) (G4cf7 core-prim . fxdiv) (G4cf6 core-prim . fxcopy-bit-field) (G4cf5 core-prim . fxcopy-bit) (G4cf4 core-prim . fxbit-set?) (G4cf3 core-prim . fxbit-field) (G4cf2 core-prim . fxbit-count) (G4cf1 core-prim . fxarithmetic-shift-right) (G4cf0 core-prim . fxarithmetic-shift-left) (G4cef core-prim . fxarithmetic-shift) (G4cee core-prim . fxand) (G4ced core-prim . fx>?) (G4cec core-prim . fx>=?) (G4ceb core-prim . fx=?) (G4cea core-prim . fx<?) (G4ce9 core-prim . fx<=?) (G4ce8 core-prim . fx-/carry) (G4ce7 core-prim . fx-) (G4ce6 core-prim . fx+/carry) (G4ce5 core-prim . fx+) (G4ce4 core-prim . fx*/carry) (G4ce3 core-prim . fx*) (G4ce2 core-prim . greatest-fixnum) (G4ce1 core-prim . least-fixnum) (G4ce0 core-prim . fixnum-width) (G4cdf core-prim . fixnum?) (G4cde core-prim . bitwise-rotate-bit-field) (G4cdd core-prim . bitwise-reverse-bit-field) (G4cdc core-prim . bitwise-length) (G4cdb core-prim . bitwise-if) (G4cda core-prim . bitwise-first-bit-set) (G4cd9 core-prim . bitwise-copy-bit-field) (G4cd8 core-prim . bitwise-copy-bit) (G4cd7 core-prim . bitwise-bit-set?) (G4cd6 core-prim . bitwise-bit-field) (G4cd5 core-prim . bitwise-bit-count) (G4cd4 core-prim . bitwise-xor) (G4cd3 core-prim . bitwise-ior) (G4cd2 core-prim . bitwise-and) (G4cd1 core-prim . bitwise-not) (G4cd0 core-prim . bitwise-arithmetic-shift-right) (G4ccf core-prim . bitwise-arithmetic-shift-left) (G4cce core-prim . bitwise-arithmetic-shift) (G4ccd core-prim . zero?) (G4ccc core-prim . vector?) (G4ccb core-prim . vector-set!) (G4cca core-prim . vector-ref) (G4cc9 core-prim . vector-map) (G4cc8 core-prim . vector-length) (G4cc7 core-prim . vector-for-each) (G4cc6 core-prim . vector-fill!) (G4cc5 core-prim . vector->list) (G4cc4 core-prim . vector) (G4cc3 core-prim . values) (G4cc2 core-prim . truncate) (G4cc1 core-prim . tan) (G4cc0 core-prim . symbol?) (G4cbf core-prim . symbol=?) (G4cbe core-prim . symbol->string) (G4cbd core-prim . substring) (G4cbc core-prim . string?) (G4cbb core-prim . string>?) (G4cba core-prim . string>=?) (G4cb9 core-prim . string=?) (G4cb8 core-prim . string<?) (G4cb7 core-prim . string<=?) (G4cb6 core-prim . string-ref) (G4cb5 core-prim . string-length) (G4cb4 core-prim . string-for-each) (G4cb3 core-prim . string-copy) (G4cb2 core-prim . string-append) (G4cb1 core-prim . string->symbol) (G4cb0 core-prim . string->number) (G4caf core-prim . string->list) (G4cae core-prim . string) (G4cad core-prim . sqrt) (G4cac core-prim . sin) (G4cab core-prim . round) (G4caa core-prim . reverse) (G4ca9 core-prim . real?) (G4ca8 core-prim . real-valued?) (G4ca7 core-prim . real-part) (G4ca6 core-prim . rationalize) (G4ca5 core-prim . rational?) (G4ca4 core-prim . rational-valued?) (G4ca3 core-prim . procedure?) (G4ca2 core-prim . positive?) (G4ca1 core-prim . pair?) (G4ca0 core-prim . odd?) (G4c9f core-prim . numerator) (G4c9e core-prim . number?) (G4c9d core-prim . number->string) (G4c9c core-prim . null?) (G4c9b core-prim . not) (G4c9a core-prim . negative?) (G4c99 core-prim . nan?) (G4c98 core-prim . min) (G4c97 core-prim . max) (G4c96 core-prim . map) (G4c95 core-prim . make-vector) (G4c94 core-prim . make-string) (G4c93 core-prim . make-rectangular) (G4c92 core-prim . make-polar) (G4c91 core-prim . magnitude) (G4c90 core-prim . log) (G4c8f core-prim . list?) (G4c8e core-prim . list-tail) (G4c8d core-prim . list-ref) (G4c8c core-prim . list->vector) (G4c8b core-prim . list->string) (G4c8a core-prim . list) (G4c89 core-prim . length) (G4c88 core-prim . lcm) (G4c87 core-prim . integer?) (G4c86 core-prim . integer-valued?) (G4c85 core-prim . integer->char) (G4c84 core-prim . infinite?) (G4c83 core-prim . inexact?) (G4c82 core-prim . inexact) (G4c81 core-prim . imag-part) (G4c80 core-prim . gcd) (G4c7f core-prim . for-each) (G4c7e core-prim . floor) (G4c7d core-prim . finite?) (G4c7c core-prim . expt) (G4c7b core-prim . exp) (G4c7a core-prim . exact?) (G4c79 core-prim . exact-integer-sqrt) (G4c78 core-prim . exact) (G4c77 core-prim . even?) (G4c76 core-prim . error) (G4c75 core-prim . eqv?) (G4c74 core-prim . equal?) (G4c73 core-prim . eq?) (G4c72 core-prim . dynamic-wind) (G4c71 core-prim . div0-and-mod0) (G4c70 core-prim . mod0) (G4c6f core-prim . div0) (G4c6e core-prim . div-and-mod) (G4c6d core-prim . mod) (G4c6c core-prim . div) (G4c6b core-prim . denominator) (G4c6a core-prim . cos) (G4c69 core-prim . cons) (G4c68 core-prim . complex?) (G4c67 core-prim . char?) (G4c66 core-prim . char>?) (G4c65 core-prim . char>=?) (G4c64 core-prim . char=?) (G4c63 core-prim . char<?) (G4c62 core-prim . char<=?) (G4c61 core-prim . char->integer) (G4c60 core-prim . ceiling) (G4c5f core-prim . call-with-values) (G4c5e core-prim . call/cc) (G4c5d core-prim . call-with-current-continuation) (G4c5c core-prim . cddddr) (G4c5b core-prim . cdddar) (G4c5a core-prim . cddadr) (G4c59 core-prim . cddaar) (G4c58 core-prim . cdaddr) (G4c57 core-prim . cdadar) (G4c56 core-prim . cdaadr) (G4c55 core-prim . cdaaar) (G4c54 core-prim . cadddr) (G4c53 core-prim . caddar) (G4c52 core-prim . cadadr) (G4c51 core-prim . cadaar) (G4c50 core-prim . caaddr) (G4c4f core-prim . caadar) (G4c4e core-prim . caaadr) (G4c4d core-prim . caaaar) (G4c4c core-prim . cdddr) (G4c4b core-prim . cddar) (G4c4a core-prim . cdadr) (G4c49 core-prim . cdaar) (G4c48 core-prim . caddr) (G4c47 core-prim . cadar) (G4c46 core-prim . caadr) (G4c45 core-prim . caaar) (G4c44 core-prim . cddr) (G4c43 core-prim . cdar) (G4c42 core-prim . cadr) (G4c41 core-prim . caar) (G4c40 core-prim . cdr) (G4c3f core-prim . car) (G4c3e core-prim . boolean?) (G4c3d core-prim . boolean=?) (G4c3c core-prim . atan) (G4c3b core-prim . assertion-violation) (G4c3a core-prim . asin) (G4c39 core-prim . apply) (G4c38 core-prim . append) (G4c37 core-prim . angle) (G4c36 core-prim . acos) (G4c35 core-prim . abs) (G4c34 core-prim . /) (G4c33 core-prim . *) (G4c32 core-prim . -) (G4c31 core-prim . +) (G4c30 core-prim . >=) (G4c2f core-prim . >) (G4c2e core-prim . =) (G4c2d core-prim . <=) (G4c2c core-prim . <) (G4c2b core-prim . library) (G4c2a $core-rtd &no-nans-rtd &no-nans-rcd) (G4c29 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4c28 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4c27 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4c26 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4c25 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4c24 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4c23 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4c22 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4c21 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4c20 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4c1f $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4c1e $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4c1d $core-rtd &i/o-rtd &i/o-rcd) (G4c1c $core-rtd &undefined-rtd &undefined-rcd) (G4c1b $core-rtd &syntax-rtd &syntax-rcd) (G4c1a $core-rtd &lexical-rtd &lexical-rcd) (G4c19 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4c18 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4c17 $core-rtd &who-rtd &who-rcd) (G4c16 $core-rtd &irritants-rtd &irritants-rcd) (G4c15 $core-rtd &assertion-rtd &assertion-rcd) (G4c14 $core-rtd &violation-rtd &violation-rcd) (G4c13 $core-rtd &error-rtd &error-rcd) (G4c12 $core-rtd &serious-rtd &serious-rcd) (G4c11 $core-rtd &warning-rtd &warning-rcd) (G4c10 $core-rtd &message-rtd &message-rcd) (G4c0f $core-rtd &condition-rtd &condition-rcd) (G4c0e macro . define-condition-type) (G4c0d macro . define-enumeration) (G4c0c macro . define-record-type) (G4c0b macro . parent-rtd) (G4c0a macro . nongenerative) (G4c09 macro . opaque) (G4c08 macro . sealed) (G4c07 macro . protocol) (G4c06 macro . parent) (G4c05 macro . immutable) (G4c04 macro . mutable) (G4c03 macro . fields) (G4c02 macro . error-handling-mode) (G4c01 macro . file-options) (G4c00 macro . buffer-mode) (G4bff macro . eol-style) (G4bfe macro . guard) (G4bfd macro . trace-define) (G4bfc macro . trace-lambda) (G4bfb macro . unsyntax-splicing) (G4bfa macro . unsyntax) (G4bf9 macro . unquote-splicing) (G4bf8 macro . unquote) (G4bf7 macro . _) (G4bf6 macro . else) (G4bf5 macro . =>) (G4bf4 macro . ...) (G4bf3 macro . assert) (G4bf2 macro . endianness) (G4bf1 macro . delay) (G4bf0 macro . time) (G4bef macro . do) (G4bee macro . cond) (G4bed macro . let*) (G4bec macro . let) (G4beb macro . let*-values) (G4bea macro . let-values) (G4be9 macro . identifier-syntax) (G4be8 macro . with-syntax) (G4be7 macro . quasisyntax) (G4be6 macro . quasiquote) (G4be5 macro . syntax-rules) (G4be4 macro . include) (G4be3 macro . define-struct) (G4be2 core-macro . record-constructor-descriptor) (G4be1 core-macro . record-type-descriptor) (G4be0 macro . case) (G4bdf macro . parameterize) (G4bde macro . unless) (G4bdd macro . when) (G4bdc core-macro . or) (G4bdb core-macro . and) (G4bda core-macro . if) (G4bd9 core-macro . letrec*) (G4bd8 core-macro . letrec) (G4bd7 core-macro . type-descriptor) (G4bd6 core-macro . case-lambda) (G4bd5 core-macro . lambda) (G4bd4 core-macro . syntax) (G4bd3 core-macro . syntax-case) (G4bd2 core-macro . quote) (G4bd1 core-macro . foreign-call) (G4bd0 letrec-syntax) (G4bcf let-syntax) (G4bce set!) (G4bcd import) (G4bcc begin) (G4bcb module) (G4bca define-syntax) (G4bc9 define)) values values '#f '#f '#f '#f) (G2966@G280b@install-library 'G4eab '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G4e8a) (eval-core . G4e89) (set-symbol-value! . G4e88) (symbol-value . G4e87) (gensym . G4e86) (void . G4e85)) '() values values '#f '#f '#f '#f) (G2966@G280b@install-library 'G4eac '(mosh) '() '() '() '() '((set-symbol-value! . G4e88) (symbol-value . G4e87) (read-line . G4e82) (ungensym . G4e81) (alist->eq-hash-table . G4e80) (assoc-ref . G4e7f) (print . G4e7e) (format . G4e7d) (host-os . G4e7c) (library-path . G27ea) (standard-library-path . G4e7b) (file-newer? . G4e7a) (stat-mtime . G4e79) (write-to-file . G4e78) (file->list . G4e77) (file->string . G4e76) (digit->integer . G4e75) (call-with-string-input-port . G4e74) (call-with-string-io . G4e73) (string-split . G4e72) (bytevector-for-each . G4e71) (string->regexp . G4e70) (rxmatch . G4e6f) (regexp-replace-all . G4e6e) (hashtable-for-each . G4e6d) (readdir . G4e69) (set-current-directory! . G4e68) (expand-path . G4e67) (current-directory . G4e66) (p . G4e57) (get-timeofday . G4e52) (get-command-line . G4e51) (sys-display . G4e50) (source-info . G4e4f) (make-compiler-instruction . G4e4e) (make-instruction . G4e4d) (set-source-info! . G4e4c) (bignum? . G4e4b) (fast-equal? . G4e4a) (fasl-read . G4e49) (fasl-write . G4e48) (time-usage . G4e47) (time . G4bf0) (include . G4be4)) '() values values '#f '#f '#f '#f) (G2966@G280b@install-library 'G4ead '(system) '() '() '() '() '((call-process . G4e6c) (local-tz-offset . G4e6b) (microseconds . G4e6a) (expand-path . G4e67) (%spawn . G4e65) (%waitpid . G4e64) (%ffi-supported? . G4e63) (%ffi-pointer-ref . G4e62) (%ffi-pointer->string . G4e61) (%ffi-call->string-or-zero . G4e60) (%ffi-call->double . G4e5f) (%ffi-call->void* . G4e5e) (%ffi-call->void . G4e5d) (%ffi-call->int . G4e5c) (%ffi-lookup . G4e5b) (%ffi-open . G4e5a) (%fork . G4e59) (%pipe . G4e58) (open-output-string . G4e56) (get-output-string . G4e55) (get-environment-variables . G4e54) (get-environment-variable . G4e53) (make-parameter . G2621) (parameterize . G4bdf)) '() values values '#f '#f '#f '#f))
((lambda (G4abb@add-library-path! G4abd@parse-and-add-library-path G4abf@for-each-with-index G4ac1@conditioon-printer G4ac3@condition-printer G4ac5@record->field-alist G4ac7@map-with-index G4ac9@repl G4acb@trace-printer G4acd@command-line G4acf@local-library-path G4ad1@load/args G4ad3@load G4ad5@ironscheme-build G4ad7@eval-top-level G4ad9@compile-system-libraries G4adb@compile G4add@compile->closure G4adf@pre-compile-r6rs-file G4ae1@load-r6rs-top-level) (begin (set! G4abb@add-library-path! (lambda (G4afc@path) (G2956@G27eb@library-path (append (G2956@G27eb@library-path) (list G4afc@path))))) (set! G4abd@parse-and-add-library-path (lambda (G4afe@paths G4aff@message) ((lambda (G4b02@t) (if G4b02@t ((lambda (G4b04@paths) (for-each (lambda (G4b06@path) (if (file-exists? G4b06@path) (G4abb@add-library-path! (expand-path G4b06@path)) (format (current-error-port) G4aff@message G4b06@path))) (reverse (string-split G4b04@paths '#\:)))) G4b02@t) (void))) G4afe@paths))) (set! G4abf@for-each-with-index (lambda (G4b08@proc G4b09@lst) (letrec ((G4b0c@loop (lambda (G4b0e@i G4b0f@lst) (if (null? G4b0f@lst) (if '#f '#f (void)) (begin (G4b08@proc G4b0e@i (car G4b0f@lst)) (G4b0c@loop (+ G4b0e@i '1) (cdr G4b0f@lst))))))) (G4b0c@loop '1 G4b09@lst)))) (set! G4ac1@conditioon-printer (lambda (G4b12@e G4b13@port) ((lambda (G4b17@ref) (begin (set! G4b17@ref (lambda (G4b26@rtd G4b27@i G4b28@x) ((lambda (G4b2c@val) (if (symbol? G4b2c@val) (ungensym G4b2c@val) G4b2c@val)) ((record-accessor G4b26@rtd G4b27@i) G4b28@x)))) (begin (display '" Condition components:\n" G4b13@port) (G4abf@for-each-with-index (lambda (G4b18@i G4b19@x) ((lambda (G4b1c@rtd) (begin (format G4b13@port '"   ~d. ~a" G4b18@i (record-type-name G4b1c@rtd)) ((lambda (G4b1e@v) ((lambda (G4b20@t) (if (memv G4b20@t '(0)) (newline G4b13@port) (if (memv G4b20@t '(1)) (begin (display '": " G4b13@port) (write (G4b17@ref G4b1c@rtd '0 G4b19@x) G4b13@port) (newline G4b13@port)) (begin (display '":\n" G4b13@port) ((letrec ((G4b22@f (lambda (G4b24@i) (if (not (= G4b24@i (vector-length G4b1e@v))) (begin (display '"       " G4b13@port) (display (vector-ref G4b1e@v G4b24@i) G4b13@port) (display '": " G4b13@port) (write (G4b17@ref G4b1c@rtd G4b24@i G4b19@x) G4b13@port) (newline G4b13@port) (G4b22@f (+ G4b24@i '1))) (void))))) G4b22@f) '0))))) (vector-length G4b1e@v))) (record-type-field-names G4b1c@rtd)))) (record-rtd G4b19@x))) (simple-conditions G4b12@e))))) '#f))) (set! G4ac3@condition-printer (lambda (G4b2e@e G4b2f@port) (begin (display '" Condition components:\n" G4b2f@port) (G4abf@for-each-with-index (lambda (G4b32@i G4b33@x) ((lambda (G4b36@rtd) (begin (format G4b2f@port '"   ~d. ~a" G4b32@i (record-type-name G4b36@rtd)) (for-each (lambda (G4b38@field) (begin (display '"       " G4b2f@port) (display (car G4b38@field) G4b2f@port) (display '": " G4b2f@port) (write (cdr G4b38@field) G4b2f@port) (newline G4b2f@port))) (G4ac5@record->field-alist G4b33@x)))) (record-rtd G4b33@x))) (simple-conditions G4b2e@e))))) (set! G4ac5@record->field-alist (lambda (G4b3a@r) ((lambda (G4b3d@ref) (begin (set! G4b3d@ref (lambda (G4b48@rtd G4b49@i G4b4a@x) ((lambda (G4b4e@val) (if (symbol? G4b4e@val) (ungensym G4b4e@val) G4b4e@val)) ((record-accessor G4b48@rtd G4b49@i) G4b4a@x)))) ((letrec ((G4b3e@loop (lambda (G4b40@ret G4b41@rtd) (if G4b41@rtd (G4b3e@loop (append G4b40@ret (G4ac7@map-with-index (lambda (G4b44@i G4b45@field) (cons G4b45@field (G4b3d@ref G4b41@rtd G4b44@i G4b3a@r))) (vector->list (record-type-field-names G4b41@rtd)))) (record-type-parent G4b41@rtd)) G4b40@ret)))) G4b3e@loop) '() (record-rtd G4b3a@r)))) '#f))) (set! G4ac7@map-with-index (lambda (G4b50@proc G4b51@lst) ((letrec ((G4b54@loop (lambda (G4b56@i G4b57@lst G4b58@ret) (if (null? G4b57@lst) (reverse G4b58@ret) (G4b54@loop (+ G4b56@i '1) (cdr G4b57@lst) (cons (G4b50@proc G4b56@i (car G4b57@lst)) G4b58@ret)))))) G4b54@loop) '0 G4b51@lst '()))) (set! G4ac9@repl (lambda G4b5c@x ((lambda (G4b5f@rec) (begin (set! G4b5f@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4b62@G4b60) (lambda () (with-exception-handler (lambda (G4b64@e) ((call/cc (lambda (G4b66@G4b61) (G4b62@G4b60 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? G4b64@e) (G4ac1@conditioon-printer G4b64@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" G4b64@e))) (G4b66@G4b61 (lambda () (raise-continuable G4b64@e)))))))))) (lambda () ((letrec ((G4b68@loop (lambda (G4b6a@line G4b6b@accum) ((lambda (G4b6f@parentheses-ok? G4b71@eval-string-print) (begin (set! G4b6f@parentheses-ok? (lambda (G4b76@text) ((letrec ((G4b78@loop (lambda (G4b7a@chars G4b7b@p0 G4b7c@p1) (if (null? G4b7a@chars) (= '0 G4b7b@p0 G4b7c@p1) ((lambda (G4b80@t) (if (memv G4b80@t '(#\()) (G4b78@loop (cdr G4b7a@chars) (+ G4b7b@p0 '1) G4b7c@p1) (if (memv G4b80@t '(#\))) (G4b78@loop (cdr G4b7a@chars) (- G4b7b@p0 '1) G4b7c@p1) (if (memv G4b80@t '(#\[)) (G4b78@loop (cdr G4b7a@chars) G4b7b@p0 (+ G4b7c@p1 '1)) (if (memv G4b80@t '(#\])) (G4b78@loop (cdr G4b7a@chars) G4b7b@p0 (- G4b7c@p1 '1)) (G4b78@loop (cdr G4b7a@chars) G4b7b@p0 G4b7c@p1)))))) (car G4b7a@chars)))))) G4b78@loop) (string->list G4b76@text) '0 '0))) (set! G4b71@eval-string-print (lambda (G4b74@text) (if (not (or (string=? '"\n" G4b74@text) (= '0 (string-length G4b74@text)))) (write (G4ad7@eval-top-level (call-with-port (open-string-input-port G4b74@text) read))) (void)))) (if (eof-object? G4b6a@line) (begin (G4b71@eval-string-print G4b6b@accum) (exit)) ((lambda (G4b72@current) (if (G4b6f@parentheses-ok? G4b72@current) (G4b71@eval-string-print G4b72@current) (G4b68@loop (get-line (current-input-port)) G4b72@current))) (string-append G4b6b@accum G4b6a@line))))) '#f '#f)))) G4b68@loop) (get-line (current-input-port)) '""))))))) (newline) (G4b5f@rec)))) (G4b5f@rec))) '#f))) (set! G4acb@trace-printer (G26f4@G2622@make-parameter write)) (set! G4acd@command-line (G26f4@G2622@make-parameter (get-command-line))) (set! G4acf@local-library-path (lambda (G4b82@filename) (cons (expand-path '".") (G2956@G27eb@library-path)))) (set! G4ad1@load/args (lambda (G4b84@filename . G4b86@args) (begin (apply G4ae1@load-r6rs-top-level G4b84@filename 'load G4b86@args) (void)))) (set! G4ad3@load (lambda (G4b88@filename) (begin (apply G4ae1@load-r6rs-top-level G4b88@filename 'load (G4acd@command-line)) (void)))) (set! G4ad5@ironscheme-build (lambda () (G4ad3@load '"ironscheme-buildscript.ss"))) (set! G4ad7@eval-top-level (lambda (G4b8a@x) (G46f3@G2dfc@eval G4b8a@x (G4709@G2e28@interaction-environment)))) (set! G4ad9@compile-system-libraries (lambda () (G4ad7@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4adb@compile (lambda (G4b8c@filename) (G4ae1@load-r6rs-top-level G4b8c@filename 'compile))) (set! G4add@compile->closure (lambda (G4b8e@filename) (G4ae1@load-r6rs-top-level G4b8e@filename 'closure))) (set! G4adf@pre-compile-r6rs-file (lambda (G4b90@filename) (G4ae1@load-r6rs-top-level G4b90@filename 'compile))) (set! G4ae1@load-r6rs-top-level (lambda (G4b92@filename G4b93@how . G4b96@args) ((lambda (G4b9a@G4b98 G4b9b@G4b99) ((lambda (G4b9e@swap) (dynamic-wind G4b9e@swap (lambda () ((lambda (G4ba0@x*) ((lambda (G4ba2@t) (if (memv G4ba2@t '(closure)) (G4708@G2e26@pre-compile-r6rs-top-level G4ba0@x*) (if (memv G4ba2@t '(load)) ((lambda (G4ba6@G4ba4 G4ba7@G4ba5) ((lambda (G4baa@swap) (dynamic-wind G4baa@swap (lambda () ((G4707@G2e24@compile-r6rs-top-level G4ba0@x*))) G4baa@swap)) (lambda () ((lambda (G4bac@t) (begin (G4ba6@G4ba4 G4ba7@G4ba5) (set! G4ba7@G4ba5 G4bac@t))) (G4ba6@G4ba4))))) G4acd@command-line (cons G4b92@filename (car G4b96@args))) (if (memv G4ba2@t '(compile)) (begin (G4707@G2e24@compile-r6rs-top-level G4ba0@x*) (G295a@G27f3@serialize-all G26ef@G2618@serialize-library G2749@G2702@compile-core-expr)) (if '#f '#f (void)))))) G4b93@how)) (with-input-from-file G4b92@filename (lambda () ((letrec ((G4bae@f (lambda () ((lambda (G4bb0@x) (if (eof-object? G4bb0@x) '() (cons G4bb0@x (G4bae@f)))) (G26e7@G2608@read-annotated))))) G4bae@f)))))) G4b9e@swap)) (lambda () ((lambda (G4bb2@t) (begin (G4b9a@G4b98 G4b9b@G4b99) (set! G4b9b@G4b99 G4bb2@t))) (G4b9a@G4b98))))) G2956@G27eb@library-path (G4acf@local-library-path G4b92@filename)))) (begin (set! G4bc7@G4ae1@load-r6rs-top-level G4ae1@load-r6rs-top-level) (set! G4bc6@G4adf@pre-compile-r6rs-file G4adf@pre-compile-r6rs-file) (set! G4bc5@G4add@compile->closure G4add@compile->closure) (set! G4bc4@G4adb@compile G4adb@compile) (set! G4bc3@G4ad9@compile-system-libraries G4ad9@compile-system-libraries) (set! G4bc2@G4ad7@eval-top-level G4ad7@eval-top-level) (set! G4bc1@G4ad5@ironscheme-build G4ad5@ironscheme-build) (set! G4bc0@G4ad3@load G4ad3@load) (set! G4bbf@G4ad1@load/args G4ad1@load/args) (set! G4bbe@G4acf@local-library-path G4acf@local-library-path) (set! G4bbd@G4acd@command-line G4acd@command-line) (set! G4bbc@G4acb@trace-printer G4acb@trace-printer) (set! G4bbb@G4ac9@repl G4ac9@repl) (set! G4bba@G4ac7@map-with-index G4ac7@map-with-index) (set! G4bb9@G4ac5@record->field-alist G4ac5@record->field-alist) (set! G4bb8@G4ac3@condition-printer G4ac3@condition-printer) (set! G4bb7@G4ac1@conditioon-printer G4ac1@conditioon-printer) (set! G4bb6@G4abf@for-each-with-index G4abf@for-each-with-index) (set! G4bb5@G4abd@parse-and-add-library-path G4abd@parse-and-add-library-path) (set! G4bb4@G4abb@add-library-path! G4abb@add-library-path!) (G295b@G27f5@current-precompiled-library-loader G26f0@G261a@load-serialized-library) (set-symbol-value! 'load G4ad3@load) (set-symbol-value! 'pre-compile-r6rs-file G4adf@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4ad7@eval-top-level) (set-symbol-value! 'int-env-syms G46ea@G2dea@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2748@G2700@expanded->core) (set-symbol-value! 'trace-printer G4acb@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4ae2@c) (condition (G4a18@G4828@make-non-continuable-violation) (G4a0e@G480f@make-who-condition 'raise) (G49d2@G4772@make-message-condition '"returned from non-continuable exception") (G4a04@G47f5@make-irritants-condition (list G4ae2@c))))) (G4abd@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4abd@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G2956@G27eb@library-path (append (G2956@G27eb@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4ae4@prefix) (G2957@G27ed@library-extensions (G4ae4@prefix '".mosh" (G2957@G27ed@library-extensions)))) (lambda (G4ae6@ext G4ae7@ls) (append (map (lambda (G4aea@x) (string-append G4ae6@ext G4aea@x)) G4ae7@ls) G4ae7@ls))) ((lambda (G4aec@args G4aed@port) ((lambda (G4af1@ref) (begin (set! G4af1@ref (lambda (G4af4@rtd G4af5@i G4af6@x) ((lambda (G4afa@val) (if (symbol? G4afa@val) (ungensym G4afa@val) G4afa@val)) ((record-accessor G4af4@rtd G4af5@i) G4af6@x)))) (with-exception-handler (lambda (G4af2@c) (if (condition? G4af2@c) (G4ac1@conditioon-printer G4af2@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" G4af2@c))) (lambda () (if (null? G4aec@args) (G4ac9@repl) (G4ae1@load-r6rs-top-level (car G4aec@args) 'load (cdr G4aec@args))))))) '#f)) (G4acd@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
