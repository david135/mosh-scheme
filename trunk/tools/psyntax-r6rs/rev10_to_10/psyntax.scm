;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G10231 G10233 G10235 G10237 G10239 G10241 G10243 G10245 G10247 G10249 G10251 G10405) (begin (set! G10231 read) (set! G10233 (lambda (G10406) (G10239 G10406))) (set! G10235 (lambda (G10408) (source-info G10408))) (set! G10237 (lambda (G10410) (source-info G10410))) (set! G10239 (lambda (G10412) (if (pair? G10412) (cons (car G10412) (cdr G10412)) (display '"line:46\n")))) (set! G10241 (lambda G10414 (begin (display G10414) '#f))) (set! G10243 (lambda G10416 '#f)) (set! G10245 (lambda (G10418 G10419) (lambda G10422 (begin (display '"record printer") (for-each display G10422))))) (set! G10247 (lambda G10424 (apply error 'comile-core '"not implementated" G10424))) (set! G10249 (lambda (G10426) (with-input-from-file G10426 G10231))) (set! G10251 (lambda G10442 ((lambda (G10443) (if (= G10443 '1) (apply (lambda (G10428) (G10251 G10428 (lambda (G10430) G10430))) G10442) (if (= G10443 '2) (apply (lambda (G10432 G10433) (begin (if (procedure? G10433) (void) (assertion-violation 'assert '"assertion failed" '(procedure? fender))) ((lambda (G10436) (lambda G10440 ((lambda (G10441) (if (= G10441 '0) (apply (lambda () G10436) G10440) (if (= G10441 '1) (apply (lambda (G10438) (set! G10436 (G10433 G10438))) G10440) (error 'apply '"invalid arg count")))) (length G10440)))) (G10433 G10432)))) G10442) (error 'apply '"invalid arg count")))) (length G10442)))) (set! G10405 (lambda (G10444) G10444)) (begin (set! G10457 G10405) (set! G10456 G10251) (set! G10455 G10249) (set! G10454 G10247) (set! G10453 G10245) (set! G10452 G10243) (set! G10451 G10241) (set! G10450 G10239) (set! G10449 G10237) (set! G10448 G10235) (set! G10447 G10233) (set! G10446 G10231)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G10462 G10464 G10466 G10468 G10470 G10472 G10474) (begin (set! G10462 (G10456 (lambda (G10475) '#f) (lambda (G10477) (begin (if (procedure? G10477) (void) (assertion-violation 'assert '"assertion failed" '(procedure? p))) G10477)))) (set! G10464 (lambda (G10479) ((lambda (G10482) (begin (set! G10482 (lambda (G10483) ((lambda (G10485) (if G10485 G10485 ((lambda (G10487) (if G10487 G10487 ((lambda (G10489) (if G10489 G10489 ((lambda (G10491) (if G10491 G10491 ((lambda (G10493) (if G10493 G10493 ((lambda (G10495) (if G10495 G10495 (begin '#f (number? G10483)))) (bytevector? G10483)))) (string? G10483)))) (boolean? G10483)))) (symbol? G10483)))) (char? G10483)))) (null? G10483)))) (not (G10482 G10479)))) '#f))) (set! G10466 (lambda (G10497) ((lambda (G10500) (begin (set! G10500 (lambda (G10501) (if (pair? G10501) ((lambda (G10503) (if (eqv? G10503 'quote) (if (if G10497 (begin '#f (G10464 (cadr G10501))) '#f) ((lambda (G10542) (begin (set-symbol-value! G10542 (cadr G10501)) G10542)) (gensym)) G10501) (if (eqv? G10503 'case-lambda) (cons 'case-lambda (map (lambda (G10540) (cons (car G10540) (map G10500 (cdr G10540)))) (cdr G10501))) (if (eqv? G10503 'lambda) (cons* 'lambda (cadr G10501) (map G10500 (cddr G10501))) (if (eqv? G10503 'letrec) ((lambda (G10532 G10533) ((lambda (G10536 G10537) (cons* 'letrec (map list G10536 (map G10500 G10537)) (map G10500 G10533))) (map car G10532) (map cadr G10532))) (cadr G10501) (cddr G10501)) (if (eqv? G10503 'letrec*) ((lambda (G10524 G10525) ((lambda (G10528 G10529) (cons* 'letrec* (map list G10528 (map G10500 G10529)) (map G10500 G10525))) (map car G10524) (map cadr G10524))) (cadr G10501) (cddr G10501)) (if (eqv? G10503 'library-letrec*) ((lambda (G10510 G10511) ((lambda (G10514 G10515) ((lambda (G10518 G10519 G10520) (cons* 'library-letrec* G10510 (map list G10518 G10519 (map G10500 G10520)) (map G10500 G10515))) (map car G10514) (map cadr G10514) (map caddr G10514))) (cadr G10511) (cddr G10511))) (cadr G10501) (cdr G10501)) (if (eqv? G10503 'begin) (cons 'begin (map G10500 (cdr G10501))) (if (eqv? G10503 'set!) (list 'set! (cadr G10501) (G10500 (caddr G10501))) (if (eqv? G10503 'primitive) ((lambda (G10504) ((lambda (G10506) (if G10506 ((lambda (G10508) G10508) G10506) G10504)) ((G10462) G10504))) (cadr G10501)) (if (eqv? G10503 'define) G10501 (if (list? G10501) (map G10500 G10501) (error 'rewrite '"invalid form ~s ~s" G10501 (list? G10501)))))))))))))) (car G10501)) G10501))) G10500)) '#f))) (set! G10468 (lambda (G10544) ((G10466 '#t) G10544))) (set! G10470 (lambda (G10546) ((G10466 '#f) G10546))) (set! G10472 write) (set! G10474 (lambda (G10548 G10549) (G10472 ((G10466 '#f) G10548) G10549))) (begin (set! G10558 G10474) (set! G10557 G10472) (set! G10556 G10470) (set! G10555 G10468) (set! G10554 G10466) (set! G10553 G10464) (set! G10552 G10462)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G10648 G10650 G10656 G10658 G10660 G10665 G10667 G10669 G10671 G10673 G10675 G10677 G10679 G10681 G10683 G10685 G10687 G10689 G10691 G10693 G10695 G10697 G10699 G10701 G10703 G10705 G10707 G10709 G10711 G10713 G10715 G10717 G10719 G10721 G10723 G10725 G10727 G10729 G10731 G10733 G10735 G10737 G10739 G10741 G10743 G10745 G10747 G10749 G10751 G10753 G10755 G10757 G10759 G10761 G10763 G10765 G10767 G10769 G10771 G10773 G10775) (begin (set! G10648 (lambda () ((lambda (G10776) ((lambda (G10779) (begin (set! G10779 (lambda (G10784 G10785) (if (memq G10784 G10785) G10785 (cons G10784 G10785)))) (lambda G10782 ((lambda (G10783) (if (= G10783 '0) (apply (lambda () G10776) G10782) (if (= G10783 '1) (apply (lambda (G10780) (set! G10776 (G10779 G10780 G10776))) G10782) (error 'apply '"invalid arg count")))) (length G10782))))) '#f)) '()))) (set! G10650 (G10456 (G10648) (lambda (G10788) (begin (if (procedure? G10788) (void) (assertion-violation 'current-library-collection '"not a procedure" G10788)) G10788)))) (set! G10656 (make-record-type-descriptor 'library '#f 'G10654 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G10658 '#f) (set! G10660 (make-record-constructor-descriptor G10656 '#f G10658)) (set! G10665 (record-predicate G10656)) (set! G10667 (record-constructor G10660)) (set! G10669 (record-accessor G10656 '0)) (set! G10671 (record-accessor G10656 '1)) (set! G10673 (record-accessor G10656 '2)) (set! G10675 (record-accessor G10656 '3)) (set! G10677 (record-accessor G10656 '4)) (set! G10679 (record-accessor G10656 '5)) (set! G10681 (record-accessor G10656 '6)) (set! G10683 (record-accessor G10656 '7)) (set! G10685 (record-accessor G10656 '8)) (set! G10687 (record-accessor G10656 '9)) (set! G10689 (record-accessor G10656 '10)) (set! G10691 (record-accessor G10656 '11)) (set! G10693 (record-accessor G10656 '12)) (set! G10695 (record-accessor G10656 '13)) (set! G10697 (record-mutator G10656 '0)) (set! G10699 (record-mutator G10656 '1)) (set! G10701 (record-mutator G10656 '2)) (set! G10703 (record-mutator G10656 '3)) (set! G10705 (record-mutator G10656 '4)) (set! G10707 (record-mutator G10656 '5)) (set! G10709 (record-mutator G10656 '6)) (set! G10711 (record-mutator G10656 '7)) (set! G10713 (record-mutator G10656 '8)) (set! G10715 (record-mutator G10656 '9)) (set! G10717 (record-mutator G10656 '10)) (set! G10719 (record-mutator G10656 '11)) (set! G10721 (record-mutator G10656 '12)) (set! G10723 (record-mutator G10656 '13)) (set! G10725 (G10453 'library (lambda (G10790 G10791) (begin (if (G10665 G10790) (void) (assertion-violation 'record-type-printer '"not a library")) (display (format '"#<library ~s>" (if (null? (G10673 G10790)) (G10671 G10790) (append (G10671 G10790) (list (G10673 G10790))))) G10791))))) (set! G10727 (lambda (G10794) (if (null? G10794) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G10729 (lambda (G10796) ((letrec ((G10798 (lambda (G10800) (if (null? G10800) '#f (if (G10796 (car G10800)) (car G10800) (G10798 (cdr G10800))))))) G10798) ((G10650))))) (set! G10731 (G10456 '(".") (lambda (G10802) (if (if (list? G10802) (begin '#f (for-all string? G10802)) '#f) (map (lambda (G10804) G10804) G10802) (assertion-violation 'library-path '"not a list of strings" G10802))))) (set! G10733 (G10456 '(".sls" ".ss" ".scm") (lambda (G10806) (if (if (list? G10806) (begin '#f (for-all string? G10806)) '#f) (map (lambda (G10808) G10808) G10806) (assertion-violation 'library-extensions '"not a list of strings" G10806))))) (set! G10735 (lambda (G10810) (call-with-values (lambda () (open-string-output-port)) (lambda (G10814 G10815) ((lambda (G10818 G10819) ((lambda (G10823) (begin (set! G10823 (lambda (G10838) (if (<= '0 G10838 '9) (display G10838 G10819) (display (integer->char (+ (char->integer '#\A) (- G10838 '10))) G10819)))) (begin ((letrec ((G10824 (lambda (G10826) (if (null? G10826) (void) (begin (display '"/" G10819) (for-each (lambda (G10828) (if ((lambda (G10830) (if G10830 G10830 ((lambda (G10832) (if G10832 G10832 ((lambda (G10834) (if G10834 G10834 (begin '#f (memv G10828 '(#\- #\. #\_ #\~))))) (char<=? '#\nul G10828 '#\9)))) (char<=? '#\A G10828 '#\Z)))) (char<=? '#\a G10828 '#\z)) (display G10828 G10819) (begin (display '"%" G10819) ((lambda (G10836) (begin (G10823 (quotient G10836 '16)) (G10823 (remainder G10836 '16)))) (char->integer G10828))))) (string->list (symbol->string (car G10826)))) (G10824 (cdr G10826))))))) G10824) G10810) (G10818)))) '#f)) G10815 G10814))))) (set! G10737 (G10456 (lambda (G10840) ((lambda (G10842) ((letrec ((G10844 (lambda (G10846 G10847 G10848) (if (null? G10846) ((lambda () ((lambda (G10860 G10862 G10864 G10869 G10871 G10873 G10875 G10877 G10879 G10881) (begin (set! G10860 (make-record-type-descriptor '&library-resolution &condition-rtd 'G10858 '#f '#f '#((immutable library) (immutable files)))) (set! G10862 '#f) (set! G10864 (make-record-constructor-descriptor G10860 &condition-rcd G10862)) (set! G10869 (record-predicate G10860)) (set! G10871 (record-constructor G10864)) (set! G10873 (record-accessor G10860 '0)) (set! G10875 (record-accessor G10860 '1)) (set! G10877 (condition-predicate G10860)) (set! G10879 (condition-accessor G10860 G10873)) (set! G10881 (condition-accessor G10860 G10875)) (raise (condition (G19185) (G19211 'expander) (G19165 '"cannot locate library in library-path") (G10871 G10840 (reverse G10848)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G10847) (G10844 (cdr G10846) (G10733) G10848) ((lambda (G10882) (if (file-exists? G10882) G10882 (G10844 G10846 (cdr G10847) (cons G10882 G10848)))) (string-append (car G10846) G10842 (car G10847)))))))) G10844) (G10731) (G10733) '())) (G10735 G10840))) (lambda (G10884) (if (procedure? G10884) G10884 (assertion-violation 'file-locator '"not a procedure" G10884))))) (set! G10739 (lambda (G10886 G10887) ((lambda (G10891) (begin (set! G10891 (lambda (G10894) (list (G10669 G10894) (G10671 G10894)))) (for-each (lambda (G10892) (if (G10695 G10892) (G10886 (G10695 G10892) (list (G10669 G10892) (G10671 G10892) (G10673 G10892) (map G10891 (G10675 G10892)) (map G10891 (G10677 G10892)) (map G10891 (G10679 G10892)) (G10681 G10892) (G10683 G10892) (G10887 (G10689 G10892)) (G10887 (G10691 G10892)) (G10693 G10892))) (void))) ((G10650))))) '#f))) (set! G10741 (G10456 (lambda (G10896 G10897) '#f))) (set! G10743 (lambda (G10900) ((G10741) G10900 (lambda G10938 ((lambda (G10939) (if (= G10939 '11) (apply (lambda (G10902 G10903 G10904 G10905 G10906 G10907 G10908 G10909 G10910 G10911 G10912) ((letrec ((G10924 (lambda (G10926) (if (null? G10926) (begin (G10763 G10902 G10903 G10904 G10905 G10906 G10907 G10908 G10909 G10910 G10911 '#f '#f G10912 '#f) '#t) ((lambda (G10928) ((lambda (G10930 G10931) ((lambda (G10934) (if (if (G10665 G10934) (begin '#f (eq? G10930 (G10669 G10934))) '#f) (G10924 (cdr G10926)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source.\n" G10903 G10931 G10900) '#f))) (G10753 G10931))) (car G10928) (cadr G10928))) (car G10926)))))) G10924) (append G10905 G10906 G10907))) G10938) (if (>= G10939 '0) (apply (lambda G10936 '#f) G10938) (error 'apply '"invalid arg count")))) (length G10938)))))) (set! G10745 (G10456 (lambda (G10940) ((lambda (G10942) (if (not G10942) (assertion-violation '#f '"cannot file library" G10940) ((lambda (G10944) (if G10944 G10944 (begin '#f ((G10747) (G10455 G10942) G10942 (lambda (G10946) (if (equal? G10946 G10940) (void) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G10950 G10951) ((lambda (G10954 G10955) (begin (display '"expected to find library " G10955) (write G10940 G10955) (display '" in file " G10955) (display G10942 G10955) (display '", found " G10955) (write G10946 G10955) (display '" instead" G10955) (G10954))) G10951 G10950)))))))))) (G10743 G10942)))) ((G10737) G10940))) (lambda (G10958) (if (procedure? G10958) G10958 (assertion-violation 'library-locator '"not a procedure" G10958))))) (set! G10747 (G10456 (lambda (G10960) (assertion-violation 'library-expander '"not initialized")) (lambda (G10962) (if (procedure? G10962) G10962 (assertion-violation 'library-expander '"not a procedure" G10962))))) (set! G10749 (G10456 '())) (set! G10751 (lambda (G10964) (begin (if (member G10964 (G10749)) (assertion-violation '#f '"circular attempt to import library was detected" G10964) (void)) ((lambda (G10968 G10969) ((lambda (G10972) (dynamic-wind G10972 (lambda () (begin ((G10745) G10964) ((lambda (G10974) (if G10974 G10974 (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G10964)))) (G10729 (lambda (G10976) (equal? (G10671 G10976) G10964)))))) G10972)) (lambda () ((lambda (G10978) (begin (G10968 G10969) (set! G10969 G10978))) (G10968))))) G10749 (cons G10964 (G10749)))))) (set! G10753 (lambda (G10980) ((lambda (G10982) (if G10982 G10982 (begin '#f (G10751 G10980)))) (G10729 (lambda (G10984) (equal? (G10671 G10984) G10980)))))) (set! G10755 (lambda (G10986) (if (G10729 (lambda (G10988) (equal? (G10671 G10988) G10986))) (begin '#f '#t) '#f))) (set! G10757 (lambda (G10990) ((lambda (G10992) ((lambda (G10994) (if G10994 G10994 (begin '#f (assertion-violation '#f '"cannot find library with required spec" G10990)))) (G10729 (lambda (G10996) (eq? G10992 (G10669 G10996)))))) (car G10990)))) (set! G10759 (make-eq-hashtable)) (set! G10761 (lambda (G10998) (begin ((lambda (G11000) (for-each (lambda (G11002) ((lambda (G11004 G11005) ((lambda (G11008) (hashtable-set! G10759 G11004 G11008)) ((lambda (G11010) (if (eqv? G11010 'global) (cons 'global (cons G10998 (cdr G11005))) (if (eqv? G11010 'global-macro) (cons 'global-macro (cons G10998 (cdr G11005))) (if (eqv? G11010 'global-macro!) (cons 'global-macro! (cons G10998 (cdr G11005))) G11005)))) (car G11005)))) (car G11002) (cdr G11002))) G11000)) (G10683 G10998)) ((G10650) G10998)))) (set! G10763 (lambda (G11011 G11012 G11013 G11014 G11015 G11016 G11017 G11018 G11019 G11020 G11021 G11022 G11023 G11024) ((lambda (G11039 G11040 G11041) (begin (if (if (symbol? G11011) (if (list? G11012) (begin '#f (list? G11013)) '#f) '#f) (void) (assertion-violation 'install-library '"invalid spec with id/name/ver" G11011 G11012 G11013)) (if (G10755 G11012) (assertion-violation 'install-library '"library is already installed" G11012) (void)) ((lambda (G11045) (G10761 G11045)) (G10667 G11011 G11012 G11013 G11039 G11040 G11041 G11017 G11018 G11019 G11020 G11021 G11022 G11023 G11024)))) (map G10757 G11014) (map G10757 G11015) (map G10757 G11016)))) (set! G10765 (lambda (G11047) (hashtable-ref G10759 G11047 '#f))) (set! G10767 (lambda (G11049) ((lambda (G11051) (if (procedure? G11051) (begin (G10715 G11049 (lambda () (assertion-violation 'invoke '"circularity detected" G11049))) (for-each G10767 (G10679 G11049)) (G10715 G11049 (lambda () (assertion-violation 'invoke '"first invoke did not return" G11049))) (G11051) (G10715 G11049 '#t)) (void))) (G10687 G11049)))) (set! G10769 (lambda (G11053) ((lambda (G11055) (if (procedure? G11055) (begin (G10713 G11053 (lambda () (assertion-violation 'visit '"circularity detected" G11053))) (for-each G10767 (G10677 G11053)) (G10713 G11053 (lambda () (assertion-violation 'invoke '"first visit did not return" G11053))) (G11055) (G10713 G11053 '#t)) (void))) (G10685 G11053)))) (set! G10771 (lambda (G11057) (G10767 (G10757 G11057)))) (set! G10773 (lambda G11067 ((lambda (G11068) (if (= G11068 '1) (apply (lambda (G11059) ((letrec ((G11061 (lambda (G11063) (if (null? G11063) '() (if ((lambda (G11065) (if G11065 G11065 (begin '#f (G10693 (car G11063))))) G11059) (cons (car G11063) (G11061 (cdr G11063))) (G11061 (cdr G11063))))))) G11061) ((G10650)))) G11067) (if (= G11068 '0) (apply (lambda () (G10773 '#f)) G11067) (error 'apply '"invalid arg count")))) (length G11067)))) (set! G10775 (lambda (G11069) (begin (if (G10665 G11069) (void) (assertion-violation 'library-spec '"not a library" G11069)) (list (G10669 G11069) (G10671 G11069) (G10673 G11069))))) (begin (set! G11131 G10775) (set! G11130 G10773) (set! G11129 G10771) (set! G11128 G10769) (set! G11127 G10767) (set! G11126 G10765) (set! G11125 G10763) (set! G11124 G10761) (set! G11123 G10759) (set! G11122 G10757) (set! G11121 G10755) (set! G11120 G10753) (set! G11119 G10751) (set! G11118 G10749) (set! G11117 G10747) (set! G11116 G10745) (set! G11115 G10743) (set! G11114 G10741) (set! G11113 G10739) (set! G11112 G10737) (set! G11111 G10735) (set! G11110 G10733) (set! G11109 G10731) (set! G11108 G10729) (set! G11107 G10727) (set! G11106 G10725) (set! G11105 G10723) (set! G11104 G10721) (set! G11103 G10719) (set! G11102 G10717) (set! G11101 G10715) (set! G11100 G10713) (set! G11099 G10711) (set! G11098 G10709) (set! G11097 G10707) (set! G11096 G10705) (set! G11095 G10703) (set! G11094 G10701) (set! G11093 G10699) (set! G11092 G10697) (set! G11091 G10695) (set! G11090 G10693) (set! G11089 G10691) (set! G11088 G10689) (set! G11087 G10687) (set! G11086 G10685) (set! G11085 G10683) (set! G11084 G10681) (set! G11083 G10679) (set! G11082 G10677) (set! G11081 G10675) (set! G11080 G10673) (set! G11079 G10671) (set! G11078 G10669) (set! G11077 G10667) (set! G11076 G10665) (set! G11075 G10660) (set! G11074 G10658) (set! G11073 G10656) (set! G11072 G10650) (set! G11071 G10648)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G11134 G11266 G11268 G11270 G11342 G11344 G11346 G11348 G11350 G11352) (begin (set! G11134 (lambda (G11353) (G11344))) (set! G11266 (lambda (G11355 G11356 G11357) (list 'lambda G11356 G11357))) (set! G11268 (lambda (G11361 G11362 G11363) ((lambda (G11368 G11370 G11372 G11374) (begin (set! G11368 (lambda (G11421) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G11370 (lambda (G11399 G11400 G11401) (call-with-values (lambda () ((letrec ((G11407 (lambda (G11409 G11410) (if (pair? G11409) (G11407 (cdr G11409) (+ G11410 '1)) (if (null? G11409) (values G11410 '=) (values G11410 '>=)))))) G11407) G11401 '0)) (lambda (G11413 G11414) ((lambda (G11417 G11418) (list (list 'primitive G11417) G11400 (list 'quote G11418))) G11414 G11413))))) (set! G11372 (lambda (G11391 G11392 G11393 G11394) (list '(primitive apply) (G11266 G11391 G11393 G11394) G11392))) (set! G11374 (lambda (G11375 G11376 G11377) ((lambda (G11381 G11382) (list 'lambda G11381 (G11270 G11375 (list G11382) (list (list '(primitive length) G11381)) ((letrec ((G11385 (lambda (G11387 G11388) (if (null? G11387) (G11368 G11375) (list 'if (G11370 G11375 G11382 (car G11387)) (G11372 G11375 G11381 (car G11387) (car G11388)) (G11385 (cdr G11387) (cdr G11388))))))) G11385) G11362 G11377)))) (gensym) (gensym)))) (if (= (length G11363) '1) (G11266 G11361 (car G11362) (car G11363)) (G11374 G11361 G11362 G11363)))) '#f '#f '#f '#f))) (set! G11270 (lambda (G11423 G11424 G11425 G11426) (cons (G11266 G11423 G11424 G11426) G11425))) (set! G11342 (lambda (G11431 G11432) ((letrec ((G11435 (lambda (G11437) (if (null? (cdr G11437)) (car G11437) (if (equal? (car G11437) (G11344)) (G11435 (cdr G11437)) (cons 'begin G11437)))))) G11435) G11432))) (set! G11344 (lambda () '((primitive void)))) (set! G11346 (lambda (G11439 G11440 G11441 G11442) (if (null? G11440) G11442 (list 'letrec (map list G11440 G11441) G11442)))) (set! G11348 (lambda (G11447 G11448 G11449 G11450) (if (null? G11448) G11450 (G11270 G11447 G11448 (map (lambda (G11455) (list 'quote '#f)) G11448) (G11342 G11447 (append (map (lambda (G11457 G11458) (list 'set! G11457 G11458)) G11448 G11449) (list G11450))))))) (set! G11350 (lambda (G11461 G11462 G11463 G11464 G11465 G11466) (list 'library-letrec* G11462 (map list G11463 G11464 G11465) G11466))) (set! G11352 (lambda (G11473 G11474 G11475 G11476) (begin (display '"************** in ") (cons 'receive (cons G11474 (cons G11475 G11476)))))) (begin (set! G11490 G11352) (set! G11489 G11350) (set! G11488 G11348) (set! G11487 G11346) (set! G11486 G11344) (set! G11485 G11342) (set! G11484 G11270) (set! G11483 G11268) (set! G11482 G11266) (set! G11481 G11134)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambdabegin (set! G11503 (lambda (G12467 G12468) (if (memq G12467 G12468) G12468 (cons G12467 G12468)))) (set! G11505 (lambda (G12471 G12472) (if (null? G12471) G12472 (if (memq (car G12471) G12472) (G11505 (cdr G12471) G12472) (cons (car G12471) (G11505 (cdr G12471) G12472)))))) (set! G11510 '(top)) (set! G11512 (lambda (G12475) (memq 'top G12475))) (set! G11514 (lambda (G12477) (if (symbol? G12477) (gensym G12477) (if (G11584 G12477) (G11514 (G11642 G12477)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G12477))))) (set! G11516 (lambda (G12479) (G11514 G12479))) (set! G11518 (lambda (G12481) (gensym))) (set! G11520 (lambda (G12483 G12484) ((lambda (G12488) (begin (set! G12488 (lambda (G12499 G12500 G12501 G12502 G12503) (if (pair? G12501) (begin '#f (if (if (eq? G12499 (car G12501)) (begin '#f (G11644 G12500 (car G12502))) '#f) (car G12503) (G12488 G12499 G12500 (cdr G12501) (cdr G12502) (cdr G12503)))) '#f))) ((lambda (G12489 G12490) ((lambda (G12493) ((lambda (G12495) (if G12495 ((lambda (G12497) (if (G11126 G12497) (gensym) G12497)) G12495) (gensym))) (if (memq G12489 (G11543 G12484)) (begin '#f (G12488 G12489 G12490 G12493 (G11545 G12484) (G11547 G12484))) '#f))) (G11543 G12484))) (G11642 G12483) (G11590 G12483)))) '#f))) (set! G11522 (lambda (G12509 G12510) ((lambda (G12513) (if G12513 ((lambda (G12515) ((lambda (G12517 G12518) (values G12517 ((lambda (G12521) (if G12521 (cdr G12521) ((lambda (G12523) (begin (G12406 G12515 (cons (cons G12517 G12523) G12518)) G12523)) (G11514 G12509)))) (assq G12517 G12518)))) (G11520 G12509 G12510) (G12400 G12515))) G12513) (values (gensym) (G11514 G12509)))) (G12466)))) (set! G11524 (lambda (G12525 G12526) (if (G12466) (G11520 G12525 G12526) (gensym)))) (set! G11530 (make-record-type-descriptor 'rib '#f 'G11528 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq)))) (set! G11532 '#f) (set! G11534 (make-record-constructor-descriptor G11530 '#f G11532)) (set! G11539 (record-predicate G11530)) (set! G11541 (record-constructor G11534)) (set! G11543 (record-accessor G11530 '0)) (set! G11545 (record-accessor G11530 '1)) (set! G11547 (record-accessor G11530 '2)) (set! G11549 (record-accessor G11530 '3)) (set! G11551 (record-mutator G11530 '0)) (set! G11553 (record-mutator G11530 '1)) (set! G11555 (record-mutator G11530 '2)) (set! G11557 (record-mutator G11530 '3)) (set! G11559 (lambda () (G11541 '() '() '() '#f))) (set! G11561 (lambda (G12529 G12530 G12531) ((lambda (G12536) (begin (set! G12536 (lambda (G12547 G12548 G12549 G12550 G12551) (if (pair? G12549) (begin '#f (if (if (eq? G12547 (car G12549)) (begin '#f (G11644 G12548 (car G12550))) '#f) G12551 (G12536 G12547 G12548 (cdr G12549) (cdr G12550) (cdr G12551)))) '#f))) (begin (if (G11549 G12529) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G12529) (void)) ((lambda (G12537 G12538) ((lambda (G12541) ((lambda (G12543) (if G12543 ((lambda (G12545) (if (eq? G12531 (car G12545)) (void) (if (G12466) (set-car! G12545 G12531) (G12452 '#f '"cannot redefine" G12530)))) G12543) (begin (G11551 G12529 (cons G12537 G12541)) (G11553 G12529 (cons G12538 (G11545 G12529))) (G11555 G12529 (cons G12531 (G11547 G12529)))))) (if (memq G12537 (G11543 G12529)) (begin '#f (G12536 G12537 G12538 G12541 (G11545 G12529) (G11547 G12529))) '#f))) (G11543 G12529))) (G11642 G12530) (G11590 G12530))))) '#f))) (set! G11563 (lambda (G12557) ((lambda (G12559) ((letrec ((G12561 (lambda (G12563 G12564) (if (null? G12564) G12559 (begin (hashtable-update! G12559 (car G12564) (lambda (G12567) (cons G12563 G12567)) '()) (G12561 (+ G12563 '1) (cdr G12564))))))) G12561) '0 G12557)) (make-eq-hashtable)))) (set! G11565 (lambda (G12569) ((lambda (G12571) (if (null? G12571) (void) (begin (G11551 G12569 (list->vector G12571)) (G11553 G12569 (list->vector (G11545 G12569))) (G11555 G12569 (list->vector (G11547 G12569))) (G11557 G12569 (G11563 G12571))))) (G11543 G12569)))) (set! G11567 (lambda (G12573) (if (G11549 G12573) (begin (G11557 G12573 '#f) (G11551 G12573 (vector->list (G11543 G12573))) (G11553 G12573 (vector->list (G11545 G12573))) (G11555 G12573 (vector->list (G11547 G12573)))) (void)))) (set! G11569 (lambda (G12575 G12576) ((lambda (G12579) (begin (G11565 G12579) G12579)) (G11541 (map G11642 G12575) (map G11590 G12575) G12576 '#f)))) (set! G11575 (make-record-type-descriptor 'stx '#f 'G11573 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G11577 '#f) (set! G11579 (make-record-constructor-descriptor G11575 '#f G11577)) (set! G11584 (record-predicate G11575)) (set! G11586 (record-constructor G11579)) (set! G11588 (record-accessor G11575 '0)) (set! G11590 (record-accessor G11575 '1)) (set! G11592 (record-accessor G11575 '2)) (set! G11594 (record-accessor G11575 '3)) (set! G11596 (record-mutator G11575 '0)) (set! G11598 (record-mutator G11575 '1)) (set! G11600 (record-mutator G11575 '2)) (set! G11602 (record-mutator G11575 '3)) (set! G11604 (G10453 'stx (lambda (G12581 G12582) (begin (display '"#<syntax " G12582) (write (G11662 G12581) G12582) ((lambda (G12585) (if (G10448 G12585) ((lambda (G12587) (if (pair? G12587) (begin (display '" [" G12582) (display (cdr G12587) G12582) (display '" of " G12582) (display (car G12587) G12582) (display '"]" G12582)) (void))) (G10449 G12585)) (void))) (G11588 G12581)) (display '">" G12582))))) (set! G11606 (lambda (G12589 G12590) (G11586 G12590 (G11590 G12589) (G11592 G12589) (G11594 G12589)))) (set! G11608 (lambda () (string '#\m))) (set! G11610 '#f) (set! G11612 not) (set! G11614 (lambda (G12593 G12594 G12595 G12596) ((lambda (G12602) (begin (set! G12602 (lambda (G12609 G12610) ((letrec ((G12613 (lambda (G12615 G12616) (if (null? G12616) (cdr G12610) (cons G12615 (G12613 (car G12616) (cdr G12616))))))) G12613) (car G12609) (cdr G12609)))) ((lambda (G12603 G12604 G12605) (if (if (not (null? G12593)) (if (not (null? G12603)) (begin '#f (G11612 (car G12603))) '#f) '#f) (values (G12602 G12593 G12603) (G12602 G12594 G12604) (G12602 G12595 G12605)) (values (append G12593 G12603) (append G12594 G12604) (append G12595 G12605)))) (G11590 G12596) (G11592 G12596) (G11594 G12596)))) '#f))) (set! G11616 (lambda (G12619 G12620 G12621 G12622) (if (G11584 G12619) (call-with-values (lambda () (G11614 G12620 G12621 G12622 G12619)) (lambda (G12630 G12631 G12632) ((lambda (G12636 G12637 G12638) (G11586 (G11588 G12619) G12638 G12637 G12636)) G12632 G12631 G12630))) (G11586 G12619 G12620 G12621 G12622)))) (set! G11618 (lambda (G12642 G12643 G12644) (G11616 G12643 (list G12642) '(shift) (list G12644)))) (set! G11620 (lambda (G12648 G12649) (G11616 G12649 '() (list G12648) '()))) (set! G11622 (lambda (G12652 G12653) (if (G11584 G12652) (G11622 (G11588 G12652) G12653) (if (G10448 G12652) (G11622 (G10450 G12652) G12653) (G12653 G12652))))) (set! G11624 (lambda (G12656) (if (G11584 G12656) ((lambda (G12658 G12659 G12660 G12661) (map (lambda (G12666) (G11616 G12666 G12659 G12660 G12661)) G12658)) (G11624 (G11588 G12656)) (G11590 G12656) (G11592 G12656) (G11594 G12656)) (if (G10448 G12656) (G11624 (G10450 G12656)) (if (vector? G12656) (vector->list G12656) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G12656)))))) (set! G11626 (lambda (G12668) (G11622 G12668 pair?))) (set! G11628 (lambda (G12670) (G11622 G12670 vector?))) (set! G11630 (lambda (G12672) (G11622 G12672 null?))) (set! G11632 (lambda (G12674) ((lambda (G12676) (if G12676 G12676 (begin '#f (if (G11626 G12674) (begin '#f (G11632 (G11636 G12674))) '#f)))) (G11630 G12674)))) (set! G11634 (lambda (G12678) (if (G11584 G12678) (G11616 (G11634 (G11588 G12678)) (G11590 G12678) (G11592 G12678) (G11594 G12678)) (if (G10448 G12678) (G11634 (G10450 G12678)) (if (pair? G12678) (car G12678) (assertion-violation 'syntax-car '"BUG: not a pair" G12678)))))) (set! G11636 (lambda (G12680) (if (G11584 G12680) (G11616 (G11636 (G11588 G12680)) (G11590 G12680) (G11592 G12680) (G11594 G12680)) (if (G10448 G12680) (G11636 (G10450 G12680)) (if (pair? G12680) (cdr G12680) (assertion-violation 'syntax-cdr '"BUG: not a pair" G12680)))))) (set! G11638 (lambda (G12682) (if (G11626 G12682) (cons (G11634 G12682) (G11638 (G11636 G12682))) (if (G11630 G12682) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G12682))))) (set! G11640 (lambda (G12684) (if (G11584 G12684) (begin '#f ((lambda (G12686) (symbol? (if (G10448 G12686) (G10447 G12686) G12686))) (G11588 G12684))) '#f))) (set! G11642 (lambda (G12688) (begin (if (G11584 G12688) (void) (error 'id->sym '"BUG in ikarus: not an id" G12688)) ((lambda (G12690) ((lambda (G12692) (if (symbol? G12692) G12692 (error 'id->sym '"BUG in ikarus: not an id" G12688))) (if (G10448 G12690) (G10447 G12690) G12690))) (G11588 G12688))))) (set! G11644 (lambda (G12694 G12695) ((lambda (G12698) (if G12698 G12698 (begin '#f (if (pair? G12694) (if (pair? G12695) (if (eq? (car G12694) (car G12695)) (begin '#f (G11644 (cdr G12694) (cdr G12695))) '#f) '#f) '#f)))) (if (null? G12694) (begin '#f (null? G12695)) '#f)))) (set! G11646 (lambda (G12700 G12701) (if (eq? (G11642 G12700) (G11642 G12701)) (begin '#f (G11644 (G11590 G12700) (G11590 G12701))) '#f))) (set! G11648 (lambda (G12704 G12705) ((lambda (G12708 G12709) (if ((lambda (G12712) (if G12712 G12712 (begin '#f G12709))) G12708) (eq? G12708 G12709) (eq? (G11642 G12704) (G11642 G12705)))) (G11668 G12704) (G11668 G12705)))) (set! G11650 (lambda (G12714) (if (for-all G11640 G12714) (begin '#f (G11652 G12714)) '#f))) (set! G11652 (lambda (G12716) ((lambda (G12718) (if G12718 G12718 (begin '#f (if (not (G11654 (car G12716) (cdr G12716))) (begin '#f (G11652 (cdr G12716))) '#f)))) (null? G12716)))) (set! G11654 (lambda (G12720 G12721) (if (pair? G12721) (begin '#f ((lambda (G12724) (if G12724 G12724 (begin '#f (G11654 G12720 (cdr G12721))))) (G11646 G12720 (car G12721)))) '#f))) (set! G11656 (lambda (G12726) ((lambda (G12728) (if G12728 G12728 ((lambda (G12730) (if G12730 G12730 ((lambda (G12732) (if G12732 G12732 ((lambda (G12734) (if G12734 G12734 (begin '#f (bytevector? G12726)))) (boolean? G12726)))) (char? G12726)))) (string? G12726)))) (number? G12726)))) (set! G11658 (lambda (G12736) (if (pair? G12736) (cons (G11658 (car G12736)) (G11658 (cdr G12736))) (if (vector? G12736) (vector-map G11658 G12736) (if (G10448 G12736) (G10447 G12736) G12736))))) (set! G11660 (lambda (G12738 G12739) (if (G11512 G12739) (if ((lambda (G12742) (if G12742 G12742 ((lambda (G12744) (if G12744 G12744 (begin '#f (if (vector? G12738) (if (> (vector-length G12738) '0) (begin '#f (G10448 (vector-ref G12738 '0))) '#f) '#f)))) (if (pair? G12738) (begin '#f (G10448 (car G12738))) '#f)))) (G10448 G12738)) (G11658 G12738) G12738) ((letrec ((G12746 (lambda (G12748) (if (G11584 G12748) (G11660 (G11588 G12748) (G11590 G12748)) (if (G10448 G12748) (G10447 G12748) (if (pair? G12748) ((lambda (G12750 G12751) (if (if (eq? G12750 (car G12748)) (begin '#f (eq? G12751 (cdr G12748))) '#f) G12748 (cons G12750 G12751))) (G12746 (car G12748)) (G12746 (cdr G12748))) (if (vector? G12748) ((lambda (G12754) ((lambda (G12756) (if (for-all eq? G12754 G12756) G12748 (list->vector G12756))) (map G12746 G12754))) (vector->list G12748)) G12748))))))) G12746) G12738)))) (set! G11662 (lambda (G12758) (G11660 G12758 '()))) (set! G11664 (lambda (G12760 G12761 G12762) (if (null? G12762) '#f (if (G11644 G12760 (vector-ref G12761 (car G12762))) (car G12762) (G11664 G12760 G12761 (cdr G12762)))))) (set! G11666 (lambda (G12766) ((lambda (G12768) (if G12768 G12768 (begin '#f ((lambda (G12770) (if G12770 ((lambda (G12772) ((lambda (G12774) (call-with-values (lambda () (G11522 G12766 G12774)) (lambda (G12778 G12779) ((lambda (G12782 G12783) (begin (G11561 G12774 G12766 G12783) G12783)) G12779 G12778)))) (G12396 G12772))) G12770) '#f)) (G12466))))) (G11668 G12766)))) (set! G11668 (lambda (G12786) ((lambda (G12788) ((letrec ((G12790 (lambda (G12792 G12793) (if (null? G12792) '#f (if (eq? (car G12792) 'shift) (G12790 (cdr G12792) (cdr G12793)) ((lambda (G12796) ((lambda (G12798) (if G12798 ((lambda (G12800) ((lambda (G12802) ((lambda (G12804) (if G12804 (vector-ref (G11547 G12796) G12804) (G12790 (cdr G12792) G12793))) (if G12802 (begin '#f (G11664 G12793 (G11545 G12796) (reverse G12802))) '#f))) (hashtable-ref G12800 G12788 '#f))) G12798) ((letrec ((G12806 (lambda (G12808 G12809 G12810) (if (null? G12808) (G12790 (cdr G12792) G12793) (if (if (eq? (car G12808) G12788) (begin '#f (G11644 (car G12809) G12793)) '#f) (car G12810) (G12806 (cdr G12808) (cdr G12809) (cdr G12810))))))) G12806) (G11543 G12796) (G11545 G12796) (G11547 G12796)))) (G11549 G12796))) (car G12792))))))) G12790) (G11592 G12786) (G11590 G12786))) (G11642 G12786)))) (set! G11670 (lambda (G12814 G12815) ((lambda (G12818) (if G12818 ((lambda (G12820) (if (if (pair? G12820) (begin '#f (eq? (car G12820) '$core-rtd)) '#f) (cons '$rtd (map G12145 (cdr G12820))) (if (if (pair? G12820) (begin '#f (eq? (car G12820) 'global-rtd)) '#f) ((lambda (G12822 G12823) (cons '$rtd (symbol-value G12823))) (cadr G12820) (cddr G12820)) G12820))) G12818) ((lambda (G12826) (if G12826 (cdr G12826) ((lambda (G12828) (if G12828 ((lambda (G12830) ((lambda (G12832) (if G12832 ((lambda (G12834) (cons* 'lexical (cdr G12834) '#f)) G12832) '(displaced-lexical . #f))) (assq G12814 (G12400 G12830)))) G12828) '(displaced-lexical . #f))) (G12466)))) (assq G12814 G12815)))) (G11126 G12814)))) (set! G11672 cons) (set! G11674 car) (set! G11676 cdr) (set! G11678 (lambda (G12836) (G12450 '#f '"unbound identifier" G12836 (G19247)))) (set! G11680 (lambda (G12838 G12839) (if (G11640 G12838) ((lambda (G12842) ((lambda (G12844) ((lambda (G12846) ((lambda (G12848) ((lambda () (begin (if G12844 (void) (G11678 G12842)) ((lambda (G12850) (if (memv G12850 '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd library mutable)) (values G12848 (G11676 G12846) G12842) (values 'other '#f '#f))) G12848))))) (G11674 G12846))) (G11670 G12844 G12839))) (G11666 G12842))) G12838) (if (G11626 G12838) ((lambda (G12851) (if (G11640 G12851) ((lambda (G12853) ((lambda (G12855) ((lambda (G12857) ((lambda () (begin (if G12853 (void) (G11678 G12851)) ((lambda (G12859) (if (memv G12859 '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import $core-rtd)) (values G12857 (G11676 G12855) G12851) (values 'call '#f '#f))) G12857))))) (G11674 G12855))) (G11670 G12853 G12839))) (G11666 G12851)) (values 'call '#f '#f))) (G11634 G12838)) ((lambda (G12860) (if (G11656 G12860) (values 'constant G12860 '#f) (values 'other '#f '#f))) (G11662 G12838)))))) (set! G11703 (lambda (G12862 G12863) (if (procedure? G12862) (cons* 'local-macro G12862 G12863) (if (if (pair? G12862) (if (eq? (car G12862) 'macro!) (begin '#f (procedure? (cdr G12862))) '#f) '#f) (cons* 'local-macro! (cdr G12862) G12863) (if (if (pair? G12862) (begin '#f (eq? (car G12862) '$rtd)) '#f) G12862 (assertion-violation 'expand '"invalid transformer" G12862)))))) (set! G11705 (lambda (G12866) (if (procedure? G12866) (cons 'macro! G12866) (assertion-violation 'make-variable-transformer '"not a procedure" G12866)))) (set! G11707 (lambda (G12868) (if (pair? G12868) (if (eq? (car G12868) 'macro!) (begin '#f (procedure? (cdr G12868))) '#f) '#f))) (set! G11709 (lambda (G12870) (if (G11707 G12870) (cdr G12870) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G12870)))) (set! G11711 (lambda (G12872) (G11703 (eval-core (G10555 G12872)) G12872))) (set! G12099 (lambda (G12874) ((lambda (G12876) ((lambda (G12878) (if (if G12878 (begin '#f (apply (lambda (G12880 G12881 G12882 G12883) (G11640 G12880)) G12878)) '#f) (apply (lambda (G12888 G12889 G12890 G12891) (begin (G12259 G12889 G12874) (values G12888 (cons 'defun (cons G12889 (cons G12890 G12891)))))) G12878) ((lambda (G12896) ((lambda (G12898) (if (if G12898 (begin '#f (apply (lambda (G12900 G12901) (G11640 G12900)) G12898)) '#f) (apply (lambda (G12904 G12905) (values G12904 (cons 'expr G12905))) G12898) ((lambda (G12908) ((lambda (G12910) (if (if G12910 (begin '#f (apply (lambda (G12912) (G11640 G12912)) G12910)) '#f) (apply (lambda (G12914) (values G12914 (cons 'expr (G12145 '(void))))) G12910) (G12452 '#f '"invalid syntax" G12908))) (G12219 G12908 '(_ any)))) G12896))) (G12219 G12896 '(_ any any)))) G12876))) (G12219 G12876 '(_ (any . any) any . each-any)))) G12874))) (set! G12101 (lambda (G12916) ((lambda (G12918) ((lambda (G12920) (if (if G12920 (begin '#f (apply (lambda (G12922 G12923) (G11640 G12922)) G12920)) '#f) (apply (lambda (G12926 G12927) (values G12926 G12927)) G12920) (G12452 '#f '"invalid syntax" G12918))) (G12219 G12918 '(_ any any)))) G12916))) (set! G12103 (make-eq-hashtable)) (set! G12105 (lambda (G12930) ((lambda (G12932) (if G12932 G12932 (begin '#f ((lambda (G12934) ((lambda (G12936) ((lambda (G12938) ((lambda () (begin (hashtable-set! G12103 G12930 G12938) G12938)))) ((lambda (G12940) (if G12940 ((lambda (G12942) ((lambda (G12944 G12945) (G11620 (G11541 (list G12944) (list G11510) (list G12945) '#f) G12936)) (car G12942) (cdr G12942))) G12940) G12936)) (assq G12930 G12934)))) (G11586 G12930 G11510 '() '()))) (G11084 (G11120 '(psyntax system $all))))))) (hashtable-ref G12103 G12930 '#f)))) (set! G12107 car) (set! G12109 cdr) (set! G12111 set-cdr!) (set! G12113 (lambda (G12948 G12949 G12950) (cons (cons* G12948 'lexical G12949 '#f) G12950))) (set! G12115 (lambda (G12954 G12955 G12956) (if (null? G12954) G12956 (G12115 (cdr G12954) (cdr G12955) (G12113 (car G12954) (car G12955) G12956))))) (set! G12117 (lambda (G12960 G12961 G12962 G12963) ((lambda (G12968) ((lambda (G12970) (if G12970 (apply (lambda (G12972 G12973 G12974 G12975) (if (not (G11650 G12972)) (G12149 G12960 G12972) ((lambda (G12980 G12981) ((lambda (G12984 G12985) ((lambda (G12988 G12989) (G12963 '#f G12980 G12989 G12988)) (G12277 (G11620 G12984 (cons G12974 G12975)) G12985 G12962) (G12251 (map (lambda (G12992) (G11620 G12984 G12992)) G12973) G12985 G12962))) (G11569 G12972 G12981) (G12115 G12981 G12980 G12961))) (map G11514 G12972) (map G11518 G12972)))) G12970) (G12452 '#f '"invalid syntax" G12968))) (G12219 G12968 '(_ #(each (any any)) any . each-any)))) G12960))) (set! G12119 (lambda (G12994 G12995 G12996) (G12117 G12994 G12995 G12996 G11487))) (set! G12121 (lambda (G13000 G13001 G13002) (G12117 G13000 G13001 G13002 G11488))) (set! G12123 (lambda (G13006 G13007 G13008) ((lambda (G13013) (begin (set! G13013 (lambda (G13032) ((lambda (G13034) (if G13034 G13034 (begin '#f (G12452 '#f '"unbound identifier" G13006 G13032)))) (G11666 G13032)))) ((lambda (G13014) ((lambda (G13016) (if G13016 (apply (lambda (G13018 G13019 G13020 G13021) (if (not (G11650 G13018)) (G12149 G13006 G13018) ((lambda (G13026 G13027) (G12277 (cons G13020 G13021) (append (map cons G13026 G13027) G13007) (append (map cons G13026 G13027) G13008))) (map G13013 G13018) (map (lambda (G13030) (G11711 (G12316 G13030 G13008))) G13019)))) G13016) (G12452 '#f '"invalid syntax" G13014))) (G12219 G13014 '(_ #(each (any any)) any . each-any)))) G13006))) '#f))) (set! G12125 (lambda (G13036 G13037 G13038) ((lambda (G13042) ((lambda (G13044) (if (if G13044 (begin '#f (apply (lambda (G13046) (G11640 G13046)) G13044)) '#f) (apply (lambda (G13048) ((lambda (G13050) ((lambda (G13052) ((lambda (G13054) ((lambda () (begin (if G13050 (void) (G11678 G13048)) (if (if (eq? G13054 '$rtd) (begin '#f (not (list? (G11676 G13052)))) '#f) (void) (G12452 '#f '"not a record type" G13036)) (list 'quote (G11676 G13052)))))) (G11674 G13052))) (G11670 G13050 G13037))) (G11666 G13048))) G13044) (G12452 '#f '"invalid syntax" G13042))) (G12219 G13042 '(_ any)))) G13036))) (set! G12127 (lambda (G13056 G13057 G13058) ((lambda (G13062) ((lambda (G13064) (if (if G13064 (begin '#f (apply (lambda (G13066) (G11640 G13066)) G13064)) '#f) (apply (lambda (G13068) ((lambda (G13070) ((lambda (G13072) ((lambda (G13074) ((lambda () (begin (if G13070 (void) (G11678 G13068)) (if (if (eq? G13074 '$rtd) (begin '#f (list? (G11676 G13072))) '#f) (void) (G12452 '#f '"not a record type" G13056)) (G12255 (car (G11676 G13072)) G13057 G13058))))) (G11674 G13072))) (G11670 G13070 G13057))) (G11666 G13068))) G13064) (G12452 '#f '"invalid syntax" G13062))) (G12219 G13062 '(_ any)))) G13056))) (set! G12129 (lambda (G13076 G13077 G13078) ((lambda (G13082) ((lambda (G13084) (if (if G13084 (begin '#f (apply (lambda (G13086) (G11640 G13086)) G13084)) '#f) (apply (lambda (G13088) ((lambda (G13090) ((lambda (G13092) ((lambda (G13094) ((lambda () (begin (if G13090 (void) (G11678 G13088)) (if (if (eq? G13094 '$rtd) (begin '#f (list? (G11676 G13092))) '#f) (void) (G12452 '#f '"invalid type" G13076)) (G12255 (cadr (G11676 G13092)) G13077 G13078))))) (G11674 G13092))) (G11670 G13090 G13077))) (G11666 G13088))) G13084) (G12452 '#f '"invalid syntax" G13082))) (G12219 G13082 '(_ any)))) G13076))) (set! G12131 (lambda (G13096 G13097 G13098) ((lambda (G13102) ((lambda (G13104) (if G13104 (apply (lambda (G13106 G13107 G13108) (list 'if (G12255 G13106 G13097 G13098) (G11485 '#f (G12251 (cons G13107 G13108) G13097 G13098)) (G11486))) G13104) (G12452 '#f '"invalid syntax" G13102))) (G12219 G13102 '(_ any any . each-any)))) G13096))) (set! G12133 (lambda (G13112 G13113 G13114) ((lambda (G13118) ((lambda (G13120) (if G13120 (apply (lambda (G13122 G13123 G13124) (list 'if (G12255 G13122 G13113 G13114) (G11486) (G11485 '#f (G12251 (cons G13123 G13124) G13113 G13114)))) G13120) (G12452 '#f '"invalid syntax" G13118))) (G12219 G13118 '(_ any any . each-any)))) G13112))) (set! G12135 (lambda (G13128 G13129 G13130) ((lambda (G13134) ((lambda (G13136) (if G13136 (apply (lambda (G13138 G13139 G13140) (list 'if (G12255 G13138 G13129 G13130) (G12255 G13139 G13129 G13130) (G12255 G13140 G13129 G13130))) G13136) ((lambda (G13144) ((lambda (G13146) (if G13146 (apply (lambda (G13148 G13149) (list 'if (G12255 G13148 G13129 G13130) (G12255 G13149 G13129 G13130) (G11486))) G13146) (G12452 '#f '"invalid syntax" G13144))) (G12219 G13144 '(_ any any)))) G13134))) (G12219 G13134 '(_ any any any)))) G13128))) (set! G12137 (lambda (G13152 G13153 G13154) ((lambda (G13159 G13161) (begin (set! G13159 (lambda (G13216 G13217 G13218) ((lambda (G13222) ((lambda (G13224) (if G13224 (apply (lambda (G13226 G13227 G13228) (list 'if ((lambda (G13232) (if (= '1 (length G13232)) (list '(primitive eqv?) G13216 (list 'quote (car G13232))) (list '(primitive memv) G13216 (list 'quote G13232)))) (G11662 G13226)) (G11485 '#f (G12251 (cons G13227 G13228) G13153 G13154)) G13218)) G13224) ((lambda (G13234) ((lambda (G13236) (if G13236 (apply (lambda (G13238) (G12452 '#f '"invalid syntax" G13152)) G13236) (G12452 '#f '"invalid syntax" G13234))) (G12219 G13234 'any))) G13222))) (G12219 G13222 '(each-any any . each-any)))) G13217))) (set! G13161 (lambda (G13186 G13187) ((lambda (G13190) ((lambda (G13192) (if G13192 (apply (lambda (G13194 G13195 G13196) (G13159 G13186 G13187 (G11486))) G13192) ((lambda (G13200) ((lambda (G13202) (if G13202 (apply (lambda (G13204 G13205 G13206) (if (if (G11640 G13204) (begin '#f (G11648 G13204 (G12105 'else))) '#f) (G11485 '#f (G12251 (cons G13205 G13206) G13153 G13154)) (G12452 '#f '"invalid syntax" G13152))) G13202) ((lambda (G13210) ((lambda (G13212) (if G13212 (apply (lambda (G13214) (G12452 '#f '"invalid syntax" G13152)) G13212) (G12452 '#f '"invalid syntax" G13210))) (G12219 G13210 'any))) G13200))) (G12219 G13200 '(any any . each-any)))) G13190))) (G12219 G13190 '(each-any any . each-any)))) G13187))) ((lambda (G13162) ((lambda (G13164) (if G13164 (apply (lambda (G13166) (G11485 '#f (list (G12255 G13166 G13153 G13154) (G11486)))) G13164) ((lambda (G13168) ((lambda (G13170) (if G13170 (apply (lambda (G13172 G13173 G13174) ((lambda (G13178) (G11484 '#f (list G13178) (list (G12255 G13172 G13153 G13154)) ((letrec ((G13180 (lambda (G13182 G13183) (if (null? G13183) (G13161 G13178 G13182) (G13159 G13178 G13182 (G13180 (car G13183) (cdr G13183))))))) G13180) G13173 G13174))) (G11514 't))) G13170) (G12452 '#f '"invalid syntax" G13168))) (G12219 G13168 '(_ any any . each-any)))) G13162))) (G12219 G13162 '(_ any)))) G13152))) '#f '#f))) (set! G12139 (lambda (G13240 G13241 G13242) ((lambda (G13246) ((lambda (G13248) (if G13248 (apply (lambda (G13250) (list 'quote (G11662 G13250))) G13248) (G12452 '#f '"invalid syntax" G13246))) (G12219 G13246 '(_ any)))) G13240))) (set! G12141 (lambda (G13252 G13253 G13254) ((lambda (G13258) ((lambda (G13260) (if G13260 (apply (lambda (G13262 G13263 G13264) (call-with-values (lambda () (G12263 G13252 G13262 (map cons G13263 G13264) G13253 G13254)) (lambda (G13270 G13271) ((lambda (G13274 G13275) (G11483 '#f G13275 G13274)) G13271 G13270)))) G13260) (G12452 '#f '"invalid syntax" G13258))) (G12219 G13258 '(_ . #(each (any any . each-any)))))) G13252))) (set! G12143 (lambda (G13278 G13279 G13280) ((lambda (G13284) ((lambda (G13286) (if G13286 (apply (lambda (G13288 G13289 G13290) (call-with-values (lambda () (G12261 G13278 G13288 (cons G13289 G13290) G13279 G13280)) (lambda (G13296 G13297) ((lambda (G13300 G13301) (G11482 '#f G13301 G13300)) G13297 G13296)))) G13286) (G12452 '#f '"invalid syntax" G13284))) (G12219 G13284 '(_ any any . each-any)))) G13278))) (set! G12145 (lambda (G13304) (G11616 ((letrec ((G13306 (lambda (G13308) (if (G11584 G13308) G13308 (if (pair? G13308) (cons (G13306 (car G13308)) (G13306 (cdr G13308))) (if (symbol? G13308) (G12105 G13308) (if (vector? G13308) (vector-map G13306 G13308) G13308))))))) G13306) G13304) '() '() '()))) (set! G12147 (lambda (G13310) ((lambda (G13312) ((lambda (G13314) (if G13314 (apply (lambda (G13316 G13317 G13318 G13319) ((lambda (G13324) (begin (G12259 (map car G13324) G13310) ((lambda (G13326) (G12145 (list 'let (map list G13326 G13317) ((letrec ((G13328 (lambda (G13330 G13331) (if (null? G13330) (cons 'begin (cons '#f (cons G13318 G13319))) (list 'syntax-case (car G13331) '() (list (car G13330) (G13328 (cdr G13330) (cdr G13331))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G13330)) (car G13331)))))))) G13328) G13316 G13326)))) (G12438 G13317)))) ((letrec ((G13334 (lambda (G13336) (if (null? G13336) '() (call-with-values (lambda () (G12217 (car G13336) '())) (lambda (G13340 G13341) ((lambda (G13344 G13345) (append G13344 (G13334 (cdr G13336)))) G13341 G13340))))))) G13334) G13316))) G13314) (G12452 '#f '"invalid syntax" G13312))) (G12219 G13312 '(_ #(each (any any)) any . each-any)))) G13310))) (set! G12149 (lambda (G13348 G13349) ((lambda (G13352) ((lambda (G13354) (if G13354 (apply (lambda (G13356 G13357) ((letrec ((G13360 (lambda (G13362) (if (null? G13362) (values) (if (not (G11640 (car G13362))) (G12452 '#f '"not an identifier" G13348 (car G13362)) (begin (G13360 (cdr G13362)) (if (G11654 (car G13362) (cdr G13362)) (G12452 '#f '"duplicate binding" G13348 (car G13362)) (void)))))))) G13360) (if (G11640 G13357) (cons G13357 G13356) (if (G11630 G13357) G13356 (G12452 '#f '"not an identifier" G13348 G13357))))) G13354) ((lambda (G13364) ((lambda (G13366) (if G13366 (apply (lambda () (G12452 '#f '"malformed binding form" G13348 G13349)) G13366) (G12452 '#f '"invalid syntax" G13364))) (G12219 G13364 '_))) G13352))) (G12219 G13352 '#(each+ any () any)))) G13349))) (set! G12151 (lambda (G13368) ((lambda (G13370) ((lambda (G13372) (if G13372 (apply (lambda (G13374 G13375 G13376 G13377) (if (G11650 G13374) (G12145 (cons (cons 'lambda (cons G13374 (cons G13376 G13377))) G13375)) (G12149 G13368 G13374))) G13372) ((lambda (G13382) ((lambda (G13384) (if (if G13384 (begin '#f (apply (lambda (G13386 G13387 G13388 G13389 G13390) (G11640 G13386)) G13384)) '#f) (apply (lambda (G13396 G13397 G13398 G13399 G13400) (if (G11650 G13397) (G12145 (cons (list 'letrec (list (list G13396 (cons 'lambda (cons G13397 (cons G13399 G13400))))) G13396) G13398)) (G12149 G13368 G13397))) G13384) (G12452 '#f '"invalid syntax" G13382))) (G12219 G13382 '(_ any #(each (any any)) any . each-any)))) G13370))) (G12219 G13370 '(_ #(each (any any)) any . each-any)))) G13368))) (set! G12153 (lambda (G13406) ((lambda (G13409 G13411) (begin (set! G13409 (lambda (G13507 G13508 G13509) (begin (if (G11640 G13507) (void) (G12452 '#f '"not an indentifier" G13406 G13507)) (if (G11654 G13507 G13508) (G12452 '#f '"duplicate binding" G13406 G13507) (void)) ((lambda (G13513) (values G13513 (cons G13507 G13508) (cons G13513 G13509))) (gensym (G12458 G13507)))))) (set! G13411 (lambda (G13489 G13490 G13491) (if (null? G13489) (values '() G13490 G13491) (call-with-values (lambda () (G13409 (car G13489) G13490 G13491)) (lambda (G13495 G13496 G13497) (call-with-values (lambda () (G13411 (cdr G13489) G13496 G13497)) (lambda (G13501 G13502 G13503) (values (cons G13495 G13501) G13502 G13503)))))))) ((lambda (G13412) ((lambda (G13414) (if G13414 (apply (lambda (G13416 G13417) (cons* (G12145 'let) '() G13416 G13417)) G13414) ((lambda (G13420) ((lambda (G13422) (if G13422 (apply (lambda (G13424 G13425 G13426 G13427) (G12145 ((letrec ((G13432 (lambda (G13434 G13435 G13436 G13437) (if (null? G13434) (cons 'let (cons (map list G13436 G13437) (cons G13426 G13427))) ((lambda (G13442) ((lambda (G13444) (if G13444 (apply (lambda (G13446) (call-with-values (lambda () (G13411 G13446 G13436 G13437)) (lambda (G13451 G13452 G13453) ((lambda (G13457 G13458 G13459) (list 'call-with-values (list 'lambda '() (car G13435)) (list 'lambda G13459 (G13432 (cdr G13434) (cdr G13435) G13458 G13457)))) G13453 G13452 G13451)))) G13444) ((lambda (G13463) ((lambda (G13465) (if G13465 (apply (lambda (G13467 G13468) (call-with-values (lambda () (G13409 G13468 G13436 G13437)) (lambda (G13471 G13472 G13473) (call-with-values (lambda () (G13411 G13467 G13472 G13473)) (lambda (G13477 G13478 G13479) (list 'call-with-values (list 'lambda '() (car G13435)) (list 'lambda (append G13477 G13471) (G13432 (cdr G13434) (cdr G13435) G13478 G13479)))))))) G13465) ((lambda (G13483) ((lambda (G13485) (if G13485 (apply (lambda (G13487) (G12452 '#f '"malformed bindings" G13406 G13487)) G13485) (G12452 '#f '"invalid syntax" G13483))) (G12219 G13483 'any))) G13463))) (G12219 G13463 '#(each+ any () any)))) G13442))) (G12219 G13442 'each-any))) (car G13434)))))) G13432) G13424 G13425 '() '()))) G13422) (G12452 '#f '"invalid syntax" G13420))) (G12219 G13420 '(_ #(each (any any)) any . each-any)))) G13412))) (G12219 G13412 '(_ () any . each-any)))) G13406))) '#f '#f))) (set! G12155 (lambda (G13515) ((lambda (G13518) (begin (set! G13518 (lambda (G13565) (if (null? G13565) (void) ((lambda (G13567) (begin (if (G11640 G13567) (void) (G12452 '#f '"not an identifier" G13515 G13567)) (G13518 (cdr G13565)) (if (G11654 G13567 (cdr G13565)) (G12452 '#f '"duplicate identifier" G13515 G13567) (void)))) (car G13565))))) ((lambda (G13519) ((lambda (G13521) (if G13521 (apply (lambda (G13523 G13524) (cons* (G12145 'let) '() G13523 G13524)) G13521) ((lambda (G13527) ((lambda (G13529) (if G13529 (apply (lambda (G13531 G13532 G13533 G13534) (G12145 ((letrec ((G13539 (lambda (G13541 G13542) (if (null? G13541) (cons 'begin (cons G13533 G13534)) ((lambda (G13545) ((lambda (G13547) (if G13547 (apply (lambda (G13549) (begin (G13518 G13549) (list 'call-with-values (list 'lambda '() (car G13542)) (list 'lambda G13549 (G13539 (cdr G13541) (cdr G13542)))))) G13547) ((lambda (G13551) ((lambda (G13553) (if G13553 (apply (lambda (G13555 G13556) (begin (G13518 (cons G13556 G13555)) (list 'call-with-values (list 'lambda '() (car G13542)) (list 'lambda (append G13555 G13556) (G13539 (cdr G13541) (cdr G13542)))))) G13553) ((lambda (G13559) ((lambda (G13561) (if G13561 (apply (lambda (G13563) (G12452 '#f '"malformed bindings" G13515 G13563)) G13561) (G12452 '#f '"invalid syntax" G13559))) (G12219 G13559 'any))) G13551))) (G12219 G13551 '#(each+ any () any)))) G13545))) (G12219 G13545 'each-any))) (car G13541)))))) G13539) G13531 G13532))) G13529) (G12452 '#f '"invalid syntax" G13527))) (G12219 G13527 '(_ #(each (any any)) any . each-any)))) G13519))) (G12219 G13519 '(_ () any . each-any)))) G13515))) '#f))) (set! G12157 (lambda (G13569) ((lambda (G13571) ((lambda (G13573) (if G13573 (apply (lambda (G13575 G13576 G13577 G13578) (if (G11650 G13576) (G12145 (list 'make-traced-procedure (list 'quote G13575) (cons 'lambda (cons G13576 (cons G13577 G13578))))) (G12149 G13569 G13576))) G13573) ((lambda (G13583) ((lambda (G13585) (if G13585 (apply (lambda (G13587 G13588 G13589 G13590 G13591) (if (G11650 (cons G13589 G13588)) (G12145 (list 'make-traced-procedure (list 'quote G13587) (cons 'lambda (cons (append G13588 G13589) (cons G13590 G13591))))) (G12149 G13569 (append G13588 G13589)))) G13585) (G12452 '#f '"invalid syntax" G13583))) (G12219 G13583 '(_ any #(each+ any () any) any . each-any)))) G13571))) (G12219 G13571 '(_ any each-any any . each-any)))) G13569))) (set! G12159 (lambda (G13597) ((lambda (G13599) ((lambda (G13601) (if G13601 (apply (lambda (G13603 G13604 G13605 G13606) (if (G11650 G13604) (G12145 (list 'define G13603 (list 'make-traced-procedure (list 'quote G13603) (cons 'lambda (cons G13604 (cons G13605 G13606)))))) (G12149 G13597 G13604))) G13601) ((lambda (G13611) ((lambda (G13613) (if G13613 (apply (lambda (G13615 G13616 G13617 G13618 G13619) (if (G11650 (cons G13617 G13616)) (G12145 (list 'define G13615 (list 'make-traced-procedure (list 'quote G13615) (cons 'lambda (cons (append G13616 G13617) (cons G13618 G13619)))))) (G12149 G13597 (append G13616 G13617)))) G13613) ((lambda (G13625) ((lambda (G13627) (if G13627 (apply (lambda (G13629 G13630) (if (G11640 G13629) (G12145 (list 'define G13629 (list 'let (list (list 'v G13630)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G13629) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G12452 '#f '"invalid name" G13597))) G13627) (G12452 '#f '"invalid syntax" G13625))) (G12219 G13625 '(_ any any)))) G13611))) (G12219 G13611 '(_ (any . #(each+ any () any)) any . each-any)))) G13599))) (G12219 G13599 '(_ (any . each-any) any . each-any)))) G13597))) (set! G12161 (lambda (G13633) ((lambda (G13635) ((lambda (G13637) (if G13637 (apply (lambda (G13639 G13640) (if (G11640 G13639) (G12145 (list 'define-syntax G13639 (list 'make-traced-macro (list 'quote G13639) G13640))) (G12452 '#f '"invalid name" G13633))) G13637) (G12452 '#f '"invalid syntax" G13635))) (G12219 G13635 '(_ any any)))) G13633))) (set! G12163 (lambda (G13643) (lambda (G13645) ((lambda (G13647) ((lambda (G13649) (if G13649 (apply (lambda (G13651 G13652 G13653 G13654) (if (G11650 G13651) ((lambda (G13659) (G12145 (cons G13643 (cons (map list G13651 G13659) (cons G13653 G13654))))) (map (lambda (G13661 G13662) (list 'make-traced-macro (list 'quote G13661) G13662)) G13651 G13652)) (G12149 G13645 G13651))) G13649) (G12452 '#f '"invalid syntax" G13647))) (G12219 G13647 '(_ #(each (any any)) any . each-any)))) G13645)))) (set! G12165 (G12163 'let-syntax)) (set! G12167 (G12163 'letrec-syntax)) (set! G12169 (lambda (G13665) ((lambda (G13668) (begin (set! G13668 (lambda (G13691 G13692 G13693) ((lambda (G13698 G13700) (begin (set! G13698 (lambda (G13749 G13750) ((lambda (G13753) ((lambda (G13755) (if G13755 (apply (lambda (G13757 G13758) ((lambda (G13761) (list 'let (list (list G13761 G13757)) (list 'if G13761 (list G13758 G13761) G13750))) (gensym))) G13755) ((lambda (G13763) ((lambda (G13765) (if G13765 (apply (lambda (G13767) ((lambda (G13769) (list 'let (list (list G13769 G13767)) (list 'if G13769 G13769 G13750))) (gensym))) G13765) ((lambda (G13771) ((lambda (G13773) (if G13773 (apply (lambda (G13775 G13776 G13777) (list 'if G13775 (cons 'begin (cons G13776 G13777)) G13750)) G13773) ((lambda (G13781) ((lambda (G13783) (if G13783 (apply (lambda () (G12452 '#f '"invalid guard clause" G13749)) G13783) (G12452 '#f '"invalid syntax" G13781))) (G12219 G13781 '_))) G13771))) (G12219 G13771 '(any any . each-any)))) G13763))) (G12219 G13763 '(any)))) G13753))) (G12219 G13753 '(any #(scheme-id =>) any)))) G13749))) (set! G13700 (lambda (G13711) ((lambda (G13713) ((lambda (G13715) (if G13715 (apply (lambda () (values (list 'raise G13691) '#t)) G13715) ((lambda (G13717) ((lambda (G13719) (if G13719 (apply (lambda (G13721 G13722) (values (cons 'begin (cons G13721 G13722)) '#f)) G13719) ((lambda (G13725) ((lambda (G13727) (if G13727 (apply (lambda (G13729 G13730) (call-with-values (lambda () (G13700 G13730)) (lambda (G13735 G13736) ((lambda (G13739 G13740) (values (G13698 G13729 G13740) G13739)) G13736 G13735)))) G13727) ((lambda (G13743) ((lambda (G13745) (if G13745 (apply (lambda (G13747) (G12452 '#f '"invalid guard clause" G13747)) G13745) (G12452 '#f '"invalid syntax" G13743))) (G12219 G13743 'any))) G13725))) (G12219 G13725 '(any . any)))) G13717))) (G12219 G13717 '((#(scheme-id else) any . each-any))))) G13713))) (G12219 G13713 '()))) G13711))) (call-with-values (lambda () (G13700 G13693)) (lambda (G13703 G13704) ((lambda (G13707 G13708) (if G13707 (list G13692 G13708) G13708)) G13704 G13703))))) '#f '#f))) ((lambda (G13669) ((lambda (G13671) (if (if G13671 (begin '#f (apply (lambda (G13673 G13674 G13675 G13676) (G11640 G13673)) G13671)) '#f) (apply (lambda (G13681 G13682 G13683 G13684) ((lambda (G13689) (G12145 (list 'call/cc (list 'lambda (list G13689) (list 'with-exception-handler (list 'lambda (list G13681) (G13668 G13681 G13689 G13682)) (cons 'lambda (cons '() (cons '#f (cons G13683 G13684))))))))) (gensym))) G13671) (G12452 '#f '"invalid syntax" G13669))) (G12219 G13669 '(_ (any . each-any) any . each-any)))) G13665))) '#f))) (set! G12171 (lambda (G13785) ((lambda (G13788 G13790) (begin (set! G13788 (lambda (G13813) ((lambda (G13815) (if G13815 G13815 (begin '#f (if (not (memq (car G13813) (cdr G13813))) (begin '#f (G13788 (cdr G13813))) '#f)))) (null? G13813)))) (set! G13790 (lambda (G13811) (if (null? G13811) '() (cons (car G13811) (G13790 (remq (car G13811) (cdr G13811))))))) ((lambda (G13791) ((lambda (G13793) (if (if G13793 (begin '#f (apply (lambda (G13795 G13796 G13797) (if (G11640 G13795) (if (G11640 G13797) (begin '#f (for-all G11640 G13796)) '#f) '#f)) G13793)) '#f) (apply (lambda (G13801 G13802 G13803) ((lambda (G13807 G13808) (G12145 (list 'begin (list 'define G13808 (list 'enum-set-constructor (list 'make-enumeration (list 'quote G13807)))) (list 'define-syntax G13801 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G13807)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G13801) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G13803 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G13803) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G13807)) (cons 'syntax-violation (cons (list 'quote G13803) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G13808 '('(n* ...)))))))))))) (G13790 (G12458 G13802)) (gensym))) G13793) (G12452 '#f '"invalid syntax" G13791))) (G12219 G13791 '(_ any each-any any)))) G13785))) '#f '#f))) (set! G12173 (lambda (G13817) ((lambda (G13819) ((lambda (G13821) (if G13821 (apply (lambda (G13823) ((lambda (G13825) (G12145 (list 'time-it G13825 (list 'lambda '() G13823)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G13829 G13830) ((lambda (G13833 G13834) (begin (write (G12458 G13823) G13834) (G13833))) G13830 G13829))))) G13821) (G12452 '#f '"invalid syntax" G13819))) (G12219 G13819 '(_ any)))) G13817))) (set! G12175 (lambda (G13837) ((lambda (G13839) ((lambda (G13841) (if G13841 (apply (lambda (G13843) (G12145 (list 'make-promise (list 'lambda '() G13843)))) G13841) (G12452 '#f '"invalid syntax" G13839))) (G12219 G13839 '(_ any)))) G13837))) (set! G12177 (lambda (G13845) ((lambda (G13847) ((lambda (G13849) (if G13849 (apply (lambda (G13851) (G12145 (list 'unless G13851 (list 'assertion-violation ''assert '"assertion failed" (list 'quote G13851))))) G13849) (G12452 '#f '"invalid syntax" G13847))) (G12219 G13847 '(_ any)))) G13845))) (set! G12179 (lambda (G13853) ((lambda (G13855) ((lambda (G13857) (if G13857 (apply (lambda (G13859) ((lambda (G13861) (if (eqv? G13861 'little) (G12145 ''little) (if (eqv? G13861 'big) (G12145 ''big) (G12452 '#f '"endianness must be big or little" G13853)))) (G12458 G13859))) G13857) (G12452 '#f '"invalid syntax" G13855))) (G12219 G13855 '(_ any)))) G13853))) (set! G12181 (lambda (G13862) ((lambda (G13864) ((lambda (G13866) (if G13866 (apply (lambda (G13868) (G12145 (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G13868)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G13868) '((syntax (e* ...)))))))))) G13866) ((lambda (G13870) ((lambda (G13872) (if (if G13872 (begin '#f (apply (lambda (G13874 G13875 G13876 G13877 G13878) (if (G11640 G13874) (if (G11640 G13876) (begin '#f (G11640 G13877)) '#f) '#f)) G13872)) '#f) (apply (lambda (G13884 G13885 G13886 G13887 G13888) (G12145 (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G13885)) (list (list 'set! 'id G13887) (list 'syntax G13888)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G13885 '(e* ...))))))))) G13872) (G12452 '#f '"invalid syntax" G13870))) (G12219 G13870 '(_ (any any) ((#(scheme-id set!) any any) any))))) G13864))) (G12219 G13864 '(_ any)))) G13862))) (set! G12183 (lambda (G13894) ((lambda (G13897) (begin (set! G13897 (lambda (G13920) ((lambda (G13922) ((lambda (G13924) (if G13924 (apply (lambda (G13926 G13927) (list G13926 G13927 G13926)) G13924) ((lambda (G13930) ((lambda (G13932) (if G13932 (apply (lambda (G13934 G13935 G13936) (list G13934 G13935 G13936)) G13932) ((lambda (G13940) ((lambda (G13942) (if G13942 (apply (lambda () (G12452 '#f '"invalid binding" G13894)) G13942) (G12452 '#f '"invalid syntax" G13940))) (G12219 G13940 '_))) G13930))) (G12219 G13930 '(any any any)))) G13922))) (G12219 G13922 '(any any)))) G13920))) ((lambda (G13898) ((lambda (G13900) (if G13900 (apply (lambda (G13902 G13903 G13904 G13905) ((lambda (G13910) ((lambda (G13912) (if G13912 (apply (lambda (G13914 G13915 G13916) (if (G11650 G13914) (G12145 (list 'letrec (list (list 'loop (list 'lambda G13914 (list 'if G13903 (cons 'begin (cons '(if #f #f) G13904)) (cons 'begin (append G13905 (list (cons 'loop G13916)))))))) (cons 'loop G13915))) (G12452 '#f '"invalid bindings" G13894))) G13912) (G12452 '#f '"invalid syntax" G13910))) (G12219 G13910 '#(each (any any any))))) (map G13897 G13902))) G13900) (G12452 '#f '"invalid syntax" G13898))) (G12219 G13898 '(_ each-any (any . each-any) . each-any)))) G13894))) '#f))) (set! G12185 (lambda (G13944) ((lambda (G13946) ((lambda (G13948) (if (if G13948 (begin '#f (apply (lambda (G13950 G13951 G13952 G13953) (for-all G11640 G13950)) G13948)) '#f) (apply (lambda (G13958 G13959 G13960 G13961) (G12145 ((letrec ((G13966 (lambda (G13968) (if (null? G13968) (cons 'let (cons '() (cons G13960 G13961))) (list 'let (list (car G13968)) (G13966 (cdr G13968))))))) G13966) (map list G13958 G13959)))) G13948) (G12452 '#f '"invalid syntax" G13946))) (G12219 G13946 '(_ #(each (any any)) any . each-any)))) G13944))) (set! G12187 (lambda (G13970) ((lambda (G13972) ((lambda (G13974) (if G13974 (apply (lambda () '#f) G13974) ((lambda (G13976) ((lambda (G13978) (if G13978 (apply (lambda (G13980 G13981) (G12145 ((letrec ((G13984 (lambda (G13986 G13987) (if (null? G13987) (list 'begin '#f G13986) (list 'let (list (list 't G13986)) (list 'if 't 't (G13984 (car G13987) (cdr G13987)))))))) G13984) G13980 G13981))) G13978) (G12452 '#f '"invalid syntax" G13976))) (G12219 G13976 '(_ any . each-any)))) G13972))) (G12219 G13972 '(_)))) G13970))) (set! G12189 (lambda (G13990) ((lambda (G13992) ((lambda (G13994) (if G13994 (apply (lambda () '#t) G13994) ((lambda (G13996) ((lambda (G13998) (if G13998 (apply (lambda (G14000 G14001) (G12145 ((letrec ((G14004 (lambda (G14006 G14007) (if (null? G14007) (list 'begin '#f G14006) (cons 'if (cons G14006 (cons (G14004 (car G14007) (cdr G14007)) '(#f)))))))) G14004) G14000 G14001))) G13998) (G12452 '#f '"invalid syntax" G13996))) (G12219 G13996 '(_ any . each-any)))) G13992))) (G12219 G13992 '(_)))) G13990))) (set! G12191 (lambda (G14010) ((lambda (G14012) ((lambda (G14014) (if G14014 (apply (lambda (G14016 G14017) (G12145 ((letrec ((G14020 (lambda (G14022 G14023) (if (null? G14023) ((lambda (G14026) ((lambda (G14028) (if G14028 (apply (lambda (G14030 G14031) (cons 'begin (cons G14030 G14031))) G14028) ((lambda (G14034) ((lambda (G14036) (if G14036 (apply (lambda (G14038 G14039) (list 'let (list (list 't G14038)) (list 'if 't (cons G14039 '(t))))) G14036) ((lambda (G14042) ((lambda (G14044) (if G14044 (apply (lambda (G14046) (cons 'or (cons G14046 '((if #f #f))))) G14044) ((lambda (G14048) ((lambda (G14050) (if G14050 (apply (lambda (G14052 G14053) (list 'if G14052 (cons 'begin G14053))) G14050) ((lambda (G14056) ((lambda (G14058) (if G14058 (apply (lambda () (G12452 '#f '"invalid last clause" G14010)) G14058) (G12452 '#f '"invalid syntax" G14056))) (G12219 G14056 '_))) G14048))) (G12219 G14048 '(any . each-any)))) G14042))) (G12219 G14042 '(any)))) G14034))) (G12219 G14034 '(any #(scheme-id =>) any)))) G14026))) (G12219 G14026 '(#(scheme-id else) any . each-any)))) G14022) ((lambda (G14060) ((lambda (G14062) (if G14062 (apply (lambda (G14064 G14065) (G12452 '#f '"incorrect position of keyword else" G14010)) G14062) ((lambda (G14068) ((lambda (G14070) (if G14070 (apply (lambda (G14072 G14073) (list 'let (list (list 't G14072)) (list 'if 't (cons G14073 '(t)) (G14020 (car G14023) (cdr G14023))))) G14070) ((lambda (G14076) ((lambda (G14078) (if G14078 (apply (lambda (G14080) (list 'or G14080 (G14020 (car G14023) (cdr G14023)))) G14078) ((lambda (G14082) ((lambda (G14084) (if G14084 (apply (lambda (G14086 G14087) (list 'if G14086 (cons 'begin G14087) (G14020 (car G14023) (cdr G14023)))) G14084) ((lambda (G14090) ((lambda (G14092) (if G14092 (apply (lambda () (G12452 '#f '"invalid last clause" G14010)) G14092) (G12452 '#f '"invalid syntax" G14090))) (G12219 G14090 '_))) G14082))) (G12219 G14082 '(any . each-any)))) G14076))) (G12219 G14076 '(any)))) G14068))) (G12219 G14068 '(any #(scheme-id =>) any)))) G14060))) (G12219 G14060 '(#(scheme-id else) any . each-any)))) G14022))))) G14020) G14016 G14017))) G14014) (G12452 '#f '"invalid syntax" G14012))) (G12219 G14012 '(_ any . each-any)))) G14010))) (set! G12193 (lambda (G14094 G14095 G14096) ((lambda (G14100) (begin (if (if (string? G14100) (begin '#f (G11640 G14095)) '#f) (void) (G12452 '#f '"invalid syntax" G14094)) (cons (G12145 'begin) (with-input-from-file G14100 (lambda () ((letrec ((G14102 (lambda (G14104) ((lambda (G14106) (if (eof-object? G14106) (reverse G14104) (G14102 (cons (G11606 G14095 G14106) G14104)))) (G10446))))) G14102) '())))))) (G11662 G14096)))) (set! G12195 (lambda (G14108) ((lambda (G14110) ((lambda (G14112) (if G14112 (apply (lambda (G14114 G14115) (G12193 G14108 G14114 G14115)) G14112) (G12452 '#f '"invalid syntax" G14110))) (G12219 G14110 '(any any)))) G14108))) (set! G12197 (lambda (G14118) ((lambda (G14120) ((lambda (G14122) (if G14122 (apply (lambda (G14124 G14125) (G12193 G14118 G14124 G14125)) G14122) (G12452 '#f '"invalid syntax" G14120))) (G12219 G14120 '(_ any any)))) G14118))) (set! G12199 (lambda (G14128) ((lambda (G14130) ((lambda (G14132) (if G14132 (apply (lambda (G14134 G14135 G14136) (begin (G12225 G14134 G14128) (G12145 (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G14134 (map (lambda (G14140 G14141) ((lambda (G14144) ((lambda (G14146) (if G14146 (apply (lambda (G14148) (list (cons 'g G14148) (list 'syntax G14141))) G14146) ((lambda (G14150) ((lambda (G14152) (if G14152 (apply (lambda () (G12452 '#f '"invalid syntax-rules pattern" G14128 G14140)) G14152) (G12452 '#f '"invalid syntax" G14150))) (G12219 G14150 '_))) G14144))) (G12219 G14144 '(_ . any)))) G14140)) G14135 G14136)))))))) G14132) (G12452 '#f '"invalid syntax" G14130))) (G12219 G14130 '(_ each-any . #(each (any any)))))) G14128))) (set! G12201 ((lambda () ((lambda (G14155 G14196 G14198 G14200 G14202 G14204 G14206) (begin (set! G14155 (lambda (G14425) (list (G12105 'quote) (G11616 G14425 '() '() '())))) (set! G14196 (lambda (G14417 G14418) ((letrec ((G14421 (lambda (G14423) (if (null? G14423) G14418 (G14198 (car G14423) (G14421 (cdr G14423))))))) G14421) G14417))) (set! G14198 (lambda (G14379 G14380) ((lambda (G14383) ((lambda (G14385) (if G14385 (apply (lambda (G14387) ((lambda (G14389) ((lambda (G14391) (if G14391 (apply (lambda (G14393) (list (G12105 'quote) (cons G14393 G14387))) G14391) ((lambda (G14395) ((lambda (G14397) (if G14397 (apply (lambda () ((lambda (G14399) ((lambda (G14401) (if G14401 (apply (lambda () (list (G12105 'list) G14379)) G14401) ((lambda (G14403) ((lambda (G14405) (if G14405 (apply (lambda () (list (G12105 'cons) G14379 G14380)) G14405) (G12452 '#f '"invalid syntax" G14403))) (G12219 G14403 '_))) G14399))) (G12219 G14399 '()))) G14387)) G14397) (G12452 '#f '"invalid syntax" G14395))) (G12219 G14395 '_))) G14389))) (G12219 G14389 '(#(scheme-id quote) any)))) G14379)) G14385) ((lambda (G14407) ((lambda (G14409) (if G14409 (apply (lambda (G14411) (cons* (G12105 'list) G14379 G14411)) G14409) ((lambda (G14413) ((lambda (G14415) (if G14415 (apply (lambda () (list (G12105 'cons) G14379 G14380)) G14415) (G12452 '#f '"invalid syntax" G14413))) (G12219 G14413 '_))) G14407))) (G12219 G14407 '(#(scheme-id list) . each-any)))) G14383))) (G12219 G14383 '(#(scheme-id quote) any)))) G14380))) (set! G14200 (lambda (G14353 G14354) ((lambda (G14357) (if (null? G14357) (list (G12105 'quote) '()) (if (null? (cdr G14357)) (car G14357) (cons* (G12105 'append) G14357)))) ((letrec ((G14359 (lambda (G14361) (if (null? G14361) ((lambda (G14363) ((lambda (G14365) (if G14365 (apply (lambda () '()) G14365) ((lambda (G14367) ((lambda (G14369) (if G14369 (apply (lambda () (list G14354)) G14369) (G12452 '#f '"invalid syntax" G14367))) (G12219 G14367 '_))) G14363))) (G12219 G14363 '(#(scheme-id quote) ())))) G14354) ((lambda (G14371) ((lambda (G14373) (if G14373 (apply (lambda () (G14359 (cdr G14361))) G14373) ((lambda (G14375) ((lambda (G14377) (if G14377 (apply (lambda () (cons (car G14361) (G14359 (cdr G14361)))) G14377) (G12452 '#f '"invalid syntax" G14375))) (G12219 G14375 '_))) G14371))) (G12219 G14371 '(#(scheme-id quote) ())))) (car G14361)))))) G14359) G14353)))) (set! G14202 (lambda (G14303) ((lambda (G14305) ((lambda (G14307) ((lambda (G14309) (if G14309 (apply (lambda (G14311) (list (G12105 'quote) (list->vector G14311))) G14309) ((lambda (G14313) ((lambda (G14315) (if G14315 (apply (lambda () ((letrec ((G14317 (lambda (G14319 G14320) ((lambda (G14323) ((lambda (G14325) (if G14325 (apply (lambda (G14327) (G14320 (map (lambda (G14329) (list (G12105 'quote) G14329)) G14327))) G14325) ((lambda (G14331) ((lambda (G14333) (if G14333 (apply (lambda (G14335) (G14320 G14335)) G14333) ((lambda (G14337) ((lambda (G14339) (if G14339 (apply (lambda (G14341 G14342) (G14317 G14342 (lambda (G14345) (G14320 (cons G14341 G14345))))) G14339) ((lambda (G14347) ((lambda (G14349) (if G14349 (apply (lambda () (list (G12105 'list->vector) G14305)) G14349) (G12452 '#f '"invalid syntax" G14347))) (G12219 G14347 '_))) G14337))) (G12219 G14337 '(#(scheme-id cons) any any)))) G14331))) (G12219 G14331 '(#(scheme-id list) . each-any)))) G14323))) (G12219 G14323 '(#(scheme-id quote) each-any)))) G14319)))) G14317) G14303 (lambda (G14351) (cons* (G12105 'vector) G14351)))) G14315) (G12452 '#f '"invalid syntax" G14313))) (G12219 G14313 '_))) G14307))) (G12219 G14307 '(#(scheme-id quote) each-any)))) G14305)) G14303))) (set! G14204 (lambda (G14269 G14270) ((lambda (G14273) ((lambda (G14275) (if G14275 (apply (lambda (G14277 G14278) ((lambda (G14281) ((lambda (G14283) (if G14283 (apply (lambda (G14285) (if (= G14270 '0) (G14196 G14285 (G14204 G14278 G14270)) (G14198 (G14198 (G14155 'unquote) (G14206 G14285 (- G14270 '1))) (G14204 G14278 G14270)))) G14283) ((lambda (G14287) ((lambda (G14289) (if G14289 (apply (lambda (G14291) (if (= G14270 '0) (G14200 G14291 (G14204 G14278 G14270)) (G14198 (G14198 (G14155 'unquote-splicing) (G14206 G14291 (- G14270 '1))) (G14204 G14278 G14270)))) G14289) ((lambda (G14293) ((lambda (G14295) (if G14295 (apply (lambda (G14297) (G14198 (G14206 G14297 G14270) (G14204 G14278 G14270))) G14295) (G12452 '#f '"invalid syntax" G14293))) (G12219 G14293 'any))) G14287))) (G12219 G14287 '(#(scheme-id unquote-splicing) . each-any)))) G14281))) (G12219 G14281 '(#(scheme-id unquote) . each-any)))) G14277)) G14275) ((lambda (G14299) ((lambda (G14301) (if G14301 (apply (lambda () (list (G12105 'quote) '())) G14301) (G12452 '#f '"invalid syntax" G14299))) (G12219 G14299 '()))) G14273))) (G12219 G14273 '(any . any)))) G14269))) (set! G14206 (lambda (G14215 G14216) ((lambda (G14219) ((lambda (G14221) (if G14221 (apply (lambda (G14223) (if (= G14216 '0) G14223 (G14198 (G14155 'unquote) (G14206 (list G14223) (- G14216 '1))))) G14221) ((lambda (G14225) ((lambda (G14227) (if G14227 (apply (lambda (G14229 G14230) (if (= G14216 '0) (G14196 G14229 (G14206 G14230 G14216)) (G14198 (G14198 (G14155 'unquote) (G14206 G14229 (- G14216 '1))) (G14206 G14230 G14216)))) G14227) ((lambda (G14233) ((lambda (G14235) (if G14235 (apply (lambda (G14237 G14238) (if (= G14216 '0) (G14200 G14237 (G14206 G14238 G14216)) (G14198 (G14198 (G14155 'unquote-splicing) (G14206 G14237 (- G14216 '1))) (G14206 G14238 G14216)))) G14235) ((lambda (G14241) ((lambda (G14243) (if G14243 (apply (lambda (G14245) (G14198 (G14155 'quasiquote) (G14206 (list G14245) (+ G14216 '1)))) G14243) ((lambda (G14247) ((lambda (G14249) (if G14249 (apply (lambda (G14251 G14252) (G14198 (G14206 G14251 G14216) (G14206 G14252 G14216))) G14249) ((lambda (G14255) ((lambda (G14257) (if (if G14257 (begin '#f (apply (lambda (G14259) (not (G11584 G14259))) G14257)) '#f) (apply (lambda (G14261) (G14202 (G14204 G14261 G14216))) G14257) ((lambda (G14263) ((lambda (G14265) (if G14265 (apply (lambda (G14267) (list (G12105 'quote) G14267)) G14265) (G12452 '#f '"invalid syntax" G14263))) (G12219 G14263 'any))) G14255))) (G12219 G14255 '#(vector each-any)))) G14247))) (G12219 G14247 '(any . any)))) G14241))) (G12219 G14241 '(#(scheme-id quasiquote) any)))) G14233))) (G12219 G14233 '((#(scheme-id unquote-splicing) . each-any) . any)))) G14225))) (G12219 G14225 '((#(scheme-id unquote) . each-any) . any)))) G14219))) (G12219 G14219 '(#(scheme-id unquote) any)))) G14215))) (lambda (G14207) ((lambda (G14209) ((lambda (G14211) (if G14211 (apply (lambda (G14213) (G14206 G14213 '0)) G14211) (G12452 '#f '"invalid syntax" G14209))) (G12219 G14209 '(_ any)))) G14207)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G12203 ((lambda () ((lambda (G14428) (begin (set! G14428 (lambda (G14452 G14453) ((lambda (G14456) ((lambda (G14458) (if G14458 (apply (lambda (G14460) (if (= G14453 '0) ((lambda (G14462) (values (list G14462) (list G14460) G14462)) (gensym)) (call-with-values (lambda () (G14428 G14460 (- G14453 '1))) (lambda (G14467 G14468 G14469) ((lambda (G14473 G14474 G14475) (values G14475 G14474 (list 'unsyntax G14473))) G14469 G14468 G14467))))) G14458) ((lambda (G14479) ((lambda (G14481) (if (if G14481 (begin '#f (apply (lambda () (= G14453 '0)) G14481)) '#f) (apply (lambda () (G12452 '#f '"incorrect use of unsyntax" G14452)) G14481) ((lambda (G14483) ((lambda (G14485) (if G14485 (apply (lambda (G14487 G14488) (call-with-values (lambda () (G14428 G14488 G14453)) (lambda (G14494 G14495 G14496) ((lambda (G14500 G14501 G14502) (if (= G14453 '0) ((lambda (G14506) (values (cons (cons G14506 '(...)) G14502) (cons G14487 G14501) (cons G14506 (cons '... G14500)))) (gensym)) (call-with-values (lambda () (G14428 G14487 (- G14453 '1))) (lambda (G14511 G14512 G14513) ((lambda (G14517 G14518 G14519) (values (append G14519 G14502) (append G14518 G14501) (cons (list 'unsyntax-splicing G14517) G14500))) G14513 G14512 G14511))))) G14496 G14495 G14494)))) G14485) ((lambda (G14523) ((lambda (G14525) (if (if G14525 (begin '#f (apply (lambda () (= G14453 '0)) G14525)) '#f) (apply (lambda () (G12452 '#f '"incorrect use of unsyntax-splicing" G14452)) G14525) ((lambda (G14527) ((lambda (G14529) (if G14529 (apply (lambda (G14531) (call-with-values (lambda () (G14428 G14531 (+ G14453 '1))) (lambda (G14536 G14537 G14538) ((lambda (G14542 G14543 G14544) (values G14544 G14543 (list 'quasisyntax G14542))) G14538 G14537 G14536)))) G14529) ((lambda (G14548) ((lambda (G14550) (if G14550 (apply (lambda (G14552 G14553) (call-with-values (lambda () (G14428 G14552 G14453)) (lambda (G14562 G14563 G14564) (call-with-values (lambda () (G14428 G14553 G14453)) (lambda (G14568 G14569 G14570) ((lambda (G14574 G14575 G14576 G14577 G14578 G14579) (values (append G14576 G14579) (append G14575 G14578) (cons G14577 G14574))) G14570 G14569 G14568 G14564 G14563 G14562)))))) G14550) ((lambda (G14586) ((lambda (G14588) (if (if G14588 (begin '#f (apply (lambda (G14590) (not (G11584 G14452))) G14588)) '#f) (apply (lambda (G14592) (call-with-values (lambda () ((letrec ((G14597 (lambda (G14599) (if (null? G14599) (values '() '() '()) (call-with-values (lambda () (G14428 (car G14599) G14453)) (lambda (G14604 G14605 G14606) ((lambda (G14610 G14611 G14612) (call-with-values (lambda () (G14597 (cdr G14599))) (lambda (G14619 G14620 G14621) ((lambda (G14625 G14626 G14627) (values (append G14612 G14627) (append G14611 G14626) (cons G14610 G14625))) G14621 G14620 G14619)))) G14606 G14605 G14604))))))) G14597) G14592)) (lambda (G14631 G14632 G14633) ((lambda (G14637 G14638 G14639) (values G14639 G14638 (list->vector G14637))) G14633 G14632 G14631)))) G14588) ((lambda (G14643) ((lambda (G14645) (if G14645 (apply (lambda () (values '() '() G14452)) G14645) (G12452 '#f '"invalid syntax" G14643))) (G12219 G14643 '_))) G14586))) (G12219 G14586 '#(vector each-any)))) G14548))) (G12219 G14548 '(any . any)))) G14527))) (G12219 G14527 '(#(scheme-id quasisyntax) any)))) G14523))) (G12219 G14523 '#(scheme-id unsyntax-splicing)))) G14483))) (G12219 G14483 '((#(scheme-id unsyntax-splicing) any) . any)))) G14479))) (G12219 G14479 '#(scheme-id unsyntax)))) G14456))) (G12219 G14456 '(#(scheme-id unsyntax) any)))) G14452))) (lambda (G14429) ((lambda (G14431) ((lambda (G14433) (if G14433 (apply (lambda (G14435) (call-with-values (lambda () (G14428 G14435 '0)) (lambda (G14440 G14441 G14442) ((lambda (G14446 G14447 G14448) (G12145 (list 'syntax-case (cons 'list G14447) '() (list G14448 (list 'syntax G14446))))) G14442 G14441 G14440)))) G14433) (G12452 '#f '"invalid syntax" G14431))) (G12219 G14431 '(_ any)))) G14429)))) '#f)))) (set! G12205 (lambda (G14647) (G12452 '#f '"define-struct not supported" G14647))) (set! G12207 (lambda (G14649) ((lambda (G14652 G14654 G14656 G14658 G14660 G14662 G14664 G14666 G14668 G14670 G14672 G14674 G14676 G14678 G14680 G14682 G14684) (begin (set! G14652 (lambda (G15155 . G15157) (G12456 G15155 (string->symbol (apply string-append (map (lambda (G15159) (if (symbol? G15159) (symbol->string G15159) (if (string? G15159) G15159 (assertion-violation 'define-record-type '"BUG")))) G15157)))))) (set! G14654 (lambda (G15137) ((lambda (G15139) ((lambda (G15141) (if G15141 (apply (lambda (G15143 G15144 G15145) G15143) G15141) ((lambda (G15149) ((lambda (G15151) (if G15151 (apply (lambda (G15153) G15153) G15151) (G12452 '#f '"invalid syntax" G15149))) (G12219 G15149 'any))) G15139))) (G12219 G15139 '(any any any)))) G15137))) (set! G14656 (lambda (G15117) ((lambda (G15119) ((lambda (G15121) (if G15121 (apply (lambda (G15123 G15124 G15125) G15124) G15121) ((lambda (G15129) ((lambda (G15131) (if (if G15131 (begin '#f (apply (lambda (G15133) (G11640 G15133)) G15131)) '#f) (apply (lambda (G15135) (G14652 G15135 '"make-" (G11662 G15135))) G15131) (G12452 '#f '"invalid syntax" G15129))) (G12219 G15129 'any))) G15119))) (G12219 G15119 '(any any any)))) G15117))) (set! G14658 (lambda (G15097) ((lambda (G15099) ((lambda (G15101) (if G15101 (apply (lambda (G15103 G15104 G15105) G15105) G15101) ((lambda (G15109) ((lambda (G15111) (if (if G15111 (begin '#f (apply (lambda (G15113) (G11640 G15113)) G15111)) '#f) (apply (lambda (G15115) (G14652 G15115 (G11662 G15115) '"?")) G15111) (G12452 '#f '"invalid syntax" G15109))) (G12219 G15109 'any))) G15099))) (G12219 G15099 '(any any any)))) G15097))) (set! G14660 (lambda (G15079 G15080) ((lambda (G15083) ((lambda (G15085) (if G15085 (apply (lambda () '#f) G15085) ((lambda (G15087) ((lambda (G15089) (if G15089 (apply (lambda (G15091 G15092 G15093) (if (G11648 (G12145 G15079) G15091) (cons G15091 G15092) (G14660 G15079 G15093))) G15089) (G12452 '#f '"invalid syntax" G15087))) (G12219 G15087 '((any . any) . any)))) G15083))) (G12219 G15083 '()))) G15080))) (set! G14662 (lambda (G14997 G14998 G14999) ((lambda (G15004) (begin (set! G15004 (lambda (G15053) (list->vector (map (lambda (G15055) ((lambda (G15057) ((lambda (G15059) (if G15059 (apply (lambda (G15061 G15062) (list 'mutable G15061)) G15059) ((lambda (G15065) ((lambda (G15067) (if G15067 (apply (lambda (G15069 G15070) (list 'immutable G15069)) G15067) ((lambda (G15073) ((lambda (G15075) (if G15075 (apply (lambda (G15077) (list 'immutable G15077)) G15075) (G12452 '#f '"invalid syntax" G15073))) (G12219 G15073 'any))) G15065))) (G12219 G15065 '(#(scheme-id immutable) any . any)))) G15057))) (G12219 G15057 '(#(scheme-id mutable) any . any)))) G15055)) G15053)))) ((lambda (G15005 G15006 G15007 G15008) (G12145 (list 'make-record-type-descriptor (list 'quote G14997) G14999 G15005 G15006 G15007 G15008))) ((lambda (G15013) ((lambda (G15015) (if G15015 (apply (lambda () (list 'quote (gensym))) G15015) ((lambda (G15017) ((lambda (G15019) (if G15019 (apply (lambda (G15021) (list 'quote G15021)) G15019) ((lambda (G15023) ((lambda (G15025) (if G15025 (apply (lambda () '#f) G15025) (G12452 '#f '"invalid syntax" G15023))) (G12219 G15023 '_))) G15017))) (G12219 G15017 '(_ any)))) G15013))) (G12219 G15013 '(_)))) (G14660 'nongenerative G14998)) ((lambda (G15027) ((lambda (G15029) (if G15029 (apply (lambda () '#t) G15029) ((lambda (G15031) ((lambda (G15033) (if G15033 (apply (lambda () '#f) G15033) (G12452 '#f '"invalid syntax" G15031))) (G12219 G15031 '_))) G15027))) (G12219 G15027 '(_ #(atom #t))))) (G14660 'sealed G14998)) ((lambda (G15035) ((lambda (G15037) (if G15037 (apply (lambda () '#t) G15037) ((lambda (G15039) ((lambda (G15041) (if G15041 (apply (lambda () '#f) G15041) (G12452 '#f '"invalid syntax" G15039))) (G12219 G15039 '_))) G15035))) (G12219 G15035 '(_ #(atom #t))))) (G14660 'opaque G14998)) ((lambda (G15043) ((lambda (G15045) (if G15045 (apply (lambda (G15047) (list 'quote (G15004 G15047))) G15045) ((lambda (G15049) ((lambda (G15051) (if G15051 (apply (lambda () ''#()) G15051) (G12452 '#f '"invalid syntax" G15049))) (G12219 G15049 '_))) G15043))) (G12219 G15043 '(_ . each-any)))) (G14660 'fields G14998))))) '#f))) (set! G14664 (lambda (G14973) ((lambda (G14975) ((lambda (G14977) (if G14977 (apply (lambda (G14979) (list 'record-type-descriptor G14979)) G14977) ((lambda (G14981) ((lambda (G14983) (if G14983 (apply (lambda () ((lambda (G14985) ((lambda (G14987) (if G14987 (apply (lambda (G14989 G14990) G14989) G14987) ((lambda (G14993) ((lambda (G14995) (if G14995 (apply (lambda () '#f) G14995) (G12452 '#f '"invalid syntax" G14993))) (G12219 G14993 '#(atom #f)))) G14985))) (G12219 G14985 '(_ any any)))) (G14660 'parent-rtd G14973))) G14983) (G12452 '#f '"invalid syntax" G14981))) (G12219 G14981 '#(atom #f)))) G14975))) (G12219 G14975 '(_ any)))) (G14660 'parent G14973)))) (set! G14666 (lambda (G14949) ((lambda (G14951) ((lambda (G14953) (if G14953 (apply (lambda (G14955) (list 'record-constructor-descriptor G14955)) G14953) ((lambda (G14957) ((lambda (G14959) (if G14959 (apply (lambda () ((lambda (G14961) ((lambda (G14963) (if G14963 (apply (lambda (G14965 G14966) G14966) G14963) ((lambda (G14969) ((lambda (G14971) (if G14971 (apply (lambda () '#f) G14971) (G12452 '#f '"invalid syntax" G14969))) (G12219 G14969 '#(atom #f)))) G14961))) (G12219 G14961 '(_ any any)))) (G14660 'parent-rtd G14949))) G14959) (G12452 '#f '"invalid syntax" G14957))) (G12219 G14957 '#(atom #f)))) G14951))) (G12219 G14951 '(_ any)))) (G14660 'parent G14949)))) (set! G14668 (lambda (G14941 G14942 G14943 G14944) (list 'make-record-constructor-descriptor G14942 G14944 G14943))) (set! G14670 (lambda (G14929) ((lambda (G14931) ((lambda (G14933) (if G14933 (apply (lambda (G14935) G14935) G14933) ((lambda (G14937) ((lambda (G14939) (if G14939 (apply (lambda () '#f) G14939) (G12452 '#f '"invalid syntax" G14937))) (G12219 G14937 '_))) G14931))) (G12219 G14931 '(_ any)))) (G14660 'protocol G14929)))) (set! G14672 (lambda (G14911) ((lambda (G14913) ((lambda (G14915) (if G14915 (apply (lambda () '()) G14915) ((lambda (G14917) ((lambda (G14919) (if G14919 (apply (lambda (G14921) G14921) G14919) ((lambda (G14923) ((lambda (G14925) (if G14925 (apply (lambda (G14927) (G14672 G14927)) G14925) (G12452 '#f '"invalid syntax" G14923))) (G12219 G14923 '(_ . any)))) G14917))) (G12219 G14917 '((#(scheme-id fields) . each-any) . _)))) G14913))) (G12219 G14913 '()))) G14911))) (set! G14674 (lambda (G14887) ((letrec ((G14889 (lambda (G14891 G14892) ((lambda (G14895) ((lambda (G14897) (if G14897 (apply (lambda () '()) G14897) ((lambda (G14899) ((lambda (G14901) (if G14901 (apply (lambda (G14903) (cons G14892 (G14889 G14903 (+ G14892 '1)))) G14901) ((lambda (G14905) ((lambda (G14907) (if G14907 (apply (lambda (G14909) (G14889 G14909 (+ G14892 '1))) G14907) (G12452 '#f '"invalid syntax" G14905))) (G12219 G14905 '(_ . any)))) G14899))) (G12219 G14899 '((#(scheme-id mutable) . _) . any)))) G14895))) (G12219 G14895 '()))) G14891)))) G14889) G14887 '0))) (set! G14676 (lambda (G14845 G14846) ((lambda (G14850) (begin (set! G14850 (lambda (G14885) (G12456 G14845 (string->symbol (string-append (symbol->string (G12458 G14845)) '"-" (symbol->string (G12458 G14885)) '"-set!"))))) ((letrec ((G14851 (lambda (G14853) ((lambda (G14855) ((lambda (G14857) (if G14857 (apply (lambda () '()) G14857) ((lambda (G14859) ((lambda (G14861) (if G14861 (apply (lambda (G14863 G14864 G14865 G14866) (cons G14865 (G14851 G14866))) G14861) ((lambda (G14871) ((lambda (G14873) (if G14873 (apply (lambda (G14875 G14876) (cons (G14850 G14875) (G14851 G14876))) G14873) ((lambda (G14879) ((lambda (G14881) (if G14881 (apply (lambda (G14883) (G14851 G14883)) G14881) (G12452 '#f '"invalid syntax" G14879))) (G12219 G14879 '(_ . any)))) G14871))) (G12219 G14871 '((#(scheme-id mutable) any) . any)))) G14859))) (G12219 G14859 '((#(scheme-id mutable) any any any) . any)))) G14855))) (G12219 G14855 '()))) G14853)))) G14851) G14846))) '#f))) (set! G14678 (lambda (G14777 G14778) ((lambda (G14782) (begin (set! G14782 (lambda (G14843) (G12456 G14777 (string->symbol (string-append (symbol->string (G12458 G14777)) '"-" (symbol->string (G12458 G14843))))))) (map (lambda (G14783) ((lambda (G14785) ((lambda (G14787) (if (if G14787 (begin '#f (apply (lambda (G14789 G14790 G14791) (G11640 G14790)) G14787)) '#f) (apply (lambda (G14795 G14796 G14797) G14796) G14787) ((lambda (G14801) ((lambda (G14803) (if (if G14803 (begin '#f (apply (lambda (G14805 G14806) (G11640 G14806)) G14803)) '#f) (apply (lambda (G14809 G14810) G14810) G14803) ((lambda (G14813) ((lambda (G14815) (if (if G14815 (begin '#f (apply (lambda (G14817) (G11640 G14817)) G14815)) '#f) (apply (lambda (G14819) (G14782 G14819)) G14815) ((lambda (G14821) ((lambda (G14823) (if (if G14823 (begin '#f (apply (lambda (G14825) (G11640 G14825)) G14823)) '#f) (apply (lambda (G14827) (G14782 G14827)) G14823) ((lambda (G14829) ((lambda (G14831) (if (if G14831 (begin '#f (apply (lambda (G14833) (G11640 G14833)) G14831)) '#f) (apply (lambda (G14835) (G14782 G14835)) G14831) ((lambda (G14837) ((lambda (G14839) (if G14839 (apply (lambda (G14841) (G12452 '#f '"invalid field spec" G14783)) G14839) (G12452 '#f '"invalid syntax" G14837))) (G12219 G14837 'any))) G14829))) (G12219 G14829 'any))) G14821))) (G12219 G14821 '(#(scheme-id immutable) any)))) G14813))) (G12219 G14813 '(#(scheme-id mutable) any)))) G14801))) (G12219 G14801 '(#(scheme-id immutable) any any)))) G14785))) (G12219 G14785 '(#(scheme-id mutable) any any any)))) G14783)) G14778))) '#f))) (set! G14680 (lambda (G14769) ((letrec ((G14771 (lambda (G14773 G14774) (if (null? G14773) '() (cons G14774 (G14771 (cdr G14773) (+ G14774 '1))))))) G14771) G14769 '0))) (set! G14682 (lambda (G14729 G14730) ((lambda (G14733) ((lambda (G14735) ((lambda (G14737) ((lambda (G14739) ((lambda (G14741) ((lambda (G14743) ((lambda (G14745) ((lambda (G14747) ((lambda (G14749) ((lambda (G14751) ((lambda (G14753) ((lambda (G14755) ((lambda (G14757) ((lambda (G14759) ((lambda () (G12145 (cons 'begin (cons (list 'define G14735 G14755) (cons (list 'define G14739 G14759) (cons (list 'define G14737 G14757) (cons (list 'define-syntax G14733 (list 'list ''$rtd (list 'syntax G14735) (list 'syntax G14737))) (cons (list 'define G14753 (list 'record-predicate G14735)) (cons (list 'define G14741 (list 'record-constructor G14737)) (append (map (lambda (G14761 G14762) (list 'define G14761 (list 'record-accessor G14735 G14762))) G14747 G14745) (map (lambda (G14765 G14766) (list 'define G14765 (list 'record-mutator G14735 G14766))) G14749 G14751))))))))))))) (G14670 G14730))) (G14668 G14730 G14735 G14739 (G14666 G14730)))) (G14662 G14733 G14730 (G14664 G14730)))) (G14658 G14729))) (G14674 G14743))) (G14676 G14733 G14743))) (G14678 G14733 G14743))) (G14680 G14743))) (G14672 G14730))) (G14656 G14729))) (gensym))) (gensym))) (gensym))) (G14654 G14729)))) (set! G14684 (lambda (G14693 G14694) ((lambda (G14698 G14700) (begin (set! G14698 (map G12145 '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G14700 (lambda (G14723 G14724) (if (pair? G14724) (begin '#f ((lambda (G14727) (if G14727 G14727 (begin '#f (G14700 G14723 (cdr G14724))))) (G11648 G14723 (car G14724)))) '#f))) ((letrec ((G14701 (lambda (G14703 G14704) (if (null? G14703) (void) ((lambda (G14707) ((lambda (G14709) (if G14709 (apply (lambda (G14711 G14712) (if ((lambda (G14715) (if G14715 G14715 (begin '#f (not (G14700 G14711 G14698))))) (not (G11640 G14711))) (G12452 '#f '"not a valid define-record-type keyword" G14711) (if (G11654 G14711 G14704) (G12452 '#f '"duplicate use of keyword " G14693 G14711) (G14701 (cdr G14703) (cons G14711 G14704))))) G14709) ((lambda (G14717) ((lambda (G14719) (if G14719 (apply (lambda (G14721) (G12452 '#f '"malformed define-record-type clause" G14721)) G14719) (G12452 '#f '"invalid syntax" G14717))) (G12219 G14717 'any))) G14707))) (G12219 G14707 '(any . any)))) (car G14703)))))) G14701) G14694 '()))) '#f '#f))) ((lambda (G14685) ((lambda (G14687) (if G14687 (apply (lambda (G14689 G14690) (begin (G14684 G14649 G14690) (G14682 G14689 G14690))) G14687) (G12452 '#f '"invalid syntax" G14685))) (G12219 G14685 '(_ any . each-any)))) G14649))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12209 (lambda (G15161) ((lambda (G15164) (begin (set! G15164 (lambda (G15209 G15210) (G12456 G15209 (string->symbol (string-append (symbol->string (G12458 G15209)) G15210))))) ((lambda (G15165) ((lambda (G15167) (if (if G15167 (begin '#f (apply (lambda (G15169 G15170 G15171 G15172 G15173 G15174 G15175) (if (G11640 G15170) (if (G11640 G15171) (if (G11640 G15172) (if (G11640 G15173) (if (for-all G11640 G15174) (begin '#f (for-all G11640 G15175)) '#f) '#f) '#f) '#f) '#f)) G15167)) '#f) (apply (lambda (G15183 G15184 G15185 G15186 G15187 G15188 G15189) ((lambda (G15197) (G12145 (cons 'begin (cons (cons 'define-record-type (cons (list G15184 G15186 (gensym)) (cons (list 'parent G15185) (cons (cons 'fields (map (lambda (G15199 G15200) (list 'immutable G15199 G15200)) G15188 G15197)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G15187 (list 'condition-predicate (list 'record-type-descriptor G15184))) (map (lambda (G15203 G15204) (list 'define G15203 (list 'condition-accessor (list 'record-type-descriptor G15184) G15204))) G15189 G15197)))))) (map (lambda (G15207) (gensym)) G15189))) G15167) (G12452 '#f '"invalid syntax" G15165))) (G12219 G15165 '(any any any any any . #(each (any any)))))) G15161))) '#f))) (set! G12211 (lambda (G15213) (G12452 '#f '"incorrect usage of auxiliary keyword" G15213))) (set! G12213 (lambda (G15215 G15216 G15217) ((lambda (G15221) ((lambda (G15223) (if G15223 (apply (lambda (G15225 G15226) (G12277 (cons G15225 G15226) G15216 G15217)) G15223) ((lambda (G15229) ((lambda (G15231) (if G15231 (apply (lambda (G15233 G15234 G15235 G15236) ((lambda (G15241 G15242 G15243 G15244) (G11484 '#f (append G15241 G15242) (append (G12251 G15233 G15216 G15217) (G12251 G15234 G15216 G15217)) (G11484 '#f (list G15244) (list (G11482 '#f '() (G11485 '#f (map (lambda (G15249 G15250 G15251) (G11484 '#f (list G15249) (list (list G15250)) (G11485 '#f (list (list G15250 G15251) (list 'set! G15251 G15249))))) G15243 G15241 G15242)))) (list '(primitive dynamic-wind) G15244 (G11482 '#f '() (G12277 (cons G15235 G15236) G15216 G15217)) G15244)))) (map (lambda (G15255) (G11514 'lhs)) G15233) (map (lambda (G15257) (G11514 'rhs)) G15233) (map (lambda (G15259) (G11514 't)) G15233) (G11514 'swap))) G15231) (G12452 '#f '"invalid syntax" G15229))) (G12219 G15229 '(_ #(each (any any)) any . each-any)))) G15221))) (G12219 G15221 '(_ () any . each-any)))) G15215))) (set! G12215 (lambda (G15261 G15262 G15263) ((lambda (G15267) ((lambda (G15269) (if G15269 (apply (lambda (G15271 G15272) (cons 'foreign-call (cons (G12255 G15271 G15262 G15263) (G12251 G15272 G15262 G15263)))) G15269) (G12452 '#f '"invalid syntax" G15267))) (G12219 G15267 '(_ any . each-any)))) G15261))) (set! G12217 (lambda (G15275 G15276) ((lambda (G15280 G15282) (begin (set! G15280 (lambda (G15425 G15426 G15427) (if (null? G15425) (values '() G15427) (call-with-values (lambda () (G15280 (cdr G15425) G15426 G15427)) (lambda (G15433 G15434) ((lambda (G15437 G15438) (call-with-values (lambda () (G15282 (car G15425) G15426 G15437)) (lambda (G15443 G15444) ((lambda (G15447 G15448) (values (cons G15448 G15438) G15447)) G15444 G15443)))) G15434 G15433)))))) (set! G15282 (lambda (G15283 G15284 G15285) ((lambda (G15289) ((lambda (G15291) (if (if G15291 (begin '#f (apply (lambda (G15293) (G11640 G15293)) G15291)) '#f) (apply (lambda (G15295) (if (G11654 G15283 G15276) (values (vector 'free-id G15283) G15285) (if (G11648 G15283 (G12105 '_)) (values '_ G15285) (values 'any (cons (cons G15283 G15284) G15285))))) G15291) ((lambda (G15297) ((lambda (G15299) (if (if G15299 (begin '#f (apply (lambda (G15301 G15302) (G12221 G15302)) G15299)) '#f) (apply (lambda (G15305 G15306) (call-with-values (lambda () (G15282 G15305 (+ G15284 '1) G15285)) (lambda (G15311 G15312) ((lambda (G15315 G15316) (values (if (eq? G15316 'any) 'each-any (vector 'each G15316)) G15315)) G15312 G15311)))) G15299) ((lambda (G15319) ((lambda (G15321) (if (if G15321 (begin '#f (apply (lambda (G15323 G15324 G15325 G15326) (G12221 G15324)) G15321)) '#f) (apply (lambda (G15331 G15332 G15333 G15334) (call-with-values (lambda () (G15282 G15334 G15284 G15285)) (lambda (G15341 G15342) ((lambda (G15345 G15346) (call-with-values (lambda () (G15280 G15333 G15284 G15345)) (lambda (G15351 G15352) ((lambda (G15355 G15356) (call-with-values (lambda () (G15282 G15331 (+ G15284 '1) G15355)) (lambda (G15361 G15362) ((lambda (G15365 G15366) (values (vector 'each+ G15366 (reverse G15356) G15346) G15365)) G15362 G15361)))) G15352 G15351)))) G15342 G15341)))) G15321) ((lambda (G15369) ((lambda (G15371) (if G15371 (apply (lambda (G15373 G15374) (call-with-values (lambda () (G15282 G15374 G15284 G15285)) (lambda (G15379 G15380) ((lambda (G15383 G15384) (call-with-values (lambda () (G15282 G15373 G15284 G15383)) (lambda (G15389 G15390) ((lambda (G15393 G15394) (values (cons G15394 G15384) G15393)) G15390 G15389)))) G15380 G15379)))) G15371) ((lambda (G15397) ((lambda (G15399) (if G15399 (apply (lambda () (values '() G15285)) G15399) ((lambda (G15401) ((lambda (G15403) (if (if G15403 (begin '#f (apply (lambda (G15405) (not (G11584 G15405))) G15403)) '#f) (apply (lambda (G15407) (call-with-values (lambda () (G15282 G15407 G15284 G15285)) (lambda (G15411 G15412) ((lambda (G15415 G15416) (values (vector 'vector G15416) G15415)) G15412 G15411)))) G15403) ((lambda (G15419) ((lambda (G15421) (if G15421 (apply (lambda (G15423) (values (vector 'atom (G11662 G15423)) G15285)) G15421) (G12452 '#f '"invalid syntax" G15419))) (G12219 G15419 'any))) G15401))) (G12219 G15401 '#(vector each-any)))) G15397))) (G12219 G15397 '()))) G15369))) (G12219 G15369 '(any . any)))) G15319))) (G12219 G15319 '(any any . #(each+ any () any))))) G15297))) (G12219 G15297 '(any any)))) G15289))) (G12219 G15289 'any))) G15283))) (G15282 G15275 '0 '()))) '#f '#f))) (set! G12219 (lambda (G15451 G15452) ((lambda (G15456 G15458 G15460 G15462 G15464 G15466 G15468 G15470) (begin (set! G15456 (lambda (G15651 G15652 G15653 G15654) (if (if (null? G15652) (if (null? G15653) (begin '#f (null? G15654)) '#f) '#f) G15651 (G11616 G15651 G15652 G15653 G15654)))) (set! G15458 (lambda (G15622 G15623 G15624 G15625 G15626) (if (pair? G15622) ((lambda (G15632) (if G15632 (begin '#f ((lambda (G15634) (if G15634 (begin '#f (cons G15632 G15634)) '#f)) (G15458 (cdr G15622) G15623 G15624 G15625 G15626))) '#f)) (G15470 (car G15622) G15623 G15624 G15625 G15626 '())) (if (null? G15622) '() (if (G11584 G15622) (if (not (G11512 G15624)) (begin '#f (call-with-values (lambda () (G11614 G15624 G15625 G15626 G15622)) (lambda (G15639 G15640 G15641) ((lambda (G15645 G15646 G15647) (G15458 (G11588 G15622) G15623 G15647 G15646 G15645)) G15641 G15640 G15639)))) '#f) (if (G10448 G15622) (G15458 (G10450 G15622) G15623 G15624 G15625 G15626) '#f)))))) (set! G15460 (lambda (G15564 G15565 G15566 G15567 G15568 G15569 G15570 G15571) ((letrec ((G15580 (lambda (G15582 G15583 G15584 G15585) (if (pair? G15582) (call-with-values (lambda () (G15580 (cdr G15582) G15583 G15584 G15585)) (lambda (G15593 G15594 G15595) ((lambda (G15599 G15600 G15601) (if G15599 (if (null? G15600) ((lambda (G15605) (if G15605 (values (cons G15605 G15601) G15600 G15599) (values '#f '#f '#f))) (G15470 (car G15582) G15565 G15583 G15584 G15585 '())) (values '() (cdr G15600) (G15470 (car G15582) (car G15600) G15583 G15584 G15585 G15599))) (values '#f '#f '#f))) G15595 G15594 G15593))) (if (G11584 G15582) (if (G11512 G15583) (values '() G15566 (G15470 G15582 G15567 G15583 G15584 G15585 G15571)) (call-with-values (lambda () (G11614 G15583 G15584 G15585 G15582)) (lambda (G15610 G15611 G15612) ((lambda (G15616 G15617 G15618) (G15580 (G11588 G15582) G15618 G15617 G15616)) G15612 G15611 G15610)))) (if (G10448 G15582) (G15580 (G10450 G15582) G15583 G15584 G15585) (values '() G15566 (G15470 G15582 G15567 G15583 G15584 G15585 G15571)))))))) G15580) G15564 G15568 G15569 G15570))) (set! G15462 (lambda (G15539 G15540 G15541 G15542) (if (pair? G15539) ((lambda (G15547) (if G15547 (begin '#f (cons (G15456 (car G15539) G15540 G15541 G15542) G15547)) '#f)) (G15462 (cdr G15539) G15540 G15541 G15542)) (if (null? G15539) '() (if (G11584 G15539) (if (not (G11512 G15540)) (begin '#f (call-with-values (lambda () (G11614 G15540 G15541 G15542 G15539)) (lambda (G15552 G15553 G15554) ((lambda (G15558 G15559 G15560) (G15462 (G11588 G15539) G15560 G15559 G15558)) G15554 G15553 G15552)))) '#f) (if (G10448 G15539) (G15462 (G10450 G15539) G15540 G15541 G15542) '#f)))))) (set! G15464 (lambda (G15534 G15535) (if (null? G15534) G15535 (if (eq? G15534 '_) G15535 (if (eq? G15534 'any) (cons '() G15535) (if (pair? G15534) (G15464 (car G15534) (G15464 (cdr G15534) G15535)) (if (eq? G15534 'each-any) (cons '() G15535) ((lambda (G15538) (if (eqv? G15538 'each) (G15464 (vector-ref G15534 '1) G15535) (if (eqv? G15538 'each+) (G15464 (vector-ref G15534 '1) (G15464 (reverse (vector-ref G15534 '2)) (G15464 (vector-ref G15534 '3) G15535))) (if (memv G15538 '(free-id atom)) G15535 (if (memv G15538 '(scheme-id atom)) G15535 (if (eqv? G15538 'vector) (G15464 (vector-ref G15534 '1) G15535) (assertion-violation 'syntax-dispatch '"invalid pattern" G15534))))))) (vector-ref G15534 '0))))))))) (set! G15466 (lambda (G15530 G15531) (if (null? (car G15530)) G15531 (cons (map car G15530) (G15466 (map cdr G15530) G15531))))) (set! G15468 (lambda (G15498 G15499 G15500 G15501 G15502 G15503) (if (null? G15499) (if (null? G15498) (begin '#f G15503) '#f) (if (pair? G15499) (if (pair? G15498) (begin '#f (G15470 (car G15498) (car G15499) G15500 G15501 G15502 (G15470 (cdr G15498) (cdr G15499) G15500 G15501 G15502 G15503))) '#f) (if (eq? G15499 'each-any) ((lambda (G15510) (if G15510 (begin '#f (cons G15510 G15503)) '#f)) (G15462 G15498 G15500 G15501 G15502)) ((lambda (G15512) (if (eqv? G15512 'each) (if (null? G15498) (G15464 (vector-ref G15499 '1) G15503) ((lambda (G15528) (if G15528 (begin '#f (G15466 G15528 G15503)) '#f)) (G15458 G15498 (vector-ref G15499 '1) G15500 G15501 G15502))) (if (eqv? G15512 'free-id) (if (symbol? G15498) (if (G11512 G15500) (if (G11648 (G15456 G15498 G15500 G15501 G15502) (vector-ref G15499 '1)) (begin '#f G15503) '#f) '#f) '#f) (if (eqv? G15512 'scheme-id) (if (symbol? G15498) (if (G11512 G15500) (if (G11648 (G15456 G15498 G15500 G15501 G15502) (G12105 (vector-ref G15499 '1))) (begin '#f G15503) '#f) '#f) '#f) (if (eqv? G15512 'each+) (call-with-values (lambda () (G15460 G15498 (vector-ref G15499 '1) (vector-ref G15499 '2) (vector-ref G15499 '3) G15500 G15501 G15502 G15503)) (lambda (G15516 G15517 G15518) ((lambda (G15522 G15523 G15524) (if G15522 (if (null? G15523) (begin '#f (if (null? G15524) (G15464 (vector-ref G15499 '1) G15522) (G15466 G15524 G15522))) '#f) '#f)) G15518 G15517 G15516))) (if (eqv? G15512 'atom) (if (equal? (vector-ref G15499 '1) (G11660 G15498 G15500)) (begin '#f G15503) '#f) (if (eqv? G15512 'vector) (if (vector? G15498) (begin '#f (G15470 (vector->list G15498) (vector-ref G15499 '1) G15500 G15501 G15502 G15503)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G15499)))))))) (vector-ref G15499 '0))))))) (set! G15470 (lambda (G15471 G15472 G15473 G15474 G15475 G15476) (if (not G15476) '#f (if (eq? G15472 '_) G15476 (if (eq? G15472 'any) (cons (G15456 G15471 G15473 G15474 G15475) G15476) (if (G11584 G15471) (if (not (G11512 G15473)) (begin '#f (call-with-values (lambda () (G11614 G15473 G15474 G15475 G15471)) (lambda (G15486 G15487 G15488) ((lambda (G15492 G15493 G15494) (G15470 (G11588 G15471) G15472 G15494 G15493 G15492 G15476)) G15488 G15487 G15486)))) '#f) (if (G10448 G15471) (G15470 (G10450 G15471) G15472 G15473 G15474 G15475 G15476) (G15468 G15471 G15472 G15473 G15474 G15475 G15476)))))))) (G15470 G15451 G15452 '() '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12221 (lambda (G15659) (if (G11640 G15659) (begin '#f (G11648 G15659 (G12105 '...))) '#f))) (set! G12223 (lambda (G15661) (if (G11640 G15661) (begin '#f (G11648 G15661 (G12105 '_))) '#f))) (set! G12225 (lambda (G15663 G15664) (for-each (lambda (G15667) (if ((lambda (G15669) (if G15669 G15669 ((lambda (G15671) (if G15671 G15671 (begin '#f (G12223 G15667)))) (G12221 G15667)))) (not (G11640 G15667))) (G12452 '#f '"invalid literal" G15664 G15667) (void))) G15663))) (set! G12227 ((lambda () ((lambda (G15674 G15676 G15678 G15680) (begin (set! G15674 (lambda (G15785 G15786 G15787 G15788 G15789) ((lambda (G15795 G15796) ((lambda (G15799 G15800) ((lambda (G15803) (list '(primitive apply) (G11482 '#f G15800 G15803) G15787)) (G12255 (G11620 (G11569 G15795 G15799) G15786) (append (map (lambda (G15805 G15806 G15807) (cons G15805 (G11672 'syntax (cons G15806 G15807)))) G15799 G15800 (map cdr G15785)) G15788) G15789))) (map G11518 G15795) (map G11514 G15795))) (map car G15785) (map cdr G15785)))) (set! G15676 (lambda (G15773 G15774 G15775) ((letrec ((G15779 (lambda (G15781 G15782) (if (null? G15781) (G12452 '#f '"invalid syntax" G15774) (if (G11640 (car G15781)) (if (G11654 (car G15781) G15782) (G12446 (car G15781) '"duplicate " G15775) (G15779 (cdr G15781) (cons (car G15781) G15782))) (G12446 (car G15781) '"invalid " G15775)))))) G15779) G15773 '()))) (set! G15678 (lambda (G15735 G15736 G15737 G15738 G15739 G15740 G15741 G15742) (call-with-values (lambda () (G12217 G15740 G15736)) (lambda (G15753 G15754) ((lambda (G15757 G15758) (if (not (G11652 (map car G15757))) (G15676 (map car G15757) G15740 '"pattern variable") (if (not (for-all (lambda (G15761) (not (G12221 (car G15761)))) G15757)) (G12452 '#f '"misplaced ellipsis in syntax-case pattern" G15740) ((lambda (G15763) ((lambda (G15765) ((lambda (G15767) ((lambda (G15769) (list (G11482 '#f (list G15763) (list 'if G15765 G15767 G15769)) (list '(primitive syntax-dispatch) G15735 (list 'quote G15758)))) (G15680 G15735 G15736 G15737 G15738 G15739))) (G15674 G15757 G15742 G15763 G15738 G15739))) (if (eq? G15741 '#t) G15763 ((lambda (G15771) (list 'if G15763 G15771 (list 'quote '#f))) (G15674 G15757 G15741 G15763 G15738 G15739))))) (G11514 'tmp))))) G15754 G15753))))) (set! G15680 (lambda (G15701 G15702 G15703 G15704 G15705) (if (null? G15703) (list '(primitive syntax-error) G15701) ((lambda (G15711) ((lambda (G15713) (if G15713 (apply (lambda (G15715 G15716) (if (if (G11640 G15715) (if (not (G11654 G15715 G15702)) (begin '#f (not (G12221 G15715))) '#f) '#f) (if (G11648 G15715 (G12105 '_)) (G12255 G15716 G15704 G15705) ((lambda (G15719 G15720) ((lambda (G15723) (list (G11482 '#f (list G15720) G15723) G15701)) (G12255 (G11620 (G11569 (list G15715) (list G15719)) G15716) (cons (cons G15719 (G11672 'syntax (cons G15720 '0))) G15704) G15705))) (G11518 G15715) (G11514 G15715))) (G15678 G15701 G15702 (cdr G15703) G15704 G15705 G15715 '#t G15716))) G15713) ((lambda (G15725) ((lambda (G15727) (if G15727 (apply (lambda (G15729 G15730 G15731) (G15678 G15701 G15702 (cdr G15703) G15704 G15705 G15729 G15730 G15731)) G15727) (G12452 '#f '"invalid syntax" G15725))) (G12219 G15725 '(any any any)))) G15711))) (G12219 G15711 '(any any)))) (car G15703))))) (lambda (G15681 G15682 G15683) ((lambda (G15687) ((lambda (G15689) (if G15689 (apply (lambda (G15691 G15692 G15693) (begin (G12225 G15692 G15681) ((lambda (G15697) ((lambda (G15699) (list (G11482 '#f (list G15697) G15699) (G12255 G15691 G15682 G15683))) (G15680 G15697 G15692 G15693 G15682 G15683))) (G11514 'tmp)))) G15689) (G12452 '#f '"invalid syntax" G15687))) (G12219 G15687 '(_ any each-any . each-any)))) G15681)))) '#f '#f '#f '#f)))) (set! G12229 (lambda (G15811 G15812 . G15815) ((lambda (G15818) (begin (set! G15818 '...) (begin (if (list? G15812) (void) (assertion-violation G15818 '"not a list" G15812)) (if (null? G15815) (void) ((lambda (G15819) (for-each (lambda (G15821) (begin (if (list? G15821) (void) (assertion-violation G15818 '"not a list" G15821)) (if (= (length G15821) G15819) (void) (assertion-violation G15818 '"length mismatch" G15812 G15821)))) G15815)) (length G15812))) (apply map G15811 G15812 G15815)))) '#f))) (set! G12231 ((lambda () ((lambda (G15824 G15826 G15828 G15830 G15832 G15834 G15836 G15838) (begin (set! G15824 (lambda (G15937 G15938 G15939 G15940 G15941 G15942) ((lambda (G15949) ((lambda (G15951) (if (if G15951 (begin '#f (apply (lambda (G15953) (G15941 G15953)) G15951)) '#f) (apply (lambda (G15955) (G12452 '#f '"misplaced ellipsis in syntax form" G15937)) G15951) ((lambda (G15957) ((lambda (G15959) (if (if G15959 (begin '#f (apply (lambda (G15961) (G11640 G15961)) G15959)) '#f) (apply (lambda (G15963) ((lambda (G15965) ((lambda (G15967) ((lambda () (if (eq? (G11674 G15967) 'syntax) (call-with-values (lambda () ((lambda (G15971) (G15826 G15937 (car G15971) (cdr G15971) G15940)) (G11676 G15967))) (lambda (G15973 G15974) ((lambda (G15977 G15978) (values (list 'ref G15978) G15977)) G15974 G15973))) (values (list 'quote G15938) G15940))))) (G11670 G15965 G15939))) (G11666 G15938))) G15959) ((lambda (G15981) ((lambda (G15983) (if (if G15983 (begin '#f (apply (lambda (G15985 G15986) (G15941 G15985)) G15983)) '#f) (apply (lambda (G15989 G15990) (if G15942 (G12452 '#f '"misplaced ellipsis in syntax form" G15937) (G15824 G15937 G15990 G15939 G15940 (lambda (G15993) '#f) '#f))) G15983) ((lambda (G15995) ((lambda (G15997) (if (if G15997 (begin '#f (apply (lambda (G15999 G16000 G16001) (G15941 G16000)) G15997)) '#f) (apply (lambda (G16005 G16006 G16007) ((letrec ((G16011 (lambda (G16013 G16014) ((lambda (G16017) ((lambda (G16019) (if G16019 (apply (lambda () (G16014 G15940)) G16019) ((lambda (G16021) ((lambda (G16023) (if (if G16023 (begin '#f (apply (lambda (G16025 G16026) (G15941 G16025)) G16023)) '#f) (apply (lambda (G16029 G16030) (G16011 G16030 (lambda (G16033) (call-with-values (lambda () (G16014 (cons '() G16033))) (lambda (G16037 G16038) ((lambda (G16041 G16042) (if (null? (car G16041)) (G12452 '#f '"extra ellipsis in syntax form" G15937) (values (G15830 G16042 (car G16041)) (cdr G16041)))) G16038 G16037)))))) G16023) ((lambda (G16045) ((lambda (G16047) (if G16047 (apply (lambda () (call-with-values (lambda () (G15824 G15937 G16013 G15939 G15940 G15941 G15942)) (lambda (G16051 G16052) ((lambda (G16055 G16056) (call-with-values (lambda () (G16014 G16055)) (lambda (G16061 G16062) ((lambda (G16065 G16066) (values (G15828 G16066 G16056) G16065)) G16062 G16061)))) G16052 G16051)))) G16047) (G12452 '#f '"invalid syntax" G16045))) (G12219 G16045 '_))) G16021))) (G12219 G16021 '(any . any)))) G16017))) (G12219 G16017 '()))) G16013)))) G16011) G16007 (lambda (G16069) (call-with-values (lambda () (G15824 G15937 G16005 G15939 (cons '() G16069) G15941 '#f)) (lambda (G16073 G16074) ((lambda (G16077 G16078) (if (null? (car G16077)) (G12452 '#f '"extra ellipsis in syntax form" G15937) (values (G15832 G16078 (car G16077)) (cdr G16077)))) G16074 G16073)))))) G15997) ((lambda (G16081) ((lambda (G16083) (if G16083 (apply (lambda (G16085 G16086) (call-with-values (lambda () (G15824 G15937 G16085 G15939 G15940 G15941 '#f)) (lambda (G16091 G16092) ((lambda (G16095 G16096) (call-with-values (lambda () (G15824 G15937 G16086 G15939 G16095 G15941 G15942)) (lambda (G16101 G16102) ((lambda (G16105 G16106) (values (G15834 G15938 G16085 G16086 G16096 G16106) G16105)) G16102 G16101)))) G16092 G16091)))) G16083) ((lambda (G16109) ((lambda (G16111) (if G16111 (apply (lambda (G16113) (call-with-values (lambda () (G15824 G15937 G16113 G15939 G15940 G15941 '#t)) (lambda (G16117 G16118) ((lambda (G16121 G16122) (values (G15836 G15938 G16113 G16122) G16121)) G16118 G16117)))) G16111) ((lambda (G16125) ((lambda (G16127) (if G16127 (apply (lambda () (values (list 'quote G15938) G15940)) G16127) (G12452 '#f '"invalid syntax" G16125))) (G12219 G16125 '_))) G16109))) (G12219 G16109 '#(vector each-any)))) G16081))) (G12219 G16081 '(any . any)))) G15995))) (G12219 G15995 '(any any . any)))) G15981))) (G12219 G15981 '(any any)))) G15957))) (G12219 G15957 'any))) G15949))) (G12219 G15949 'any))) G15938))) (set! G15826 (lambda (G15913 G15914 G15915 G15916) (if (= G15915 '0) (values G15914 G15916) (if (null? G15916) (G12452 '#f '"missing ellipsis in syntax form" G15913) (call-with-values (lambda () (G15826 G15913 G15914 (- G15915 '1) (cdr G15916))) (lambda (G15923 G15924) ((lambda (G15927 G15928) ((lambda (G15931) (if G15931 ((lambda (G15933) (values (cdr G15933) G15916)) G15931) ((lambda (G15935) (values G15935 (cons (cons (cons G15928 G15935) (car G15916)) G15927))) (G11514 'tmp)))) (assq G15928 (car G15916)))) G15924 G15923))))))) (set! G15828 (lambda (G15909 G15910) (if (equal? G15910 ''()) G15909 (list 'append G15909 G15910)))) (set! G15830 (lambda (G15905 G15906) (list 'apply '(primitive append) (G15832 G15905 G15906)))) (set! G15832 (lambda (G15887 G15888) ((lambda (G15891 G15892) (if (eq? (car G15887) 'ref) (car G15892) (if (for-all (lambda (G15895) (if (eq? (car G15895) 'ref) (begin '#f (memq (cadr G15895) G15891)) '#f)) (cdr G15887)) ((lambda (G15897) (cons 'map (cons (list 'primitive (car G15887)) G15897))) (map ((lambda (G15899) (lambda (G15901) (cdr (assq (cadr G15901) G15899)))) (map cons G15891 G15892)) (cdr G15887))) (cons* 'map (list 'lambda G15891 G15887) G15892)))) (map cdr G15888) (map (lambda (G15903) (list 'ref (car G15903))) G15888)))) (set! G15834 (lambda (G15872 G15873 G15874 G15875 G15876) ((lambda (G15882) (if (eqv? G15882 'quote) (if (eq? (car G15875) 'quote) ((lambda (G15883 G15884) (if (if (eq? G15883 G15873) (begin '#f (eq? G15884 G15874)) '#f) (list 'quote G15872) (list 'quote (cons G15883 G15884)))) (cadr G15875) (cadr G15876)) (if (null? (cadr G15876)) (list 'list G15875) (list 'cons G15875 G15876))) (if (eqv? G15882 'list) (cons 'list (cons G15875 (cdr G15876))) (list 'cons G15875 G15876)))) (car G15876)))) (set! G15836 (lambda (G15866 G15867 G15868) (if (eq? (car G15868) 'quote) (if (eq? (cadr G15868) G15867) (list 'quote G15866) (list 'quote (list->vector (cadr G15868)))) (if (eq? (car G15868) 'list) (cons 'vector (cdr G15868)) (list 'list->vector G15868))))) (set! G15838 (lambda (G15861) ((lambda (G15863) (if (eqv? G15863 'ref) (cadr G15861) (if (eqv? G15863 'primitive) (list 'primitive (cadr G15861)) (if (eqv? G15863 'quote) (list 'quote (cadr G15861)) (if (eqv? G15863 'lambda) (G11482 '#f (cadr G15861) (G15838 (caddr G15861))) (if (eqv? G15863 'map) ((lambda (G15864) (cons '(primitive ellipsis-map) G15864)) (map G15838 (cdr G15861))) (cons (list 'primitive (car G15861)) (map G15838 (cdr G15861))))))))) (car G15861)))) (lambda (G15839 G15840 G15841) ((lambda (G15845) ((lambda (G15847) (if G15847 (apply (lambda (G15849) (call-with-values (lambda () (G15824 G15839 G15849 G15840 '() G12221 '#f)) (lambda (G15853 G15854) ((lambda (G15857 G15858) (G15838 G15858)) G15854 G15853)))) G15847) (G12452 '#f '"invalid syntax" G15845))) (G12219 G15845 '(_ any)))) G15839)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G12233 (lambda (G16129) ((lambda (G16131) (if (eqv? G16131 'quote) G12139 (if (eqv? G16131 'lambda) G12143 (if (eqv? G16131 'case-lambda) G12141 (if (eqv? G16131 'letrec) G12119 (if (eqv? G16131 'letrec*) G12121 (if (eqv? G16131 'case) G12137 (if (eqv? G16131 'if) G12135 (if (eqv? G16131 'when) G12131 (if (eqv? G16131 'unless) G12133 (if (eqv? G16131 'parameterize) G12213 (if (eqv? G16131 'foreign-call) G12215 (if (eqv? G16131 'syntax-case) G12227 (if (eqv? G16131 'syntax) G12231 (if (eqv? G16131 'type-descriptor) G12125 (if (eqv? G16131 'record-type-descriptor) G12127 (if (eqv? G16131 'record-constructor-descriptor) G12129 (if (eqv? G16131 'fluid-let-syntax) G12123 (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G16129))))))))))))))))))) G16129))) (set! G12235 (lambda (G16132) ((lambda (G16134) ((lambda (G16136) (if (if G16136 (begin '#f (apply (lambda (G16138) (if (for-all G11640 G16138) (begin '#f (G10457 (map G11642 G16138))) '#f)) G16136)) '#f) (apply (lambda (G16140) (G12145 (list 'quote (G10457 (map G11642 G16140))))) G16136) (G12452 '#f '"invalid syntax" G16134))) (G12219 G16134 '(_ . each-any)))) G16132))) (set! G12237 (lambda (G16142 G16143) ((lambda (G16146) ((lambda (G16148) (if (if G16148 (begin '#f (apply (lambda (G16150) (if (G11640 G16150) (begin '#f (memq (G11642 G16150) G16143)) '#f)) G16148)) '#f) (apply (lambda (G16152) (G12145 (list 'quote G16152))) G16148) (G12452 '#f '"invalid syntax" G16146))) (G12219 G16146 '(_ any)))) G16142))) (set! G12239 (lambda (G16154) (if (procedure? G16154) G16154 (if (symbol? G16154) ((lambda (G16156) (if (eqv? G16156 'define-record-type) G12207 (if (eqv? G16156 'define-struct) G12205 (if (eqv? G16156 'include) G12195 (if (eqv? G16156 'cond) G12191 (if (eqv? G16156 'let) G12151 (if (eqv? G16156 'do) G12183 (if (eqv? G16156 'or) G12187 (if (eqv? G16156 'and) G12189 (if (eqv? G16156 'let*) G12185 (if (eqv? G16156 'let-values) G12153 (if (eqv? G16156 'let*-values) G12155 (if (eqv? G16156 'syntax-rules) G12199 (if (eqv? G16156 'quasiquote) G12201 (if (eqv? G16156 'quasisyntax) G12203 (if (eqv? G16156 'with-syntax) G12147 (if (eqv? G16156 'identifier-syntax) G12181 (if (eqv? G16156 'time) G12173 (if (eqv? G16156 'delay) G12175 (if (eqv? G16156 'assert) G12177 (if (eqv? G16156 'endianness) G12179 (if (eqv? G16156 'guard) G12169 (if (eqv? G16156 'define-enumeration) G12171 (if (eqv? G16156 'trace-lambda) G12157 (if (eqv? G16156 'trace-define) G12159 (if (eqv? G16156 'trace-define-syntax) G12161 (if (eqv? G16156 'trace-let-syntax) G12165 (if (eqv? G16156 'trace-letrec-syntax) G12167 (if (eqv? G16156 'define-condition-type) G12209 (if (eqv? G16156 'include-into) G12197 (if (eqv? G16156 'eol-style) (lambda (G16161) (G12237 G16161 '(none lf cr crlf nel crnel ls))) (if (eqv? G16156 'error-handling-mode) (lambda (G16159) (G12237 G16159 '(ignore raise replace))) (if (eqv? G16156 'buffer-mode) (lambda (G16157) (G12237 G16157 '(none line block))) (if (eqv? G16156 'file-options) G12235 (if (memv G16156 '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G12211 (error 'macro-transformer '"BUG: invalid macro" G16154)))))))))))))))))))))))))))))))))))) G16154) (error 'core-macro-transformer '"BUG: invalid macro" G16154))))) (set! G12241 (lambda (G16163) (car G16163))) (set! G12243 (lambda (G16165 G16166) ((lambda (G16169) (begin ((letrec ((G16171 (lambda (G16173) (if (G11584 G16173) (void) (if (pair? G16173) (begin (G16171 (car G16173)) (G16171 (cdr G16173))) (if (vector? G16173) (vector-for-each G16171 G16173) (if (symbol? G16173) (G12452 '#f '"raw symbol encountered in output of macro" G16166 G16173) (void)))))))) G16171) G16169) (G11618 (G11608) G16169 G16166))) (G16165 (G11618 G11610 G16166 '#f))))) (set! G12245 (lambda (G16175 G16176) (G12243 (G12239 G16175) G16176))) (set! G12247 (lambda (G16179 G16180) (G12243 (G12241 G16179) G16180))) (set! G12249 (lambda (G16183 G16184) ((lambda (G16187 G16188) (begin (G11128 G16187) ((lambda (G16191) ((lambda (G16193) (G12243 G16193 G16184)) (if (procedure? G16191) G16191 (assertion-violation 'chi-global-macro '"BUG: not a procedure" G16191)))) (symbol-value G16188)))) (car G16183) (cdr G16183)))) (set! G12251 (lambda (G16195 G16196 G16197) (if (null? G16195) '() ((lambda (G16201) (cons G16201 (G12251 (cdr G16195) G16196 G16197))) (G12255 (car G16195) G16196 G16197))))) (set! G12253 (lambda (G16203 G16204 G16205) ((lambda (G16209) ((lambda (G16211) (if G16211 (apply (lambda (G16213 G16214) ((lambda (G16217) (cons G16217 (G12251 G16214 G16204 G16205))) (G12255 G16213 G16204 G16205))) G16211) (G12452 '#f '"invalid syntax" G16209))) (G12219 G16209 '(any . each-any)))) G16203))) (set! G12255 (lambda (G16219 G16220 G16221) (call-with-values (lambda () (G11680 G16219 G16220)) (lambda (G16228 G16229 G16230) ((lambda (G16234 G16235 G16236) ((lambda (G16240) (if (eqv? G16240 'core-macro) ((lambda (G16290) (G16290 G16219 G16220 G16221)) (G12233 G16235)) (if (eqv? G16240 'global) ((lambda (G16286) ((lambda (G16288) ((lambda () (begin ((G12330) G16286) G16288)))) (cdr G16235))) (car G16235)) (if (eqv? G16240 'core-prim) ((lambda (G16284) (list 'primitive G16284)) G16235) (if (eqv? G16240 'call) (G12253 G16219 G16220 G16221) (if (eqv? G16240 'lexical) ((lambda (G16282) G16282) (G12107 G16235)) (if (memv G16240 '(global-macro global-macro!)) (G12255 (G12249 G16235 G16219) G16220 G16221) (if (memv G16240 '(local-macro local-macro!)) (G12255 (G12247 G16235 G16219) G16220 G16221) (if (memv G16240 '(macro macro!)) (G12255 (G12245 G16235 G16219) G16220 G16221) (if (eqv? G16240 'constant) ((lambda (G16280) (list 'quote G16280)) G16235) (if (eqv? G16240 'set!) (G12257 G16219 G16220 G16221) (if (eqv? G16240 'begin) ((lambda (G16272) ((lambda (G16274) (if G16274 (apply (lambda (G16276 G16277) (G11485 '#f (G12251 (cons G16276 G16277) G16220 G16221))) G16274) (G12452 '#f '"invalid syntax" G16272))) (G12219 G16272 '(_ any . each-any)))) G16219) (if (memv G16240 '(let-syntax letrec-syntax)) ((lambda (G16242) ((lambda (G16244) (if (if G16244 (begin '#f (apply (lambda (G16246 G16247 G16248 G16249) (if (G11650 G16246) (void) (G12452 '#f '"invalid identifiers" G16219))) G16244)) '#f) (apply (lambda (G16254 G16255 G16256 G16257) ((lambda (G16262) ((lambda (G16264) ((lambda (G16266) ((lambda () (G11485 '#f (G12251 (map (lambda (G16268) (G11620 G16264 G16268)) (cons G16256 G16257)) (append (map cons G16262 G16266) G16220) (append (map cons G16262 G16266) G16221)))))) (map (lambda (G16270) (G11711 (G12316 (if (eq? G16236 'let-syntax) G16270 (G11620 G16264 G16270)) G16221))) G16255))) (G11569 G16254 G16262))) (map G11518 G16254))) G16244) (G12452 '#f '"invalid syntax" G16242))) (G12219 G16242 '(_ #(each (any any)) any . each-any)))) G16219) (if (eqv? G16240 'displaced-lexical) (G12452 '#f '"identifier out of context" G16219) (if (eqv? G16240 'syntax) (G12452 '#f '"reference to pattern variable outside a syntax form" G16219) (if (memv G16240 '(define define-syntax module import library)) (G12452 '#f (string-append ((lambda (G16241) (if (eqv? G16241 'define) '"a definition" (if (eqv? G16241 'define-syntax) '"a define-syntax" (if (eqv? G16241 'module) '"a module definition" (if (eqv? G16241 'library) '"a library definition" (if (eqv? G16241 'import) '"an import declaration" '"a non-expression")))))) G16236) '" was found where an expression was expected") G16219) (if (eqv? G16240 'mutable) (G12452 '#f '"attempt to reference an unexportable variable" G16219) (G12452 '#f '"invalid expression" G16219)))))))))))))))))) G16236)) G16230 G16229 G16228))))) (set! G12257 (lambda (G16292 G16293 G16294) ((lambda (G16298) ((lambda (G16300) (if (if G16300 (begin '#f (apply (lambda (G16302 G16303) (G11640 G16302)) G16300)) '#f) (apply (lambda (G16306 G16307) (call-with-values (lambda () (G11680 G16306 G16293)) (lambda (G16313 G16314 G16315) ((lambda (G16319 G16320 G16321) ((lambda (G16325) (if (eqv? G16325 'lexical) (begin (G12111 G16320 '#t) (list 'set! (G12107 G16320) (G12255 G16307 G16293 G16294))) (if (eqv? G16325 'core-prim) (G12452 '#f '"cannot modify imported core primitive" G16292) (if (eqv? G16325 'global) (G12452 '#f '"attempt to modify imported binding" G16292) (if (eqv? G16325 'global-macro!) (G12255 (G12249 G16320 G16292) G16293 G16294) (if (eqv? G16325 'local-macro!) (G12255 (G12247 G16320 G16292) G16293 G16294) (if (eqv? G16325 'mutable) (G12452 '#f '"attempt to assign to an unexportable variable" G16292) (G12452 '#f '"invalid syntax" G16292)))))))) G16321)) G16315 G16314 G16313)))) G16300) (G12452 '#f '"invalid syntax" G16298))) (G12219 G16298 '(_ any any)))) G16292))) (set! G12259 (lambda (G16326 G16327) ((lambda (G16330) ((lambda (G16332) (if G16332 (apply (lambda (G16334) (if (G11650 G16334) (void) (G12149 G16327 G16326))) G16332) ((lambda (G16336) ((lambda (G16338) (if G16338 (apply (lambda (G16340 G16341) (if (G11650 (cons G16341 G16340)) (void) (G12149 G16327 G16326))) G16338) ((lambda (G16344) ((lambda (G16346) (if G16346 (apply (lambda () (G12452 '#f '"invalid syntax" G16327)) G16346) (G12452 '#f '"invalid syntax" G16344))) (G12219 G16344 '_))) G16336))) (G12219 G16336 '#(each+ any () any)))) G16330))) (G12219 G16330 'each-any))) G16326))) (set! G12261 (lambda (G16348 G16349 G16350 G16351 G16352) ((lambda (G16358) ((lambda (G16360) (if G16360 (apply (lambda (G16362) (begin (G12259 G16349 G16348) ((lambda (G16364 G16365) (values G16364 (G12277 (G11620 (G11569 G16362 G16365) G16350) (G12115 G16365 G16364 G16351) G16352))) (map G11514 G16362) (map G11518 G16362)))) G16360) ((lambda (G16368) ((lambda (G16370) (if G16370 (apply (lambda (G16372 G16373) (begin (G12259 G16349 G16348) ((lambda (G16376 G16377 G16378 G16379) (values (append G16376 G16378) (G12277 (G11620 (G11569 (cons G16373 G16372) (cons G16379 G16377)) G16350) (G12115 (cons G16379 G16377) (cons G16378 G16376) G16351) G16352))) (map G11514 G16372) (map G11518 G16372) (G11514 G16373) (G11518 G16373)))) G16370) ((lambda (G16384) ((lambda (G16386) (if G16386 (apply (lambda () (G12452 '#f '"invalid syntax" G16349)) G16386) (G12452 '#f '"invalid syntax" G16384))) (G12219 G16384 '_))) G16368))) (G12219 G16368 '#(each+ any () any)))) G16358))) (G12219 G16358 'each-any))) G16349))) (set! G12263 (lambda (G16388 G16389 G16390 G16391 G16392) (if (null? G16389) (values '() '()) (call-with-values (lambda () (G12261 G16388 (car G16389) (car G16390) G16391 G16392)) (lambda (G16400 G16401) ((lambda (G16404 G16405) (call-with-values (lambda () (G12263 G16388 (cdr G16389) (cdr G16390) G16391 G16392)) (lambda (G16410 G16411) ((lambda (G16414 G16415) (values (cons G16405 G16415) (cons G16404 G16414))) G16411 G16410)))) G16401 G16400)))))) (set! G12265 (lambda (G16418 G16419 G16420) ((lambda (G16424 G16425) (call-with-values (lambda () (G12261 G16424 G16424 G16425 G16419 G16420)) (lambda (G16430 G16431) ((lambda (G16434 G16435) (G11482 '#f G16435 G16434)) G16431 G16430)))) (car G16418) (cdr G16418)))) (set! G12267 (lambda (G16438 G16439 G16440) ((lambda (G16444) (if (eqv? G16444 'defun) (G12265 (cdr G16438) G16439 G16440) (if (eqv? G16444 'expr) ((lambda (G16447) (G12255 G16447 G16439 G16440)) (cdr G16438)) (if (eqv? G16444 'top-expr) ((lambda (G16445) (G11485 '#f (list (G12255 G16445 G16439 G16440) (G11486)))) (cdr G16438)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G16438))))) (car G16438)))) (set! G12269 (lambda (G16449 G16450 G16451 G16452 G16453) ((letrec ((G16459 (lambda (G16461 G16462) (if (null? G16461) (map (lambda (G16465) (G12255 G16465 G16452 G16453)) G16451) ((lambda (G16467 G16468) ((lambda (G16471) (if (eqv? G16471 'defun) ((lambda (G16476) (cons (list 'set! G16467 G16476) (G16459 (cdr G16461) (cdr G16462)))) (G12265 (cdr G16468) G16452 G16453)) (if (eqv? G16471 'expr) ((lambda (G16474) (cons (list 'set! G16467 G16474) (G16459 (cdr G16461) (cdr G16462)))) (G12255 (cdr G16468) G16452 G16453)) (if (eqv? G16471 'top-expr) ((lambda (G16472) (cons G16472 (G16459 (cdr G16461) (cdr G16462)))) (G12255 (cdr G16468) G16452 G16453)) (error 'expand-interaction '"invallid" G16468))))) (car G16468))) (car G16461) (car G16462)))))) G16459) G16449 G16450))) (set! G12271 (lambda (G16478 G16479 G16480) ((letrec ((G16484 (lambda (G16486) (if (null? G16486) '() ((lambda (G16488) (cons G16488 (G16484 (cdr G16486)))) (G12267 (car G16486) G16479 G16480)))))) G16484) G16478))) (set! G12273 (lambda (G16490 G16491 G16492) (if (null? G16491) '#f (if (G11646 G16490 (car G16491)) (car G16492) (G12273 G16490 (cdr G16491) (cdr G16492)))))) (set! G12275 (lambda (G16496) ((letrec ((G16498 (lambda (G16500 G16501) (if (null? G16500) G16501 ((lambda (G16504) (if G16504 ((lambda (G16506) (G16498 (cdr G16500) (cons (list (car G16500) G16506) G16501))) G16504) (G16498 (cdr G16500) G16501))) (G12273 (car G16500) (cdr G16500) (cdr G16500))))))) G16498) G16496 '()))) (set! G12277 (lambda (G16508 G16509 G16510) ((lambda (G16514) (call-with-values (lambda () (G12314 (map (lambda (G16523) (G11620 G16514 G16523)) (G11638 G16508)) G16509 G16510 '() '() '() '() G16514 '#f)) (lambda (G16525 G16526 G16527 G16528 G16529 G16530 G16531) ((lambda (G16539 G16540 G16541 G16542 G16543 G16544 G16545) (begin (if (null? G16545) (G12452 '#f '"no expression in body" G16545) (void)) ((lambda (G16553) ((lambda (G16555) ((lambda () (G11488 '#f (reverse G16542) (reverse G16555) (G11485 '#f G16553))))) (G12271 G16541 G16544 G16543))) (G12251 (append (apply append (reverse G16540)) G16545) G16544 G16543)))) G16531 G16530 G16529 G16528 G16527 G16526 G16525)))) (G11559)))) (set! G12279 (lambda (G16557) ((lambda (G16559) ((lambda (G16561) (if G16561 (apply (lambda (G16563 G16564) (begin (if (for-all G11640 G16563) (void) (G12452 '#f '"module exports must be identifiers" G16557)) (values '#f (list->vector G16563) G16564))) G16561) ((lambda (G16567) ((lambda (G16569) (if G16569 (apply (lambda (G16571 G16572 G16573) (begin (if (G11640 G16571) (void) (G12452 '#f '"module name must be an identifier" G16557)) (if (for-all G11640 G16572) (void) (G12452 '#f '"module exports must be identifiers" G16557)) (values G16571 (list->vector G16572) G16573))) G16569) (G12452 '#f '"invalid syntax" G16567))) (G12219 G16567 '(_ any each-any . each-any)))) G16559))) (G12219 G16559 '(_ each-any . each-any)))) G16557))) (set! G12285 (make-record-type-descriptor 'module-interface '#f 'G12283 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G12287 '#f) (set! G12289 (make-record-constructor-descriptor G12285 '#f G12287)) (set! G12294 (record-predicate G12285)) (set! G12296 (record-constructor G12289)) (set! G12298 (record-accessor G12285 '0)) (set! G12300 (record-accessor G12285 '1)) (set! G12302 (record-accessor G12285 '2)) (set! G12304 (record-mutator G12285 '0)) (set! G12306 (record-mutator G12285 '1)) (set! G12308 (record-mutator G12285 '2)) (set! G12310 (lambda (G16577 G16578) ((lambda (G16582) (begin (set! G16582 (lambda (G16589 G16590) (begin (if (null? G16589) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G16593) (if (eq? G16593 G16590) '() (cons G16593 (G16582 (cdr G16589) G16590)))) (car G16589))))) ((lambda (G16583 G16584) (if (null? G16583) G16584 (vector-map (lambda (G16587) (G11586 (G11588 G16587) (append G16583 (G11590 G16587)) '() '())) G16584))) (G16582 (G11590 G16578) (G12298 G16577)) (G12300 G16577)))) '#f))) (set! G12312 (lambda (G16595 G16596 G16597 G16598 G16599 G16600 G16601) (call-with-values (lambda () (G12279 G16595)) (lambda (G16612 G16613 G16614) ((lambda (G16618 G16619 G16620) ((lambda (G16624) ((lambda (G16626) ((lambda () (call-with-values (lambda () (G12314 G16626 G16596 G16597 G16598 G16599 G16600 G16601 G16624 '#f)) (lambda (G16635 G16636 G16637 G16638 G16639 G16640 G16641) ((lambda (G16649 G16650 G16651 G16652 G16653 G16654 G16655) ((lambda (G16663 G16664) (if (not G16620) (values G16652 G16651 G16619 G16663 G16654 G16653 G16664 G16649) ((lambda (G16667 G16668) (values G16652 G16651 (vector G16620) (vector G16667) (cons (cons G16667 (cons '$module G16668)) G16654) (cons (cons G16667 (cons '$module G16668)) G16653) G16664 G16649)) (G11518 'module) (G12296 (car (G11590 G16620)) (vector-map (lambda (G16671) (G11586 (G11588 G16671) (G11590 G16671) '() '())) G16619) G16663)))) (vector-map (lambda (G16673) ((lambda (G16675) (if G16675 G16675 (begin '#f (G12452 '#f '"cannot find module export" G16673)))) (G11666 (G11586 (G11642 G16673) (G11590 G16673) (list G16624) '())))) G16619) (cons G16655 G16650))) G16641 G16640 G16639 G16638 G16637 G16636 G16635)))))) (map (lambda (G16677) (G11620 G16624 G16677)) (G11638 G16618)))) (G11559))) G16614 G16613 G16612))))) (set! G12314 (lambda (G16679 G16680 G16681 G16682 G16683 G16684 G16685 G16686 G16687) (if (null? G16679) (values G16679 G16680 G16681 G16682 G16683 G16684 G16685) ((lambda (G16697) (call-with-values (lambda () (G11680 G16697 G16680)) (lambda (G16702 G16703 G16704) ((lambda (G16708 G16709 G16710) ((lambda (G16714) ((lambda (G16716) (if (eqv? G16716 'define) (call-with-values (lambda () (G12099 G16697)) (lambda (G16907 G16908) ((lambda (G16911 G16912) (begin (if (G11654 G16912 G16714) (G12452 '#f '"cannot redefine keyword" G16697) (void)) (call-with-values (lambda () (G11522 G16912 G16686)) (lambda (G16917 G16918) ((lambda (G16921 G16922) (begin (G11561 G16686 G16912 G16922) (G12314 (cdr G16679) (G12113 G16922 G16921 G16680) G16681 (cons G16921 G16682) (cons G16911 G16683) G16684 G16714 G16686 G16687))) G16918 G16917))))) G16908 G16907))) (if (eqv? G16716 'define-syntax) (call-with-values (lambda () (G12101 G16697)) (lambda (G16891 G16892) ((lambda (G16895 G16896) (begin (if (G11654 G16896 G16714) (G12452 '#f '"cannot redefine keyword" G16697) (void)) ((lambda (G16899 G16900) (begin (G11561 G16686 G16896 G16899) ((lambda (G16903) (G12314 (cdr G16679) (cons (cons G16899 G16903) G16680) (cons (cons G16899 G16903) G16681) G16682 G16683 G16684 G16714 G16686 G16687)) (G11711 G16900)))) (G11524 G16896 G16686) (G12316 G16895 G16681)))) G16892 G16891))) (if (memv G16716 '(let-syntax letrec-syntax)) ((lambda (G16863) ((lambda (G16865) (if (if G16865 (begin '#f (apply (lambda (G16867 G16868 G16869) (if (G11650 G16867) (void) (G12452 '#f '"invalid identifiers" G16697))) G16865)) '#f) (apply (lambda (G16873 G16874 G16875) ((lambda (G16879) ((lambda (G16881) ((lambda (G16883) ((lambda () (G12314 (append (map (lambda (G16885) (G11620 G16881 G16885)) G16875) (cdr G16679)) (append (map cons G16879 G16883) G16680) (append (map cons G16879 G16883) G16681) G16682 G16683 G16684 G16714 G16686 G16687)))) (map (lambda (G16887) (G11711 (G12316 (if (eq? G16710 'let-syntax) G16887 (G11620 G16881 G16887)) G16681))) G16874))) (G11569 G16873 G16879))) (map G11518 G16873))) G16865) (G12452 '#f '"invalid syntax" G16863))) (G12219 G16863 '(_ #(each (any any)) . each-any)))) G16697) (if (eqv? G16716 'begin) ((lambda (G16857) ((lambda (G16859) (if G16859 (apply (lambda (G16861) (G12314 (append G16861 (cdr G16679)) G16680 G16681 G16682 G16683 G16684 G16714 G16686 G16687)) G16859) (G12452 '#f '"invalid syntax" G16857))) (G12219 G16857 '(_ . each-any)))) G16697) (if (memv G16716 '(global-macro global-macro!)) (G12314 (cons (G11620 G16686 (G12249 G16709 G16697)) (cdr G16679)) G16680 G16681 G16682 G16683 G16684 G16714 G16686 G16687) (if (memv G16716 '(local-macro local-macro!)) (G12314 (cons (G11620 G16686 (G12247 G16709 G16697)) (cdr G16679)) G16680 G16681 G16682 G16683 G16684 G16714 G16686 G16687) (if (memv G16716 '(macro macro!)) (G12314 (cons (G11620 G16686 (G12245 G16709 G16697)) (cdr G16679)) G16680 G16681 G16682 G16683 G16684 G16714 G16686 G16687) (if (eqv? G16716 'module) (call-with-values (lambda () (G12312 G16697 G16680 G16681 G16682 G16683 G16684 G16714)) (lambda (G16821 G16822 G16823 G16824 G16825 G16826 G16827 G16828) ((lambda (G16837 G16838 G16839 G16840 G16841 G16842 G16843 G16844) (begin (vector-for-each (lambda (G16853 G16854) (G11561 G16686 G16853 G16854)) G16842 G16841) (G12314 (cdr G16679) G16840 G16839 G16844 G16843 G16838 G16837 G16686 G16687))) G16828 G16827 G16826 G16825 G16824 G16823 G16822 G16821))) (if (eqv? G16716 'library) (begin (G12426 (G11662 G16697)) (G12314 (cdr G16679) G16680 G16681 G16682 G16683 G16684 G16714 G16686 G16687)) (if (eqv? G16716 'import) (begin ((lambda () ((lambda (G16718 G16720 G16722) (begin (set! G16718 (lambda (G16793) ((lambda (G16795) ((lambda (G16797) (if (if G16797 (begin '#f (apply (lambda (G16799) (G11640 G16799)) G16797)) '#f) (apply (lambda (G16801) '#t) G16797) ((lambda (G16803) ((lambda (G16805) (if G16805 (apply (lambda (G16807) '#f) G16805) ((lambda (G16809) ((lambda (G16811) (if G16811 (apply (lambda () (G12452 '#f '"malformed import form" G16793)) G16811) (G12452 '#f '"invalid syntax" G16809))) (G12219 G16809 '_))) G16803))) (G12219 G16803 '(_ . each-any)))) G16795))) (G12219 G16795 '(_ any)))) G16793))) (set! G16720 (lambda (G16763 G16764) ((lambda (G16767) ((lambda (G16769) (if (if G16769 (begin '#f (apply (lambda (G16771) (G11640 G16771)) G16769)) '#f) (apply (lambda (G16773) (call-with-values (lambda () (G11680 G16773 G16764)) (lambda (G16778 G16779 G16780) ((lambda (G16784 G16785 G16786) ((lambda (G16790) (if (eqv? G16790 '$module) ((lambda (G16791) (values (G12310 G16791 G16773) (G12302 G16791))) G16785) (G12452 '#f '"invalid import" G16763))) G16786)) G16780 G16779 G16778)))) G16769) (G12452 '#f '"invalid syntax" G16767))) (G12219 G16767 '(_ any)))) G16763))) (set! G16722 (lambda (G16737) ((lambda (G16739) ((lambda (G16741) (if G16741 (apply (lambda (G16743 G16744) (call-with-values (lambda () (G12324 (G12458 G16744))) (lambda (G16749 G16750) ((lambda (G16753 G16754) (values (vector-map (lambda (G16757) (G11606 G16743 G16757)) G16754) G16753)) G16750 G16749)))) G16741) ((lambda (G16759) ((lambda (G16761) (if G16761 (apply (lambda () (G12452 '#f '"invalid import form" G16737)) G16761) (G12452 '#f '"invalid syntax" G16759))) (G12219 G16759 '_))) G16739))) (G12219 G16739 '(any . each-any)))) G16737))) (call-with-values (lambda () (if (G16718 G16697) (G16720 G16697 G16680) (G16722 G16697))) (lambda (G16725 G16726) ((lambda (G16729 G16730) (vector-for-each (lambda (G16733 G16734) (G11561 G16686 G16733 G16734)) G16730 G16729)) G16726 G16725))))) '#f '#f '#f))) (G12314 (cdr G16679) G16680 G16681 G16682 G16683 G16684 G16714 G16686 G16687)) (if G16687 (G12314 (cdr G16679) G16680 G16681 (cons (G11514 'dummy) G16682) (cons (cons 'top-expr G16697) G16683) G16684 G16714 G16686 G16687) (values G16679 G16680 G16681 G16682 G16683 G16684 G16714))))))))))))) G16710)) (if (G11640 G16708) (cons G16708 G16685) G16685))) G16704 G16703 G16702)))) (car G16679))))) (set! G12316 (lambda (G16925 G16926) ((lambda (G16929) ((lambda (G16931) (begin (for-each ((lambda (G16933) (lambda (G16935) (begin (G11127 G16935) (G16933 G16935)))) (G12332)) (G16929)) G16931)) ((lambda (G16941 G16942 G16943 G16944) ((lambda (G16949) (dynamic-wind G16949 (lambda () (G12255 G16925 G16926 G16926)) G16949)) (lambda () (begin ((lambda (G16951) (begin (G16941 G16943) (set! G16943 G16951))) (G16941)) ((lambda (G16953) (begin (G16942 G16944) (set! G16944 G16953))) (G16942)))))) G12330 G12332 G16929 (lambda (G16955) (values))))) (G12328)))) (set! G12318 (lambda (G16957) ((lambda (G16960) (begin (set! G16960 (lambda (G16989) (symbol? (G12458 G16989)))) ((letrec ((G16961 (lambda (G16963 G16964 G16965) (if (null? G16963) (begin ((lambda (G16969) (if (G11650 G16969) (void) (G12452 'export '"invalid exports" (G12275 G16969)))) (map (lambda (G16971) (G11586 G16971 G11510 '() '())) G16965)) (values (map G12458 G16964) (map G12458 G16965))) ((lambda (G16973) ((lambda (G16975) (if G16975 (apply (lambda (G16977 G16978 G16979) (begin (if (if (eq? (G12458 G16977) 'rename) (if (for-all G16960 G16978) (begin '#f (for-all G16960 G16979)) '#f) '#f) (void) (G12452 'export '"invalid export specifier" (car G16963))) (G16961 (cdr G16963) (append G16978 G16964) (append G16979 G16965)))) G16975) ((lambda (G16983) ((lambda (G16985) (if G16985 (apply (lambda (G16987) (begin (if (G16960 G16987) (void) (G12452 'export '"invalid export" G16987)) (G16961 (cdr G16963) (cons G16987 G16964) (cons G16987 G16965)))) G16985) (G12452 '#f '"invalid syntax" G16983))) (G12219 G16983 'any))) G16973))) (G12219 G16973 '(any . #(each (any any)))))) (car G16963)))))) G16961) G16957 '() '()))) '#f))) (set! G12320 (lambda (G16991) ((lambda (G16994) (begin (set! G16994 (lambda (G17005) ((lambda (G17007) ((lambda (G17009) (if (if G17009 (begin '#f (apply (lambda (G17011) (for-all (lambda (G17013) ((lambda (G17015) (if (integer? G17015) (begin '#f (exact? G17015)) '#f)) (G12458 G17013))) G17011)) G17009)) '#f) (apply (lambda (G17017) (values '() (map G12458 G17017))) G17009) ((lambda (G17019) ((lambda (G17021) (if (if G17021 (begin '#f (apply (lambda (G17023 G17024) (symbol? (G12458 G17023))) G17021)) '#f) (apply (lambda (G17027 G17028) (call-with-values (lambda () (G16994 G17028)) (lambda (G17033 G17034) ((lambda (G17037 G17038) (values (cons (G12458 G17027) G17038) G17037)) G17034 G17033)))) G17021) ((lambda (G17041) ((lambda (G17043) (if G17043 (apply (lambda () (values '() '())) G17043) ((lambda (G17045) ((lambda (G17047) (if G17047 (apply (lambda () (G12452 '#f '"invalid library name" G16991)) G17047) (G12452 '#f '"invalid syntax" G17045))) (G12219 G17045 '_))) G17041))) (G12219 G17041 '()))) G17019))) (G12219 G17019 '(any . any)))) G17007))) (G12219 G17007 '(each-any)))) G17005))) (call-with-values (lambda () (G16994 G16991)) (lambda (G16997 G16998) ((lambda (G17001 G17002) (begin (if (null? G17002) (G12452 '#f '"empty library name" G16991) (void)) (values G17002 G17001))) G16998 G16997))))) '#f))) (set! G12322 (lambda (G17049) ((lambda (G17051) ((lambda (G17053) (if (if G17053 (begin '#f (apply (lambda (G17055 G17056 G17057 G17058 G17059 G17060 G17061) (if (eq? (G12458 G17057) 'export) (if (eq? (G12458 G17059) 'import) (begin '#f (eq? (G12458 G17055) 'library)) '#f) '#f)) G17053)) '#f) (apply (lambda (G17069 G17070 G17071 G17072 G17073 G17074 G17075) (values G17070 G17072 G17074 G17075)) G17053) ((lambda (G17083) ((lambda (G17085) (if G17085 (apply (lambda () (G12452 '#f '"malformed library" G17049)) G17085) (G12452 '#f '"invalid syntax" G17083))) (G12219 G17083 '_))) G17051))) (G12219 G17051 '(any each-any (any . each-any) (any . each-any) . each-any)))) G17049))) (set! G12324 (lambda (G17087) ((lambda (G17090 G17092 G17094 G17096 G17098 G17100 G17102 G17104 G17106 G17108 G17110) (begin (set! G17090 (lambda (G17597) (symbol? (G12458 G17597)))) (set! G17092 (lambda (G17595) (G12452 'import '"two imports with different bindings" G17595))) (set! G17094 (lambda (G17577 G17578) ((lambda (G17582) (begin (set! G17582 (lambda (G17583 G17584) ((lambda (G17587 G17588) ((lambda (G17591) (if G17591 ((lambda (G17593) (if (eq? (cdr G17593) G17588) G17584 (G17092 G17587))) G17591) (cons G17583 G17584))) (assq G17587 G17584))) (car G17583) (cdr G17583)))) (if (null? G17577) G17578 (G17582 (car G17577) (G17094 (cdr G17577) G17578))))) '#f))) (set! G17096 (lambda (G17535 G17536) ((lambda (G17540) (begin (set! G17540 (lambda (G17561 G17562) (if (null? G17562) (G12452 'import '"cannot rename unbound identifier" G17561) (if (eq? G17561 (caar G17562)) (values (cdar G17562) (cdr G17562)) ((lambda (G17565) (call-with-values (lambda () (G17540 G17561 (cdr G17562))) (lambda (G17569 G17570) ((lambda (G17573 G17574) (values G17574 (cons G17565 G17573))) G17570 G17569)))) (car G17562)))))) (if (null? G17535) (values '() G17536) (call-with-values (lambda () (G17540 (car G17535) G17536)) (lambda (G17543 G17544) ((lambda (G17547 G17548) (call-with-values (lambda () (G17096 (cdr G17535) G17547)) (lambda (G17553 G17554) ((lambda (G17557 G17558) (values (cons G17548 G17558) G17557)) G17554 G17553)))) G17544 G17543)))))) '#f))) (set! G17098 (lambda (G17527 G17528) (map (lambda (G17531) ((lambda (G17533) (if G17533 (cdr G17533) (G12452 'import '"cannot find identifier" G17531))) (assq G17531 G17528))) G17527))) (set! G17100 (lambda (G17519 G17520) ((letrec ((G17523 (lambda (G17525) (if (null? G17525) '() (if (memq (caar G17525) G17519) (G17523 (cdr G17525)) (cons (car G17525) (G17523 (cdr G17525)))))))) G17523) G17520))) (set! G17102 (lambda (G17517) (if (null? G17517) '() (if (memq (car G17517) (cdr G17517)) (G17102 (cdr G17517)) (cons (car G17517) (G17102 (cdr G17517))))))) (set! G17104 (lambda (G17289) ((lambda (G17292 G17294 G17296) (begin (set! G17292 (lambda (G17515) (if (integer? G17515) (if (exact? G17515) (begin '#f (>= G17515 '0)) '#f) '#f))) (set! G17294 (lambda (G17419) ((lambda (G17421) ((lambda (G17423) (if (if G17423 (begin '#f (apply (lambda (G17425) (G17292 (G12458 G17425))) G17423)) '#f) (apply (lambda (G17427) (lambda (G17429) (= G17429 (G12458 G17427)))) G17423) ((lambda (G17431) ((lambda (G17433) (if (if G17433 (begin '#f (apply (lambda (G17435 G17436) (eq? (G12458 G17435) 'and)) G17433)) '#f) (apply (lambda (G17439 G17440) ((lambda (G17443) (lambda (G17445) (for-all (lambda (G17447) (G17447 G17445)) G17443))) (map G17294 G17440))) G17433) ((lambda (G17449) ((lambda (G17451) (if (if G17451 (begin '#f (apply (lambda (G17453 G17454) (eq? (G12458 G17453) 'or)) G17451)) '#f) (apply (lambda (G17457 G17458) ((lambda (G17461) (lambda (G17463) (exists (lambda (G17465) (G17465 G17463)) G17461))) (map G17294 G17458))) G17451) ((lambda (G17467) ((lambda (G17469) (if (if G17469 (begin '#f (apply (lambda (G17471 G17472) (eq? (G12458 G17471) 'not)) G17469)) '#f) (apply (lambda (G17475 G17476) ((lambda (G17479) (lambda (G17481) (not (G17479 G17481)))) (G17294 G17476))) G17469) ((lambda (G17483) ((lambda (G17485) (if (if G17485 (begin '#f (apply (lambda (G17487 G17488) (if (eq? (G12458 G17487) '<=) (begin '#f (G17292 (G12458 G17488))) '#f)) G17485)) '#f) (apply (lambda (G17491 G17492) (lambda (G17495) (<= G17495 (G12458 G17492)))) G17485) ((lambda (G17497) ((lambda (G17499) (if (if G17499 (begin '#f (apply (lambda (G17501 G17502) (if (eq? (G12458 G17501) '>=) (begin '#f (G17292 G17502)) '#f)) G17499)) '#f) (apply (lambda (G17505 G17506) (lambda (G17509) (>= G17509 (G12458 G17506)))) G17499) ((lambda (G17511) ((lambda (G17513) (if G17513 (apply (lambda () (G12452 'import '"invalid sub-version spec" G17289 G17419)) G17513) (G12452 '#f '"invalid syntax" G17511))) (G12219 G17511 '_))) G17497))) (G12219 G17497 '(any any)))) G17483))) (G12219 G17483 '(any any)))) G17467))) (G12219 G17467 '(any any)))) G17449))) (G12219 G17449 '(any . each-any)))) G17431))) (G12219 G17431 '(any . each-any)))) G17421))) (G12219 G17421 'any))) G17419))) (set! G17296 (lambda (G17339) ((lambda (G17341) ((lambda (G17343) (if G17343 (apply (lambda () (lambda (G17345) '#t)) G17343) ((lambda (G17347) ((lambda (G17349) (if (if G17349 (begin '#f (apply (lambda (G17351 G17352) (eq? (G12458 G17351) 'and)) G17349)) '#f) (apply (lambda (G17355 G17356) ((lambda (G17359) (lambda (G17361) (for-all (lambda (G17363) (G17363 G17361)) G17359))) (map G17296 G17356))) G17349) ((lambda (G17365) ((lambda (G17367) (if (if G17367 (begin '#f (apply (lambda (G17369 G17370) (eq? (G12458 G17369) 'or)) G17367)) '#f) (apply (lambda (G17373 G17374) ((lambda (G17377) (lambda (G17379) (exists (lambda (G17381) (G17381 G17379)) G17377))) (map G17296 G17374))) G17367) ((lambda (G17383) ((lambda (G17385) (if (if G17385 (begin '#f (apply (lambda (G17387 G17388) (eq? (G12458 G17387) 'not)) G17385)) '#f) (apply (lambda (G17391 G17392) ((lambda (G17395) (lambda (G17397) (not (G17395 G17397)))) (G17296 G17392))) G17385) ((lambda (G17399) ((lambda (G17401) (if G17401 (apply (lambda (G17403) ((lambda (G17405) (lambda (G17407) ((letrec ((G17409 (lambda (G17411 G17412) (if (null? G17411) '#t (if (null? G17412) '#f (if ((car G17411) (car G17412)) (begin '#f (G17409 (cdr G17411) (cdr G17412))) '#f)))))) G17409) G17405 G17407))) (map G17294 G17403))) G17401) ((lambda (G17415) ((lambda (G17417) (if G17417 (apply (lambda () (G12452 'import '"invalid version spec" G17289 G17339)) G17417) (G12452 '#f '"invalid syntax" G17415))) (G12219 G17415 '_))) G17399))) (G12219 G17399 'each-any))) G17383))) (G12219 G17383 '(any any)))) G17365))) (G12219 G17365 '(any . each-any)))) G17347))) (G12219 G17347 '(any . each-any)))) G17341))) (G12219 G17341 '()))) G17339))) ((letrec ((G17297 (lambda (G17299) ((lambda (G17301) ((lambda (G17303) (if G17303 (apply (lambda (G17305) (values '() (G17296 G17305))) G17303) ((lambda (G17307) ((lambda (G17309) (if (if G17309 (begin '#f (apply (lambda (G17311 G17312) (G17090 G17311)) G17309)) '#f) (apply (lambda (G17315 G17316) (call-with-values (lambda () (G17297 G17316)) (lambda (G17321 G17322) ((lambda (G17325 G17326) (values (cons (G12458 G17315) G17326) G17325)) G17322 G17321)))) G17309) ((lambda (G17329) ((lambda (G17331) (if G17331 (apply (lambda () (values '() (lambda (G17333) '#t))) G17331) ((lambda (G17335) ((lambda (G17337) (if G17337 (apply (lambda () (G12452 '#f '"invalid import spec" G17289)) G17337) (G12452 '#f '"invalid syntax" G17335))) (G12219 G17335 '_))) G17329))) (G12219 G17329 '()))) G17307))) (G12219 G17307 '(any . any)))) G17301))) (G12219 G17301 '(each-any)))) G17299)))) G17297) G17289))) '#f '#f '#f))) (set! G17106 (lambda (G17275) (call-with-values (lambda () (G17104 G17275)) (lambda (G17279 G17280) ((lambda (G17283 G17284) (begin (if (null? G17284) (G12452 'import '"empty library name" G17275) (void)) ((lambda (G17287) (begin (if G17287 (void) (G12452 'import '"cannot find library with required name" G17284)) (if (G17283 (G11080 G17287)) (void) (G12452 'import '"library does not satisfy version specification" G17275 G17287)) ((G12334) G17287) (G11084 G17287))) (G11120 G17284)))) G17280 G17279))))) (set! G17108 (lambda (G17133) ((lambda (G17135) ((lambda (G17137) (if (if G17137 (begin '#f (apply (lambda (G17139 G17140) (not (memq (G12458 G17139) '(for rename except only prefix library)))) G17137)) '#f) (apply (lambda (G17143 G17144) (G17106 (cons G17143 G17144))) G17137) ((lambda (G17147) ((lambda (G17149) (if (if G17149 (begin '#f (apply (lambda (G17151 G17152 G17153 G17154) (if (eq? (G12458 G17151) 'rename) (if (for-all G17090 G17153) (begin '#f (for-all G17090 G17154)) '#f) '#f)) G17149)) '#f) (apply (lambda (G17159 G17160 G17161 G17162) ((lambda (G17167 G17168 G17169) ((lambda (G17173) ((lambda (G17175) (G17094 (map cons G17169 G17173) G17175)) (G17100 G17168 G17167))) (G17098 G17168 G17167))) (G17108 G17160) (map G12458 G17161) (map G12458 G17162))) G17149) ((lambda (G17177) ((lambda (G17179) (if (if G17179 (begin '#f (apply (lambda (G17181 G17182 G17183) (if (eq? (G12458 G17181) 'except) (begin '#f (for-all G17090 G17183)) '#f)) G17179)) '#f) (apply (lambda (G17187 G17188 G17189) ((lambda (G17193) (G17100 (map G12458 G17189) G17193)) (G17108 G17188))) G17179) ((lambda (G17195) ((lambda (G17197) (if (if G17197 (begin '#f (apply (lambda (G17199 G17200 G17201) (if (eq? (G12458 G17199) 'only) (begin '#f (for-all G17090 G17201)) '#f)) G17197)) '#f) (apply (lambda (G17205 G17206 G17207) ((lambda (G17211 G17212) ((lambda (G17215) ((lambda (G17217) (map cons G17215 G17217)) (G17098 G17215 G17211))) (G17102 G17212))) (G17108 G17206) (map G12458 G17207))) G17197) ((lambda (G17219) ((lambda (G17221) (if (if G17221 (begin '#f (apply (lambda (G17223 G17224 G17225) (if (eq? (G12458 G17223) 'prefix) (begin '#f (G17090 G17225)) '#f)) G17221)) '#f) (apply (lambda (G17229 G17230 G17231) ((lambda (G17235 G17236) (map (lambda (G17239) (cons (string->symbol (string-append G17236 (symbol->string (car G17239)))) (cdr G17239))) G17235)) (G17108 G17230) (symbol->string (G12458 G17231)))) G17221) ((lambda (G17241) ((lambda (G17243) (if (if G17243 (begin '#f (apply (lambda (G17245 G17246) (eq? (G12458 G17245) 'library)) G17243)) '#f) (apply (lambda (G17249 G17250) (G17106 G17250)) G17243) ((lambda (G17253) ((lambda (G17255) (if (if G17255 (begin '#f (apply (lambda (G17257 G17258 G17259) (eq? (G12458 G17257) 'for)) G17255)) '#f) (apply (lambda (G17263 G17264 G17265) (G17108 G17264)) G17255) ((lambda (G17269) ((lambda (G17271) (if G17271 (apply (lambda (G17273) (G12452 'import '"invalid import spec" G17273)) G17271) (G12452 '#f '"invalid syntax" G17269))) (G12219 G17269 'any))) G17253))) (G12219 G17253 '(any any . any)))) G17241))) (G12219 G17241 '(any each-any)))) G17219))) (G12219 G17219 '(any any any)))) G17195))) (G12219 G17195 '(any any . each-any)))) G17177))) (G12219 G17177 '(any any . each-any)))) G17147))) (G12219 G17147 '(any any . #(each (any any)))))) G17135))) (G12219 G17135 '(any . each-any)))) G17133))) (set! G17110 (lambda (G17117 G17118) ((lambda (G17121) (for-each (lambda (G17123) ((lambda (G17125 G17126) ((lambda (G17129) (if G17129 ((lambda (G17131) (if (eq? G17131 G17126) (void) (G17092 G17125))) G17129) (hashtable-set! G17118 G17125 G17126))) (hashtable-ref G17118 G17125 '#f))) (car G17123) (cdr G17123))) G17121)) (G17108 G17117)))) ((letrec ((G17111 (lambda (G17113 G17114) (if (null? G17113) (hashtable-entries G17114) (begin (G17110 (car G17113) G17114) (G17111 (cdr G17113) G17114)))))) G17111) G17087 (make-eq-hashtable)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12326 (lambda (G17599 G17600) ((lambda (G17603) (begin (vector-for-each (lambda (G17605 G17606) (begin (if (symbol? G17605) (void) (error 'make-top-rib '"BUG: not a symbol" G17605)) (G11561 G17603 (G11586 G17605 G11510 '() '()) G17606))) G17599 G17600) G17603)) (G11559)))) (set! G12328 (lambda () ((lambda (G17609) (lambda G17613 ((lambda (G17614) (if (= G17614 '0) (apply (lambda () G17609) G17613) (if (= G17614 '1) (apply (lambda (G17611) (set! G17609 (G11503 G17611 G17609))) G17613) (error 'apply '"invalid arg count")))) (length G17613)))) '()))) (set! G12330 (G10456 (lambda G17615 (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G17617) (begin (if (procedure? G17617) (void) (assertion-violation 'inv-collector '"BUG: not a procedure" G17617)) G17617)))) (set! G12332 (G10456 (lambda G17619 (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G17621) (begin (if (procedure? G17621) (void) (assertion-violation 'vis-collector '"BUG: not a procedure" G17621)) G17621)))) (set! G12334 (G10456 (lambda G17623 (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G17625) (begin (if (procedure? G17625) (void) (assertion-violation 'imp-collector '"BUG: not a procedure" G17625)) G17625)))) (set! G12336 (lambda (G17627 G17628 G17629) (call-with-values (lambda () (G12314 G17627 '() '() '() '() '() '() G17628 G17629)) (lambda (G17640 G17641 G17642 G17643 G17644 G17645 G17646) ((lambda (G17654 G17655 G17656 G17657 G17658 G17659 G17660) (values (append (apply append (reverse G17655)) G17660) G17659 G17658 (reverse G17657) (reverse G17656))) G17646 G17645 G17644 G17643 G17642 G17641 G17640))))) (set! G12338 (lambda (G17668 G17669 G17670) (call-with-values (lambda () (G12314 (list G17668) G17670 G17670 '() '() '() '() G17669 '#t)) (lambda (G17681 G17682 G17683 G17684 G17685 G17686 G17687) ((lambda (G17695 G17696 G17697 G17698 G17699 G17700 G17701) ((lambda (G17709) ((lambda (G17711) (values G17711 G17700)) (if (null? G17709) (G11486) (if (null? (cdr G17709)) (car G17709) (G11485 '#f G17709))))) (G12269 (reverse G17698) (reverse G17697) (append (apply append (reverse G17696)) G17701) G17700 G17699))) G17687 G17686 G17685 G17684 G17683 G17682 G17681))))) (set! G12340 (lambda (G17713 G17714 G17715 G17716 G17717) ((lambda (G17724) (begin (set! G17724 (G12328)) ((lambda (G17729 G17730 G17731 G17732) ((lambda (G17737) (dynamic-wind G17737 (lambda () (call-with-values (lambda () (G12318 G17714)) (lambda (G17741 G17742) ((lambda (G17745 G17746) (call-with-values (lambda () (G12324 G17715)) (lambda (G17751 G17752) ((lambda (G17755 G17756) ((lambda (G17759) ((lambda (G17761 G17762 G17763) ((lambda (G17771 G17772 G17773 G17774) ((lambda (G17779) (dynamic-wind G17779 (lambda () (call-with-values (lambda () (G12336 G17761 G17759 G17717)) (lambda (G17786 G17787 G17788 G17789 G17790) ((lambda (G17796 G17797 G17798 G17799 G17800) (begin (G11565 G17759) ((lambda (G17806) ((lambda (G17808) ((lambda () (begin (G11567 G17759) ((lambda (G17810 G17811) ((lambda (G17815) (begin (set! G17815 '"attempt to export mutated variable") (call-with-values (lambda () (G12436 G17797 G17810 G17799)) (lambda (G17819 G17820 G17821) ((lambda (G17825 G17826 G17827) (begin (for-each (lambda (G17831) ((lambda (G17833 G17834) ((lambda (G17837) (if G17837 ((lambda (G17839) ((lambda (G17841) (if (eq? G17841 'mutable) (G12452 'export G17815 G17833) (void))) (car G17839))) (cdr G17837)) (void))) (assq G17834 G17827))) (car G17831) (cdr G17831))) G17811) ((lambda (G17843 G17844) (values (G17724) (G17762) (G17763) (G11485 '#f (append G17844 (list G17843))) G17825 G17811 G17827)) (G11488 '#f G17797 G17808 (G12432 G17826 G17806)) (map G11481 (map cdr G17826))))) G17821 G17820 G17819))))) '#f)) (map G11516 G17797) (G12434 G17746 G17745 G17759)))))) (G12271 G17796 G17799 G17798))) (G12251 G17800 G17799 G17798)))) G17790 G17789 G17788 G17787 G17786)))) G17779)) (lambda () (begin ((lambda (G17847) (begin (G17771 G17773) (set! G17773 G17847))) (G17771)) ((lambda (G17849) (begin (G17772 G17774) (set! G17774 G17849))) (G17772)))))) G12330 G12332 G17762 G17763)) (map (lambda (G17851) (G11586 G17851 G11510 (list G17759) '())) G17716) (G12328) (G12328))) (G12326 G17756 G17755))) G17752 G17751)))) G17742 G17741)))) G17737)) (lambda () (begin ((lambda (G17853) (begin (G17729 G17731) (set! G17731 G17853))) (G17729)) ((lambda (G17855) (begin (G17730 G17732) (set! G17732 G17855))) (G17730)))))) G12334 G12466 G17724 '#f))) '#f))) (set! G12342 (lambda (G17857 G17858) (call-with-values (lambda () (G12322 G17857)) (lambda (G17865 G17866 G17867 G17868) ((lambda (G17873 G17874 G17875 G17876) (call-with-values (lambda () (G12320 G17876)) (lambda (G17883 G17884) ((lambda (G17887 G17888) (begin (G17858 G17888) (call-with-values (lambda () (G12340 G17888 G17875 G17874 G17873 '#f)) (lambda (G17898 G17899 G17900 G17901 G17902 G17903 G17904) ((lambda (G17912 G17913 G17914 G17915 G17916 G17917 G17918) (values G17888 G17887 G17918 G17917 G17916 G17915 G17914 G17913 G17912)) G17904 G17903 G17902 G17901 G17900 G17899 G17898))))) G17884 G17883)))) G17868 G17867 G17866 G17865))))) (set! G12344 (lambda (G17926) ((lambda (G17928) ((lambda (G17930) (if (if G17930 (begin '#f (apply (lambda (G17932 G17933 G17934) (eq? (G12458 G17932) 'import)) G17930)) '#f) (apply (lambda (G17938 G17939 G17940) (values G17939 G17940)) G17930) ((lambda (G17944) ((lambda (G17946) (if (if G17946 (begin '#f (apply (lambda (G17948 G17949 G17950) (eq? (G12458 G17948) 'import)) G17946)) '#f) (apply (lambda (G17954 G17955 G17956) (G12452 'expander '"invalid syntax of top-level program" (G11634 G17926))) G17946) ((lambda (G17960) ((lambda (G17962) (if G17962 (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G17962) (G12452 '#f '"invalid syntax" G17960))) (G12219 G17960 '_))) G17944))) (G12219 G17944 '((any . any) . any)))) G17928))) (G12219 G17928 '((any . each-any) . each-any)))) G17926))) (set! G12346 (lambda (G17964) (call-with-values (lambda () (G12344 G17964)) (lambda (G17968 G17969) ((lambda (G17972 G17973) (call-with-values (lambda () (G12340 '() '() G17973 G17972 '#t)) (lambda (G17983 G17984 G17985 G17986 G17987 G17988 G17989) ((lambda (G17997 G17998 G17999 G18000 G18001 G18002 G18003) (values G18002 G18000)) G17989 G17988 G17987 G17986 G17985 G17984 G17983)))) G17969 G17968))))) (set! G12352 (make-record-type-descriptor 'env '#f 'G12350 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G12354 '#f) (set! G12356 (make-record-constructor-descriptor G12352 '#f G12354)) (set! G12361 (record-predicate G12352)) (set! G12363 (record-constructor G12356)) (set! G12365 (record-accessor G12352 '0)) (set! G12367 (record-accessor G12352 '1)) (set! G12369 (record-accessor G12352 '2)) (set! G12371 (record-mutator G12352 '0)) (set! G12373 (record-mutator G12352 '1)) (set! G12375 (record-mutator G12352 '2)) (set! G12377 (G10453 'env (lambda (G18011 G18012) (display '"#<environment>" G18012)))) (set! G12383 (make-record-type-descriptor 'interaction-env '#f 'G12381 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G12385 '#f) (set! G12387 (make-record-constructor-descriptor G12383 '#f G12385)) (set! G12392 (record-predicate G12383)) (set! G12394 (record-constructor G12387)) (set! G12396 (record-accessor G12383 '0)) (set! G12398 (record-accessor G12383 '1)) (set! G12400 (record-accessor G12383 '2)) (set! G12402 (record-mutator G12383 '0)) (set! G12404 (record-mutator G12383 '1)) (set! G12406 (record-mutator G12383 '2)) (set! G12408 (G10453 'interaction-env (lambda (G18015 G18016) (display '"#<environment>" G18016)))) (set! G12410 (lambda () (map (lambda (G18019) G18019) (G11543 (G12396 (G12464)))))) (set! G12412 (lambda (G18021) (vector->list (G12365 G18021)))) (set! G12414 (lambda (G18023) ((lambda (G18025) (if G18025 G18025 (begin '#f (G12392 G18023)))) (G12361 G18023)))) (set! G12416 (lambda G18027 ((lambda (G18029) ((lambda (G18033 G18034) ((lambda (G18037) (dynamic-wind G18037 (lambda () (call-with-values (lambda () (G12324 G18027)) (lambda (G18041 G18042) ((lambda (G18045 G18046) (G12363 G18046 G18045 G18029)) G18042 G18041)))) G18037)) (lambda () ((lambda (G18049) (begin (G18033 G18034) (set! G18034 G18049))) (G18033))))) G12334 G18029)) (G12328)))) (set! G12418 (lambda (G18051) (begin (if (eqv? G18051 '5) (void) (assertion-violation 'null-environment '"not 5" G18051)) (G12416 '(psyntax null-environment-5))))) (set! G12420 (lambda (G18053) (begin (if (eqv? G18053 '5) (void) (assertion-violation 'scheme-report-environment '"not 5" G18053)) (G12416 '(psyntax scheme-report-environment-5))))) (set! G12422 (lambda (G18055 G18056) (if (G12361 G18056) ((lambda (G18059) ((lambda (G18061 G18062 G18063 G18064) ((lambda (G18069) (begin (G11565 G18059) (values G18069 (G18063)))) ((lambda (G18077 G18078 G18079 G18080 G18081 G18082) ((lambda (G18089) (dynamic-wind G18089 (lambda () (G12255 G18061 '() '())) G18089)) (lambda () (begin ((lambda (G18091) (begin (G18077 G18080) (set! G18080 G18091))) (G18077)) ((lambda (G18093) (begin (G18078 G18081) (set! G18081 G18093))) (G18078)) ((lambda (G18095) (begin (G18079 G18082) (set! G18082 G18095))) (G18079)))))) G12330 G12332 G12334 G18063 G18064 G18062))) (G11586 G18055 G11510 (list G18059) '()) (G12369 G18056) (G12328) (G12328))) (G12326 (G12365 G18056) (G12367 G18056))) (if (G12392 G18056) ((lambda (G18097 G18098 G18099) ((lambda (G18103) (call-with-values (lambda () ((lambda (G18115 G18116 G18117 G18118 G18119 G18120 G18121 G18122) ((lambda (G18131) (dynamic-wind G18131 (lambda () (G12338 G18103 G18097 G18098)) G18131)) (lambda () (begin ((lambda (G18133) (begin (G18115 G18119) (set! G18119 G18133))) (G18115)) ((lambda (G18135) (begin (G18116 G18120) (set! G18120 G18135))) (G18116)) ((lambda (G18137) (begin (G18117 G18121) (set! G18121 G18137))) (G18117)) ((lambda (G18139) (begin (G18118 G18122) (set! G18122 G18139))) (G18118)))))) G12466 G12330 G12332 G12334 G18056 G18099 (G12328) (G12328))) (lambda (G18141 G18142) ((lambda (G18145 G18146) (begin (G12404 G18056 G18145) (values G18146 (G18099)))) G18142 G18141)))) (G11586 G18055 G11510 (list G18097) '()))) (G12396 G18056) (G12398 G18056) (G12328)) (assertion-violation 'expand '"not an environment" G18056))))) (set! G12424 (lambda (G18149 G18150) (begin (if (G12414 G18150) (void) (error 'eval '"not an environment" G18150)) (call-with-values (lambda () (G12422 G18149 G18150)) (lambda (G18155 G18156) ((lambda (G18159 G18160) (begin (for-each G11127 G18159) (eval-core (G10555 G18160)))) G18156 G18155)))))) (set! G12426 (lambda G18264 ((lambda (G18265) (if (= G18265 '3) (apply (lambda (G18163 G18164 G18165) ((lambda (G18170 G18172) (begin (set! G18170 (lambda (G18246) (if (null? G18246) (G11486) (G11485 '#f (map (lambda (G18248) ((lambda (G18250 G18251) (list 'set! G18250 G18251)) (car G18248) (cddr G18248))) G18246))))) (set! G18172 (lambda (G18238) (for-each (lambda (G18240) ((lambda (G18242 G18243) (set-symbol-value! G18242 G18243)) (car G18240) (cadr G18240))) G18238))) (call-with-values (lambda () (G12342 G18163 G18165)) (lambda (G18182 G18183 G18184 G18185 G18186 G18187 G18188 G18189 G18190) ((lambda (G18200 G18201 G18202 G18203 G18204 G18205 G18206 G18207 G18208) ((lambda (G18218 G18219 G18220 G18221 G18222 G18223 G18224 G18225 G18226 G18227) (begin (G11125 G18218 G18219 G18220 G18221 G18222 G18223 G18201 G18200 G18224 G18225 G18226 G18227 '#t G18164) (values G18218 G18219 G18220 G18221 G18222 G18223 G18227 G18226 G18201 G18200))) (gensym) G18208 G18207 (map G11131 G18206) (map G11131 G18204) (map G11131 G18205) (lambda () (G18172 G18202)) (lambda () (eval-core (G10555 G18203))) (G18170 G18202) G18203)) G18190 G18189 G18188 G18187 G18186 G18185 G18184 G18183 G18182))))) '#f '#f)) G18264) (if (= G18265 '2) (apply (lambda (G18254 G18255) (G12426 G18254 G18255 (lambda (G18258) (values)))) G18264) (if (= G18265 '1) (apply (lambda (G18260) (G12426 G18260 '#f (lambda (G18262) (values)))) G18264) (error 'apply '"invalid arg count"))))) (length G18264)))) (set! G12428 (lambda (G18266) (call-with-values (lambda () (G12426 G18266)) (lambda (G18278 G18279 G18280 G18281 G18282 G18283 G18284 G18285 G18286 G18287) ((lambda (G18298 G18299 G18300 G18301 G18302 G18303 G18304 G18305 G18306 G18307) (values G18306 G18301 G18299 G18298)) G18287 G18286 G18285 G18284 G18283 G18282 G18281 G18280 G18279 G18278))))) (set! G12430 (lambda (G18318 G18319 G18320) (if (null? G18319) G18320 (G12430 G18318 (cdr G18319) (cons (G18318 (car G18319)) G18320))))) (set! G12432 (lambda (G18324 G18325) (G11485 '#f (cons (G11486) (G12430 (lambda (G18328) (list 'set! (cdr G18328) (car G18328))) G18324 G18325))))) (set! G12434 (lambda (G18330 G18331 G18332) (map (lambda (G18336 G18337) ((lambda (G18340) ((lambda (G18342) ((lambda () (begin (if G18342 (void) (G12452 '#f '"cannot export unbound identifier" G18340)) (cons G18337 G18342))))) (G11666 G18340))) (G11586 G18336 G11510 (list G18332) '()))) G18330 G18331))) (set! G12436 (lambda (G18344 G18345 G18346) ((lambda (G18351) (begin (set! G18351 (lambda (G18379) ((letrec ((G18381 (lambda (G18383 G18384 G18385) (if (pair? G18384) (if (eq? G18383 (car G18384)) (car G18385) (G18381 G18383 (cdr G18384) (cdr G18385))) (assertion-violation 'lookup-make-export '"BUG"))))) G18381) G18379 G18344 G18345))) ((letrec ((G18352 (lambda (G18354 G18355 G18356 G18357) (if (null? G18354) (values G18355 G18356 G18357) ((lambda (G18362) ((lambda (G18364 G18365) ((lambda (G18368) (if (eqv? G18368 'lexical) ((lambda (G18373) ((lambda (G18375 G18376) (G18352 (cdr G18354) (cons (cons* G18364 G18376 G18375) G18355) (cons (cons (G12107 G18373) G18375) G18356) G18357)) (G18351 (G12107 G18373)) (if (G12109 G18373) 'mutable 'global))) (G11676 G18365)) (if (eqv? G18368 'local-macro) ((lambda (G18371) (G18352 (cdr G18354) (cons (cons* G18364 'global-macro G18371) G18355) G18356 (cons (cons G18371 (G11676 G18365)) G18357))) (gensym)) (if (eqv? G18368 'local-macro!) ((lambda (G18369) (G18352 (cdr G18354) (cons (cons* G18364 'global-macro! G18369) G18355) G18356 (cons (cons G18369 (G11676 G18365)) G18357))) (gensym)) (if (memv G18368 '($rtd $module)) (G18352 (cdr G18354) (cons G18362 G18355) G18356 G18357) (assertion-violation 'expander '"BUG: do not know how to export" (G11674 G18365) (G11676 G18365))))))) (G11674 G18365))) (car G18362) (cdr G18362))) (car G18354)))))) G18352) G18346 '() '() '()))) '#f))) (set! G12438 (lambda (G18389) ((lambda (G18391) ((lambda (G18393) (if G18393 (apply (lambda (G18395) (map (lambda (G18397) (G11586 ((lambda (G18399) (if ((lambda (G18401) (if G18401 G18401 (begin '#f (string? G18399)))) (symbol? G18399)) (gensym G18399) (gensym 't))) (G12458 G18397)) G11510 '() '())) G18395)) G18393) ((lambda (G18403) ((lambda (G18405) (if G18405 (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G18405) (G12452 '#f '"invalid syntax" G18403))) (G12219 G18403 '_))) G18391))) (G12219 G18391 'each-any))) G18389))) (set! G12440 (lambda (G18407 G18408) (if (G11640 G18407) (if (G11640 G18408) (G11648 G18407 G18408) (assertion-violation 'free-identifier=? '"not an identifier" G18408)) (assertion-violation 'free-identifier=? '"not an identifier" G18407)))) (set! G12442 (lambda (G18411 G18412) (if (G11640 G18411) (if (G11640 G18412) (G11646 G18411 G18412) (assertion-violation 'bound-identifier=? '"not an identifier" G18412)) (assertion-violation 'bound-identifier=? '"not an identifier" G18411)))) (set! G12444 (lambda (G18415) ((lambda (G18425 G18427 G18429 G18434 G18436 G18438 G18440 G18442 G18444 G18446) (begin (set! G18425 (make-record-type-descriptor '&source-information &condition-rtd 'G18423 '#f '#f '#((immutable file-name) (immutable line)))) (set! G18427 '#f) (set! G18429 (make-record-constructor-descriptor G18425 &condition-rcd G18427)) (set! G18434 (record-predicate G18425)) (set! G18436 (record-constructor G18429)) (set! G18438 (record-accessor G18425 '0)) (set! G18440 (record-accessor G18425 '1)) (set! G18442 (condition-predicate G18425)) (set! G18444 (condition-accessor G18425 G18438)) (set! G18446 (condition-accessor G18425 G18440)) (if (G11584 G18415) ((lambda (G18447) (if (G10448 G18447) ((lambda (G18449) (if (pair? G18449) (G18436 (car G18449) (cdr G18449)) (condition))) (G10449 G18447)) (condition))) (G11588 G18415)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12446 (lambda (G18451 . G18453) (begin (if (for-all string? G18453) (void) (assertion-violation 'syntax-error '"invalid argument" G18453)) (raise (condition (G19165 (if (null? G18453) '"invalid syntax" (apply string-append G18453))) (G19237 (G12458 G18451) '#f) (G12444 G18451) (G12448 G18451)))))) (set! G12448 (lambda (G18455) ((lambda (G18464 G18466 G18468 G18473 G18475 G18477 G18479 G18481) (begin (set! G18464 (make-record-type-descriptor '&trace &condition-rtd 'G18462 '#f '#f '#((immutable form)))) (set! G18466 '#f) (set! G18468 (make-record-constructor-descriptor G18464 &condition-rcd G18466)) (set! G18473 (record-predicate G18464)) (set! G18475 (record-constructor G18468)) (set! G18477 (record-accessor G18464 '0)) (set! G18479 (condition-predicate G18464)) (set! G18481 (condition-accessor G18464 G18477)) ((letrec ((G18482 (lambda (G18484) (if (G11584 G18484) (apply condition (G18475 G18484) (map G18482 (G11594 G18484))) (if (G10448 G18484) (G18475 (G11586 G18484 '() '() '())) (condition)))))) G18482) G18455))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12450 (lambda (G18486 G18487 G18488 G18489) (begin (if (string? G18487) (void) (assertion-violation 'syntax-violation '"message is not a string" G18487)) ((lambda (G18494) (raise (condition (if G18494 (G19211 G18494) (condition)) (G19165 G18487) G18489 (G12444 G18488) (G12448 G18488)))) (if ((lambda (G18496) (if G18496 G18496 (begin '#f (symbol? G18486)))) (string? G18486)) G18486 (if (not G18486) ((lambda (G18498) ((lambda (G18500) (if (if G18500 (begin '#f (apply (lambda (G18502) (G11640 G18502)) G18500)) '#f) (apply (lambda (G18504) (G12458 G18504)) G18500) ((lambda (G18506) ((lambda (G18508) (if (if G18508 (begin '#f (apply (lambda (G18510 G18511) (G11640 G18510)) G18508)) '#f) (apply (lambda (G18514 G18515) (G12458 G18514)) G18508) ((lambda (G18518) ((lambda (G18520) (if G18520 (apply (lambda () '#f) G18520) (G12452 '#f '"invalid syntax" G18518))) (G12219 G18518 '_))) G18506))) (G12219 G18506 '(any . any)))) G18498))) (G12219 G18498 'any))) G18488) (assertion-violation 'syntax-violation '"invalid who argument" G18486))))))) (set! G12452 (lambda G18536 ((lambda (G18537) (if (= G18537 '3) (apply (lambda (G18522 G18523 G18524) (G12452 G18522 G18523 G18524 '#f)) G18536) (if (= G18537 '4) (apply (lambda (G18528 G18529 G18530 G18531) (G12450 G18528 G18529 G18530 (G19237 (G12458 G18530) (G12458 G18531)))) G18536) (error 'apply '"invalid arg count")))) (length G18536)))) (set! G12454 (lambda (G18538) (G11640 G18538))) (set! G12456 (lambda (G18540 G18541) (if (G11640 G18540) (G11606 G18540 G18541) (assertion-violation 'datum->syntax '"not an identifier" G18540)))) (set! G12458 (lambda (G18544) (G11662 G18544))) (set! G12460 (lambda (G18546) (call-with-values (lambda () (G12346 G18546)) (lambda (G18550 G18551) ((lambda (G18554 G18555) (lambda () (begin (for-each G11127 G18555) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G10555 G18554)) (void)) (eval-core (G10555 G18554))))) G18551 G18550))))) (set! G12462 (lambda (G18558) (call-with-values (lambda () (G12346 G18558)) (lambda (G18562 G18563) ((lambda (G18566 G18567) (begin (for-each G11127 G18567) (G10454 (G10555 G18566)))) G18563 G18562))))) (set! G12464 ((lambda (G18570) (lambda () ((lambda (G18572) (if G18572 G18572 (begin '#f ((lambda (G18574 G18575) (begin ((lambda (G18578) (begin (G11551 G18575 (map car G18578)) (G11553 G18575 (map (lambda (G18580) G11510) G18578)) (G11555 G18575 (map cdr G18578)))) (G11084 G18574)) ((lambda (G18582) (begin (set! G18570 G18582) G18582)) (G12394 G18575 '() '())))) (G11120 '(rnrs)) (G11559))))) G18570))) '#f)) (set! G12466 (G10456 '#f)) (begin (set! G18843 G12466) (set! G18842 G12464) (set! G18841 G12462) (set! G18840 G12460) (set! G18839 G12458) (set! G18838 G12456) (set! G18837 G12454) (set! G18836 G12452) (set! G18835 G12450) (set! G18834 G12448) (set! G18833 G12446) (set! G18832 G12444) (set! G18831 G12442) (set! G18830 G12440) (set! G18829 G12438) (set! G18828 G12436) (set! G18827 G12434) (set! G18826 G12432) (set! G18825 G12430) (set! G18824 G12428) (set! G18823 G12426) (set! G18822 G12424) (set! G18821 G12422) (set! G18820 G12420) (set! G18819 G12418) (set! G18818 G12416) (set! G18817 G12414) (set! G18816 G12412) (set! G18815 G12410) (set! G18814 G12408) (set! G18813 G12406) (set! G18812 G12404) (set! G18811 G12402) (set! G18810 G12400) (set! G18809 G12398) (set! G18808 G12396) (set! G18807 G12394) (set! G18806 G12392) (set! G18805 G12387) (set! G18804 G12385) (set! G18803 G12383) (set! G18802 G12377) (set! G18801 G12375) (set! G18800 G12373) (set! G18799 G12371) (set! G18798 G12369) (set! G18797 G12367) (set! G18796 G12365) (set! G18795 G12363) (set! G18794 G12361) (set! G18793 G12356) (set! G18792 G12354) (set! G18791 G12352) (set! G18790 G12346) (set! G18789 G12344) (set! G18788 G12342) (set! G18787 G12340) (set! G18786 G12338) (set! G18785 G12336) (set! G18784 G12334) (set! G18783 G12332) (set! G18782 G12330) (set! G18781 G12328) (set! G18780 G12326) (set! G18779 G12324) (set! G18778 G12322) (set! G18777 G12320) (set! G18776 G12318) (set! G18775 G12316) (set! G18774 G12314) (set! G18773 G12312) (set! G18772 G12310) (set! G18771 G12308) (set! G18770 G12306) (set! G18769 G12304) (set! G18768 G12302) (set! G18767 G12300) (set! G18766 G12298) (set! G18765 G12296) (set! G18764 G12294) (set! G18763 G12289) (set! G18762 G12287) (set! G18761 G12285) (set! G18760 G12279) (set! G18759 G12277) (set! G18758 G12275) (set! G18757 G12273) (set! G18756 G12271) (set! G18755 G12269) (set! G18754 G12267) (set! G18753 G12265) (set! G18752 G12263) (set! G18751 G12261) (set! G18750 G12259) (set! G18749 G12257) (set! G18748 G12255) (set! G18747 G12253) (set! G18746 G12251) (set! G18745 G12249) (set! G18744 G12247) (set! G18743 G12245) (set! G18742 G12243) (set! G18741 G12241) (set! G18740 G12239) (set! G18739 G12237) (set! G18738 G12235) (set! G18737 G12233) (set! G18736 G12231) (set! G18735 G12229) (set! G18734 G12227) (set! G18733 G12225) (set! G18732 G12223) (set! G18731 G12221) (set! G18730 G12219) (set! G18729 G12217) (set! G18728 G12215) (set! G18727 G12213) (set! G18726 G12211) (set! G18725 G12209) (set! G18724 G12207) (set! G18723 G12205) (set! G18722 G12203) (set! G18721 G12201) (set! G18720 G12199) (set! G18719 G12197) (set! G18718 G12195) (set! G18717 G12193) (set! G18716 G12191) (set! G18715 G12189) (set! G18714 G12187) (set! G18713 G12185) (set! G18712 G12183) (set! G18711 G12181) (set! G18710 G12179) (set! G18709 G12177) (set! G18708 G12175) (set! G18707 G12173) (set! G18706 G12171) (set! G18705 G12169) (set! G18704 G12167) (set! G18703 G12165) (set! G18702 G12163) (set! G18701 G12161) (set! G18700 G12159) (set! G18699 G12157) (set! G18698 G12155) (set! G18697 G12153) (set! G18696 G12151) (set! G18695 G12149) (set! G18694 G12147) (set! G18693 G12145) (set! G18692 G12143) (set! G18691 G12141) (set! G18690 G12139) (set! G18689 G12137) (set! G18688 G12135) (set! G18687 G12133) (set! G18686 G12131) (set! G18685 G12129) (set! G18684 G12127) (set! G18683 G12125) (set! G18682 G12123) (set! G18681 G12121) (set! G18680 G12119) (set! G18679 G12117) (set! G18678 G12115) (set! G18677 G12113) (set! G18676 G12111) (set! G18675 G12109) (set! G18674 G12107) (set! G18673 G12105) (set! G18672 G12103) (set! G18671 G12101) (set! G18670 G12099) (set! G18669 G11711) (set! G18668 G11709) (set! G18667 G11707) (set! G18666 G11705) (set! G18665 G11703) (set! G18664 G11680) (set! G18663 G11678) (set! G18662 G11676) (set! G18661 G11674) (set! G18660 G11672) (set! G18659 G11670) (set! G18658 G11668) (set! G18657 G11666) (set! G18656 G11664) (set! G18655 G11662) (set! G18654 G11660) (set! G18653 G11658) (set! G18652 G11656) (set! G18651 G11654) (set! G18650 G11652) (set! G18649 G11650) (set! G18648 G11648) (set! G18647 G11646) (set! G18646 G11644) (set! G18645 G11642) (set! G18644 G11640) (set! G18643 G11638) (set! G18642 G11636) (set! G18641 G11634) (set! G18640 G11632) (set! G18639 G11630) (set! G18638 G11628) (set! G18637 G11626) (set! G18636 G11624) (set! G18635 G11622) (set! G18634 G11620) (set! G18633 G11618) (set! G18632 G11616) (set! G18631 G11614) (set! G18630 G11612) (set! G18629 G11610) (set! G18628 G11608) (set! G18627 G11606) (set! G18626 G11604) (set! G18625 G11602) (set! G18624 G11600) (set! G18623 G11598) (set! G18622 G11596) (set! G18621 G11594) (set! G18620 G11592) (set! G18619 G11590) (set! G18618 G11588) (set! G18617 G11586) (set! G18616 G11584) (set! G18615 G11579) (set! G18614 G11577) (set! G18613 G11575) (set! G18612 G11569) (set! G18611 G11567) (set! G18610 G11565) (set! G18609 G11563) (set! G18608 G11561) (set! G18607 G11559) (set! G18606 G11557) (set! G18605 G11555) (set! G18604 G11553) (set! G18603 G11551) (set! G18602 G11549) (set! G18601 G11547) (set! G18600 G11545) (set! G18599 G11543) (set! G18598 G11541) (set! G18597 G11539) (set! G18596 G11534) (set! G18595 G11532) (set! G18594 G11530) (set! G18593 G11524) (set! G18592 G11522) (set! G18591 G11520) (set! G18590 G11518) (set! G18589 G11516) (set! G18588 G11514) (set! G18587 G11512) (set! G18586 G11510) (set! G18585 G11505) (set! G18584 G11503) (G11117 G12426)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambdabegin (set! G18853 (make-record-type-descriptor '&condition '#f 'G18851 '#f '#f '#())) (set! G18855 '#f) (set! G18857 (make-record-constructor-descriptor G18853 '#f G18855)) (set! G18862 (record-predicate G18853)) (set! G18864 (record-constructor G18857)) (set! G18866 G18853) (set! G18868 G18857) (set! G18876 (make-record-type-descriptor '&message G18853 'G18874 '#f '#f '#((immutable message)))) (set! G18878 '#f) (set! G18880 (make-record-constructor-descriptor G18876 G18857 G18878)) (set! G18885 (record-predicate G18876)) (set! G18887 (record-constructor G18880)) (set! G18889 (record-accessor G18876 '0)) (set! G18891 (condition-predicate G18876)) (set! G18893 (condition-accessor G18876 G18889)) (set! G18900 (make-record-type-descriptor '&warning G18853 'G18898 '#f '#f '#())) (set! G18902 '#f) (set! G18904 (make-record-constructor-descriptor G18900 G18857 G18902)) (set! G18909 (record-predicate G18900)) (set! G18911 (record-constructor G18904)) (set! G18913 (condition-predicate G18900)) (set! G18920 (make-record-type-descriptor '&serious G18853 'G18918 '#f '#f '#())) (set! G18922 '#f) (set! G18924 (make-record-constructor-descriptor G18920 G18857 G18922)) (set! G18929 (record-predicate G18920)) (set! G18931 (record-constructor G18924)) (set! G18933 (condition-predicate G18920)) (set! G18940 (make-record-type-descriptor '&error G18920 'G18938 '#f '#f '#())) (set! G18942 '#f) (set! G18944 (make-record-constructor-descriptor G18940 G18924 G18942)) (set! G18949 (record-predicate G18940)) (set! G18951 (record-constructor G18944)) (set! G18953 (condition-predicate G18940)) (set! G18960 (make-record-type-descriptor '&violation G18920 'G18958 '#f '#f '#())) (set! G18962 '#f) (set! G18964 (make-record-constructor-descriptor G18960 G18924 G18962)) (set! G18969 (record-predicate G18960)) (set! G18971 (record-constructor G18964)) (set! G18973 (condition-predicate G18960)) (set! G18980 (make-record-type-descriptor '&assertion G18960 'G18978 '#f '#f '#())) (set! G18982 '#f) (set! G18984 (make-record-constructor-descriptor G18980 G18964 G18982)) (set! G18989 (record-predicate G18980)) (set! G18991 (record-constructor G18984)) (set! G18993 (condition-predicate G18980)) (set! G19001 (make-record-type-descriptor '&irritants G18853 'G18999 '#f '#f '#((immutable irritants)))) (set! G19003 '#f) (set! G19005 (make-record-constructor-descriptor G19001 G18857 G19003)) (set! G19010 (record-predicate G19001)) (set! G19012 (record-constructor G19005)) (set! G19014 (record-accessor G19001 '0)) (set! G19016 (condition-predicate G19001)) (set! G19018 (condition-accessor G19001 G19014)) (set! G19026 (make-record-type-descriptor '&who G18853 'G19024 '#f '#f '#((immutable who)))) (set! G19028 '#f) (set! G19030 (make-record-constructor-descriptor G19026 G18857 G19028)) (set! G19035 (record-predicate G19026)) (set! G19037 (record-constructor G19030)) (set! G19039 (record-accessor G19026 '0)) (set! G19041 (condition-predicate G19026)) (set! G19043 (condition-accessor G19026 G19039)) (set! G19050 (make-record-type-descriptor '&non-continuable G18960 'G19048 '#f '#f '#())) (set! G19052 '#f) (set! G19054 (make-record-constructor-descriptor G19050 G18964 G19052)) (set! G19059 (record-predicate G19050)) (set! G19061 (record-constructor G19054)) (set! G19063 (condition-predicate G19050)) (set! G19070 (make-record-type-descriptor '&implementation-restriction G18960 'G19068 '#f '#f '#())) (set! G19072 '#f) (set! G19074 (make-record-constructor-descriptor G19070 G18964 G19072)) (set! G19079 (record-predicate G19070)) (set! G19081 (record-constructor G19074)) (set! G19083 (condition-predicate G19070)) (set! G19090 (make-record-type-descriptor '&lexical G18960 'G19088 '#f '#f '#())) (set! G19092 '#f) (set! G19094 (make-record-constructor-descriptor G19090 G18964 G19092)) (set! G19099 (record-predicate G19090)) (set! G19101 (record-constructor G19094)) (set! G19103 (condition-predicate G19090)) (set! G19112 (make-record-type-descriptor '&syntax G18960 'G19110 '#f '#f '#((immutable form) (immutable subform)))) (set! G19114 '#f) (set! G19116 (make-record-constructor-descriptor G19112 G18964 G19114)) (set! G19121 (record-predicate G19112)) (set! G19123 (record-constructor G19116)) (set! G19125 (record-accessor G19112 '0)) (set! G19127 (record-accessor G19112 '1)) (set! G19129 (condition-predicate G19112)) (set! G19131 (condition-accessor G19112 G19125)) (set! G19133 (condition-accessor G19112 G19127)) (set! G19140 (make-record-type-descriptor '&undefined G18960 'G19138 '#f '#f '#())) (set! G19142 '#f) (set! G19144 (make-record-constructor-descriptor G19140 G18964 G19142)) (set! G19149 (record-predicate G19140)) (set! G19151 (record-constructor G19144)) (set! G19153 (condition-predicate G19140)) (begin (set! G19248 G19153) (set! G19247 G19151) (set! G19246 G19149) (set! G19245 G19144) (set! G19244 G19142) (set! G19243 G19140) (set! G19242 G19133) (set! G19241 G19131) (set! G19240 G19129) (set! G19239 G19127) (set! G19238 G19125) (set! G19237 G19123) (set! G19236 G19121) (set! G19235 G19116) (set! G19234 G19114) (set! G19233 G19112) (set! G19232 G19103) (set! G19231 G19101) (set! G19230 G19099) (set! G19229 G19094) (set! G19228 G19092) (set! G19227 G19090) (set! G19226 G19083) (set! G19225 G19081) (set! G19224 G19079) (set! G19223 G19074) (set! G19222 G19072) (set! G19221 G19070) (set! G19220 G19063) (set! G19219 G19061) (set! G19218 G19059) (set! G19217 G19054) (set! G19216 G19052) (set! G19215 G19050) (set! G19214 G19043) (set! G19213 G19041) (set! G19212 G19039) (set! G19211 G19037) (set! G19210 G19035) (set! G19209 G19030) (set! G19208 G19028) (set! G19207 G19026) (set! G19206 G19018) (set! G19205 G19016) (set! G19204 G19014) (set! G19203 G19012) (set! G19202 G19010) (set! G19201 G19005) (set! G19200 G19003) (set! G19199 G19001) (set! G19198 G18993) (set! G19197 G18991) (set! G19196 G18989) (set! G19195 G18984) (set! G19194 G18982) (set! G19193 G18980) (set! G19192 G18973) (set! G19191 G18971) (set! G19190 G18969) (set! G19189 G18964) (set! G19188 G18962) (set! G19187 G18960) (set! G19186 G18953) (set! G19185 G18951) (set! G19184 G18949) (set! G19183 G18944) (set! G19182 G18942) (set! G19181 G18940) (set! G19180 G18933) (set! G19179 G18931) (set! G19178 G18929) (set! G19177 G18924) (set! G19176 G18922) (set! G19175 G18920) (set! G19174 G18913) (set! G19173 G18911) (set! G19172 G18909) (set! G19171 G18904) (set! G19170 G18902) (set! G19169 G18900) (set! G19168 G18893) (set! G19167 G18891) (set! G19166 G18889) (set! G19165 G18887) (set! G19164 G18885) (set! G19163 G18880) (set! G19162 G18878) (set! G19161 G18876) (set! G19160 G18868) (set! G19159 G18866) (set! G19158 G18864) (set! G19157 G18862) (set! G19156 G18857) (set! G19155 G18855) (set! G19154 G18853)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambdabegin (set! G19256 (make-record-type-descriptor '&i/o &error-rtd 'G19254 '#f '#f '#())) (set! G19258 '#f) (set! G19260 (make-record-constructor-descriptor G19256 &error-rcd G19258)) (set! G19265 (record-predicate G19256)) (set! G19267 (record-constructor G19260)) (set! G19269 (condition-predicate G19256)) (set! G19276 (make-record-type-descriptor '&i/o-read G19256 'G19274 '#f '#f '#())) (set! G19278 '#f) (set! G19280 (make-record-constructor-descriptor G19276 G19260 G19278)) (set! G19285 (record-predicate G19276)) (set! G19287 (record-constructor G19280)) (set! G19289 (condition-predicate G19276)) (set! G19296 (make-record-type-descriptor '&i/o-write G19256 'G19294 '#f '#f '#())) (set! G19298 '#f) (set! G19300 (make-record-constructor-descriptor G19296 G19260 G19298)) (set! G19305 (record-predicate G19296)) (set! G19307 (record-constructor G19300)) (set! G19309 (condition-predicate G19296)) (set! G19317 (make-record-type-descriptor '&i/o-invalid-position G19256 'G19315 '#f '#f '#((immutable position)))) (set! G19319 '#f) (set! G19321 (make-record-constructor-descriptor G19317 G19260 G19319)) (set! G19326 (record-predicate G19317)) (set! G19328 (record-constructor G19321)) (set! G19330 (record-accessor G19317 '0)) (set! G19332 (condition-predicate G19317)) (set! G19334 (condition-accessor G19317 G19330)) (set! G19342 (make-record-type-descriptor '&i/o-filename G19256 'G19340 '#f '#f '#((immutable filename)))) (set! G19344 '#f) (set! G19346 (make-record-constructor-descriptor G19342 G19260 G19344)) (set! G19351 (record-predicate G19342)) (set! G19353 (record-constructor G19346)) (set! G19355 (record-accessor G19342 '0)) (set! G19357 (condition-predicate G19342)) (set! G19359 (condition-accessor G19342 G19355)) (set! G19366 (make-record-type-descriptor '&i/o-file-protection G19256 'G19364 '#f '#f '#())) (set! G19368 '#f) (set! G19370 (make-record-constructor-descriptor G19366 G19260 G19368)) (set! G19375 (record-predicate G19366)) (set! G19377 (record-constructor G19370)) (set! G19379 (condition-predicate G19366)) (set! G19386 (make-record-type-descriptor '&i/o-file-is-read-only G19366 'G19384 '#f '#f '#())) (set! G19388 '#f) (set! G19390 (make-record-constructor-descriptor G19386 G19370 G19388)) (set! G19395 (record-predicate G19386)) (set! G19397 (record-constructor G19390)) (set! G19399 (condition-predicate G19386)) (set! G19406 (make-record-type-descriptor '&i/o-file-already-exists G19342 'G19404 '#f '#f '#())) (set! G19408 '#f) (set! G19410 (make-record-constructor-descriptor G19406 G19346 G19408)) (set! G19415 (record-predicate G19406)) (set! G19417 (record-constructor G19410)) (set! G19419 (condition-predicate G19406)) (set! G19426 (make-record-type-descriptor '&i/o-file-does-not-exist G19342 'G19424 '#f '#f '#())) (set! G19428 '#f) (set! G19430 (make-record-constructor-descriptor G19426 G19346 G19428)) (set! G19435 (record-predicate G19426)) (set! G19437 (record-constructor G19430)) (set! G19439 (condition-predicate G19426)) (set! G19447 (make-record-type-descriptor '&i/o-port G19256 'G19445 '#f '#f '#((immutable port)))) (set! G19449 '#f) (set! G19451 (make-record-constructor-descriptor G19447 G19260 G19449)) (set! G19456 (record-predicate G19447)) (set! G19458 (record-constructor G19451)) (set! G19460 (record-accessor G19447 '0)) (set! G19462 (condition-predicate G19447)) (set! G19464 (condition-accessor G19447 G19460)) (set! G19471 (make-record-type-descriptor '&i/o-decoding G19447 'G19469 '#f '#f '#())) (set! G19473 '#f) (set! G19475 (make-record-constructor-descriptor G19471 G19451 G19473)) (set! G19480 (record-predicate G19471)) (set! G19482 (record-constructor G19475)) (set! G19484 (condition-predicate G19471)) (set! G19492 (make-record-type-descriptor '&i/o-encoding G19447 'G19490 '#f '#f '#((immutable char)))) (set! G19494 '#f) (set! G19496 (make-record-constructor-descriptor G19492 G19451 G19494)) (set! G19501 (record-predicate G19492)) (set! G19503 (record-constructor G19496)) (set! G19505 (record-accessor G19492 '0)) (set! G19507 (condition-predicate G19492)) (set! G19509 (condition-accessor G19492 G19505)) (begin (set! G19589 G19509) (set! G19588 G19507) (set! G19587 G19505) (set! G19586 G19503) (set! G19585 G19501) (set! G19584 G19496) (set! G19583 G19494) (set! G19582 G19492) (set! G19581 G19484) (set! G19580 G19482) (set! G19579 G19480) (set! G19578 G19475) (set! G19577 G19473) (set! G19576 G19471) (set! G19575 G19464) (set! G19574 G19462) (set! G19573 G19460) (set! G19572 G19458) (set! G19571 G19456) (set! G19570 G19451) (set! G19569 G19449) (set! G19568 G19447) (set! G19567 G19439) (set! G19566 G19437) (set! G19565 G19435) (set! G19564 G19430) (set! G19563 G19428) (set! G19562 G19426) (set! G19561 G19419) (set! G19560 G19417) (set! G19559 G19415) (set! G19558 G19410) (set! G19557 G19408) (set! G19556 G19406) (set! G19555 G19399) (set! G19554 G19397) (set! G19553 G19395) (set! G19552 G19390) (set! G19551 G19388) (set! G19550 G19386) (set! G19549 G19379) (set! G19548 G19377) (set! G19547 G19375) (set! G19546 G19370) (set! G19545 G19368) (set! G19544 G19366) (set! G19543 G19359) (set! G19542 G19357) (set! G19541 G19355) (set! G19540 G19353) (set! G19539 G19351) (set! G19538 G19346) (set! G19537 G19344) (set! G19536 G19342) (set! G19535 G19334) (set! G19534 G19332) (set! G19533 G19330) (set! G19532 G19328) (set! G19531 G19326) (set! G19530 G19321) (set! G19529 G19319) (set! G19528 G19317) (set! G19527 G19309) (set! G19526 G19307) (set! G19525 G19305) (set! G19524 G19300) (set! G19523 G19298) (set! G19522 G19296) (set! G19521 G19289) (set! G19520 G19287) (set! G19519 G19285) (set! G19518 G19280) (set! G19517 G19278) (set! G19516 G19276) (set! G19515 G19269) (set! G19514 G19267) (set! G19513 G19265) (set! G19512 G19260) (set! G19511 G19258) (set! G19510 G19256)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G10552 (lambda (G20552) ((lambda (G20554) (if G20554 (cdr G20554) '#f)) (assq G20552 '((syntax-error . G18833) (syntax-dispatch . G18730) (load . G19740) (interaction-environment . G18842) (make-variable-transformer . G18666) (identifier? . G18837) (generate-temporaries . G18829) (free-identifier=? . G18830) (syntax->datum . G18839) (datum->syntax . G18838) (bound-identifier=? . G18831) (make-i/o-write-error . G19526) (make-i/o-read-error . G19520) (make-i/o-port-error . G19572) (make-i/o-invalid-position-error . G19532) (make-i/o-filename-error . G19540) (make-i/o-file-protection-error . G19548) (make-i/o-file-is-read-only-error . G19554) (make-i/o-file-does-not-exist-error . G19566) (make-i/o-file-already-exists-error . G19560) (make-i/o-error . G19514) (make-i/o-encoding-error . G19586) (make-i/o-decoding-error . G19580) (i/o-write-error? . G19527) (i/o-read-error? . G19521) (i/o-port-error? . G19574) (i/o-invalid-position-error? . G19534) (i/o-filename-error? . G19542) (i/o-file-protection-error? . G19549) (i/o-file-is-read-only-error? . G19555) (i/o-file-does-not-exist-error? . G19567) (i/o-file-already-exists-error? . G19561) (i/o-error? . G19515) (i/o-error-port . G19575) (i/o-error-filename . G19543) (i/o-encoding-error? . G19588) (i/o-encoding-error-char . G19589) (i/o-decoding-error? . G19581) (scheme-report-environment . G18820) (null-environment . G18819) (command-line . G19737) (eval . G18822) (environment . G18818) (who-condition? . G19213) (warning? . G19174) (violation? . G19192) (undefined-violation? . G19248) (syntax-violation? . G19240) (syntax-violation-subform . G19242) (syntax-violation-form . G19241) (syntax-violation . G18836) (serious-condition? . G19180) (non-continuable-violation? . G19220) (message-condition? . G19167) (make-who-condition . G19211) (make-warning . G19173) (make-violation . G19191) (make-undefined-violation . G19247) (make-syntax-violation . G19237) (make-serious-condition . G19179) (make-non-continuable-violation . G19219) (make-message-condition . G19165) (make-lexical-violation . G19231) (make-irritants-condition . G19203) (make-implementation-restriction-violation . G19225) (make-error . G19185) (make-assertion-violation . G19197) (lexical-violation? . G19232) (irritants-condition? . G19205) (implementation-restriction-violation? . G19226) (error? . G19186) (condition-who . G19214) (condition-message . G19168) (condition-irritants . G19206) (assertion-violation? . G19198)))))) (G11125 'G20508 '(ikarus interaction) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G11125 'G20509 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G19797) (unquote . G19796) (delay . G19789) (or . G19787) (and . G19786) (do . G19785) (cond . G19784) (let* . G19783) (let . G19782) (quasiquote . G19776) (syntax-rules . G19775) (case . G19770) (if . G19766) (letrec . G19764) (lambda . G19761) (quote . G19758) (letrec-syntax . G19756) (let-syntax . G19755) (set! . G19754) (begin . G19752) (define-syntax . G19750) (define . G19749)) '() values values '#f '#f '#t '#f) (G11125 'G20510 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G20378) (string-ci>=? . G20377) (string-ci=? . G20376) (string-ci<? . G20375) (string-ci<=? . G20374) (char-whitespace? . G20373) (char-upper-case? . G20372) (char-numeric? . G20370) (char-lower-case? . G20369) (char-upcase . G20367) (char-downcase . G20364) (char-ci>? . G20363) (char-ci>=? . G20362) (char-ci=? . G20361) (char-ci<? . G20360) (char-ci<=? . G20359) (char-alphabetic? . G20358) (call-with-output-file . G20314) (call-with-input-file . G20313) (write-char . G20312) (write . G20311) (with-output-to-file . G20310) (with-input-from-file . G20309) (read-char . G20308) (read . G20307) (peek-char . G20306) (open-output-file . G20305) (open-input-file . G20304) (newline . G20303) (display . G20302) (close-output-port . G20301) (close-input-port . G20300) (eof-object . G20298) (current-output-port . G20296) (current-input-port . G20295) (output-port? . G20294) (input-port? . G20293) (scheme-report-environment . G12419) (quotient . G20235) (null-environment . G12417) (remainder . G20234) (modulo . G20233) (inexact->exact . G20232) (force . G20231) (exact->inexact . G20230) (string-fill! . G20228) (string-set! . G20227) (set-cdr! . G20226) (set-car! . G20225) (memv . G20219) (memq . G20218) (member . G20216) (assv . G20208) (assq . G20207) (assoc . G20205) (eval . G12423) (zero? . G20008) (vector? . G20007) (vector-set! . G20006) (vector-ref . G20005) (vector-length . G20003) (vector-fill! . G20001) (vector->list . G20000) (vector . G19999) (values . G19998) (truncate . G19997) (tan . G19996) (symbol? . G19995) (symbol->string . G19993) (substring . G19992) (string? . G19991) (string>? . G19990) (string>=? . G19989) (string=? . G19988) (string<? . G19987) (string<=? . G19986) (string-ref . G19985) (string-length . G19984) (string-copy . G19982) (string-append . G19981) (string->symbol . G19980) (string->number . G19979) (string->list . G19978) (string . G19977) (sqrt . G19976) (sin . G19975) (round . G19974) (reverse . G19973) (real? . G19972) (real-part . G19970) (rationalize . G19969) (rational? . G19968) (procedure? . G19966) (positive? . G19965) (pair? . G19964) (odd? . G19963) (numerator . G19962) (number? . G19961) (number->string . G19960) (not . G19958) (negative? . G19957) (min . G19955) (max . G19954) (map . G19953) (make-vector . G19952) (make-string . G19951) (make-rectangular . G19950) (make-polar . G19949) (magnitude . G19948) (log . G19947) (list? . G19946) (list-tail . G19945) (list-ref . G19944) (list->vector . G19943) (list->string . G19942) (list . G19941) (length . G19940) (lcm . G19939) (integer? . G19938) (integer->char . G19936) (inexact? . G19934) (imag-part . G19932) (gcd . G19931) (for-each . G19930) (floor . G19929) (expt . G19927) (exp . G19926) (exact? . G19925) (even? . G19922) (eqv? . G19920) (equal? . G19919) (eq? . G19918) (dynamic-wind . G19917) (denominator . G19910) (cos . G19909) (cons . G19908) (complex? . G19907) (char? . G19906) (char>? . G19905) (char>=? . G19904) (char=? . G19903) (char<? . G19902) (char<=? . G19901) (char->integer . G19900) (ceiling . G19899) (call-with-values . G19898) (call-with-current-continuation . G19896) (cddddr . G19895) (cdddar . G19894) (cddadr . G19893) (cddaar . G19892) (cdaddr . G19891) (cdadar . G19890) (cdaadr . G19889) (cdaaar . G19888) (cadddr . G19887) (caddar . G19886) (cadadr . G19885) (cadaar . G19884) (caaddr . G19883) (caadar . G19882) (caaadr . G19881) (caaaar . G19880) (cdddr . G19879) (cddar . G19878) (cdadr . G19877) (cdaar . G19876) (caddr . G19875) (cadar . G19874) (caadr . G19873) (caaar . G19872) (cddr . G19871) (cdar . G19870) (cadr . G19869) (caar . G19868) (cdr . G19867) (car . G19866) (boolean? . G19865) (atan . G19863) (asin . G19861) (apply . G19860) (append . G19859) (angle . G19858) (acos . G19857) (abs . G19856) (/ . G19855) (* . G19854) (- . G19853) (+ . G19852) (>= . G19851) (> . G19850) (= . G19849) (<= . G19848) (< . G19847) (unquote-splicing . G19797) (unquote . G19796) (delay . G19789) (or . G19787) (and . G19786) (do . G19785) (cond . G19784) (let* . G19783) (let . G19782) (quasiquote . G19776) (syntax-rules . G19775) (case . G19770) (if . G19766) (letrec . G19764) (lambda . G19761) (quote . G19758) (letrec-syntax . G19756) (let-syntax . G19755) (set! . G19754) (begin . G19752) (define-syntax . G19750) (define . G19749)) '() values values '#f '#f '#t '#f) (G11125 'G20511 '(psyntax modules) '() '() '() '() '((module . G19751)) '() values values '#f '#f '#t '#f) (G11125 'G20512 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G11125 'G20513 '(rnrs) '(6) '() '() '() '((regexp? . G20444) (string-upcase . G20386) (string-titlecase . G20385) (string-normalize-nfkd . G20384) (string-normalize-nfkc . G20383) (string-normalize-nfd . G20382) (string-normalize-nfc . G20381) (string-foldcase . G20380) (string-downcase . G20379) (string-ci>? . G20378) (string-ci>=? . G20377) (string-ci=? . G20376) (string-ci<? . G20375) (string-ci<=? . G20374) (char-whitespace? . G20373) (char-upper-case? . G20372) (char-title-case? . G20371) (char-numeric? . G20370) (char-lower-case? . G20369) (char-general-category . G20368) (char-upcase . G20367) (char-titlecase . G20366) (char-foldcase . G20365) (char-downcase . G20364) (char-ci>? . G20363) (char-ci>=? . G20362) (char-ci=? . G20361) (char-ci<? . G20360) (char-ci<=? . G20359) (char-alphabetic? . G20358) (make-variable-transformer . G11704) (identifier? . G12453) (generate-temporaries . G12437) (free-identifier=? . G12439) (syntax->datum . G12457) (datum->syntax . G12455) (bound-identifier=? . G12441) (record-type-descriptor? . G20357) (record-predicate . G20356) (record-mutator . G20355) (record-constructor . G20354) (record-accessor . G20353) (make-record-type-descriptor . G20352) (make-record-constructor-descriptor . G20351) (record? . G20350) (record-type-uid . G20349) (record-type-sealed? . G20348) (record-type-parent . G20347) (record-type-opaque? . G20346) (record-type-name . G20345) (record-type-generative? . G20344) (record-type-field-names . G20343) (record-rtd . G20342) (record-field-mutable? . G20341) (delete-file . G20340) (file-exists? . G20339) (vector-sort! . G20338) (vector-sort . G20337) (list-sort . G20336) (symbol-hash . G20335) (string-ci-hash . G20334) (string-hash . G20333) (equal-hash . G20332) (hashtable-equivalence-function . G20331) (make-hashtable . G20330) (hashtable-hash-function . G20329) (make-eqv-hashtable . G20328) (make-eq-hashtable . G20327) (hashtable? . G20326) (hashtable-update! . G20325) (hashtable-size . G20324) (hashtable-set! . G20323) (hashtable-ref . G20322) (hashtable-mutable? . G20321) (hashtable-keys . G20320) (hashtable-entries . G20319) (hashtable-delete! . G20318) (hashtable-copy . G20317) (hashtable-contains? . G20316) (hashtable-clear! . G20315) (call-with-output-file . G20314) (call-with-input-file . G20313) (write-char . G20312) (write . G20311) (with-output-to-file . G20310) (with-input-from-file . G20309) (read-char . G20308) (read . G20307) (peek-char . G20306) (open-output-file . G20305) (open-input-file . G20304) (newline . G20303) (display . G20302) (close-output-port . G20301) (close-input-port . G20300) (eof-object? . G20299) (eof-object . G20298) (current-error-port . G20297) (current-output-port . G20296) (current-input-port . G20295) (output-port? . G20294) (input-port? . G20293) (utf-8-codec . G20292) (utf-16-codec . G20291) (transcoder-error-handling-mode . G20290) (transcoder-eol-style . G20289) (transcoder-codec . G20288) (transcoded-port . G20287) (textual-port? . G20286) (string->bytevector . G20285) (standard-output-port . G20284) (standard-input-port . G20283) (standard-error-port . G20282) (set-port-position! . G20281) (put-u8 . G20280) (put-string . G20279) (put-datum . G20278) (put-char . G20277) (put-bytevector . G20276) (port? . G20275) (port-transcoder . G20274) (port-position . G20273) (port-has-set-port-position!? . G20272) (port-has-port-position? . G20271) (port-eof? . G20270) (output-port-buffer-mode . G20269) (open-string-output-port . G20268) (open-string-input-port . G20267) (open-file-output-port . G20266) (open-file-input/output-port . G20265) (open-file-input-port . G20264) (open-bytevector-output-port . G20263) (open-bytevector-input-port . G20262) (native-transcoder . G20261) (native-eol-style . G20260) (make-transcoder . G20259) (latin-1-codec . G20258) (make-i/o-write-error . G19306) (make-i/o-read-error . G19286) (make-i/o-port-error . G19457) (make-i/o-invalid-position-error . G19327) (make-i/o-filename-error . G19352) (make-i/o-file-protection-error . G19376) (make-i/o-file-is-read-only-error . G19396) (make-i/o-file-does-not-exist-error . G19436) (make-i/o-file-already-exists-error . G19416) (make-i/o-error . G19266) (make-i/o-encoding-error . G19502) (make-i/o-decoding-error . G19481) (make-custom-textual-output-port . G20257) (make-custom-textual-input/output-port . G20256) (make-custom-textual-input-port . G20255) (make-custom-binary-output-port . G20254) (make-custom-binary-input/output-port . G20253) (make-custom-binary-input-port . G20252) (make-bytevector . G20251) (lookahead-u8 . G20250) (lookahead-char . G20249) (i/o-write-error? . G19308) (i/o-read-error? . G19288) (i/o-port-error? . G19461) (i/o-invalid-position-error? . G19331) (i/o-filename-error? . G19356) (i/o-file-protection-error? . G19378) (i/o-file-is-read-only-error? . G19398) (i/o-file-does-not-exist-error? . G19438) (i/o-file-already-exists-error? . G19418) (i/o-error? . G19268) (i/o-error-port . G19463) (i/o-error-filename . G19358) (i/o-encoding-error? . G19506) (i/o-encoding-error-char . G19508) (i/o-decoding-error? . G19483) (get-u8 . G20248) (get-string-n! . G20247) (get-string-n . G20246) (get-string-all . G20245) (get-line . G20244) (get-datum . G20243) (get-char . G20242) (get-bytevector-some . G20241) (get-bytevector-n! . G20240) (get-bytevector-n . G20239) (get-bytevector-all . G20238) (flush-output-port . G20237) (close-port . G20236) (exit . G20229) (command-line . G19597) (remove . G20224) (remv . G20223) (remp . G20222) (remq . G20221) (partition . G20220) (memv . G20219) (memq . G20218) (memp . G20217) (member . G20216) (exists . G20215) (for-all . G20214) (fold-right . G20213) (fold-left . G20212) (find . G20211) (filter . G20210) (cons* . G20209) (assv . G20208) (assq . G20207) (assp . G20206) (assoc . G20205) (call-with-string-output-port . G20204) (call-with-port . G20203) (call-with-bytevector-output-port . G20202) (bytevector->string . G20201) (buffer-mode? . G20200) (binary-port? . G20199) (with-exception-handler . G20198) (raise-continuable . G20197) (raise . G20196) (make-enumeration . G20195) (enum-set=? . G20194) (enum-set-universe . G20193) (enum-set-union . G20192) (enum-set-subset? . G20191) (enum-set-projection . G20190) (enum-set-member? . G20189) (enum-set-intersection . G20188) (enum-set-indexer . G20187) (enum-set-difference . G20186) (enum-set-constructor . G20185) (enum-set-complement . G20184) (enum-set->list . G20183) (who-condition? . G19040) (warning? . G18912) (violation? . G18972) (undefined-violation? . G19152) (syntax-violation? . G19128) (syntax-violation-subform . G19132) (syntax-violation-form . G19130) (syntax-violation . G12451) (simple-conditions . G20182) (serious-condition? . G18932) (non-continuable-violation? . G19062) (message-condition? . G18890) (make-who-condition . G19036) (make-warning . G18910) (make-violation . G18970) (make-undefined-violation . G19150) (make-syntax-violation . G19122) (make-serious-condition . G18930) (make-non-continuable-violation . G19060) (make-message-condition . G18886) (make-lexical-violation . G19100) (make-irritants-condition . G19011) (make-implementation-restriction-violation . G19080) (make-error . G18950) (make-assertion-violation . G18990) (lexical-violation? . G19102) (irritants-condition? . G19015) (implementation-restriction-violation? . G19082) (error? . G18952) (condition-who . G19042) (condition-predicate . G20181) (condition-message . G18892) (condition-irritants . G19017) (condition-accessor . G20180) (condition . G20179) (assertion-violation? . G18992) (condition? . G20178) (utf32->string . G20177) (utf16->string . G20176) (utf8->string . G20175) (uint-list->bytevector . G20174) (u8-list->bytevector . G20173) (string->utf8 . G20172) (string->utf32 . G20171) (string->utf16 . G20170) (sint-list->bytevector . G20169) (native-endianness . G20168) (bytevector? . G20167) (bytevector=? . G20166) (bytevector-uint-set! . G20165) (bytevector-uint-ref . G20164) (bytevector-u8-set! . G20163) (bytevector-u8-ref . G20162) (bytevector-u64-set! . G20161) (bytevector-u64-ref . G20160) (bytevector-u64-native-set! . G20159) (bytevector-u64-native-ref . G20158) (bytevector-u32-set! . G20157) (bytevector-u32-ref . G20156) (bytevector-u32-native-set! . G20155) (bytevector-u32-native-ref . G20154) (bytevector-u16-set! . G20153) (bytevector-u16-ref . G20152) (bytevector-u16-native-set! . G20151) (bytevector-u16-native-ref . G20150) (bytevector-sint-set! . G20149) (bytevector-sint-ref . G20148) (bytevector-s8-set! . G20147) (bytevector-s8-ref . G20146) (bytevector-s64-set! . G20145) (bytevector-s64-ref . G20144) (bytevector-s64-native-set! . G20143) (bytevector-s64-native-ref . G20142) (bytevector-s32-set! . G20141) (bytevector-s32-ref . G20140) (bytevector-s32-native-set! . G20139) (bytevector-s32-native-ref . G20138) (bytevector-s16-set! . G20137) (bytevector-s16-ref . G20136) (bytevector-s16-native-set! . G20135) (bytevector-s16-native-ref . G20134) (bytevector-length . G20133) (bytevector-ieee-single-ref . G20132) (bytevector-ieee-single-native-set! . G20131) (bytevector-ieee-single-native-ref . G20130) (bytevector-ieee-double-ref . G20129) (bytevector-ieee-double-native-set! . G20128) (bytevector-ieee-double-native-ref . G20127) (bytevector-fill! . G20126) (bytevector-copy! . G20125) (bytevector-copy . G20124) (bytevector->uint-list . G20123) (bytevector->u8-list . G20122) (bytevector->sint-list . G20121) (no-nans-violation? . G20120) (no-infinities-violation? . G20119) (make-no-nans-violation . G20118) (make-no-infinities-violation . G20117) (real->flonum . G20116) (flzero? . G20115) (fltruncate . G20114) (fltan . G20113) (flsqrt . G20112) (flsin . G20111) (flround . G20110) (flpositive? . G20109) (flonum? . G20108) (flodd? . G20107) (flnumerator . G20106) (flnegative? . G20105) (flnan? . G20104) (flmod0 . G20103) (flmod . G20102) (flmin . G20101) (flmax . G20100) (fllog . G20099) (flinteger? . G20098) (flinfinite? . G20097) (flfloor . G20096) (flfinite? . G20095) (flexpt . G20094) (flexp . G20093) (fleven? . G20092) (fldiv0-and-mod0 . G20091) (fldiv0 . G20090) (fldiv-and-mod . G20089) (fldiv . G20088) (fldenominator . G20087) (flcos . G20086) (flceiling . G20085) (flatan . G20084) (flasin . G20083) (flacos . G20082) (flabs . G20081) (fl>? . G20080) (fl>=? . G20079) (fl=? . G20078) (fl<? . G20077) (fl<=? . G20076) (fl/ . G20075) (fl- . G20074) (fl+ . G20073) (fl* . G20072) (fixnum->flonum . G20071) (fxzero? . G20070) (fxxor . G20069) (fxrotate-bit-field . G20068) (fxreverse-bit-field . G20067) (fxpositive? . G20066) (fxodd? . G20065) (fxnot . G20064) (fxnegative? . G20063) (fxmod0 . G20062) (fxmod . G20061) (fxmin . G20060) (fxmax . G20059) (fxlength . G20058) (fxior . G20057) (fxif . G20056) (fxfirst-bit-set . G20055) (fxeven? . G20054) (fxdiv0-and-mod0 . G20053) (fxdiv0 . G20052) (fxdiv-and-mod . G20051) (fxdiv . G20050) (fxcopy-bit-field . G20049) (fxcopy-bit . G20048) (fxbit-set? . G20047) (fxbit-field . G20046) (fxbit-count . G20045) (fxarithmetic-shift-right . G20044) (fxarithmetic-shift-left . G20043) (fxarithmetic-shift . G20042) (fxand . G20041) (fx>? . G20040) (fx>=? . G20039) (fx=? . G20038) (fx<? . G20037) (fx<=? . G20036) (fx-/carry . G20035) (fx- . G20034) (fx+/carry . G20033) (fx+ . G20032) (fx*/carry . G20031) (fx* . G20030) (greatest-fixnum . G20029) (least-fixnum . G20028) (fixnum-width . G20027) (fixnum? . G20026) (bitwise-rotate-bit-field . G20025) (bitwise-reverse-bit-field . G20024) (bitwise-length . G20023) (bitwise-if . G20022) (bitwise-first-bit-set . G20021) (bitwise-copy-bit-field . G20020) (bitwise-copy-bit . G20019) (bitwise-bit-set? . G20018) (bitwise-bit-field . G20017) (bitwise-bit-count . G20016) (bitwise-xor . G20015) (bitwise-ior . G20014) (bitwise-and . G20013) (bitwise-not . G20012) (bitwise-arithmetic-shift-right . G20011) (bitwise-arithmetic-shift-left . G20010) (bitwise-arithmetic-shift . G20009) (zero? . G20008) (vector? . G20007) (vector-set! . G20006) (vector-ref . G20005) (vector-map . G20004) (vector-length . G20003) (vector-for-each . G20002) (vector-fill! . G20001) (vector->list . G20000) (vector . G19999) (values . G19998) (truncate . G19997) (tan . G19996) (symbol? . G19995) (symbol=? . G19994) (symbol->string . G19993) (substring . G19992) (string? . G19991) (string>? . G19990) (string>=? . G19989) (string=? . G19988) (string<? . G19987) (string<=? . G19986) (string-ref . G19985) (string-length . G19984) (string-for-each . G19983) (string-copy . G19982) (string-append . G19981) (string->symbol . G19980) (string->number . G19979) (string->list . G19978) (string . G19977) (sqrt . G19976) (sin . G19975) (round . G19974) (reverse . G19973) (real? . G19972) (real-valued? . G19971) (real-part . G19970) (rationalize . G19969) (rational? . G19968) (rational-valued? . G19967) (procedure? . G19966) (positive? . G19965) (pair? . G19964) (odd? . G19963) (numerator . G19962) (number? . G19961) (number->string . G19960) (null? . G19959) (not . G19958) (negative? . G19957) (nan? . G19956) (min . G19955) (max . G19954) (map . G19953) (make-vector . G19952) (make-string . G19951) (make-rectangular . G19950) (make-polar . G19949) (magnitude . G19948) (log . G19947) (list? . G19946) (list-tail . G19945) (list-ref . G19944) (list->vector . G19943) (list->string . G19942) (list . G19941) (length . G19940) (lcm . G19939) (integer? . G19938) (integer-valued? . G19937) (integer->char . G19936) (infinite? . G19935) (inexact? . G19934) (inexact . G19933) (imag-part . G19932) (gcd . G19931) (for-each . G19930) (floor . G19929) (finite? . G19928) (expt . G19927) (exp . G19926) (exact? . G19925) (exact-integer-sqrt . G19924) (exact . G19923) (even? . G19922) (error . G19921) (eqv? . G19920) (equal? . G19919) (eq? . G19918) (dynamic-wind . G19917) (div0-and-mod0 . G19916) (mod0 . G19915) (div0 . G19914) (div-and-mod . G19913) (mod . G19912) (div . G19911) (denominator . G19910) (cos . G19909) (cons . G19908) (complex? . G19907) (char? . G19906) (char>? . G19905) (char>=? . G19904) (char=? . G19903) (char<? . G19902) (char<=? . G19901) (char->integer . G19900) (ceiling . G19899) (call-with-values . G19898) (call/cc . G19897) (call-with-current-continuation . G19896) (cddddr . G19895) (cdddar . G19894) (cddadr . G19893) (cddaar . G19892) (cdaddr . G19891) (cdadar . G19890) (cdaadr . G19889) (cdaaar . G19888) (cadddr . G19887) (caddar . G19886) (cadadr . G19885) (cadaar . G19884) (caaddr . G19883) (caadar . G19882) (caaadr . G19881) (caaaar . G19880) (cdddr . G19879) (cddar . G19878) (cdadr . G19877) (cdaar . G19876) (caddr . G19875) (cadar . G19874) (caadr . G19873) (caaar . G19872) (cddr . G19871) (cdar . G19870) (cadr . G19869) (caar . G19868) (cdr . G19867) (car . G19866) (boolean? . G19865) (boolean=? . G19864) (atan . G19863) (assertion-violation . G19862) (asin . G19861) (apply . G19860) (append . G19859) (angle . G19858) (acos . G19857) (abs . G19856) (/ . G19855) (* . G19854) (- . G19853) (+ . G19852) (>= . G19851) (> . G19850) (= . G19849) (<= . G19848) (< . G19847) (&no-nans . G19846) (&no-infinities . G19845) (&i/o-encoding . G19844) (&i/o-decoding . G19843) (&i/o-port . G19842) (&i/o-file-does-not-exist . G19841) (&i/o-file-already-exists . G19840) (&i/o-file-is-read-only . G19839) (&i/o-file-protection . G19838) (&i/o-filename . G19837) (&i/o-invalid-position . G19836) (&i/o-write . G19835) (&i/o-read . G19834) (&i/o . G19833) (&undefined . G19832) (&syntax . G19831) (&lexical . G19830) (&implementation-restriction . G19829) (&non-continuable . G19828) (&who . G19827) (&irritants . G19826) (&assertion . G19825) (&violation . G19824) (&error . G19823) (&serious . G19822) (&warning . G19821) (&message . G19820) (&condition . G19819) (define-condition-type . G19818) (define-enumeration . G19817) (define-record-type . G19816) (parent-rtd . G19815) (nongenerative . G19814) (opaque . G19813) (sealed . G19812) (protocol . G19811) (parent . G19810) (immutable . G19809) (mutable . G19808) (fields . G19807) (error-handling-mode . G19806) (file-options . G19805) (buffer-mode . G19804) (eol-style . G19803) (guard . G19802) (unsyntax-splicing . G19799) (unsyntax . G19798) (unquote-splicing . G19797) (unquote . G19796) (_ . G19795) (else . G19794) (=> . G19793) (... . G19792) (assert . G19791) (endianness . G19790) (or . G19787) (and . G19786) (do . G19785) (cond . G19784) (let* . G19783) (let . G19782) (let*-values . G19781) (let-values . G19780) (identifier-syntax . G19779) (with-syntax . G19778) (quasisyntax . G19777) (quasiquote . G19776) (syntax-rules . G19775) (record-constructor-descriptor . G19772) (record-type-descriptor . G19771) (case . G19770) (unless . G19768) (when . G19767) (if . G19766) (letrec* . G19765) (letrec . G19764) (case-lambda . G19762) (lambda . G19761) (syntax . G19760) (syntax-case . G19759) (quote . G19758) (letrec-syntax . G19756) (let-syntax . G19755) (set! . G19754) (begin . G19752) (define-syntax . G19750) (define . G19749)) '() values values '#f '#f '#t '#f) (G11125 'G20514 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G12419) (quotient . G20235) (null-environment . G12417) (remainder . G20234) (modulo . G20233) (inexact->exact . G20232) (force . G20231) (exact->inexact . G20230) (delay . G19789)) '() values values '#f '#f '#t '#f) (G11125 'G20515 '(rnrs control) '(6) '() '() '() '((do . G19785) (unless . G19768) (when . G19767) (case-lambda . G19762)) '() values values '#f '#f '#t '#f) (G11125 'G20516 '(rnrs eval) '(6) '() '() '() '((eval . G12423) (environment . G12415)) '() values values '#f '#f '#t '#f) (G11125 'G20517 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G20226) (set-car! . G20225)) '() values values '#f '#f '#t '#f) (G11125 'G20518 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G20228) (string-set! . G20227)) '() values values '#f '#f '#t '#f) (G11125 'G20519 '(rnrs programs) '(6) '() '() '() '((exit . G20229) (command-line . G19597)) '() values values '#f '#f '#t '#f) (G11125 'G20520 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G11704) (identifier? . G12453) (generate-temporaries . G12437) (free-identifier=? . G12439) (syntax->datum . G12457) (datum->syntax . G12455) (bound-identifier=? . G12441) (syntax-violation . G12451) (unsyntax-splicing . G19799) (unsyntax . G19798) (_ . G19795) (... . G19792) (with-syntax . G19778) (quasisyntax . G19777) (syntax . G19760) (syntax-case . G19759)) '() values values '#f '#f '#t '#f) (G11125 'G20521 '(rnrs files) '(6) '() '() '() '((delete-file . G20340) (file-exists? . G20339) (make-i/o-write-error . G19306) (make-i/o-read-error . G19286) (make-i/o-port-error . G19457) (make-i/o-invalid-position-error . G19327) (make-i/o-filename-error . G19352) (make-i/o-file-protection-error . G19376) (make-i/o-file-is-read-only-error . G19396) (make-i/o-file-does-not-exist-error . G19436) (make-i/o-file-already-exists-error . G19416) (make-i/o-error . G19266) (i/o-write-error? . G19308) (i/o-read-error? . G19288) (i/o-port-error? . G19461) (i/o-invalid-position-error? . G19331) (i/o-filename-error? . G19356) (i/o-file-protection-error? . G19378) (i/o-file-is-read-only-error? . G19398) (i/o-file-does-not-exist-error? . G19438) (i/o-file-already-exists-error? . G19418) (i/o-error? . G19268) (i/o-error-port . G19463) (i/o-error-filename . G19358) (&i/o-port . G19842) (&i/o-file-does-not-exist . G19841) (&i/o-file-already-exists . G19840) (&i/o-file-is-read-only . G19839) (&i/o-file-protection . G19838) (&i/o-filename . G19837) (&i/o-invalid-position . G19836) (&i/o-write . G19835) (&i/o-read . G19834) (&i/o . G19833)) '() values values '#f '#f '#t '#f) (G11125 'G20522 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G20338) (vector-sort . G20337) (list-sort . G20336)) '() values values '#f '#f '#t '#f) (G11125 'G20523 '(rnrs base) '(6) '() '() '() '((zero? . G20008) (vector? . G20007) (vector-set! . G20006) (vector-ref . G20005) (vector-map . G20004) (vector-length . G20003) (vector-for-each . G20002) (vector-fill! . G20001) (vector->list . G20000) (vector . G19999) (values . G19998) (truncate . G19997) (tan . G19996) (symbol? . G19995) (symbol=? . G19994) (symbol->string . G19993) (substring . G19992) (string? . G19991) (string>? . G19990) (string>=? . G19989) (string=? . G19988) (string<? . G19987) (string<=? . G19986) (string-ref . G19985) (string-length . G19984) (string-for-each . G19983) (string-copy . G19982) (string-append . G19981) (string->symbol . G19980) (string->number . G19979) (string->list . G19978) (string . G19977) (sqrt . G19976) (sin . G19975) (round . G19974) (reverse . G19973) (real? . G19972) (real-valued? . G19971) (real-part . G19970) (rationalize . G19969) (rational? . G19968) (rational-valued? . G19967) (procedure? . G19966) (positive? . G19965) (pair? . G19964) (odd? . G19963) (numerator . G19962) (number? . G19961) (number->string . G19960) (null? . G19959) (not . G19958) (negative? . G19957) (nan? . G19956) (min . G19955) (max . G19954) (map . G19953) (make-vector . G19952) (make-string . G19951) (make-rectangular . G19950) (make-polar . G19949) (magnitude . G19948) (log . G19947) (list? . G19946) (list-tail . G19945) (list-ref . G19944) (list->vector . G19943) (list->string . G19942) (list . G19941) (length . G19940) (lcm . G19939) (integer? . G19938) (integer-valued? . G19937) (integer->char . G19936) (infinite? . G19935) (inexact? . G19934) (inexact . G19933) (imag-part . G19932) (gcd . G19931) (for-each . G19930) (floor . G19929) (finite? . G19928) (expt . G19927) (exp . G19926) (exact? . G19925) (exact-integer-sqrt . G19924) (exact . G19923) (even? . G19922) (error . G19921) (eqv? . G19920) (equal? . G19919) (eq? . G19918) (dynamic-wind . G19917) (div0-and-mod0 . G19916) (mod0 . G19915) (div0 . G19914) (div-and-mod . G19913) (mod . G19912) (div . G19911) (denominator . G19910) (cos . G19909) (cons . G19908) (complex? . G19907) (char? . G19906) (char>? . G19905) (char>=? . G19904) (char=? . G19903) (char<? . G19902) (char<=? . G19901) (char->integer . G19900) (ceiling . G19899) (call-with-values . G19898) (call/cc . G19897) (call-with-current-continuation . G19896) (cddddr . G19895) (cdddar . G19894) (cddadr . G19893) (cddaar . G19892) (cdaddr . G19891) (cdadar . G19890) (cdaadr . G19889) (cdaaar . G19888) (cadddr . G19887) (caddar . G19886) (cadadr . G19885) (cadaar . G19884) (caaddr . G19883) (caadar . G19882) (caaadr . G19881) (caaaar . G19880) (cdddr . G19879) (cddar . G19878) (cdadr . G19877) (cdaar . G19876) (caddr . G19875) (cadar . G19874) (caadr . G19873) (caaar . G19872) (cddr . G19871) (cdar . G19870) (cadr . G19869) (caar . G19868) (cdr . G19867) (car . G19866) (boolean? . G19865) (boolean=? . G19864) (atan . G19863) (assertion-violation . G19862) (asin . G19861) (apply . G19860) (append . G19859) (angle . G19858) (acos . G19857) (abs . G19856) (/ . G19855) (* . G19854) (- . G19853) (+ . G19852) (>= . G19851) (> . G19850) (= . G19849) (<= . G19848) (< . G19847) (unquote-splicing . G19797) (unquote . G19796) (_ . G19795) (else . G19794) (=> . G19793) (... . G19792) (assert . G19791) (or . G19787) (and . G19786) (cond . G19784) (let* . G19783) (let . G19782) (let*-values . G19781) (let-values . G19780) (identifier-syntax . G19779) (quasiquote . G19776) (syntax-rules . G19775) (case . G19770) (if . G19766) (letrec* . G19765) (letrec . G19764) (lambda . G19761) (quote . G19758) (letrec-syntax . G19756) (let-syntax . G19755) (set! . G19754) (begin . G19752) (define-syntax . G19750) (define . G19749)) '() values values '#f '#f '#t '#f) (G11125 'G20524 '(rnrs lists) '(6) '() '() '() '((remove . G20224) (remv . G20223) (remp . G20222) (remq . G20221) (partition . G20220) (memv . G20219) (memq . G20218) (memp . G20217) (member . G20216) (exists . G20215) (for-all . G20214) (fold-right . G20213) (fold-left . G20212) (find . G20211) (filter . G20210) (cons* . G20209) (assv . G20208) (assq . G20207) (assp . G20206) (assoc . G20205)) '() values values '#f '#f '#t '#f) (G11125 'G20525 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G20314) (call-with-input-file . G20313) (write-char . G20312) (write . G20311) (with-output-to-file . G20310) (with-input-from-file . G20309) (read-char . G20308) (read . G20307) (peek-char . G20306) (open-output-file . G20305) (open-input-file . G20304) (newline . G20303) (display . G20302) (close-output-port . G20301) (close-input-port . G20300) (eof-object? . G20299) (eof-object . G20298) (current-error-port . G20297) (current-output-port . G20296) (current-input-port . G20295) (output-port? . G20294) (input-port? . G20293) (make-i/o-write-error . G19306) (make-i/o-read-error . G19286) (make-i/o-port-error . G19457) (make-i/o-invalid-position-error . G19327) (make-i/o-filename-error . G19352) (make-i/o-file-protection-error . G19376) (make-i/o-file-is-read-only-error . G19396) (make-i/o-file-does-not-exist-error . G19436) (make-i/o-file-already-exists-error . G19416) (make-i/o-error . G19266) (i/o-write-error? . G19308) (i/o-read-error? . G19288) (i/o-port-error? . G19461) (i/o-invalid-position-error? . G19331) (i/o-filename-error? . G19356) (i/o-file-protection-error? . G19378) (i/o-file-is-read-only-error? . G19398) (i/o-file-does-not-exist-error? . G19438) (i/o-file-already-exists-error? . G19418) (i/o-error? . G19268) (i/o-error-port . G19463) (i/o-error-filename . G19358) (&i/o-port . G19842) (&i/o-file-does-not-exist . G19841) (&i/o-file-already-exists . G19840) (&i/o-file-is-read-only . G19839) (&i/o-file-protection . G19838) (&i/o-filename . G19837) (&i/o-invalid-position . G19836) (&i/o-write . G19835) (&i/o-read . G19834) (&i/o . G19833)) '() values values '#f '#f '#t '#f) (G11125 'G20526 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G20251) (utf32->string . G20177) (utf16->string . G20176) (utf8->string . G20175) (uint-list->bytevector . G20174) (u8-list->bytevector . G20173) (string->utf8 . G20172) (string->utf32 . G20171) (string->utf16 . G20170) (sint-list->bytevector . G20169) (native-endianness . G20168) (bytevector? . G20167) (bytevector=? . G20166) (bytevector-uint-set! . G20165) (bytevector-uint-ref . G20164) (bytevector-u8-set! . G20163) (bytevector-u8-ref . G20162) (bytevector-u64-set! . G20161) (bytevector-u64-ref . G20160) (bytevector-u64-native-set! . G20159) (bytevector-u64-native-ref . G20158) (bytevector-u32-set! . G20157) (bytevector-u32-ref . G20156) (bytevector-u32-native-set! . G20155) (bytevector-u32-native-ref . G20154) (bytevector-u16-set! . G20153) (bytevector-u16-ref . G20152) (bytevector-u16-native-set! . G20151) (bytevector-u16-native-ref . G20150) (bytevector-sint-set! . G20149) (bytevector-sint-ref . G20148) (bytevector-s8-set! . G20147) (bytevector-s8-ref . G20146) (bytevector-s64-set! . G20145) (bytevector-s64-ref . G20144) (bytevector-s64-native-set! . G20143) (bytevector-s64-native-ref . G20142) (bytevector-s32-set! . G20141) (bytevector-s32-ref . G20140) (bytevector-s32-native-set! . G20139) (bytevector-s32-native-ref . G20138) (bytevector-s16-set! . G20137) (bytevector-s16-ref . G20136) (bytevector-s16-native-set! . G20135) (bytevector-s16-native-ref . G20134) (bytevector-length . G20133) (bytevector-ieee-single-ref . G20132) (bytevector-ieee-single-native-set! . G20131) (bytevector-ieee-single-native-ref . G20130) (bytevector-ieee-double-ref . G20129) (bytevector-ieee-double-native-set! . G20128) (bytevector-ieee-double-native-ref . G20127) (bytevector-fill! . G20126) (bytevector-copy! . G20125) (bytevector-copy . G20124) (bytevector->uint-list . G20123) (bytevector->u8-list . G20122) (bytevector->sint-list . G20121) (endianness . G19790)) '() values values '#f '#f '#t '#f) (G11125 'G20527 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G20386) (string-titlecase . G20385) (string-normalize-nfkd . G20384) (string-normalize-nfkc . G20383) (string-normalize-nfd . G20382) (string-normalize-nfc . G20381) (string-foldcase . G20380) (string-downcase . G20379) (string-ci>? . G20378) (string-ci>=? . G20377) (string-ci=? . G20376) (string-ci<? . G20375) (string-ci<=? . G20374) (char-whitespace? . G20373) (char-upper-case? . G20372) (char-title-case? . G20371) (char-numeric? . G20370) (char-lower-case? . G20369) (char-general-category . G20368) (char-upcase . G20367) (char-titlecase . G20366) (char-foldcase . G20365) (char-downcase . G20364) (char-ci>? . G20363) (char-ci>=? . G20362) (char-ci=? . G20361) (char-ci<? . G20360) (char-ci<=? . G20359) (char-alphabetic? . G20358)) '() values values '#f '#f '#t '#f) (G11125 'G20528 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G20198) (raise-continuable . G20197) (raise . G20196) (guard . G19802) (else . G19794) (=> . G19793)) '() values values '#f '#f '#t '#f) (G11125 'G20529 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G20025) (bitwise-reverse-bit-field . G20024) (bitwise-length . G20023) (bitwise-if . G20022) (bitwise-first-bit-set . G20021) (bitwise-copy-bit-field . G20020) (bitwise-copy-bit . G20019) (bitwise-bit-set? . G20018) (bitwise-bit-field . G20017) (bitwise-bit-count . G20016) (bitwise-xor . G20015) (bitwise-ior . G20014) (bitwise-and . G20013) (bitwise-not . G20012) (bitwise-arithmetic-shift-right . G20011) (bitwise-arithmetic-shift-left . G20010) (bitwise-arithmetic-shift . G20009)) '() values values '#f '#f '#t '#f) (G11125 'G20530 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G20070) (fxxor . G20069) (fxrotate-bit-field . G20068) (fxreverse-bit-field . G20067) (fxpositive? . G20066) (fxodd? . G20065) (fxnot . G20064) (fxnegative? . G20063) (fxmod0 . G20062) (fxmod . G20061) (fxmin . G20060) (fxmax . G20059) (fxlength . G20058) (fxior . G20057) (fxif . G20056) (fxfirst-bit-set . G20055) (fxeven? . G20054) (fxdiv0-and-mod0 . G20053) (fxdiv0 . G20052) (fxdiv-and-mod . G20051) (fxdiv . G20050) (fxcopy-bit-field . G20049) (fxcopy-bit . G20048) (fxbit-set? . G20047) (fxbit-field . G20046) (fxbit-count . G20045) (fxarithmetic-shift-right . G20044) (fxarithmetic-shift-left . G20043) (fxarithmetic-shift . G20042) (fxand . G20041) (fx>? . G20040) (fx>=? . G20039) (fx=? . G20038) (fx<? . G20037) (fx<=? . G20036) (fx-/carry . G20035) (fx- . G20034) (fx+/carry . G20033) (fx+ . G20032) (fx*/carry . G20031) (fx* . G20030) (greatest-fixnum . G20029) (least-fixnum . G20028) (fixnum-width . G20027) (fixnum? . G20026)) '() values values '#f '#f '#t '#f) (G11125 'G20531 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G20120) (no-infinities-violation? . G20119) (make-no-nans-violation . G20118) (make-no-infinities-violation . G20117) (real->flonum . G20116) (flzero? . G20115) (fltruncate . G20114) (fltan . G20113) (flsqrt . G20112) (flsin . G20111) (flround . G20110) (flpositive? . G20109) (flonum? . G20108) (flodd? . G20107) (flnumerator . G20106) (flnegative? . G20105) (flnan? . G20104) (flmod0 . G20103) (flmod . G20102) (flmin . G20101) (flmax . G20100) (fllog . G20099) (flinteger? . G20098) (flinfinite? . G20097) (flfloor . G20096) (flfinite? . G20095) (flexpt . G20094) (flexp . G20093) (fleven? . G20092) (fldiv0-and-mod0 . G20091) (fldiv0 . G20090) (fldiv-and-mod . G20089) (fldiv . G20088) (fldenominator . G20087) (flcos . G20086) (flceiling . G20085) (flatan . G20084) (flasin . G20083) (flacos . G20082) (flabs . G20081) (fl>? . G20080) (fl>=? . G20079) (fl=? . G20078) (fl<? . G20077) (fl<=? . G20076) (fl/ . G20075) (fl- . G20074) (fl+ . G20073) (fl* . G20072) (fixnum->flonum . G20071) (&no-nans . G19846) (&no-infinities . G19845)) '() values values '#f '#f '#t '#f) (G11125 'G20532 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G20335) (string-ci-hash . G20334) (string-hash . G20333) (equal-hash . G20332) (hashtable-equivalence-function . G20331) (make-hashtable . G20330) (hashtable-hash-function . G20329) (make-eqv-hashtable . G20328) (make-eq-hashtable . G20327) (hashtable? . G20326) (hashtable-update! . G20325) (hashtable-size . G20324) (hashtable-set! . G20323) (hashtable-ref . G20322) (hashtable-mutable? . G20321) (hashtable-keys . G20320) (hashtable-entries . G20319) (hashtable-delete! . G20318) (hashtable-copy . G20317) (hashtable-contains? . G20316) (hashtable-clear! . G20315)) '() values values '#f '#f '#t '#f) (G11125 'G20533 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G20299) (eof-object . G20298) (current-error-port . G20297) (current-output-port . G20296) (current-input-port . G20295) (output-port? . G20294) (input-port? . G20293) (utf-8-codec . G20292) (utf-16-codec . G20291) (transcoder-error-handling-mode . G20290) (transcoder-eol-style . G20289) (transcoder-codec . G20288) (transcoded-port . G20287) (textual-port? . G20286) (string->bytevector . G20285) (standard-output-port . G20284) (standard-input-port . G20283) (standard-error-port . G20282) (set-port-position! . G20281) (put-u8 . G20280) (put-string . G20279) (put-datum . G20278) (put-char . G20277) (put-bytevector . G20276) (port? . G20275) (port-transcoder . G20274) (port-position . G20273) (port-has-set-port-position!? . G20272) (port-has-port-position? . G20271) (port-eof? . G20270) (output-port-buffer-mode . G20269) (open-string-output-port . G20268) (open-string-input-port . G20267) (open-file-output-port . G20266) (open-file-input/output-port . G20265) (open-file-input-port . G20264) (open-bytevector-output-port . G20263) (open-bytevector-input-port . G20262) (native-transcoder . G20261) (native-eol-style . G20260) (make-transcoder . G20259) (latin-1-codec . G20258) (make-i/o-write-error . G19306) (make-i/o-read-error . G19286) (make-i/o-port-error . G19457) (make-i/o-invalid-position-error . G19327) (make-i/o-filename-error . G19352) (make-i/o-file-protection-error . G19376) (make-i/o-file-is-read-only-error . G19396) (make-i/o-file-does-not-exist-error . G19436) (make-i/o-file-already-exists-error . G19416) (make-i/o-error . G19266) (make-i/o-encoding-error . G19502) (make-i/o-decoding-error . G19481) (make-custom-textual-output-port . G20257) (make-custom-textual-input/output-port . G20256) (make-custom-textual-input-port . G20255) (make-custom-binary-output-port . G20254) (make-custom-binary-input/output-port . G20253) (make-custom-binary-input-port . G20252) (lookahead-u8 . G20250) (lookahead-char . G20249) (i/o-write-error? . G19308) (i/o-read-error? . G19288) (i/o-port-error? . G19461) (i/o-invalid-position-error? . G19331) (i/o-filename-error? . G19356) (i/o-file-protection-error? . G19378) (i/o-file-is-read-only-error? . G19398) (i/o-file-does-not-exist-error? . G19438) (i/o-file-already-exists-error? . G19418) (i/o-error? . G19268) (i/o-error-port . G19463) (i/o-error-filename . G19358) (i/o-encoding-error? . G19506) (i/o-encoding-error-char . G19508) (i/o-decoding-error? . G19483) (get-u8 . G20248) (get-string-n! . G20247) (get-string-n . G20246) (get-string-all . G20245) (get-line . G20244) (get-datum . G20243) (get-char . G20242) (get-bytevector-some . G20241) (get-bytevector-n! . G20240) (get-bytevector-n . G20239) (get-bytevector-all . G20238) (flush-output-port . G20237) (close-port . G20236) (call-with-string-output-port . G20204) (call-with-port . G20203) (call-with-bytevector-output-port . G20202) (bytevector->string . G20201) (buffer-mode? . G20200) (binary-port? . G20199) (&i/o-encoding . G19844) (&i/o-decoding . G19843) (&i/o-port . G19842) (&i/o-file-does-not-exist . G19841) (&i/o-file-already-exists . G19840) (&i/o-file-is-read-only . G19839) (&i/o-file-protection . G19838) (&i/o-filename . G19837) (&i/o-invalid-position . G19836) (&i/o-write . G19835) (&i/o-read . G19834) (&i/o . G19833) (error-handling-mode . G19806) (file-options . G19805) (buffer-mode . G19804) (eol-style . G19803)) '() values values '#f '#f '#t '#f) (G11125 'G20534 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G20195) (enum-set=? . G20194) (enum-set-universe . G20193) (enum-set-union . G20192) (enum-set-subset? . G20191) (enum-set-projection . G20190) (enum-set-member? . G20189) (enum-set-intersection . G20188) (enum-set-indexer . G20187) (enum-set-difference . G20186) (enum-set-constructor . G20185) (enum-set-complement . G20184) (enum-set->list . G20183) (define-enumeration . G19817)) '() values values '#f '#f '#t '#f) (G11125 'G20535 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G19040) (warning? . G18912) (violation? . G18972) (undefined-violation? . G19152) (syntax-violation? . G19128) (syntax-violation-subform . G19132) (syntax-violation-form . G19130) (syntax-violation . G12451) (simple-conditions . G20182) (serious-condition? . G18932) (non-continuable-violation? . G19062) (message-condition? . G18890) (make-who-condition . G19036) (make-warning . G18910) (make-violation . G18970) (make-undefined-violation . G19150) (make-syntax-violation . G19122) (make-serious-condition . G18930) (make-non-continuable-violation . G19060) (make-message-condition . G18886) (make-lexical-violation . G19100) (make-irritants-condition . G19011) (make-implementation-restriction-violation . G19080) (make-error . G18950) (make-assertion-violation . G18990) (lexical-violation? . G19102) (irritants-condition? . G19015) (implementation-restriction-violation? . G19082) (error? . G18952) (condition-who . G19042) (condition-predicate . G20181) (condition-message . G18892) (condition-irritants . G19017) (condition-accessor . G20180) (condition . G20179) (assertion-violation? . G18992) (condition? . G20178) (&undefined . G19832) (&syntax . G19831) (&lexical . G19830) (&implementation-restriction . G19829) (&non-continuable . G19828) (&who . G19827) (&irritants . G19826) (&assertion . G19825) (&violation . G19824) (&error . G19823) (&serious . G19822) (&warning . G19821) (&message . G19820) (&condition . G19819) (define-condition-type . G19818)) '() values values '#f '#f '#t '#f) (G11125 'G20536 '(rnrs records inspection) '(6) '() '() '() '((record? . G20350) (record-type-uid . G20349) (record-type-sealed? . G20348) (record-type-parent . G20347) (record-type-opaque? . G20346) (record-type-name . G20345) (record-type-generative? . G20344) (record-type-field-names . G20343) (record-rtd . G20342) (record-field-mutable? . G20341)) '() values values '#f '#f '#t '#f) (G11125 'G20537 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G20357) (record-predicate . G20356) (record-mutator . G20355) (record-constructor . G20354) (record-accessor . G20353) (make-record-type-descriptor . G20352) (make-record-constructor-descriptor . G20351)) '() values values '#f '#f '#t '#f) (G11125 'G20538 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G19816) (parent-rtd . G19815) (nongenerative . G19814) (opaque . G19813) (sealed . G19812) (protocol . G19811) (parent . G19810) (immutable . G19809) (mutable . G19808) (fields . G19807) (record-constructor-descriptor . G19772) (record-type-descriptor . G19771)) '() values values '#f '#f '#t '#f) (G11125 'G20539 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G20507) (&no-nans-rtd . G20506) (&no-infinities-rcd . G20505) (&no-infinities-rtd . G20504) (&i/o-encoding-rcd . G20503) (&i/o-encoding-rtd . G20502) (&i/o-decoding-rcd . G20501) (&i/o-decoding-rtd . G20500) (&i/o-port-rcd . G20499) (&i/o-port-rtd . G20498) (&i/o-file-does-not-exist-rcd . G20497) (&i/o-file-does-not-exist-rtd . G20496) (&i/o-file-already-exists-rcd . G20495) (&i/o-file-already-exists-rtd . G20494) (&i/o-file-is-read-only-rcd . G20493) (&i/o-file-is-read-only-rtd . G20492) (&i/o-file-protection-rcd . G20491) (&i/o-file-protection-rtd . G20490) (&i/o-filename-rcd . G20489) (&i/o-filename-rtd . G20488) (&i/o-invalid-position-rcd . G20487) (&i/o-invalid-position-rtd . G20486) (&i/o-write-rcd . G20485) (&i/o-write-rtd . G20484) (&i/o-read-rcd . G20483) (&i/o-read-rtd . G20482) (&i/o-rcd . G20481) (&i/o-rtd . G20480) (&undefined-rcd . G20479) (&undefined-rtd . G20478) (&syntax-rcd . G20477) (&syntax-rtd . G20476) (&lexical-rcd . G20475) (&lexical-rtd . G20474) (&implementation-restriction-rcd . G20473) (&implementation-restriction-rtd . G20472) (&non-continuable-rcd . G20471) (&non-continuable-rtd . G20470) (&who-rcd . G20469) (&who-rtd . G20468) (&irritants-rcd . G20467) (&irritants-rtd . G20466) (&assertion-rcd . G20465) (&assertion-rtd . G20464) (&violation-rcd . G20463) (&violation-rtd . G20462) (&error-rcd . G20461) (&error-rtd . G20460) (&serious-rcd . G20459) (&serious-rtd . G20458) (&warning-rcd . G20457) (&warning-rtd . G20456) (&message-rcd . G20455) (&message-rtd . G20454) (&condition-rcd . G20453) (&condition-rtd . G20452) (syntax-error . G12445) (syntax-dispatch . G12218) (pretty-print . G20451) (eval-core . G20450) (set-symbol-value! . G20449) (symbol-value . G20448) (gensym . G20447) (void . G20446) (load . G19603) (interaction-environment . G12463) (char-ready? . G20445) (regexp? . G20444) (read-line . G20443) (dotted-list? . G20442) (circular-list? . G20441) (proper-list? . G20440) (circular-list . G20439) (last . G20438) (last-pair . G20437) (not-pair? . G20436) (split-at! . G20435) (split-at . G20434) (list= . G20433) (list-copy . G20432) (list-tabulate . G20431) (make-list . G20430) (xcons . G20429) (tenth . G20428) (ninth . G20427) (eighth . G20426) (seventh . G20425) (sixth . G20424) (fifth . G20423) (drop-right! . G20422) (drop-right . G20421) (take-right . G20420) (take! . G20419) (drop . G20418) (take . G20417) (car+cdr . G20416) (third . G20415) (second . G20414) (first . G20413) (assoc-ref . G20412) (alist-cons . G20411) (print . G20410) (format . G20409) (standard-library-path . G20408) (current-directory . G20407) (write-to-file . G20406) (file->list . G20405) (file->string . G20404) (digit->integer . G20403) (call-with-string-input-port . G20402) (call-with-string-io . G20401) (string-split . G20400) (bytevector-for-each . G20399) (string->regexp . G20398) (rxmatch . G20397) (regexp-replace-all . G20396) (hashtable-for-each . G20395) (readdir . G20394) (get-environment-variables . G20393) (get-environment-variable . G20392) (get-command-line . G20391) (sys-display . G20390) (source-info . G20389) (set-source-info! . G20388) (receive . G20387) (string-upcase . G20386) (string-titlecase . G20385) (string-normalize-nfkd . G20384) (string-normalize-nfkc . G20383) (string-normalize-nfd . G20382) (string-normalize-nfc . G20381) (string-foldcase . G20380) (string-downcase . G20379) (string-ci>? . G20378) (string-ci>=? . G20377) (string-ci=? . G20376) (string-ci<? . G20375) (string-ci<=? . G20374) (char-whitespace? . G20373) (char-upper-case? . G20372) (char-title-case? . G20371) (char-numeric? . G20370) (char-lower-case? . G20369) (char-general-category . G20368) (char-upcase . G20367) (char-titlecase . G20366) (char-foldcase . G20365) (char-downcase . G20364) (char-ci>? . G20363) (char-ci>=? . G20362) (char-ci=? . G20361) (char-ci<? . G20360) (char-ci<=? . G20359) (char-alphabetic? . G20358) (make-variable-transformer . G11704) (identifier? . G12453) (generate-temporaries . G12437) (free-identifier=? . G12439) (syntax->datum . G12457) (datum->syntax . G12455) (bound-identifier=? . G12441) (record-type-descriptor? . G20357) (record-predicate . G20356) (record-mutator . G20355) (record-constructor . G20354) (record-accessor . G20353) (make-record-type-descriptor . G20352) (make-record-constructor-descriptor . G20351) (record? . G20350) (record-type-uid . G20349) (record-type-sealed? . G20348) (record-type-parent . G20347) (record-type-opaque? . G20346) (record-type-name . G20345) (record-type-generative? . G20344) (record-type-field-names . G20343) (record-rtd . G20342) (record-field-mutable? . G20341) (delete-file . G20340) (file-exists? . G20339) (vector-sort! . G20338) (vector-sort . G20337) (list-sort . G20336) (symbol-hash . G20335) (string-ci-hash . G20334) (string-hash . G20333) (equal-hash . G20332) (hashtable-equivalence-function . G20331) (make-hashtable . G20330) (hashtable-hash-function . G20329) (make-eqv-hashtable . G20328) (make-eq-hashtable . G20327) (hashtable? . G20326) (hashtable-update! . G20325) (hashtable-size . G20324) (hashtable-set! . G20323) (hashtable-ref . G20322) (hashtable-mutable? . G20321) (hashtable-keys . G20320) (hashtable-entries . G20319) (hashtable-delete! . G20318) (hashtable-copy . G20317) (hashtable-contains? . G20316) (hashtable-clear! . G20315) (call-with-output-file . G20314) (call-with-input-file . G20313) (write-char . G20312) (write . G20311) (with-output-to-file . G20310) (with-input-from-file . G20309) (read-char . G20308) (read . G20307) (peek-char . G20306) (open-output-file . G20305) (open-input-file . G20304) (newline . G20303) (display . G20302) (close-output-port . G20301) (close-input-port . G20300) (eof-object? . G20299) (eof-object . G20298) (current-error-port . G20297) (current-output-port . G20296) (current-input-port . G20295) (output-port? . G20294) (input-port? . G20293) (utf-8-codec . G20292) (utf-16-codec . G20291) (transcoder-error-handling-mode . G20290) (transcoder-eol-style . G20289) (transcoder-codec . G20288) (transcoded-port . G20287) (textual-port? . G20286) (string->bytevector . G20285) (standard-output-port . G20284) (standard-input-port . G20283) (standard-error-port . G20282) (set-port-position! . G20281) (put-u8 . G20280) (put-string . G20279) (put-datum . G20278) (put-char . G20277) (put-bytevector . G20276) (port? . G20275) (port-transcoder . G20274) (port-position . G20273) (port-has-set-port-position!? . G20272) (port-has-port-position? . G20271) (port-eof? . G20270) (output-port-buffer-mode . G20269) (open-string-output-port . G20268) (open-string-input-port . G20267) (open-file-output-port . G20266) (open-file-input/output-port . G20265) (open-file-input-port . G20264) (open-bytevector-output-port . G20263) (open-bytevector-input-port . G20262) (native-transcoder . G20261) (native-eol-style . G20260) (make-transcoder . G20259) (latin-1-codec . G20258) (make-i/o-write-error . G19306) (make-i/o-read-error . G19286) (make-i/o-port-error . G19457) (make-i/o-invalid-position-error . G19327) (make-i/o-filename-error . G19352) (make-i/o-file-protection-error . G19376) (make-i/o-file-is-read-only-error . G19396) (make-i/o-file-does-not-exist-error . G19436) (make-i/o-file-already-exists-error . G19416) (make-i/o-error . G19266) (make-i/o-encoding-error . G19502) (make-i/o-decoding-error . G19481) (make-custom-textual-output-port . G20257) (make-custom-textual-input/output-port . G20256) (make-custom-textual-input-port . G20255) (make-custom-binary-output-port . G20254) (make-custom-binary-input/output-port . G20253) (make-custom-binary-input-port . G20252) (make-bytevector . G20251) (lookahead-u8 . G20250) (lookahead-char . G20249) (i/o-write-error? . G19308) (i/o-read-error? . G19288) (i/o-port-error? . G19461) (i/o-invalid-position-error? . G19331) (i/o-filename-error? . G19356) (i/o-file-protection-error? . G19378) (i/o-file-is-read-only-error? . G19398) (i/o-file-does-not-exist-error? . G19438) (i/o-file-already-exists-error? . G19418) (i/o-error? . G19268) (i/o-error-port . G19463) (i/o-error-filename . G19358) (i/o-encoding-error? . G19506) (i/o-encoding-error-char . G19508) (i/o-decoding-error? . G19483) (get-u8 . G20248) (get-string-n! . G20247) (get-string-n . G20246) (get-string-all . G20245) (get-line . G20244) (get-datum . G20243) (get-char . G20242) (get-bytevector-some . G20241) (get-bytevector-n! . G20240) (get-bytevector-n . G20239) (get-bytevector-all . G20238) (flush-output-port . G20237) (close-port . G20236) (scheme-report-environment . G12419) (quotient . G20235) (null-environment . G12417) (remainder . G20234) (modulo . G20233) (inexact->exact . G20232) (force . G20231) (exact->inexact . G20230) (exit . G20229) (command-line . G19597) (string-fill! . G20228) (string-set! . G20227) (set-cdr! . G20226) (set-car! . G20225) (remove . G20224) (remv . G20223) (remp . G20222) (remq . G20221) (partition . G20220) (memv . G20219) (memq . G20218) (memp . G20217) (member . G20216) (exists . G20215) (for-all . G20214) (fold-right . G20213) (fold-left . G20212) (find . G20211) (filter . G20210) (cons* . G20209) (assv . G20208) (assq . G20207) (assp . G20206) (assoc . G20205) (call-with-string-output-port . G20204) (call-with-port . G20203) (call-with-bytevector-output-port . G20202) (bytevector->string . G20201) (buffer-mode? . G20200) (binary-port? . G20199) (with-exception-handler . G20198) (raise-continuable . G20197) (raise . G20196) (eval . G12423) (environment . G12415) (make-enumeration . G20195) (enum-set=? . G20194) (enum-set-universe . G20193) (enum-set-union . G20192) (enum-set-subset? . G20191) (enum-set-projection . G20190) (enum-set-member? . G20189) (enum-set-intersection . G20188) (enum-set-indexer . G20187) (enum-set-difference . G20186) (enum-set-constructor . G20185) (enum-set-complement . G20184) (enum-set->list . G20183) (who-condition? . G19040) (warning? . G18912) (violation? . G18972) (undefined-violation? . G19152) (syntax-violation? . G19128) (syntax-violation-subform . G19132) (syntax-violation-form . G19130) (syntax-violation . G12451) (simple-conditions . G20182) (serious-condition? . G18932) (non-continuable-violation? . G19062) (message-condition? . G18890) (make-who-condition . G19036) (make-warning . G18910) (make-violation . G18970) (make-undefined-violation . G19150) (make-syntax-violation . G19122) (make-serious-condition . G18930) (make-non-continuable-violation . G19060) (make-message-condition . G18886) (make-lexical-violation . G19100) (make-irritants-condition . G19011) (make-implementation-restriction-violation . G19080) (make-error . G18950) (make-assertion-violation . G18990) (lexical-violation? . G19102) (irritants-condition? . G19015) (implementation-restriction-violation? . G19082) (error? . G18952) (condition-who . G19042) (condition-predicate . G20181) (condition-message . G18892) (condition-irritants . G19017) (condition-accessor . G20180) (condition . G20179) (assertion-violation? . G18992) (condition? . G20178) (utf32->string . G20177) (utf16->string . G20176) (utf8->string . G20175) (uint-list->bytevector . G20174) (u8-list->bytevector . G20173) (string->utf8 . G20172) (string->utf32 . G20171) (string->utf16 . G20170) (sint-list->bytevector . G20169) (native-endianness . G20168) (bytevector? . G20167) (bytevector=? . G20166) (bytevector-uint-set! . G20165) (bytevector-uint-ref . G20164) (bytevector-u8-set! . G20163) (bytevector-u8-ref . G20162) (bytevector-u64-set! . G20161) (bytevector-u64-ref . G20160) (bytevector-u64-native-set! . G20159) (bytevector-u64-native-ref . G20158) (bytevector-u32-set! . G20157) (bytevector-u32-ref . G20156) (bytevector-u32-native-set! . G20155) (bytevector-u32-native-ref . G20154) (bytevector-u16-set! . G20153) (bytevector-u16-ref . G20152) (bytevector-u16-native-set! . G20151) (bytevector-u16-native-ref . G20150) (bytevector-sint-set! . G20149) (bytevector-sint-ref . G20148) (bytevector-s8-set! . G20147) (bytevector-s8-ref . G20146) (bytevector-s64-set! . G20145) (bytevector-s64-ref . G20144) (bytevector-s64-native-set! . G20143) (bytevector-s64-native-ref . G20142) (bytevector-s32-set! . G20141) (bytevector-s32-ref . G20140) (bytevector-s32-native-set! . G20139) (bytevector-s32-native-ref . G20138) (bytevector-s16-set! . G20137) (bytevector-s16-ref . G20136) (bytevector-s16-native-set! . G20135) (bytevector-s16-native-ref . G20134) (bytevector-length . G20133) (bytevector-ieee-single-ref . G20132) (bytevector-ieee-single-native-set! . G20131) (bytevector-ieee-single-native-ref . G20130) (bytevector-ieee-double-ref . G20129) (bytevector-ieee-double-native-set! . G20128) (bytevector-ieee-double-native-ref . G20127) (bytevector-fill! . G20126) (bytevector-copy! . G20125) (bytevector-copy . G20124) (bytevector->uint-list . G20123) (bytevector->u8-list . G20122) (bytevector->sint-list . G20121) (no-nans-violation? . G20120) (no-infinities-violation? . G20119) (make-no-nans-violation . G20118) (make-no-infinities-violation . G20117) (real->flonum . G20116) (flzero? . G20115) (fltruncate . G20114) (fltan . G20113) (flsqrt . G20112) (flsin . G20111) (flround . G20110) (flpositive? . G20109) (flonum? . G20108) (flodd? . G20107) (flnumerator . G20106) (flnegative? . G20105) (flnan? . G20104) (flmod0 . G20103) (flmod . G20102) (flmin . G20101) (flmax . G20100) (fllog . G20099) (flinteger? . G20098) (flinfinite? . G20097) (flfloor . G20096) (flfinite? . G20095) (flexpt . G20094) (flexp . G20093) (fleven? . G20092) (fldiv0-and-mod0 . G20091) (fldiv0 . G20090) (fldiv-and-mod . G20089) (fldiv . G20088) (fldenominator . G20087) (flcos . G20086) (flceiling . G20085) (flatan . G20084) (flasin . G20083) (flacos . G20082) (flabs . G20081) (fl>? . G20080) (fl>=? . G20079) (fl=? . G20078) (fl<? . G20077) (fl<=? . G20076) (fl/ . G20075) (fl- . G20074) (fl+ . G20073) (fl* . G20072) (fixnum->flonum . G20071) (fxzero? . G20070) (fxxor . G20069) (fxrotate-bit-field . G20068) (fxreverse-bit-field . G20067) (fxpositive? . G20066) (fxodd? . G20065) (fxnot . G20064) (fxnegative? . G20063) (fxmod0 . G20062) (fxmod . G20061) (fxmin . G20060) (fxmax . G20059) (fxlength . G20058) (fxior . G20057) (fxif . G20056) (fxfirst-bit-set . G20055) (fxeven? . G20054) (fxdiv0-and-mod0 . G20053) (fxdiv0 . G20052) (fxdiv-and-mod . G20051) (fxdiv . G20050) (fxcopy-bit-field . G20049) (fxcopy-bit . G20048) (fxbit-set? . G20047) (fxbit-field . G20046) (fxbit-count . G20045) (fxarithmetic-shift-right . G20044) (fxarithmetic-shift-left . G20043) (fxarithmetic-shift . G20042) (fxand . G20041) (fx>? . G20040) (fx>=? . G20039) (fx=? . G20038) (fx<? . G20037) (fx<=? . G20036) (fx-/carry . G20035) (fx- . G20034) (fx+/carry . G20033) (fx+ . G20032) (fx*/carry . G20031) (fx* . G20030) (greatest-fixnum . G20029) (least-fixnum . G20028) (fixnum-width . G20027) (fixnum? . G20026) (bitwise-rotate-bit-field . G20025) (bitwise-reverse-bit-field . G20024) (bitwise-length . G20023) (bitwise-if . G20022) (bitwise-first-bit-set . G20021) (bitwise-copy-bit-field . G20020) (bitwise-copy-bit . G20019) (bitwise-bit-set? . G20018) (bitwise-bit-field . G20017) (bitwise-bit-count . G20016) (bitwise-xor . G20015) (bitwise-ior . G20014) (bitwise-and . G20013) (bitwise-not . G20012) (bitwise-arithmetic-shift-right . G20011) (bitwise-arithmetic-shift-left . G20010) (bitwise-arithmetic-shift . G20009) (zero? . G20008) (vector? . G20007) (vector-set! . G20006) (vector-ref . G20005) (vector-map . G20004) (vector-length . G20003) (vector-for-each . G20002) (vector-fill! . G20001) (vector->list . G20000) (vector . G19999) (values . G19998) (truncate . G19997) (tan . G19996) (symbol? . G19995) (symbol=? . G19994) (symbol->string . G19993) (substring . G19992) (string? . G19991) (string>? . G19990) (string>=? . G19989) (string=? . G19988) (string<? . G19987) (string<=? . G19986) (string-ref . G19985) (string-length . G19984) (string-for-each . G19983) (string-copy . G19982) (string-append . G19981) (string->symbol . G19980) (string->number . G19979) (string->list . G19978) (string . G19977) (sqrt . G19976) (sin . G19975) (round . G19974) (reverse . G19973) (real? . G19972) (real-valued? . G19971) (real-part . G19970) (rationalize . G19969) (rational? . G19968) (rational-valued? . G19967) (procedure? . G19966) (positive? . G19965) (pair? . G19964) (odd? . G19963) (numerator . G19962) (number? . G19961) (number->string . G19960) (null? . G19959) (not . G19958) (negative? . G19957) (nan? . G19956) (min . G19955) (max . G19954) (map . G19953) (make-vector . G19952) (make-string . G19951) (make-rectangular . G19950) (make-polar . G19949) (magnitude . G19948) (log . G19947) (list? . G19946) (list-tail . G19945) (list-ref . G19944) (list->vector . G19943) (list->string . G19942) (list . G19941) (length . G19940) (lcm . G19939) (integer? . G19938) (integer-valued? . G19937) (integer->char . G19936) (infinite? . G19935) (inexact? . G19934) (inexact . G19933) (imag-part . G19932) (gcd . G19931) (for-each . G19930) (floor . G19929) (finite? . G19928) (expt . G19927) (exp . G19926) (exact? . G19925) (exact-integer-sqrt . G19924) (exact . G19923) (even? . G19922) (error . G19921) (eqv? . G19920) (equal? . G19919) (eq? . G19918) (dynamic-wind . G19917) (div0-and-mod0 . G19916) (mod0 . G19915) (div0 . G19914) (div-and-mod . G19913) (mod . G19912) (div . G19911) (denominator . G19910) (cos . G19909) (cons . G19908) (complex? . G19907) (char? . G19906) (char>? . G19905) (char>=? . G19904) (char=? . G19903) (char<? . G19902) (char<=? . G19901) (char->integer . G19900) (ceiling . G19899) (call-with-values . G19898) (call/cc . G19897) (call-with-current-continuation . G19896) (cddddr . G19895) (cdddar . G19894) (cddadr . G19893) (cddaar . G19892) (cdaddr . G19891) (cdadar . G19890) (cdaadr . G19889) (cdaaar . G19888) (cadddr . G19887) (caddar . G19886) (cadadr . G19885) (cadaar . G19884) (caaddr . G19883) (caadar . G19882) (caaadr . G19881) (caaaar . G19880) (cdddr . G19879) (cddar . G19878) (cdadr . G19877) (cdaar . G19876) (caddr . G19875) (cadar . G19874) (caadr . G19873) (caaar . G19872) (cddr . G19871) (cdar . G19870) (cadr . G19869) (caar . G19868) (cdr . G19867) (car . G19866) (boolean? . G19865) (boolean=? . G19864) (atan . G19863) (assertion-violation . G19862) (asin . G19861) (apply . G19860) (append . G19859) (angle . G19858) (acos . G19857) (abs . G19856) (/ . G19855) (* . G19854) (- . G19853) (+ . G19852) (>= . G19851) (> . G19850) (= . G19849) (<= . G19848) (< . G19847) (&no-nans . G19846) (&no-infinities . G19845) (&i/o-encoding . G19844) (&i/o-decoding . G19843) (&i/o-port . G19842) (&i/o-file-does-not-exist . G19841) (&i/o-file-already-exists . G19840) (&i/o-file-is-read-only . G19839) (&i/o-file-protection . G19838) (&i/o-filename . G19837) (&i/o-invalid-position . G19836) (&i/o-write . G19835) (&i/o-read . G19834) (&i/o . G19833) (&undefined . G19832) (&syntax . G19831) (&lexical . G19830) (&implementation-restriction . G19829) (&non-continuable . G19828) (&who . G19827) (&irritants . G19826) (&assertion . G19825) (&violation . G19824) (&error . G19823) (&serious . G19822) (&warning . G19821) (&message . G19820) (&condition . G19819) (define-condition-type . G19818) (define-enumeration . G19817) (define-record-type . G19816) (parent-rtd . G19815) (nongenerative . G19814) (opaque . G19813) (sealed . G19812) (protocol . G19811) (parent . G19810) (immutable . G19809) (mutable . G19808) (fields . G19807) (error-handling-mode . G19806) (file-options . G19805) (buffer-mode . G19804) (eol-style . G19803) (guard . G19802) (trace-define . G19801) (trace-lambda . G19800) (unsyntax-splicing . G19799) (unsyntax . G19798) (unquote-splicing . G19797) (unquote . G19796) (_ . G19795) (else . G19794) (=> . G19793) (... . G19792) (assert . G19791) (endianness . G19790) (delay . G19789) (time . G19788) (or . G19787) (and . G19786) (do . G19785) (cond . G19784) (let* . G19783) (let . G19782) (let*-values . G19781) (let-values . G19780) (identifier-syntax . G19779) (with-syntax . G19778) (quasisyntax . G19777) (quasiquote . G19776) (syntax-rules . G19775) (include . G19774) (define-struct . G19773) (record-constructor-descriptor . G19772) (record-type-descriptor . G19771) (case . G19770) (parameterize . G19769) (unless . G19768) (when . G19767) (if . G19766) (letrec* . G19765) (letrec . G19764) (type-descriptor . G19763) (case-lambda . G19762) (lambda . G19761) (syntax . G19760) (syntax-case . G19759) (quote . G19758) (foreign-call . G19757) (letrec-syntax . G19756) (let-syntax . G19755) (set! . G19754) (import . G19753) (begin . G19752) (module . G19751) (define-syntax . G19750) (define . G19749)) '((G20507 core-prim . &no-nans-rcd) (G20506 core-prim . &no-nans-rtd) (G20505 core-prim . &no-infinities-rcd) (G20504 core-prim . &no-infinities-rtd) (G20503 core-prim . &i/o-encoding-rcd) (G20502 core-prim . &i/o-encoding-rtd) (G20501 core-prim . &i/o-decoding-rcd) (G20500 core-prim . &i/o-decoding-rtd) (G20499 core-prim . &i/o-port-rcd) (G20498 core-prim . &i/o-port-rtd) (G20497 core-prim . &i/o-file-does-not-exist-rcd) (G20496 core-prim . &i/o-file-does-not-exist-rtd) (G20495 core-prim . &i/o-file-already-exists-rcd) (G20494 core-prim . &i/o-file-already-exists-rtd) (G20493 core-prim . &i/o-file-is-read-only-rcd) (G20492 core-prim . &i/o-file-is-read-only-rtd) (G20491 core-prim . &i/o-file-protection-rcd) (G20490 core-prim . &i/o-file-protection-rtd) (G20489 core-prim . &i/o-filename-rcd) (G20488 core-prim . &i/o-filename-rtd) (G20487 core-prim . &i/o-invalid-position-rcd) (G20486 core-prim . &i/o-invalid-position-rtd) (G20485 core-prim . &i/o-write-rcd) (G20484 core-prim . &i/o-write-rtd) (G20483 core-prim . &i/o-read-rcd) (G20482 core-prim . &i/o-read-rtd) (G20481 core-prim . &i/o-rcd) (G20480 core-prim . &i/o-rtd) (G20479 core-prim . &undefined-rcd) (G20478 core-prim . &undefined-rtd) (G20477 core-prim . &syntax-rcd) (G20476 core-prim . &syntax-rtd) (G20475 core-prim . &lexical-rcd) (G20474 core-prim . &lexical-rtd) (G20473 core-prim . &implementation-restriction-rcd) (G20472 core-prim . &implementation-restriction-rtd) (G20471 core-prim . &non-continuable-rcd) (G20470 core-prim . &non-continuable-rtd) (G20469 core-prim . &who-rcd) (G20468 core-prim . &who-rtd) (G20467 core-prim . &irritants-rcd) (G20466 core-prim . &irritants-rtd) (G20465 core-prim . &assertion-rcd) (G20464 core-prim . &assertion-rtd) (G20463 core-prim . &violation-rcd) (G20462 core-prim . &violation-rtd) (G20461 core-prim . &error-rcd) (G20460 core-prim . &error-rtd) (G20459 core-prim . &serious-rcd) (G20458 core-prim . &serious-rtd) (G20457 core-prim . &warning-rcd) (G20456 core-prim . &warning-rtd) (G20455 core-prim . &message-rcd) (G20454 core-prim . &message-rtd) (G20453 core-prim . &condition-rcd) (G20452 core-prim . &condition-rtd) (G12445 core-prim . syntax-error) (G12218 core-prim . syntax-dispatch) (G20451 core-prim . pretty-print) (G20450 core-prim . eval-core) (G20449 core-prim . set-symbol-value!) (G20448 core-prim . symbol-value) (G20447 core-prim . gensym) (G20446 core-prim . void) (G19603 core-prim . load) (G12463 core-prim . interaction-environment) (G20445 core-prim . char-ready?) (G20444 core-prim . regexp?) (G20443 core-prim . read-line) (G20442 core-prim . dotted-list?) (G20441 core-prim . circular-list?) (G20440 core-prim . proper-list?) (G20439 core-prim . circular-list) (G20438 core-prim . last) (G20437 core-prim . last-pair) (G20436 core-prim . not-pair?) (G20435 core-prim . split-at!) (G20434 core-prim . split-at) (G20433 core-prim . list=) (G20432 core-prim . list-copy) (G20431 core-prim . list-tabulate) (G20430 core-prim . make-list) (G20429 core-prim . xcons) (G20428 core-prim . tenth) (G20427 core-prim . ninth) (G20426 core-prim . eighth) (G20425 core-prim . seventh) (G20424 core-prim . sixth) (G20423 core-prim . fifth) (G20422 core-prim . drop-right!) (G20421 core-prim . drop-right) (G20420 core-prim . take-right) (G20419 core-prim . take!) (G20418 core-prim . drop) (G20417 core-prim . take) (G20416 core-prim . car+cdr) (G20415 core-prim . third) (G20414 core-prim . second) (G20413 core-prim . first) (G20412 core-prim . assoc-ref) (G20411 core-prim . alist-cons) (G20410 core-prim . print) (G20409 core-prim . format) (G20408 core-prim . standard-library-path) (G20407 core-prim . current-directory) (G20406 core-prim . write-to-file) (G20405 core-prim . file->list) (G20404 core-prim . file->string) (G20403 core-prim . digit->integer) (G20402 core-prim . call-with-string-input-port) (G20401 core-prim . call-with-string-io) (G20400 core-prim . string-split) (G20399 core-prim . bytevector-for-each) (G20398 core-prim . string->regexp) (G20397 core-prim . rxmatch) (G20396 core-prim . regexp-replace-all) (G20395 core-prim . hashtable-for-each) (G20394 core-prim . readdir) (G20393 core-prim . get-environment-variables) (G20392 core-prim . get-environment-variable) (G20391 core-prim . get-command-line) (G20390 core-prim . sys-display) (G20389 core-prim . source-info) (G20388 core-prim . set-source-info!) (G20387 core-prim . receive) (G20386 core-prim . string-upcase) (G20385 core-prim . string-titlecase) (G20384 core-prim . string-normalize-nfkd) (G20383 core-prim . string-normalize-nfkc) (G20382 core-prim . string-normalize-nfd) (G20381 core-prim . string-normalize-nfc) (G20380 core-prim . string-foldcase) (G20379 core-prim . string-downcase) (G20378 core-prim . string-ci>?) (G20377 core-prim . string-ci>=?) (G20376 core-prim . string-ci=?) (G20375 core-prim . string-ci<?) (G20374 core-prim . string-ci<=?) (G20373 core-prim . char-whitespace?) (G20372 core-prim . char-upper-case?) (G20371 core-prim . char-title-case?) (G20370 core-prim . char-numeric?) (G20369 core-prim . char-lower-case?) (G20368 core-prim . char-general-category) (G20367 core-prim . char-upcase) (G20366 core-prim . char-titlecase) (G20365 core-prim . char-foldcase) (G20364 core-prim . char-downcase) (G20363 core-prim . char-ci>?) (G20362 core-prim . char-ci>=?) (G20361 core-prim . char-ci=?) (G20360 core-prim . char-ci<?) (G20359 core-prim . char-ci<=?) (G20358 core-prim . char-alphabetic?) (G11704 core-prim . make-variable-transformer) (G12453 core-prim . identifier?) (G12437 core-prim . generate-temporaries) (G12439 core-prim . free-identifier=?) (G12457 core-prim . syntax->datum) (G12455 core-prim . datum->syntax) (G12441 core-prim . bound-identifier=?) (G20357 core-prim . record-type-descriptor?) (G20356 core-prim . record-predicate) (G20355 core-prim . record-mutator) (G20354 core-prim . record-constructor) (G20353 core-prim . record-accessor) (G20352 core-prim . make-record-type-descriptor) (G20351 core-prim . make-record-constructor-descriptor) (G20350 core-prim . record?) (G20349 core-prim . record-type-uid) (G20348 core-prim . record-type-sealed?) (G20347 core-prim . record-type-parent) (G20346 core-prim . record-type-opaque?) (G20345 core-prim . record-type-name) (G20344 core-prim . record-type-generative?) (G20343 core-prim . record-type-field-names) (G20342 core-prim . record-rtd) (G20341 core-prim . record-field-mutable?) (G20340 core-prim . delete-file) (G20339 core-prim . file-exists?) (G20338 core-prim . vector-sort!) (G20337 core-prim . vector-sort) (G20336 core-prim . list-sort) (G20335 core-prim . symbol-hash) (G20334 core-prim . string-ci-hash) (G20333 core-prim . string-hash) (G20332 core-prim . equal-hash) (G20331 core-prim . hashtable-equivalence-function) (G20330 core-prim . make-hashtable) (G20329 core-prim . hashtable-hash-function) (G20328 core-prim . make-eqv-hashtable) (G20327 core-prim . make-eq-hashtable) (G20326 core-prim . hashtable?) (G20325 core-prim . hashtable-update!) (G20324 core-prim . hashtable-size) (G20323 core-prim . hashtable-set!) (G20322 core-prim . hashtable-ref) (G20321 core-prim . hashtable-mutable?) (G20320 core-prim . hashtable-keys) (G20319 core-prim . hashtable-entries) (G20318 core-prim . hashtable-delete!) (G20317 core-prim . hashtable-copy) (G20316 core-prim . hashtable-contains?) (G20315 core-prim . hashtable-clear!) (G20314 core-prim . call-with-output-file) (G20313 core-prim . call-with-input-file) (G20312 core-prim . write-char) (G20311 core-prim . write) (G20310 core-prim . with-output-to-file) (G20309 core-prim . with-input-from-file) (G20308 core-prim . read-char) (G20307 core-prim . read) (G20306 core-prim . peek-char) (G20305 core-prim . open-output-file) (G20304 core-prim . open-input-file) (G20303 core-prim . newline) (G20302 core-prim . display) (G20301 core-prim . close-output-port) (G20300 core-prim . close-input-port) (G20299 core-prim . eof-object?) (G20298 core-prim . eof-object) (G20297 core-prim . current-error-port) (G20296 core-prim . current-output-port) (G20295 core-prim . current-input-port) (G20294 core-prim . output-port?) (G20293 core-prim . input-port?) (G20292 core-prim . utf-8-codec) (G20291 core-prim . utf-16-codec) (G20290 core-prim . transcoder-error-handling-mode) (G20289 core-prim . transcoder-eol-style) (G20288 core-prim . transcoder-codec) (G20287 core-prim . transcoded-port) (G20286 core-prim . textual-port?) (G20285 core-prim . string->bytevector) (G20284 core-prim . standard-output-port) (G20283 core-prim . standard-input-port) (G20282 core-prim . standard-error-port) (G20281 core-prim . set-port-position!) (G20280 core-prim . put-u8) (G20279 core-prim . put-string) (G20278 core-prim . put-datum) (G20277 core-prim . put-char) (G20276 core-prim . put-bytevector) (G20275 core-prim . port?) (G20274 core-prim . port-transcoder) (G20273 core-prim . port-position) (G20272 core-prim . port-has-set-port-position!?) (G20271 core-prim . port-has-port-position?) (G20270 core-prim . port-eof?) (G20269 core-prim . output-port-buffer-mode) (G20268 core-prim . open-string-output-port) (G20267 core-prim . open-string-input-port) (G20266 core-prim . open-file-output-port) (G20265 core-prim . open-file-input/output-port) (G20264 core-prim . open-file-input-port) (G20263 core-prim . open-bytevector-output-port) (G20262 core-prim . open-bytevector-input-port) (G20261 core-prim . native-transcoder) (G20260 core-prim . native-eol-style) (G20259 core-prim . make-transcoder) (G20258 core-prim . latin-1-codec) (G19306 core-prim . make-i/o-write-error) (G19286 core-prim . make-i/o-read-error) (G19457 core-prim . make-i/o-port-error) (G19327 core-prim . make-i/o-invalid-position-error) (G19352 core-prim . make-i/o-filename-error) (G19376 core-prim . make-i/o-file-protection-error) (G19396 core-prim . make-i/o-file-is-read-only-error) (G19436 core-prim . make-i/o-file-does-not-exist-error) (G19416 core-prim . make-i/o-file-already-exists-error) (G19266 core-prim . make-i/o-error) (G19502 core-prim . make-i/o-encoding-error) (G19481 core-prim . make-i/o-decoding-error) (G20257 core-prim . make-custom-textual-output-port) (G20256 core-prim . make-custom-textual-input/output-port) (G20255 core-prim . make-custom-textual-input-port) (G20254 core-prim . make-custom-binary-output-port) (G20253 core-prim . make-custom-binary-input/output-port) (G20252 core-prim . make-custom-binary-input-port) (G20251 core-prim . make-bytevector) (G20250 core-prim . lookahead-u8) (G20249 core-prim . lookahead-char) (G19308 core-prim . i/o-write-error?) (G19288 core-prim . i/o-read-error?) (G19461 core-prim . i/o-port-error?) (G19331 core-prim . i/o-invalid-position-error?) (G19356 core-prim . i/o-filename-error?) (G19378 core-prim . i/o-file-protection-error?) (G19398 core-prim . i/o-file-is-read-only-error?) (G19438 core-prim . i/o-file-does-not-exist-error?) (G19418 core-prim . i/o-file-already-exists-error?) (G19268 core-prim . i/o-error?) (G19463 core-prim . i/o-error-port) (G19358 core-prim . i/o-error-filename) (G19506 core-prim . i/o-encoding-error?) (G19508 core-prim . i/o-encoding-error-char) (G19483 core-prim . i/o-decoding-error?) (G20248 core-prim . get-u8) (G20247 core-prim . get-string-n!) (G20246 core-prim . get-string-n) (G20245 core-prim . get-string-all) (G20244 core-prim . get-line) (G20243 core-prim . get-datum) (G20242 core-prim . get-char) (G20241 core-prim . get-bytevector-some) (G20240 core-prim . get-bytevector-n!) (G20239 core-prim . get-bytevector-n) (G20238 core-prim . get-bytevector-all) (G20237 core-prim . flush-output-port) (G20236 core-prim . close-port) (G12419 core-prim . scheme-report-environment) (G20235 core-prim . quotient) (G12417 core-prim . null-environment) (G20234 core-prim . remainder) (G20233 core-prim . modulo) (G20232 core-prim . inexact->exact) (G20231 core-prim . force) (G20230 core-prim . exact->inexact) (G20229 core-prim . exit) (G19597 core-prim . command-line) (G20228 core-prim . string-fill!) (G20227 core-prim . string-set!) (G20226 core-prim . set-cdr!) (G20225 core-prim . set-car!) (G20224 core-prim . remove) (G20223 core-prim . remv) (G20222 core-prim . remp) (G20221 core-prim . remq) (G20220 core-prim . partition) (G20219 core-prim . memv) (G20218 core-prim . memq) (G20217 core-prim . memp) (G20216 core-prim . member) (G20215 core-prim . exists) (G20214 core-prim . for-all) (G20213 core-prim . fold-right) (G20212 core-prim . fold-left) (G20211 core-prim . find) (G20210 core-prim . filter) (G20209 core-prim . cons*) (G20208 core-prim . assv) (G20207 core-prim . assq) (G20206 core-prim . assp) (G20205 core-prim . assoc) (G20204 core-prim . call-with-string-output-port) (G20203 core-prim . call-with-port) (G20202 core-prim . call-with-bytevector-output-port) (G20201 core-prim . bytevector->string) (G20200 core-prim . buffer-mode?) (G20199 core-prim . binary-port?) (G20198 core-prim . with-exception-handler) (G20197 core-prim . raise-continuable) (G20196 core-prim . raise) (G12423 core-prim . eval) (G12415 core-prim . environment) (G20195 core-prim . make-enumeration) (G20194 core-prim . enum-set=?) (G20193 core-prim . enum-set-universe) (G20192 core-prim . enum-set-union) (G20191 core-prim . enum-set-subset?) (G20190 core-prim . enum-set-projection) (G20189 core-prim . enum-set-member?) (G20188 core-prim . enum-set-intersection) (G20187 core-prim . enum-set-indexer) (G20186 core-prim . enum-set-difference) (G20185 core-prim . enum-set-constructor) (G20184 core-prim . enum-set-complement) (G20183 core-prim . enum-set->list) (G19040 core-prim . who-condition?) (G18912 core-prim . warning?) (G18972 core-prim . violation?) (G19152 core-prim . undefined-violation?) (G19128 core-prim . syntax-violation?) (G19132 core-prim . syntax-violation-subform) (G19130 core-prim . syntax-violation-form) (G12451 core-prim . syntax-violation) (G20182 core-prim . simple-conditions) (G18932 core-prim . serious-condition?) (G19062 core-prim . non-continuable-violation?) (G18890 core-prim . message-condition?) (G19036 core-prim . make-who-condition) (G18910 core-prim . make-warning) (G18970 core-prim . make-violation) (G19150 core-prim . make-undefined-violation) (G19122 core-prim . make-syntax-violation) (G18930 core-prim . make-serious-condition) (G19060 core-prim . make-non-continuable-violation) (G18886 core-prim . make-message-condition) (G19100 core-prim . make-lexical-violation) (G19011 core-prim . make-irritants-condition) (G19080 core-prim . make-implementation-restriction-violation) (G18950 core-prim . make-error) (G18990 core-prim . make-assertion-violation) (G19102 core-prim . lexical-violation?) (G19015 core-prim . irritants-condition?) (G19082 core-prim . implementation-restriction-violation?) (G18952 core-prim . error?) (G19042 core-prim . condition-who) (G20181 core-prim . condition-predicate) (G18892 core-prim . condition-message) (G19017 core-prim . condition-irritants) (G20180 core-prim . condition-accessor) (G20179 core-prim . condition) (G18992 core-prim . assertion-violation?) (G20178 core-prim . condition?) (G20177 core-prim . utf32->string) (G20176 core-prim . utf16->string) (G20175 core-prim . utf8->string) (G20174 core-prim . uint-list->bytevector) (G20173 core-prim . u8-list->bytevector) (G20172 core-prim . string->utf8) (G20171 core-prim . string->utf32) (G20170 core-prim . string->utf16) (G20169 core-prim . sint-list->bytevector) (G20168 core-prim . native-endianness) (G20167 core-prim . bytevector?) (G20166 core-prim . bytevector=?) (G20165 core-prim . bytevector-uint-set!) (G20164 core-prim . bytevector-uint-ref) (G20163 core-prim . bytevector-u8-set!) (G20162 core-prim . bytevector-u8-ref) (G20161 core-prim . bytevector-u64-set!) (G20160 core-prim . bytevector-u64-ref) (G20159 core-prim . bytevector-u64-native-set!) (G20158 core-prim . bytevector-u64-native-ref) (G20157 core-prim . bytevector-u32-set!) (G20156 core-prim . bytevector-u32-ref) (G20155 core-prim . bytevector-u32-native-set!) (G20154 core-prim . bytevector-u32-native-ref) (G20153 core-prim . bytevector-u16-set!) (G20152 core-prim . bytevector-u16-ref) (G20151 core-prim . bytevector-u16-native-set!) (G20150 core-prim . bytevector-u16-native-ref) (G20149 core-prim . bytevector-sint-set!) (G20148 core-prim . bytevector-sint-ref) (G20147 core-prim . bytevector-s8-set!) (G20146 core-prim . bytevector-s8-ref) (G20145 core-prim . bytevector-s64-set!) (G20144 core-prim . bytevector-s64-ref) (G20143 core-prim . bytevector-s64-native-set!) (G20142 core-prim . bytevector-s64-native-ref) (G20141 core-prim . bytevector-s32-set!) (G20140 core-prim . bytevector-s32-ref) (G20139 core-prim . bytevector-s32-native-set!) (G20138 core-prim . bytevector-s32-native-ref) (G20137 core-prim . bytevector-s16-set!) (G20136 core-prim . bytevector-s16-ref) (G20135 core-prim . bytevector-s16-native-set!) (G20134 core-prim . bytevector-s16-native-ref) (G20133 core-prim . bytevector-length) (G20132 core-prim . bytevector-ieee-single-ref) (G20131 core-prim . bytevector-ieee-single-native-set!) (G20130 core-prim . bytevector-ieee-single-native-ref) (G20129 core-prim . bytevector-ieee-double-ref) (G20128 core-prim . bytevector-ieee-double-native-set!) (G20127 core-prim . bytevector-ieee-double-native-ref) (G20126 core-prim . bytevector-fill!) (G20125 core-prim . bytevector-copy!) (G20124 core-prim . bytevector-copy) (G20123 core-prim . bytevector->uint-list) (G20122 core-prim . bytevector->u8-list) (G20121 core-prim . bytevector->sint-list) (G20120 core-prim . no-nans-violation?) (G20119 core-prim . no-infinities-violation?) (G20118 core-prim . make-no-nans-violation) (G20117 core-prim . make-no-infinities-violation) (G20116 core-prim . real->flonum) (G20115 core-prim . flzero?) (G20114 core-prim . fltruncate) (G20113 core-prim . fltan) (G20112 core-prim . flsqrt) (G20111 core-prim . flsin) (G20110 core-prim . flround) (G20109 core-prim . flpositive?) (G20108 core-prim . flonum?) (G20107 core-prim . flodd?) (G20106 core-prim . flnumerator) (G20105 core-prim . flnegative?) (G20104 core-prim . flnan?) (G20103 core-prim . flmod0) (G20102 core-prim . flmod) (G20101 core-prim . flmin) (G20100 core-prim . flmax) (G20099 core-prim . fllog) (G20098 core-prim . flinteger?) (G20097 core-prim . flinfinite?) (G20096 core-prim . flfloor) (G20095 core-prim . flfinite?) (G20094 core-prim . flexpt) (G20093 core-prim . flexp) (G20092 core-prim . fleven?) (G20091 core-prim . fldiv0-and-mod0) (G20090 core-prim . fldiv0) (G20089 core-prim . fldiv-and-mod) (G20088 core-prim . fldiv) (G20087 core-prim . fldenominator) (G20086 core-prim . flcos) (G20085 core-prim . flceiling) (G20084 core-prim . flatan) (G20083 core-prim . flasin) (G20082 core-prim . flacos) (G20081 core-prim . flabs) (G20080 core-prim . fl>?) (G20079 core-prim . fl>=?) (G20078 core-prim . fl=?) (G20077 core-prim . fl<?) (G20076 core-prim . fl<=?) (G20075 core-prim . fl/) (G20074 core-prim . fl-) (G20073 core-prim . fl+) (G20072 core-prim . fl*) (G20071 core-prim . fixnum->flonum) (G20070 core-prim . fxzero?) (G20069 core-prim . fxxor) (G20068 core-prim . fxrotate-bit-field) (G20067 core-prim . fxreverse-bit-field) (G20066 core-prim . fxpositive?) (G20065 core-prim . fxodd?) (G20064 core-prim . fxnot) (G20063 core-prim . fxnegative?) (G20062 core-prim . fxmod0) (G20061 core-prim . fxmod) (G20060 core-prim . fxmin) (G20059 core-prim . fxmax) (G20058 core-prim . fxlength) (G20057 core-prim . fxior) (G20056 core-prim . fxif) (G20055 core-prim . fxfirst-bit-set) (G20054 core-prim . fxeven?) (G20053 core-prim . fxdiv0-and-mod0) (G20052 core-prim . fxdiv0) (G20051 core-prim . fxdiv-and-mod) (G20050 core-prim . fxdiv) (G20049 core-prim . fxcopy-bit-field) (G20048 core-prim . fxcopy-bit) (G20047 core-prim . fxbit-set?) (G20046 core-prim . fxbit-field) (G20045 core-prim . fxbit-count) (G20044 core-prim . fxarithmetic-shift-right) (G20043 core-prim . fxarithmetic-shift-left) (G20042 core-prim . fxarithmetic-shift) (G20041 core-prim . fxand) (G20040 core-prim . fx>?) (G20039 core-prim . fx>=?) (G20038 core-prim . fx=?) (G20037 core-prim . fx<?) (G20036 core-prim . fx<=?) (G20035 core-prim . fx-/carry) (G20034 core-prim . fx-) (G20033 core-prim . fx+/carry) (G20032 core-prim . fx+) (G20031 core-prim . fx*/carry) (G20030 core-prim . fx*) (G20029 core-prim . greatest-fixnum) (G20028 core-prim . least-fixnum) (G20027 core-prim . fixnum-width) (G20026 core-prim . fixnum?) (G20025 core-prim . bitwise-rotate-bit-field) (G20024 core-prim . bitwise-reverse-bit-field) (G20023 core-prim . bitwise-length) (G20022 core-prim . bitwise-if) (G20021 core-prim . bitwise-first-bit-set) (G20020 core-prim . bitwise-copy-bit-field) (G20019 core-prim . bitwise-copy-bit) (G20018 core-prim . bitwise-bit-set?) (G20017 core-prim . bitwise-bit-field) (G20016 core-prim . bitwise-bit-count) (G20015 core-prim . bitwise-xor) (G20014 core-prim . bitwise-ior) (G20013 core-prim . bitwise-and) (G20012 core-prim . bitwise-not) (G20011 core-prim . bitwise-arithmetic-shift-right) (G20010 core-prim . bitwise-arithmetic-shift-left) (G20009 core-prim . bitwise-arithmetic-shift) (G20008 core-prim . zero?) (G20007 core-prim . vector?) (G20006 core-prim . vector-set!) (G20005 core-prim . vector-ref) (G20004 core-prim . vector-map) (G20003 core-prim . vector-length) (G20002 core-prim . vector-for-each) (G20001 core-prim . vector-fill!) (G20000 core-prim . vector->list) (G19999 core-prim . vector) (G19998 core-prim . values) (G19997 core-prim . truncate) (G19996 core-prim . tan) (G19995 core-prim . symbol?) (G19994 core-prim . symbol=?) (G19993 core-prim . symbol->string) (G19992 core-prim . substring) (G19991 core-prim . string?) (G19990 core-prim . string>?) (G19989 core-prim . string>=?) (G19988 core-prim . string=?) (G19987 core-prim . string<?) (G19986 core-prim . string<=?) (G19985 core-prim . string-ref) (G19984 core-prim . string-length) (G19983 core-prim . string-for-each) (G19982 core-prim . string-copy) (G19981 core-prim . string-append) (G19980 core-prim . string->symbol) (G19979 core-prim . string->number) (G19978 core-prim . string->list) (G19977 core-prim . string) (G19976 core-prim . sqrt) (G19975 core-prim . sin) (G19974 core-prim . round) (G19973 core-prim . reverse) (G19972 core-prim . real?) (G19971 core-prim . real-valued?) (G19970 core-prim . real-part) (G19969 core-prim . rationalize) (G19968 core-prim . rational?) (G19967 core-prim . rational-valued?) (G19966 core-prim . procedure?) (G19965 core-prim . positive?) (G19964 core-prim . pair?) (G19963 core-prim . odd?) (G19962 core-prim . numerator) (G19961 core-prim . number?) (G19960 core-prim . number->string) (G19959 core-prim . null?) (G19958 core-prim . not) (G19957 core-prim . negative?) (G19956 core-prim . nan?) (G19955 core-prim . min) (G19954 core-prim . max) (G19953 core-prim . map) (G19952 core-prim . make-vector) (G19951 core-prim . make-string) (G19950 core-prim . make-rectangular) (G19949 core-prim . make-polar) (G19948 core-prim . magnitude) (G19947 core-prim . log) (G19946 core-prim . list?) (G19945 core-prim . list-tail) (G19944 core-prim . list-ref) (G19943 core-prim . list->vector) (G19942 core-prim . list->string) (G19941 core-prim . list) (G19940 core-prim . length) (G19939 core-prim . lcm) (G19938 core-prim . integer?) (G19937 core-prim . integer-valued?) (G19936 core-prim . integer->char) (G19935 core-prim . infinite?) (G19934 core-prim . inexact?) (G19933 core-prim . inexact) (G19932 core-prim . imag-part) (G19931 core-prim . gcd) (G19930 core-prim . for-each) (G19929 core-prim . floor) (G19928 core-prim . finite?) (G19927 core-prim . expt) (G19926 core-prim . exp) (G19925 core-prim . exact?) (G19924 core-prim . exact-integer-sqrt) (G19923 core-prim . exact) (G19922 core-prim . even?) (G19921 core-prim . error) (G19920 core-prim . eqv?) (G19919 core-prim . equal?) (G19918 core-prim . eq?) (G19917 core-prim . dynamic-wind) (G19916 core-prim . div0-and-mod0) (G19915 core-prim . mod0) (G19914 core-prim . div0) (G19913 core-prim . div-and-mod) (G19912 core-prim . mod) (G19911 core-prim . div) (G19910 core-prim . denominator) (G19909 core-prim . cos) (G19908 core-prim . cons) (G19907 core-prim . complex?) (G19906 core-prim . char?) (G19905 core-prim . char>?) (G19904 core-prim . char>=?) (G19903 core-prim . char=?) (G19902 core-prim . char<?) (G19901 core-prim . char<=?) (G19900 core-prim . char->integer) (G19899 core-prim . ceiling) (G19898 core-prim . call-with-values) (G19897 core-prim . call/cc) (G19896 core-prim . call-with-current-continuation) (G19895 core-prim . cddddr) (G19894 core-prim . cdddar) (G19893 core-prim . cddadr) (G19892 core-prim . cddaar) (G19891 core-prim . cdaddr) (G19890 core-prim . cdadar) (G19889 core-prim . cdaadr) (G19888 core-prim . cdaaar) (G19887 core-prim . cadddr) (G19886 core-prim . caddar) (G19885 core-prim . cadadr) (G19884 core-prim . cadaar) (G19883 core-prim . caaddr) (G19882 core-prim . caadar) (G19881 core-prim . caaadr) (G19880 core-prim . caaaar) (G19879 core-prim . cdddr) (G19878 core-prim . cddar) (G19877 core-prim . cdadr) (G19876 core-prim . cdaar) (G19875 core-prim . caddr) (G19874 core-prim . cadar) (G19873 core-prim . caadr) (G19872 core-prim . caaar) (G19871 core-prim . cddr) (G19870 core-prim . cdar) (G19869 core-prim . cadr) (G19868 core-prim . caar) (G19867 core-prim . cdr) (G19866 core-prim . car) (G19865 core-prim . boolean?) (G19864 core-prim . boolean=?) (G19863 core-prim . atan) (G19862 core-prim . assertion-violation) (G19861 core-prim . asin) (G19860 core-prim . apply) (G19859 core-prim . append) (G19858 core-prim . angle) (G19857 core-prim . acos) (G19856 core-prim . abs) (G19855 core-prim . /) (G19854 core-prim . *) (G19853 core-prim . -) (G19852 core-prim . +) (G19851 core-prim . >=) (G19850 core-prim . >) (G19849 core-prim . =) (G19848 core-prim . <=) (G19847 core-prim . <) (G19846 $core-rtd &no-nans-rtd &no-nans-rcd) (G19845 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G19844 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G19843 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G19842 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G19841 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G19840 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G19839 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G19838 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G19837 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G19836 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G19835 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G19834 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G19833 $core-rtd &i/o-rtd &i/o-rcd) (G19832 $core-rtd &undefined-rtd &undefined-rcd) (G19831 $core-rtd &syntax-rtd &syntax-rcd) (G19830 $core-rtd &lexical-rtd &lexical-rcd) (G19829 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G19828 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G19827 $core-rtd &who-rtd &who-rcd) (G19826 $core-rtd &irritants-rtd &irritants-rcd) (G19825 $core-rtd &assertion-rtd &assertion-rcd) (G19824 $core-rtd &violation-rtd &violation-rcd) (G19823 $core-rtd &error-rtd &error-rcd) (G19822 $core-rtd &serious-rtd &serious-rcd) (G19821 $core-rtd &warning-rtd &warning-rcd) (G19820 $core-rtd &message-rtd &message-rcd) (G19819 $core-rtd &condition-rtd &condition-rcd) (G19818 macro . define-condition-type) (G19817 macro . define-enumeration) (G19816 macro . define-record-type) (G19815 macro . parent-rtd) (G19814 macro . nongenerative) (G19813 macro . opaque) (G19812 macro . sealed) (G19811 macro . protocol) (G19810 macro . parent) (G19809 macro . immutable) (G19808 macro . mutable) (G19807 macro . fields) (G19806 macro . error-handling-mode) (G19805 macro . file-options) (G19804 macro . buffer-mode) (G19803 macro . eol-style) (G19802 macro . guard) (G19801 macro . trace-define) (G19800 macro . trace-lambda) (G19799 macro . unsyntax-splicing) (G19798 macro . unsyntax) (G19797 macro . unquote-splicing) (G19796 macro . unquote) (G19795 macro . _) (G19794 macro . else) (G19793 macro . =>) (G19792 macro . ...) (G19791 macro . assert) (G19790 macro . endianness) (G19789 macro . delay) (G19788 macro . time) (G19787 macro . or) (G19786 macro . and) (G19785 macro . do) (G19784 macro . cond) (G19783 macro . let*) (G19782 macro . let) (G19781 macro . let*-values) (G19780 macro . let-values) (G19779 macro . identifier-syntax) (G19778 macro . with-syntax) (G19777 macro . quasisyntax) (G19776 macro . quasiquote) (G19775 macro . syntax-rules) (G19774 macro . include) (G19773 macro . define-struct) (G19772 core-macro . record-constructor-descriptor) (G19771 core-macro . record-type-descriptor) (G19770 core-macro . case) (G19769 core-macro . parameterize) (G19768 core-macro . unless) (G19767 core-macro . when) (G19766 core-macro . if) (G19765 core-macro . letrec*) (G19764 core-macro . letrec) (G19763 core-macro . type-descriptor) (G19762 core-macro . case-lambda) (G19761 core-macro . lambda) (G19760 core-macro . syntax) (G19759 core-macro . syntax-case) (G19758 core-macro . quote) (G19757 core-macro . foreign-call) (G19756 letrec-syntax) (G19755 let-syntax) (G19754 set!) (G19753 import) (G19752 begin) (G19751 module) (G19750 define-syntax) (G19749 define)) values values '#f '#f '#f '#f) (G11125 'G20540 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G20451) (eval-core . G20450) (set-symbol-value! . G20449) (symbol-value . G20448) (gensym . G20447) (void . G20446)) '() values values '#f '#f '#f '#f) (G11125 'G20541 '(mosh) '() '() '() '() '((symbol-value . G20448) (standard-library-path . G20408) (get-command-line . G20391) (sys-display . G20390) (source-info . G20389) (set-source-info! . G20388)) '() values values '#f '#f '#f '#f) (G11125 'G20542 '(mosh backend) '() '() '() '() '((receive . G20387)) '() values values '#f '#f '#f '#f) (G11125 'G20543 '(mosh file) '() '() '() '() '((read-line . G20443) (current-directory . G20407) (write-to-file . G20406) (file->list . G20405) (file->string . G20404)) '() values values '#f '#f '#f '#f) (G11125 'G20544 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G20399)) '() values values '#f '#f '#f '#f) (G11125 'G20545 '(mosh number) '() '() '() '() '((digit->integer . G20403)) '() values values '#f '#f '#f '#f) (G11125 'G20546 '(mosh string) '() '() '() '() '((print . G20410) (format . G20409) (call-with-string-input-port . G20402) (call-with-string-io . G20401) (string-split . G20400) (string->regexp . G20398)) '() values values '#f '#f '#f '#f) (G11125 'G20547 '(mosh list) '() '() '() '() '((assoc-ref . G20412)) '() values values '#f '#f '#f '#f) (G11125 'G20548 '(mosh regexp) '() '() '() '() '((rxmatch . G20397) (regexp-replace-all . G20396)) '() values values '#f '#f '#f '#f) (G11125 'G20549 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G20395)) '() values values '#f '#f '#f '#f) (G11125 'G20550 '(system) '() '() '() '() '((readdir . G20394) (get-environment-variables . G20393) (get-environment-variable . G20392)) '() values values '#f '#f '#f '#f) (G11125 'G20551 '(srfi-1) '() '() '() '() '((dotted-list? . G20442) (circular-list? . G20441) (proper-list? . G20440) (circular-list . G20439) (last . G20438) (last-pair . G20437) (not-pair? . G20436) (split-at! . G20435) (split-at . G20434) (list= . G20433) (list-copy . G20432) (list-tabulate . G20431) (make-list . G20430) (xcons . G20429) (tenth . G20428) (ninth . G20427) (eighth . G20426) (seventh . G20425) (sixth . G20424) (fifth . G20423) (drop-right! . G20422) (drop-right . G20421) (take-right . G20420) (take! . G20419) (drop . G20418) (take . G20417) (car+cdr . G20416) (third . G20415) (second . G20414) (first . G20413) (alist-cons . G20411)) '() values values '#f '#f '#f '#f))
((lambda (G19592 G19594 G19596 G19598 G19600 G19602 G19604 G19606 G19608 G19610 G19612 G19614 G19616 G19618) (begin (set! G19592 (lambda (G19638 G19639) (letrec ((G19642 (lambda (G19644 G19645) (if (null? G19645) (if '#f '#f (void)) (begin (G19638 G19644 (car G19645)) (G19642 (+ G19644 '1) (cdr G19645))))))) (G19642 '1 G19639)))) (set! G19594 (lambda G19648 ((lambda (G19651) (begin (set! G19651 (lambda () (begin (display '"mosh>") (call/cc (lambda (G19653) (with-exception-handler (lambda (G19655) (G19653 (if '#t (G19592 (lambda (G19657 G19658) ((lambda (G19661) (begin (format '#t '"   ~d. ~a" G19657 (record-type-name G19661)) ((lambda (G19663) ((lambda (G19665) (if (eqv? G19665 '0) (newline) (if (eqv? G19665 '1) (begin (display '": ") (write ((record-accessor G19661 '0) G19658)) (newline)) (begin (display '":\n") ((letrec ((G19666 (lambda (G19668) (if (= G19668 (vector-length G19663)) (void) (begin (display '"       ") (display (vector-ref G19663 G19668)) (display '": ") (write ((record-accessor G19661 G19668) G19658)) (newline) (G19666 (+ G19668 '1))))))) G19666) '0))))) (vector-length G19663))) (record-type-field-names G19661)))) (record-rtd G19658))) (simple-conditions G19655)) (raise G19655)))) (lambda () (begin '#f ((lambda (G19670) (if (eof-object? G19670) (exit) (display (G19608 (call-with-port (open-string-input-port G19670) read))))) (get-line (current-input-port)))))))) (newline) (G19651)))) (G19651))) '#f))) (set! G19596 (G10456 write)) (set! G19598 (G10456 (get-command-line))) (set! G19600 (lambda (G19672) (cons '"." (G11109)))) (set! G19602 (lambda (G19674 . G19676) (begin (apply G19616 G19674 'load G19676) (void)))) (set! G19604 (lambda (G19678) (begin (apply G19616 G19678 'load (G19598)) (void)))) (set! G19606 (lambda () (G19604 '"ironscheme-buildscript.ss"))) (set! G19608 (lambda (G19680) (G18822 G19680 (G18842)))) (set! G19610 (lambda () (G19608 '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G19612 (lambda (G19682) (G19616 G19682 'compile))) (set! G19614 (lambda (G19684) (G19616 G19684 'closure))) (set! G19616 (lambda (G19686 G19687 . G19690) ((lambda (G19694 G19695) ((lambda (G19698) (dynamic-wind G19698 (lambda () ((lambda (G19700) ((lambda (G19702) (if (eqv? G19702 'closure) (G18841 G19700) (if (eqv? G19702 'load) ((lambda (G19705 G19706) ((lambda (G19709) (dynamic-wind G19709 (lambda () ((G18840 G19700))) G19709)) (lambda () ((lambda (G19711) (begin (G19705 G19706) (set! G19706 G19711))) (G19705))))) G19598 (cons G19686 (map (lambda (G19713) (format '"~a" G19713)) G19690))) (if (eqv? G19702 'compile) (begin (G18840 G19700) (G11113 G10451 G10556)) (void))))) G19687)) (with-input-from-file G19686 (lambda () ((letrec ((G19715 (lambda () ((lambda (G19717) (if (eof-object? G19717) '() (cons G19717 (G19715)))) (G10446))))) G19715)))))) G19698)) (lambda () ((lambda (G19719) (begin (G19694 G19695) (set! G19695 G19719))) (G19694))))) G11109 (G19600 G19686)))) (set! G19618 (lambda (G19721 G19722) ((lambda (G19725) (begin (format G19722 '"    ~a" (record-type-name G19725)) ((lambda (G19727) ((lambda (G19729) (if (eqv? G19729 '0) (newline) (if (eqv? G19729 '1) (begin (display '": " G19722) (write ((record-accessor G19725 '0) G19721) G19722) (newline G19722)) (begin (display '":\n") ((letrec ((G19730 (lambda (G19732) (if (= G19732 (vector-length G19727)) (void) (begin (display '"       " G19722) (display (vector-ref G19727 G19732) G19722) (display '": " G19722) (write ((record-accessor G19725 G19732) G19721) G19722) (newline G19722) (G19730 (+ G19732 '1))))))) G19730) '0))))) (vector-length G19727))) (record-type-field-names G19725)))) (record-rtd G19721)))) (begin (set! G19747 G19618) (set! G19746 G19616) (set! G19745 G19614) (set! G19744 G19612) (set! G19743 G19610) (set! G19742 G19608) (set! G19741 G19606) (set! G19740 G19604) (set! G19739 G19602) (set! G19738 G19600) (set! G19737 G19598) (set! G19736 G19596) (set! G19735 G19594) (set! G19734 G19592) (G11114 G10452) (set-symbol-value! 'load G19604) (set-symbol-value! 'eval-r6rs G19608) (set-symbol-value! 'int-env-syms G18815) (set-symbol-value! 'expanded2core G10555) (set-symbol-value! 'trace-printer G19596) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G11109 (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G19619 G19620) (with-exception-handler (lambda (G19623) (begin (display '" Condition components:\n" G19620) (G19592 (lambda (G19625 G19626) ((lambda (G19629) (begin (format G19620 '"   ~d. ~a" G19625 (record-type-name G19629)) ((lambda (G19631) ((lambda (G19633) (if (eqv? G19633 '0) (newline) (if (eqv? G19633 '1) (begin (display '": ") (write ((record-accessor G19629 '0) G19626)) (newline)) (begin (display '":\n") ((letrec ((G19634 (lambda (G19636) (if (= G19636 (vector-length G19631)) (void) (begin (display '"       ") (display (vector-ref G19631 G19636)) (display '": ") (write ((record-accessor G19629 G19636) G19626)) (newline) (G19634 (+ G19636 '1))))))) G19634) '0))))) (vector-length G19631))) (record-type-field-names G19629)))) (record-rtd G19626))) (simple-conditions G19623)))) (lambda () (if (null? G19619) (G19594) (G19616 (car G19619) 'load))))) (G19598) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
