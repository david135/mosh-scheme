;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G10235@read-annotated G10237@annotation-stripped G10239@annotation? G10241@annotation-source G10243@annotation-expression G10245@serialize-library G10247@load-serialized-library G10249@make-record-printer G10251@compile-core G10253@read-library-source-file G10255@make-parameter G10409@file-options-spec) (begin (set! G10235@read-annotated read) (set! G10237@annotation-stripped (lambda (G10410@x) (G10243@annotation-expression G10410@x))) (set! G10239@annotation? (lambda (G10412@x) (source-info G10412@x))) (set! G10241@annotation-source (lambda (G10414@x) (source-info G10414@x))) (set! G10243@annotation-expression (lambda (G10416@x) (if (pair? G10416@x) (cons (car G10416@x) (cdr G10416@x)) (display '"line:46\n")))) (set! G10245@serialize-library (lambda G10418@x (begin (display G10418@x) '#f))) (set! G10247@load-serialized-library (lambda G10420@x '#f)) (set! G10249@make-record-printer (lambda (G10422@name G10423@printer) (lambda G10426@x (begin (display '"record printer") (for-each display G10426@x))))) (set! G10251@compile-core (lambda G10428@x (apply error 'comile-core '"not implementated" G10428@x))) (set! G10253@read-library-source-file (lambda (G10430@file-name) (with-input-from-file G10430@file-name G10235@read-annotated))) (set! G10255@make-parameter (lambda G10446 ((lambda (G10447) (if (= G10447 '1) (apply (lambda (G10432@x) (G10255@make-parameter G10432@x (lambda (G10434@x) G10434@x))) G10446) (if (= G10447 '2) (apply (lambda (G10436@x G10437@fender) (begin (if (procedure? G10437@fender) (void) (assertion-violation 'assert '"assertion failed" '(procedure? fender))) ((lambda (G10440@x) (lambda G10444 ((lambda (G10445) (if (= G10445 '0) (apply (lambda () G10440@x) G10444) (if (= G10445 '1) (apply (lambda (G10442@v) (set! G10440@x (G10437@fender G10442@v))) G10444) (error 'apply '"invalid arg count")))) (length G10444)))) (G10437@fender G10436@x)))) G10446) (error 'apply '"invalid arg count")))) (length G10446)))) (set! G10409@file-options-spec (lambda (G10448@x) G10448@x)) (begin (set! G10461@G10409@file-options-spec G10409@file-options-spec) (set! G10460@G10255@make-parameter G10255@make-parameter) (set! G10459@G10253@read-library-source-file G10253@read-library-source-file) (set! G10458@G10251@compile-core G10251@compile-core) (set! G10457@G10249@make-record-printer G10249@make-record-printer) (set! G10456@G10247@load-serialized-library G10247@load-serialized-library) (set! G10455@G10245@serialize-library G10245@serialize-library) (set! G10454@G10243@annotation-expression G10243@annotation-expression) (set! G10453@G10241@annotation-source G10241@annotation-source) (set! G10452@G10239@annotation? G10239@annotation?) (set! G10451@G10237@annotation-stripped G10237@annotation-stripped) (set! G10450@G10235@read-annotated G10235@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G10466@current-primitive-locations G10468@mutable? G10470@rewriter G10472@expanded->core G10474@compile-core-expr G10476@pretty-print G10478@compile-core-expr-to-port) (begin (set! G10466@current-primitive-locations (G10460@G10255@make-parameter (lambda (G10479@x) '#f) (lambda (G10481@p) (begin (if (procedure? G10481@p) (void) (assertion-violation 'assert '"assertion failed" '(procedure? p))) G10481@p)))) (set! G10468@mutable? (lambda (G10483@x) ((lambda (G10486@simple?) (begin (set! G10486@simple? (lambda (G10487@x) ((lambda (G10489@t) (if G10489@t G10489@t ((lambda (G10491@t) (if G10491@t G10491@t ((lambda (G10493@t) (if G10493@t G10493@t ((lambda (G10495@t) (if G10495@t G10495@t ((lambda (G10497@t) (if G10497@t G10497@t ((lambda (G10499@t) (if G10499@t G10499@t (begin '#f (number? G10487@x)))) (bytevector? G10487@x)))) (string? G10487@x)))) (boolean? G10487@x)))) (symbol? G10487@x)))) (char? G10487@x)))) (null? G10487@x)))) (not (G10486@simple? G10483@x)))) '#f))) (set! G10470@rewriter (lambda (G10501@quote-hack?) ((lambda (G10504@f) (begin (set! G10504@f (lambda (G10505@x) (if (pair? G10505@x) ((lambda (G10507@t) (if (eqv? G10507@t 'quote) (if (if G10501@quote-hack? (begin '#f (G10468@mutable? (cadr G10505@x))) '#f) ((lambda (G10546@g) (begin (set-symbol-value! G10546@g (cadr G10505@x)) G10546@g)) (gensym)) G10505@x) (if (eqv? G10507@t 'case-lambda) (cons 'case-lambda (map (lambda (G10544@x) (cons (car G10544@x) (map G10504@f (cdr G10544@x)))) (cdr G10505@x))) (if (eqv? G10507@t 'lambda) (cons* 'lambda (cadr G10505@x) (map G10504@f (cddr G10505@x))) (if (eqv? G10507@t 'letrec) ((lambda (G10536@bindings G10537@body*) ((lambda (G10540@lhs* G10541@rhs*) (cons* 'letrec (map list G10540@lhs* (map G10504@f G10541@rhs*)) (map G10504@f G10537@body*))) (map car G10536@bindings) (map cadr G10536@bindings))) (cadr G10505@x) (cddr G10505@x)) (if (eqv? G10507@t 'letrec*) ((lambda (G10528@bindings G10529@body*) ((lambda (G10532@lhs* G10533@rhs*) (cons* 'letrec* (map list G10532@lhs* (map G10504@f G10533@rhs*)) (map G10504@f G10529@body*))) (map car G10528@bindings) (map cadr G10528@bindings))) (cadr G10505@x) (cddr G10505@x)) (if (eqv? G10507@t 'library-letrec*) ((lambda (G10514@name G10515@x) ((lambda (G10518@bindings G10519@body*) ((lambda (G10522@lhs* G10523@lhs** G10524@rhs*) (cons* 'library-letrec* G10514@name (map list G10522@lhs* G10523@lhs** (map G10504@f G10524@rhs*)) (map G10504@f G10519@body*))) (map car G10518@bindings) (map cadr G10518@bindings) (map caddr G10518@bindings))) (cadr G10515@x) (cddr G10515@x))) (cadr G10505@x) (cdr G10505@x)) (if (eqv? G10507@t 'begin) (cons 'begin (map G10504@f (cdr G10505@x))) (if (eqv? G10507@t 'set!) (list 'set! (cadr G10505@x) (G10504@f (caddr G10505@x))) (if (eqv? G10507@t 'primitive) ((lambda (G10508@op) ((lambda (G10510@t) (if G10510@t ((lambda (G10512@loc) G10512@loc) G10510@t) G10508@op)) ((G10466@current-primitive-locations) G10508@op))) (cadr G10505@x)) (if (eqv? G10507@t 'define) G10505@x (if (list? G10505@x) (map G10504@f G10505@x) (error 'rewrite '"invalid form ~s ~s" G10505@x (list? G10505@x)))))))))))))) (car G10505@x)) G10505@x))) G10504@f)) '#f))) (set! G10472@expanded->core (lambda (G10548@x) ((G10470@rewriter '#t) G10548@x))) (set! G10474@compile-core-expr (lambda (G10550@x) ((G10470@rewriter '#f) G10550@x))) (set! G10476@pretty-print write) (set! G10478@compile-core-expr-to-port (lambda (G10552@x G10553@p) (G10476@pretty-print ((G10470@rewriter '#f) G10552@x) G10553@p))) (begin (set! G10562@G10478@compile-core-expr-to-port G10478@compile-core-expr-to-port) (set! G10561@G10476@pretty-print G10476@pretty-print) (set! G10560@G10474@compile-core-expr G10474@compile-core-expr) (set! G10559@G10472@expanded->core G10472@expanded->core) (set! G10558@G10470@rewriter G10470@rewriter) (set! G10557@G10468@mutable? G10468@mutable?) (set! G10556@G10466@current-primitive-locations G10466@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G10652@make-collection G10654@current-library-collection G10660@G10655 G10662@G10657 G10664@G10656 G10669@library? G10671@make-library G10673@library-id G10675@library-name G10677@library-version G10679@library-imp* G10681@library-vis* G10683@library-inv* G10685@library-subst G10687@library-env G10689@library-visit-state G10691@library-invoke-state G10693@library-visit-code G10695@library-invoke-code G10697@library-visible? G10699@library-source-file-name G10701@set-library-id! G10703@set-library-name! G10705@set-library-version! G10707@set-library-imp*! G10709@set-library-vis*! G10711@set-library-inv*! G10713@set-library-subst! G10715@set-library-env! G10717@set-library-visit-state! G10719@set-library-invoke-state! G10721@set-library-visit-code! G10723@set-library-invoke-code! G10725@set-library-visible?! G10727@set-library-source-file-name! G10729@rp G10731@find-dependencies G10733@find-library-by G10735@library-path G10737@library-extensions G10739@library-name->file-name G10741@file-locator G10743@serialize-all G10745@current-precompiled-library-loader G10747@try-load-from-file G10749@library-loader G10751@current-library-expander G10753@external-pending-libraries G10755@find-external-library G10757@find-library-by-name G10759@library-exists? G10761@find-library-by-spec/die G10763@label->binding-table G10765@install-library-record G10767@install-library G10769@imported-label->binding G10771@invoke-library G10773@visit-library G10775@invoke-library-by-spec G10777@installed-libraries G10779@library-spec) (begin (set! G10652@make-collection (lambda () ((lambda (G10780@set) ((lambda (G10783@set-cons) (begin (set! G10783@set-cons (lambda (G10788@x G10789@ls) (if (memq G10788@x G10789@ls) G10789@ls (cons G10788@x G10789@ls)))) (lambda G10786 ((lambda (G10787) (if (= G10787 '0) (apply (lambda () G10780@set) G10786) (if (= G10787 '1) (apply (lambda (G10784@x) (set! G10780@set (G10783@set-cons G10784@x G10780@set))) G10786) (error 'apply '"invalid arg count")))) (length G10786))))) '#f)) '()))) (set! G10654@current-library-collection (G10460@G10255@make-parameter (G10652@make-collection) (lambda (G10792@x) (begin (if (procedure? G10792@x) (void) (assertion-violation 'current-library-collection '"not a procedure" G10792@x)) G10792@x)))) (set! G10660@G10655 (make-record-type-descriptor 'library '#f 'G10658 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G10662@G10657 '#f) (set! G10664@G10656 (make-record-constructor-descriptor G10660@G10655 '#f G10662@G10657)) (set! G10669@library? (record-predicate G10660@G10655)) (set! G10671@make-library (record-constructor G10664@G10656)) (set! G10673@library-id (record-accessor G10660@G10655 '0)) (set! G10675@library-name (record-accessor G10660@G10655 '1)) (set! G10677@library-version (record-accessor G10660@G10655 '2)) (set! G10679@library-imp* (record-accessor G10660@G10655 '3)) (set! G10681@library-vis* (record-accessor G10660@G10655 '4)) (set! G10683@library-inv* (record-accessor G10660@G10655 '5)) (set! G10685@library-subst (record-accessor G10660@G10655 '6)) (set! G10687@library-env (record-accessor G10660@G10655 '7)) (set! G10689@library-visit-state (record-accessor G10660@G10655 '8)) (set! G10691@library-invoke-state (record-accessor G10660@G10655 '9)) (set! G10693@library-visit-code (record-accessor G10660@G10655 '10)) (set! G10695@library-invoke-code (record-accessor G10660@G10655 '11)) (set! G10697@library-visible? (record-accessor G10660@G10655 '12)) (set! G10699@library-source-file-name (record-accessor G10660@G10655 '13)) (set! G10701@set-library-id! (record-mutator G10660@G10655 '0)) (set! G10703@set-library-name! (record-mutator G10660@G10655 '1)) (set! G10705@set-library-version! (record-mutator G10660@G10655 '2)) (set! G10707@set-library-imp*! (record-mutator G10660@G10655 '3)) (set! G10709@set-library-vis*! (record-mutator G10660@G10655 '4)) (set! G10711@set-library-inv*! (record-mutator G10660@G10655 '5)) (set! G10713@set-library-subst! (record-mutator G10660@G10655 '6)) (set! G10715@set-library-env! (record-mutator G10660@G10655 '7)) (set! G10717@set-library-visit-state! (record-mutator G10660@G10655 '8)) (set! G10719@set-library-invoke-state! (record-mutator G10660@G10655 '9)) (set! G10721@set-library-visit-code! (record-mutator G10660@G10655 '10)) (set! G10723@set-library-invoke-code! (record-mutator G10660@G10655 '11)) (set! G10725@set-library-visible?! (record-mutator G10660@G10655 '12)) (set! G10727@set-library-source-file-name! (record-mutator G10660@G10655 '13)) (set! G10729@rp (G10457@G10249@make-record-printer 'library (lambda (G10794@x G10795@p) (begin (if (G10669@library? G10794@x) (void) (assertion-violation 'record-type-printer '"not a library")) (display (format '"#<library ~s>" (if (null? (G10677@library-version G10794@x)) (G10675@library-name G10794@x) (append (G10675@library-name G10794@x) (list (G10677@library-version G10794@x))))) G10795@p))))) (set! G10731@find-dependencies (lambda (G10798@ls) (if (null? G10798@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G10733@find-library-by (lambda (G10800@pred) ((letrec ((G10802@f (lambda (G10804@ls) (if (null? G10804@ls) '#f (if (G10800@pred (car G10804@ls)) (car G10804@ls) (G10802@f (cdr G10804@ls))))))) G10802@f) ((G10654@current-library-collection))))) (set! G10735@library-path (G10460@G10255@make-parameter '(".") (lambda (G10806@x) (if (if (list? G10806@x) (begin '#f (for-all string? G10806@x)) '#f) (map (lambda (G10808@x) G10808@x) G10806@x) (assertion-violation 'library-path '"not a list of strings" G10806@x))))) (set! G10737@library-extensions (G10460@G10255@make-parameter '(".sls" ".ss" ".scm") (lambda (G10810@x) (if (if (list? G10810@x) (begin '#f (for-all string? G10810@x)) '#f) (map (lambda (G10812@x) G10812@x) G10810@x) (assertion-violation 'library-extensions '"not a list of strings" G10810@x))))) (set! G10739@library-name->file-name (lambda (G10814@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G10818@G10816 G10819@G10817) ((lambda (G10822@extract G10823@p) ((lambda (G10827@display-hex) (begin (set! G10827@display-hex (lambda (G10842@n) (if (<= '0 G10842@n '9) (display G10842@n G10823@p) (display (integer->char (+ (char->integer '#\A) (- G10842@n '10))) G10823@p)))) (begin ((letrec ((G10828@f (lambda (G10830@ls) (if (null? G10830@ls) (void) (begin (display '"/" G10823@p) (for-each (lambda (G10832@c) (if ((lambda (G10834@t) (if G10834@t G10834@t ((lambda (G10836@t) (if G10836@t G10836@t ((lambda (G10838@t) (if G10838@t G10838@t (begin '#f (memv G10832@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G10832@c '#\9)))) (char<=? '#\A G10832@c '#\Z)))) (char<=? '#\a G10832@c '#\z)) (display G10832@c G10823@p) (begin (display '"%" G10823@p) ((lambda (G10840@n) (begin (G10827@display-hex (quotient G10840@n '16)) (G10827@display-hex (remainder G10840@n '16)))) (char->integer G10832@c))))) (string->list (symbol->string (car G10830@ls)))) (G10828@f (cdr G10830@ls))))))) G10828@f) G10814@x) (G10822@extract)))) '#f)) G10819@G10817 G10818@G10816))))) (set! G10741@file-locator (G10460@G10255@make-parameter (lambda (G10844@x) ((lambda (G10846@str) ((letrec ((G10848@f (lambda (G10850@ls G10851@exts G10852@failed-list) (if (null? G10850@ls) ((lambda () ((lambda (G10864@G10859 G10866@G10861 G10868@G10860 G10873@G10858 G10875@make-library-resolution-condition G10877@G10856 G10879@G10857 G10881@library-resolution-condition? G10883@condition-library G10885@condition-files) (begin (set! G10864@G10859 (make-record-type-descriptor '&library-resolution &condition-rtd 'G10862 '#f '#f '#((immutable library) (immutable files)))) (set! G10866@G10861 '#f) (set! G10868@G10860 (make-record-constructor-descriptor G10864@G10859 &condition-rcd G10866@G10861)) (set! G10873@G10858 (record-predicate G10864@G10859)) (set! G10875@make-library-resolution-condition (record-constructor G10868@G10860)) (set! G10877@G10856 (record-accessor G10864@G10859 '0)) (set! G10879@G10857 (record-accessor G10864@G10859 '1)) (set! G10881@library-resolution-condition? (condition-predicate G10864@G10859)) (set! G10883@condition-library (condition-accessor G10864@G10859 G10877@G10856)) (set! G10885@condition-files (condition-accessor G10864@G10859 G10879@G10857)) (raise (condition (G19189@G18955@make-error) (G19215@G19041@make-who-condition 'expander) (G19169@G18891@make-message-condition '"cannot locate library in library-path") (G10875@make-library-resolution-condition G10844@x (reverse G10852@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G10851@exts) (G10848@f (cdr G10850@ls) (G10737@library-extensions) G10852@failed-list) ((lambda (G10886@name) (if (file-exists? G10886@name) G10886@name (G10848@f G10850@ls (cdr G10851@exts) (cons G10886@name G10852@failed-list)))) (string-append (car G10850@ls) G10846@str (car G10851@exts)))))))) G10848@f) (G10735@library-path) (G10737@library-extensions) '())) (G10739@library-name->file-name G10844@x))) (lambda (G10888@f) (if (procedure? G10888@f) G10888@f (assertion-violation 'file-locator '"not a procedure" G10888@f))))) (set! G10743@serialize-all (lambda (G10890@serialize G10891@compile) ((lambda (G10895@library-desc) (begin (set! G10895@library-desc (lambda (G10898@x) (list (G10673@library-id G10898@x) (G10675@library-name G10898@x)))) (for-each (lambda (G10896@x) (if (G10699@library-source-file-name G10896@x) (G10890@serialize (G10699@library-source-file-name G10896@x) (list (G10673@library-id G10896@x) (G10675@library-name G10896@x) (G10677@library-version G10896@x) (map G10895@library-desc (G10679@library-imp* G10896@x)) (map G10895@library-desc (G10681@library-vis* G10896@x)) (map G10895@library-desc (G10683@library-inv* G10896@x)) (G10685@library-subst G10896@x) (G10687@library-env G10896@x) (G10891@compile (G10693@library-visit-code G10896@x)) (G10891@compile (G10695@library-invoke-code G10896@x)) (G10697@library-visible? G10896@x))) (void))) ((G10654@current-library-collection))))) '#f))) (set! G10745@current-precompiled-library-loader (G10460@G10255@make-parameter (lambda (G10900@filename G10901@sk) '#f))) (set! G10747@try-load-from-file (lambda (G10904@filename) ((G10745@current-precompiled-library-loader) G10904@filename (lambda G10942 ((lambda (G10943) (if (= G10943 '11) (apply (lambda (G10906@id G10907@name G10908@ver G10909@imp* G10910@vis* G10911@inv* G10912@exp-subst G10913@exp-env G10914@visit-proc G10915@invoke-proc G10916@visible?) ((letrec ((G10928@f (lambda (G10930@deps) (if (null? G10930@deps) (begin (G10767@install-library G10906@id G10907@name G10908@ver G10909@imp* G10910@vis* G10911@inv* G10912@exp-subst G10913@exp-env G10914@visit-proc G10915@invoke-proc '#f '#f G10916@visible? '#f) '#t) ((lambda (G10932@d) ((lambda (G10934@label G10935@dname) ((lambda (G10938@l) (if (if (G10669@library? G10938@l) (begin '#f (eq? G10934@label (G10673@library-id G10938@l))) '#f) (G10928@f (cdr G10930@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source.\n" G10907@name G10935@dname G10904@filename) '#f))) (G10757@find-library-by-name G10935@dname))) (car G10932@d) (cadr G10932@d))) (car G10930@deps)))))) G10928@f) (append G10909@imp* G10910@vis* G10911@inv*))) G10942) (if (>= G10943 '0) (apply (lambda G10940@others '#f) G10942) (error 'apply '"invalid arg count")))) (length G10942)))))) (set! G10749@library-loader (G10460@G10255@make-parameter (lambda (G10944@x) ((lambda (G10946@file-name) (if (not G10946@file-name) (assertion-violation '#f '"cannot file library" G10944@x) ((lambda (G10948@t) (if G10948@t G10948@t (begin '#f ((G10751@current-library-expander) (G10459@G10253@read-library-source-file G10946@file-name) G10946@file-name (lambda (G10950@name) (if (equal? G10950@name G10944@x) (void) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G10954@G10952 G10955@G10953) ((lambda (G10958@e G10959@p) (begin (display '"expected to find library " G10959@p) (write G10944@x G10959@p) (display '" in file " G10959@p) (display G10946@file-name G10959@p) (display '", found " G10959@p) (write G10950@name G10959@p) (display '" instead" G10959@p) (G10958@e))) G10955@G10953 G10954@G10952)))))))))) (G10747@try-load-from-file G10946@file-name)))) ((G10741@file-locator) G10944@x))) (lambda (G10962@f) (if (procedure? G10962@f) G10962@f (assertion-violation 'library-locator '"not a procedure" G10962@f))))) (set! G10751@current-library-expander (G10460@G10255@make-parameter (lambda (G10964@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G10966@f) (if (procedure? G10966@f) G10966@f (assertion-violation 'library-expander '"not a procedure" G10966@f))))) (set! G10753@external-pending-libraries (G10460@G10255@make-parameter '())) (set! G10755@find-external-library (lambda (G10968@name) (begin (if (member G10968@name (G10753@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G10968@name) (void)) ((lambda (G10972@G10970@external-pending-libraries G10973@G10971@external-pending-libraries) ((lambda (G10976@swap) (dynamic-wind G10976@swap (lambda () (begin ((G10749@library-loader) G10968@name) ((lambda (G10978@t) (if G10978@t G10978@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G10968@name)))) (G10733@find-library-by (lambda (G10980@x) (equal? (G10675@library-name G10980@x) G10968@name)))))) G10976@swap)) (lambda () ((lambda (G10982@t) (begin (G10972@G10970@external-pending-libraries G10973@G10971@external-pending-libraries) (set! G10973@G10971@external-pending-libraries G10982@t))) (G10972@G10970@external-pending-libraries))))) G10753@external-pending-libraries (cons G10968@name (G10753@external-pending-libraries)))))) (set! G10757@find-library-by-name (lambda (G10984@name) ((lambda (G10986@t) (if G10986@t G10986@t (begin '#f (G10755@find-external-library G10984@name)))) (G10733@find-library-by (lambda (G10988@x) (equal? (G10675@library-name G10988@x) G10984@name)))))) (set! G10759@library-exists? (lambda (G10990@name) (if (G10733@find-library-by (lambda (G10992@x) (equal? (G10675@library-name G10992@x) G10990@name))) (begin '#f '#t) '#f))) (set! G10761@find-library-by-spec/die (lambda (G10994@spec) ((lambda (G10996@id) ((lambda (G10998@t) (if G10998@t G10998@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G10994@spec)))) (G10733@find-library-by (lambda (G11000@x) (eq? G10996@id (G10673@library-id G11000@x)))))) (car G10994@spec)))) (set! G10763@label->binding-table (make-eq-hashtable)) (set! G10765@install-library-record (lambda (G11002@lib) (begin ((lambda (G11004@exp-env) (for-each (lambda (G11006@x) ((lambda (G11008@label G11009@binding) ((lambda (G11012@binding) (hashtable-set! G10763@label->binding-table G11008@label G11012@binding)) ((lambda (G11014@t) (if (eqv? G11014@t 'global) (cons 'global (cons G11002@lib (cdr G11009@binding))) (if (eqv? G11014@t 'global-macro) (cons 'global-macro (cons G11002@lib (cdr G11009@binding))) (if (eqv? G11014@t 'global-macro!) (cons 'global-macro! (cons G11002@lib (cdr G11009@binding))) G11009@binding)))) (car G11009@binding)))) (car G11006@x) (cdr G11006@x))) G11004@exp-env)) (G10687@library-env G11002@lib)) ((G10654@current-library-collection) G11002@lib)))) (set! G10767@install-library (lambda (G11015@id G11016@name G11017@ver G11018@imp* G11019@vis* G11020@inv* G11021@exp-subst G11022@exp-env G11023@visit-proc G11024@invoke-proc G11025@visit-code G11026@invoke-code G11027@visible? G11028@source-file-name) ((lambda (G11043@imp-lib* G11044@vis-lib* G11045@inv-lib*) (begin (if (if (symbol? G11015@id) (if (list? G11016@name) (begin '#f (list? G11017@ver)) '#f) '#f) (void) (assertion-violation 'install-library '"invalid spec with id/name/ver" G11015@id G11016@name G11017@ver)) (if (G10759@library-exists? G11016@name) (assertion-violation 'install-library '"library is already installed" G11016@name) (void)) ((lambda (G11049@lib) (G10765@install-library-record G11049@lib)) (G10671@make-library G11015@id G11016@name G11017@ver G11043@imp-lib* G11044@vis-lib* G11045@inv-lib* G11021@exp-subst G11022@exp-env G11023@visit-proc G11024@invoke-proc G11025@visit-code G11026@invoke-code G11027@visible? G11028@source-file-name)))) (map G10761@find-library-by-spec/die G11018@imp*) (map G10761@find-library-by-spec/die G11019@vis*) (map G10761@find-library-by-spec/die G11020@inv*)))) (set! G10769@imported-label->binding (lambda (G11051@lab) (hashtable-ref G10763@label->binding-table G11051@lab '#f))) (set! G10771@invoke-library (lambda (G11053@lib) ((lambda (G11055@invoke) (if (procedure? G11055@invoke) (begin (G10719@set-library-invoke-state! G11053@lib (lambda () (assertion-violation 'invoke '"circularity detected" G11053@lib))) (for-each G10771@invoke-library (G10683@library-inv* G11053@lib)) (G10719@set-library-invoke-state! G11053@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G11053@lib))) (G11055@invoke) (G10719@set-library-invoke-state! G11053@lib '#t)) (void))) (G10691@library-invoke-state G11053@lib)))) (set! G10773@visit-library (lambda (G11057@lib) ((lambda (G11059@visit) (if (procedure? G11059@visit) (begin (G10717@set-library-visit-state! G11057@lib (lambda () (assertion-violation 'visit '"circularity detected" G11057@lib))) (for-each G10771@invoke-library (G10681@library-vis* G11057@lib)) (G10717@set-library-visit-state! G11057@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G11057@lib))) (G11059@visit) (G10717@set-library-visit-state! G11057@lib '#t)) (void))) (G10689@library-visit-state G11057@lib)))) (set! G10775@invoke-library-by-spec (lambda (G11061@spec) (G10771@invoke-library (G10761@find-library-by-spec/die G11061@spec)))) (set! G10777@installed-libraries (lambda G11071 ((lambda (G11072) (if (= G11072 '1) (apply (lambda (G11063@all?) ((letrec ((G11065@f (lambda (G11067@ls) (if (null? G11067@ls) '() (if ((lambda (G11069@t) (if G11069@t G11069@t (begin '#f (G10697@library-visible? (car G11067@ls))))) G11063@all?) (cons (car G11067@ls) (G11065@f (cdr G11067@ls))) (G11065@f (cdr G11067@ls))))))) G11065@f) ((G10654@current-library-collection)))) G11071) (if (= G11072 '0) (apply (lambda () (G10777@installed-libraries '#f)) G11071) (error 'apply '"invalid arg count")))) (length G11071)))) (set! G10779@library-spec (lambda (G11073@x) (begin (if (G10669@library? G11073@x) (void) (assertion-violation 'library-spec '"not a library" G11073@x)) (list (G10673@library-id G11073@x) (G10675@library-name G11073@x) (G10677@library-version G11073@x))))) (begin (set! G11135@G10779@library-spec G10779@library-spec) (set! G11134@G10777@installed-libraries G10777@installed-libraries) (set! G11133@G10775@invoke-library-by-spec G10775@invoke-library-by-spec) (set! G11132@G10773@visit-library G10773@visit-library) (set! G11131@G10771@invoke-library G10771@invoke-library) (set! G11130@G10769@imported-label->binding G10769@imported-label->binding) (set! G11129@G10767@install-library G10767@install-library) (set! G11128@G10765@install-library-record G10765@install-library-record) (set! G11127@G10763@label->binding-table G10763@label->binding-table) (set! G11126@G10761@find-library-by-spec/die G10761@find-library-by-spec/die) (set! G11125@G10759@library-exists? G10759@library-exists?) (set! G11124@G10757@find-library-by-name G10757@find-library-by-name) (set! G11123@G10755@find-external-library G10755@find-external-library) (set! G11122@G10753@external-pending-libraries G10753@external-pending-libraries) (set! G11121@G10751@current-library-expander G10751@current-library-expander) (set! G11120@G10749@library-loader G10749@library-loader) (set! G11119@G10747@try-load-from-file G10747@try-load-from-file) (set! G11118@G10745@current-precompiled-library-loader G10745@current-precompiled-library-loader) (set! G11117@G10743@serialize-all G10743@serialize-all) (set! G11116@G10741@file-locator G10741@file-locator) (set! G11115@G10739@library-name->file-name G10739@library-name->file-name) (set! G11114@G10737@library-extensions G10737@library-extensions) (set! G11113@G10735@library-path G10735@library-path) (set! G11112@G10733@find-library-by G10733@find-library-by) (set! G11111@G10731@find-dependencies G10731@find-dependencies) (set! G11110@G10729@rp G10729@rp) (set! G11109@G10727@set-library-source-file-name! G10727@set-library-source-file-name!) (set! G11108@G10725@set-library-visible?! G10725@set-library-visible?!) (set! G11107@G10723@set-library-invoke-code! G10723@set-library-invoke-code!) (set! G11106@G10721@set-library-visit-code! G10721@set-library-visit-code!) (set! G11105@G10719@set-library-invoke-state! G10719@set-library-invoke-state!) (set! G11104@G10717@set-library-visit-state! G10717@set-library-visit-state!) (set! G11103@G10715@set-library-env! G10715@set-library-env!) (set! G11102@G10713@set-library-subst! G10713@set-library-subst!) (set! G11101@G10711@set-library-inv*! G10711@set-library-inv*!) (set! G11100@G10709@set-library-vis*! G10709@set-library-vis*!) (set! G11099@G10707@set-library-imp*! G10707@set-library-imp*!) (set! G11098@G10705@set-library-version! G10705@set-library-version!) (set! G11097@G10703@set-library-name! G10703@set-library-name!) (set! G11096@G10701@set-library-id! G10701@set-library-id!) (set! G11095@G10699@library-source-file-name G10699@library-source-file-name) (set! G11094@G10697@library-visible? G10697@library-visible?) (set! G11093@G10695@library-invoke-code G10695@library-invoke-code) (set! G11092@G10693@library-visit-code G10693@library-visit-code) (set! G11091@G10691@library-invoke-state G10691@library-invoke-state) (set! G11090@G10689@library-visit-state G10689@library-visit-state) (set! G11089@G10687@library-env G10687@library-env) (set! G11088@G10685@library-subst G10685@library-subst) (set! G11087@G10683@library-inv* G10683@library-inv*) (set! G11086@G10681@library-vis* G10681@library-vis*) (set! G11085@G10679@library-imp* G10679@library-imp*) (set! G11084@G10677@library-version G10677@library-version) (set! G11083@G10675@library-name G10675@library-name) (set! G11082@G10673@library-id G10673@library-id) (set! G11081@G10671@make-library G10671@make-library) (set! G11080@G10669@library? G10669@library?) (set! G11079@G10664@G10656 G10664@G10656) (set! G11078@G10662@G10657 G10662@G10657) (set! G11077@G10660@G10655 G10660@G10655) (set! G11076@G10654@current-library-collection G10654@current-library-collection) (set! G11075@G10652@make-collection G10652@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G11138@build-global-define G11270@build-lambda G11272@build-case-lambda G11274@build-let G11346@build-sequence G11348@build-void G11350@build-letrec G11352@build-letrec* G11354@build-library-letrec* G11356@build-receive) (begin (set! G11138@build-global-define (lambda (G11357@x) (G11348@build-void))) (set! G11270@build-lambda (lambda (G11359@ae G11360@vars G11361@exp) (list 'lambda G11360@vars G11361@exp))) (set! G11272@build-case-lambda (lambda (G11365@ae G11366@vars* G11367@exp*) ((lambda (G11372@build-error G11374@build-pred G11376@build-apply G11378@expand-case-lambda) (begin (set! G11372@build-error (lambda (G11425@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G11374@build-pred (lambda (G11403@ae G11404@n G11405@vars) (call-with-values (lambda () ((letrec ((G11411@f (lambda (G11413@vars G11414@count) (if (pair? G11413@vars) (G11411@f (cdr G11413@vars) (+ G11414@count '1)) (if (null? G11413@vars) (values G11414@count '=) (values G11414@count '>=)))))) G11411@f) G11405@vars '0)) (lambda (G11417@G11409 G11418@G11410) ((lambda (G11421@pred G11422@count) (list (list 'primitive G11421@pred) G11404@n (list 'quote G11422@count))) G11418@G11410 G11417@G11409))))) (set! G11376@build-apply (lambda (G11395@ae G11396@g G11397@vars G11398@exp) (list '(primitive apply) (G11270@build-lambda G11395@ae G11397@vars G11398@exp) G11396@g))) (set! G11378@expand-case-lambda (lambda (G11379@ae G11380@vars G11381@exp*) ((lambda (G11385@g G11386@n) (list 'lambda G11385@g (G11274@build-let G11379@ae (list G11386@n) (list (list '(primitive length) G11385@g)) ((letrec ((G11389@f (lambda (G11391@vars* G11392@exp*) (if (null? G11391@vars*) (G11372@build-error G11379@ae) (list 'if (G11374@build-pred G11379@ae G11386@n (car G11391@vars*)) (G11376@build-apply G11379@ae G11385@g (car G11391@vars*) (car G11392@exp*)) (G11389@f (cdr G11391@vars*) (cdr G11392@exp*))))))) G11389@f) G11366@vars* G11381@exp*)))) (gensym) (gensym)))) (if (= (length G11367@exp*) '1) (G11270@build-lambda G11365@ae (car G11366@vars*) (car G11367@exp*)) (G11378@expand-case-lambda G11365@ae G11366@vars* G11367@exp*)))) '#f '#f '#f '#f))) (set! G11274@build-let (lambda (G11427@ae G11428@lhs* G11429@rhs* G11430@body) (cons (G11270@build-lambda G11427@ae G11428@lhs* G11430@body) G11429@rhs*))) (set! G11346@build-sequence (lambda (G11435@ae G11436@exps) ((letrec ((G11439@loop (lambda (G11441@exps) (if (null? (cdr G11441@exps)) (car G11441@exps) (if (equal? (car G11441@exps) (G11348@build-void)) (G11439@loop (cdr G11441@exps)) (cons 'begin G11441@exps)))))) G11439@loop) G11436@exps))) (set! G11348@build-void (lambda () '((primitive void)))) (set! G11350@build-letrec (lambda (G11443@ae G11444@vars G11445@val-exps G11446@body-exp) (if (null? G11444@vars) G11446@body-exp (list 'letrec (map list G11444@vars G11445@val-exps) G11446@body-exp)))) (set! G11352@build-letrec* (lambda (G11451@ae G11452@vars G11453@val-exps G11454@body-exp) (if (null? G11452@vars) G11454@body-exp (G11274@build-let G11451@ae G11452@vars (map (lambda (G11459@x) (list 'quote '#f)) G11452@vars) (G11346@build-sequence G11451@ae (append (map (lambda (G11461@lhs G11462@rhs) (list 'set! G11461@lhs G11462@rhs)) G11452@vars G11453@val-exps) (list G11454@body-exp))))))) (set! G11354@build-library-letrec* (lambda (G11465@ae G11466@name G11467@vars G11468@locs G11469@val-exps G11470@body-exp) (list 'library-letrec* G11466@name (map list G11467@vars G11468@locs G11469@val-exps) G11470@body-exp))) (set! G11356@build-receive (lambda (G11477@ae G11478@vars G11479@producer G11480@body*) (begin (display '"************** in ") (cons 'receive (cons G11478@vars (cons G11479@producer G11480@body*)))))) (begin (set! G11494@G11356@build-receive G11356@build-receive) (set! G11493@G11354@build-library-letrec* G11354@build-library-letrec*) (set! G11492@G11352@build-letrec* G11352@build-letrec*) (set! G11491@G11350@build-letrec G11350@build-letrec) (set! G11490@G11348@build-void G11348@build-void) (set! G11489@G11346@build-sequence G11346@build-sequence) (set! G11488@G11274@build-let G11274@build-let) (set! G11487@G11272@build-case-lambda G11272@build-case-lambda) (set! G11486@G11270@build-lambda G11270@build-lambda) (set! G11485@G11138@build-global-define G11138@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G11507@set-cons G11509@set-union G11514@top-mark* G11516@top-marked? G11518@gen-lexical G11520@gen-global G11522@gen-label G11524@gen-top-level-label G11526@gen-define-label+loc G11528@gen-define-label G11534@G11529 G11536@G11531 G11538@G11530 G11543@rib? G11545@make-rib G11547@rib-sym* G11549@rib-mark** G11551@rib-label* G11553@rib-sealed/freq G11555@set-rib-sym*! G11557@set-rib-mark**! G11559@set-rib-label*! G11561@set-rib-sealed/freq! G11563@make-empty-rib G11565@extend-rib! G11567@make-rib-map G11569@seal-rib! G11571@unseal-rib! G11573@make-full-rib G11579@G11574 G11581@G11576 G11583@G11575 G11588@stx? G11590@make-stx G11592@stx-expr G11594@stx-mark* G11596@stx-subst* G11598@stx-ae* G11600@set-stx-expr! G11602@set-stx-mark*! G11604@set-stx-subst*! G11606@set-stx-ae*! G11608@rp G11610@datum->stx G11612@gen-mark G11614@anti-mark G11616@anti-mark? G11618@join-wraps G11620@mkstx G11622@add-mark G11624@add-subst G11626@syntax-kind? G11628@syntax-vector->list G11630@syntax-pair? G11632@syntax-vector? G11634@syntax-null? G11636@syntax-list? G11638@syntax-car G11640@syntax-cdr G11642@syntax->list G11644@id? G11646@id->sym G11648@same-marks? G11650@bound-id=? G11652@free-id=? G11654@valid-bound-ids? G11656@distinct-bound-ids? G11658@bound-id-member? G11660@self-evaluating? G11662@strip-annotations G11664@strip G11666@stx->datum G11668@same-marks*? G11670@id->label G11672@id->real-label G11674@label->binding G11676@make-binding G11678@binding-type G11680@binding-value G11682@raise-unbound-error G11684@syntax-type G11707@sanitize-binding G11709@make-variable-transformer G11711@variable-transformer? G11713@variable-transformer-procedure G11715@make-eval-transformer G12103@parse-define G12105@parse-define-syntax G12107@scheme-stx-hashtable G12109@scheme-stx G12111@lexical-var G12113@lexical-mutable? G12115@set-lexical-mutable! G12117@add-lexical G12119@add-lexicals G12121@letrec-helper G12123@letrec-transformer G12125@letrec*-transformer G12127@fluid-let-syntax-transformer G12129@type-descriptor-transformer G12131@record-type-descriptor-transformer G12133@record-constructor-descriptor-transformer G12135@when-transformer G12137@unless-transformer G12139@if-transformer G12141@case-transformer G12143@quote-transformer G12145@case-lambda-transformer G12147@lambda-transformer G12149@bless G12151@with-syntax-macro G12153@invalid-fmls-error G12155@let-macro G12157@let-values-macro G12159@let*-values-macro G12161@trace-lambda-macro G12163@trace-define-macro G12165@trace-define-syntax-macro G12167@trace-let/rec-syntax G12169@trace-let-syntax-macro G12171@trace-letrec-syntax-macro G12173@guard-macro G12175@define-enumeration-macro G12177@time-macro G12179@delay-macro G12181@assert-macro G12183@endianness-macro G12185@identifier-syntax-macro G12187@do-macro G12189@let*-macro G12191@or-macro G12193@and-macro G12195@cond-macro G12197@do-include G12199@include-macro G12201@include-into-macro G12203@syntax-rules-macro G12205@quasiquote-macro G12207@quasisyntax-macro G12209@define-struct-macro G12211@define-record-type-macro G12213@define-condition-type-macro G12215@incorrect-usage-macro G12217@parameterize-transformer G12219@foreign-call-transformer G12221@convert-pattern G12223@syntax-dispatch G12225@ellipsis? G12227@underscore? G12229@verify-literals G12231@syntax-case-transformer G12233@ellipsis-map G12235@syntax-transformer G12237@core-macro-transformer G12239@file-options-macro G12241@symbol-macro G12243@macro-transformer G12245@local-macro-transformer G12247@do-macro-call G12249@chi-macro G12251@chi-local-macro G12253@chi-global-macro G12255@chi-expr* G12257@chi-application G12259@chi-expr G12261@chi-set! G12263@verify-formals G12265@chi-lambda-clause G12267@chi-lambda-clause* G12269@chi-defun G12271@chi-rhs G12273@expand-interaction-rhs*/init* G12275@chi-rhs* G12277@find-bound=? G12279@find-dups G12281@chi-internal G12283@parse-module G12289@G12284 G12291@G12286 G12293@G12285 G12298@module-interface? G12300@make-module-interface G12302@module-interface-first-mark G12304@module-interface-exp-id-vec G12306@module-interface-exp-lab-vec G12308@set-module-interface-first-mark! G12310@set-module-interface-exp-id-vec! G12312@set-module-interface-exp-lab-vec! G12314@module-interface-exp-id* G12316@chi-internal-module G12318@chi-body* G12320@expand-transformer G12322@parse-exports G12324@parse-library-name G12326@parse-library G12328@parse-import-spec* G12330@make-top-rib G12332@make-collector G12334@inv-collector G12336@vis-collector G12338@imp-collector G12340@chi-library-internal G12342@chi-interaction-expr G12344@library-body-expander G12346@core-library-expander G12348@parse-top-level-program G12350@top-level-expander G12356@G12351 G12358@G12353 G12360@G12352 G12365@env? G12367@make-env G12369@env-names G12371@env-labels G12373@env-itc G12375@set-env-names! G12377@set-env-labels! G12379@set-env-itc! G12381@rp G12387@G12382 G12389@G12384 G12391@G12383 G12396@interaction-env? G12398@make-interaction-env G12400@interaction-env-rib G12402@interaction-env-r G12404@interaction-env-locs G12406@set-interaction-env-rib! G12408@set-interaction-env-r! G12410@set-interaction-env-locs! G12412@rp G12414@interaction-environment-symbols G12416@environment-symbols G12418@environment? G12420@environment G12422@null-environment G12424@scheme-report-environment G12426@expand G12428@eval G12430@library-expander G12432@boot-library-expand G12434@rev-map-append G12436@build-exports G12438@make-export-subst G12440@make-export-env/macros G12442@generate-temporaries G12444@free-identifier=? G12446@bound-identifier=? G12448@extract-position-condition G12450@syntax-error G12452@extract-trace G12454@syntax-violation* G12456@syntax-violation G12458@identifier? G12460@datum->syntax G12462@syntax->datum G12464@compile-r6rs-top-level G12466@pre-compile-r6rs-top-level G12468@interaction-environment G12470@top-level-context) (begin (set! G11507@set-cons (lambda (G12471@x G12472@ls) (if (memq G12471@x G12472@ls) G12472@ls (cons G12471@x G12472@ls)))) (set! G11509@set-union (lambda (G12475@ls1 G12476@ls2) (if (null? G12475@ls1) G12476@ls2 (if (memq (car G12475@ls1) G12476@ls2) (G11509@set-union (cdr G12475@ls1) G12476@ls2) (cons (car G12475@ls1) (G11509@set-union (cdr G12475@ls1) G12476@ls2)))))) (set! G11514@top-mark* '(top)) (set! G11516@top-marked? (lambda (G12479@m*) (memq 'top G12479@m*))) (set! G11518@gen-lexical (lambda (G12481@sym) (if (symbol? G12481@sym) (gensym G12481@sym) (if (G11588@stx? G12481@sym) (G11518@gen-lexical (G11646@id->sym G12481@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G12481@sym))))) (set! G11520@gen-global (lambda (G12483@x) (G11518@gen-lexical G12483@x))) (set! G11522@gen-label (lambda (G12485@_) (gensym))) (set! G11524@gen-top-level-label (lambda (G12487@id G12488@rib) ((lambda (G12492@find) (begin (set! G12492@find (lambda (G12503@sym G12504@mark* G12505@sym* G12506@mark** G12507@label*) (if (pair? G12505@sym*) (begin '#f (if (if (eq? G12503@sym (car G12505@sym*)) (begin '#f (G11648@same-marks? G12504@mark* (car G12506@mark**))) '#f) (car G12507@label*) (G12492@find G12503@sym G12504@mark* (cdr G12505@sym*) (cdr G12506@mark**) (cdr G12507@label*)))) '#f))) ((lambda (G12493@sym G12494@mark*) ((lambda (G12497@sym*) ((lambda (G12499@t) (if G12499@t ((lambda (G12501@label) (if (G11130@G10769@imported-label->binding G12501@label) (gensym) G12501@label)) G12499@t) (gensym))) (if (memq G12493@sym (G11547@rib-sym* G12488@rib)) (begin '#f (G12492@find G12493@sym G12494@mark* G12497@sym* (G11549@rib-mark** G12488@rib) (G11551@rib-label* G12488@rib))) '#f))) (G11547@rib-sym* G12488@rib))) (G11646@id->sym G12487@id) (G11594@stx-mark* G12487@id)))) '#f))) (set! G11526@gen-define-label+loc (lambda (G12513@id G12514@rib) ((lambda (G12517@t) (if G12517@t ((lambda (G12519@env) ((lambda (G12521@label G12522@locs) (values G12521@label ((lambda (G12525@t) (if G12525@t (cdr G12525@t) ((lambda (G12527@loc) (begin (G12410@set-interaction-env-locs! G12519@env (cons (cons G12521@label G12527@loc) G12522@locs)) G12527@loc)) (G11518@gen-lexical G12513@id)))) (assq G12521@label G12522@locs)))) (G11524@gen-top-level-label G12513@id G12514@rib) (G12404@interaction-env-locs G12519@env))) G12517@t) (values (gensym) (G11518@gen-lexical G12513@id)))) (G12470@top-level-context)))) (set! G11528@gen-define-label (lambda (G12529@id G12530@rib) (if (G12470@top-level-context) (G11524@gen-top-level-label G12529@id G12530@rib) (gensym)))) (set! G11534@G11529 (make-record-type-descriptor 'rib '#f 'G11532 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq)))) (set! G11536@G11531 '#f) (set! G11538@G11530 (make-record-constructor-descriptor G11534@G11529 '#f G11536@G11531)) (set! G11543@rib? (record-predicate G11534@G11529)) (set! G11545@make-rib (record-constructor G11538@G11530)) (set! G11547@rib-sym* (record-accessor G11534@G11529 '0)) (set! G11549@rib-mark** (record-accessor G11534@G11529 '1)) (set! G11551@rib-label* (record-accessor G11534@G11529 '2)) (set! G11553@rib-sealed/freq (record-accessor G11534@G11529 '3)) (set! G11555@set-rib-sym*! (record-mutator G11534@G11529 '0)) (set! G11557@set-rib-mark**! (record-mutator G11534@G11529 '1)) (set! G11559@set-rib-label*! (record-mutator G11534@G11529 '2)) (set! G11561@set-rib-sealed/freq! (record-mutator G11534@G11529 '3)) (set! G11563@make-empty-rib (lambda () (G11545@make-rib '() '() '() '#f))) (set! G11565@extend-rib! (lambda (G12533@rib G12534@id G12535@label) ((lambda (G12540@find) (begin (set! G12540@find (lambda (G12551@sym G12552@mark* G12553@sym* G12554@mark** G12555@label*) (if (pair? G12553@sym*) (begin '#f (if (if (eq? G12551@sym (car G12553@sym*)) (begin '#f (G11648@same-marks? G12552@mark* (car G12554@mark**))) '#f) G12555@label* (G12540@find G12551@sym G12552@mark* (cdr G12553@sym*) (cdr G12554@mark**) (cdr G12555@label*)))) '#f))) (begin (if (G11553@rib-sealed/freq G12533@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G12533@rib) (void)) ((lambda (G12541@sym G12542@mark*) ((lambda (G12545@sym*) ((lambda (G12547@t) (if G12547@t ((lambda (G12549@p) (if (eq? G12535@label (car G12549@p)) (void) (if (G12470@top-level-context) (set-car! G12549@p G12535@label) (G12456@syntax-violation '#f '"cannot redefine" G12534@id)))) G12547@t) (begin (G11555@set-rib-sym*! G12533@rib (cons G12541@sym G12545@sym*)) (G11557@set-rib-mark**! G12533@rib (cons G12542@mark* (G11549@rib-mark** G12533@rib))) (G11559@set-rib-label*! G12533@rib (cons G12535@label (G11551@rib-label* G12533@rib)))))) (if (memq G12541@sym (G11547@rib-sym* G12533@rib)) (begin '#f (G12540@find G12541@sym G12542@mark* G12545@sym* (G11549@rib-mark** G12533@rib) (G11551@rib-label* G12533@rib))) '#f))) (G11547@rib-sym* G12533@rib))) (G11646@id->sym G12534@id) (G11594@stx-mark* G12534@id))))) '#f))) (set! G11567@make-rib-map (lambda (G12561@sym*) ((lambda (G12563@ht) ((letrec ((G12565@f (lambda (G12567@i G12568@sym*) (if (null? G12568@sym*) G12563@ht (begin (hashtable-update! G12563@ht (car G12568@sym*) (lambda (G12571@x) (cons G12567@i G12571@x)) '()) (G12565@f (+ G12567@i '1) (cdr G12568@sym*))))))) G12565@f) '0 G12561@sym*)) (make-eq-hashtable)))) (set! G11569@seal-rib! (lambda (G12573@rib) ((lambda (G12575@sym*) (if (null? G12575@sym*) (void) (begin (G11555@set-rib-sym*! G12573@rib (list->vector G12575@sym*)) (G11557@set-rib-mark**! G12573@rib (list->vector (G11549@rib-mark** G12573@rib))) (G11559@set-rib-label*! G12573@rib (list->vector (G11551@rib-label* G12573@rib))) (G11561@set-rib-sealed/freq! G12573@rib (G11567@make-rib-map G12575@sym*))))) (G11547@rib-sym* G12573@rib)))) (set! G11571@unseal-rib! (lambda (G12577@rib) (if (G11553@rib-sealed/freq G12577@rib) (begin (G11561@set-rib-sealed/freq! G12577@rib '#f) (G11555@set-rib-sym*! G12577@rib (vector->list (G11547@rib-sym* G12577@rib))) (G11557@set-rib-mark**! G12577@rib (vector->list (G11549@rib-mark** G12577@rib))) (G11559@set-rib-label*! G12577@rib (vector->list (G11551@rib-label* G12577@rib)))) (void)))) (set! G11573@make-full-rib (lambda (G12579@id* G12580@label*) ((lambda (G12583@r) (begin (G11569@seal-rib! G12583@r) G12583@r)) (G11545@make-rib (map G11646@id->sym G12579@id*) (map G11594@stx-mark* G12579@id*) G12580@label* '#f)))) (set! G11579@G11574 (make-record-type-descriptor 'stx '#f 'G11577 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G11581@G11576 '#f) (set! G11583@G11575 (make-record-constructor-descriptor G11579@G11574 '#f G11581@G11576)) (set! G11588@stx? (record-predicate G11579@G11574)) (set! G11590@make-stx (record-constructor G11583@G11575)) (set! G11592@stx-expr (record-accessor G11579@G11574 '0)) (set! G11594@stx-mark* (record-accessor G11579@G11574 '1)) (set! G11596@stx-subst* (record-accessor G11579@G11574 '2)) (set! G11598@stx-ae* (record-accessor G11579@G11574 '3)) (set! G11600@set-stx-expr! (record-mutator G11579@G11574 '0)) (set! G11602@set-stx-mark*! (record-mutator G11579@G11574 '1)) (set! G11604@set-stx-subst*! (record-mutator G11579@G11574 '2)) (set! G11606@set-stx-ae*! (record-mutator G11579@G11574 '3)) (set! G11608@rp (G10457@G10249@make-record-printer 'stx (lambda (G12585@x G12586@p) (begin (display '"#<syntax " G12586@p) (write (G11666@stx->datum G12585@x) G12586@p) ((lambda (G12589@expr) (if (G10452@G10239@annotation? G12589@expr) ((lambda (G12591@src) (if (pair? G12591@src) (begin (display '" [" G12586@p) (display (cdr G12591@src) G12586@p) (display '" of " G12586@p) (display (car G12591@src) G12586@p) (display '"]" G12586@p)) (void))) (G10453@G10241@annotation-source G12589@expr)) (void))) (G11592@stx-expr G12585@x)) (display '">" G12586@p))))) (set! G11610@datum->stx (lambda (G12593@id G12594@datum) (G11590@make-stx G12594@datum (G11594@stx-mark* G12593@id) (G11596@stx-subst* G12593@id) (G11598@stx-ae* G12593@id)))) (set! G11612@gen-mark (lambda () (string '#\m))) (set! G11614@anti-mark '#f) (set! G11616@anti-mark? not) (set! G11618@join-wraps (lambda (G12597@m1* G12598@s1* G12599@ae1* G12600@e) ((lambda (G12606@cancel) (begin (set! G12606@cancel (lambda (G12613@ls1 G12614@ls2) ((letrec ((G12617@f (lambda (G12619@x G12620@ls1) (if (null? G12620@ls1) (cdr G12614@ls2) (cons G12619@x (G12617@f (car G12620@ls1) (cdr G12620@ls1))))))) G12617@f) (car G12613@ls1) (cdr G12613@ls1)))) ((lambda (G12607@m2* G12608@s2* G12609@ae2*) (if (if (not (null? G12597@m1*)) (if (not (null? G12607@m2*)) (begin '#f (G11616@anti-mark? (car G12607@m2*))) '#f) '#f) (values (G12606@cancel G12597@m1* G12607@m2*) (G12606@cancel G12598@s1* G12608@s2*) (G12606@cancel G12599@ae1* G12609@ae2*)) (values (append G12597@m1* G12607@m2*) (append G12598@s1* G12608@s2*) (append G12599@ae1* G12609@ae2*)))) (G11594@stx-mark* G12600@e) (G11596@stx-subst* G12600@e) (G11598@stx-ae* G12600@e)))) '#f))) (set! G11620@mkstx (lambda (G12623@e G12624@m* G12625@s* G12626@ae*) (if (G11588@stx? G12623@e) (call-with-values (lambda () (G11618@join-wraps G12624@m* G12625@s* G12626@ae* G12623@e)) (lambda (G12634@G12631 G12635@G12632 G12636@G12633) ((lambda (G12640@ae* G12641@s* G12642@m*) (G11590@make-stx (G11592@stx-expr G12623@e) G12642@m* G12641@s* G12640@ae*)) G12636@G12633 G12635@G12632 G12634@G12631))) (G11590@make-stx G12623@e G12624@m* G12625@s* G12626@ae*)))) (set! G11622@add-mark (lambda (G12646@m G12647@e G12648@ae) (G11620@mkstx G12647@e (list G12646@m) '(shift) (list G12648@ae)))) (set! G11624@add-subst (lambda (G12652@subst G12653@e) (G11620@mkstx G12653@e '() (list G12652@subst) '()))) (set! G11626@syntax-kind? (lambda (G12656@x G12657@p?) (if (G11588@stx? G12656@x) (G11626@syntax-kind? (G11592@stx-expr G12656@x) G12657@p?) (if (G10452@G10239@annotation? G12656@x) (G11626@syntax-kind? (G10454@G10243@annotation-expression G12656@x) G12657@p?) (G12657@p? G12656@x))))) (set! G11628@syntax-vector->list (lambda (G12660@x) (if (G11588@stx? G12660@x) ((lambda (G12662@ls G12663@m* G12664@s* G12665@ae*) (map (lambda (G12670@x) (G11620@mkstx G12670@x G12663@m* G12664@s* G12665@ae*)) G12662@ls)) (G11628@syntax-vector->list (G11592@stx-expr G12660@x)) (G11594@stx-mark* G12660@x) (G11596@stx-subst* G12660@x) (G11598@stx-ae* G12660@x)) (if (G10452@G10239@annotation? G12660@x) (G11628@syntax-vector->list (G10454@G10243@annotation-expression G12660@x)) (if (vector? G12660@x) (vector->list G12660@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G12660@x)))))) (set! G11630@syntax-pair? (lambda (G12672@x) (G11626@syntax-kind? G12672@x pair?))) (set! G11632@syntax-vector? (lambda (G12674@x) (G11626@syntax-kind? G12674@x vector?))) (set! G11634@syntax-null? (lambda (G12676@x) (G11626@syntax-kind? G12676@x null?))) (set! G11636@syntax-list? (lambda (G12678@x) ((lambda (G12680@t) (if G12680@t G12680@t (begin '#f (if (G11630@syntax-pair? G12678@x) (begin '#f (G11636@syntax-list? (G11640@syntax-cdr G12678@x))) '#f)))) (G11634@syntax-null? G12678@x)))) (set! G11638@syntax-car (lambda (G12682@x) (if (G11588@stx? G12682@x) (G11620@mkstx (G11638@syntax-car (G11592@stx-expr G12682@x)) (G11594@stx-mark* G12682@x) (G11596@stx-subst* G12682@x) (G11598@stx-ae* G12682@x)) (if (G10452@G10239@annotation? G12682@x) (G11638@syntax-car (G10454@G10243@annotation-expression G12682@x)) (if (pair? G12682@x) (car G12682@x) (assertion-violation 'syntax-car '"BUG: not a pair" G12682@x)))))) (set! G11640@syntax-cdr (lambda (G12684@x) (if (G11588@stx? G12684@x) (G11620@mkstx (G11640@syntax-cdr (G11592@stx-expr G12684@x)) (G11594@stx-mark* G12684@x) (G11596@stx-subst* G12684@x) (G11598@stx-ae* G12684@x)) (if (G10452@G10239@annotation? G12684@x) (G11640@syntax-cdr (G10454@G10243@annotation-expression G12684@x)) (if (pair? G12684@x) (cdr G12684@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G12684@x)))))) (set! G11642@syntax->list (lambda (G12686@x) (if (G11630@syntax-pair? G12686@x) (cons (G11638@syntax-car G12686@x) (G11642@syntax->list (G11640@syntax-cdr G12686@x))) (if (G11634@syntax-null? G12686@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G12686@x))))) (set! G11644@id? (lambda (G12688@x) (if (G11588@stx? G12688@x) (begin '#f ((lambda (G12690@expr) (symbol? (if (G10452@G10239@annotation? G12690@expr) (G10451@G10237@annotation-stripped G12690@expr) G12690@expr))) (G11592@stx-expr G12688@x))) '#f))) (set! G11646@id->sym (lambda (G12692@x) (begin (if (G11588@stx? G12692@x) (void) (error 'id->sym '"BUG in ikarus: not an id" G12692@x)) ((lambda (G12694@expr) ((lambda (G12696@sym) (if (symbol? G12696@sym) G12696@sym (error 'id->sym '"BUG in ikarus: not an id" G12692@x))) (if (G10452@G10239@annotation? G12694@expr) (G10451@G10237@annotation-stripped G12694@expr) G12694@expr))) (G11592@stx-expr G12692@x))))) (set! G11648@same-marks? (lambda (G12698@x G12699@y) ((lambda (G12702@t) (if G12702@t G12702@t (begin '#f (if (pair? G12698@x) (if (pair? G12699@y) (if (eq? (car G12698@x) (car G12699@y)) (begin '#f (G11648@same-marks? (cdr G12698@x) (cdr G12699@y))) '#f) '#f) '#f)))) (if (null? G12698@x) (begin '#f (null? G12699@y)) '#f)))) (set! G11650@bound-id=? (lambda (G12704@x G12705@y) (if (eq? (G11646@id->sym G12704@x) (G11646@id->sym G12705@y)) (begin '#f (G11648@same-marks? (G11594@stx-mark* G12704@x) (G11594@stx-mark* G12705@y))) '#f))) (set! G11652@free-id=? (lambda (G12708@i G12709@j) ((lambda (G12712@t0 G12713@t1) (if ((lambda (G12716@t) (if G12716@t G12716@t (begin '#f G12713@t1))) G12712@t0) (eq? G12712@t0 G12713@t1) (eq? (G11646@id->sym G12708@i) (G11646@id->sym G12709@j)))) (G11672@id->real-label G12708@i) (G11672@id->real-label G12709@j)))) (set! G11654@valid-bound-ids? (lambda (G12718@id*) (if (for-all G11644@id? G12718@id*) (begin '#f (G11656@distinct-bound-ids? G12718@id*)) '#f))) (set! G11656@distinct-bound-ids? (lambda (G12720@id*) ((lambda (G12722@t) (if G12722@t G12722@t (begin '#f (if (not (G11658@bound-id-member? (car G12720@id*) (cdr G12720@id*))) (begin '#f (G11656@distinct-bound-ids? (cdr G12720@id*))) '#f)))) (null? G12720@id*)))) (set! G11658@bound-id-member? (lambda (G12724@id G12725@id*) (if (pair? G12725@id*) (begin '#f ((lambda (G12728@t) (if G12728@t G12728@t (begin '#f (G11658@bound-id-member? G12724@id (cdr G12725@id*))))) (G11650@bound-id=? G12724@id (car G12725@id*)))) '#f))) (set! G11660@self-evaluating? (lambda (G12730@x) ((lambda (G12732@t) (if G12732@t G12732@t ((lambda (G12734@t) (if G12734@t G12734@t ((lambda (G12736@t) (if G12736@t G12736@t ((lambda (G12738@t) (if G12738@t G12738@t (begin '#f (bytevector? G12730@x)))) (boolean? G12730@x)))) (char? G12730@x)))) (string? G12730@x)))) (number? G12730@x)))) (set! G11662@strip-annotations (lambda (G12740@x) (if (pair? G12740@x) (cons (G11662@strip-annotations (car G12740@x)) (G11662@strip-annotations (cdr G12740@x))) (if (vector? G12740@x) (vector-map G11662@strip-annotations G12740@x) (if (G10452@G10239@annotation? G12740@x) (G10451@G10237@annotation-stripped G12740@x) G12740@x))))) (set! G11664@strip (lambda (G12742@x G12743@m*) (if (G11516@top-marked? G12743@m*) (if ((lambda (G12746@t) (if G12746@t G12746@t ((lambda (G12748@t) (if G12748@t G12748@t (begin '#f (if (vector? G12742@x) (if (> (vector-length G12742@x) '0) (begin '#f (G10452@G10239@annotation? (vector-ref G12742@x '0))) '#f) '#f)))) (if (pair? G12742@x) (begin '#f (G10452@G10239@annotation? (car G12742@x))) '#f)))) (G10452@G10239@annotation? G12742@x)) (G11662@strip-annotations G12742@x) G12742@x) ((letrec ((G12750@f (lambda (G12752@x) (if (G11588@stx? G12752@x) (G11664@strip (G11592@stx-expr G12752@x) (G11594@stx-mark* G12752@x)) (if (G10452@G10239@annotation? G12752@x) (G10451@G10237@annotation-stripped G12752@x) (if (pair? G12752@x) ((lambda (G12754@a G12755@d) (if (if (eq? G12754@a (car G12752@x)) (begin '#f (eq? G12755@d (cdr G12752@x))) '#f) G12752@x (cons G12754@a G12755@d))) (G12750@f (car G12752@x)) (G12750@f (cdr G12752@x))) (if (vector? G12752@x) ((lambda (G12758@old) ((lambda (G12760@new) (if (for-all eq? G12758@old G12760@new) G12752@x (list->vector G12760@new))) (map G12750@f G12758@old))) (vector->list G12752@x)) G12752@x))))))) G12750@f) G12742@x)))) (set! G11666@stx->datum (lambda (G12762@x) (G11664@strip G12762@x '()))) (set! G11668@same-marks*? (lambda (G12764@mark* G12765@mark** G12766@si) (if (null? G12766@si) '#f (if (G11648@same-marks? G12764@mark* (vector-ref G12765@mark** (car G12766@si))) (car G12766@si) (G11668@same-marks*? G12764@mark* G12765@mark** (cdr G12766@si)))))) (set! G11670@id->label (lambda (G12770@id) ((lambda (G12772@t) (if G12772@t G12772@t (begin '#f ((lambda (G12774@t) (if G12774@t ((lambda (G12776@env) ((lambda (G12778@rib) (call-with-values (lambda () (G11526@gen-define-label+loc G12770@id G12778@rib)) (lambda (G12782@G12780 G12783@G12781) ((lambda (G12786@loc_ G12787@lab) (begin (G11565@extend-rib! G12778@rib G12770@id G12787@lab) G12787@lab)) G12783@G12781 G12782@G12780)))) (G12400@interaction-env-rib G12776@env))) G12774@t) '#f)) (G12470@top-level-context))))) (G11672@id->real-label G12770@id)))) (set! G11672@id->real-label (lambda (G12790@id) ((lambda (G12792@sym) ((letrec ((G12794@search (lambda (G12796@subst* G12797@mark*) (if (null? G12796@subst*) '#f (if (eq? (car G12796@subst*) 'shift) (G12794@search (cdr G12796@subst*) (cdr G12797@mark*)) ((lambda (G12800@rib) ((lambda (G12802@t) (if G12802@t ((lambda (G12804@ht) ((lambda (G12806@si) ((lambda (G12808@i) (if G12808@i (vector-ref (G11551@rib-label* G12800@rib) G12808@i) (G12794@search (cdr G12796@subst*) G12797@mark*))) (if G12806@si (begin '#f (G11668@same-marks*? G12797@mark* (G11549@rib-mark** G12800@rib) (reverse G12806@si))) '#f))) (hashtable-ref G12804@ht G12792@sym '#f))) G12802@t) ((letrec ((G12810@f (lambda (G12812@sym* G12813@mark** G12814@label*) (if (null? G12812@sym*) (G12794@search (cdr G12796@subst*) G12797@mark*) (if (if (eq? (car G12812@sym*) G12792@sym) (begin '#f (G11648@same-marks? (car G12813@mark**) G12797@mark*)) '#f) (car G12814@label*) (G12810@f (cdr G12812@sym*) (cdr G12813@mark**) (cdr G12814@label*))))))) G12810@f) (G11547@rib-sym* G12800@rib) (G11549@rib-mark** G12800@rib) (G11551@rib-label* G12800@rib)))) (G11553@rib-sealed/freq G12800@rib))) (car G12796@subst*))))))) G12794@search) (G11596@stx-subst* G12790@id) (G11594@stx-mark* G12790@id))) (G11646@id->sym G12790@id)))) (set! G11674@label->binding (lambda (G12818@x G12819@r) ((lambda (G12822@t) (if G12822@t ((lambda (G12824@b) (if (if (pair? G12824@b) (begin '#f (eq? (car G12824@b) '$core-rtd)) '#f) (cons '$rtd (map G12149@bless (cdr G12824@b))) (if (if (pair? G12824@b) (begin '#f (eq? (car G12824@b) 'global-rtd)) '#f) ((lambda (G12826@lib G12827@loc) (cons '$rtd (symbol-value G12827@loc))) (cadr G12824@b) (cddr G12824@b)) G12824@b))) G12822@t) ((lambda (G12830@t) (if G12830@t (cdr G12830@t) ((lambda (G12832@t) (if G12832@t ((lambda (G12834@env) ((lambda (G12836@t) (if G12836@t ((lambda (G12838@p) (cons* 'lexical (cdr G12838@p) '#f)) G12836@t) '(displaced-lexical . #f))) (assq G12818@x (G12404@interaction-env-locs G12834@env)))) G12832@t) '(displaced-lexical . #f))) (G12470@top-level-context)))) (assq G12818@x G12819@r)))) (G11130@G10769@imported-label->binding G12818@x)))) (set! G11676@make-binding cons) (set! G11678@binding-type car) (set! G11680@binding-value cdr) (set! G11682@raise-unbound-error (lambda (G12840@id) (G12454@syntax-violation* '#f '"unbound identifier" G12840@id (G19251@G19155@make-undefined-violation)))) (set! G11684@syntax-type (lambda (G12842@e G12843@r) (if (G11644@id? G12842@e) ((lambda (G12846@id) ((lambda (G12848@label) ((lambda (G12850@b) ((lambda (G12852@type) ((lambda () (begin (if G12848@label (void) (G11682@raise-unbound-error G12846@id)) ((lambda (G12854@t) (if (memv G12854@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd library mutable)) (values G12852@type (G11680@binding-value G12850@b) G12846@id) (values 'other '#f '#f))) G12852@type))))) (G11678@binding-type G12850@b))) (G11674@label->binding G12848@label G12843@r))) (G11670@id->label G12846@id))) G12842@e) (if (G11630@syntax-pair? G12842@e) ((lambda (G12855@id) (if (G11644@id? G12855@id) ((lambda (G12857@label) ((lambda (G12859@b) ((lambda (G12861@type) ((lambda () (begin (if G12857@label (void) (G11682@raise-unbound-error G12855@id)) ((lambda (G12863@t) (if (memv G12863@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import $core-rtd)) (values G12861@type (G11680@binding-value G12859@b) G12855@id) (values 'call '#f '#f))) G12861@type))))) (G11678@binding-type G12859@b))) (G11674@label->binding G12857@label G12843@r))) (G11670@id->label G12855@id)) (values 'call '#f '#f))) (G11638@syntax-car G12842@e)) ((lambda (G12864@d) (if (G11660@self-evaluating? G12864@d) (values 'constant G12864@d '#f) (values 'other '#f '#f))) (G11666@stx->datum G12842@e)))))) (set! G11707@sanitize-binding (lambda (G12866@x G12867@src) (if (procedure? G12866@x) (cons* 'local-macro G12866@x G12867@src) (if (if (pair? G12866@x) (if (eq? (car G12866@x) 'macro!) (begin '#f (procedure? (cdr G12866@x))) '#f) '#f) (cons* 'local-macro! (cdr G12866@x) G12867@src) (if (if (pair? G12866@x) (begin '#f (eq? (car G12866@x) '$rtd)) '#f) G12866@x (assertion-violation 'expand '"invalid transformer" G12866@x)))))) (set! G11709@make-variable-transformer (lambda (G12870@x) (if (procedure? G12870@x) (cons 'macro! G12870@x) (assertion-violation 'make-variable-transformer '"not a procedure" G12870@x)))) (set! G11711@variable-transformer? (lambda (G12872@x) (if (pair? G12872@x) (if (eq? (car G12872@x) 'macro!) (begin '#f (procedure? (cdr G12872@x))) '#f) '#f))) (set! G11713@variable-transformer-procedure (lambda (G12874@x) (if (G11711@variable-transformer? G12874@x) (cdr G12874@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G12874@x)))) (set! G11715@make-eval-transformer (lambda (G12876@x) (G11707@sanitize-binding (eval-core (G10559@G10472@expanded->core G12876@x)) G12876@x))) (set! G12103@parse-define (lambda (G12878@x) ((lambda (G12880@t) ((lambda (G12882@ls/false) (if (if G12882@ls/false (begin '#f (apply (lambda (G12884@id G12885@fmls G12886@b G12887@b*) (G11644@id? G12884@id)) G12882@ls/false)) '#f) (apply (lambda (G12892@id G12893@fmls G12894@b G12895@b*) (begin (G12263@verify-formals G12893@fmls G12878@x) (values G12892@id (cons 'defun (cons G12893@fmls (cons G12894@b G12895@b*)))))) G12882@ls/false) ((lambda (G12900@t) ((lambda (G12902@ls/false) (if (if G12902@ls/false (begin '#f (apply (lambda (G12904@id G12905@val) (G11644@id? G12904@id)) G12902@ls/false)) '#f) (apply (lambda (G12908@id G12909@val) (values G12908@id (cons 'expr G12909@val))) G12902@ls/false) ((lambda (G12912@t) ((lambda (G12914@ls/false) (if (if G12914@ls/false (begin '#f (apply (lambda (G12916@id) (G11644@id? G12916@id)) G12914@ls/false)) '#f) (apply (lambda (G12918@id) (values G12918@id (cons 'expr (G12149@bless '(void))))) G12914@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G12912@t))) (G12223@syntax-dispatch G12912@t '(_ any)))) G12900@t))) (G12223@syntax-dispatch G12900@t '(_ any any)))) G12880@t))) (G12223@syntax-dispatch G12880@t '(_ (any . any) any . each-any)))) G12878@x))) (set! G12105@parse-define-syntax (lambda (G12920@x) ((lambda (G12922@t) ((lambda (G12924@ls/false) (if (if G12924@ls/false (begin '#f (apply (lambda (G12926@id G12927@val) (G11644@id? G12926@id)) G12924@ls/false)) '#f) (apply (lambda (G12930@id G12931@val) (values G12930@id G12931@val)) G12924@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G12922@t))) (G12223@syntax-dispatch G12922@t '(_ any any)))) G12920@x))) (set! G12107@scheme-stx-hashtable (make-eq-hashtable)) (set! G12109@scheme-stx (lambda (G12934@sym) ((lambda (G12936@t) (if G12936@t G12936@t (begin '#f ((lambda (G12938@subst) ((lambda (G12940@stx) ((lambda (G12942@stx) ((lambda () (begin (hashtable-set! G12107@scheme-stx-hashtable G12934@sym G12942@stx) G12942@stx)))) ((lambda (G12944@t) (if G12944@t ((lambda (G12946@x) ((lambda (G12948@name G12949@label) (G11624@add-subst (G11545@make-rib (list G12948@name) (list G11514@top-mark*) (list G12949@label) '#f) G12940@stx)) (car G12946@x) (cdr G12946@x))) G12944@t) G12940@stx)) (assq G12934@sym G12938@subst)))) (G11590@make-stx G12934@sym G11514@top-mark* '() '()))) (G11088@G10685@library-subst (G11124@G10757@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G12107@scheme-stx-hashtable G12934@sym '#f)))) (set! G12111@lexical-var car) (set! G12113@lexical-mutable? cdr) (set! G12115@set-lexical-mutable! set-cdr!) (set! G12117@add-lexical (lambda (G12952@lab G12953@lex G12954@r) (cons (cons* G12952@lab 'lexical G12953@lex '#f) G12954@r))) (set! G12119@add-lexicals (lambda (G12958@lab* G12959@lex* G12960@r) (if (null? G12958@lab*) G12960@r (G12119@add-lexicals (cdr G12958@lab*) (cdr G12959@lex*) (G12117@add-lexical (car G12958@lab*) (car G12959@lex*) G12960@r))))) (set! G12121@letrec-helper (lambda (G12964@e G12965@r G12966@mr G12967@build) ((lambda (G12972@t) ((lambda (G12974@ls/false) (if G12974@ls/false (apply (lambda (G12976@lhs* G12977@rhs* G12978@b G12979@b*) (if (not (G11654@valid-bound-ids? G12976@lhs*)) (G12153@invalid-fmls-error G12964@e G12976@lhs*) ((lambda (G12984@lex* G12985@lab*) ((lambda (G12988@rib G12989@r) ((lambda (G12992@body G12993@rhs*) (G12967@build '#f G12984@lex* G12993@rhs* G12992@body)) (G12281@chi-internal (G11624@add-subst G12988@rib (cons G12978@b G12979@b*)) G12989@r G12966@mr) (G12255@chi-expr* (map (lambda (G12996@x) (G11624@add-subst G12988@rib G12996@x)) G12977@rhs*) G12989@r G12966@mr))) (G11573@make-full-rib G12976@lhs* G12985@lab*) (G12119@add-lexicals G12985@lab* G12984@lex* G12965@r))) (map G11518@gen-lexical G12976@lhs*) (map G11522@gen-label G12976@lhs*)))) G12974@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G12972@t))) (G12223@syntax-dispatch G12972@t '(_ #(each (any any)) any . each-any)))) G12964@e))) (set! G12123@letrec-transformer (lambda (G12998@e G12999@r G13000@mr) (G12121@letrec-helper G12998@e G12999@r G13000@mr G11491@G11350@build-letrec))) (set! G12125@letrec*-transformer (lambda (G13004@e G13005@r G13006@mr) (G12121@letrec-helper G13004@e G13005@r G13006@mr G11492@G11352@build-letrec*))) (set! G12127@fluid-let-syntax-transformer (lambda (G13010@e G13011@r G13012@mr) ((lambda (G13017@lookup) (begin (set! G13017@lookup (lambda (G13036@x) ((lambda (G13038@t) (if G13038@t G13038@t (begin '#f (G12456@syntax-violation '#f '"unbound identifier" G13010@e G13036@x)))) (G11670@id->label G13036@x)))) ((lambda (G13018@t) ((lambda (G13020@ls/false) (if G13020@ls/false (apply (lambda (G13022@lhs* G13023@rhs* G13024@b G13025@b*) (if (not (G11654@valid-bound-ids? G13022@lhs*)) (G12153@invalid-fmls-error G13010@e G13022@lhs*) ((lambda (G13030@lab* G13031@rhs*) (G12281@chi-internal (cons G13024@b G13025@b*) (append (map cons G13030@lab* G13031@rhs*) G13011@r) (append (map cons G13030@lab* G13031@rhs*) G13012@mr))) (map G13017@lookup G13022@lhs*) (map (lambda (G13034@x) (G11715@make-eval-transformer (G12320@expand-transformer G13034@x G13012@mr))) G13023@rhs*)))) G13020@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13018@t))) (G12223@syntax-dispatch G13018@t '(_ #(each (any any)) any . each-any)))) G13010@e))) '#f))) (set! G12129@type-descriptor-transformer (lambda (G13040@e G13041@r G13042@mr) ((lambda (G13046@t) ((lambda (G13048@ls/false) (if (if G13048@ls/false (begin '#f (apply (lambda (G13050@id) (G11644@id? G13050@id)) G13048@ls/false)) '#f) (apply (lambda (G13052@id) ((lambda (G13054@lab) ((lambda (G13056@b) ((lambda (G13058@type) ((lambda () (begin (if G13054@lab (void) (G11682@raise-unbound-error G13052@id)) (if (if (eq? G13058@type '$rtd) (begin '#f (not (list? (G11680@binding-value G13056@b)))) '#f) (void) (G12456@syntax-violation '#f '"not a record type" G13040@e)) (list 'quote (G11680@binding-value G13056@b)))))) (G11678@binding-type G13056@b))) (G11674@label->binding G13054@lab G13041@r))) (G11670@id->label G13052@id))) G13048@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13046@t))) (G12223@syntax-dispatch G13046@t '(_ any)))) G13040@e))) (set! G12131@record-type-descriptor-transformer (lambda (G13060@e G13061@r G13062@mr) ((lambda (G13066@t) ((lambda (G13068@ls/false) (if (if G13068@ls/false (begin '#f (apply (lambda (G13070@id) (G11644@id? G13070@id)) G13068@ls/false)) '#f) (apply (lambda (G13072@id) ((lambda (G13074@lab) ((lambda (G13076@b) ((lambda (G13078@type) ((lambda () (begin (if G13074@lab (void) (G11682@raise-unbound-error G13072@id)) (if (if (eq? G13078@type '$rtd) (begin '#f (list? (G11680@binding-value G13076@b))) '#f) (void) (G12456@syntax-violation '#f '"not a record type" G13060@e)) (G12259@chi-expr (car (G11680@binding-value G13076@b)) G13061@r G13062@mr))))) (G11678@binding-type G13076@b))) (G11674@label->binding G13074@lab G13061@r))) (G11670@id->label G13072@id))) G13068@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13066@t))) (G12223@syntax-dispatch G13066@t '(_ any)))) G13060@e))) (set! G12133@record-constructor-descriptor-transformer (lambda (G13080@e G13081@r G13082@mr) ((lambda (G13086@t) ((lambda (G13088@ls/false) (if (if G13088@ls/false (begin '#f (apply (lambda (G13090@id) (G11644@id? G13090@id)) G13088@ls/false)) '#f) (apply (lambda (G13092@id) ((lambda (G13094@lab) ((lambda (G13096@b) ((lambda (G13098@type) ((lambda () (begin (if G13094@lab (void) (G11682@raise-unbound-error G13092@id)) (if (if (eq? G13098@type '$rtd) (begin '#f (list? (G11680@binding-value G13096@b))) '#f) (void) (G12456@syntax-violation '#f '"invalid type" G13080@e)) (G12259@chi-expr (cadr (G11680@binding-value G13096@b)) G13081@r G13082@mr))))) (G11678@binding-type G13096@b))) (G11674@label->binding G13094@lab G13081@r))) (G11670@id->label G13092@id))) G13088@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13086@t))) (G12223@syntax-dispatch G13086@t '(_ any)))) G13080@e))) (set! G12135@when-transformer (lambda (G13100@e G13101@r G13102@mr) ((lambda (G13106@t) ((lambda (G13108@ls/false) (if G13108@ls/false (apply (lambda (G13110@test G13111@e G13112@e*) (list 'if (G12259@chi-expr G13110@test G13101@r G13102@mr) (G11489@G11346@build-sequence '#f (G12255@chi-expr* (cons G13111@e G13112@e*) G13101@r G13102@mr)) (G11490@G11348@build-void))) G13108@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13106@t))) (G12223@syntax-dispatch G13106@t '(_ any any . each-any)))) G13100@e))) (set! G12137@unless-transformer (lambda (G13116@e G13117@r G13118@mr) ((lambda (G13122@t) ((lambda (G13124@ls/false) (if G13124@ls/false (apply (lambda (G13126@test G13127@e G13128@e*) (list 'if (G12259@chi-expr G13126@test G13117@r G13118@mr) (G11490@G11348@build-void) (G11489@G11346@build-sequence '#f (G12255@chi-expr* (cons G13127@e G13128@e*) G13117@r G13118@mr)))) G13124@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13122@t))) (G12223@syntax-dispatch G13122@t '(_ any any . each-any)))) G13116@e))) (set! G12139@if-transformer (lambda (G13132@e G13133@r G13134@mr) ((lambda (G13138@t) ((lambda (G13140@ls/false) (if G13140@ls/false (apply (lambda (G13142@e0 G13143@e1 G13144@e2) (list 'if (G12259@chi-expr G13142@e0 G13133@r G13134@mr) (G12259@chi-expr G13143@e1 G13133@r G13134@mr) (G12259@chi-expr G13144@e2 G13133@r G13134@mr))) G13140@ls/false) ((lambda (G13148@t) ((lambda (G13150@ls/false) (if G13150@ls/false (apply (lambda (G13152@e0 G13153@e1) (list 'if (G12259@chi-expr G13152@e0 G13133@r G13134@mr) (G12259@chi-expr G13153@e1 G13133@r G13134@mr) (G11490@G11348@build-void))) G13150@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13148@t))) (G12223@syntax-dispatch G13148@t '(_ any any)))) G13138@t))) (G12223@syntax-dispatch G13138@t '(_ any any any)))) G13132@e))) (set! G12141@case-transformer (lambda (G13156@e G13157@r G13158@mr) ((lambda (G13163@build-one G13165@build-last) (begin (set! G13163@build-one (lambda (G13220@t G13221@cls G13222@rest) ((lambda (G13226@t) ((lambda (G13228@ls/false) (if G13228@ls/false (apply (lambda (G13230@d* G13231@e G13232@e*) (list 'if ((lambda (G13236@data) (if (= '1 (length G13236@data)) (list '(primitive eqv?) G13220@t (list 'quote (car G13236@data))) (list '(primitive memv) G13220@t (list 'quote G13236@data)))) (G11666@stx->datum G13230@d*)) (G11489@G11346@build-sequence '#f (G12255@chi-expr* (cons G13231@e G13232@e*) G13157@r G13158@mr)) G13222@rest)) G13228@ls/false) ((lambda (G13238@t) ((lambda (G13240@ls/false) (if G13240@ls/false (apply (lambda (G13242@else) (G12456@syntax-violation '#f '"invalid syntax" G13156@e)) G13240@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13238@t))) (G12223@syntax-dispatch G13238@t 'any))) G13226@t))) (G12223@syntax-dispatch G13226@t '(each-any any . each-any)))) G13221@cls))) (set! G13165@build-last (lambda (G13190@t G13191@cls) ((lambda (G13194@t) ((lambda (G13196@ls/false) (if G13196@ls/false (apply (lambda (G13198@d* G13199@e G13200@e*) (G13163@build-one G13190@t G13191@cls (G11490@G11348@build-void))) G13196@ls/false) ((lambda (G13204@t) ((lambda (G13206@ls/false) (if G13206@ls/false (apply (lambda (G13208@else-kwd G13209@x G13210@x*) (if (if (G11644@id? G13208@else-kwd) (begin '#f (G11652@free-id=? G13208@else-kwd (G12109@scheme-stx 'else))) '#f) (G11489@G11346@build-sequence '#f (G12255@chi-expr* (cons G13209@x G13210@x*) G13157@r G13158@mr)) (G12456@syntax-violation '#f '"invalid syntax" G13156@e))) G13206@ls/false) ((lambda (G13214@t) ((lambda (G13216@ls/false) (if G13216@ls/false (apply (lambda (G13218@else) (G12456@syntax-violation '#f '"invalid syntax" G13156@e)) G13216@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13214@t))) (G12223@syntax-dispatch G13214@t 'any))) G13204@t))) (G12223@syntax-dispatch G13204@t '(any any . each-any)))) G13194@t))) (G12223@syntax-dispatch G13194@t '(each-any any . each-any)))) G13191@cls))) ((lambda (G13166@t) ((lambda (G13168@ls/false) (if G13168@ls/false (apply (lambda (G13170@expr) (G11489@G11346@build-sequence '#f (list (G12259@chi-expr G13170@expr G13157@r G13158@mr) (G11490@G11348@build-void)))) G13168@ls/false) ((lambda (G13172@t) ((lambda (G13174@ls/false) (if G13174@ls/false (apply (lambda (G13176@expr G13177@cls G13178@cls*) ((lambda (G13182@t) (G11488@G11274@build-let '#f (list G13182@t) (list (G12259@chi-expr G13176@expr G13157@r G13158@mr)) ((letrec ((G13184@f (lambda (G13186@cls G13187@cls*) (if (null? G13187@cls*) (G13165@build-last G13182@t G13186@cls) (G13163@build-one G13182@t G13186@cls (G13184@f (car G13187@cls*) (cdr G13187@cls*))))))) G13184@f) G13177@cls G13178@cls*))) (G11518@gen-lexical 't))) G13174@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13172@t))) (G12223@syntax-dispatch G13172@t '(_ any any . each-any)))) G13166@t))) (G12223@syntax-dispatch G13166@t '(_ any)))) G13156@e))) '#f '#f))) (set! G12143@quote-transformer (lambda (G13244@e G13245@r G13246@mr) ((lambda (G13250@t) ((lambda (G13252@ls/false) (if G13252@ls/false (apply (lambda (G13254@datum) (list 'quote (G11666@stx->datum G13254@datum))) G13252@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13250@t))) (G12223@syntax-dispatch G13250@t '(_ any)))) G13244@e))) (set! G12145@case-lambda-transformer (lambda (G13256@e G13257@r G13258@mr) ((lambda (G13262@t) ((lambda (G13264@ls/false) (if G13264@ls/false (apply (lambda (G13266@fmls* G13267@b* G13268@b**) (call-with-values (lambda () (G12267@chi-lambda-clause* G13256@e G13266@fmls* (map cons G13267@b* G13268@b**) G13257@r G13258@mr)) (lambda (G13274@G13272 G13275@G13273) ((lambda (G13278@body* G13279@fmls*) (G11487@G11272@build-case-lambda '#f G13279@fmls* G13278@body*)) G13275@G13273 G13274@G13272)))) G13264@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13262@t))) (G12223@syntax-dispatch G13262@t '(_ . #(each (any any . each-any)))))) G13256@e))) (set! G12147@lambda-transformer (lambda (G13282@e G13283@r G13284@mr) ((lambda (G13288@t) ((lambda (G13290@ls/false) (if G13290@ls/false (apply (lambda (G13292@fmls G13293@b G13294@b*) (call-with-values (lambda () (G12265@chi-lambda-clause G13282@e G13292@fmls (cons G13293@b G13294@b*) G13283@r G13284@mr)) (lambda (G13300@G13298 G13301@G13299) ((lambda (G13304@body G13305@fmls) (G11486@G11270@build-lambda '#f G13305@fmls G13304@body)) G13301@G13299 G13300@G13298)))) G13290@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13288@t))) (G12223@syntax-dispatch G13288@t '(_ any any . each-any)))) G13282@e))) (set! G12149@bless (lambda (G13308@x) (G11620@mkstx ((letrec ((G13310@f (lambda (G13312@x) (if (G11588@stx? G13312@x) G13312@x (if (pair? G13312@x) (cons (G13310@f (car G13312@x)) (G13310@f (cdr G13312@x))) (if (symbol? G13312@x) (G12109@scheme-stx G13312@x) (if (vector? G13312@x) (vector-map G13310@f G13312@x) G13312@x))))))) G13310@f) G13308@x) '() '() '()))) (set! G12151@with-syntax-macro (lambda (G13314@e) ((lambda (G13316@t) ((lambda (G13318@ls/false) (if G13318@ls/false (apply (lambda (G13320@pat* G13321@expr* G13322@b G13323@b*) ((lambda (G13328@idn*) (begin (G12263@verify-formals (map car G13328@idn*) G13314@e) ((lambda (G13330@t*) (G12149@bless (list 'let (map list G13330@t* G13321@expr*) ((letrec ((G13332@f (lambda (G13334@pat* G13335@t*) (if (null? G13334@pat*) (cons 'begin (cons '#f (cons G13322@b G13323@b*))) (list 'syntax-case (car G13335@t*) '() (list (car G13334@pat*) (G13332@f (cdr G13334@pat*) (cdr G13335@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G13334@pat*)) (car G13335@t*)))))))) G13332@f) G13320@pat* G13330@t*)))) (G12442@generate-temporaries G13321@expr*)))) ((letrec ((G13338@f (lambda (G13340@pat*) (if (null? G13340@pat*) '() (call-with-values (lambda () (G12221@convert-pattern (car G13340@pat*) '())) (lambda (G13344@G13342 G13345@G13343) ((lambda (G13348@idn* G13349@pat) (append G13348@idn* (G13338@f (cdr G13340@pat*)))) G13345@G13343 G13344@G13342))))))) G13338@f) G13320@pat*))) G13318@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13316@t))) (G12223@syntax-dispatch G13316@t '(_ #(each (any any)) any . each-any)))) G13314@e))) (set! G12153@invalid-fmls-error (lambda (G13352@stx G13353@fmls) ((lambda (G13356@t) ((lambda (G13358@ls/false) (if G13358@ls/false (apply (lambda (G13360@id* G13361@last) ((letrec ((G13364@f (lambda (G13366@id*) (if (null? G13366@id*) (values) (if (not (G11644@id? (car G13366@id*))) (G12456@syntax-violation '#f '"not an identifier" G13352@stx (car G13366@id*)) (begin (G13364@f (cdr G13366@id*)) (if (G11658@bound-id-member? (car G13366@id*) (cdr G13366@id*)) (G12456@syntax-violation '#f '"duplicate binding" G13352@stx (car G13366@id*)) (void)))))))) G13364@f) (if (G11644@id? G13361@last) (cons G13361@last G13360@id*) (if (G11634@syntax-null? G13361@last) G13360@id* (G12456@syntax-violation '#f '"not an identifier" G13352@stx G13361@last))))) G13358@ls/false) ((lambda (G13368@t) ((lambda (G13370@ls/false) (if G13370@ls/false (apply (lambda () (G12456@syntax-violation '#f '"malformed binding form" G13352@stx G13353@fmls)) G13370@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13368@t))) (G12223@syntax-dispatch G13368@t '_))) G13356@t))) (G12223@syntax-dispatch G13356@t '#(each+ any () any)))) G13353@fmls))) (set! G12155@let-macro (lambda (G13372@stx) ((lambda (G13374@t) ((lambda (G13376@ls/false) (if G13376@ls/false (apply (lambda (G13378@lhs* G13379@rhs* G13380@b G13381@b*) (if (G11654@valid-bound-ids? G13378@lhs*) (G12149@bless (cons (cons 'lambda (cons G13378@lhs* (cons G13380@b G13381@b*))) G13379@rhs*)) (G12153@invalid-fmls-error G13372@stx G13378@lhs*))) G13376@ls/false) ((lambda (G13386@t) ((lambda (G13388@ls/false) (if (if G13388@ls/false (begin '#f (apply (lambda (G13390@f G13391@lhs* G13392@rhs* G13393@b G13394@b*) (G11644@id? G13390@f)) G13388@ls/false)) '#f) (apply (lambda (G13400@f G13401@lhs* G13402@rhs* G13403@b G13404@b*) (if (G11654@valid-bound-ids? G13401@lhs*) (G12149@bless (cons (list 'letrec (list (list G13400@f (cons 'lambda (cons G13401@lhs* (cons G13403@b G13404@b*))))) G13400@f) G13402@rhs*)) (G12153@invalid-fmls-error G13372@stx G13401@lhs*))) G13388@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13386@t))) (G12223@syntax-dispatch G13386@t '(_ any #(each (any any)) any . each-any)))) G13374@t))) (G12223@syntax-dispatch G13374@t '(_ #(each (any any)) any . each-any)))) G13372@stx))) (set! G12157@let-values-macro (lambda (G13410@stx) ((lambda (G13413@rename G13415@rename*) (begin (set! G13413@rename (lambda (G13511@x G13512@old* G13513@new*) (begin (if (G11644@id? G13511@x) (void) (G12456@syntax-violation '#f '"not an indentifier" G13410@stx G13511@x)) (if (G11658@bound-id-member? G13511@x G13512@old*) (G12456@syntax-violation '#f '"duplicate binding" G13410@stx G13511@x) (void)) ((lambda (G13517@y) (values G13517@y (cons G13511@x G13512@old*) (cons G13517@y G13513@new*))) (gensym (G12462@syntax->datum G13511@x)))))) (set! G13415@rename* (lambda (G13493@x* G13494@old* G13495@new*) (if (null? G13493@x*) (values '() G13494@old* G13495@new*) (call-with-values (lambda () (G13413@rename (car G13493@x*) G13494@old* G13495@new*)) (lambda (G13499@x G13500@old* G13501@new*) (call-with-values (lambda () (G13415@rename* (cdr G13493@x*) G13500@old* G13501@new*)) (lambda (G13505@x* G13506@old* G13507@new*) (values (cons G13499@x G13505@x*) G13506@old* G13507@new*)))))))) ((lambda (G13416@t) ((lambda (G13418@ls/false) (if G13418@ls/false (apply (lambda (G13420@b G13421@b*) (cons* (G12149@bless 'let) '() G13420@b G13421@b*)) G13418@ls/false) ((lambda (G13424@t) ((lambda (G13426@ls/false) (if G13426@ls/false (apply (lambda (G13428@lhs* G13429@rhs* G13430@b G13431@b*) (G12149@bless ((letrec ((G13436@f (lambda (G13438@lhs* G13439@rhs* G13440@old* G13441@new*) (if (null? G13438@lhs*) (cons 'let (cons (map list G13440@old* G13441@new*) (cons G13430@b G13431@b*))) ((lambda (G13446@t) ((lambda (G13448@ls/false) (if G13448@ls/false (apply (lambda (G13450@x*) (call-with-values (lambda () (G13415@rename* G13450@x* G13440@old* G13441@new*)) (lambda (G13455@G13452 G13456@G13453 G13457@G13454) ((lambda (G13461@new* G13462@old* G13463@y*) (list 'call-with-values (list 'lambda '() (car G13439@rhs*)) (list 'lambda G13463@y* (G13436@f (cdr G13438@lhs*) (cdr G13439@rhs*) G13462@old* G13461@new*)))) G13457@G13454 G13456@G13453 G13455@G13452)))) G13448@ls/false) ((lambda (G13467@t) ((lambda (G13469@ls/false) (if G13469@ls/false (apply (lambda (G13471@x* G13472@x) (call-with-values (lambda () (G13413@rename G13472@x G13440@old* G13441@new*)) (lambda (G13475@y G13476@old* G13477@new*) (call-with-values (lambda () (G13415@rename* G13471@x* G13476@old* G13477@new*)) (lambda (G13481@y* G13482@old* G13483@new*) (list 'call-with-values (list 'lambda '() (car G13439@rhs*)) (list 'lambda (append G13481@y* G13475@y) (G13436@f (cdr G13438@lhs*) (cdr G13439@rhs*) G13482@old* G13483@new*)))))))) G13469@ls/false) ((lambda (G13487@t) ((lambda (G13489@ls/false) (if G13489@ls/false (apply (lambda (G13491@others) (G12456@syntax-violation '#f '"malformed bindings" G13410@stx G13491@others)) G13489@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13487@t))) (G12223@syntax-dispatch G13487@t 'any))) G13467@t))) (G12223@syntax-dispatch G13467@t '#(each+ any () any)))) G13446@t))) (G12223@syntax-dispatch G13446@t 'each-any))) (car G13438@lhs*)))))) G13436@f) G13428@lhs* G13429@rhs* '() '()))) G13426@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13424@t))) (G12223@syntax-dispatch G13424@t '(_ #(each (any any)) any . each-any)))) G13416@t))) (G12223@syntax-dispatch G13416@t '(_ () any . each-any)))) G13410@stx))) '#f '#f))) (set! G12159@let*-values-macro (lambda (G13519@stx) ((lambda (G13522@check) (begin (set! G13522@check (lambda (G13569@x*) (if (null? G13569@x*) (void) ((lambda (G13571@x) (begin (if (G11644@id? G13571@x) (void) (G12456@syntax-violation '#f '"not an identifier" G13519@stx G13571@x)) (G13522@check (cdr G13569@x*)) (if (G11658@bound-id-member? G13571@x (cdr G13569@x*)) (G12456@syntax-violation '#f '"duplicate identifier" G13519@stx G13571@x) (void)))) (car G13569@x*))))) ((lambda (G13523@t) ((lambda (G13525@ls/false) (if G13525@ls/false (apply (lambda (G13527@b G13528@b*) (cons* (G12149@bless 'let) '() G13527@b G13528@b*)) G13525@ls/false) ((lambda (G13531@t) ((lambda (G13533@ls/false) (if G13533@ls/false (apply (lambda (G13535@lhs* G13536@rhs* G13537@b G13538@b*) (G12149@bless ((letrec ((G13543@f (lambda (G13545@lhs* G13546@rhs*) (if (null? G13545@lhs*) (cons 'begin (cons G13537@b G13538@b*)) ((lambda (G13549@t) ((lambda (G13551@ls/false) (if G13551@ls/false (apply (lambda (G13553@x*) (begin (G13522@check G13553@x*) (list 'call-with-values (list 'lambda '() (car G13546@rhs*)) (list 'lambda G13553@x* (G13543@f (cdr G13545@lhs*) (cdr G13546@rhs*)))))) G13551@ls/false) ((lambda (G13555@t) ((lambda (G13557@ls/false) (if G13557@ls/false (apply (lambda (G13559@x* G13560@x) (begin (G13522@check (cons G13560@x G13559@x*)) (list 'call-with-values (list 'lambda '() (car G13546@rhs*)) (list 'lambda (append G13559@x* G13560@x) (G13543@f (cdr G13545@lhs*) (cdr G13546@rhs*)))))) G13557@ls/false) ((lambda (G13563@t) ((lambda (G13565@ls/false) (if G13565@ls/false (apply (lambda (G13567@others) (G12456@syntax-violation '#f '"malformed bindings" G13519@stx G13567@others)) G13565@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13563@t))) (G12223@syntax-dispatch G13563@t 'any))) G13555@t))) (G12223@syntax-dispatch G13555@t '#(each+ any () any)))) G13549@t))) (G12223@syntax-dispatch G13549@t 'each-any))) (car G13545@lhs*)))))) G13543@f) G13535@lhs* G13536@rhs*))) G13533@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13531@t))) (G12223@syntax-dispatch G13531@t '(_ #(each (any any)) any . each-any)))) G13523@t))) (G12223@syntax-dispatch G13523@t '(_ () any . each-any)))) G13519@stx))) '#f))) (set! G12161@trace-lambda-macro (lambda (G13573@stx) ((lambda (G13575@t) ((lambda (G13577@ls/false) (if G13577@ls/false (apply (lambda (G13579@who G13580@fmls G13581@b G13582@b*) (if (G11654@valid-bound-ids? G13580@fmls) (G12149@bless (list 'make-traced-procedure (list 'quote G13579@who) (cons 'lambda (cons G13580@fmls (cons G13581@b G13582@b*))))) (G12153@invalid-fmls-error G13573@stx G13580@fmls))) G13577@ls/false) ((lambda (G13587@t) ((lambda (G13589@ls/false) (if G13589@ls/false (apply (lambda (G13591@who G13592@fmls G13593@last G13594@b G13595@b*) (if (G11654@valid-bound-ids? (cons G13593@last G13592@fmls)) (G12149@bless (list 'make-traced-procedure (list 'quote G13591@who) (cons 'lambda (cons (append G13592@fmls G13593@last) (cons G13594@b G13595@b*))))) (G12153@invalid-fmls-error G13573@stx (append G13592@fmls G13593@last)))) G13589@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13587@t))) (G12223@syntax-dispatch G13587@t '(_ any #(each+ any () any) any . each-any)))) G13575@t))) (G12223@syntax-dispatch G13575@t '(_ any each-any any . each-any)))) G13573@stx))) (set! G12163@trace-define-macro (lambda (G13601@stx) ((lambda (G13603@t) ((lambda (G13605@ls/false) (if G13605@ls/false (apply (lambda (G13607@who G13608@fmls G13609@b G13610@b*) (if (G11654@valid-bound-ids? G13608@fmls) (G12149@bless (list 'define G13607@who (list 'make-traced-procedure (list 'quote G13607@who) (cons 'lambda (cons G13608@fmls (cons G13609@b G13610@b*)))))) (G12153@invalid-fmls-error G13601@stx G13608@fmls))) G13605@ls/false) ((lambda (G13615@t) ((lambda (G13617@ls/false) (if G13617@ls/false (apply (lambda (G13619@who G13620@fmls G13621@last G13622@b G13623@b*) (if (G11654@valid-bound-ids? (cons G13621@last G13620@fmls)) (G12149@bless (list 'define G13619@who (list 'make-traced-procedure (list 'quote G13619@who) (cons 'lambda (cons (append G13620@fmls G13621@last) (cons G13622@b G13623@b*)))))) (G12153@invalid-fmls-error G13601@stx (append G13620@fmls G13621@last)))) G13617@ls/false) ((lambda (G13629@t) ((lambda (G13631@ls/false) (if G13631@ls/false (apply (lambda (G13633@who G13634@expr) (if (G11644@id? G13633@who) (G12149@bless (list 'define G13633@who (list 'let (list (list 'v G13634@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G13633@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G12456@syntax-violation '#f '"invalid name" G13601@stx))) G13631@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13629@t))) (G12223@syntax-dispatch G13629@t '(_ any any)))) G13615@t))) (G12223@syntax-dispatch G13615@t '(_ (any . #(each+ any () any)) any . each-any)))) G13603@t))) (G12223@syntax-dispatch G13603@t '(_ (any . each-any) any . each-any)))) G13601@stx))) (set! G12165@trace-define-syntax-macro (lambda (G13637@stx) ((lambda (G13639@t) ((lambda (G13641@ls/false) (if G13641@ls/false (apply (lambda (G13643@who G13644@expr) (if (G11644@id? G13643@who) (G12149@bless (list 'define-syntax G13643@who (list 'make-traced-macro (list 'quote G13643@who) G13644@expr))) (G12456@syntax-violation '#f '"invalid name" G13637@stx))) G13641@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13639@t))) (G12223@syntax-dispatch G13639@t '(_ any any)))) G13637@stx))) (set! G12167@trace-let/rec-syntax (lambda (G13647@who) (lambda (G13649@stx) ((lambda (G13651@t) ((lambda (G13653@ls/false) (if G13653@ls/false (apply (lambda (G13655@lhs* G13656@rhs* G13657@b G13658@b*) (if (G11654@valid-bound-ids? G13655@lhs*) ((lambda (G13663@rhs*) (G12149@bless (cons G13647@who (cons (map list G13655@lhs* G13663@rhs*) (cons G13657@b G13658@b*))))) (map (lambda (G13665@lhs G13666@rhs) (list 'make-traced-macro (list 'quote G13665@lhs) G13666@rhs)) G13655@lhs* G13656@rhs*)) (G12153@invalid-fmls-error G13649@stx G13655@lhs*))) G13653@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13651@t))) (G12223@syntax-dispatch G13651@t '(_ #(each (any any)) any . each-any)))) G13649@stx)))) (set! G12169@trace-let-syntax-macro (G12167@trace-let/rec-syntax 'let-syntax)) (set! G12171@trace-letrec-syntax-macro (G12167@trace-let/rec-syntax 'letrec-syntax)) (set! G12173@guard-macro (lambda (G13669@x) ((lambda (G13672@gen-clauses) (begin (set! G13672@gen-clauses (lambda (G13695@con G13696@outerk G13697@clause*) ((lambda (G13702@f G13704@f*) (begin (set! G13702@f (lambda (G13753@x G13754@k) ((lambda (G13757@t) ((lambda (G13759@ls/false) (if G13759@ls/false (apply (lambda (G13761@e G13762@p) ((lambda (G13765@t) (list 'let (list (list G13765@t G13761@e)) (list 'if G13765@t (list G13762@p G13765@t) G13754@k))) (gensym))) G13759@ls/false) ((lambda (G13767@t) ((lambda (G13769@ls/false) (if G13769@ls/false (apply (lambda (G13771@e) ((lambda (G13773@t) (list 'let (list (list G13773@t G13771@e)) (list 'if G13773@t G13773@t G13754@k))) (gensym))) G13769@ls/false) ((lambda (G13775@t) ((lambda (G13777@ls/false) (if G13777@ls/false (apply (lambda (G13779@e G13780@v G13781@v*) (list 'if G13779@e (cons 'begin (cons G13780@v G13781@v*)) G13754@k)) G13777@ls/false) ((lambda (G13785@t) ((lambda (G13787@ls/false) (if G13787@ls/false (apply (lambda () (G12456@syntax-violation '#f '"invalid guard clause" G13753@x)) G13787@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13785@t))) (G12223@syntax-dispatch G13785@t '_))) G13775@t))) (G12223@syntax-dispatch G13775@t '(any any . each-any)))) G13767@t))) (G12223@syntax-dispatch G13767@t '(any)))) G13757@t))) (G12223@syntax-dispatch G13757@t '(any #(scheme-id =>) any)))) G13753@x))) (set! G13704@f* (lambda (G13715@x*) ((lambda (G13717@t) ((lambda (G13719@ls/false) (if G13719@ls/false (apply (lambda () (values (list 'raise G13695@con) '#t)) G13719@ls/false) ((lambda (G13721@t) ((lambda (G13723@ls/false) (if G13723@ls/false (apply (lambda (G13725@e G13726@e*) (values (cons 'begin (cons G13725@e G13726@e*)) '#f)) G13723@ls/false) ((lambda (G13729@t) ((lambda (G13731@ls/false) (if G13731@ls/false (apply (lambda (G13733@cls G13734@cls*) (call-with-values (lambda () (G13704@f* G13734@cls*)) (lambda (G13739@G13737 G13740@G13738) ((lambda (G13743@g G13744@e) (values (G13702@f G13733@cls G13744@e) G13743@g)) G13740@G13738 G13739@G13737)))) G13731@ls/false) ((lambda (G13747@t) ((lambda (G13749@ls/false) (if G13749@ls/false (apply (lambda (G13751@others) (G12456@syntax-violation '#f '"invalid guard clause" G13751@others)) G13749@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13747@t))) (G12223@syntax-dispatch G13747@t 'any))) G13729@t))) (G12223@syntax-dispatch G13729@t '(any . any)))) G13721@t))) (G12223@syntax-dispatch G13721@t '((#(scheme-id else) any . each-any))))) G13717@t))) (G12223@syntax-dispatch G13717@t '()))) G13715@x*))) (call-with-values (lambda () (G13704@f* G13697@clause*)) (lambda (G13707@G13705 G13708@G13706) ((lambda (G13711@raisek G13712@code) (if G13711@raisek (list G13696@outerk G13712@code) G13712@code)) G13708@G13706 G13707@G13705))))) '#f '#f))) ((lambda (G13673@t) ((lambda (G13675@ls/false) (if (if G13675@ls/false (begin '#f (apply (lambda (G13677@con G13678@clause* G13679@b G13680@b*) (G11644@id? G13677@con)) G13675@ls/false)) '#f) (apply (lambda (G13685@con G13686@clause* G13687@b G13688@b*) ((lambda (G13693@outerk) (G12149@bless (list 'call/cc (list 'lambda (list G13693@outerk) (list 'with-exception-handler (list 'lambda (list G13685@con) (G13672@gen-clauses G13685@con G13693@outerk G13686@clause*)) (cons 'lambda (cons '() (cons '#f (cons G13687@b G13688@b*))))))))) (gensym))) G13675@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13673@t))) (G12223@syntax-dispatch G13673@t '(_ (any . each-any) any . each-any)))) G13669@x))) '#f))) (set! G12175@define-enumeration-macro (lambda (G13789@stx) ((lambda (G13792@set? G13794@remove-dups) (begin (set! G13792@set? (lambda (G13817@x) ((lambda (G13819@t) (if G13819@t G13819@t (begin '#f (if (not (memq (car G13817@x) (cdr G13817@x))) (begin '#f (G13792@set? (cdr G13817@x))) '#f)))) (null? G13817@x)))) (set! G13794@remove-dups (lambda (G13815@ls) (if (null? G13815@ls) '() (cons (car G13815@ls) (G13794@remove-dups (remq (car G13815@ls) (cdr G13815@ls))))))) ((lambda (G13795@t) ((lambda (G13797@ls/false) (if (if G13797@ls/false (begin '#f (apply (lambda (G13799@name G13800@id* G13801@maker) (if (G11644@id? G13799@name) (if (G11644@id? G13801@maker) (begin '#f (for-all G11644@id? G13800@id*)) '#f) '#f)) G13797@ls/false)) '#f) (apply (lambda (G13805@name G13806@id* G13807@maker) ((lambda (G13811@name* G13812@mk) (G12149@bless (list 'begin (list 'define G13812@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G13811@name*)))) (list 'define-syntax G13805@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G13811@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G13805@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G13807@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G13807@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G13811@name*)) (cons 'syntax-violation (cons (list 'quote G13807@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G13812@mk '('(n* ...)))))))))))) (G13794@remove-dups (G12462@syntax->datum G13806@id*)) (gensym))) G13797@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13795@t))) (G12223@syntax-dispatch G13795@t '(_ any each-any any)))) G13789@stx))) '#f '#f))) (set! G12177@time-macro (lambda (G13821@stx) ((lambda (G13823@t) ((lambda (G13825@ls/false) (if G13825@ls/false (apply (lambda (G13827@expr) ((lambda (G13829@str) (G12149@bless (list 'time-it G13829@str (list 'lambda '() G13827@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G13833@G13831 G13834@G13832) ((lambda (G13837@e G13838@p) (begin (write (G12462@syntax->datum G13827@expr) G13838@p) (G13837@e))) G13834@G13832 G13833@G13831))))) G13825@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13823@t))) (G12223@syntax-dispatch G13823@t '(_ any)))) G13821@stx))) (set! G12179@delay-macro (lambda (G13841@stx) ((lambda (G13843@t) ((lambda (G13845@ls/false) (if G13845@ls/false (apply (lambda (G13847@expr) (G12149@bless (list 'make-promise (list 'lambda '() G13847@expr)))) G13845@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13843@t))) (G12223@syntax-dispatch G13843@t '(_ any)))) G13841@stx))) (set! G12181@assert-macro (lambda (G13849@stx) ((lambda (G13851@t) ((lambda (G13853@ls/false) (if G13853@ls/false (apply (lambda (G13855@expr) (G12149@bless (list 'unless G13855@expr (list 'assertion-violation ''assert '"assertion failed" (list 'quote G13855@expr))))) G13853@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13851@t))) (G12223@syntax-dispatch G13851@t '(_ any)))) G13849@stx))) (set! G12183@endianness-macro (lambda (G13857@stx) ((lambda (G13859@t) ((lambda (G13861@ls/false) (if G13861@ls/false (apply (lambda (G13863@e) ((lambda (G13865@t) (if (eqv? G13865@t 'little) (G12149@bless ''little) (if (eqv? G13865@t 'big) (G12149@bless ''big) (G12456@syntax-violation '#f '"endianness must be big or little" G13857@stx)))) (G12462@syntax->datum G13863@e))) G13861@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13859@t))) (G12223@syntax-dispatch G13859@t '(_ any)))) G13857@stx))) (set! G12185@identifier-syntax-macro (lambda (G13866@stx) ((lambda (G13868@t) ((lambda (G13870@ls/false) (if G13870@ls/false (apply (lambda (G13872@expr) (G12149@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G13872@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G13872@expr) '((syntax (e* ...)))))))))) G13870@ls/false) ((lambda (G13874@t) ((lambda (G13876@ls/false) (if (if G13876@ls/false (begin '#f (apply (lambda (G13878@id1 G13879@expr1 G13880@id2 G13881@expr2 G13882@expr3) (if (G11644@id? G13878@id1) (if (G11644@id? G13880@id2) (begin '#f (G11644@id? G13881@expr2)) '#f) '#f)) G13876@ls/false)) '#f) (apply (lambda (G13888@id1 G13889@expr1 G13890@id2 G13891@expr2 G13892@expr3) (G12149@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G13889@expr1)) (list (list 'set! 'id G13891@expr2) (list 'syntax G13892@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G13889@expr1 '(e* ...))))))))) G13876@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13874@t))) (G12223@syntax-dispatch G13874@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G13868@t))) (G12223@syntax-dispatch G13868@t '(_ any)))) G13866@stx))) (set! G12187@do-macro (lambda (G13898@stx) ((lambda (G13901@bind) (begin (set! G13901@bind (lambda (G13924@x) ((lambda (G13926@t) ((lambda (G13928@ls/false) (if G13928@ls/false (apply (lambda (G13930@x G13931@init) (list G13930@x G13931@init G13930@x)) G13928@ls/false) ((lambda (G13934@t) ((lambda (G13936@ls/false) (if G13936@ls/false (apply (lambda (G13938@x G13939@init G13940@step) (list G13938@x G13939@init G13940@step)) G13936@ls/false) ((lambda (G13944@t) ((lambda (G13946@ls/false) (if G13946@ls/false (apply (lambda () (G12456@syntax-violation '#f '"invalid binding" G13898@stx)) G13946@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13944@t))) (G12223@syntax-dispatch G13944@t '_))) G13934@t))) (G12223@syntax-dispatch G13934@t '(any any any)))) G13926@t))) (G12223@syntax-dispatch G13926@t '(any any)))) G13924@x))) ((lambda (G13902@t) ((lambda (G13904@ls/false) (if G13904@ls/false (apply (lambda (G13906@binding* G13907@test G13908@expr* G13909@command*) ((lambda (G13914@t) ((lambda (G13916@ls/false) (if G13916@ls/false (apply (lambda (G13918@x* G13919@init* G13920@step*) (if (G11654@valid-bound-ids? G13918@x*) (G12149@bless (list 'letrec (list (list 'loop (list 'lambda G13918@x* (list 'if G13907@test (cons 'begin (cons '(if #f #f) G13908@expr*)) (cons 'begin (append G13909@command* (list (cons 'loop G13920@step*)))))))) (cons 'loop G13919@init*))) (G12456@syntax-violation '#f '"invalid bindings" G13898@stx))) G13916@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13914@t))) (G12223@syntax-dispatch G13914@t '#(each (any any any))))) (map G13901@bind G13906@binding*))) G13904@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13902@t))) (G12223@syntax-dispatch G13902@t '(_ each-any (any . each-any) . each-any)))) G13898@stx))) '#f))) (set! G12189@let*-macro (lambda (G13948@stx) ((lambda (G13950@t) ((lambda (G13952@ls/false) (if (if G13952@ls/false (begin '#f (apply (lambda (G13954@lhs* G13955@rhs* G13956@b G13957@b*) (for-all G11644@id? G13954@lhs*)) G13952@ls/false)) '#f) (apply (lambda (G13962@lhs* G13963@rhs* G13964@b G13965@b*) (G12149@bless ((letrec ((G13970@f (lambda (G13972@x*) (if (null? G13972@x*) (cons 'let (cons '() (cons G13964@b G13965@b*))) (list 'let (list (car G13972@x*)) (G13970@f (cdr G13972@x*))))))) G13970@f) (map list G13962@lhs* G13963@rhs*)))) G13952@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13950@t))) (G12223@syntax-dispatch G13950@t '(_ #(each (any any)) any . each-any)))) G13948@stx))) (set! G12191@or-macro (lambda (G13974@stx) ((lambda (G13976@t) ((lambda (G13978@ls/false) (if G13978@ls/false (apply (lambda () '#f) G13978@ls/false) ((lambda (G13980@t) ((lambda (G13982@ls/false) (if G13982@ls/false (apply (lambda (G13984@e G13985@e*) (G12149@bless ((letrec ((G13988@f (lambda (G13990@e G13991@e*) (if (null? G13991@e*) (list 'begin '#f G13990@e) (list 'let (list (list 't G13990@e)) (list 'if 't 't (G13988@f (car G13991@e*) (cdr G13991@e*)))))))) G13988@f) G13984@e G13985@e*))) G13982@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G13980@t))) (G12223@syntax-dispatch G13980@t '(_ any . each-any)))) G13976@t))) (G12223@syntax-dispatch G13976@t '(_)))) G13974@stx))) (set! G12193@and-macro (lambda (G13994@stx) ((lambda (G13996@t) ((lambda (G13998@ls/false) (if G13998@ls/false (apply (lambda () '#t) G13998@ls/false) ((lambda (G14000@t) ((lambda (G14002@ls/false) (if G14002@ls/false (apply (lambda (G14004@e G14005@e*) (G12149@bless ((letrec ((G14008@f (lambda (G14010@e G14011@e*) (if (null? G14011@e*) (list 'begin '#f G14010@e) (cons 'if (cons G14010@e (cons (G14008@f (car G14011@e*) (cdr G14011@e*)) '(#f)))))))) G14008@f) G14004@e G14005@e*))) G14002@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14000@t))) (G12223@syntax-dispatch G14000@t '(_ any . each-any)))) G13996@t))) (G12223@syntax-dispatch G13996@t '(_)))) G13994@stx))) (set! G12195@cond-macro (lambda (G14014@stx) ((lambda (G14016@t) ((lambda (G14018@ls/false) (if G14018@ls/false (apply (lambda (G14020@cls G14021@cls*) (G12149@bless ((letrec ((G14024@f (lambda (G14026@cls G14027@cls*) (if (null? G14027@cls*) ((lambda (G14030@t) ((lambda (G14032@ls/false) (if G14032@ls/false (apply (lambda (G14034@e G14035@e*) (cons 'begin (cons G14034@e G14035@e*))) G14032@ls/false) ((lambda (G14038@t) ((lambda (G14040@ls/false) (if G14040@ls/false (apply (lambda (G14042@e G14043@p) (list 'let (list (list 't G14042@e)) (list 'if 't (cons G14043@p '(t))))) G14040@ls/false) ((lambda (G14046@t) ((lambda (G14048@ls/false) (if G14048@ls/false (apply (lambda (G14050@e) (cons 'or (cons G14050@e '((if #f #f))))) G14048@ls/false) ((lambda (G14052@t) ((lambda (G14054@ls/false) (if G14054@ls/false (apply (lambda (G14056@e G14057@e*) (list 'if G14056@e (cons 'begin G14057@e*))) G14054@ls/false) ((lambda (G14060@t) ((lambda (G14062@ls/false) (if G14062@ls/false (apply (lambda () (G12456@syntax-violation '#f '"invalid last clause" G14014@stx)) G14062@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14060@t))) (G12223@syntax-dispatch G14060@t '_))) G14052@t))) (G12223@syntax-dispatch G14052@t '(any . each-any)))) G14046@t))) (G12223@syntax-dispatch G14046@t '(any)))) G14038@t))) (G12223@syntax-dispatch G14038@t '(any #(scheme-id =>) any)))) G14030@t))) (G12223@syntax-dispatch G14030@t '(#(scheme-id else) any . each-any)))) G14026@cls) ((lambda (G14064@t) ((lambda (G14066@ls/false) (if G14066@ls/false (apply (lambda (G14068@e G14069@e*) (G12456@syntax-violation '#f '"incorrect position of keyword else" G14014@stx)) G14066@ls/false) ((lambda (G14072@t) ((lambda (G14074@ls/false) (if G14074@ls/false (apply (lambda (G14076@e G14077@p) (list 'let (list (list 't G14076@e)) (list 'if 't (cons G14077@p '(t)) (G14024@f (car G14027@cls*) (cdr G14027@cls*))))) G14074@ls/false) ((lambda (G14080@t) ((lambda (G14082@ls/false) (if G14082@ls/false (apply (lambda (G14084@e) (list 'or G14084@e (G14024@f (car G14027@cls*) (cdr G14027@cls*)))) G14082@ls/false) ((lambda (G14086@t) ((lambda (G14088@ls/false) (if G14088@ls/false (apply (lambda (G14090@e G14091@e*) (list 'if G14090@e (cons 'begin G14091@e*) (G14024@f (car G14027@cls*) (cdr G14027@cls*)))) G14088@ls/false) ((lambda (G14094@t) ((lambda (G14096@ls/false) (if G14096@ls/false (apply (lambda () (G12456@syntax-violation '#f '"invalid last clause" G14014@stx)) G14096@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14094@t))) (G12223@syntax-dispatch G14094@t '_))) G14086@t))) (G12223@syntax-dispatch G14086@t '(any . each-any)))) G14080@t))) (G12223@syntax-dispatch G14080@t '(any)))) G14072@t))) (G12223@syntax-dispatch G14072@t '(any #(scheme-id =>) any)))) G14064@t))) (G12223@syntax-dispatch G14064@t '(#(scheme-id else) any . each-any)))) G14026@cls))))) G14024@f) G14020@cls G14021@cls*))) G14018@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14016@t))) (G12223@syntax-dispatch G14016@t '(_ any . each-any)))) G14014@stx))) (set! G12197@do-include (lambda (G14098@stx G14099@id G14100@filename) ((lambda (G14104@filename) (begin (if (if (string? G14104@filename) (begin '#f (G11644@id? G14099@id)) '#f) (void) (G12456@syntax-violation '#f '"invalid syntax" G14098@stx)) (cons (G12149@bless 'begin) (with-input-from-file G14104@filename (lambda () ((letrec ((G14106@f (lambda (G14108@ls) ((lambda (G14110@x) (if (eof-object? G14110@x) (reverse G14108@ls) (G14106@f (cons (G11610@datum->stx G14099@id G14110@x) G14108@ls)))) (G10450@G10235@read-annotated))))) G14106@f) '())))))) (G11666@stx->datum G14100@filename)))) (set! G12199@include-macro (lambda (G14112@e) ((lambda (G14114@t) ((lambda (G14116@ls/false) (if G14116@ls/false (apply (lambda (G14118@id G14119@filename) (G12197@do-include G14112@e G14118@id G14119@filename)) G14116@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14114@t))) (G12223@syntax-dispatch G14114@t '(any any)))) G14112@e))) (set! G12201@include-into-macro (lambda (G14122@e) ((lambda (G14124@t) ((lambda (G14126@ls/false) (if G14126@ls/false (apply (lambda (G14128@id G14129@filename) (G12197@do-include G14122@e G14128@id G14129@filename)) G14126@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14124@t))) (G12223@syntax-dispatch G14124@t '(_ any any)))) G14122@e))) (set! G12203@syntax-rules-macro (lambda (G14132@e) ((lambda (G14134@t) ((lambda (G14136@ls/false) (if G14136@ls/false (apply (lambda (G14138@lits G14139@pat* G14140@tmp*) (begin (G12229@verify-literals G14138@lits G14132@e) (G12149@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G14138@lits (map (lambda (G14144@pat G14145@tmp) ((lambda (G14148@t) ((lambda (G14150@ls/false) (if G14150@ls/false (apply (lambda (G14152@rest) (list (cons 'g G14152@rest) (list 'syntax G14145@tmp))) G14150@ls/false) ((lambda (G14154@t) ((lambda (G14156@ls/false) (if G14156@ls/false (apply (lambda () (G12456@syntax-violation '#f '"invalid syntax-rules pattern" G14132@e G14144@pat)) G14156@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14154@t))) (G12223@syntax-dispatch G14154@t '_))) G14148@t))) (G12223@syntax-dispatch G14148@t '(_ . any)))) G14144@pat)) G14139@pat* G14140@tmp*)))))))) G14136@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14134@t))) (G12223@syntax-dispatch G14134@t '(_ each-any . #(each (any any)))))) G14132@e))) (set! G12205@quasiquote-macro ((lambda () ((lambda (G14159@datum G14200@quasicons* G14202@quasicons G14204@quasiappend G14206@quasivector G14208@vquasi G14210@quasi) (begin (set! G14159@datum (lambda (G14429@x) (list (G12109@scheme-stx 'quote) (G11620@mkstx G14429@x '() '() '())))) (set! G14200@quasicons* (lambda (G14421@x G14422@y) ((letrec ((G14425@f (lambda (G14427@x) (if (null? G14427@x) G14422@y (G14202@quasicons (car G14427@x) (G14425@f (cdr G14427@x))))))) G14425@f) G14421@x))) (set! G14202@quasicons (lambda (G14383@x G14384@y) ((lambda (G14387@t) ((lambda (G14389@ls/false) (if G14389@ls/false (apply (lambda (G14391@dy) ((lambda (G14393@t) ((lambda (G14395@ls/false) (if G14395@ls/false (apply (lambda (G14397@dx) (list (G12109@scheme-stx 'quote) (cons G14397@dx G14391@dy))) G14395@ls/false) ((lambda (G14399@t) ((lambda (G14401@ls/false) (if G14401@ls/false (apply (lambda () ((lambda (G14403@t) ((lambda (G14405@ls/false) (if G14405@ls/false (apply (lambda () (list (G12109@scheme-stx 'list) G14383@x)) G14405@ls/false) ((lambda (G14407@t) ((lambda (G14409@ls/false) (if G14409@ls/false (apply (lambda () (list (G12109@scheme-stx 'cons) G14383@x G14384@y)) G14409@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14407@t))) (G12223@syntax-dispatch G14407@t '_))) G14403@t))) (G12223@syntax-dispatch G14403@t '()))) G14391@dy)) G14401@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14399@t))) (G12223@syntax-dispatch G14399@t '_))) G14393@t))) (G12223@syntax-dispatch G14393@t '(#(scheme-id quote) any)))) G14383@x)) G14389@ls/false) ((lambda (G14411@t) ((lambda (G14413@ls/false) (if G14413@ls/false (apply (lambda (G14415@stuff) (cons* (G12109@scheme-stx 'list) G14383@x G14415@stuff)) G14413@ls/false) ((lambda (G14417@t) ((lambda (G14419@ls/false) (if G14419@ls/false (apply (lambda () (list (G12109@scheme-stx 'cons) G14383@x G14384@y)) G14419@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14417@t))) (G12223@syntax-dispatch G14417@t '_))) G14411@t))) (G12223@syntax-dispatch G14411@t '(#(scheme-id list) . each-any)))) G14387@t))) (G12223@syntax-dispatch G14387@t '(#(scheme-id quote) any)))) G14384@y))) (set! G14204@quasiappend (lambda (G14357@x G14358@y) ((lambda (G14361@ls) (if (null? G14361@ls) (list (G12109@scheme-stx 'quote) '()) (if (null? (cdr G14361@ls)) (car G14361@ls) (cons* (G12109@scheme-stx 'append) G14361@ls)))) ((letrec ((G14363@f (lambda (G14365@x) (if (null? G14365@x) ((lambda (G14367@t) ((lambda (G14369@ls/false) (if G14369@ls/false (apply (lambda () '()) G14369@ls/false) ((lambda (G14371@t) ((lambda (G14373@ls/false) (if G14373@ls/false (apply (lambda () (list G14358@y)) G14373@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14371@t))) (G12223@syntax-dispatch G14371@t '_))) G14367@t))) (G12223@syntax-dispatch G14367@t '(#(scheme-id quote) ())))) G14358@y) ((lambda (G14375@t) ((lambda (G14377@ls/false) (if G14377@ls/false (apply (lambda () (G14363@f (cdr G14365@x))) G14377@ls/false) ((lambda (G14379@t) ((lambda (G14381@ls/false) (if G14381@ls/false (apply (lambda () (cons (car G14365@x) (G14363@f (cdr G14365@x)))) G14381@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14379@t))) (G12223@syntax-dispatch G14379@t '_))) G14375@t))) (G12223@syntax-dispatch G14375@t '(#(scheme-id quote) ())))) (car G14365@x)))))) G14363@f) G14357@x)))) (set! G14206@quasivector (lambda (G14307@x) ((lambda (G14309@pat-x) ((lambda (G14311@t) ((lambda (G14313@ls/false) (if G14313@ls/false (apply (lambda (G14315@x*) (list (G12109@scheme-stx 'quote) (list->vector G14315@x*))) G14313@ls/false) ((lambda (G14317@t) ((lambda (G14319@ls/false) (if G14319@ls/false (apply (lambda () ((letrec ((G14321@f (lambda (G14323@x G14324@k) ((lambda (G14327@t) ((lambda (G14329@ls/false) (if G14329@ls/false (apply (lambda (G14331@x*) (G14324@k (map (lambda (G14333@x) (list (G12109@scheme-stx 'quote) G14333@x)) G14331@x*))) G14329@ls/false) ((lambda (G14335@t) ((lambda (G14337@ls/false) (if G14337@ls/false (apply (lambda (G14339@x*) (G14324@k G14339@x*)) G14337@ls/false) ((lambda (G14341@t) ((lambda (G14343@ls/false) (if G14343@ls/false (apply (lambda (G14345@x G14346@y) (G14321@f G14346@y (lambda (G14349@ls) (G14324@k (cons G14345@x G14349@ls))))) G14343@ls/false) ((lambda (G14351@t) ((lambda (G14353@ls/false) (if G14353@ls/false (apply (lambda () (list (G12109@scheme-stx 'list->vector) G14309@pat-x)) G14353@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14351@t))) (G12223@syntax-dispatch G14351@t '_))) G14341@t))) (G12223@syntax-dispatch G14341@t '(#(scheme-id cons) any any)))) G14335@t))) (G12223@syntax-dispatch G14335@t '(#(scheme-id list) . each-any)))) G14327@t))) (G12223@syntax-dispatch G14327@t '(#(scheme-id quote) each-any)))) G14323@x)))) G14321@f) G14307@x (lambda (G14355@ls) (cons* (G12109@scheme-stx 'vector) G14355@ls)))) G14319@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14317@t))) (G12223@syntax-dispatch G14317@t '_))) G14311@t))) (G12223@syntax-dispatch G14311@t '(#(scheme-id quote) each-any)))) G14309@pat-x)) G14307@x))) (set! G14208@vquasi (lambda (G14273@p G14274@lev) ((lambda (G14277@t) ((lambda (G14279@ls/false) (if G14279@ls/false (apply (lambda (G14281@p G14282@q) ((lambda (G14285@t) ((lambda (G14287@ls/false) (if G14287@ls/false (apply (lambda (G14289@p) (if (= G14274@lev '0) (G14200@quasicons* G14289@p (G14208@vquasi G14282@q G14274@lev)) (G14202@quasicons (G14202@quasicons (G14159@datum 'unquote) (G14210@quasi G14289@p (- G14274@lev '1))) (G14208@vquasi G14282@q G14274@lev)))) G14287@ls/false) ((lambda (G14291@t) ((lambda (G14293@ls/false) (if G14293@ls/false (apply (lambda (G14295@p) (if (= G14274@lev '0) (G14204@quasiappend G14295@p (G14208@vquasi G14282@q G14274@lev)) (G14202@quasicons (G14202@quasicons (G14159@datum 'unquote-splicing) (G14210@quasi G14295@p (- G14274@lev '1))) (G14208@vquasi G14282@q G14274@lev)))) G14293@ls/false) ((lambda (G14297@t) ((lambda (G14299@ls/false) (if G14299@ls/false (apply (lambda (G14301@p) (G14202@quasicons (G14210@quasi G14301@p G14274@lev) (G14208@vquasi G14282@q G14274@lev))) G14299@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14297@t))) (G12223@syntax-dispatch G14297@t 'any))) G14291@t))) (G12223@syntax-dispatch G14291@t '(#(scheme-id unquote-splicing) . each-any)))) G14285@t))) (G12223@syntax-dispatch G14285@t '(#(scheme-id unquote) . each-any)))) G14281@p)) G14279@ls/false) ((lambda (G14303@t) ((lambda (G14305@ls/false) (if G14305@ls/false (apply (lambda () (list (G12109@scheme-stx 'quote) '())) G14305@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14303@t))) (G12223@syntax-dispatch G14303@t '()))) G14277@t))) (G12223@syntax-dispatch G14277@t '(any . any)))) G14273@p))) (set! G14210@quasi (lambda (G14219@p G14220@lev) ((lambda (G14223@t) ((lambda (G14225@ls/false) (if G14225@ls/false (apply (lambda (G14227@p) (if (= G14220@lev '0) G14227@p (G14202@quasicons (G14159@datum 'unquote) (G14210@quasi (list G14227@p) (- G14220@lev '1))))) G14225@ls/false) ((lambda (G14229@t) ((lambda (G14231@ls/false) (if G14231@ls/false (apply (lambda (G14233@p G14234@q) (if (= G14220@lev '0) (G14200@quasicons* G14233@p (G14210@quasi G14234@q G14220@lev)) (G14202@quasicons (G14202@quasicons (G14159@datum 'unquote) (G14210@quasi G14233@p (- G14220@lev '1))) (G14210@quasi G14234@q G14220@lev)))) G14231@ls/false) ((lambda (G14237@t) ((lambda (G14239@ls/false) (if G14239@ls/false (apply (lambda (G14241@p G14242@q) (if (= G14220@lev '0) (G14204@quasiappend G14241@p (G14210@quasi G14242@q G14220@lev)) (G14202@quasicons (G14202@quasicons (G14159@datum 'unquote-splicing) (G14210@quasi G14241@p (- G14220@lev '1))) (G14210@quasi G14242@q G14220@lev)))) G14239@ls/false) ((lambda (G14245@t) ((lambda (G14247@ls/false) (if G14247@ls/false (apply (lambda (G14249@p) (G14202@quasicons (G14159@datum 'quasiquote) (G14210@quasi (list G14249@p) (+ G14220@lev '1)))) G14247@ls/false) ((lambda (G14251@t) ((lambda (G14253@ls/false) (if G14253@ls/false (apply (lambda (G14255@p G14256@q) (G14202@quasicons (G14210@quasi G14255@p G14220@lev) (G14210@quasi G14256@q G14220@lev))) G14253@ls/false) ((lambda (G14259@t) ((lambda (G14261@ls/false) (if (if G14261@ls/false (begin '#f (apply (lambda (G14263@x) (not (G11588@stx? G14263@x))) G14261@ls/false)) '#f) (apply (lambda (G14265@x) (G14206@quasivector (G14208@vquasi G14265@x G14220@lev))) G14261@ls/false) ((lambda (G14267@t) ((lambda (G14269@ls/false) (if G14269@ls/false (apply (lambda (G14271@p) (list (G12109@scheme-stx 'quote) G14271@p)) G14269@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14267@t))) (G12223@syntax-dispatch G14267@t 'any))) G14259@t))) (G12223@syntax-dispatch G14259@t '#(vector each-any)))) G14251@t))) (G12223@syntax-dispatch G14251@t '(any . any)))) G14245@t))) (G12223@syntax-dispatch G14245@t '(#(scheme-id quasiquote) any)))) G14237@t))) (G12223@syntax-dispatch G14237@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G14229@t))) (G12223@syntax-dispatch G14229@t '((#(scheme-id unquote) . each-any) . any)))) G14223@t))) (G12223@syntax-dispatch G14223@t '(#(scheme-id unquote) any)))) G14219@p))) (lambda (G14211@x) ((lambda (G14213@t) ((lambda (G14215@ls/false) (if G14215@ls/false (apply (lambda (G14217@e) (G14210@quasi G14217@e '0)) G14215@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14213@t))) (G12223@syntax-dispatch G14213@t '(_ any)))) G14211@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G12207@quasisyntax-macro ((lambda () ((lambda (G14432@quasi) (begin (set! G14432@quasi (lambda (G14456@p G14457@lev) ((lambda (G14460@t) ((lambda (G14462@ls/false) (if G14462@ls/false (apply (lambda (G14464@p) (if (= G14457@lev '0) ((lambda (G14466@g) (values (list G14466@g) (list G14464@p) G14466@g)) (gensym)) (call-with-values (lambda () (G14432@quasi G14464@p (- G14457@lev '1))) (lambda (G14471@G14468 G14472@G14469 G14473@G14470) ((lambda (G14477@p G14478@rhs* G14479@lhs*) (values G14479@lhs* G14478@rhs* (list 'unsyntax G14477@p))) G14473@G14470 G14472@G14469 G14471@G14468))))) G14462@ls/false) ((lambda (G14483@t) ((lambda (G14485@ls/false) (if (if G14485@ls/false (begin '#f (apply (lambda () (= G14457@lev '0)) G14485@ls/false)) '#f) (apply (lambda () (G12456@syntax-violation '#f '"incorrect use of unsyntax" G14456@p)) G14485@ls/false) ((lambda (G14487@t) ((lambda (G14489@ls/false) (if G14489@ls/false (apply (lambda (G14491@p G14492@q) (call-with-values (lambda () (G14432@quasi G14492@q G14457@lev)) (lambda (G14498@G14495 G14499@G14496 G14500@G14497) ((lambda (G14504@q G14505@rhs* G14506@lhs*) (if (= G14457@lev '0) ((lambda (G14510@g) (values (cons (cons G14510@g '(...)) G14506@lhs*) (cons G14491@p G14505@rhs*) (cons G14510@g (cons '... G14504@q)))) (gensym)) (call-with-values (lambda () (G14432@quasi G14491@p (- G14457@lev '1))) (lambda (G14515@G14512 G14516@G14513 G14517@G14514) ((lambda (G14521@p G14522@rhs2* G14523@lhs2*) (values (append G14523@lhs2* G14506@lhs*) (append G14522@rhs2* G14505@rhs*) (cons (list 'unsyntax-splicing G14521@p) G14504@q))) G14517@G14514 G14516@G14513 G14515@G14512))))) G14500@G14497 G14499@G14496 G14498@G14495)))) G14489@ls/false) ((lambda (G14527@t) ((lambda (G14529@ls/false) (if (if G14529@ls/false (begin '#f (apply (lambda () (= G14457@lev '0)) G14529@ls/false)) '#f) (apply (lambda () (G12456@syntax-violation '#f '"incorrect use of unsyntax-splicing" G14456@p)) G14529@ls/false) ((lambda (G14531@t) ((lambda (G14533@ls/false) (if G14533@ls/false (apply (lambda (G14535@p) (call-with-values (lambda () (G14432@quasi G14535@p (+ G14457@lev '1))) (lambda (G14540@G14537 G14541@G14538 G14542@G14539) ((lambda (G14546@p G14547@rhs* G14548@lhs*) (values G14548@lhs* G14547@rhs* (list 'quasisyntax G14546@p))) G14542@G14539 G14541@G14538 G14540@G14537)))) G14533@ls/false) ((lambda (G14552@t) ((lambda (G14554@ls/false) (if G14554@ls/false (apply (lambda (G14556@p G14557@q) (call-with-values (lambda () (G14432@quasi G14556@p G14457@lev)) (lambda (G14566@G14560 G14567@G14561 G14568@G14562) (call-with-values (lambda () (G14432@quasi G14557@q G14457@lev)) (lambda (G14572@G14563 G14573@G14564 G14574@G14565) ((lambda (G14578@q G14579@rhs2* G14580@lhs2* G14581@p G14582@rhs* G14583@lhs*) (values (append G14580@lhs2* G14583@lhs*) (append G14579@rhs2* G14582@rhs*) (cons G14581@p G14578@q))) G14574@G14565 G14573@G14564 G14572@G14563 G14568@G14562 G14567@G14561 G14566@G14560)))))) G14554@ls/false) ((lambda (G14590@t) ((lambda (G14592@ls/false) (if (if G14592@ls/false (begin '#f (apply (lambda (G14594@x) (not (G11588@stx? G14456@p))) G14592@ls/false)) '#f) (apply (lambda (G14596@x) (call-with-values (lambda () ((letrec ((G14601@f (lambda (G14603@x) (if (null? G14603@x) (values '() '() '()) (call-with-values (lambda () (G14432@quasi (car G14603@x) G14457@lev)) (lambda (G14608@G14605 G14609@G14606 G14610@G14607) ((lambda (G14614@a G14615@rhs* G14616@lhs*) (call-with-values (lambda () (G14601@f (cdr G14603@x))) (lambda (G14623@G14620 G14624@G14621 G14625@G14622) ((lambda (G14629@d G14630@rhs2* G14631@lhs2*) (values (append G14616@lhs* G14631@lhs2*) (append G14615@rhs* G14630@rhs2*) (cons G14614@a G14629@d))) G14625@G14622 G14624@G14621 G14623@G14620)))) G14610@G14607 G14609@G14606 G14608@G14605))))))) G14601@f) G14596@x)) (lambda (G14635@G14598 G14636@G14599 G14637@G14600) ((lambda (G14641@x* G14642@rhs* G14643@lhs*) (values G14643@lhs* G14642@rhs* (list->vector G14641@x*))) G14637@G14600 G14636@G14599 G14635@G14598)))) G14592@ls/false) ((lambda (G14647@t) ((lambda (G14649@ls/false) (if G14649@ls/false (apply (lambda () (values '() '() G14456@p)) G14649@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14647@t))) (G12223@syntax-dispatch G14647@t '_))) G14590@t))) (G12223@syntax-dispatch G14590@t '#(vector each-any)))) G14552@t))) (G12223@syntax-dispatch G14552@t '(any . any)))) G14531@t))) (G12223@syntax-dispatch G14531@t '(#(scheme-id quasisyntax) any)))) G14527@t))) (G12223@syntax-dispatch G14527@t '#(scheme-id unsyntax-splicing)))) G14487@t))) (G12223@syntax-dispatch G14487@t '((#(scheme-id unsyntax-splicing) any) . any)))) G14483@t))) (G12223@syntax-dispatch G14483@t '#(scheme-id unsyntax)))) G14460@t))) (G12223@syntax-dispatch G14460@t '(#(scheme-id unsyntax) any)))) G14456@p))) (lambda (G14433@x) ((lambda (G14435@t) ((lambda (G14437@ls/false) (if G14437@ls/false (apply (lambda (G14439@e) (call-with-values (lambda () (G14432@quasi G14439@e '0)) (lambda (G14444@G14441 G14445@G14442 G14446@G14443) ((lambda (G14450@v G14451@rhs* G14452@lhs*) (G12149@bless (list 'syntax-case (cons 'list G14451@rhs*) '() (list G14452@lhs* (list 'syntax G14450@v))))) G14446@G14443 G14445@G14442 G14444@G14441)))) G14437@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14435@t))) (G12223@syntax-dispatch G14435@t '(_ any)))) G14433@x)))) '#f)))) (set! G12209@define-struct-macro (lambda (G14651@stx) (G12456@syntax-violation '#f '"define-struct not supported" G14651@stx))) (set! G12211@define-record-type-macro (lambda (G14653@x) ((lambda (G14656@id G14658@get-record-name G14660@get-record-constructor-name G14662@get-record-predicate-name G14664@get-clause G14666@foo-rtd-code G14668@parent-rtd-code G14670@parent-rcd-code G14672@foo-rcd-code G14674@get-protocol-code G14676@get-fields G14678@get-mutator-indices G14680@get-mutators G14682@get-accessors G14684@enumerate G14686@do-define-record G14688@verify-clauses) (begin (set! G14656@id (lambda (G15159@ctxt . G15161@str*) (G12460@datum->syntax G15159@ctxt (string->symbol (apply string-append (map (lambda (G15163@x) (if (symbol? G15163@x) (symbol->string G15163@x) (if (string? G15163@x) G15163@x (assertion-violation 'define-record-type '"BUG")))) G15161@str*)))))) (set! G14658@get-record-name (lambda (G15141@spec) ((lambda (G15143@t) ((lambda (G15145@ls/false) (if G15145@ls/false (apply (lambda (G15147@foo G15148@make-foo G15149@foo?) G15147@foo) G15145@ls/false) ((lambda (G15153@t) ((lambda (G15155@ls/false) (if G15155@ls/false (apply (lambda (G15157@foo) G15157@foo) G15155@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G15153@t))) (G12223@syntax-dispatch G15153@t 'any))) G15143@t))) (G12223@syntax-dispatch G15143@t '(any any any)))) G15141@spec))) (set! G14660@get-record-constructor-name (lambda (G15121@spec) ((lambda (G15123@t) ((lambda (G15125@ls/false) (if G15125@ls/false (apply (lambda (G15127@foo G15128@make-foo G15129@foo?) G15128@make-foo) G15125@ls/false) ((lambda (G15133@t) ((lambda (G15135@ls/false) (if (if G15135@ls/false (begin '#f (apply (lambda (G15137@foo) (G11644@id? G15137@foo)) G15135@ls/false)) '#f) (apply (lambda (G15139@foo) (G14656@id G15139@foo '"make-" (G11666@stx->datum G15139@foo))) G15135@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G15133@t))) (G12223@syntax-dispatch G15133@t 'any))) G15123@t))) (G12223@syntax-dispatch G15123@t '(any any any)))) G15121@spec))) (set! G14662@get-record-predicate-name (lambda (G15101@spec) ((lambda (G15103@t) ((lambda (G15105@ls/false) (if G15105@ls/false (apply (lambda (G15107@foo G15108@make-foo G15109@foo?) G15109@foo?) G15105@ls/false) ((lambda (G15113@t) ((lambda (G15115@ls/false) (if (if G15115@ls/false (begin '#f (apply (lambda (G15117@foo) (G11644@id? G15117@foo)) G15115@ls/false)) '#f) (apply (lambda (G15119@foo) (G14656@id G15119@foo (G11666@stx->datum G15119@foo) '"?")) G15115@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G15113@t))) (G12223@syntax-dispatch G15113@t 'any))) G15103@t))) (G12223@syntax-dispatch G15103@t '(any any any)))) G15101@spec))) (set! G14664@get-clause (lambda (G15083@id G15084@ls) ((lambda (G15087@t) ((lambda (G15089@ls/false) (if G15089@ls/false (apply (lambda () '#f) G15089@ls/false) ((lambda (G15091@t) ((lambda (G15093@ls/false) (if G15093@ls/false (apply (lambda (G15095@x G15096@rest G15097@ls) (if (G11652@free-id=? (G12149@bless G15083@id) G15095@x) (cons G15095@x G15096@rest) (G14664@get-clause G15083@id G15097@ls))) G15093@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G15091@t))) (G12223@syntax-dispatch G15091@t '((any . any) . any)))) G15087@t))) (G12223@syntax-dispatch G15087@t '()))) G15084@ls))) (set! G14666@foo-rtd-code (lambda (G15001@name G15002@clause* G15003@parent-rtd-code) ((lambda (G15008@convert-field-spec*) (begin (set! G15008@convert-field-spec* (lambda (G15057@ls) (list->vector (map (lambda (G15059@x) ((lambda (G15061@t) ((lambda (G15063@ls/false) (if G15063@ls/false (apply (lambda (G15065@name G15066@rest) (list 'mutable G15065@name)) G15063@ls/false) ((lambda (G15069@t) ((lambda (G15071@ls/false) (if G15071@ls/false (apply (lambda (G15073@name G15074@rest) (list 'immutable G15073@name)) G15071@ls/false) ((lambda (G15077@t) ((lambda (G15079@ls/false) (if G15079@ls/false (apply (lambda (G15081@name) (list 'immutable G15081@name)) G15079@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G15077@t))) (G12223@syntax-dispatch G15077@t 'any))) G15069@t))) (G12223@syntax-dispatch G15069@t '(#(scheme-id immutable) any . any)))) G15061@t))) (G12223@syntax-dispatch G15061@t '(#(scheme-id mutable) any . any)))) G15059@x)) G15057@ls)))) ((lambda (G15009@uid-code G15010@sealed? G15011@opaque? G15012@fields) (G12149@bless (list 'make-record-type-descriptor (list 'quote G15001@name) G15003@parent-rtd-code G15009@uid-code G15010@sealed? G15011@opaque? G15012@fields))) ((lambda (G15017@t) ((lambda (G15019@ls/false) (if G15019@ls/false (apply (lambda () (list 'quote (gensym))) G15019@ls/false) ((lambda (G15021@t) ((lambda (G15023@ls/false) (if G15023@ls/false (apply (lambda (G15025@uid) (list 'quote G15025@uid)) G15023@ls/false) ((lambda (G15027@t) ((lambda (G15029@ls/false) (if G15029@ls/false (apply (lambda () '#f) G15029@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G15027@t))) (G12223@syntax-dispatch G15027@t '_))) G15021@t))) (G12223@syntax-dispatch G15021@t '(_ any)))) G15017@t))) (G12223@syntax-dispatch G15017@t '(_)))) (G14664@get-clause 'nongenerative G15002@clause*)) ((lambda (G15031@t) ((lambda (G15033@ls/false) (if G15033@ls/false (apply (lambda () '#t) G15033@ls/false) ((lambda (G15035@t) ((lambda (G15037@ls/false) (if G15037@ls/false (apply (lambda () '#f) G15037@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G15035@t))) (G12223@syntax-dispatch G15035@t '_))) G15031@t))) (G12223@syntax-dispatch G15031@t '(_ #(atom #t))))) (G14664@get-clause 'sealed G15002@clause*)) ((lambda (G15039@t) ((lambda (G15041@ls/false) (if G15041@ls/false (apply (lambda () '#t) G15041@ls/false) ((lambda (G15043@t) ((lambda (G15045@ls/false) (if G15045@ls/false (apply (lambda () '#f) G15045@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G15043@t))) (G12223@syntax-dispatch G15043@t '_))) G15039@t))) (G12223@syntax-dispatch G15039@t '(_ #(atom #t))))) (G14664@get-clause 'opaque G15002@clause*)) ((lambda (G15047@t) ((lambda (G15049@ls/false) (if G15049@ls/false (apply (lambda (G15051@field-spec*) (list 'quote (G15008@convert-field-spec* G15051@field-spec*))) G15049@ls/false) ((lambda (G15053@t) ((lambda (G15055@ls/false) (if G15055@ls/false (apply (lambda () ''#()) G15055@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G15053@t))) (G12223@syntax-dispatch G15053@t '_))) G15047@t))) (G12223@syntax-dispatch G15047@t '(_ . each-any)))) (G14664@get-clause 'fields G15002@clause*))))) '#f))) (set! G14668@parent-rtd-code (lambda (G14977@clause*) ((lambda (G14979@t) ((lambda (G14981@ls/false) (if G14981@ls/false (apply (lambda (G14983@name) (list 'record-type-descriptor G14983@name)) G14981@ls/false) ((lambda (G14985@t) ((lambda (G14987@ls/false) (if G14987@ls/false (apply (lambda () ((lambda (G14989@t) ((lambda (G14991@ls/false) (if G14991@ls/false (apply (lambda (G14993@rtd G14994@rcd) G14993@rtd) G14991@ls/false) ((lambda (G14997@t) ((lambda (G14999@ls/false) (if G14999@ls/false (apply (lambda () '#f) G14999@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14997@t))) (G12223@syntax-dispatch G14997@t '#(atom #f)))) G14989@t))) (G12223@syntax-dispatch G14989@t '(_ any any)))) (G14664@get-clause 'parent-rtd G14977@clause*))) G14987@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14985@t))) (G12223@syntax-dispatch G14985@t '#(atom #f)))) G14979@t))) (G12223@syntax-dispatch G14979@t '(_ any)))) (G14664@get-clause 'parent G14977@clause*)))) (set! G14670@parent-rcd-code (lambda (G14953@clause*) ((lambda (G14955@t) ((lambda (G14957@ls/false) (if G14957@ls/false (apply (lambda (G14959@name) (list 'record-constructor-descriptor G14959@name)) G14957@ls/false) ((lambda (G14961@t) ((lambda (G14963@ls/false) (if G14963@ls/false (apply (lambda () ((lambda (G14965@t) ((lambda (G14967@ls/false) (if G14967@ls/false (apply (lambda (G14969@rtd G14970@rcd) G14970@rcd) G14967@ls/false) ((lambda (G14973@t) ((lambda (G14975@ls/false) (if G14975@ls/false (apply (lambda () '#f) G14975@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14973@t))) (G12223@syntax-dispatch G14973@t '#(atom #f)))) G14965@t))) (G12223@syntax-dispatch G14965@t '(_ any any)))) (G14664@get-clause 'parent-rtd G14953@clause*))) G14963@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14961@t))) (G12223@syntax-dispatch G14961@t '#(atom #f)))) G14955@t))) (G12223@syntax-dispatch G14955@t '(_ any)))) (G14664@get-clause 'parent G14953@clause*)))) (set! G14672@foo-rcd-code (lambda (G14945@clause* G14946@foo-rtd G14947@protocol G14948@parent-rcd-code) (list 'make-record-constructor-descriptor G14946@foo-rtd G14948@parent-rcd-code G14947@protocol))) (set! G14674@get-protocol-code (lambda (G14933@clause*) ((lambda (G14935@t) ((lambda (G14937@ls/false) (if G14937@ls/false (apply (lambda (G14939@expr) G14939@expr) G14937@ls/false) ((lambda (G14941@t) ((lambda (G14943@ls/false) (if G14943@ls/false (apply (lambda () '#f) G14943@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14941@t))) (G12223@syntax-dispatch G14941@t '_))) G14935@t))) (G12223@syntax-dispatch G14935@t '(_ any)))) (G14664@get-clause 'protocol G14933@clause*)))) (set! G14676@get-fields (lambda (G14915@clause*) ((lambda (G14917@t) ((lambda (G14919@ls/false) (if G14919@ls/false (apply (lambda () '()) G14919@ls/false) ((lambda (G14921@t) ((lambda (G14923@ls/false) (if G14923@ls/false (apply (lambda (G14925@f*) G14925@f*) G14923@ls/false) ((lambda (G14927@t) ((lambda (G14929@ls/false) (if G14929@ls/false (apply (lambda (G14931@rest) (G14676@get-fields G14931@rest)) G14929@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14927@t))) (G12223@syntax-dispatch G14927@t '(_ . any)))) G14921@t))) (G12223@syntax-dispatch G14921@t '((#(scheme-id fields) . each-any) . _)))) G14917@t))) (G12223@syntax-dispatch G14917@t '()))) G14915@clause*))) (set! G14678@get-mutator-indices (lambda (G14891@fields) ((letrec ((G14893@f (lambda (G14895@fields G14896@i) ((lambda (G14899@t) ((lambda (G14901@ls/false) (if G14901@ls/false (apply (lambda () '()) G14901@ls/false) ((lambda (G14903@t) ((lambda (G14905@ls/false) (if G14905@ls/false (apply (lambda (G14907@rest) (cons G14896@i (G14893@f G14907@rest (+ G14896@i '1)))) G14905@ls/false) ((lambda (G14909@t) ((lambda (G14911@ls/false) (if G14911@ls/false (apply (lambda (G14913@rest) (G14893@f G14913@rest (+ G14896@i '1))) G14911@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14909@t))) (G12223@syntax-dispatch G14909@t '(_ . any)))) G14903@t))) (G12223@syntax-dispatch G14903@t '((#(scheme-id mutable) . _) . any)))) G14899@t))) (G12223@syntax-dispatch G14899@t '()))) G14895@fields)))) G14893@f) G14891@fields '0))) (set! G14680@get-mutators (lambda (G14849@foo G14850@fields) ((lambda (G14854@gen-name) (begin (set! G14854@gen-name (lambda (G14889@x) (G12460@datum->syntax G14849@foo (string->symbol (string-append (symbol->string (G12462@syntax->datum G14849@foo)) '"-" (symbol->string (G12462@syntax->datum G14889@x)) '"-set!"))))) ((letrec ((G14855@f (lambda (G14857@fields) ((lambda (G14859@t) ((lambda (G14861@ls/false) (if G14861@ls/false (apply (lambda () '()) G14861@ls/false) ((lambda (G14863@t) ((lambda (G14865@ls/false) (if G14865@ls/false (apply (lambda (G14867@name G14868@accessor G14869@mutator G14870@rest) (cons G14869@mutator (G14855@f G14870@rest))) G14865@ls/false) ((lambda (G14875@t) ((lambda (G14877@ls/false) (if G14877@ls/false (apply (lambda (G14879@name G14880@rest) (cons (G14854@gen-name G14879@name) (G14855@f G14880@rest))) G14877@ls/false) ((lambda (G14883@t) ((lambda (G14885@ls/false) (if G14885@ls/false (apply (lambda (G14887@rest) (G14855@f G14887@rest)) G14885@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14883@t))) (G12223@syntax-dispatch G14883@t '(_ . any)))) G14875@t))) (G12223@syntax-dispatch G14875@t '((#(scheme-id mutable) any) . any)))) G14863@t))) (G12223@syntax-dispatch G14863@t '((#(scheme-id mutable) any any any) . any)))) G14859@t))) (G12223@syntax-dispatch G14859@t '()))) G14857@fields)))) G14855@f) G14850@fields))) '#f))) (set! G14682@get-accessors (lambda (G14781@foo G14782@fields) ((lambda (G14786@gen-name) (begin (set! G14786@gen-name (lambda (G14847@x) (G12460@datum->syntax G14781@foo (string->symbol (string-append (symbol->string (G12462@syntax->datum G14781@foo)) '"-" (symbol->string (G12462@syntax->datum G14847@x))))))) (map (lambda (G14787@field) ((lambda (G14789@t) ((lambda (G14791@ls/false) (if (if G14791@ls/false (begin '#f (apply (lambda (G14793@name G14794@accessor G14795@mutator) (G11644@id? G14794@accessor)) G14791@ls/false)) '#f) (apply (lambda (G14799@name G14800@accessor G14801@mutator) G14800@accessor) G14791@ls/false) ((lambda (G14805@t) ((lambda (G14807@ls/false) (if (if G14807@ls/false (begin '#f (apply (lambda (G14809@name G14810@accessor) (G11644@id? G14810@accessor)) G14807@ls/false)) '#f) (apply (lambda (G14813@name G14814@accessor) G14814@accessor) G14807@ls/false) ((lambda (G14817@t) ((lambda (G14819@ls/false) (if (if G14819@ls/false (begin '#f (apply (lambda (G14821@name) (G11644@id? G14821@name)) G14819@ls/false)) '#f) (apply (lambda (G14823@name) (G14786@gen-name G14823@name)) G14819@ls/false) ((lambda (G14825@t) ((lambda (G14827@ls/false) (if (if G14827@ls/false (begin '#f (apply (lambda (G14829@name) (G11644@id? G14829@name)) G14827@ls/false)) '#f) (apply (lambda (G14831@name) (G14786@gen-name G14831@name)) G14827@ls/false) ((lambda (G14833@t) ((lambda (G14835@ls/false) (if (if G14835@ls/false (begin '#f (apply (lambda (G14837@name) (G11644@id? G14837@name)) G14835@ls/false)) '#f) (apply (lambda (G14839@name) (G14786@gen-name G14839@name)) G14835@ls/false) ((lambda (G14841@t) ((lambda (G14843@ls/false) (if G14843@ls/false (apply (lambda (G14845@others) (G12456@syntax-violation '#f '"invalid field spec" G14787@field)) G14843@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14841@t))) (G12223@syntax-dispatch G14841@t 'any))) G14833@t))) (G12223@syntax-dispatch G14833@t 'any))) G14825@t))) (G12223@syntax-dispatch G14825@t '(#(scheme-id immutable) any)))) G14817@t))) (G12223@syntax-dispatch G14817@t '(#(scheme-id mutable) any)))) G14805@t))) (G12223@syntax-dispatch G14805@t '(#(scheme-id immutable) any any)))) G14789@t))) (G12223@syntax-dispatch G14789@t '(#(scheme-id mutable) any any any)))) G14787@field)) G14782@fields))) '#f))) (set! G14684@enumerate (lambda (G14773@ls) ((letrec ((G14775@f (lambda (G14777@ls G14778@i) (if (null? G14777@ls) '() (cons G14778@i (G14775@f (cdr G14777@ls) (+ G14778@i '1))))))) G14775@f) G14773@ls '0))) (set! G14686@do-define-record (lambda (G14733@namespec G14734@clause*) ((lambda (G14737@foo) ((lambda (G14739@foo-rtd) ((lambda (G14741@foo-rcd) ((lambda (G14743@protocol) ((lambda (G14745@make-foo) ((lambda (G14747@fields) ((lambda (G14749@idx*) ((lambda (G14751@foo-x*) ((lambda (G14753@set-foo-x!*) ((lambda (G14755@set-foo-idx*) ((lambda (G14757@foo?) ((lambda (G14759@foo-rtd-code) ((lambda (G14761@foo-rcd-code) ((lambda (G14763@protocol-code) ((lambda () (G12149@bless (cons 'begin (cons (list 'define G14739@foo-rtd G14759@foo-rtd-code) (cons (list 'define G14743@protocol G14763@protocol-code) (cons (list 'define G14741@foo-rcd G14761@foo-rcd-code) (cons (list 'define-syntax G14737@foo (list 'list ''$rtd (list 'syntax G14739@foo-rtd) (list 'syntax G14741@foo-rcd))) (cons (list 'define G14757@foo? (list 'record-predicate G14739@foo-rtd)) (cons (list 'define G14745@make-foo (list 'record-constructor G14741@foo-rcd)) (append (map (lambda (G14765@foo-x G14766@idx) (list 'define G14765@foo-x (list 'record-accessor G14739@foo-rtd G14766@idx))) G14751@foo-x* G14749@idx*) (map (lambda (G14769@set-foo-x! G14770@idx) (list 'define G14769@set-foo-x! (list 'record-mutator G14739@foo-rtd G14770@idx))) G14753@set-foo-x!* G14755@set-foo-idx*))))))))))))) (G14674@get-protocol-code G14734@clause*))) (G14672@foo-rcd-code G14734@clause* G14739@foo-rtd G14743@protocol (G14670@parent-rcd-code G14734@clause*)))) (G14666@foo-rtd-code G14737@foo G14734@clause* (G14668@parent-rtd-code G14734@clause*)))) (G14662@get-record-predicate-name G14733@namespec))) (G14678@get-mutator-indices G14747@fields))) (G14680@get-mutators G14737@foo G14747@fields))) (G14682@get-accessors G14737@foo G14747@fields))) (G14684@enumerate G14747@fields))) (G14676@get-fields G14734@clause*))) (G14660@get-record-constructor-name G14733@namespec))) (gensym))) (gensym))) (gensym))) (G14658@get-record-name G14733@namespec)))) (set! G14688@verify-clauses (lambda (G14697@x G14698@cls*) ((lambda (G14702@valid-kwds G14704@free-id-member?) (begin (set! G14702@valid-kwds (map G12149@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G14704@free-id-member? (lambda (G14727@x G14728@ls) (if (pair? G14728@ls) (begin '#f ((lambda (G14731@t) (if G14731@t G14731@t (begin '#f (G14704@free-id-member? G14727@x (cdr G14728@ls))))) (G11652@free-id=? G14727@x (car G14728@ls)))) '#f))) ((letrec ((G14705@f (lambda (G14707@cls* G14708@seen*) (if (null? G14707@cls*) (void) ((lambda (G14711@t) ((lambda (G14713@ls/false) (if G14713@ls/false (apply (lambda (G14715@kwd G14716@rest) (if ((lambda (G14719@t) (if G14719@t G14719@t (begin '#f (not (G14704@free-id-member? G14715@kwd G14702@valid-kwds))))) (not (G11644@id? G14715@kwd))) (G12456@syntax-violation '#f '"not a valid define-record-type keyword" G14715@kwd) (if (G11658@bound-id-member? G14715@kwd G14708@seen*) (G12456@syntax-violation '#f '"duplicate use of keyword " G14697@x G14715@kwd) (G14705@f (cdr G14707@cls*) (cons G14715@kwd G14708@seen*))))) G14713@ls/false) ((lambda (G14721@t) ((lambda (G14723@ls/false) (if G14723@ls/false (apply (lambda (G14725@cls) (G12456@syntax-violation '#f '"malformed define-record-type clause" G14725@cls)) G14723@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14721@t))) (G12223@syntax-dispatch G14721@t 'any))) G14711@t))) (G12223@syntax-dispatch G14711@t '(any . any)))) (car G14707@cls*)))))) G14705@f) G14698@cls* '()))) '#f '#f))) ((lambda (G14689@t) ((lambda (G14691@ls/false) (if G14691@ls/false (apply (lambda (G14693@namespec G14694@clause*) (begin (G14688@verify-clauses G14653@x G14694@clause*) (G14686@do-define-record G14693@namespec G14694@clause*))) G14691@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G14689@t))) (G12223@syntax-dispatch G14689@t '(_ any . each-any)))) G14653@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12213@define-condition-type-macro (lambda (G15165@x) ((lambda (G15168@mkname) (begin (set! G15168@mkname (lambda (G15213@name G15214@suffix) (G12460@datum->syntax G15213@name (string->symbol (string-append (symbol->string (G12462@syntax->datum G15213@name)) G15214@suffix))))) ((lambda (G15169@t) ((lambda (G15171@ls/false) (if (if G15171@ls/false (begin '#f (apply (lambda (G15173@ctxt G15174@name G15175@super G15176@constructor G15177@predicate G15178@field* G15179@accessor*) (if (G11644@id? G15174@name) (if (G11644@id? G15175@super) (if (G11644@id? G15176@constructor) (if (G11644@id? G15177@predicate) (if (for-all G11644@id? G15178@field*) (begin '#f (for-all G11644@id? G15179@accessor*)) '#f) '#f) '#f) '#f) '#f)) G15171@ls/false)) '#f) (apply (lambda (G15187@ctxt G15188@name G15189@super G15190@constructor G15191@predicate G15192@field* G15193@accessor*) ((lambda (G15201@aux-accessor*) (G12149@bless (cons 'begin (cons (cons 'define-record-type (cons (list G15188@name G15190@constructor (gensym)) (cons (list 'parent G15189@super) (cons (cons 'fields (map (lambda (G15203@field G15204@aux) (list 'immutable G15203@field G15204@aux)) G15192@field* G15201@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G15191@predicate (list 'condition-predicate (list 'record-type-descriptor G15188@name))) (map (lambda (G15207@accessor G15208@aux) (list 'define G15207@accessor (list 'condition-accessor (list 'record-type-descriptor G15188@name) G15208@aux))) G15193@accessor* G15201@aux-accessor*)))))) (map (lambda (G15211@x) (gensym)) G15193@accessor*))) G15171@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G15169@t))) (G12223@syntax-dispatch G15169@t '(any any any any any . #(each (any any)))))) G15165@x))) '#f))) (set! G12215@incorrect-usage-macro (lambda (G15217@e) (G12456@syntax-violation '#f '"incorrect usage of auxiliary keyword" G15217@e))) (set! G12217@parameterize-transformer (lambda (G15219@e G15220@r G15221@mr) ((lambda (G15225@t) ((lambda (G15227@ls/false) (if G15227@ls/false (apply (lambda (G15229@b G15230@b*) (G12281@chi-internal (cons G15229@b G15230@b*) G15220@r G15221@mr)) G15227@ls/false) ((lambda (G15233@t) ((lambda (G15235@ls/false) (if G15235@ls/false (apply (lambda (G15237@olhs* G15238@orhs* G15239@b G15240@b*) ((lambda (G15245@lhs* G15246@rhs* G15247@t* G15248@swap) (G11488@G11274@build-let '#f (append G15245@lhs* G15246@rhs*) (append (G12255@chi-expr* G15237@olhs* G15220@r G15221@mr) (G12255@chi-expr* G15238@orhs* G15220@r G15221@mr)) (G11488@G11274@build-let '#f (list G15248@swap) (list (G11486@G11270@build-lambda '#f '() (G11489@G11346@build-sequence '#f (map (lambda (G15253@t G15254@lhs G15255@rhs) (G11488@G11274@build-let '#f (list G15253@t) (list (list G15254@lhs)) (G11489@G11346@build-sequence '#f (list (list G15254@lhs G15255@rhs) (list 'set! G15255@rhs G15253@t))))) G15247@t* G15245@lhs* G15246@rhs*)))) (list '(primitive dynamic-wind) G15248@swap (G11486@G11270@build-lambda '#f '() (G12281@chi-internal (cons G15239@b G15240@b*) G15220@r G15221@mr)) G15248@swap)))) (map (lambda (G15259@x) (G11518@gen-lexical 'lhs)) G15237@olhs*) (map (lambda (G15261@x) (G11518@gen-lexical 'rhs)) G15237@olhs*) (map (lambda (G15263@x) (G11518@gen-lexical 't)) G15237@olhs*) (G11518@gen-lexical 'swap))) G15235@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G15233@t))) (G12223@syntax-dispatch G15233@t '(_ #(each (any any)) any . each-any)))) G15225@t))) (G12223@syntax-dispatch G15225@t '(_ () any . each-any)))) G15219@e))) (set! G12219@foreign-call-transformer (lambda (G15265@e G15266@r G15267@mr) ((lambda (G15271@t) ((lambda (G15273@ls/false) (if G15273@ls/false (apply (lambda (G15275@name G15276@arg*) (cons 'foreign-call (cons (G12259@chi-expr G15275@name G15266@r G15267@mr) (G12255@chi-expr* G15276@arg* G15266@r G15267@mr)))) G15273@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G15271@t))) (G12223@syntax-dispatch G15271@t '(_ any . each-any)))) G15265@e))) (set! G12221@convert-pattern (lambda (G15279@pattern G15280@keys) ((lambda (G15284@cvt* G15286@cvt) (begin (set! G15284@cvt* (lambda (G15429@p* G15430@n G15431@ids) (if (null? G15429@p*) (values '() G15431@ids) (call-with-values (lambda () (G15284@cvt* (cdr G15429@p*) G15430@n G15431@ids)) (lambda (G15437@G15435 G15438@G15436) ((lambda (G15441@ids G15442@y) (call-with-values (lambda () (G15286@cvt (car G15429@p*) G15430@n G15441@ids)) (lambda (G15447@G15445 G15448@G15446) ((lambda (G15451@ids G15452@x) (values (cons G15452@x G15442@y) G15451@ids)) G15448@G15446 G15447@G15445)))) G15438@G15436 G15437@G15435)))))) (set! G15286@cvt (lambda (G15287@p G15288@n G15289@ids) ((lambda (G15293@t) ((lambda (G15295@ls/false) (if (if G15295@ls/false (begin '#f (apply (lambda (G15297@id) (G11644@id? G15297@id)) G15295@ls/false)) '#f) (apply (lambda (G15299@id) (if (G11658@bound-id-member? G15287@p G15280@keys) (values (vector 'free-id G15287@p) G15289@ids) (if (G11652@free-id=? G15287@p (G12109@scheme-stx '_)) (values '_ G15289@ids) (values 'any (cons (cons G15287@p G15288@n) G15289@ids))))) G15295@ls/false) ((lambda (G15301@t) ((lambda (G15303@ls/false) (if (if G15303@ls/false (begin '#f (apply (lambda (G15305@p G15306@dots) (G12225@ellipsis? G15306@dots)) G15303@ls/false)) '#f) (apply (lambda (G15309@p G15310@dots) (call-with-values (lambda () (G15286@cvt G15309@p (+ G15288@n '1) G15289@ids)) (lambda (G15315@G15313 G15316@G15314) ((lambda (G15319@ids G15320@p) (values (if (eq? G15320@p 'any) 'each-any (vector 'each G15320@p)) G15319@ids)) G15316@G15314 G15315@G15313)))) G15303@ls/false) ((lambda (G15323@t) ((lambda (G15325@ls/false) (if (if G15325@ls/false (begin '#f (apply (lambda (G15327@x G15328@dots G15329@ys G15330@z) (G12225@ellipsis? G15328@dots)) G15325@ls/false)) '#f) (apply (lambda (G15335@x G15336@dots G15337@ys G15338@z) (call-with-values (lambda () (G15286@cvt G15338@z G15288@n G15289@ids)) (lambda (G15345@G15343 G15346@G15344) ((lambda (G15349@ids G15350@z) (call-with-values (lambda () (G15284@cvt* G15337@ys G15288@n G15349@ids)) (lambda (G15355@G15353 G15356@G15354) ((lambda (G15359@ids G15360@ys) (call-with-values (lambda () (G15286@cvt G15335@x (+ G15288@n '1) G15359@ids)) (lambda (G15365@G15363 G15366@G15364) ((lambda (G15369@ids G15370@x) (values (vector 'each+ G15370@x (reverse G15360@ys) G15350@z) G15369@ids)) G15366@G15364 G15365@G15363)))) G15356@G15354 G15355@G15353)))) G15346@G15344 G15345@G15343)))) G15325@ls/false) ((lambda (G15373@t) ((lambda (G15375@ls/false) (if G15375@ls/false (apply (lambda (G15377@x G15378@y) (call-with-values (lambda () (G15286@cvt G15378@y G15288@n G15289@ids)) (lambda (G15383@G15381 G15384@G15382) ((lambda (G15387@ids G15388@y) (call-with-values (lambda () (G15286@cvt G15377@x G15288@n G15387@ids)) (lambda (G15393@G15391 G15394@G15392) ((lambda (G15397@ids G15398@x) (values (cons G15398@x G15388@y) G15397@ids)) G15394@G15392 G15393@G15391)))) G15384@G15382 G15383@G15381)))) G15375@ls/false) ((lambda (G15401@t) ((lambda (G15403@ls/false) (if G15403@ls/false (apply (lambda () (values '() G15289@ids)) G15403@ls/false) ((lambda (G15405@t) ((lambda (G15407@ls/false) (if (if G15407@ls/false (begin '#f (apply (lambda (G15409@p) (not (G11588@stx? G15409@p))) G15407@ls/false)) '#f) (apply (lambda (G15411@p) (call-with-values (lambda () (G15286@cvt G15411@p G15288@n G15289@ids)) (lambda (G15415@G15413 G15416@G15414) ((lambda (G15419@ids G15420@p) (values (vector 'vector G15420@p) G15419@ids)) G15416@G15414 G15415@G15413)))) G15407@ls/false) ((lambda (G15423@t) ((lambda (G15425@ls/false) (if G15425@ls/false (apply (lambda (G15427@datum) (values (vector 'atom (G11666@stx->datum G15427@datum)) G15289@ids)) G15425@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G15423@t))) (G12223@syntax-dispatch G15423@t 'any))) G15405@t))) (G12223@syntax-dispatch G15405@t '#(vector each-any)))) G15401@t))) (G12223@syntax-dispatch G15401@t '()))) G15373@t))) (G12223@syntax-dispatch G15373@t '(any . any)))) G15323@t))) (G12223@syntax-dispatch G15323@t '(any any . #(each+ any () any))))) G15301@t))) (G12223@syntax-dispatch G15301@t '(any any)))) G15293@t))) (G12223@syntax-dispatch G15293@t 'any))) G15287@p))) (G15286@cvt G15279@pattern '0 '()))) '#f '#f))) (set! G12223@syntax-dispatch (lambda (G15455@e G15456@p) ((lambda (G15460@stx^ G15462@match-each G15464@match-each+ G15466@match-each-any G15468@match-empty G15470@combine G15472@match* G15474@match) (begin (set! G15460@stx^ (lambda (G15655@e G15656@m* G15657@s* G15658@ae*) (if (if (null? G15656@m*) (if (null? G15657@s*) (begin '#f (null? G15658@ae*)) '#f) '#f) G15655@e (G11620@mkstx G15655@e G15656@m* G15657@s* G15658@ae*)))) (set! G15462@match-each (lambda (G15626@e G15627@p G15628@m* G15629@s* G15630@ae*) (if (pair? G15626@e) ((lambda (G15636@first) (if G15636@first (begin '#f ((lambda (G15638@rest) (if G15638@rest (begin '#f (cons G15636@first G15638@rest)) '#f)) (G15462@match-each (cdr G15626@e) G15627@p G15628@m* G15629@s* G15630@ae*))) '#f)) (G15474@match (car G15626@e) G15627@p G15628@m* G15629@s* G15630@ae* '())) (if (null? G15626@e) '() (if (G11588@stx? G15626@e) (if (not (G11516@top-marked? G15628@m*)) (begin '#f (call-with-values (lambda () (G11618@join-wraps G15628@m* G15629@s* G15630@ae* G15626@e)) (lambda (G15643@G15640 G15644@G15641 G15645@G15642) ((lambda (G15649@ae* G15650@s* G15651@m*) (G15462@match-each (G11592@stx-expr G15626@e) G15627@p G15651@m* G15650@s* G15649@ae*)) G15645@G15642 G15644@G15641 G15643@G15640)))) '#f) (if (G10452@G10239@annotation? G15626@e) (G15462@match-each (G10454@G10243@annotation-expression G15626@e) G15627@p G15628@m* G15629@s* G15630@ae*) '#f)))))) (set! G15464@match-each+ (lambda (G15568@e G15569@x-pat G15570@y-pat G15571@z-pat G15572@m* G15573@s* G15574@ae* G15575@r) ((letrec ((G15584@f (lambda (G15586@e G15587@m* G15588@s* G15589@ae*) (if (pair? G15586@e) (call-with-values (lambda () (G15584@f (cdr G15586@e) G15587@m* G15588@s* G15589@ae*)) (lambda (G15597@G15594 G15598@G15595 G15599@G15596) ((lambda (G15603@r G15604@y-pat G15605@xr*) (if G15603@r (if (null? G15604@y-pat) ((lambda (G15609@xr) (if G15609@xr (values (cons G15609@xr G15605@xr*) G15604@y-pat G15603@r) (values '#f '#f '#f))) (G15474@match (car G15586@e) G15569@x-pat G15587@m* G15588@s* G15589@ae* '())) (values '() (cdr G15604@y-pat) (G15474@match (car G15586@e) (car G15604@y-pat) G15587@m* G15588@s* G15589@ae* G15603@r))) (values '#f '#f '#f))) G15599@G15596 G15598@G15595 G15597@G15594))) (if (G11588@stx? G15586@e) (if (G11516@top-marked? G15587@m*) (values '() G15570@y-pat (G15474@match G15586@e G15571@z-pat G15587@m* G15588@s* G15589@ae* G15575@r)) (call-with-values (lambda () (G11618@join-wraps G15587@m* G15588@s* G15589@ae* G15586@e)) (lambda (G15614@G15611 G15615@G15612 G15616@G15613) ((lambda (G15620@ae* G15621@s* G15622@m*) (G15584@f (G11592@stx-expr G15586@e) G15622@m* G15621@s* G15620@ae*)) G15616@G15613 G15615@G15612 G15614@G15611)))) (if (G10452@G10239@annotation? G15586@e) (G15584@f (G10454@G10243@annotation-expression G15586@e) G15587@m* G15588@s* G15589@ae*) (values '() G15570@y-pat (G15474@match G15586@e G15571@z-pat G15587@m* G15588@s* G15589@ae* G15575@r)))))))) G15584@f) G15568@e G15572@m* G15573@s* G15574@ae*))) (set! G15466@match-each-any (lambda (G15543@e G15544@m* G15545@s* G15546@ae*) (if (pair? G15543@e) ((lambda (G15551@l) (if G15551@l (begin '#f (cons (G15460@stx^ (car G15543@e) G15544@m* G15545@s* G15546@ae*) G15551@l)) '#f)) (G15466@match-each-any (cdr G15543@e) G15544@m* G15545@s* G15546@ae*)) (if (null? G15543@e) '() (if (G11588@stx? G15543@e) (if (not (G11516@top-marked? G15544@m*)) (begin '#f (call-with-values (lambda () (G11618@join-wraps G15544@m* G15545@s* G15546@ae* G15543@e)) (lambda (G15556@G15553 G15557@G15554 G15558@G15555) ((lambda (G15562@ae* G15563@s* G15564@m*) (G15466@match-each-any (G11592@stx-expr G15543@e) G15564@m* G15563@s* G15562@ae*)) G15558@G15555 G15557@G15554 G15556@G15553)))) '#f) (if (G10452@G10239@annotation? G15543@e) (G15466@match-each-any (G10454@G10243@annotation-expression G15543@e) G15544@m* G15545@s* G15546@ae*) '#f)))))) (set! G15468@match-empty (lambda (G15538@p G15539@r) (if (null? G15538@p) G15539@r (if (eq? G15538@p '_) G15539@r (if (eq? G15538@p 'any) (cons '() G15539@r) (if (pair? G15538@p) (G15468@match-empty (car G15538@p) (G15468@match-empty (cdr G15538@p) G15539@r)) (if (eq? G15538@p 'each-any) (cons '() G15539@r) ((lambda (G15542@t) (if (eqv? G15542@t 'each) (G15468@match-empty (vector-ref G15538@p '1) G15539@r) (if (eqv? G15542@t 'each+) (G15468@match-empty (vector-ref G15538@p '1) (G15468@match-empty (reverse (vector-ref G15538@p '2)) (G15468@match-empty (vector-ref G15538@p '3) G15539@r))) (if (memv G15542@t '(free-id atom)) G15539@r (if (memv G15542@t '(scheme-id atom)) G15539@r (if (eqv? G15542@t 'vector) (G15468@match-empty (vector-ref G15538@p '1) G15539@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G15538@p))))))) (vector-ref G15538@p '0))))))))) (set! G15470@combine (lambda (G15534@r* G15535@r) (if (null? (car G15534@r*)) G15535@r (cons (map car G15534@r*) (G15470@combine (map cdr G15534@r*) G15535@r))))) (set! G15472@match* (lambda (G15502@e G15503@p G15504@m* G15505@s* G15506@ae* G15507@r) (if (null? G15503@p) (if (null? G15502@e) (begin '#f G15507@r) '#f) (if (pair? G15503@p) (if (pair? G15502@e) (begin '#f (G15474@match (car G15502@e) (car G15503@p) G15504@m* G15505@s* G15506@ae* (G15474@match (cdr G15502@e) (cdr G15503@p) G15504@m* G15505@s* G15506@ae* G15507@r))) '#f) (if (eq? G15503@p 'each-any) ((lambda (G15514@l) (if G15514@l (begin '#f (cons G15514@l G15507@r)) '#f)) (G15466@match-each-any G15502@e G15504@m* G15505@s* G15506@ae*)) ((lambda (G15516@t) (if (eqv? G15516@t 'each) (if (null? G15502@e) (G15468@match-empty (vector-ref G15503@p '1) G15507@r) ((lambda (G15532@r*) (if G15532@r* (begin '#f (G15470@combine G15532@r* G15507@r)) '#f)) (G15462@match-each G15502@e (vector-ref G15503@p '1) G15504@m* G15505@s* G15506@ae*))) (if (eqv? G15516@t 'free-id) (if (symbol? G15502@e) (if (G11516@top-marked? G15504@m*) (if (G11652@free-id=? (G15460@stx^ G15502@e G15504@m* G15505@s* G15506@ae*) (vector-ref G15503@p '1)) (begin '#f G15507@r) '#f) '#f) '#f) (if (eqv? G15516@t 'scheme-id) (if (symbol? G15502@e) (if (G11516@top-marked? G15504@m*) (if (G11652@free-id=? (G15460@stx^ G15502@e G15504@m* G15505@s* G15506@ae*) (G12109@scheme-stx (vector-ref G15503@p '1))) (begin '#f G15507@r) '#f) '#f) '#f) (if (eqv? G15516@t 'each+) (call-with-values (lambda () (G15464@match-each+ G15502@e (vector-ref G15503@p '1) (vector-ref G15503@p '2) (vector-ref G15503@p '3) G15504@m* G15505@s* G15506@ae* G15507@r)) (lambda (G15520@G15517 G15521@G15518 G15522@G15519) ((lambda (G15526@r G15527@y-pat G15528@xr*) (if G15526@r (if (null? G15527@y-pat) (begin '#f (if (null? G15528@xr*) (G15468@match-empty (vector-ref G15503@p '1) G15526@r) (G15470@combine G15528@xr* G15526@r))) '#f) '#f)) G15522@G15519 G15521@G15518 G15520@G15517))) (if (eqv? G15516@t 'atom) (if (equal? (vector-ref G15503@p '1) (G11664@strip G15502@e G15504@m*)) (begin '#f G15507@r) '#f) (if (eqv? G15516@t 'vector) (if (vector? G15502@e) (begin '#f (G15474@match (vector->list G15502@e) (vector-ref G15503@p '1) G15504@m* G15505@s* G15506@ae* G15507@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G15503@p)))))))) (vector-ref G15503@p '0))))))) (set! G15474@match (lambda (G15475@e G15476@p G15477@m* G15478@s* G15479@ae* G15480@r) (if (not G15480@r) '#f (if (eq? G15476@p '_) G15480@r (if (eq? G15476@p 'any) (cons (G15460@stx^ G15475@e G15477@m* G15478@s* G15479@ae*) G15480@r) (if (G11588@stx? G15475@e) (if (not (G11516@top-marked? G15477@m*)) (begin '#f (call-with-values (lambda () (G11618@join-wraps G15477@m* G15478@s* G15479@ae* G15475@e)) (lambda (G15490@G15487 G15491@G15488 G15492@G15489) ((lambda (G15496@ae* G15497@s* G15498@m*) (G15474@match (G11592@stx-expr G15475@e) G15476@p G15498@m* G15497@s* G15496@ae* G15480@r)) G15492@G15489 G15491@G15488 G15490@G15487)))) '#f) (if (G10452@G10239@annotation? G15475@e) (G15474@match (G10454@G10243@annotation-expression G15475@e) G15476@p G15477@m* G15478@s* G15479@ae* G15480@r) (G15472@match* G15475@e G15476@p G15477@m* G15478@s* G15479@ae* G15480@r)))))))) (G15474@match G15455@e G15456@p '() '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12225@ellipsis? (lambda (G15663@x) (if (G11644@id? G15663@x) (begin '#f (G11652@free-id=? G15663@x (G12109@scheme-stx '...))) '#f))) (set! G12227@underscore? (lambda (G15665@x) (if (G11644@id? G15665@x) (begin '#f (G11652@free-id=? G15665@x (G12109@scheme-stx '_))) '#f))) (set! G12229@verify-literals (lambda (G15667@lits G15668@expr) (for-each (lambda (G15671@x) (if ((lambda (G15673@t) (if G15673@t G15673@t ((lambda (G15675@t) (if G15675@t G15675@t (begin '#f (G12227@underscore? G15671@x)))) (G12225@ellipsis? G15671@x)))) (not (G11644@id? G15671@x))) (G12456@syntax-violation '#f '"invalid literal" G15668@expr G15671@x) (void))) G15667@lits))) (set! G12231@syntax-case-transformer ((lambda () ((lambda (G15678@build-dispatch-call G15680@invalid-ids-error G15682@gen-clause G15684@gen-syntax-case) (begin (set! G15678@build-dispatch-call (lambda (G15789@pvars G15790@expr G15791@y G15792@r G15793@mr) ((lambda (G15799@ids G15800@levels) ((lambda (G15803@labels G15804@new-vars) ((lambda (G15807@body) (list '(primitive apply) (G11486@G11270@build-lambda '#f G15804@new-vars G15807@body) G15791@y)) (G12259@chi-expr (G11624@add-subst (G11573@make-full-rib G15799@ids G15803@labels) G15790@expr) (append (map (lambda (G15809@label G15810@var G15811@level) (cons G15809@label (G11676@make-binding 'syntax (cons G15810@var G15811@level)))) G15803@labels G15804@new-vars (map cdr G15789@pvars)) G15792@r) G15793@mr))) (map G11522@gen-label G15799@ids) (map G11518@gen-lexical G15799@ids))) (map car G15789@pvars) (map cdr G15789@pvars)))) (set! G15680@invalid-ids-error (lambda (G15777@id* G15778@e G15779@class) ((letrec ((G15783@find (lambda (G15785@id* G15786@ok*) (if (null? G15785@id*) (G12456@syntax-violation '#f '"invalid syntax" G15778@e) (if (G11644@id? (car G15785@id*)) (if (G11658@bound-id-member? (car G15785@id*) G15786@ok*) (G12450@syntax-error (car G15785@id*) '"duplicate " G15779@class) (G15783@find (cdr G15785@id*) (cons (car G15785@id*) G15786@ok*))) (G12450@syntax-error (car G15785@id*) '"invalid " G15779@class)))))) G15783@find) G15777@id* '()))) (set! G15682@gen-clause (lambda (G15739@x G15740@keys G15741@clauses G15742@r G15743@mr G15744@pat G15745@fender G15746@expr) (call-with-values (lambda () (G12221@convert-pattern G15744@pat G15740@keys)) (lambda (G15757@G15755 G15758@G15756) ((lambda (G15761@pvars G15762@p) (if (not (G11656@distinct-bound-ids? (map car G15761@pvars))) (G15680@invalid-ids-error (map car G15761@pvars) G15744@pat '"pattern variable") (if (not (for-all (lambda (G15765@x) (not (G12225@ellipsis? (car G15765@x)))) G15761@pvars)) (G12456@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G15744@pat) ((lambda (G15767@y) ((lambda (G15769@test) ((lambda (G15771@conseq) ((lambda (G15773@altern) (list (G11486@G11270@build-lambda '#f (list G15767@y) (list 'if G15769@test G15771@conseq G15773@altern)) (list '(primitive syntax-dispatch) G15739@x (list 'quote G15762@p)))) (G15684@gen-syntax-case G15739@x G15740@keys G15741@clauses G15742@r G15743@mr))) (G15678@build-dispatch-call G15761@pvars G15746@expr G15767@y G15742@r G15743@mr))) (if (eq? G15745@fender '#t) G15767@y ((lambda (G15775@call) (list 'if G15767@y G15775@call (list 'quote '#f))) (G15678@build-dispatch-call G15761@pvars G15745@fender G15767@y G15742@r G15743@mr))))) (G11518@gen-lexical 'tmp))))) G15758@G15756 G15757@G15755))))) (set! G15684@gen-syntax-case (lambda (G15705@x G15706@keys G15707@clauses G15708@r G15709@mr) (if (null? G15707@clauses) (list '(primitive syntax-error) G15705@x) ((lambda (G15715@t) ((lambda (G15717@ls/false) (if G15717@ls/false (apply (lambda (G15719@pat G15720@expr) (if (if (G11644@id? G15719@pat) (if (not (G11658@bound-id-member? G15719@pat G15706@keys)) (begin '#f (not (G12225@ellipsis? G15719@pat))) '#f) '#f) (if (G11652@free-id=? G15719@pat (G12109@scheme-stx '_)) (G12259@chi-expr G15720@expr G15708@r G15709@mr) ((lambda (G15723@lab G15724@lex) ((lambda (G15727@body) (list (G11486@G11270@build-lambda '#f (list G15724@lex) G15727@body) G15705@x)) (G12259@chi-expr (G11624@add-subst (G11573@make-full-rib (list G15719@pat) (list G15723@lab)) G15720@expr) (cons (cons G15723@lab (G11676@make-binding 'syntax (cons G15724@lex '0))) G15708@r) G15709@mr))) (G11522@gen-label G15719@pat) (G11518@gen-lexical G15719@pat))) (G15682@gen-clause G15705@x G15706@keys (cdr G15707@clauses) G15708@r G15709@mr G15719@pat '#t G15720@expr))) G15717@ls/false) ((lambda (G15729@t) ((lambda (G15731@ls/false) (if G15731@ls/false (apply (lambda (G15733@pat G15734@fender G15735@expr) (G15682@gen-clause G15705@x G15706@keys (cdr G15707@clauses) G15708@r G15709@mr G15733@pat G15734@fender G15735@expr)) G15731@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G15729@t))) (G12223@syntax-dispatch G15729@t '(any any any)))) G15715@t))) (G12223@syntax-dispatch G15715@t '(any any)))) (car G15707@clauses))))) (lambda (G15685@e G15686@r G15687@mr) ((lambda (G15691@t) ((lambda (G15693@ls/false) (if G15693@ls/false (apply (lambda (G15695@expr G15696@keys G15697@clauses) (begin (G12229@verify-literals G15696@keys G15685@e) ((lambda (G15701@x) ((lambda (G15703@body) (list (G11486@G11270@build-lambda '#f (list G15701@x) G15703@body) (G12259@chi-expr G15695@expr G15686@r G15687@mr))) (G15684@gen-syntax-case G15701@x G15696@keys G15697@clauses G15686@r G15687@mr))) (G11518@gen-lexical 'tmp)))) G15693@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G15691@t))) (G12223@syntax-dispatch G15691@t '(_ any each-any . each-any)))) G15685@e)))) '#f '#f '#f '#f)))) (set! G12233@ellipsis-map (lambda (G15815@proc G15816@ls . G15819@ls*) ((lambda (G15822@who) (begin (set! G15822@who '...) (begin (if (list? G15816@ls) (void) (assertion-violation G15822@who '"not a list" G15816@ls)) (if (null? G15819@ls*) (void) ((lambda (G15823@n) (for-each (lambda (G15825@x) (begin (if (list? G15825@x) (void) (assertion-violation G15822@who '"not a list" G15825@x)) (if (= (length G15825@x) G15823@n) (void) (assertion-violation G15822@who '"length mismatch" G15816@ls G15825@x)))) G15819@ls*)) (length G15816@ls))) (apply map G15815@proc G15816@ls G15819@ls*)))) '#f))) (set! G12235@syntax-transformer ((lambda () ((lambda (G15828@gen-syntax G15830@gen-ref G15832@gen-append G15834@gen-mappend G15836@gen-map G15838@gen-cons G15840@gen-vector G15842@regen) (begin (set! G15828@gen-syntax (lambda (G15941@src G15942@e G15943@r G15944@maps G15945@ellipsis? G15946@vec?) ((lambda (G15953@t) ((lambda (G15955@ls/false) (if (if G15955@ls/false (begin '#f (apply (lambda (G15957@dots) (G15945@ellipsis? G15957@dots)) G15955@ls/false)) '#f) (apply (lambda (G15959@dots) (G12456@syntax-violation '#f '"misplaced ellipsis in syntax form" G15941@src)) G15955@ls/false) ((lambda (G15961@t) ((lambda (G15963@ls/false) (if (if G15963@ls/false (begin '#f (apply (lambda (G15965@id) (G11644@id? G15965@id)) G15963@ls/false)) '#f) (apply (lambda (G15967@id) ((lambda (G15969@label) ((lambda (G15971@b) ((lambda () (if (eq? (G11678@binding-type G15971@b) 'syntax) (call-with-values (lambda () ((lambda (G15975@var.lev) (G15830@gen-ref G15941@src (car G15975@var.lev) (cdr G15975@var.lev) G15944@maps)) (G11680@binding-value G15971@b))) (lambda (G15977@G15973 G15978@G15974) ((lambda (G15981@maps G15982@var) (values (list 'ref G15982@var) G15981@maps)) G15978@G15974 G15977@G15973))) (values (list 'quote G15942@e) G15944@maps))))) (G11674@label->binding G15969@label G15943@r))) (G11670@id->label G15942@e))) G15963@ls/false) ((lambda (G15985@t) ((lambda (G15987@ls/false) (if (if G15987@ls/false (begin '#f (apply (lambda (G15989@dots G15990@e) (G15945@ellipsis? G15989@dots)) G15987@ls/false)) '#f) (apply (lambda (G15993@dots G15994@e) (if G15946@vec? (G12456@syntax-violation '#f '"misplaced ellipsis in syntax form" G15941@src) (G15828@gen-syntax G15941@src G15994@e G15943@r G15944@maps (lambda (G15997@x) '#f) '#f))) G15987@ls/false) ((lambda (G15999@t) ((lambda (G16001@ls/false) (if (if G16001@ls/false (begin '#f (apply (lambda (G16003@x G16004@dots G16005@y) (G15945@ellipsis? G16004@dots)) G16001@ls/false)) '#f) (apply (lambda (G16009@x G16010@dots G16011@y) ((letrec ((G16015@f (lambda (G16017@y G16018@k) ((lambda (G16021@t) ((lambda (G16023@ls/false) (if G16023@ls/false (apply (lambda () (G16018@k G15944@maps)) G16023@ls/false) ((lambda (G16025@t) ((lambda (G16027@ls/false) (if (if G16027@ls/false (begin '#f (apply (lambda (G16029@dots G16030@y) (G15945@ellipsis? G16029@dots)) G16027@ls/false)) '#f) (apply (lambda (G16033@dots G16034@y) (G16015@f G16034@y (lambda (G16037@maps) (call-with-values (lambda () (G16018@k (cons '() G16037@maps))) (lambda (G16041@G16039 G16042@G16040) ((lambda (G16045@maps G16046@x) (if (null? (car G16045@maps)) (G12456@syntax-violation '#f '"extra ellipsis in syntax form" G15941@src) (values (G15834@gen-mappend G16046@x (car G16045@maps)) (cdr G16045@maps)))) G16042@G16040 G16041@G16039)))))) G16027@ls/false) ((lambda (G16049@t) ((lambda (G16051@ls/false) (if G16051@ls/false (apply (lambda () (call-with-values (lambda () (G15828@gen-syntax G15941@src G16017@y G15943@r G15944@maps G15945@ellipsis? G15946@vec?)) (lambda (G16055@G16053 G16056@G16054) ((lambda (G16059@maps G16060@y) (call-with-values (lambda () (G16018@k G16059@maps)) (lambda (G16065@G16063 G16066@G16064) ((lambda (G16069@maps G16070@x) (values (G15832@gen-append G16070@x G16060@y) G16069@maps)) G16066@G16064 G16065@G16063)))) G16056@G16054 G16055@G16053)))) G16051@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16049@t))) (G12223@syntax-dispatch G16049@t '_))) G16025@t))) (G12223@syntax-dispatch G16025@t '(any . any)))) G16021@t))) (G12223@syntax-dispatch G16021@t '()))) G16017@y)))) G16015@f) G16011@y (lambda (G16073@maps) (call-with-values (lambda () (G15828@gen-syntax G15941@src G16009@x G15943@r (cons '() G16073@maps) G15945@ellipsis? '#f)) (lambda (G16077@G16075 G16078@G16076) ((lambda (G16081@maps G16082@x) (if (null? (car G16081@maps)) (G12456@syntax-violation '#f '"extra ellipsis in syntax form" G15941@src) (values (G15836@gen-map G16082@x (car G16081@maps)) (cdr G16081@maps)))) G16078@G16076 G16077@G16075)))))) G16001@ls/false) ((lambda (G16085@t) ((lambda (G16087@ls/false) (if G16087@ls/false (apply (lambda (G16089@x G16090@y) (call-with-values (lambda () (G15828@gen-syntax G15941@src G16089@x G15943@r G15944@maps G15945@ellipsis? '#f)) (lambda (G16095@G16093 G16096@G16094) ((lambda (G16099@maps G16100@xnew) (call-with-values (lambda () (G15828@gen-syntax G15941@src G16090@y G15943@r G16099@maps G15945@ellipsis? G15946@vec?)) (lambda (G16105@G16103 G16106@G16104) ((lambda (G16109@maps G16110@ynew) (values (G15838@gen-cons G15942@e G16089@x G16090@y G16100@xnew G16110@ynew) G16109@maps)) G16106@G16104 G16105@G16103)))) G16096@G16094 G16095@G16093)))) G16087@ls/false) ((lambda (G16113@t) ((lambda (G16115@ls/false) (if G16115@ls/false (apply (lambda (G16117@ls) (call-with-values (lambda () (G15828@gen-syntax G15941@src G16117@ls G15943@r G15944@maps G15945@ellipsis? '#t)) (lambda (G16121@G16119 G16122@G16120) ((lambda (G16125@maps G16126@lsnew) (values (G15840@gen-vector G15942@e G16117@ls G16126@lsnew) G16125@maps)) G16122@G16120 G16121@G16119)))) G16115@ls/false) ((lambda (G16129@t) ((lambda (G16131@ls/false) (if G16131@ls/false (apply (lambda () (values (list 'quote G15942@e) G15944@maps)) G16131@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16129@t))) (G12223@syntax-dispatch G16129@t '_))) G16113@t))) (G12223@syntax-dispatch G16113@t '#(vector each-any)))) G16085@t))) (G12223@syntax-dispatch G16085@t '(any . any)))) G15999@t))) (G12223@syntax-dispatch G15999@t '(any any . any)))) G15985@t))) (G12223@syntax-dispatch G15985@t '(any any)))) G15961@t))) (G12223@syntax-dispatch G15961@t 'any))) G15953@t))) (G12223@syntax-dispatch G15953@t 'any))) G15942@e))) (set! G15830@gen-ref (lambda (G15917@src G15918@var G15919@level G15920@maps) (if (= G15919@level '0) (values G15918@var G15920@maps) (if (null? G15920@maps) (G12456@syntax-violation '#f '"missing ellipsis in syntax form" G15917@src) (call-with-values (lambda () (G15830@gen-ref G15917@src G15918@var (- G15919@level '1) (cdr G15920@maps))) (lambda (G15927@G15925 G15928@G15926) ((lambda (G15931@outer-maps G15932@outer-var) ((lambda (G15935@t) (if G15935@t ((lambda (G15937@b) (values (cdr G15937@b) G15920@maps)) G15935@t) ((lambda (G15939@inner-var) (values G15939@inner-var (cons (cons (cons G15932@outer-var G15939@inner-var) (car G15920@maps)) G15931@outer-maps))) (G11518@gen-lexical 'tmp)))) (assq G15932@outer-var (car G15920@maps)))) G15928@G15926 G15927@G15925))))))) (set! G15832@gen-append (lambda (G15913@x G15914@y) (if (equal? G15914@y ''()) G15913@x (list 'append G15913@x G15914@y)))) (set! G15834@gen-mappend (lambda (G15909@e G15910@map-env) (list 'apply '(primitive append) (G15836@gen-map G15909@e G15910@map-env)))) (set! G15836@gen-map (lambda (G15891@e G15892@map-env) ((lambda (G15895@formals G15896@actuals) (if (eq? (car G15891@e) 'ref) (car G15896@actuals) (if (for-all (lambda (G15899@x) (if (eq? (car G15899@x) 'ref) (begin '#f (memq (cadr G15899@x) G15895@formals)) '#f)) (cdr G15891@e)) ((lambda (G15901@args) (cons 'map (cons (list 'primitive (car G15891@e)) G15901@args))) (map ((lambda (G15903@r) (lambda (G15905@x) (cdr (assq (cadr G15905@x) G15903@r)))) (map cons G15895@formals G15896@actuals)) (cdr G15891@e))) (cons* 'map (list 'lambda G15895@formals G15891@e) G15896@actuals)))) (map cdr G15892@map-env) (map (lambda (G15907@x) (list 'ref (car G15907@x))) G15892@map-env)))) (set! G15838@gen-cons (lambda (G15876@e G15877@x G15878@y G15879@xnew G15880@ynew) ((lambda (G15886@t) (if (eqv? G15886@t 'quote) (if (eq? (car G15879@xnew) 'quote) ((lambda (G15887@xnew G15888@ynew) (if (if (eq? G15887@xnew G15877@x) (begin '#f (eq? G15888@ynew G15878@y)) '#f) (list 'quote G15876@e) (list 'quote (cons G15887@xnew G15888@ynew)))) (cadr G15879@xnew) (cadr G15880@ynew)) (if (null? (cadr G15880@ynew)) (list 'list G15879@xnew) (list 'cons G15879@xnew G15880@ynew))) (if (eqv? G15886@t 'list) (cons 'list (cons G15879@xnew (cdr G15880@ynew))) (list 'cons G15879@xnew G15880@ynew)))) (car G15880@ynew)))) (set! G15840@gen-vector (lambda (G15870@e G15871@ls G15872@lsnew) (if (eq? (car G15872@lsnew) 'quote) (if (eq? (cadr G15872@lsnew) G15871@ls) (list 'quote G15870@e) (list 'quote (list->vector (cadr G15872@lsnew)))) (if (eq? (car G15872@lsnew) 'list) (cons 'vector (cdr G15872@lsnew)) (list 'list->vector G15872@lsnew))))) (set! G15842@regen (lambda (G15865@x) ((lambda (G15867@t) (if (eqv? G15867@t 'ref) (cadr G15865@x) (if (eqv? G15867@t 'primitive) (list 'primitive (cadr G15865@x)) (if (eqv? G15867@t 'quote) (list 'quote (cadr G15865@x)) (if (eqv? G15867@t 'lambda) (G11486@G11270@build-lambda '#f (cadr G15865@x) (G15842@regen (caddr G15865@x))) (if (eqv? G15867@t 'map) ((lambda (G15868@ls) (cons '(primitive ellipsis-map) G15868@ls)) (map G15842@regen (cdr G15865@x))) (cons (list 'primitive (car G15865@x)) (map G15842@regen (cdr G15865@x))))))))) (car G15865@x)))) (lambda (G15843@e G15844@r G15845@mr) ((lambda (G15849@t) ((lambda (G15851@ls/false) (if G15851@ls/false (apply (lambda (G15853@x) (call-with-values (lambda () (G15828@gen-syntax G15843@e G15853@x G15844@r '() G12225@ellipsis? '#f)) (lambda (G15857@G15855 G15858@G15856) ((lambda (G15861@maps G15862@e) (G15842@regen G15862@e)) G15858@G15856 G15857@G15855)))) G15851@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G15849@t))) (G12223@syntax-dispatch G15849@t '(_ any)))) G15843@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G12237@core-macro-transformer (lambda (G16133@name) ((lambda (G16135@t) (if (eqv? G16135@t 'quote) G12143@quote-transformer (if (eqv? G16135@t 'lambda) G12147@lambda-transformer (if (eqv? G16135@t 'case-lambda) G12145@case-lambda-transformer (if (eqv? G16135@t 'letrec) G12123@letrec-transformer (if (eqv? G16135@t 'letrec*) G12125@letrec*-transformer (if (eqv? G16135@t 'case) G12141@case-transformer (if (eqv? G16135@t 'if) G12139@if-transformer (if (eqv? G16135@t 'when) G12135@when-transformer (if (eqv? G16135@t 'unless) G12137@unless-transformer (if (eqv? G16135@t 'parameterize) G12217@parameterize-transformer (if (eqv? G16135@t 'foreign-call) G12219@foreign-call-transformer (if (eqv? G16135@t 'syntax-case) G12231@syntax-case-transformer (if (eqv? G16135@t 'syntax) G12235@syntax-transformer (if (eqv? G16135@t 'type-descriptor) G12129@type-descriptor-transformer (if (eqv? G16135@t 'record-type-descriptor) G12131@record-type-descriptor-transformer (if (eqv? G16135@t 'record-constructor-descriptor) G12133@record-constructor-descriptor-transformer (if (eqv? G16135@t 'fluid-let-syntax) G12127@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G16133@name))))))))))))))))))) G16133@name))) (set! G12239@file-options-macro (lambda (G16136@x) ((lambda (G16138@t) ((lambda (G16140@ls/false) (if (if G16140@ls/false (begin '#f (apply (lambda (G16142@opt*) (if (for-all G11644@id? G16142@opt*) (begin '#f (G10461@G10409@file-options-spec (map G11646@id->sym G16142@opt*))) '#f)) G16140@ls/false)) '#f) (apply (lambda (G16144@opt*) (G12149@bless (list 'quote (G10461@G10409@file-options-spec (map G11646@id->sym G16144@opt*))))) G16140@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16138@t))) (G12223@syntax-dispatch G16138@t '(_ . each-any)))) G16136@x))) (set! G12241@symbol-macro (lambda (G16146@x G16147@set) ((lambda (G16150@t) ((lambda (G16152@ls/false) (if (if G16152@ls/false (begin '#f (apply (lambda (G16154@name) (if (G11644@id? G16154@name) (begin '#f (memq (G11646@id->sym G16154@name) G16147@set)) '#f)) G16152@ls/false)) '#f) (apply (lambda (G16156@name) (G12149@bless (list 'quote G16156@name))) G16152@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16150@t))) (G12223@syntax-dispatch G16150@t '(_ any)))) G16146@x))) (set! G12243@macro-transformer (lambda (G16158@x) (if (procedure? G16158@x) G16158@x (if (symbol? G16158@x) ((lambda (G16160@t) (if (eqv? G16160@t 'define-record-type) G12211@define-record-type-macro (if (eqv? G16160@t 'define-struct) G12209@define-struct-macro (if (eqv? G16160@t 'include) G12199@include-macro (if (eqv? G16160@t 'cond) G12195@cond-macro (if (eqv? G16160@t 'let) G12155@let-macro (if (eqv? G16160@t 'do) G12187@do-macro (if (eqv? G16160@t 'or) G12191@or-macro (if (eqv? G16160@t 'and) G12193@and-macro (if (eqv? G16160@t 'let*) G12189@let*-macro (if (eqv? G16160@t 'let-values) G12157@let-values-macro (if (eqv? G16160@t 'let*-values) G12159@let*-values-macro (if (eqv? G16160@t 'syntax-rules) G12203@syntax-rules-macro (if (eqv? G16160@t 'quasiquote) G12205@quasiquote-macro (if (eqv? G16160@t 'quasisyntax) G12207@quasisyntax-macro (if (eqv? G16160@t 'with-syntax) G12151@with-syntax-macro (if (eqv? G16160@t 'identifier-syntax) G12185@identifier-syntax-macro (if (eqv? G16160@t 'time) G12177@time-macro (if (eqv? G16160@t 'delay) G12179@delay-macro (if (eqv? G16160@t 'assert) G12181@assert-macro (if (eqv? G16160@t 'endianness) G12183@endianness-macro (if (eqv? G16160@t 'guard) G12173@guard-macro (if (eqv? G16160@t 'define-enumeration) G12175@define-enumeration-macro (if (eqv? G16160@t 'trace-lambda) G12161@trace-lambda-macro (if (eqv? G16160@t 'trace-define) G12163@trace-define-macro (if (eqv? G16160@t 'trace-define-syntax) G12165@trace-define-syntax-macro (if (eqv? G16160@t 'trace-let-syntax) G12169@trace-let-syntax-macro (if (eqv? G16160@t 'trace-letrec-syntax) G12171@trace-letrec-syntax-macro (if (eqv? G16160@t 'define-condition-type) G12213@define-condition-type-macro (if (eqv? G16160@t 'include-into) G12201@include-into-macro (if (eqv? G16160@t 'eol-style) (lambda (G16165@x) (G12241@symbol-macro G16165@x '(none lf cr crlf nel crnel ls))) (if (eqv? G16160@t 'error-handling-mode) (lambda (G16163@x) (G12241@symbol-macro G16163@x '(ignore raise replace))) (if (eqv? G16160@t 'buffer-mode) (lambda (G16161@x) (G12241@symbol-macro G16161@x '(none line block))) (if (eqv? G16160@t 'file-options) G12239@file-options-macro (if (memv G16160@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G12215@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G16158@x)))))))))))))))))))))))))))))))))))) G16158@x) (error 'core-macro-transformer '"BUG: invalid macro" G16158@x))))) (set! G12245@local-macro-transformer (lambda (G16167@x) (car G16167@x))) (set! G12247@do-macro-call (lambda (G16169@transformer G16170@expr) ((lambda (G16173@out) (begin ((letrec ((G16175@f (lambda (G16177@x) (if (G11588@stx? G16177@x) (void) (if (pair? G16177@x) (begin (G16175@f (car G16177@x)) (G16175@f (cdr G16177@x))) (if (vector? G16177@x) (vector-for-each G16175@f G16177@x) (if (symbol? G16177@x) (G12456@syntax-violation '#f '"raw symbol encountered in output of macro" G16170@expr G16177@x) (void)))))))) G16175@f) G16173@out) (G11622@add-mark (G11612@gen-mark) G16173@out G16170@expr))) (G16169@transformer (G11622@add-mark G11614@anti-mark G16170@expr '#f))))) (set! G12249@chi-macro (lambda (G16179@p G16180@e) (G12247@do-macro-call (G12243@macro-transformer G16179@p) G16180@e))) (set! G12251@chi-local-macro (lambda (G16183@p G16184@e) (G12247@do-macro-call (G12245@local-macro-transformer G16183@p) G16184@e))) (set! G12253@chi-global-macro (lambda (G16187@p G16188@e) ((lambda (G16191@lib G16192@loc) (begin (G11132@G10773@visit-library G16191@lib) ((lambda (G16195@x) ((lambda (G16197@transformer) (G12247@do-macro-call G16197@transformer G16188@e)) (if (procedure? G16195@x) G16195@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G16195@x)))) (symbol-value G16192@loc)))) (car G16187@p) (cdr G16187@p)))) (set! G12255@chi-expr* (lambda (G16199@e* G16200@r G16201@mr) (if (null? G16199@e*) '() ((lambda (G16205@e) (cons G16205@e (G12255@chi-expr* (cdr G16199@e*) G16200@r G16201@mr))) (G12259@chi-expr (car G16199@e*) G16200@r G16201@mr))))) (set! G12257@chi-application (lambda (G16207@e G16208@r G16209@mr) ((lambda (G16213@t) ((lambda (G16215@ls/false) (if G16215@ls/false (apply (lambda (G16217@rator G16218@rands) ((lambda (G16221@rator) (cons G16221@rator (G12255@chi-expr* G16218@rands G16208@r G16209@mr))) (G12259@chi-expr G16217@rator G16208@r G16209@mr))) G16215@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16213@t))) (G12223@syntax-dispatch G16213@t '(any . each-any)))) G16207@e))) (set! G12259@chi-expr (lambda (G16223@e G16224@r G16225@mr) (call-with-values (lambda () (G11684@syntax-type G16223@e G16224@r)) (lambda (G16232@G16229 G16233@G16230 G16234@G16231) ((lambda (G16238@kwd G16239@value G16240@type) ((lambda (G16244@t) (if (eqv? G16244@t 'core-macro) ((lambda (G16294@transformer) (G16294@transformer G16223@e G16224@r G16225@mr)) (G12237@core-macro-transformer G16239@value)) (if (eqv? G16244@t 'global) ((lambda (G16290@lib) ((lambda (G16292@loc) ((lambda () (begin ((G12334@inv-collector) G16290@lib) G16292@loc)))) (cdr G16239@value))) (car G16239@value)) (if (eqv? G16244@t 'core-prim) ((lambda (G16288@name) (list 'primitive G16288@name)) G16239@value) (if (eqv? G16244@t 'call) (G12257@chi-application G16223@e G16224@r G16225@mr) (if (eqv? G16244@t 'lexical) ((lambda (G16286@lex) G16286@lex) (G12111@lexical-var G16239@value)) (if (memv G16244@t '(global-macro global-macro!)) (G12259@chi-expr (G12253@chi-global-macro G16239@value G16223@e) G16224@r G16225@mr) (if (memv G16244@t '(local-macro local-macro!)) (G12259@chi-expr (G12251@chi-local-macro G16239@value G16223@e) G16224@r G16225@mr) (if (memv G16244@t '(macro macro!)) (G12259@chi-expr (G12249@chi-macro G16239@value G16223@e) G16224@r G16225@mr) (if (eqv? G16244@t 'constant) ((lambda (G16284@datum) (list 'quote G16284@datum)) G16239@value) (if (eqv? G16244@t 'set!) (G12261@chi-set! G16223@e G16224@r G16225@mr) (if (eqv? G16244@t 'begin) ((lambda (G16276@t) ((lambda (G16278@ls/false) (if G16278@ls/false (apply (lambda (G16280@x G16281@x*) (G11489@G11346@build-sequence '#f (G12255@chi-expr* (cons G16280@x G16281@x*) G16224@r G16225@mr))) G16278@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16276@t))) (G12223@syntax-dispatch G16276@t '(_ any . each-any)))) G16223@e) (if (memv G16244@t '(let-syntax letrec-syntax)) ((lambda (G16246@t) ((lambda (G16248@ls/false) (if (if G16248@ls/false (begin '#f (apply (lambda (G16250@xlhs* G16251@xrhs* G16252@xbody G16253@xbody*) (if (G11654@valid-bound-ids? G16250@xlhs*) (void) (G12456@syntax-violation '#f '"invalid identifiers" G16223@e))) G16248@ls/false)) '#f) (apply (lambda (G16258@xlhs* G16259@xrhs* G16260@xbody G16261@xbody*) ((lambda (G16266@xlab*) ((lambda (G16268@xrib) ((lambda (G16270@xb*) ((lambda () (G11489@G11346@build-sequence '#f (G12255@chi-expr* (map (lambda (G16272@x) (G11624@add-subst G16268@xrib G16272@x)) (cons G16260@xbody G16261@xbody*)) (append (map cons G16266@xlab* G16270@xb*) G16224@r) (append (map cons G16266@xlab* G16270@xb*) G16225@mr)))))) (map (lambda (G16274@x) (G11715@make-eval-transformer (G12320@expand-transformer (if (eq? G16240@type 'let-syntax) G16274@x (G11624@add-subst G16268@xrib G16274@x)) G16225@mr))) G16259@xrhs*))) (G11573@make-full-rib G16258@xlhs* G16266@xlab*))) (map G11522@gen-label G16258@xlhs*))) G16248@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16246@t))) (G12223@syntax-dispatch G16246@t '(_ #(each (any any)) any . each-any)))) G16223@e) (if (eqv? G16244@t 'displaced-lexical) (G12456@syntax-violation '#f '"identifier out of context" G16223@e) (if (eqv? G16244@t 'syntax) (G12456@syntax-violation '#f '"reference to pattern variable outside a syntax form" G16223@e) (if (memv G16244@t '(define define-syntax module import library)) (G12456@syntax-violation '#f (string-append ((lambda (G16245@t) (if (eqv? G16245@t 'define) '"a definition" (if (eqv? G16245@t 'define-syntax) '"a define-syntax" (if (eqv? G16245@t 'module) '"a module definition" (if (eqv? G16245@t 'library) '"a library definition" (if (eqv? G16245@t 'import) '"an import declaration" '"a non-expression")))))) G16240@type) '" was found where an expression was expected") G16223@e) (if (eqv? G16244@t 'mutable) (G12456@syntax-violation '#f '"attempt to reference an unexportable variable" G16223@e) (G12456@syntax-violation '#f '"invalid expression" G16223@e)))))))))))))))))) G16240@type)) G16234@G16231 G16233@G16230 G16232@G16229))))) (set! G12261@chi-set! (lambda (G16296@e G16297@r G16298@mr) ((lambda (G16302@t) ((lambda (G16304@ls/false) (if (if G16304@ls/false (begin '#f (apply (lambda (G16306@x G16307@v) (G11644@id? G16306@x)) G16304@ls/false)) '#f) (apply (lambda (G16310@x G16311@v) (call-with-values (lambda () (G11684@syntax-type G16310@x G16297@r)) (lambda (G16317@G16314 G16318@G16315 G16319@G16316) ((lambda (G16323@kwd G16324@value G16325@type) ((lambda (G16329@t) (if (eqv? G16329@t 'lexical) (begin (G12115@set-lexical-mutable! G16324@value '#t) (list 'set! (G12111@lexical-var G16324@value) (G12259@chi-expr G16311@v G16297@r G16298@mr))) (if (eqv? G16329@t 'core-prim) (G12456@syntax-violation '#f '"cannot modify imported core primitive" G16296@e) (if (eqv? G16329@t 'global) (G12456@syntax-violation '#f '"attempt to modify imported binding" G16296@e) (if (eqv? G16329@t 'global-macro!) (G12259@chi-expr (G12253@chi-global-macro G16324@value G16296@e) G16297@r G16298@mr) (if (eqv? G16329@t 'local-macro!) (G12259@chi-expr (G12251@chi-local-macro G16324@value G16296@e) G16297@r G16298@mr) (if (eqv? G16329@t 'mutable) (G12456@syntax-violation '#f '"attempt to assign to an unexportable variable" G16296@e) (G12456@syntax-violation '#f '"invalid syntax" G16296@e)))))))) G16325@type)) G16319@G16316 G16318@G16315 G16317@G16314)))) G16304@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16302@t))) (G12223@syntax-dispatch G16302@t '(_ any any)))) G16296@e))) (set! G12263@verify-formals (lambda (G16330@fmls G16331@stx) ((lambda (G16334@t) ((lambda (G16336@ls/false) (if G16336@ls/false (apply (lambda (G16338@x*) (if (G11654@valid-bound-ids? G16338@x*) (void) (G12153@invalid-fmls-error G16331@stx G16330@fmls))) G16336@ls/false) ((lambda (G16340@t) ((lambda (G16342@ls/false) (if G16342@ls/false (apply (lambda (G16344@x* G16345@x) (if (G11654@valid-bound-ids? (cons G16345@x G16344@x*)) (void) (G12153@invalid-fmls-error G16331@stx G16330@fmls))) G16342@ls/false) ((lambda (G16348@t) ((lambda (G16350@ls/false) (if G16350@ls/false (apply (lambda () (G12456@syntax-violation '#f '"invalid syntax" G16331@stx)) G16350@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16348@t))) (G12223@syntax-dispatch G16348@t '_))) G16340@t))) (G12223@syntax-dispatch G16340@t '#(each+ any () any)))) G16334@t))) (G12223@syntax-dispatch G16334@t 'each-any))) G16330@fmls))) (set! G12265@chi-lambda-clause (lambda (G16352@stx G16353@fmls G16354@body* G16355@r G16356@mr) ((lambda (G16362@t) ((lambda (G16364@ls/false) (if G16364@ls/false (apply (lambda (G16366@x*) (begin (G12263@verify-formals G16353@fmls G16352@stx) ((lambda (G16368@lex* G16369@lab*) (values G16368@lex* (G12281@chi-internal (G11624@add-subst (G11573@make-full-rib G16366@x* G16369@lab*) G16354@body*) (G12119@add-lexicals G16369@lab* G16368@lex* G16355@r) G16356@mr))) (map G11518@gen-lexical G16366@x*) (map G11522@gen-label G16366@x*)))) G16364@ls/false) ((lambda (G16372@t) ((lambda (G16374@ls/false) (if G16374@ls/false (apply (lambda (G16376@x* G16377@x) (begin (G12263@verify-formals G16353@fmls G16352@stx) ((lambda (G16380@lex* G16381@lab* G16382@lex G16383@lab) (values (append G16380@lex* G16382@lex) (G12281@chi-internal (G11624@add-subst (G11573@make-full-rib (cons G16377@x G16376@x*) (cons G16383@lab G16381@lab*)) G16354@body*) (G12119@add-lexicals (cons G16383@lab G16381@lab*) (cons G16382@lex G16380@lex*) G16355@r) G16356@mr))) (map G11518@gen-lexical G16376@x*) (map G11522@gen-label G16376@x*) (G11518@gen-lexical G16377@x) (G11522@gen-label G16377@x)))) G16374@ls/false) ((lambda (G16388@t) ((lambda (G16390@ls/false) (if G16390@ls/false (apply (lambda () (G12456@syntax-violation '#f '"invalid syntax" G16353@fmls)) G16390@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16388@t))) (G12223@syntax-dispatch G16388@t '_))) G16372@t))) (G12223@syntax-dispatch G16372@t '#(each+ any () any)))) G16362@t))) (G12223@syntax-dispatch G16362@t 'each-any))) G16353@fmls))) (set! G12267@chi-lambda-clause* (lambda (G16392@stx G16393@fmls* G16394@body** G16395@r G16396@mr) (if (null? G16393@fmls*) (values '() '()) (call-with-values (lambda () (G12265@chi-lambda-clause G16392@stx (car G16393@fmls*) (car G16394@body**) G16395@r G16396@mr)) (lambda (G16404@G16402 G16405@G16403) ((lambda (G16408@b G16409@a) (call-with-values (lambda () (G12267@chi-lambda-clause* G16392@stx (cdr G16393@fmls*) (cdr G16394@body**) G16395@r G16396@mr)) (lambda (G16414@G16412 G16415@G16413) ((lambda (G16418@b* G16419@a*) (values (cons G16409@a G16419@a*) (cons G16408@b G16418@b*))) G16415@G16413 G16414@G16412)))) G16405@G16403 G16404@G16402)))))) (set! G12269@chi-defun (lambda (G16422@x G16423@r G16424@mr) ((lambda (G16428@fmls G16429@body*) (call-with-values (lambda () (G12265@chi-lambda-clause G16428@fmls G16428@fmls G16429@body* G16423@r G16424@mr)) (lambda (G16434@G16432 G16435@G16433) ((lambda (G16438@body G16439@fmls) (G11486@G11270@build-lambda '#f G16439@fmls G16438@body)) G16435@G16433 G16434@G16432)))) (car G16422@x) (cdr G16422@x)))) (set! G12271@chi-rhs (lambda (G16442@rhs G16443@r G16444@mr) ((lambda (G16448@t) (if (eqv? G16448@t 'defun) (G12269@chi-defun (cdr G16442@rhs) G16443@r G16444@mr) (if (eqv? G16448@t 'expr) ((lambda (G16451@expr) (G12259@chi-expr G16451@expr G16443@r G16444@mr)) (cdr G16442@rhs)) (if (eqv? G16448@t 'top-expr) ((lambda (G16449@expr) (G11489@G11346@build-sequence '#f (list (G12259@chi-expr G16449@expr G16443@r G16444@mr) (G11490@G11348@build-void)))) (cdr G16442@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G16442@rhs))))) (car G16442@rhs)))) (set! G12273@expand-interaction-rhs*/init* (lambda (G16453@lhs* G16454@rhs* G16455@init* G16456@r G16457@mr) ((letrec ((G16463@f (lambda (G16465@lhs* G16466@rhs*) (if (null? G16465@lhs*) (map (lambda (G16469@x) (G12259@chi-expr G16469@x G16456@r G16457@mr)) G16455@init*) ((lambda (G16471@lhs G16472@rhs) ((lambda (G16475@t) (if (eqv? G16475@t 'defun) ((lambda (G16480@rhs) (cons (list 'set! G16471@lhs G16480@rhs) (G16463@f (cdr G16465@lhs*) (cdr G16466@rhs*)))) (G12269@chi-defun (cdr G16472@rhs) G16456@r G16457@mr)) (if (eqv? G16475@t 'expr) ((lambda (G16478@rhs) (cons (list 'set! G16471@lhs G16478@rhs) (G16463@f (cdr G16465@lhs*) (cdr G16466@rhs*)))) (G12259@chi-expr (cdr G16472@rhs) G16456@r G16457@mr)) (if (eqv? G16475@t 'top-expr) ((lambda (G16476@e) (cons G16476@e (G16463@f (cdr G16465@lhs*) (cdr G16466@rhs*)))) (G12259@chi-expr (cdr G16472@rhs) G16456@r G16457@mr)) (error 'expand-interaction '"invallid" G16472@rhs))))) (car G16472@rhs))) (car G16465@lhs*) (car G16466@rhs*)))))) G16463@f) G16453@lhs* G16454@rhs*))) (set! G12275@chi-rhs* (lambda (G16482@rhs* G16483@r G16484@mr) ((letrec ((G16488@f (lambda (G16490@ls) (if (null? G16490@ls) '() ((lambda (G16492@a) (cons G16492@a (G16488@f (cdr G16490@ls)))) (G12271@chi-rhs (car G16490@ls) G16483@r G16484@mr)))))) G16488@f) G16482@rhs*))) (set! G12277@find-bound=? (lambda (G16494@x G16495@lhs* G16496@rhs*) (if (null? G16495@lhs*) '#f (if (G11650@bound-id=? G16494@x (car G16495@lhs*)) (car G16496@rhs*) (G12277@find-bound=? G16494@x (cdr G16495@lhs*) (cdr G16496@rhs*)))))) (set! G12279@find-dups (lambda (G16500@ls) ((letrec ((G16502@f (lambda (G16504@ls G16505@dups) (if (null? G16504@ls) G16505@dups ((lambda (G16508@t) (if G16508@t ((lambda (G16510@x) (G16502@f (cdr G16504@ls) (cons (list (car G16504@ls) G16510@x) G16505@dups))) G16508@t) (G16502@f (cdr G16504@ls) G16505@dups))) (G12277@find-bound=? (car G16504@ls) (cdr G16504@ls) (cdr G16504@ls))))))) G16502@f) G16500@ls '()))) (set! G12281@chi-internal (lambda (G16512@e* G16513@r G16514@mr) ((lambda (G16518@rib) (call-with-values (lambda () (G12318@chi-body* (map (lambda (G16527@x) (G11624@add-subst G16518@rib G16527@x)) (G11642@syntax->list G16512@e*)) G16513@r G16514@mr '() '() '() '() G16518@rib '#f)) (lambda (G16529@G16520 G16530@G16521 G16531@G16522 G16532@G16523 G16533@G16524 G16534@G16525 G16535@G16526) ((lambda (G16543@kwd* G16544@mod** G16545@rhs* G16546@lex* G16547@mr G16548@r G16549@e*) (begin (if (null? G16549@e*) (G12456@syntax-violation '#f '"no expression in body" G16549@e*) (void)) ((lambda (G16557@init*) ((lambda (G16559@rhs*) ((lambda () (G11492@G11352@build-letrec* '#f (reverse G16546@lex*) (reverse G16559@rhs*) (G11489@G11346@build-sequence '#f G16557@init*))))) (G12275@chi-rhs* G16545@rhs* G16548@r G16547@mr))) (G12255@chi-expr* (append (apply append (reverse G16544@mod**)) G16549@e*) G16548@r G16547@mr)))) G16535@G16526 G16534@G16525 G16533@G16524 G16532@G16523 G16531@G16522 G16530@G16521 G16529@G16520)))) (G11563@make-empty-rib)))) (set! G12283@parse-module (lambda (G16561@e) ((lambda (G16563@t) ((lambda (G16565@ls/false) (if G16565@ls/false (apply (lambda (G16567@export* G16568@b*) (begin (if (for-all G11644@id? G16567@export*) (void) (G12456@syntax-violation '#f '"module exports must be identifiers" G16561@e)) (values '#f (list->vector G16567@export*) G16568@b*))) G16565@ls/false) ((lambda (G16571@t) ((lambda (G16573@ls/false) (if G16573@ls/false (apply (lambda (G16575@name G16576@export* G16577@b*) (begin (if (G11644@id? G16575@name) (void) (G12456@syntax-violation '#f '"module name must be an identifier" G16561@e)) (if (for-all G11644@id? G16576@export*) (void) (G12456@syntax-violation '#f '"module exports must be identifiers" G16561@e)) (values G16575@name (list->vector G16576@export*) G16577@b*))) G16573@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16571@t))) (G12223@syntax-dispatch G16571@t '(_ any each-any . each-any)))) G16563@t))) (G12223@syntax-dispatch G16563@t '(_ each-any . each-any)))) G16561@e))) (set! G12289@G12284 (make-record-type-descriptor 'module-interface '#f 'G12287 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G12291@G12286 '#f) (set! G12293@G12285 (make-record-constructor-descriptor G12289@G12284 '#f G12291@G12286)) (set! G12298@module-interface? (record-predicate G12289@G12284)) (set! G12300@make-module-interface (record-constructor G12293@G12285)) (set! G12302@module-interface-first-mark (record-accessor G12289@G12284 '0)) (set! G12304@module-interface-exp-id-vec (record-accessor G12289@G12284 '1)) (set! G12306@module-interface-exp-lab-vec (record-accessor G12289@G12284 '2)) (set! G12308@set-module-interface-first-mark! (record-mutator G12289@G12284 '0)) (set! G12310@set-module-interface-exp-id-vec! (record-mutator G12289@G12284 '1)) (set! G12312@set-module-interface-exp-lab-vec! (record-mutator G12289@G12284 '2)) (set! G12314@module-interface-exp-id* (lambda (G16581@iface G16582@id) ((lambda (G16586@diff-marks) (begin (set! G16586@diff-marks (lambda (G16593@ls G16594@x) (begin (if (null? G16593@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G16597@a) (if (eq? G16597@a G16594@x) '() (cons G16597@a (G16586@diff-marks (cdr G16593@ls) G16594@x)))) (car G16593@ls))))) ((lambda (G16587@diff G16588@id-vec) (if (null? G16587@diff) G16588@id-vec (vector-map (lambda (G16591@x) (G11590@make-stx (G11592@stx-expr G16591@x) (append G16587@diff (G11594@stx-mark* G16591@x)) '() '())) G16588@id-vec))) (G16586@diff-marks (G11594@stx-mark* G16582@id) (G12302@module-interface-first-mark G16581@iface)) (G12304@module-interface-exp-id-vec G16581@iface)))) '#f))) (set! G12316@chi-internal-module (lambda (G16599@e G16600@r G16601@mr G16602@lex* G16603@rhs* G16604@mod** G16605@kwd*) (call-with-values (lambda () (G12283@parse-module G16599@e)) (lambda (G16616@G16613 G16617@G16614 G16618@G16615) ((lambda (G16622@e* G16623@exp-id* G16624@name) ((lambda (G16628@rib) ((lambda (G16630@e*) ((lambda () (call-with-values (lambda () (G12318@chi-body* G16630@e* G16600@r G16601@mr G16602@lex* G16603@rhs* G16604@mod** G16605@kwd* G16628@rib '#f)) (lambda (G16639@G16632 G16640@G16633 G16641@G16634 G16642@G16635 G16643@G16636 G16644@G16637 G16645@G16638) ((lambda (G16653@kwd* G16654@mod** G16655@rhs* G16656@lex* G16657@mr G16658@r G16659@e*) ((lambda (G16667@exp-lab* G16668@mod**) (if (not G16624@name) (values G16656@lex* G16655@rhs* G16623@exp-id* G16667@exp-lab* G16658@r G16657@mr G16668@mod** G16653@kwd*) ((lambda (G16671@lab G16672@iface) (values G16656@lex* G16655@rhs* (vector G16624@name) (vector G16671@lab) (cons (cons G16671@lab (cons '$module G16672@iface)) G16658@r) (cons (cons G16671@lab (cons '$module G16672@iface)) G16657@mr) G16668@mod** G16653@kwd*)) (G11522@gen-label 'module) (G12300@make-module-interface (car (G11594@stx-mark* G16624@name)) (vector-map (lambda (G16675@x) (G11590@make-stx (G11592@stx-expr G16675@x) (G11594@stx-mark* G16675@x) '() '())) G16623@exp-id*) G16667@exp-lab*)))) (vector-map (lambda (G16677@x) ((lambda (G16679@t) (if G16679@t G16679@t (begin '#f (G12456@syntax-violation '#f '"cannot find module export" G16677@x)))) (G11670@id->label (G11590@make-stx (G11646@id->sym G16677@x) (G11594@stx-mark* G16677@x) (list G16628@rib) '())))) G16623@exp-id*) (cons G16659@e* G16654@mod**))) G16645@G16638 G16644@G16637 G16643@G16636 G16642@G16635 G16641@G16634 G16640@G16633 G16639@G16632)))))) (map (lambda (G16681@x) (G11624@add-subst G16628@rib G16681@x)) (G11642@syntax->list G16622@e*)))) (G11563@make-empty-rib))) G16618@G16615 G16617@G16614 G16616@G16613))))) (set! G12318@chi-body* (lambda (G16683@e* G16684@r G16685@mr G16686@lex* G16687@rhs* G16688@mod** G16689@kwd* G16690@rib G16691@top?) (if (null? G16683@e*) (values G16683@e* G16684@r G16685@mr G16686@lex* G16687@rhs* G16688@mod** G16689@kwd*) ((lambda (G16701@e) (call-with-values (lambda () (G11684@syntax-type G16701@e G16684@r)) (lambda (G16706@G16703 G16707@G16704 G16708@G16705) ((lambda (G16712@kwd G16713@value G16714@type) ((lambda (G16718@kwd*) ((lambda (G16720@t) (if (eqv? G16720@t 'define) (call-with-values (lambda () (G12103@parse-define G16701@e)) (lambda (G16911@G16909 G16912@G16910) ((lambda (G16915@rhs G16916@id) (begin (if (G11658@bound-id-member? G16916@id G16718@kwd*) (G12456@syntax-violation '#f '"cannot redefine keyword" G16701@e) (void)) (call-with-values (lambda () (G11526@gen-define-label+loc G16916@id G16690@rib)) (lambda (G16921@G16919 G16922@G16920) ((lambda (G16925@lex G16926@lab) (begin (G11565@extend-rib! G16690@rib G16916@id G16926@lab) (G12318@chi-body* (cdr G16683@e*) (G12117@add-lexical G16926@lab G16925@lex G16684@r) G16685@mr (cons G16925@lex G16686@lex*) (cons G16915@rhs G16687@rhs*) G16688@mod** G16718@kwd* G16690@rib G16691@top?))) G16922@G16920 G16921@G16919))))) G16912@G16910 G16911@G16909))) (if (eqv? G16720@t 'define-syntax) (call-with-values (lambda () (G12105@parse-define-syntax G16701@e)) (lambda (G16895@G16893 G16896@G16894) ((lambda (G16899@rhs G16900@id) (begin (if (G11658@bound-id-member? G16900@id G16718@kwd*) (G12456@syntax-violation '#f '"cannot redefine keyword" G16701@e) (void)) ((lambda (G16903@lab G16904@expanded-rhs) (begin (G11565@extend-rib! G16690@rib G16900@id G16903@lab) ((lambda (G16907@b) (G12318@chi-body* (cdr G16683@e*) (cons (cons G16903@lab G16907@b) G16684@r) (cons (cons G16903@lab G16907@b) G16685@mr) G16686@lex* G16687@rhs* G16688@mod** G16718@kwd* G16690@rib G16691@top?)) (G11715@make-eval-transformer G16904@expanded-rhs)))) (G11528@gen-define-label G16900@id G16690@rib) (G12320@expand-transformer G16899@rhs G16685@mr)))) G16896@G16894 G16895@G16893))) (if (memv G16720@t '(let-syntax letrec-syntax)) ((lambda (G16867@t) ((lambda (G16869@ls/false) (if (if G16869@ls/false (begin '#f (apply (lambda (G16871@xlhs* G16872@xrhs* G16873@xbody*) (if (G11654@valid-bound-ids? G16871@xlhs*) (void) (G12456@syntax-violation '#f '"invalid identifiers" G16701@e))) G16869@ls/false)) '#f) (apply (lambda (G16877@xlhs* G16878@xrhs* G16879@xbody*) ((lambda (G16883@xlab*) ((lambda (G16885@xrib) ((lambda (G16887@xb*) ((lambda () (G12318@chi-body* (append (map (lambda (G16889@x) (G11624@add-subst G16885@xrib G16889@x)) G16879@xbody*) (cdr G16683@e*)) (append (map cons G16883@xlab* G16887@xb*) G16684@r) (append (map cons G16883@xlab* G16887@xb*) G16685@mr) G16686@lex* G16687@rhs* G16688@mod** G16718@kwd* G16690@rib G16691@top?)))) (map (lambda (G16891@x) (G11715@make-eval-transformer (G12320@expand-transformer (if (eq? G16714@type 'let-syntax) G16891@x (G11624@add-subst G16885@xrib G16891@x)) G16685@mr))) G16878@xrhs*))) (G11573@make-full-rib G16877@xlhs* G16883@xlab*))) (map G11522@gen-label G16877@xlhs*))) G16869@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16867@t))) (G12223@syntax-dispatch G16867@t '(_ #(each (any any)) . each-any)))) G16701@e) (if (eqv? G16720@t 'begin) ((lambda (G16861@t) ((lambda (G16863@ls/false) (if G16863@ls/false (apply (lambda (G16865@x*) (G12318@chi-body* (append G16865@x* (cdr G16683@e*)) G16684@r G16685@mr G16686@lex* G16687@rhs* G16688@mod** G16718@kwd* G16690@rib G16691@top?)) G16863@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16861@t))) (G12223@syntax-dispatch G16861@t '(_ . each-any)))) G16701@e) (if (memv G16720@t '(global-macro global-macro!)) (G12318@chi-body* (cons (G11624@add-subst G16690@rib (G12253@chi-global-macro G16713@value G16701@e)) (cdr G16683@e*)) G16684@r G16685@mr G16686@lex* G16687@rhs* G16688@mod** G16718@kwd* G16690@rib G16691@top?) (if (memv G16720@t '(local-macro local-macro!)) (G12318@chi-body* (cons (G11624@add-subst G16690@rib (G12251@chi-local-macro G16713@value G16701@e)) (cdr G16683@e*)) G16684@r G16685@mr G16686@lex* G16687@rhs* G16688@mod** G16718@kwd* G16690@rib G16691@top?) (if (memv G16720@t '(macro macro!)) (G12318@chi-body* (cons (G11624@add-subst G16690@rib (G12249@chi-macro G16713@value G16701@e)) (cdr G16683@e*)) G16684@r G16685@mr G16686@lex* G16687@rhs* G16688@mod** G16718@kwd* G16690@rib G16691@top?) (if (eqv? G16720@t 'module) (call-with-values (lambda () (G12316@chi-internal-module G16701@e G16684@r G16685@mr G16686@lex* G16687@rhs* G16688@mod** G16718@kwd*)) (lambda (G16825@G16817 G16826@G16818 G16827@G16819 G16828@G16820 G16829@G16821 G16830@G16822 G16831@G16823 G16832@G16824) ((lambda (G16841@kwd* G16842@mod** G16843@mr G16844@r G16845@m-exp-lab* G16846@m-exp-id* G16847@rhs* G16848@lex*) (begin (vector-for-each (lambda (G16857@id G16858@lab) (G11565@extend-rib! G16690@rib G16857@id G16858@lab)) G16846@m-exp-id* G16845@m-exp-lab*) (G12318@chi-body* (cdr G16683@e*) G16844@r G16843@mr G16848@lex* G16847@rhs* G16842@mod** G16841@kwd* G16690@rib G16691@top?))) G16832@G16824 G16831@G16823 G16830@G16822 G16829@G16821 G16828@G16820 G16827@G16819 G16826@G16818 G16825@G16817))) (if (eqv? G16720@t 'library) (begin (G12430@library-expander (G11666@stx->datum G16701@e)) (G12318@chi-body* (cdr G16683@e*) G16684@r G16685@mr G16686@lex* G16687@rhs* G16688@mod** G16718@kwd* G16690@rib G16691@top?)) (if (eqv? G16720@t 'import) (begin ((lambda () ((lambda (G16722@module-import? G16724@module-import G16726@library-import) (begin (set! G16722@module-import? (lambda (G16797@e) ((lambda (G16799@t) ((lambda (G16801@ls/false) (if (if G16801@ls/false (begin '#f (apply (lambda (G16803@id) (G11644@id? G16803@id)) G16801@ls/false)) '#f) (apply (lambda (G16805@id) '#t) G16801@ls/false) ((lambda (G16807@t) ((lambda (G16809@ls/false) (if G16809@ls/false (apply (lambda (G16811@imp*) '#f) G16809@ls/false) ((lambda (G16813@t) ((lambda (G16815@ls/false) (if G16815@ls/false (apply (lambda () (G12456@syntax-violation '#f '"malformed import form" G16797@e)) G16815@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16813@t))) (G12223@syntax-dispatch G16813@t '_))) G16807@t))) (G12223@syntax-dispatch G16807@t '(_ . each-any)))) G16799@t))) (G12223@syntax-dispatch G16799@t '(_ any)))) G16797@e))) (set! G16724@module-import (lambda (G16767@e G16768@r) ((lambda (G16771@t) ((lambda (G16773@ls/false) (if (if G16773@ls/false (begin '#f (apply (lambda (G16775@id) (G11644@id? G16775@id)) G16773@ls/false)) '#f) (apply (lambda (G16777@id) (call-with-values (lambda () (G11684@syntax-type G16777@id G16768@r)) (lambda (G16782@G16779 G16783@G16780 G16784@G16781) ((lambda (G16788@kwd G16789@value G16790@type) ((lambda (G16794@t) (if (eqv? G16794@t '$module) ((lambda (G16795@iface) (values (G12314@module-interface-exp-id* G16795@iface G16777@id) (G12306@module-interface-exp-lab-vec G16795@iface))) G16789@value) (G12456@syntax-violation '#f '"invalid import" G16767@e))) G16790@type)) G16784@G16781 G16783@G16780 G16782@G16779)))) G16773@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16771@t))) (G12223@syntax-dispatch G16771@t '(_ any)))) G16767@e))) (set! G16726@library-import (lambda (G16741@e) ((lambda (G16743@t) ((lambda (G16745@ls/false) (if G16745@ls/false (apply (lambda (G16747@ctxt G16748@imp*) (call-with-values (lambda () (G12328@parse-import-spec* (G12462@syntax->datum G16748@imp*))) (lambda (G16753@G16751 G16754@G16752) ((lambda (G16757@subst-labels G16758@subst-names) (values (vector-map (lambda (G16761@name) (G11610@datum->stx G16747@ctxt G16761@name)) G16758@subst-names) G16757@subst-labels)) G16754@G16752 G16753@G16751)))) G16745@ls/false) ((lambda (G16763@t) ((lambda (G16765@ls/false) (if G16765@ls/false (apply (lambda () (G12456@syntax-violation '#f '"invalid import form" G16741@e)) G16765@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16763@t))) (G12223@syntax-dispatch G16763@t '_))) G16743@t))) (G12223@syntax-dispatch G16743@t '(any . each-any)))) G16741@e))) (call-with-values (lambda () (if (G16722@module-import? G16701@e) (G16724@module-import G16701@e G16684@r) (G16726@library-import G16701@e))) (lambda (G16729@G16727 G16730@G16728) ((lambda (G16733@lab* G16734@id*) (vector-for-each (lambda (G16737@id G16738@lab) (G11565@extend-rib! G16690@rib G16737@id G16738@lab)) G16734@id* G16733@lab*)) G16730@G16728 G16729@G16727))))) '#f '#f '#f))) (G12318@chi-body* (cdr G16683@e*) G16684@r G16685@mr G16686@lex* G16687@rhs* G16688@mod** G16718@kwd* G16690@rib G16691@top?)) (if G16691@top? (G12318@chi-body* (cdr G16683@e*) G16684@r G16685@mr (cons (G11518@gen-lexical 'dummy) G16686@lex*) (cons (cons 'top-expr G16701@e) G16687@rhs*) G16688@mod** G16718@kwd* G16690@rib G16691@top?) (values G16683@e* G16684@r G16685@mr G16686@lex* G16687@rhs* G16688@mod** G16718@kwd*))))))))))))) G16714@type)) (if (G11644@id? G16712@kwd) (cons G16712@kwd G16689@kwd*) G16689@kwd*))) G16708@G16705 G16707@G16704 G16706@G16703)))) (car G16683@e*))))) (set! G12320@expand-transformer (lambda (G16929@expr G16930@r) ((lambda (G16933@rtc) ((lambda (G16935@expanded-rhs) (begin (for-each ((lambda (G16937@mark-visit) (lambda (G16939@x) (begin (G11131@G10771@invoke-library G16939@x) (G16937@mark-visit G16939@x)))) (G12336@vis-collector)) (G16933@rtc)) G16935@expanded-rhs)) ((lambda (G16945@G16941@inv-collector G16946@G16942@vis-collector G16947@G16943@inv-collector G16948@G16944@vis-collector) ((lambda (G16953@swap) (dynamic-wind G16953@swap (lambda () (G12259@chi-expr G16929@expr G16930@r G16930@r)) G16953@swap)) (lambda () (begin ((lambda (G16955@t) (begin (G16945@G16941@inv-collector G16947@G16943@inv-collector) (set! G16947@G16943@inv-collector G16955@t))) (G16945@G16941@inv-collector)) ((lambda (G16957@t) (begin (G16946@G16942@vis-collector G16948@G16944@vis-collector) (set! G16948@G16944@vis-collector G16957@t))) (G16946@G16942@vis-collector)))))) G12334@inv-collector G12336@vis-collector G16933@rtc (lambda (G16959@x) (values))))) (G12332@make-collector)))) (set! G12322@parse-exports (lambda (G16961@exp*) ((lambda (G16964@idsyn?) (begin (set! G16964@idsyn? (lambda (G16993@x) (symbol? (G12462@syntax->datum G16993@x)))) ((letrec ((G16965@f (lambda (G16967@exp* G16968@int* G16969@ext*) (if (null? G16967@exp*) (begin ((lambda (G16973@id*) (if (G11654@valid-bound-ids? G16973@id*) (void) (G12456@syntax-violation 'export '"invalid exports" (G12279@find-dups G16973@id*)))) (map (lambda (G16975@x) (G11590@make-stx G16975@x G11514@top-mark* '() '())) G16969@ext*)) (values (map G12462@syntax->datum G16968@int*) (map G12462@syntax->datum G16969@ext*))) ((lambda (G16977@t) ((lambda (G16979@ls/false) (if G16979@ls/false (apply (lambda (G16981@rename G16982@i* G16983@e*) (begin (if (if (eq? (G12462@syntax->datum G16981@rename) 'rename) (if (for-all G16964@idsyn? G16982@i*) (begin '#f (for-all G16964@idsyn? G16983@e*)) '#f) '#f) (void) (G12456@syntax-violation 'export '"invalid export specifier" (car G16967@exp*))) (G16965@f (cdr G16967@exp*) (append G16982@i* G16968@int*) (append G16983@e* G16969@ext*)))) G16979@ls/false) ((lambda (G16987@t) ((lambda (G16989@ls/false) (if G16989@ls/false (apply (lambda (G16991@ie) (begin (if (G16964@idsyn? G16991@ie) (void) (G12456@syntax-violation 'export '"invalid export" G16991@ie)) (G16965@f (cdr G16967@exp*) (cons G16991@ie G16968@int*) (cons G16991@ie G16969@ext*)))) G16989@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G16987@t))) (G12223@syntax-dispatch G16987@t 'any))) G16977@t))) (G12223@syntax-dispatch G16977@t '(any . #(each (any any)))))) (car G16967@exp*)))))) G16965@f) G16961@exp* '() '()))) '#f))) (set! G12324@parse-library-name (lambda (G16995@spec) ((lambda (G16998@parse) (begin (set! G16998@parse (lambda (G17009@x) ((lambda (G17011@t) ((lambda (G17013@ls/false) (if (if G17013@ls/false (begin '#f (apply (lambda (G17015@v*) (for-all (lambda (G17017@x) ((lambda (G17019@x) (if (integer? G17019@x) (begin '#f (exact? G17019@x)) '#f)) (G12462@syntax->datum G17017@x))) G17015@v*)) G17013@ls/false)) '#f) (apply (lambda (G17021@v*) (values '() (map G12462@syntax->datum G17021@v*))) G17013@ls/false) ((lambda (G17023@t) ((lambda (G17025@ls/false) (if (if G17025@ls/false (begin '#f (apply (lambda (G17027@x G17028@rest) (symbol? (G12462@syntax->datum G17027@x))) G17025@ls/false)) '#f) (apply (lambda (G17031@x G17032@rest) (call-with-values (lambda () (G16998@parse G17032@rest)) (lambda (G17037@G17035 G17038@G17036) ((lambda (G17041@v* G17042@x*) (values (cons (G12462@syntax->datum G17031@x) G17042@x*) G17041@v*)) G17038@G17036 G17037@G17035)))) G17025@ls/false) ((lambda (G17045@t) ((lambda (G17047@ls/false) (if G17047@ls/false (apply (lambda () (values '() '())) G17047@ls/false) ((lambda (G17049@t) ((lambda (G17051@ls/false) (if G17051@ls/false (apply (lambda () (G12456@syntax-violation '#f '"invalid library name" G16995@spec)) G17051@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G17049@t))) (G12223@syntax-dispatch G17049@t '_))) G17045@t))) (G12223@syntax-dispatch G17045@t '()))) G17023@t))) (G12223@syntax-dispatch G17023@t '(any . any)))) G17011@t))) (G12223@syntax-dispatch G17011@t '(each-any)))) G17009@x))) (call-with-values (lambda () (G16998@parse G16995@spec)) (lambda (G17001@G16999 G17002@G17000) ((lambda (G17005@ver* G17006@name*) (begin (if (null? G17006@name*) (G12456@syntax-violation '#f '"empty library name" G16995@spec) (void)) (values G17006@name* G17005@ver*))) G17002@G17000 G17001@G16999))))) '#f))) (set! G12326@parse-library (lambda (G17053@e) ((lambda (G17055@t) ((lambda (G17057@ls/false) (if (if G17057@ls/false (begin '#f (apply (lambda (G17059@library G17060@name* G17061@export G17062@exp* G17063@import G17064@imp* G17065@b*) (if (eq? (G12462@syntax->datum G17061@export) 'export) (if (eq? (G12462@syntax->datum G17063@import) 'import) (begin '#f (eq? (G12462@syntax->datum G17059@library) 'library)) '#f) '#f)) G17057@ls/false)) '#f) (apply (lambda (G17073@library G17074@name* G17075@export G17076@exp* G17077@import G17078@imp* G17079@b*) (values G17074@name* G17076@exp* G17078@imp* G17079@b*)) G17057@ls/false) ((lambda (G17087@t) ((lambda (G17089@ls/false) (if G17089@ls/false (apply (lambda () (G12456@syntax-violation '#f '"malformed library" G17053@e)) G17089@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G17087@t))) (G12223@syntax-dispatch G17087@t '_))) G17055@t))) (G12223@syntax-dispatch G17055@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G17053@e))) (set! G12328@parse-import-spec* (lambda (G17091@imp*) ((lambda (G17094@idsyn? G17096@dup-error G17098@merge-substs G17100@exclude* G17102@find* G17104@rem* G17106@remove-dups G17108@parse-library-name G17110@import-library G17112@get-import G17114@add-imports!) (begin (set! G17094@idsyn? (lambda (G17601@x) (symbol? (G12462@syntax->datum G17601@x)))) (set! G17096@dup-error (lambda (G17599@name) (G12456@syntax-violation 'import '"two imports with different bindings" G17599@name))) (set! G17098@merge-substs (lambda (G17581@s G17582@subst) ((lambda (G17586@insert-to-subst) (begin (set! G17586@insert-to-subst (lambda (G17587@a G17588@subst) ((lambda (G17591@name G17592@label) ((lambda (G17595@t) (if G17595@t ((lambda (G17597@x) (if (eq? (cdr G17597@x) G17592@label) G17588@subst (G17096@dup-error G17591@name))) G17595@t) (cons G17587@a G17588@subst))) (assq G17591@name G17588@subst))) (car G17587@a) (cdr G17587@a)))) (if (null? G17581@s) G17582@subst (G17586@insert-to-subst (car G17581@s) (G17098@merge-substs (cdr G17581@s) G17582@subst))))) '#f))) (set! G17100@exclude* (lambda (G17539@sym* G17540@subst) ((lambda (G17544@exclude) (begin (set! G17544@exclude (lambda (G17565@sym G17566@subst) (if (null? G17566@subst) (G12456@syntax-violation 'import '"cannot rename unbound identifier" G17565@sym) (if (eq? G17565@sym (caar G17566@subst)) (values (cdar G17566@subst) (cdr G17566@subst)) ((lambda (G17569@a) (call-with-values (lambda () (G17544@exclude G17565@sym (cdr G17566@subst))) (lambda (G17573@G17571 G17574@G17572) ((lambda (G17577@subst G17578@old) (values G17578@old (cons G17569@a G17577@subst))) G17574@G17572 G17573@G17571)))) (car G17566@subst)))))) (if (null? G17539@sym*) (values '() G17540@subst) (call-with-values (lambda () (G17544@exclude (car G17539@sym*) G17540@subst)) (lambda (G17547@G17545 G17548@G17546) ((lambda (G17551@subst G17552@old) (call-with-values (lambda () (G17100@exclude* (cdr G17539@sym*) G17551@subst)) (lambda (G17557@G17555 G17558@G17556) ((lambda (G17561@subst G17562@old*) (values (cons G17552@old G17562@old*) G17561@subst)) G17558@G17556 G17557@G17555)))) G17548@G17546 G17547@G17545)))))) '#f))) (set! G17102@find* (lambda (G17531@sym* G17532@subst) (map (lambda (G17535@x) ((lambda (G17537@t) (if G17537@t (cdr G17537@t) (G12456@syntax-violation 'import '"cannot find identifier" G17535@x))) (assq G17535@x G17532@subst))) G17531@sym*))) (set! G17104@rem* (lambda (G17523@sym* G17524@subst) ((letrec ((G17527@f (lambda (G17529@subst) (if (null? G17529@subst) '() (if (memq (caar G17529@subst) G17523@sym*) (G17527@f (cdr G17529@subst)) (cons (car G17529@subst) (G17527@f (cdr G17529@subst)))))))) G17527@f) G17524@subst))) (set! G17106@remove-dups (lambda (G17521@ls) (if (null? G17521@ls) '() (if (memq (car G17521@ls) (cdr G17521@ls)) (G17106@remove-dups (cdr G17521@ls)) (cons (car G17521@ls) (G17106@remove-dups (cdr G17521@ls))))))) (set! G17108@parse-library-name (lambda (G17293@spec) ((lambda (G17296@subversion? G17298@subversion-pred G17300@version-pred) (begin (set! G17296@subversion? (lambda (G17519@x) (if (integer? G17519@x) (if (exact? G17519@x) (begin '#f (>= G17519@x '0)) '#f) '#f))) (set! G17298@subversion-pred (lambda (G17423@x*) ((lambda (G17425@t) ((lambda (G17427@ls/false) (if (if G17427@ls/false (begin '#f (apply (lambda (G17429@n) (G17296@subversion? (G12462@syntax->datum G17429@n))) G17427@ls/false)) '#f) (apply (lambda (G17431@n) (lambda (G17433@x) (= G17433@x (G12462@syntax->datum G17431@n)))) G17427@ls/false) ((lambda (G17435@t) ((lambda (G17437@ls/false) (if (if G17437@ls/false (begin '#f (apply (lambda (G17439@p? G17440@sub*) (eq? (G12462@syntax->datum G17439@p?) 'and)) G17437@ls/false)) '#f) (apply (lambda (G17443@p? G17444@sub*) ((lambda (G17447@p*) (lambda (G17449@x) (for-all (lambda (G17451@p) (G17451@p G17449@x)) G17447@p*))) (map G17298@subversion-pred G17444@sub*))) G17437@ls/false) ((lambda (G17453@t) ((lambda (G17455@ls/false) (if (if G17455@ls/false (begin '#f (apply (lambda (G17457@p? G17458@sub*) (eq? (G12462@syntax->datum G17457@p?) 'or)) G17455@ls/false)) '#f) (apply (lambda (G17461@p? G17462@sub*) ((lambda (G17465@p*) (lambda (G17467@x) (exists (lambda (G17469@p) (G17469@p G17467@x)) G17465@p*))) (map G17298@subversion-pred G17462@sub*))) G17455@ls/false) ((lambda (G17471@t) ((lambda (G17473@ls/false) (if (if G17473@ls/false (begin '#f (apply (lambda (G17475@p? G17476@sub) (eq? (G12462@syntax->datum G17475@p?) 'not)) G17473@ls/false)) '#f) (apply (lambda (G17479@p? G17480@sub) ((lambda (G17483@p) (lambda (G17485@x) (not (G17483@p G17485@x)))) (G17298@subversion-pred G17480@sub))) G17473@ls/false) ((lambda (G17487@t) ((lambda (G17489@ls/false) (if (if G17489@ls/false (begin '#f (apply (lambda (G17491@p? G17492@n) (if (eq? (G12462@syntax->datum G17491@p?) '<=) (begin '#f (G17296@subversion? (G12462@syntax->datum G17492@n))) '#f)) G17489@ls/false)) '#f) (apply (lambda (G17495@p? G17496@n) (lambda (G17499@x) (<= G17499@x (G12462@syntax->datum G17496@n)))) G17489@ls/false) ((lambda (G17501@t) ((lambda (G17503@ls/false) (if (if G17503@ls/false (begin '#f (apply (lambda (G17505@p? G17506@n) (if (eq? (G12462@syntax->datum G17505@p?) '>=) (begin '#f (G17296@subversion? G17506@n)) '#f)) G17503@ls/false)) '#f) (apply (lambda (G17509@p? G17510@n) (lambda (G17513@x) (>= G17513@x (G12462@syntax->datum G17510@n)))) G17503@ls/false) ((lambda (G17515@t) ((lambda (G17517@ls/false) (if G17517@ls/false (apply (lambda () (G12456@syntax-violation 'import '"invalid sub-version spec" G17293@spec G17423@x*)) G17517@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G17515@t))) (G12223@syntax-dispatch G17515@t '_))) G17501@t))) (G12223@syntax-dispatch G17501@t '(any any)))) G17487@t))) (G12223@syntax-dispatch G17487@t '(any any)))) G17471@t))) (G12223@syntax-dispatch G17471@t '(any any)))) G17453@t))) (G12223@syntax-dispatch G17453@t '(any . each-any)))) G17435@t))) (G12223@syntax-dispatch G17435@t '(any . each-any)))) G17425@t))) (G12223@syntax-dispatch G17425@t 'any))) G17423@x*))) (set! G17300@version-pred (lambda (G17343@x*) ((lambda (G17345@t) ((lambda (G17347@ls/false) (if G17347@ls/false (apply (lambda () (lambda (G17349@x) '#t)) G17347@ls/false) ((lambda (G17351@t) ((lambda (G17353@ls/false) (if (if G17353@ls/false (begin '#f (apply (lambda (G17355@c G17356@ver*) (eq? (G12462@syntax->datum G17355@c) 'and)) G17353@ls/false)) '#f) (apply (lambda (G17359@c G17360@ver*) ((lambda (G17363@p*) (lambda (G17365@x) (for-all (lambda (G17367@p) (G17367@p G17365@x)) G17363@p*))) (map G17300@version-pred G17360@ver*))) G17353@ls/false) ((lambda (G17369@t) ((lambda (G17371@ls/false) (if (if G17371@ls/false (begin '#f (apply (lambda (G17373@c G17374@ver*) (eq? (G12462@syntax->datum G17373@c) 'or)) G17371@ls/false)) '#f) (apply (lambda (G17377@c G17378@ver*) ((lambda (G17381@p*) (lambda (G17383@x) (exists (lambda (G17385@p) (G17385@p G17383@x)) G17381@p*))) (map G17300@version-pred G17378@ver*))) G17371@ls/false) ((lambda (G17387@t) ((lambda (G17389@ls/false) (if (if G17389@ls/false (begin '#f (apply (lambda (G17391@c G17392@ver) (eq? (G12462@syntax->datum G17391@c) 'not)) G17389@ls/false)) '#f) (apply (lambda (G17395@c G17396@ver) ((lambda (G17399@p) (lambda (G17401@x) (not (G17399@p G17401@x)))) (G17300@version-pred G17396@ver))) G17389@ls/false) ((lambda (G17403@t) ((lambda (G17405@ls/false) (if G17405@ls/false (apply (lambda (G17407@sub*) ((lambda (G17409@p*) (lambda (G17411@x) ((letrec ((G17413@f (lambda (G17415@p* G17416@x) (if (null? G17415@p*) '#t (if (null? G17416@x) '#f (if ((car G17415@p*) (car G17416@x)) (begin '#f (G17413@f (cdr G17415@p*) (cdr G17416@x))) '#f)))))) G17413@f) G17409@p* G17411@x))) (map G17298@subversion-pred G17407@sub*))) G17405@ls/false) ((lambda (G17419@t) ((lambda (G17421@ls/false) (if G17421@ls/false (apply (lambda () (G12456@syntax-violation 'import '"invalid version spec" G17293@spec G17343@x*)) G17421@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G17419@t))) (G12223@syntax-dispatch G17419@t '_))) G17403@t))) (G12223@syntax-dispatch G17403@t 'each-any))) G17387@t))) (G12223@syntax-dispatch G17387@t '(any any)))) G17369@t))) (G12223@syntax-dispatch G17369@t '(any . each-any)))) G17351@t))) (G12223@syntax-dispatch G17351@t '(any . each-any)))) G17345@t))) (G12223@syntax-dispatch G17345@t '()))) G17343@x*))) ((letrec ((G17301@f (lambda (G17303@x) ((lambda (G17305@t) ((lambda (G17307@ls/false) (if G17307@ls/false (apply (lambda (G17309@version-spec*) (values '() (G17300@version-pred G17309@version-spec*))) G17307@ls/false) ((lambda (G17311@t) ((lambda (G17313@ls/false) (if (if G17313@ls/false (begin '#f (apply (lambda (G17315@x G17316@x*) (G17094@idsyn? G17315@x)) G17313@ls/false)) '#f) (apply (lambda (G17319@x G17320@x*) (call-with-values (lambda () (G17301@f G17320@x*)) (lambda (G17325@G17323 G17326@G17324) ((lambda (G17329@pred G17330@name) (values (cons (G12462@syntax->datum G17319@x) G17330@name) G17329@pred)) G17326@G17324 G17325@G17323)))) G17313@ls/false) ((lambda (G17333@t) ((lambda (G17335@ls/false) (if G17335@ls/false (apply (lambda () (values '() (lambda (G17337@x) '#t))) G17335@ls/false) ((lambda (G17339@t) ((lambda (G17341@ls/false) (if G17341@ls/false (apply (lambda () (G12456@syntax-violation '#f '"invalid import spec" G17293@spec)) G17341@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G17339@t))) (G12223@syntax-dispatch G17339@t '_))) G17333@t))) (G12223@syntax-dispatch G17333@t '()))) G17311@t))) (G12223@syntax-dispatch G17311@t '(any . any)))) G17305@t))) (G12223@syntax-dispatch G17305@t '(each-any)))) G17303@x)))) G17301@f) G17293@spec))) '#f '#f '#f))) (set! G17110@import-library (lambda (G17279@spec*) (call-with-values (lambda () (G17108@parse-library-name G17279@spec*)) (lambda (G17283@G17281 G17284@G17282) ((lambda (G17287@pred G17288@name) (begin (if (null? G17288@name) (G12456@syntax-violation 'import '"empty library name" G17279@spec*) (void)) ((lambda (G17291@lib) (begin (if G17291@lib (void) (G12456@syntax-violation 'import '"cannot find library with required name" G17288@name)) (if (G17287@pred (G11084@G10677@library-version G17291@lib)) (void) (G12456@syntax-violation 'import '"library does not satisfy version specification" G17279@spec* G17291@lib)) ((G12338@imp-collector) G17291@lib) (G11088@G10685@library-subst G17291@lib))) (G11124@G10757@find-library-by-name G17288@name)))) G17284@G17282 G17283@G17281))))) (set! G17112@get-import (lambda (G17137@spec) ((lambda (G17139@t) ((lambda (G17141@ls/false) (if (if G17141@ls/false (begin '#f (apply (lambda (G17143@x G17144@x*) (not (memq (G12462@syntax->datum G17143@x) '(for rename except only prefix library)))) G17141@ls/false)) '#f) (apply (lambda (G17147@x G17148@x*) (G17110@import-library (cons G17147@x G17148@x*))) G17141@ls/false) ((lambda (G17151@t) ((lambda (G17153@ls/false) (if (if G17153@ls/false (begin '#f (apply (lambda (G17155@rename G17156@isp G17157@old* G17158@new*) (if (eq? (G12462@syntax->datum G17155@rename) 'rename) (if (for-all G17094@idsyn? G17157@old*) (begin '#f (for-all G17094@idsyn? G17158@new*)) '#f) '#f)) G17153@ls/false)) '#f) (apply (lambda (G17163@rename G17164@isp G17165@old* G17166@new*) ((lambda (G17171@subst G17172@old* G17173@new*) ((lambda (G17177@old-label*) ((lambda (G17179@subst) (G17098@merge-substs (map cons G17173@new* G17177@old-label*) G17179@subst)) (G17104@rem* G17172@old* G17171@subst))) (G17102@find* G17172@old* G17171@subst))) (G17112@get-import G17164@isp) (map G12462@syntax->datum G17165@old*) (map G12462@syntax->datum G17166@new*))) G17153@ls/false) ((lambda (G17181@t) ((lambda (G17183@ls/false) (if (if G17183@ls/false (begin '#f (apply (lambda (G17185@except G17186@isp G17187@sym*) (if (eq? (G12462@syntax->datum G17185@except) 'except) (begin '#f (for-all G17094@idsyn? G17187@sym*)) '#f)) G17183@ls/false)) '#f) (apply (lambda (G17191@except G17192@isp G17193@sym*) ((lambda (G17197@subst) (G17104@rem* (map G12462@syntax->datum G17193@sym*) G17197@subst)) (G17112@get-import G17192@isp))) G17183@ls/false) ((lambda (G17199@t) ((lambda (G17201@ls/false) (if (if G17201@ls/false (begin '#f (apply (lambda (G17203@only G17204@isp G17205@sym*) (if (eq? (G12462@syntax->datum G17203@only) 'only) (begin '#f (for-all G17094@idsyn? G17205@sym*)) '#f)) G17201@ls/false)) '#f) (apply (lambda (G17209@only G17210@isp G17211@sym*) ((lambda (G17215@subst G17216@sym*) ((lambda (G17219@sym*) ((lambda (G17221@lab*) (map cons G17219@sym* G17221@lab*)) (G17102@find* G17219@sym* G17215@subst))) (G17106@remove-dups G17216@sym*))) (G17112@get-import G17210@isp) (map G12462@syntax->datum G17211@sym*))) G17201@ls/false) ((lambda (G17223@t) ((lambda (G17225@ls/false) (if (if G17225@ls/false (begin '#f (apply (lambda (G17227@prefix G17228@isp G17229@p) (if (eq? (G12462@syntax->datum G17227@prefix) 'prefix) (begin '#f (G17094@idsyn? G17229@p)) '#f)) G17225@ls/false)) '#f) (apply (lambda (G17233@prefix G17234@isp G17235@p) ((lambda (G17239@subst G17240@prefix) (map (lambda (G17243@x) (cons (string->symbol (string-append G17240@prefix (symbol->string (car G17243@x)))) (cdr G17243@x))) G17239@subst)) (G17112@get-import G17234@isp) (symbol->string (G12462@syntax->datum G17235@p)))) G17225@ls/false) ((lambda (G17245@t) ((lambda (G17247@ls/false) (if (if G17247@ls/false (begin '#f (apply (lambda (G17249@library G17250@spec*) (eq? (G12462@syntax->datum G17249@library) 'library)) G17247@ls/false)) '#f) (apply (lambda (G17253@library G17254@spec*) (G17110@import-library G17254@spec*)) G17247@ls/false) ((lambda (G17257@t) ((lambda (G17259@ls/false) (if (if G17259@ls/false (begin '#f (apply (lambda (G17261@for G17262@isp G17263@rest) (eq? (G12462@syntax->datum G17261@for) 'for)) G17259@ls/false)) '#f) (apply (lambda (G17267@for G17268@isp G17269@rest) (G17112@get-import G17268@isp)) G17259@ls/false) ((lambda (G17273@t) ((lambda (G17275@ls/false) (if G17275@ls/false (apply (lambda (G17277@spec) (G12456@syntax-violation 'import '"invalid import spec" G17277@spec)) G17275@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G17273@t))) (G12223@syntax-dispatch G17273@t 'any))) G17257@t))) (G12223@syntax-dispatch G17257@t '(any any . any)))) G17245@t))) (G12223@syntax-dispatch G17245@t '(any each-any)))) G17223@t))) (G12223@syntax-dispatch G17223@t '(any any any)))) G17199@t))) (G12223@syntax-dispatch G17199@t '(any any . each-any)))) G17181@t))) (G12223@syntax-dispatch G17181@t '(any any . each-any)))) G17151@t))) (G12223@syntax-dispatch G17151@t '(any any . #(each (any any)))))) G17139@t))) (G12223@syntax-dispatch G17139@t '(any . each-any)))) G17137@spec))) (set! G17114@add-imports! (lambda (G17121@imp G17122@h) ((lambda (G17125@subst) (for-each (lambda (G17127@x) ((lambda (G17129@name G17130@label) ((lambda (G17133@t) (if G17133@t ((lambda (G17135@l) (if (eq? G17135@l G17130@label) (void) (G17096@dup-error G17129@name))) G17133@t) (hashtable-set! G17122@h G17129@name G17130@label))) (hashtable-ref G17122@h G17129@name '#f))) (car G17127@x) (cdr G17127@x))) G17125@subst)) (G17112@get-import G17121@imp)))) ((letrec ((G17115@f (lambda (G17117@imp* G17118@h) (if (null? G17117@imp*) (hashtable-entries G17118@h) (begin (G17114@add-imports! (car G17117@imp*) G17118@h) (G17115@f (cdr G17117@imp*) G17118@h)))))) G17115@f) G17091@imp* (make-eq-hashtable)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12330@make-top-rib (lambda (G17603@names G17604@labels) ((lambda (G17607@rib) (begin (vector-for-each (lambda (G17609@name G17610@label) (begin (if (symbol? G17609@name) (void) (error 'make-top-rib '"BUG: not a symbol" G17609@name)) (G11565@extend-rib! G17607@rib (G11590@make-stx G17609@name G11514@top-mark* '() '()) G17610@label))) G17603@names G17604@labels) G17607@rib)) (G11563@make-empty-rib)))) (set! G12332@make-collector (lambda () ((lambda (G17613@ls) (lambda G17617 ((lambda (G17618) (if (= G17618 '0) (apply (lambda () G17613@ls) G17617) (if (= G17618 '1) (apply (lambda (G17615@x) (set! G17613@ls (G11507@set-cons G17615@x G17613@ls))) G17617) (error 'apply '"invalid arg count")))) (length G17617)))) '()))) (set! G12334@inv-collector (G10460@G10255@make-parameter (lambda G17619@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G17621@x) (begin (if (procedure? G17621@x) (void) (assertion-violation 'inv-collector '"BUG: not a procedure" G17621@x)) G17621@x)))) (set! G12336@vis-collector (G10460@G10255@make-parameter (lambda G17623@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G17625@x) (begin (if (procedure? G17625@x) (void) (assertion-violation 'vis-collector '"BUG: not a procedure" G17625@x)) G17625@x)))) (set! G12338@imp-collector (G10460@G10255@make-parameter (lambda G17627@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G17629@x) (begin (if (procedure? G17629@x) (void) (assertion-violation 'imp-collector '"BUG: not a procedure" G17629@x)) G17629@x)))) (set! G12340@chi-library-internal (lambda (G17631@e* G17632@rib G17633@top?) (call-with-values (lambda () (G12318@chi-body* G17631@e* '() '() '() '() '() '() G17632@rib G17633@top?)) (lambda (G17644@G17637 G17645@G17638 G17646@G17639 G17647@G17640 G17648@G17641 G17649@G17642 G17650@G17643) ((lambda (G17658@_kwd* G17659@mod** G17660@rhs* G17661@lex* G17662@mr G17663@r G17664@e*) (values (append (apply append (reverse G17659@mod**)) G17664@e*) G17663@r G17662@mr (reverse G17661@lex*) (reverse G17660@rhs*))) G17650@G17643 G17649@G17642 G17648@G17641 G17647@G17640 G17646@G17639 G17645@G17638 G17644@G17637))))) (set! G12342@chi-interaction-expr (lambda (G17672@e G17673@rib G17674@r) (call-with-values (lambda () (G12318@chi-body* (list G17672@e) G17674@r G17674@r '() '() '() '() G17673@rib '#t)) (lambda (G17685@G17678 G17686@G17679 G17687@G17680 G17688@G17681 G17689@G17682 G17690@G17683 G17691@G17684) ((lambda (G17699@_kwd* G17700@mod** G17701@rhs* G17702@lex* G17703@mr G17704@r G17705@e*) ((lambda (G17713@e*) ((lambda (G17715@e) (values G17715@e G17704@r)) (if (null? G17713@e*) (G11490@G11348@build-void) (if (null? (cdr G17713@e*)) (car G17713@e*) (G11489@G11346@build-sequence '#f G17713@e*))))) (G12273@expand-interaction-rhs*/init* (reverse G17702@lex*) (reverse G17701@rhs*) (append (apply append (reverse G17700@mod**)) G17705@e*) G17704@r G17703@mr))) G17691@G17684 G17690@G17683 G17689@G17682 G17688@G17681 G17687@G17680 G17686@G17679 G17685@G17678))))) (set! G12344@library-body-expander (lambda (G17717@name G17718@exp* G17719@imp* G17720@b* G17721@top?) ((lambda (G17728@itc) (begin (set! G17728@itc (G12332@make-collector)) ((lambda (G17733@G17729@imp-collector G17734@G17730@top-level-context G17735@G17731@imp-collector G17736@G17732@top-level-context) ((lambda (G17741@swap) (dynamic-wind G17741@swap (lambda () (call-with-values (lambda () (G12322@parse-exports G17718@exp*)) (lambda (G17745@G17743 G17746@G17744) ((lambda (G17749@exp-ext* G17750@exp-int*) (call-with-values (lambda () (G12328@parse-import-spec* G17719@imp*)) (lambda (G17755@G17753 G17756@G17754) ((lambda (G17759@subst-labels G17760@subst-names) ((lambda (G17763@rib) ((lambda (G17765@b* G17766@rtc G17767@vtc) ((lambda (G17775@G17771@inv-collector G17776@G17772@vis-collector G17777@G17773@inv-collector G17778@G17774@vis-collector) ((lambda (G17783@swap) (dynamic-wind G17783@swap (lambda () (call-with-values (lambda () (G12340@chi-library-internal G17765@b* G17763@rib G17721@top?)) (lambda (G17790@G17785 G17791@G17786 G17792@G17787 G17793@G17788 G17794@G17789) ((lambda (G17800@rhs* G17801@lex* G17802@mr G17803@r G17804@init*) (begin (G11569@seal-rib! G17763@rib) ((lambda (G17810@init*) ((lambda (G17812@rhs*) ((lambda () (begin (G11571@unseal-rib! G17763@rib) ((lambda (G17814@loc* G17815@export-subst) ((lambda (G17819@errstr) (begin (set! G17819@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G12440@make-export-env/macros G17801@lex* G17814@loc* G17803@r)) (lambda (G17823@G17820 G17824@G17821 G17825@G17822) ((lambda (G17829@macro* G17830@global* G17831@export-env) (begin (for-each (lambda (G17835@s) ((lambda (G17837@name G17838@label) ((lambda (G17841@p) (if G17841@p ((lambda (G17843@b) ((lambda (G17845@type) (if (eq? G17845@type 'mutable) (G12456@syntax-violation 'export G17819@errstr G17837@name) (void))) (car G17843@b))) (cdr G17841@p)) (void))) (assq G17838@label G17831@export-env))) (car G17835@s) (cdr G17835@s))) G17815@export-subst) ((lambda (G17847@invoke-body G17848@invoke-definitions) (values (G17728@itc) (G17766@rtc) (G17767@vtc) (G11489@G11346@build-sequence '#f (append G17848@invoke-definitions (list G17847@invoke-body))) G17829@macro* G17815@export-subst G17831@export-env)) (G11492@G11352@build-letrec* '#f G17801@lex* G17812@rhs* (G12436@build-exports G17830@global* G17810@init*)) (map G11485@G11138@build-global-define (map cdr G17830@global*))))) G17825@G17822 G17824@G17821 G17823@G17820))))) '#f)) (map G11520@gen-global G17801@lex*) (G12438@make-export-subst G17750@exp-int* G17749@exp-ext* G17763@rib)))))) (G12275@chi-rhs* G17800@rhs* G17803@r G17802@mr))) (G12255@chi-expr* G17804@init* G17803@r G17802@mr)))) G17794@G17789 G17793@G17788 G17792@G17787 G17791@G17786 G17790@G17785)))) G17783@swap)) (lambda () (begin ((lambda (G17851@t) (begin (G17775@G17771@inv-collector G17777@G17773@inv-collector) (set! G17777@G17773@inv-collector G17851@t))) (G17775@G17771@inv-collector)) ((lambda (G17853@t) (begin (G17776@G17772@vis-collector G17778@G17774@vis-collector) (set! G17778@G17774@vis-collector G17853@t))) (G17776@G17772@vis-collector)))))) G12334@inv-collector G12336@vis-collector G17766@rtc G17767@vtc)) (map (lambda (G17855@x) (G11590@make-stx G17855@x G11514@top-mark* (list G17763@rib) '())) G17720@b*) (G12332@make-collector) (G12332@make-collector))) (G12330@make-top-rib G17760@subst-names G17759@subst-labels))) G17756@G17754 G17755@G17753)))) G17746@G17744 G17745@G17743)))) G17741@swap)) (lambda () (begin ((lambda (G17857@t) (begin (G17733@G17729@imp-collector G17735@G17731@imp-collector) (set! G17735@G17731@imp-collector G17857@t))) (G17733@G17729@imp-collector)) ((lambda (G17859@t) (begin (G17734@G17730@top-level-context G17736@G17732@top-level-context) (set! G17736@G17732@top-level-context G17859@t))) (G17734@G17730@top-level-context)))))) G12338@imp-collector G12470@top-level-context G17728@itc '#f))) '#f))) (set! G12346@core-library-expander (lambda (G17861@e G17862@verify-name) (call-with-values (lambda () (G12326@parse-library G17861@e)) (lambda (G17869@G17865 G17870@G17866 G17871@G17867 G17872@G17868) ((lambda (G17877@b* G17878@imp* G17879@exp* G17880@name*) (call-with-values (lambda () (G12324@parse-library-name G17880@name*)) (lambda (G17887@G17885 G17888@G17886) ((lambda (G17891@ver G17892@name) (begin (G17862@verify-name G17892@name) (call-with-values (lambda () (G12344@library-body-expander G17892@name G17879@exp* G17878@imp* G17877@b* '#f)) (lambda (G17902@G17895 G17903@G17896 G17904@G17897 G17905@G17898 G17906@G17899 G17907@G17900 G17908@G17901) ((lambda (G17916@export-env G17917@export-subst G17918@visit-code G17919@invoke-code G17920@visit-req* G17921@invoke-req* G17922@imp*) (values G17892@name G17891@ver G17922@imp* G17921@invoke-req* G17920@visit-req* G17919@invoke-code G17918@visit-code G17917@export-subst G17916@export-env)) G17908@G17901 G17907@G17900 G17906@G17899 G17905@G17898 G17904@G17897 G17903@G17896 G17902@G17895))))) G17888@G17886 G17887@G17885)))) G17872@G17868 G17871@G17867 G17870@G17866 G17869@G17865))))) (set! G12348@parse-top-level-program (lambda (G17930@e*) ((lambda (G17932@t) ((lambda (G17934@ls/false) (if (if G17934@ls/false (begin '#f (apply (lambda (G17936@import G17937@imp* G17938@b*) (eq? (G12462@syntax->datum G17936@import) 'import)) G17934@ls/false)) '#f) (apply (lambda (G17942@import G17943@imp* G17944@b*) (values G17943@imp* G17944@b*)) G17934@ls/false) ((lambda (G17948@t) ((lambda (G17950@ls/false) (if (if G17950@ls/false (begin '#f (apply (lambda (G17952@import G17953@x G17954@y) (eq? (G12462@syntax->datum G17952@import) 'import)) G17950@ls/false)) '#f) (apply (lambda (G17958@import G17959@x G17960@y) (G12456@syntax-violation 'expander '"invalid syntax of top-level program" (G11638@syntax-car G17930@e*))) G17950@ls/false) ((lambda (G17964@t) ((lambda (G17966@ls/false) (if G17966@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G17966@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G17964@t))) (G12223@syntax-dispatch G17964@t '_))) G17948@t))) (G12223@syntax-dispatch G17948@t '((any . any) . any)))) G17932@t))) (G12223@syntax-dispatch G17932@t '((any . each-any) . each-any)))) G17930@e*))) (set! G12350@top-level-expander (lambda (G17968@e*) (call-with-values (lambda () (G12348@parse-top-level-program G17968@e*)) (lambda (G17972@G17970 G17973@G17971) ((lambda (G17976@b* G17977@imp*) (call-with-values (lambda () (G12344@library-body-expander '() '() G17977@imp* G17976@b* '#t)) (lambda (G17987@G17980 G17988@G17981 G17989@G17982 G17990@G17983 G17991@G17984 G17992@G17985 G17993@G17986) ((lambda (G18001@export-env G18002@export-subst G18003@visit-code G18004@invoke-code G18005@visit-req* G18006@invoke-req* G18007@imp*) (values G18006@invoke-req* G18004@invoke-code)) G17993@G17986 G17992@G17985 G17991@G17984 G17990@G17983 G17989@G17982 G17988@G17981 G17987@G17980)))) G17973@G17971 G17972@G17970))))) (set! G12356@G12351 (make-record-type-descriptor 'env '#f 'G12354 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G12358@G12353 '#f) (set! G12360@G12352 (make-record-constructor-descriptor G12356@G12351 '#f G12358@G12353)) (set! G12365@env? (record-predicate G12356@G12351)) (set! G12367@make-env (record-constructor G12360@G12352)) (set! G12369@env-names (record-accessor G12356@G12351 '0)) (set! G12371@env-labels (record-accessor G12356@G12351 '1)) (set! G12373@env-itc (record-accessor G12356@G12351 '2)) (set! G12375@set-env-names! (record-mutator G12356@G12351 '0)) (set! G12377@set-env-labels! (record-mutator G12356@G12351 '1)) (set! G12379@set-env-itc! (record-mutator G12356@G12351 '2)) (set! G12381@rp (G10457@G10249@make-record-printer 'env (lambda (G18015@x G18016@p) (display '"#<environment>" G18016@p)))) (set! G12387@G12382 (make-record-type-descriptor 'interaction-env '#f 'G12385 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G12389@G12384 '#f) (set! G12391@G12383 (make-record-constructor-descriptor G12387@G12382 '#f G12389@G12384)) (set! G12396@interaction-env? (record-predicate G12387@G12382)) (set! G12398@make-interaction-env (record-constructor G12391@G12383)) (set! G12400@interaction-env-rib (record-accessor G12387@G12382 '0)) (set! G12402@interaction-env-r (record-accessor G12387@G12382 '1)) (set! G12404@interaction-env-locs (record-accessor G12387@G12382 '2)) (set! G12406@set-interaction-env-rib! (record-mutator G12387@G12382 '0)) (set! G12408@set-interaction-env-r! (record-mutator G12387@G12382 '1)) (set! G12410@set-interaction-env-locs! (record-mutator G12387@G12382 '2)) (set! G12412@rp (G10457@G10249@make-record-printer 'interaction-env (lambda (G18019@x G18020@p) (display '"#<environment>" G18020@p)))) (set! G12414@interaction-environment-symbols (lambda () (map (lambda (G18023@x) G18023@x) (G11547@rib-sym* (G12400@interaction-env-rib (G12468@interaction-environment)))))) (set! G12416@environment-symbols (lambda (G18025@e) (vector->list (G12369@env-names G18025@e)))) (set! G12418@environment? (lambda (G18027@x) ((lambda (G18029@t) (if G18029@t G18029@t (begin '#f (G12396@interaction-env? G18027@x)))) (G12365@env? G18027@x)))) (set! G12420@environment (lambda G18031@imp* ((lambda (G18033@itc) ((lambda (G18037@G18035@imp-collector G18038@G18036@imp-collector) ((lambda (G18041@swap) (dynamic-wind G18041@swap (lambda () (call-with-values (lambda () (G12328@parse-import-spec* G18031@imp*)) (lambda (G18045@G18043 G18046@G18044) ((lambda (G18049@subst-labels G18050@subst-names) (G12367@make-env G18050@subst-names G18049@subst-labels G18033@itc)) G18046@G18044 G18045@G18043)))) G18041@swap)) (lambda () ((lambda (G18053@t) (begin (G18037@G18035@imp-collector G18038@G18036@imp-collector) (set! G18038@G18036@imp-collector G18053@t))) (G18037@G18035@imp-collector))))) G12338@imp-collector G18033@itc)) (G12332@make-collector)))) (set! G12422@null-environment (lambda (G18055@n) (begin (if (eqv? G18055@n '5) (void) (assertion-violation 'null-environment '"not 5" G18055@n)) (G12420@environment '(psyntax null-environment-5))))) (set! G12424@scheme-report-environment (lambda (G18057@n) (begin (if (eqv? G18057@n '5) (void) (assertion-violation 'scheme-report-environment '"not 5" G18057@n)) (G12420@environment '(psyntax scheme-report-environment-5))))) (set! G12426@expand (lambda (G18059@x G18060@env) (if (G12365@env? G18060@env) ((lambda (G18063@rib) ((lambda (G18065@x G18066@itc G18067@rtc G18068@vtc) ((lambda (G18073@x) (begin (G11569@seal-rib! G18063@rib) (values G18073@x (G18067@rtc)))) ((lambda (G18081@G18075@inv-collector G18082@G18076@vis-collector G18083@G18077@imp-collector G18084@G18078@inv-collector G18085@G18079@vis-collector G18086@G18080@imp-collector) ((lambda (G18093@swap) (dynamic-wind G18093@swap (lambda () (G12259@chi-expr G18065@x '() '())) G18093@swap)) (lambda () (begin ((lambda (G18095@t) (begin (G18081@G18075@inv-collector G18084@G18078@inv-collector) (set! G18084@G18078@inv-collector G18095@t))) (G18081@G18075@inv-collector)) ((lambda (G18097@t) (begin (G18082@G18076@vis-collector G18085@G18079@vis-collector) (set! G18085@G18079@vis-collector G18097@t))) (G18082@G18076@vis-collector)) ((lambda (G18099@t) (begin (G18083@G18077@imp-collector G18086@G18080@imp-collector) (set! G18086@G18080@imp-collector G18099@t))) (G18083@G18077@imp-collector)))))) G12334@inv-collector G12336@vis-collector G12338@imp-collector G18067@rtc G18068@vtc G18066@itc))) (G11590@make-stx G18059@x G11514@top-mark* (list G18063@rib) '()) (G12373@env-itc G18060@env) (G12332@make-collector) (G12332@make-collector))) (G12330@make-top-rib (G12369@env-names G18060@env) (G12371@env-labels G18060@env))) (if (G12396@interaction-env? G18060@env) ((lambda (G18101@rib G18102@r G18103@rtc) ((lambda (G18107@x) (call-with-values (lambda () ((lambda (G18119@G18111@top-level-context G18120@G18112@inv-collector G18121@G18113@vis-collector G18122@G18114@imp-collector G18123@G18115@top-level-context G18124@G18116@inv-collector G18125@G18117@vis-collector G18126@G18118@imp-collector) ((lambda (G18135@swap) (dynamic-wind G18135@swap (lambda () (G12342@chi-interaction-expr G18107@x G18101@rib G18102@r)) G18135@swap)) (lambda () (begin ((lambda (G18137@t) (begin (G18119@G18111@top-level-context G18123@G18115@top-level-context) (set! G18123@G18115@top-level-context G18137@t))) (G18119@G18111@top-level-context)) ((lambda (G18139@t) (begin (G18120@G18112@inv-collector G18124@G18116@inv-collector) (set! G18124@G18116@inv-collector G18139@t))) (G18120@G18112@inv-collector)) ((lambda (G18141@t) (begin (G18121@G18113@vis-collector G18125@G18117@vis-collector) (set! G18125@G18117@vis-collector G18141@t))) (G18121@G18113@vis-collector)) ((lambda (G18143@t) (begin (G18122@G18114@imp-collector G18126@G18118@imp-collector) (set! G18126@G18118@imp-collector G18143@t))) (G18122@G18114@imp-collector)))))) G12470@top-level-context G12334@inv-collector G12336@vis-collector G12338@imp-collector G18060@env G18103@rtc (G12332@make-collector) (G12332@make-collector))) (lambda (G18145@G18109 G18146@G18110) ((lambda (G18149@r^ G18150@e) (begin (G12408@set-interaction-env-r! G18060@env G18149@r^) (values G18150@e (G18103@rtc)))) G18146@G18110 G18145@G18109)))) (G11590@make-stx G18059@x G11514@top-mark* (list G18101@rib) '()))) (G12400@interaction-env-rib G18060@env) (G12402@interaction-env-r G18060@env) (G12332@make-collector)) (assertion-violation 'expand '"not an environment" G18060@env))))) (set! G12428@eval (lambda (G18153@x G18154@env) (begin (if (G12418@environment? G18154@env) (void) (error 'eval '"not an environment" G18154@env)) (call-with-values (lambda () (G12426@expand G18153@x G18154@env)) (lambda (G18159@G18157 G18160@G18158) ((lambda (G18163@invoke-req* G18164@x) (begin (for-each G11131@G10771@invoke-library G18163@invoke-req*) (eval-core (G10559@G10472@expanded->core G18164@x)))) G18160@G18158 G18159@G18157)))))) (set! G12430@library-expander (lambda G18268 ((lambda (G18269) (if (= G18269 '3) (apply (lambda (G18167@x G18168@filename G18169@verify-name) ((lambda (G18174@build-visit-code G18176@visit!) (begin (set! G18174@build-visit-code (lambda (G18250@macro*) (if (null? G18250@macro*) (G11490@G11348@build-void) (G11489@G11346@build-sequence '#f (map (lambda (G18252@x) ((lambda (G18254@loc G18255@src) (list 'set! G18254@loc G18255@src)) (car G18252@x) (cddr G18252@x))) G18250@macro*))))) (set! G18176@visit! (lambda (G18242@macro*) (for-each (lambda (G18244@x) ((lambda (G18246@loc G18247@proc) (set-symbol-value! G18246@loc G18247@proc)) (car G18244@x) (cadr G18244@x))) G18242@macro*))) (call-with-values (lambda () (G12346@core-library-expander G18167@x G18169@verify-name)) (lambda (G18186@G18177 G18187@G18178 G18188@G18179 G18189@G18180 G18190@G18181 G18191@G18182 G18192@G18183 G18193@G18184 G18194@G18185) ((lambda (G18204@export-env G18205@export-subst G18206@macro* G18207@invoke-code G18208@vis* G18209@inv* G18210@imp* G18211@ver G18212@name) ((lambda (G18222@id G18223@name G18224@ver G18225@imp* G18226@vis* G18227@inv* G18228@visit-proc G18229@invoke-proc G18230@visit-code G18231@invoke-code) (begin (G11129@G10767@install-library G18222@id G18223@name G18224@ver G18225@imp* G18226@vis* G18227@inv* G18205@export-subst G18204@export-env G18228@visit-proc G18229@invoke-proc G18230@visit-code G18231@invoke-code '#t G18168@filename) (values G18222@id G18223@name G18224@ver G18225@imp* G18226@vis* G18227@inv* G18231@invoke-code G18230@visit-code G18205@export-subst G18204@export-env))) (gensym) G18212@name G18211@ver (map G11135@G10779@library-spec G18210@imp*) (map G11135@G10779@library-spec G18208@vis*) (map G11135@G10779@library-spec G18209@inv*) (lambda () (G18176@visit! G18206@macro*)) (lambda () (eval-core (G10559@G10472@expanded->core G18207@invoke-code))) (G18174@build-visit-code G18206@macro*) G18207@invoke-code)) G18194@G18185 G18193@G18184 G18192@G18183 G18191@G18182 G18190@G18181 G18189@G18180 G18188@G18179 G18187@G18178 G18186@G18177))))) '#f '#f)) G18268) (if (= G18269 '2) (apply (lambda (G18258@x G18259@filename) (G12430@library-expander G18258@x G18259@filename (lambda (G18262@x) (values)))) G18268) (if (= G18269 '1) (apply (lambda (G18264@x) (G12430@library-expander G18264@x '#f (lambda (G18266@x) (values)))) G18268) (error 'apply '"invalid arg count"))))) (length G18268)))) (set! G12432@boot-library-expand (lambda (G18270@x) (call-with-values (lambda () (G12430@library-expander G18270@x)) (lambda (G18282@G18272 G18283@G18273 G18284@G18274 G18285@G18275 G18286@G18276 G18287@G18277 G18288@G18278 G18289@G18279 G18290@G18280 G18291@G18281) ((lambda (G18302@export-env G18303@export-subst G18304@visit-code G18305@invoke-code G18306@inv* G18307@vis* G18308@imp* G18309@ver G18310@name G18311@id) (values G18310@name G18305@invoke-code G18303@export-subst G18302@export-env)) G18291@G18281 G18290@G18280 G18289@G18279 G18288@G18278 G18287@G18277 G18286@G18276 G18285@G18275 G18284@G18274 G18283@G18273 G18282@G18272))))) (set! G12434@rev-map-append (lambda (G18322@f G18323@ls G18324@ac) (if (null? G18323@ls) G18324@ac (G12434@rev-map-append G18322@f (cdr G18323@ls) (cons (G18322@f (car G18323@ls)) G18324@ac))))) (set! G12436@build-exports (lambda (G18328@lex*+loc* G18329@init*) (G11489@G11346@build-sequence '#f (cons (G11490@G11348@build-void) (G12434@rev-map-append (lambda (G18332@x) (list 'set! (cdr G18332@x) (car G18332@x))) G18328@lex*+loc* G18329@init*))))) (set! G12438@make-export-subst (lambda (G18334@int* G18335@ext* G18336@rib) (map (lambda (G18340@int G18341@ext) ((lambda (G18344@id) ((lambda (G18346@label) ((lambda () (begin (if G18346@label (void) (G12456@syntax-violation '#f '"cannot export unbound identifier" G18344@id)) (cons G18341@ext G18346@label))))) (G11670@id->label G18344@id))) (G11590@make-stx G18340@int G11514@top-mark* (list G18336@rib) '()))) G18334@int* G18335@ext*))) (set! G12440@make-export-env/macros (lambda (G18348@lex* G18349@loc* G18350@r) ((lambda (G18355@lookup) (begin (set! G18355@lookup (lambda (G18383@x) ((letrec ((G18385@f (lambda (G18387@x G18388@lex* G18389@loc*) (if (pair? G18388@lex*) (if (eq? G18387@x (car G18388@lex*)) (car G18389@loc*) (G18385@f G18387@x (cdr G18388@lex*) (cdr G18389@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G18385@f) G18383@x G18348@lex* G18349@loc*))) ((letrec ((G18356@f (lambda (G18358@r G18359@env G18360@global* G18361@macro*) (if (null? G18358@r) (values G18359@env G18360@global* G18361@macro*) ((lambda (G18366@x) ((lambda (G18368@label G18369@b) ((lambda (G18372@t) (if (eqv? G18372@t 'lexical) ((lambda (G18377@v) ((lambda (G18379@loc G18380@type) (G18356@f (cdr G18358@r) (cons (cons* G18368@label G18380@type G18379@loc) G18359@env) (cons (cons (G12111@lexical-var G18377@v) G18379@loc) G18360@global*) G18361@macro*)) (G18355@lookup (G12111@lexical-var G18377@v)) (if (G12113@lexical-mutable? G18377@v) 'mutable 'global))) (G11680@binding-value G18369@b)) (if (eqv? G18372@t 'local-macro) ((lambda (G18375@loc) (G18356@f (cdr G18358@r) (cons (cons* G18368@label 'global-macro G18375@loc) G18359@env) G18360@global* (cons (cons G18375@loc (G11680@binding-value G18369@b)) G18361@macro*))) (gensym)) (if (eqv? G18372@t 'local-macro!) ((lambda (G18373@loc) (G18356@f (cdr G18358@r) (cons (cons* G18368@label 'global-macro! G18373@loc) G18359@env) G18360@global* (cons (cons G18373@loc (G11680@binding-value G18369@b)) G18361@macro*))) (gensym)) (if (memv G18372@t '($rtd $module)) (G18356@f (cdr G18358@r) (cons G18366@x G18359@env) G18360@global* G18361@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G11678@binding-type G18369@b) (G11680@binding-value G18369@b))))))) (G11678@binding-type G18369@b))) (car G18366@x) (cdr G18366@x))) (car G18358@r)))))) G18356@f) G18350@r '() '() '()))) '#f))) (set! G12442@generate-temporaries (lambda (G18393@ls) ((lambda (G18395@t) ((lambda (G18397@ls/false) (if G18397@ls/false (apply (lambda (G18399@ls) (map (lambda (G18401@x) (G11590@make-stx ((lambda (G18403@x) (if ((lambda (G18405@t) (if G18405@t G18405@t (begin '#f (string? G18403@x)))) (symbol? G18403@x)) (gensym G18403@x) (gensym 't))) (G12462@syntax->datum G18401@x)) G11514@top-mark* '() '())) G18399@ls)) G18397@ls/false) ((lambda (G18407@t) ((lambda (G18409@ls/false) (if G18409@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G18409@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G18407@t))) (G12223@syntax-dispatch G18407@t '_))) G18395@t))) (G12223@syntax-dispatch G18395@t 'each-any))) G18393@ls))) (set! G12444@free-identifier=? (lambda (G18411@x G18412@y) (if (G11644@id? G18411@x) (if (G11644@id? G18412@y) (G11652@free-id=? G18411@x G18412@y) (assertion-violation 'free-identifier=? '"not an identifier" G18412@y)) (assertion-violation 'free-identifier=? '"not an identifier" G18411@x)))) (set! G12446@bound-identifier=? (lambda (G18415@x G18416@y) (if (G11644@id? G18415@x) (if (G11644@id? G18416@y) (G11650@bound-id=? G18415@x G18416@y) (assertion-violation 'bound-identifier=? '"not an identifier" G18416@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G18415@x)))) (set! G12448@extract-position-condition (lambda (G18419@x) ((lambda (G18429@G18424 G18431@G18426 G18433@G18425 G18438@G18423 G18440@make-source-condition G18442@G18421 G18444@G18422 G18446@source-condition? G18448@source-filename G18450@source-line) (begin (set! G18429@G18424 (make-record-type-descriptor '&source-information &condition-rtd 'G18427 '#f '#f '#((immutable file-name) (immutable line)))) (set! G18431@G18426 '#f) (set! G18433@G18425 (make-record-constructor-descriptor G18429@G18424 &condition-rcd G18431@G18426)) (set! G18438@G18423 (record-predicate G18429@G18424)) (set! G18440@make-source-condition (record-constructor G18433@G18425)) (set! G18442@G18421 (record-accessor G18429@G18424 '0)) (set! G18444@G18422 (record-accessor G18429@G18424 '1)) (set! G18446@source-condition? (condition-predicate G18429@G18424)) (set! G18448@source-filename (condition-accessor G18429@G18424 G18442@G18421)) (set! G18450@source-line (condition-accessor G18429@G18424 G18444@G18422)) (if (G11588@stx? G18419@x) ((lambda (G18451@x) (if (G10452@G10239@annotation? G18451@x) ((lambda (G18453@src) (if (pair? G18453@src) (G18440@make-source-condition (car G18453@src) (cdr G18453@src)) (condition))) (G10453@G10241@annotation-source G18451@x)) (condition))) (G11592@stx-expr G18419@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12450@syntax-error (lambda (G18455@x . G18457@args) (begin (if (for-all string? G18457@args) (void) (assertion-violation 'syntax-error '"invalid argument" G18457@args)) (raise (condition (G19169@G18891@make-message-condition (if (null? G18457@args) '"invalid syntax" (apply string-append G18457@args))) (G19241@G19127@make-syntax-violation (G12462@syntax->datum G18455@x) '#f) (G12448@extract-position-condition G18455@x) (G12452@extract-trace G18455@x)))))) (set! G12452@extract-trace (lambda (G18459@x) ((lambda (G18468@G18463 G18470@G18465 G18472@G18464 G18477@G18462 G18479@make-trace G18481@G18461 G18483@trace? G18485@trace-form) (begin (set! G18468@G18463 (make-record-type-descriptor '&trace &condition-rtd 'G18466 '#f '#f '#((immutable form)))) (set! G18470@G18465 '#f) (set! G18472@G18464 (make-record-constructor-descriptor G18468@G18463 &condition-rcd G18470@G18465)) (set! G18477@G18462 (record-predicate G18468@G18463)) (set! G18479@make-trace (record-constructor G18472@G18464)) (set! G18481@G18461 (record-accessor G18468@G18463 '0)) (set! G18483@trace? (condition-predicate G18468@G18463)) (set! G18485@trace-form (condition-accessor G18468@G18463 G18481@G18461)) ((letrec ((G18486@f (lambda (G18488@x) (if (G11588@stx? G18488@x) (apply condition (G18479@make-trace G18488@x) (map G18486@f (G11598@stx-ae* G18488@x))) (if (G10452@G10239@annotation? G18488@x) (G18479@make-trace (G11590@make-stx G18488@x '() '() '())) (condition)))))) G18486@f) G18459@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G12454@syntax-violation* (lambda (G18490@who G18491@msg G18492@form G18493@condition-object) (begin (if (string? G18491@msg) (void) (assertion-violation 'syntax-violation '"message is not a string" G18491@msg)) ((lambda (G18498@who) (raise (condition (if G18498@who (G19215@G19041@make-who-condition G18498@who) (condition)) (G19169@G18891@make-message-condition G18491@msg) G18493@condition-object (G12448@extract-position-condition G18492@form) (G12452@extract-trace G18492@form)))) (if ((lambda (G18500@t) (if G18500@t G18500@t (begin '#f (symbol? G18490@who)))) (string? G18490@who)) G18490@who (if (not G18490@who) ((lambda (G18502@t) ((lambda (G18504@ls/false) (if (if G18504@ls/false (begin '#f (apply (lambda (G18506@id) (G11644@id? G18506@id)) G18504@ls/false)) '#f) (apply (lambda (G18508@id) (G12462@syntax->datum G18508@id)) G18504@ls/false) ((lambda (G18510@t) ((lambda (G18512@ls/false) (if (if G18512@ls/false (begin '#f (apply (lambda (G18514@id G18515@rest) (G11644@id? G18514@id)) G18512@ls/false)) '#f) (apply (lambda (G18518@id G18519@rest) (G12462@syntax->datum G18518@id)) G18512@ls/false) ((lambda (G18522@t) ((lambda (G18524@ls/false) (if G18524@ls/false (apply (lambda () '#f) G18524@ls/false) (G12456@syntax-violation '#f '"invalid syntax" G18522@t))) (G12223@syntax-dispatch G18522@t '_))) G18510@t))) (G12223@syntax-dispatch G18510@t '(any . any)))) G18502@t))) (G12223@syntax-dispatch G18502@t 'any))) G18492@form) (assertion-violation 'syntax-violation '"invalid who argument" G18490@who))))))) (set! G12456@syntax-violation (lambda G18540 ((lambda (G18541) (if (= G18541 '3) (apply (lambda (G18526@who G18527@msg G18528@form) (G12456@syntax-violation G18526@who G18527@msg G18528@form '#f)) G18540) (if (= G18541 '4) (apply (lambda (G18532@who G18533@msg G18534@form G18535@subform) (G12454@syntax-violation* G18532@who G18533@msg G18534@form (G19241@G19127@make-syntax-violation (G12462@syntax->datum G18534@form) (G12462@syntax->datum G18535@subform)))) G18540) (error 'apply '"invalid arg count")))) (length G18540)))) (set! G12458@identifier? (lambda (G18542@x) (G11644@id? G18542@x))) (set! G12460@datum->syntax (lambda (G18544@id G18545@datum) (if (G11644@id? G18544@id) (G11610@datum->stx G18544@id G18545@datum) (assertion-violation 'datum->syntax '"not an identifier" G18544@id)))) (set! G12462@syntax->datum (lambda (G18548@x) (G11666@stx->datum G18548@x))) (set! G12464@compile-r6rs-top-level (lambda (G18550@x*) (call-with-values (lambda () (G12350@top-level-expander G18550@x*)) (lambda (G18554@G18552 G18555@G18553) ((lambda (G18558@invoke-code G18559@lib*) (lambda () (begin (for-each G11131@G10771@invoke-library G18559@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G10559@G10472@expanded->core G18558@invoke-code)) (void)) (eval-core (G10559@G10472@expanded->core G18558@invoke-code))))) G18555@G18553 G18554@G18552))))) (set! G12466@pre-compile-r6rs-top-level (lambda (G18562@x*) (call-with-values (lambda () (G12350@top-level-expander G18562@x*)) (lambda (G18566@G18564 G18567@G18565) ((lambda (G18570@invoke-code G18571@lib*) (begin (for-each G11131@G10771@invoke-library G18571@lib*) (G10458@G10251@compile-core (G10559@G10472@expanded->core G18570@invoke-code)))) G18567@G18565 G18566@G18564))))) (set! G12468@interaction-environment ((lambda (G18574@the-env) (lambda () ((lambda (G18576@t) (if G18576@t G18576@t (begin '#f ((lambda (G18578@lib G18579@rib) (begin ((lambda (G18582@subst) (begin (G11555@set-rib-sym*! G18579@rib (map car G18582@subst)) (G11557@set-rib-mark**! G18579@rib (map (lambda (G18584@x) G11514@top-mark*) G18582@subst)) (G11559@set-rib-label*! G18579@rib (map cdr G18582@subst)))) (G11088@G10685@library-subst G18578@lib)) ((lambda (G18586@env) (begin (set! G18574@the-env G18586@env) G18586@env)) (G12398@make-interaction-env G18579@rib '() '())))) (G11124@G10757@find-library-by-name '(mosh interaction)) (G11563@make-empty-rib))))) G18574@the-env))) '#f)) (set! G12470@top-level-context (G10460@G10255@make-parameter '#f)) (begin (set! G18847@G12470@top-level-context G12470@top-level-context) (set! G18846@G12468@interaction-environment G12468@interaction-environment) (set! G18845@G12466@pre-compile-r6rs-top-level G12466@pre-compile-r6rs-top-level) (set! G18844@G12464@compile-r6rs-top-level G12464@compile-r6rs-top-level) (set! G18843@G12462@syntax->datum G12462@syntax->datum) (set! G18842@G12460@datum->syntax G12460@datum->syntax) (set! G18841@G12458@identifier? G12458@identifier?) (set! G18840@G12456@syntax-violation G12456@syntax-violation) (set! G18839@G12454@syntax-violation* G12454@syntax-violation*) (set! G18838@G12452@extract-trace G12452@extract-trace) (set! G18837@G12450@syntax-error G12450@syntax-error) (set! G18836@G12448@extract-position-condition G12448@extract-position-condition) (set! G18835@G12446@bound-identifier=? G12446@bound-identifier=?) (set! G18834@G12444@free-identifier=? G12444@free-identifier=?) (set! G18833@G12442@generate-temporaries G12442@generate-temporaries) (set! G18832@G12440@make-export-env/macros G12440@make-export-env/macros) (set! G18831@G12438@make-export-subst G12438@make-export-subst) (set! G18830@G12436@build-exports G12436@build-exports) (set! G18829@G12434@rev-map-append G12434@rev-map-append) (set! G18828@G12432@boot-library-expand G12432@boot-library-expand) (set! G18827@G12430@library-expander G12430@library-expander) (set! G18826@G12428@eval G12428@eval) (set! G18825@G12426@expand G12426@expand) (set! G18824@G12424@scheme-report-environment G12424@scheme-report-environment) (set! G18823@G12422@null-environment G12422@null-environment) (set! G18822@G12420@environment G12420@environment) (set! G18821@G12418@environment? G12418@environment?) (set! G18820@G12416@environment-symbols G12416@environment-symbols) (set! G18819@G12414@interaction-environment-symbols G12414@interaction-environment-symbols) (set! G18818@G12412@rp G12412@rp) (set! G18817@G12410@set-interaction-env-locs! G12410@set-interaction-env-locs!) (set! G18816@G12408@set-interaction-env-r! G12408@set-interaction-env-r!) (set! G18815@G12406@set-interaction-env-rib! G12406@set-interaction-env-rib!) (set! G18814@G12404@interaction-env-locs G12404@interaction-env-locs) (set! G18813@G12402@interaction-env-r G12402@interaction-env-r) (set! G18812@G12400@interaction-env-rib G12400@interaction-env-rib) (set! G18811@G12398@make-interaction-env G12398@make-interaction-env) (set! G18810@G12396@interaction-env? G12396@interaction-env?) (set! G18809@G12391@G12383 G12391@G12383) (set! G18808@G12389@G12384 G12389@G12384) (set! G18807@G12387@G12382 G12387@G12382) (set! G18806@G12381@rp G12381@rp) (set! G18805@G12379@set-env-itc! G12379@set-env-itc!) (set! G18804@G12377@set-env-labels! G12377@set-env-labels!) (set! G18803@G12375@set-env-names! G12375@set-env-names!) (set! G18802@G12373@env-itc G12373@env-itc) (set! G18801@G12371@env-labels G12371@env-labels) (set! G18800@G12369@env-names G12369@env-names) (set! G18799@G12367@make-env G12367@make-env) (set! G18798@G12365@env? G12365@env?) (set! G18797@G12360@G12352 G12360@G12352) (set! G18796@G12358@G12353 G12358@G12353) (set! G18795@G12356@G12351 G12356@G12351) (set! G18794@G12350@top-level-expander G12350@top-level-expander) (set! G18793@G12348@parse-top-level-program G12348@parse-top-level-program) (set! G18792@G12346@core-library-expander G12346@core-library-expander) (set! G18791@G12344@library-body-expander G12344@library-body-expander) (set! G18790@G12342@chi-interaction-expr G12342@chi-interaction-expr) (set! G18789@G12340@chi-library-internal G12340@chi-library-internal) (set! G18788@G12338@imp-collector G12338@imp-collector) (set! G18787@G12336@vis-collector G12336@vis-collector) (set! G18786@G12334@inv-collector G12334@inv-collector) (set! G18785@G12332@make-collector G12332@make-collector) (set! G18784@G12330@make-top-rib G12330@make-top-rib) (set! G18783@G12328@parse-import-spec* G12328@parse-import-spec*) (set! G18782@G12326@parse-library G12326@parse-library) (set! G18781@G12324@parse-library-name G12324@parse-library-name) (set! G18780@G12322@parse-exports G12322@parse-exports) (set! G18779@G12320@expand-transformer G12320@expand-transformer) (set! G18778@G12318@chi-body* G12318@chi-body*) (set! G18777@G12316@chi-internal-module G12316@chi-internal-module) (set! G18776@G12314@module-interface-exp-id* G12314@module-interface-exp-id*) (set! G18775@G12312@set-module-interface-exp-lab-vec! G12312@set-module-interface-exp-lab-vec!) (set! G18774@G12310@set-module-interface-exp-id-vec! G12310@set-module-interface-exp-id-vec!) (set! G18773@G12308@set-module-interface-first-mark! G12308@set-module-interface-first-mark!) (set! G18772@G12306@module-interface-exp-lab-vec G12306@module-interface-exp-lab-vec) (set! G18771@G12304@module-interface-exp-id-vec G12304@module-interface-exp-id-vec) (set! G18770@G12302@module-interface-first-mark G12302@module-interface-first-mark) (set! G18769@G12300@make-module-interface G12300@make-module-interface) (set! G18768@G12298@module-interface? G12298@module-interface?) (set! G18767@G12293@G12285 G12293@G12285) (set! G18766@G12291@G12286 G12291@G12286) (set! G18765@G12289@G12284 G12289@G12284) (set! G18764@G12283@parse-module G12283@parse-module) (set! G18763@G12281@chi-internal G12281@chi-internal) (set! G18762@G12279@find-dups G12279@find-dups) (set! G18761@G12277@find-bound=? G12277@find-bound=?) (set! G18760@G12275@chi-rhs* G12275@chi-rhs*) (set! G18759@G12273@expand-interaction-rhs*/init* G12273@expand-interaction-rhs*/init*) (set! G18758@G12271@chi-rhs G12271@chi-rhs) (set! G18757@G12269@chi-defun G12269@chi-defun) (set! G18756@G12267@chi-lambda-clause* G12267@chi-lambda-clause*) (set! G18755@G12265@chi-lambda-clause G12265@chi-lambda-clause) (set! G18754@G12263@verify-formals G12263@verify-formals) (set! G18753@G12261@chi-set! G12261@chi-set!) (set! G18752@G12259@chi-expr G12259@chi-expr) (set! G18751@G12257@chi-application G12257@chi-application) (set! G18750@G12255@chi-expr* G12255@chi-expr*) (set! G18749@G12253@chi-global-macro G12253@chi-global-macro) (set! G18748@G12251@chi-local-macro G12251@chi-local-macro) (set! G18747@G12249@chi-macro G12249@chi-macro) (set! G18746@G12247@do-macro-call G12247@do-macro-call) (set! G18745@G12245@local-macro-transformer G12245@local-macro-transformer) (set! G18744@G12243@macro-transformer G12243@macro-transformer) (set! G18743@G12241@symbol-macro G12241@symbol-macro) (set! G18742@G12239@file-options-macro G12239@file-options-macro) (set! G18741@G12237@core-macro-transformer G12237@core-macro-transformer) (set! G18740@G12235@syntax-transformer G12235@syntax-transformer) (set! G18739@G12233@ellipsis-map G12233@ellipsis-map) (set! G18738@G12231@syntax-case-transformer G12231@syntax-case-transformer) (set! G18737@G12229@verify-literals G12229@verify-literals) (set! G18736@G12227@underscore? G12227@underscore?) (set! G18735@G12225@ellipsis? G12225@ellipsis?) (set! G18734@G12223@syntax-dispatch G12223@syntax-dispatch) (set! G18733@G12221@convert-pattern G12221@convert-pattern) (set! G18732@G12219@foreign-call-transformer G12219@foreign-call-transformer) (set! G18731@G12217@parameterize-transformer G12217@parameterize-transformer) (set! G18730@G12215@incorrect-usage-macro G12215@incorrect-usage-macro) (set! G18729@G12213@define-condition-type-macro G12213@define-condition-type-macro) (set! G18728@G12211@define-record-type-macro G12211@define-record-type-macro) (set! G18727@G12209@define-struct-macro G12209@define-struct-macro) (set! G18726@G12207@quasisyntax-macro G12207@quasisyntax-macro) (set! G18725@G12205@quasiquote-macro G12205@quasiquote-macro) (set! G18724@G12203@syntax-rules-macro G12203@syntax-rules-macro) (set! G18723@G12201@include-into-macro G12201@include-into-macro) (set! G18722@G12199@include-macro G12199@include-macro) (set! G18721@G12197@do-include G12197@do-include) (set! G18720@G12195@cond-macro G12195@cond-macro) (set! G18719@G12193@and-macro G12193@and-macro) (set! G18718@G12191@or-macro G12191@or-macro) (set! G18717@G12189@let*-macro G12189@let*-macro) (set! G18716@G12187@do-macro G12187@do-macro) (set! G18715@G12185@identifier-syntax-macro G12185@identifier-syntax-macro) (set! G18714@G12183@endianness-macro G12183@endianness-macro) (set! G18713@G12181@assert-macro G12181@assert-macro) (set! G18712@G12179@delay-macro G12179@delay-macro) (set! G18711@G12177@time-macro G12177@time-macro) (set! G18710@G12175@define-enumeration-macro G12175@define-enumeration-macro) (set! G18709@G12173@guard-macro G12173@guard-macro) (set! G18708@G12171@trace-letrec-syntax-macro G12171@trace-letrec-syntax-macro) (set! G18707@G12169@trace-let-syntax-macro G12169@trace-let-syntax-macro) (set! G18706@G12167@trace-let/rec-syntax G12167@trace-let/rec-syntax) (set! G18705@G12165@trace-define-syntax-macro G12165@trace-define-syntax-macro) (set! G18704@G12163@trace-define-macro G12163@trace-define-macro) (set! G18703@G12161@trace-lambda-macro G12161@trace-lambda-macro) (set! G18702@G12159@let*-values-macro G12159@let*-values-macro) (set! G18701@G12157@let-values-macro G12157@let-values-macro) (set! G18700@G12155@let-macro G12155@let-macro) (set! G18699@G12153@invalid-fmls-error G12153@invalid-fmls-error) (set! G18698@G12151@with-syntax-macro G12151@with-syntax-macro) (set! G18697@G12149@bless G12149@bless) (set! G18696@G12147@lambda-transformer G12147@lambda-transformer) (set! G18695@G12145@case-lambda-transformer G12145@case-lambda-transformer) (set! G18694@G12143@quote-transformer G12143@quote-transformer) (set! G18693@G12141@case-transformer G12141@case-transformer) (set! G18692@G12139@if-transformer G12139@if-transformer) (set! G18691@G12137@unless-transformer G12137@unless-transformer) (set! G18690@G12135@when-transformer G12135@when-transformer) (set! G18689@G12133@record-constructor-descriptor-transformer G12133@record-constructor-descriptor-transformer) (set! G18688@G12131@record-type-descriptor-transformer G12131@record-type-descriptor-transformer) (set! G18687@G12129@type-descriptor-transformer G12129@type-descriptor-transformer) (set! G18686@G12127@fluid-let-syntax-transformer G12127@fluid-let-syntax-transformer) (set! G18685@G12125@letrec*-transformer G12125@letrec*-transformer) (set! G18684@G12123@letrec-transformer G12123@letrec-transformer) (set! G18683@G12121@letrec-helper G12121@letrec-helper) (set! G18682@G12119@add-lexicals G12119@add-lexicals) (set! G18681@G12117@add-lexical G12117@add-lexical) (set! G18680@G12115@set-lexical-mutable! G12115@set-lexical-mutable!) (set! G18679@G12113@lexical-mutable? G12113@lexical-mutable?) (set! G18678@G12111@lexical-var G12111@lexical-var) (set! G18677@G12109@scheme-stx G12109@scheme-stx) (set! G18676@G12107@scheme-stx-hashtable G12107@scheme-stx-hashtable) (set! G18675@G12105@parse-define-syntax G12105@parse-define-syntax) (set! G18674@G12103@parse-define G12103@parse-define) (set! G18673@G11715@make-eval-transformer G11715@make-eval-transformer) (set! G18672@G11713@variable-transformer-procedure G11713@variable-transformer-procedure) (set! G18671@G11711@variable-transformer? G11711@variable-transformer?) (set! G18670@G11709@make-variable-transformer G11709@make-variable-transformer) (set! G18669@G11707@sanitize-binding G11707@sanitize-binding) (set! G18668@G11684@syntax-type G11684@syntax-type) (set! G18667@G11682@raise-unbound-error G11682@raise-unbound-error) (set! G18666@G11680@binding-value G11680@binding-value) (set! G18665@G11678@binding-type G11678@binding-type) (set! G18664@G11676@make-binding G11676@make-binding) (set! G18663@G11674@label->binding G11674@label->binding) (set! G18662@G11672@id->real-label G11672@id->real-label) (set! G18661@G11670@id->label G11670@id->label) (set! G18660@G11668@same-marks*? G11668@same-marks*?) (set! G18659@G11666@stx->datum G11666@stx->datum) (set! G18658@G11664@strip G11664@strip) (set! G18657@G11662@strip-annotations G11662@strip-annotations) (set! G18656@G11660@self-evaluating? G11660@self-evaluating?) (set! G18655@G11658@bound-id-member? G11658@bound-id-member?) (set! G18654@G11656@distinct-bound-ids? G11656@distinct-bound-ids?) (set! G18653@G11654@valid-bound-ids? G11654@valid-bound-ids?) (set! G18652@G11652@free-id=? G11652@free-id=?) (set! G18651@G11650@bound-id=? G11650@bound-id=?) (set! G18650@G11648@same-marks? G11648@same-marks?) (set! G18649@G11646@id->sym G11646@id->sym) (set! G18648@G11644@id? G11644@id?) (set! G18647@G11642@syntax->list G11642@syntax->list) (set! G18646@G11640@syntax-cdr G11640@syntax-cdr) (set! G18645@G11638@syntax-car G11638@syntax-car) (set! G18644@G11636@syntax-list? G11636@syntax-list?) (set! G18643@G11634@syntax-null? G11634@syntax-null?) (set! G18642@G11632@syntax-vector? G11632@syntax-vector?) (set! G18641@G11630@syntax-pair? G11630@syntax-pair?) (set! G18640@G11628@syntax-vector->list G11628@syntax-vector->list) (set! G18639@G11626@syntax-kind? G11626@syntax-kind?) (set! G18638@G11624@add-subst G11624@add-subst) (set! G18637@G11622@add-mark G11622@add-mark) (set! G18636@G11620@mkstx G11620@mkstx) (set! G18635@G11618@join-wraps G11618@join-wraps) (set! G18634@G11616@anti-mark? G11616@anti-mark?) (set! G18633@G11614@anti-mark G11614@anti-mark) (set! G18632@G11612@gen-mark G11612@gen-mark) (set! G18631@G11610@datum->stx G11610@datum->stx) (set! G18630@G11608@rp G11608@rp) (set! G18629@G11606@set-stx-ae*! G11606@set-stx-ae*!) (set! G18628@G11604@set-stx-subst*! G11604@set-stx-subst*!) (set! G18627@G11602@set-stx-mark*! G11602@set-stx-mark*!) (set! G18626@G11600@set-stx-expr! G11600@set-stx-expr!) (set! G18625@G11598@stx-ae* G11598@stx-ae*) (set! G18624@G11596@stx-subst* G11596@stx-subst*) (set! G18623@G11594@stx-mark* G11594@stx-mark*) (set! G18622@G11592@stx-expr G11592@stx-expr) (set! G18621@G11590@make-stx G11590@make-stx) (set! G18620@G11588@stx? G11588@stx?) (set! G18619@G11583@G11575 G11583@G11575) (set! G18618@G11581@G11576 G11581@G11576) (set! G18617@G11579@G11574 G11579@G11574) (set! G18616@G11573@make-full-rib G11573@make-full-rib) (set! G18615@G11571@unseal-rib! G11571@unseal-rib!) (set! G18614@G11569@seal-rib! G11569@seal-rib!) (set! G18613@G11567@make-rib-map G11567@make-rib-map) (set! G18612@G11565@extend-rib! G11565@extend-rib!) (set! G18611@G11563@make-empty-rib G11563@make-empty-rib) (set! G18610@G11561@set-rib-sealed/freq! G11561@set-rib-sealed/freq!) (set! G18609@G11559@set-rib-label*! G11559@set-rib-label*!) (set! G18608@G11557@set-rib-mark**! G11557@set-rib-mark**!) (set! G18607@G11555@set-rib-sym*! G11555@set-rib-sym*!) (set! G18606@G11553@rib-sealed/freq G11553@rib-sealed/freq) (set! G18605@G11551@rib-label* G11551@rib-label*) (set! G18604@G11549@rib-mark** G11549@rib-mark**) (set! G18603@G11547@rib-sym* G11547@rib-sym*) (set! G18602@G11545@make-rib G11545@make-rib) (set! G18601@G11543@rib? G11543@rib?) (set! G18600@G11538@G11530 G11538@G11530) (set! G18599@G11536@G11531 G11536@G11531) (set! G18598@G11534@G11529 G11534@G11529) (set! G18597@G11528@gen-define-label G11528@gen-define-label) (set! G18596@G11526@gen-define-label+loc G11526@gen-define-label+loc) (set! G18595@G11524@gen-top-level-label G11524@gen-top-level-label) (set! G18594@G11522@gen-label G11522@gen-label) (set! G18593@G11520@gen-global G11520@gen-global) (set! G18592@G11518@gen-lexical G11518@gen-lexical) (set! G18591@G11516@top-marked? G11516@top-marked?) (set! G18590@G11514@top-mark* G11514@top-mark*) (set! G18589@G11509@set-union G11509@set-union) (set! G18588@G11507@set-cons G11507@set-cons) (G11121@G10751@current-library-expander G12430@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G18857@G18852 G18859@G18854 G18861@G18853 G18866@&condition? G18868@make-&condition G18870@&condition-rtd G18872@&condition-rcd G18880@G18875 G18882@G18877 G18884@G18876 G18889@G18874 G18891@make-message-condition G18893@G18873 G18895@message-condition? G18897@condition-message G18904@G18899 G18906@G18901 G18908@G18900 G18913@G18898 G18915@make-warning G18917@warning? G18924@G18919 G18926@G18921 G18928@G18920 G18933@G18918 G18935@make-serious-condition G18937@serious-condition? G18944@G18939 G18946@G18941 G18948@G18940 G18953@G18938 G18955@make-error G18957@error? G18964@G18959 G18966@G18961 G18968@G18960 G18973@G18958 G18975@make-violation G18977@violation? G18984@G18979 G18986@G18981 G18988@G18980 G18993@G18978 G18995@make-assertion-violation G18997@assertion-violation? G19005@G19000 G19007@G19002 G19009@G19001 G19014@G18999 G19016@make-irritants-condition G19018@G18998 G19020@irritants-condition? G19022@condition-irritants G19030@G19025 G19032@G19027 G19034@G19026 G19039@G19024 G19041@make-who-condition G19043@G19023 G19045@who-condition? G19047@condition-who G19054@G19049 G19056@G19051 G19058@G19050 G19063@G19048 G19065@make-non-continuable-violation G19067@non-continuable-violation? G19074@G19069 G19076@G19071 G19078@G19070 G19083@G19068 G19085@make-implementation-restriction-violation G19087@implementation-restriction-violation? G19094@G19089 G19096@G19091 G19098@G19090 G19103@G19088 G19105@make-lexical-violation G19107@lexical-violation? G19116@G19111 G19118@G19113 G19120@G19112 G19125@G19110 G19127@make-syntax-violation G19129@G19108 G19131@G19109 G19133@syntax-violation? G19135@syntax-violation-form G19137@syntax-violation-subform G19144@G19139 G19146@G19141 G19148@G19140 G19153@G19138 G19155@make-undefined-violation G19157@undefined-violation?) (begin (set! G18857@G18852 (make-record-type-descriptor '&condition '#f 'G18855 '#f '#f '#())) (set! G18859@G18854 '#f) (set! G18861@G18853 (make-record-constructor-descriptor G18857@G18852 '#f G18859@G18854)) (set! G18866@&condition? (record-predicate G18857@G18852)) (set! G18868@make-&condition (record-constructor G18861@G18853)) (set! G18870@&condition-rtd G18857@G18852) (set! G18872@&condition-rcd G18861@G18853) (set! G18880@G18875 (make-record-type-descriptor '&message G18857@G18852 'G18878 '#f '#f '#((immutable message)))) (set! G18882@G18877 '#f) (set! G18884@G18876 (make-record-constructor-descriptor G18880@G18875 G18861@G18853 G18882@G18877)) (set! G18889@G18874 (record-predicate G18880@G18875)) (set! G18891@make-message-condition (record-constructor G18884@G18876)) (set! G18893@G18873 (record-accessor G18880@G18875 '0)) (set! G18895@message-condition? (condition-predicate G18880@G18875)) (set! G18897@condition-message (condition-accessor G18880@G18875 G18893@G18873)) (set! G18904@G18899 (make-record-type-descriptor '&warning G18857@G18852 'G18902 '#f '#f '#())) (set! G18906@G18901 '#f) (set! G18908@G18900 (make-record-constructor-descriptor G18904@G18899 G18861@G18853 G18906@G18901)) (set! G18913@G18898 (record-predicate G18904@G18899)) (set! G18915@make-warning (record-constructor G18908@G18900)) (set! G18917@warning? (condition-predicate G18904@G18899)) (set! G18924@G18919 (make-record-type-descriptor '&serious G18857@G18852 'G18922 '#f '#f '#())) (set! G18926@G18921 '#f) (set! G18928@G18920 (make-record-constructor-descriptor G18924@G18919 G18861@G18853 G18926@G18921)) (set! G18933@G18918 (record-predicate G18924@G18919)) (set! G18935@make-serious-condition (record-constructor G18928@G18920)) (set! G18937@serious-condition? (condition-predicate G18924@G18919)) (set! G18944@G18939 (make-record-type-descriptor '&error G18924@G18919 'G18942 '#f '#f '#())) (set! G18946@G18941 '#f) (set! G18948@G18940 (make-record-constructor-descriptor G18944@G18939 G18928@G18920 G18946@G18941)) (set! G18953@G18938 (record-predicate G18944@G18939)) (set! G18955@make-error (record-constructor G18948@G18940)) (set! G18957@error? (condition-predicate G18944@G18939)) (set! G18964@G18959 (make-record-type-descriptor '&violation G18924@G18919 'G18962 '#f '#f '#())) (set! G18966@G18961 '#f) (set! G18968@G18960 (make-record-constructor-descriptor G18964@G18959 G18928@G18920 G18966@G18961)) (set! G18973@G18958 (record-predicate G18964@G18959)) (set! G18975@make-violation (record-constructor G18968@G18960)) (set! G18977@violation? (condition-predicate G18964@G18959)) (set! G18984@G18979 (make-record-type-descriptor '&assertion G18964@G18959 'G18982 '#f '#f '#())) (set! G18986@G18981 '#f) (set! G18988@G18980 (make-record-constructor-descriptor G18984@G18979 G18968@G18960 G18986@G18981)) (set! G18993@G18978 (record-predicate G18984@G18979)) (set! G18995@make-assertion-violation (record-constructor G18988@G18980)) (set! G18997@assertion-violation? (condition-predicate G18984@G18979)) (set! G19005@G19000 (make-record-type-descriptor '&irritants G18857@G18852 'G19003 '#f '#f '#((immutable irritants)))) (set! G19007@G19002 '#f) (set! G19009@G19001 (make-record-constructor-descriptor G19005@G19000 G18861@G18853 G19007@G19002)) (set! G19014@G18999 (record-predicate G19005@G19000)) (set! G19016@make-irritants-condition (record-constructor G19009@G19001)) (set! G19018@G18998 (record-accessor G19005@G19000 '0)) (set! G19020@irritants-condition? (condition-predicate G19005@G19000)) (set! G19022@condition-irritants (condition-accessor G19005@G19000 G19018@G18998)) (set! G19030@G19025 (make-record-type-descriptor '&who G18857@G18852 'G19028 '#f '#f '#((immutable who)))) (set! G19032@G19027 '#f) (set! G19034@G19026 (make-record-constructor-descriptor G19030@G19025 G18861@G18853 G19032@G19027)) (set! G19039@G19024 (record-predicate G19030@G19025)) (set! G19041@make-who-condition (record-constructor G19034@G19026)) (set! G19043@G19023 (record-accessor G19030@G19025 '0)) (set! G19045@who-condition? (condition-predicate G19030@G19025)) (set! G19047@condition-who (condition-accessor G19030@G19025 G19043@G19023)) (set! G19054@G19049 (make-record-type-descriptor '&non-continuable G18964@G18959 'G19052 '#f '#f '#())) (set! G19056@G19051 '#f) (set! G19058@G19050 (make-record-constructor-descriptor G19054@G19049 G18968@G18960 G19056@G19051)) (set! G19063@G19048 (record-predicate G19054@G19049)) (set! G19065@make-non-continuable-violation (record-constructor G19058@G19050)) (set! G19067@non-continuable-violation? (condition-predicate G19054@G19049)) (set! G19074@G19069 (make-record-type-descriptor '&implementation-restriction G18964@G18959 'G19072 '#f '#f '#())) (set! G19076@G19071 '#f) (set! G19078@G19070 (make-record-constructor-descriptor G19074@G19069 G18968@G18960 G19076@G19071)) (set! G19083@G19068 (record-predicate G19074@G19069)) (set! G19085@make-implementation-restriction-violation (record-constructor G19078@G19070)) (set! G19087@implementation-restriction-violation? (condition-predicate G19074@G19069)) (set! G19094@G19089 (make-record-type-descriptor '&lexical G18964@G18959 'G19092 '#f '#f '#())) (set! G19096@G19091 '#f) (set! G19098@G19090 (make-record-constructor-descriptor G19094@G19089 G18968@G18960 G19096@G19091)) (set! G19103@G19088 (record-predicate G19094@G19089)) (set! G19105@make-lexical-violation (record-constructor G19098@G19090)) (set! G19107@lexical-violation? (condition-predicate G19094@G19089)) (set! G19116@G19111 (make-record-type-descriptor '&syntax G18964@G18959 'G19114 '#f '#f '#((immutable form) (immutable subform)))) (set! G19118@G19113 '#f) (set! G19120@G19112 (make-record-constructor-descriptor G19116@G19111 G18968@G18960 G19118@G19113)) (set! G19125@G19110 (record-predicate G19116@G19111)) (set! G19127@make-syntax-violation (record-constructor G19120@G19112)) (set! G19129@G19108 (record-accessor G19116@G19111 '0)) (set! G19131@G19109 (record-accessor G19116@G19111 '1)) (set! G19133@syntax-violation? (condition-predicate G19116@G19111)) (set! G19135@syntax-violation-form (condition-accessor G19116@G19111 G19129@G19108)) (set! G19137@syntax-violation-subform (condition-accessor G19116@G19111 G19131@G19109)) (set! G19144@G19139 (make-record-type-descriptor '&undefined G18964@G18959 'G19142 '#f '#f '#())) (set! G19146@G19141 '#f) (set! G19148@G19140 (make-record-constructor-descriptor G19144@G19139 G18968@G18960 G19146@G19141)) (set! G19153@G19138 (record-predicate G19144@G19139)) (set! G19155@make-undefined-violation (record-constructor G19148@G19140)) (set! G19157@undefined-violation? (condition-predicate G19144@G19139)) (begin (set! G19252@G19157@undefined-violation? G19157@undefined-violation?) (set! G19251@G19155@make-undefined-violation G19155@make-undefined-violation) (set! G19250@G19153@G19138 G19153@G19138) (set! G19249@G19148@G19140 G19148@G19140) (set! G19248@G19146@G19141 G19146@G19141) (set! G19247@G19144@G19139 G19144@G19139) (set! G19246@G19137@syntax-violation-subform G19137@syntax-violation-subform) (set! G19245@G19135@syntax-violation-form G19135@syntax-violation-form) (set! G19244@G19133@syntax-violation? G19133@syntax-violation?) (set! G19243@G19131@G19109 G19131@G19109) (set! G19242@G19129@G19108 G19129@G19108) (set! G19241@G19127@make-syntax-violation G19127@make-syntax-violation) (set! G19240@G19125@G19110 G19125@G19110) (set! G19239@G19120@G19112 G19120@G19112) (set! G19238@G19118@G19113 G19118@G19113) (set! G19237@G19116@G19111 G19116@G19111) (set! G19236@G19107@lexical-violation? G19107@lexical-violation?) (set! G19235@G19105@make-lexical-violation G19105@make-lexical-violation) (set! G19234@G19103@G19088 G19103@G19088) (set! G19233@G19098@G19090 G19098@G19090) (set! G19232@G19096@G19091 G19096@G19091) (set! G19231@G19094@G19089 G19094@G19089) (set! G19230@G19087@implementation-restriction-violation? G19087@implementation-restriction-violation?) (set! G19229@G19085@make-implementation-restriction-violation G19085@make-implementation-restriction-violation) (set! G19228@G19083@G19068 G19083@G19068) (set! G19227@G19078@G19070 G19078@G19070) (set! G19226@G19076@G19071 G19076@G19071) (set! G19225@G19074@G19069 G19074@G19069) (set! G19224@G19067@non-continuable-violation? G19067@non-continuable-violation?) (set! G19223@G19065@make-non-continuable-violation G19065@make-non-continuable-violation) (set! G19222@G19063@G19048 G19063@G19048) (set! G19221@G19058@G19050 G19058@G19050) (set! G19220@G19056@G19051 G19056@G19051) (set! G19219@G19054@G19049 G19054@G19049) (set! G19218@G19047@condition-who G19047@condition-who) (set! G19217@G19045@who-condition? G19045@who-condition?) (set! G19216@G19043@G19023 G19043@G19023) (set! G19215@G19041@make-who-condition G19041@make-who-condition) (set! G19214@G19039@G19024 G19039@G19024) (set! G19213@G19034@G19026 G19034@G19026) (set! G19212@G19032@G19027 G19032@G19027) (set! G19211@G19030@G19025 G19030@G19025) (set! G19210@G19022@condition-irritants G19022@condition-irritants) (set! G19209@G19020@irritants-condition? G19020@irritants-condition?) (set! G19208@G19018@G18998 G19018@G18998) (set! G19207@G19016@make-irritants-condition G19016@make-irritants-condition) (set! G19206@G19014@G18999 G19014@G18999) (set! G19205@G19009@G19001 G19009@G19001) (set! G19204@G19007@G19002 G19007@G19002) (set! G19203@G19005@G19000 G19005@G19000) (set! G19202@G18997@assertion-violation? G18997@assertion-violation?) (set! G19201@G18995@make-assertion-violation G18995@make-assertion-violation) (set! G19200@G18993@G18978 G18993@G18978) (set! G19199@G18988@G18980 G18988@G18980) (set! G19198@G18986@G18981 G18986@G18981) (set! G19197@G18984@G18979 G18984@G18979) (set! G19196@G18977@violation? G18977@violation?) (set! G19195@G18975@make-violation G18975@make-violation) (set! G19194@G18973@G18958 G18973@G18958) (set! G19193@G18968@G18960 G18968@G18960) (set! G19192@G18966@G18961 G18966@G18961) (set! G19191@G18964@G18959 G18964@G18959) (set! G19190@G18957@error? G18957@error?) (set! G19189@G18955@make-error G18955@make-error) (set! G19188@G18953@G18938 G18953@G18938) (set! G19187@G18948@G18940 G18948@G18940) (set! G19186@G18946@G18941 G18946@G18941) (set! G19185@G18944@G18939 G18944@G18939) (set! G19184@G18937@serious-condition? G18937@serious-condition?) (set! G19183@G18935@make-serious-condition G18935@make-serious-condition) (set! G19182@G18933@G18918 G18933@G18918) (set! G19181@G18928@G18920 G18928@G18920) (set! G19180@G18926@G18921 G18926@G18921) (set! G19179@G18924@G18919 G18924@G18919) (set! G19178@G18917@warning? G18917@warning?) (set! G19177@G18915@make-warning G18915@make-warning) (set! G19176@G18913@G18898 G18913@G18898) (set! G19175@G18908@G18900 G18908@G18900) (set! G19174@G18906@G18901 G18906@G18901) (set! G19173@G18904@G18899 G18904@G18899) (set! G19172@G18897@condition-message G18897@condition-message) (set! G19171@G18895@message-condition? G18895@message-condition?) (set! G19170@G18893@G18873 G18893@G18873) (set! G19169@G18891@make-message-condition G18891@make-message-condition) (set! G19168@G18889@G18874 G18889@G18874) (set! G19167@G18884@G18876 G18884@G18876) (set! G19166@G18882@G18877 G18882@G18877) (set! G19165@G18880@G18875 G18880@G18875) (set! G19164@G18872@&condition-rcd G18872@&condition-rcd) (set! G19163@G18870@&condition-rtd G18870@&condition-rtd) (set! G19162@G18868@make-&condition G18868@make-&condition) (set! G19161@G18866@&condition? G18866@&condition?) (set! G19160@G18861@G18853 G18861@G18853) (set! G19159@G18859@G18854 G18859@G18854) (set! G19158@G18857@G18852 G18857@G18852)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G19260@G19255 G19262@G19257 G19264@G19256 G19269@G19254 G19271@make-i/o-error G19273@i/o-error? G19280@G19275 G19282@G19277 G19284@G19276 G19289@G19274 G19291@make-i/o-read-error G19293@i/o-read-error? G19300@G19295 G19302@G19297 G19304@G19296 G19309@G19294 G19311@make-i/o-write-error G19313@i/o-write-error? G19321@G19316 G19323@G19318 G19325@G19317 G19330@G19315 G19332@make-i/o-invalid-position-error G19334@G19314 G19336@i/o-invalid-position-error? G19338@i/o-error-position G19346@G19341 G19348@G19343 G19350@G19342 G19355@G19340 G19357@make-i/o-filename-error G19359@G19339 G19361@i/o-filename-error? G19363@i/o-error-filename G19370@G19365 G19372@G19367 G19374@G19366 G19379@G19364 G19381@make-i/o-file-protection-error G19383@i/o-file-protection-error? G19390@G19385 G19392@G19387 G19394@G19386 G19399@G19384 G19401@make-i/o-file-is-read-only-error G19403@i/o-file-is-read-only-error? G19410@G19405 G19412@G19407 G19414@G19406 G19419@G19404 G19421@make-i/o-file-already-exists-error G19423@i/o-file-already-exists-error? G19430@G19425 G19432@G19427 G19434@G19426 G19439@G19424 G19441@make-i/o-file-does-not-exist-error G19443@i/o-file-does-not-exist-error? G19451@G19446 G19453@G19448 G19455@G19447 G19460@G19445 G19462@make-i/o-port-error G19464@G19444 G19466@i/o-port-error? G19468@i/o-error-port G19475@G19470 G19477@G19472 G19479@G19471 G19484@G19469 G19486@make-i/o-decoding-error G19488@i/o-decoding-error? G19496@G19491 G19498@G19493 G19500@G19492 G19505@G19490 G19507@make-i/o-encoding-error G19509@G19489 G19511@i/o-encoding-error? G19513@i/o-encoding-error-char) (begin (set! G19260@G19255 (make-record-type-descriptor '&i/o &error-rtd 'G19258 '#f '#f '#())) (set! G19262@G19257 '#f) (set! G19264@G19256 (make-record-constructor-descriptor G19260@G19255 &error-rcd G19262@G19257)) (set! G19269@G19254 (record-predicate G19260@G19255)) (set! G19271@make-i/o-error (record-constructor G19264@G19256)) (set! G19273@i/o-error? (condition-predicate G19260@G19255)) (set! G19280@G19275 (make-record-type-descriptor '&i/o-read G19260@G19255 'G19278 '#f '#f '#())) (set! G19282@G19277 '#f) (set! G19284@G19276 (make-record-constructor-descriptor G19280@G19275 G19264@G19256 G19282@G19277)) (set! G19289@G19274 (record-predicate G19280@G19275)) (set! G19291@make-i/o-read-error (record-constructor G19284@G19276)) (set! G19293@i/o-read-error? (condition-predicate G19280@G19275)) (set! G19300@G19295 (make-record-type-descriptor '&i/o-write G19260@G19255 'G19298 '#f '#f '#())) (set! G19302@G19297 '#f) (set! G19304@G19296 (make-record-constructor-descriptor G19300@G19295 G19264@G19256 G19302@G19297)) (set! G19309@G19294 (record-predicate G19300@G19295)) (set! G19311@make-i/o-write-error (record-constructor G19304@G19296)) (set! G19313@i/o-write-error? (condition-predicate G19300@G19295)) (set! G19321@G19316 (make-record-type-descriptor '&i/o-invalid-position G19260@G19255 'G19319 '#f '#f '#((immutable position)))) (set! G19323@G19318 '#f) (set! G19325@G19317 (make-record-constructor-descriptor G19321@G19316 G19264@G19256 G19323@G19318)) (set! G19330@G19315 (record-predicate G19321@G19316)) (set! G19332@make-i/o-invalid-position-error (record-constructor G19325@G19317)) (set! G19334@G19314 (record-accessor G19321@G19316 '0)) (set! G19336@i/o-invalid-position-error? (condition-predicate G19321@G19316)) (set! G19338@i/o-error-position (condition-accessor G19321@G19316 G19334@G19314)) (set! G19346@G19341 (make-record-type-descriptor '&i/o-filename G19260@G19255 'G19344 '#f '#f '#((immutable filename)))) (set! G19348@G19343 '#f) (set! G19350@G19342 (make-record-constructor-descriptor G19346@G19341 G19264@G19256 G19348@G19343)) (set! G19355@G19340 (record-predicate G19346@G19341)) (set! G19357@make-i/o-filename-error (record-constructor G19350@G19342)) (set! G19359@G19339 (record-accessor G19346@G19341 '0)) (set! G19361@i/o-filename-error? (condition-predicate G19346@G19341)) (set! G19363@i/o-error-filename (condition-accessor G19346@G19341 G19359@G19339)) (set! G19370@G19365 (make-record-type-descriptor '&i/o-file-protection G19260@G19255 'G19368 '#f '#f '#())) (set! G19372@G19367 '#f) (set! G19374@G19366 (make-record-constructor-descriptor G19370@G19365 G19264@G19256 G19372@G19367)) (set! G19379@G19364 (record-predicate G19370@G19365)) (set! G19381@make-i/o-file-protection-error (record-constructor G19374@G19366)) (set! G19383@i/o-file-protection-error? (condition-predicate G19370@G19365)) (set! G19390@G19385 (make-record-type-descriptor '&i/o-file-is-read-only G19370@G19365 'G19388 '#f '#f '#())) (set! G19392@G19387 '#f) (set! G19394@G19386 (make-record-constructor-descriptor G19390@G19385 G19374@G19366 G19392@G19387)) (set! G19399@G19384 (record-predicate G19390@G19385)) (set! G19401@make-i/o-file-is-read-only-error (record-constructor G19394@G19386)) (set! G19403@i/o-file-is-read-only-error? (condition-predicate G19390@G19385)) (set! G19410@G19405 (make-record-type-descriptor '&i/o-file-already-exists G19346@G19341 'G19408 '#f '#f '#())) (set! G19412@G19407 '#f) (set! G19414@G19406 (make-record-constructor-descriptor G19410@G19405 G19350@G19342 G19412@G19407)) (set! G19419@G19404 (record-predicate G19410@G19405)) (set! G19421@make-i/o-file-already-exists-error (record-constructor G19414@G19406)) (set! G19423@i/o-file-already-exists-error? (condition-predicate G19410@G19405)) (set! G19430@G19425 (make-record-type-descriptor '&i/o-file-does-not-exist G19346@G19341 'G19428 '#f '#f '#())) (set! G19432@G19427 '#f) (set! G19434@G19426 (make-record-constructor-descriptor G19430@G19425 G19350@G19342 G19432@G19427)) (set! G19439@G19424 (record-predicate G19430@G19425)) (set! G19441@make-i/o-file-does-not-exist-error (record-constructor G19434@G19426)) (set! G19443@i/o-file-does-not-exist-error? (condition-predicate G19430@G19425)) (set! G19451@G19446 (make-record-type-descriptor '&i/o-port G19260@G19255 'G19449 '#f '#f '#((immutable port)))) (set! G19453@G19448 '#f) (set! G19455@G19447 (make-record-constructor-descriptor G19451@G19446 G19264@G19256 G19453@G19448)) (set! G19460@G19445 (record-predicate G19451@G19446)) (set! G19462@make-i/o-port-error (record-constructor G19455@G19447)) (set! G19464@G19444 (record-accessor G19451@G19446 '0)) (set! G19466@i/o-port-error? (condition-predicate G19451@G19446)) (set! G19468@i/o-error-port (condition-accessor G19451@G19446 G19464@G19444)) (set! G19475@G19470 (make-record-type-descriptor '&i/o-decoding G19451@G19446 'G19473 '#f '#f '#())) (set! G19477@G19472 '#f) (set! G19479@G19471 (make-record-constructor-descriptor G19475@G19470 G19455@G19447 G19477@G19472)) (set! G19484@G19469 (record-predicate G19475@G19470)) (set! G19486@make-i/o-decoding-error (record-constructor G19479@G19471)) (set! G19488@i/o-decoding-error? (condition-predicate G19475@G19470)) (set! G19496@G19491 (make-record-type-descriptor '&i/o-encoding G19451@G19446 'G19494 '#f '#f '#((immutable char)))) (set! G19498@G19493 '#f) (set! G19500@G19492 (make-record-constructor-descriptor G19496@G19491 G19455@G19447 G19498@G19493)) (set! G19505@G19490 (record-predicate G19496@G19491)) (set! G19507@make-i/o-encoding-error (record-constructor G19500@G19492)) (set! G19509@G19489 (record-accessor G19496@G19491 '0)) (set! G19511@i/o-encoding-error? (condition-predicate G19496@G19491)) (set! G19513@i/o-encoding-error-char (condition-accessor G19496@G19491 G19509@G19489)) (begin (set! G19593@G19513@i/o-encoding-error-char G19513@i/o-encoding-error-char) (set! G19592@G19511@i/o-encoding-error? G19511@i/o-encoding-error?) (set! G19591@G19509@G19489 G19509@G19489) (set! G19590@G19507@make-i/o-encoding-error G19507@make-i/o-encoding-error) (set! G19589@G19505@G19490 G19505@G19490) (set! G19588@G19500@G19492 G19500@G19492) (set! G19587@G19498@G19493 G19498@G19493) (set! G19586@G19496@G19491 G19496@G19491) (set! G19585@G19488@i/o-decoding-error? G19488@i/o-decoding-error?) (set! G19584@G19486@make-i/o-decoding-error G19486@make-i/o-decoding-error) (set! G19583@G19484@G19469 G19484@G19469) (set! G19582@G19479@G19471 G19479@G19471) (set! G19581@G19477@G19472 G19477@G19472) (set! G19580@G19475@G19470 G19475@G19470) (set! G19579@G19468@i/o-error-port G19468@i/o-error-port) (set! G19578@G19466@i/o-port-error? G19466@i/o-port-error?) (set! G19577@G19464@G19444 G19464@G19444) (set! G19576@G19462@make-i/o-port-error G19462@make-i/o-port-error) (set! G19575@G19460@G19445 G19460@G19445) (set! G19574@G19455@G19447 G19455@G19447) (set! G19573@G19453@G19448 G19453@G19448) (set! G19572@G19451@G19446 G19451@G19446) (set! G19571@G19443@i/o-file-does-not-exist-error? G19443@i/o-file-does-not-exist-error?) (set! G19570@G19441@make-i/o-file-does-not-exist-error G19441@make-i/o-file-does-not-exist-error) (set! G19569@G19439@G19424 G19439@G19424) (set! G19568@G19434@G19426 G19434@G19426) (set! G19567@G19432@G19427 G19432@G19427) (set! G19566@G19430@G19425 G19430@G19425) (set! G19565@G19423@i/o-file-already-exists-error? G19423@i/o-file-already-exists-error?) (set! G19564@G19421@make-i/o-file-already-exists-error G19421@make-i/o-file-already-exists-error) (set! G19563@G19419@G19404 G19419@G19404) (set! G19562@G19414@G19406 G19414@G19406) (set! G19561@G19412@G19407 G19412@G19407) (set! G19560@G19410@G19405 G19410@G19405) (set! G19559@G19403@i/o-file-is-read-only-error? G19403@i/o-file-is-read-only-error?) (set! G19558@G19401@make-i/o-file-is-read-only-error G19401@make-i/o-file-is-read-only-error) (set! G19557@G19399@G19384 G19399@G19384) (set! G19556@G19394@G19386 G19394@G19386) (set! G19555@G19392@G19387 G19392@G19387) (set! G19554@G19390@G19385 G19390@G19385) (set! G19553@G19383@i/o-file-protection-error? G19383@i/o-file-protection-error?) (set! G19552@G19381@make-i/o-file-protection-error G19381@make-i/o-file-protection-error) (set! G19551@G19379@G19364 G19379@G19364) (set! G19550@G19374@G19366 G19374@G19366) (set! G19549@G19372@G19367 G19372@G19367) (set! G19548@G19370@G19365 G19370@G19365) (set! G19547@G19363@i/o-error-filename G19363@i/o-error-filename) (set! G19546@G19361@i/o-filename-error? G19361@i/o-filename-error?) (set! G19545@G19359@G19339 G19359@G19339) (set! G19544@G19357@make-i/o-filename-error G19357@make-i/o-filename-error) (set! G19543@G19355@G19340 G19355@G19340) (set! G19542@G19350@G19342 G19350@G19342) (set! G19541@G19348@G19343 G19348@G19343) (set! G19540@G19346@G19341 G19346@G19341) (set! G19539@G19338@i/o-error-position G19338@i/o-error-position) (set! G19538@G19336@i/o-invalid-position-error? G19336@i/o-invalid-position-error?) (set! G19537@G19334@G19314 G19334@G19314) (set! G19536@G19332@make-i/o-invalid-position-error G19332@make-i/o-invalid-position-error) (set! G19535@G19330@G19315 G19330@G19315) (set! G19534@G19325@G19317 G19325@G19317) (set! G19533@G19323@G19318 G19323@G19318) (set! G19532@G19321@G19316 G19321@G19316) (set! G19531@G19313@i/o-write-error? G19313@i/o-write-error?) (set! G19530@G19311@make-i/o-write-error G19311@make-i/o-write-error) (set! G19529@G19309@G19294 G19309@G19294) (set! G19528@G19304@G19296 G19304@G19296) (set! G19527@G19302@G19297 G19302@G19297) (set! G19526@G19300@G19295 G19300@G19295) (set! G19525@G19293@i/o-read-error? G19293@i/o-read-error?) (set! G19524@G19291@make-i/o-read-error G19291@make-i/o-read-error) (set! G19523@G19289@G19274 G19289@G19274) (set! G19522@G19284@G19276 G19284@G19276) (set! G19521@G19282@G19277 G19282@G19277) (set! G19520@G19280@G19275 G19280@G19275) (set! G19519@G19273@i/o-error? G19273@i/o-error?) (set! G19518@G19271@make-i/o-error G19271@make-i/o-error) (set! G19517@G19269@G19254 G19269@G19254) (set! G19516@G19264@G19256 G19264@G19256) (set! G19515@G19262@G19257 G19262@G19257) (set! G19514@G19260@G19255 G19260@G19255)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G10556@G10466@current-primitive-locations (lambda (G20556@x) ((lambda (G20558@t) (if G20558@t (cdr G20558@t) '#f)) (assq G20556@x '((syntax-error . G18837@G12450@syntax-error) (syntax-dispatch . G18734@G12223@syntax-dispatch) (load . G19742@G19608@load) (interaction-environment . G18846@G12468@interaction-environment) (make-variable-transformer . G18670@G11709@make-variable-transformer) (identifier? . G18841@G12458@identifier?) (generate-temporaries . G18833@G12442@generate-temporaries) (free-identifier=? . G18834@G12444@free-identifier=?) (syntax->datum . G18843@G12462@syntax->datum) (datum->syntax . G18842@G12460@datum->syntax) (bound-identifier=? . G18835@G12446@bound-identifier=?) (make-i/o-write-error . G19530@G19311@make-i/o-write-error) (make-i/o-read-error . G19524@G19291@make-i/o-read-error) (make-i/o-port-error . G19576@G19462@make-i/o-port-error) (make-i/o-invalid-position-error . G19536@G19332@make-i/o-invalid-position-error) (make-i/o-filename-error . G19544@G19357@make-i/o-filename-error) (make-i/o-file-protection-error . G19552@G19381@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G19558@G19401@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G19570@G19441@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G19564@G19421@make-i/o-file-already-exists-error) (make-i/o-error . G19518@G19271@make-i/o-error) (make-i/o-encoding-error . G19590@G19507@make-i/o-encoding-error) (make-i/o-decoding-error . G19584@G19486@make-i/o-decoding-error) (i/o-write-error? . G19531@G19313@i/o-write-error?) (i/o-read-error? . G19525@G19293@i/o-read-error?) (i/o-port-error? . G19578@G19466@i/o-port-error?) (i/o-invalid-position-error? . G19538@G19336@i/o-invalid-position-error?) (i/o-filename-error? . G19546@G19361@i/o-filename-error?) (i/o-file-protection-error? . G19553@G19383@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G19559@G19403@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G19571@G19443@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G19565@G19423@i/o-file-already-exists-error?) (i/o-error? . G19519@G19273@i/o-error?) (i/o-error-port . G19579@G19468@i/o-error-port) (i/o-error-filename . G19547@G19363@i/o-error-filename) (i/o-encoding-error? . G19592@G19511@i/o-encoding-error?) (i/o-encoding-error-char . G19593@G19513@i/o-encoding-error-char) (i/o-decoding-error? . G19585@G19488@i/o-decoding-error?) (scheme-report-environment . G18824@G12424@scheme-report-environment) (null-environment . G18823@G12422@null-environment) (command-line . G19739@G19602@command-line) (eval . G18826@G12428@eval) (environment . G18822@G12420@environment) (who-condition? . G19217@G19045@who-condition?) (warning? . G19178@G18917@warning?) (violation? . G19196@G18977@violation?) (undefined-violation? . G19252@G19157@undefined-violation?) (syntax-violation? . G19244@G19133@syntax-violation?) (syntax-violation-subform . G19246@G19137@syntax-violation-subform) (syntax-violation-form . G19245@G19135@syntax-violation-form) (syntax-violation . G18840@G12456@syntax-violation) (serious-condition? . G19184@G18937@serious-condition?) (non-continuable-violation? . G19224@G19067@non-continuable-violation?) (message-condition? . G19171@G18895@message-condition?) (make-who-condition . G19215@G19041@make-who-condition) (make-warning . G19177@G18915@make-warning) (make-violation . G19195@G18975@make-violation) (make-undefined-violation . G19251@G19155@make-undefined-violation) (make-syntax-violation . G19241@G19127@make-syntax-violation) (make-serious-condition . G19183@G18935@make-serious-condition) (make-non-continuable-violation . G19223@G19065@make-non-continuable-violation) (make-message-condition . G19169@G18891@make-message-condition) (make-lexical-violation . G19235@G19105@make-lexical-violation) (make-irritants-condition . G19207@G19016@make-irritants-condition) (make-implementation-restriction-violation . G19229@G19085@make-implementation-restriction-violation) (make-error . G19189@G18955@make-error) (make-assertion-violation . G19201@G18995@make-assertion-violation) (lexical-violation? . G19236@G19107@lexical-violation?) (irritants-condition? . G19209@G19020@irritants-condition?) (implementation-restriction-violation? . G19230@G19087@implementation-restriction-violation?) (error? . G19190@G18957@error?) (condition-who . G19218@G19047@condition-who) (condition-message . G19172@G18897@condition-message) (condition-irritants . G19210@G19022@condition-irritants) (assertion-violation? . G19202@G18997@assertion-violation?)))))) (G11129@G10767@install-library 'G20512 '(mosh interaction) '() '() '() '() '((string-upcase . G20390) (string-titlecase . G20389) (string-normalize-nfkd . G20388) (string-normalize-nfkc . G20387) (string-normalize-nfd . G20386) (string-normalize-nfc . G20385) (string-foldcase . G20384) (string-downcase . G20383) (string-ci>? . G20382) (string-ci>=? . G20381) (string-ci=? . G20380) (string-ci<? . G20379) (string-ci<=? . G20378) (char-whitespace? . G20377) (char-upper-case? . G20376) (char-title-case? . G20375) (char-numeric? . G20374) (char-lower-case? . G20373) (char-general-category . G20372) (char-upcase . G20371) (char-titlecase . G20370) (char-foldcase . G20369) (char-downcase . G20368) (char-ci>? . G20367) (char-ci>=? . G20366) (char-ci=? . G20365) (char-ci<? . G20364) (char-ci<=? . G20363) (char-alphabetic? . G20362) (make-variable-transformer . G11708) (identifier? . G12457) (generate-temporaries . G12441) (free-identifier=? . G12443) (syntax->datum . G12461) (datum->syntax . G12459) (bound-identifier=? . G12445) (record-type-descriptor? . G20361) (record-predicate . G20360) (record-mutator . G20359) (record-constructor . G20358) (record-accessor . G20357) (make-record-type-descriptor . G20356) (make-record-constructor-descriptor . G20355) (record? . G20354) (record-type-uid . G20353) (record-type-sealed? . G20352) (record-type-parent . G20351) (record-type-opaque? . G20350) (record-type-name . G20349) (record-type-generative? . G20348) (record-type-field-names . G20347) (record-rtd . G20346) (record-field-mutable? . G20345) (delete-file . G20344) (file-exists? . G20343) (vector-sort! . G20342) (vector-sort . G20341) (list-sort . G20340) (symbol-hash . G20339) (string-ci-hash . G20338) (string-hash . G20337) (equal-hash . G20336) (hashtable-equivalence-function . G20335) (make-hashtable . G20334) (hashtable-hash-function . G20333) (make-eqv-hashtable . G20332) (make-eq-hashtable . G20331) (hashtable? . G20330) (hashtable-update! . G20329) (hashtable-size . G20328) (hashtable-set! . G20327) (hashtable-ref . G20326) (hashtable-mutable? . G20325) (hashtable-keys . G20324) (hashtable-entries . G20323) (hashtable-delete! . G20322) (hashtable-copy . G20321) (hashtable-contains? . G20320) (hashtable-clear! . G20319) (call-with-output-file . G20318) (call-with-input-file . G20317) (write-char . G20316) (write . G20315) (with-output-to-file . G20314) (with-input-from-file . G20313) (read-char . G20312) (read . G20311) (peek-char . G20310) (open-output-file . G20309) (open-input-file . G20308) (newline . G20307) (display . G20306) (close-output-port . G20305) (close-input-port . G20304) (eof-object? . G20303) (eof-object . G20302) (current-error-port . G20301) (current-output-port . G20300) (current-input-port . G20299) (output-port? . G20298) (input-port? . G20297) (utf-8-codec . G20296) (utf-16-codec . G20295) (transcoder-error-handling-mode . G20294) (transcoder-eol-style . G20293) (transcoder-codec . G20292) (transcoded-port . G20291) (textual-port? . G20290) (string->bytevector . G20289) (standard-output-port . G20288) (standard-input-port . G20287) (standard-error-port . G20286) (set-port-position! . G20285) (put-u8 . G20284) (put-string . G20283) (put-datum . G20282) (put-char . G20281) (put-bytevector . G20280) (port? . G20279) (port-transcoder . G20278) (port-position . G20277) (port-has-set-port-position!? . G20276) (port-has-port-position? . G20275) (port-eof? . G20274) (output-port-buffer-mode . G20273) (open-string-output-port . G20272) (open-string-input-port . G20271) (open-file-output-port . G20270) (open-file-input/output-port . G20269) (open-file-input-port . G20268) (open-bytevector-output-port . G20267) (open-bytevector-input-port . G20266) (native-transcoder . G20265) (native-eol-style . G20264) (make-transcoder . G20263) (latin-1-codec . G20262) (make-i/o-write-error . G19310) (make-i/o-read-error . G19290) (make-i/o-port-error . G19461) (make-i/o-invalid-position-error . G19331) (make-i/o-filename-error . G19356) (make-i/o-file-protection-error . G19380) (make-i/o-file-is-read-only-error . G19400) (make-i/o-file-does-not-exist-error . G19440) (make-i/o-file-already-exists-error . G19420) (make-i/o-error . G19270) (make-i/o-encoding-error . G19506) (make-i/o-decoding-error . G19485) (make-custom-textual-output-port . G20261) (make-custom-textual-input/output-port . G20260) (make-custom-textual-input-port . G20259) (make-custom-binary-output-port . G20258) (make-custom-binary-input/output-port . G20257) (make-custom-binary-input-port . G20256) (make-bytevector . G20255) (lookahead-u8 . G20254) (lookahead-char . G20253) (i/o-write-error? . G19312) (i/o-read-error? . G19292) (i/o-port-error? . G19465) (i/o-invalid-position-error? . G19335) (i/o-filename-error? . G19360) (i/o-file-protection-error? . G19382) (i/o-file-is-read-only-error? . G19402) (i/o-file-does-not-exist-error? . G19442) (i/o-file-already-exists-error? . G19422) (i/o-error? . G19272) (i/o-error-port . G19467) (i/o-error-filename . G19362) (i/o-encoding-error? . G19510) (i/o-encoding-error-char . G19512) (i/o-decoding-error? . G19487) (get-u8 . G20252) (get-string-n! . G20251) (get-string-n . G20250) (get-string-all . G20249) (get-line . G20248) (get-datum . G20247) (get-char . G20246) (get-bytevector-some . G20245) (get-bytevector-n! . G20244) (get-bytevector-n . G20243) (get-bytevector-all . G20242) (flush-output-port . G20241) (close-port . G20240) (exit . G20233) (command-line . G19601) (string-fill! . G20232) (string-set! . G20231) (set-cdr! . G20230) (set-car! . G20229) (remove . G20228) (remv . G20227) (remp . G20226) (remq . G20225) (partition . G20224) (memv . G20223) (memq . G20222) (memp . G20221) (member . G20220) (exists . G20219) (for-all . G20218) (fold-right . G20217) (fold-left . G20216) (find . G20215) (filter . G20214) (cons* . G20213) (assv . G20212) (assq . G20211) (assp . G20210) (assoc . G20209) (call-with-string-output-port . G20208) (call-with-port . G20207) (call-with-bytevector-output-port . G20206) (bytevector->string . G20205) (buffer-mode? . G20204) (binary-port? . G20203) (with-exception-handler . G20202) (raise-continuable . G20201) (raise . G20200) (eval . G12427) (environment . G12419) (make-enumeration . G20199) (enum-set=? . G20198) (enum-set-universe . G20197) (enum-set-union . G20196) (enum-set-subset? . G20195) (enum-set-projection . G20194) (enum-set-member? . G20193) (enum-set-intersection . G20192) (enum-set-indexer . G20191) (enum-set-difference . G20190) (enum-set-constructor . G20189) (enum-set-complement . G20188) (enum-set->list . G20187) (who-condition? . G19044) (warning? . G18916) (violation? . G18976) (undefined-violation? . G19156) (syntax-violation? . G19132) (syntax-violation-subform . G19136) (syntax-violation-form . G19134) (syntax-violation . G12455) (simple-conditions . G20186) (serious-condition? . G18936) (non-continuable-violation? . G19066) (message-condition? . G18894) (make-who-condition . G19040) (make-warning . G18914) (make-violation . G18974) (make-undefined-violation . G19154) (make-syntax-violation . G19126) (make-serious-condition . G18934) (make-non-continuable-violation . G19064) (make-message-condition . G18890) (make-lexical-violation . G19104) (make-irritants-condition . G19015) (make-implementation-restriction-violation . G19084) (make-error . G18954) (make-assertion-violation . G18994) (lexical-violation? . G19106) (irritants-condition? . G19019) (implementation-restriction-violation? . G19086) (error? . G18956) (condition-who . G19046) (condition-predicate . G20185) (condition-message . G18896) (condition-irritants . G19021) (condition-accessor . G20184) (condition . G20183) (assertion-violation? . G18996) (condition? . G20182) (utf32->string . G20181) (utf16->string . G20180) (utf8->string . G20179) (uint-list->bytevector . G20178) (u8-list->bytevector . G20177) (string->utf8 . G20176) (string->utf32 . G20175) (string->utf16 . G20174) (sint-list->bytevector . G20173) (native-endianness . G20172) (bytevector? . G20171) (bytevector=? . G20170) (bytevector-uint-set! . G20169) (bytevector-uint-ref . G20168) (bytevector-u8-set! . G20167) (bytevector-u8-ref . G20166) (bytevector-u64-set! . G20165) (bytevector-u64-ref . G20164) (bytevector-u64-native-set! . G20163) (bytevector-u64-native-ref . G20162) (bytevector-u32-set! . G20161) (bytevector-u32-ref . G20160) (bytevector-u32-native-set! . G20159) (bytevector-u32-native-ref . G20158) (bytevector-u16-set! . G20157) (bytevector-u16-ref . G20156) (bytevector-u16-native-set! . G20155) (bytevector-u16-native-ref . G20154) (bytevector-sint-set! . G20153) (bytevector-sint-ref . G20152) (bytevector-s8-set! . G20151) (bytevector-s8-ref . G20150) (bytevector-s64-set! . G20149) (bytevector-s64-ref . G20148) (bytevector-s64-native-set! . G20147) (bytevector-s64-native-ref . G20146) (bytevector-s32-set! . G20145) (bytevector-s32-ref . G20144) (bytevector-s32-native-set! . G20143) (bytevector-s32-native-ref . G20142) (bytevector-s16-set! . G20141) (bytevector-s16-ref . G20140) (bytevector-s16-native-set! . G20139) (bytevector-s16-native-ref . G20138) (bytevector-length . G20137) (bytevector-ieee-single-ref . G20136) (bytevector-ieee-single-native-set! . G20135) (bytevector-ieee-single-native-ref . G20134) (bytevector-ieee-double-ref . G20133) (bytevector-ieee-double-native-set! . G20132) (bytevector-ieee-double-native-ref . G20131) (bytevector-fill! . G20130) (bytevector-copy! . G20129) (bytevector-copy . G20128) (bytevector->uint-list . G20127) (bytevector->u8-list . G20126) (bytevector->sint-list . G20125) (no-nans-violation? . G20124) (no-infinities-violation? . G20123) (make-no-nans-violation . G20122) (make-no-infinities-violation . G20121) (real->flonum . G20120) (flzero? . G20119) (fltruncate . G20118) (fltan . G20117) (flsqrt . G20116) (flsin . G20115) (flround . G20114) (flpositive? . G20113) (flonum? . G20112) (flodd? . G20111) (flnumerator . G20110) (flnegative? . G20109) (flnan? . G20108) (flmod0 . G20107) (flmod . G20106) (flmin . G20105) (flmax . G20104) (fllog . G20103) (flinteger? . G20102) (flinfinite? . G20101) (flfloor . G20100) (flfinite? . G20099) (flexpt . G20098) (flexp . G20097) (fleven? . G20096) (fldiv0-and-mod0 . G20095) (fldiv0 . G20094) (fldiv-and-mod . G20093) (fldiv . G20092) (fldenominator . G20091) (flcos . G20090) (flceiling . G20089) (flatan . G20088) (flasin . G20087) (flacos . G20086) (flabs . G20085) (fl>? . G20084) (fl>=? . G20083) (fl=? . G20082) (fl<? . G20081) (fl<=? . G20080) (fl/ . G20079) (fl- . G20078) (fl+ . G20077) (fl* . G20076) (fixnum->flonum . G20075) (fxzero? . G20074) (fxxor . G20073) (fxrotate-bit-field . G20072) (fxreverse-bit-field . G20071) (fxpositive? . G20070) (fxodd? . G20069) (fxnot . G20068) (fxnegative? . G20067) (fxmod0 . G20066) (fxmod . G20065) (fxmin . G20064) (fxmax . G20063) (fxlength . G20062) (fxior . G20061) (fxif . G20060) (fxfirst-bit-set . G20059) (fxeven? . G20058) (fxdiv0-and-mod0 . G20057) (fxdiv0 . G20056) (fxdiv-and-mod . G20055) (fxdiv . G20054) (fxcopy-bit-field . G20053) (fxcopy-bit . G20052) (fxbit-set? . G20051) (fxbit-field . G20050) (fxbit-count . G20049) (fxarithmetic-shift-right . G20048) (fxarithmetic-shift-left . G20047) (fxarithmetic-shift . G20046) (fxand . G20045) (fx>? . G20044) (fx>=? . G20043) (fx=? . G20042) (fx<? . G20041) (fx<=? . G20040) (fx-/carry . G20039) (fx- . G20038) (fx+/carry . G20037) (fx+ . G20036) (fx*/carry . G20035) (fx* . G20034) (greatest-fixnum . G20033) (least-fixnum . G20032) (fixnum-width . G20031) (fixnum? . G20030) (bitwise-rotate-bit-field . G20029) (bitwise-reverse-bit-field . G20028) (bitwise-length . G20027) (bitwise-if . G20026) (bitwise-first-bit-set . G20025) (bitwise-copy-bit-field . G20024) (bitwise-copy-bit . G20023) (bitwise-bit-set? . G20022) (bitwise-bit-field . G20021) (bitwise-bit-count . G20020) (bitwise-xor . G20019) (bitwise-ior . G20018) (bitwise-and . G20017) (bitwise-not . G20016) (bitwise-arithmetic-shift-right . G20015) (bitwise-arithmetic-shift-left . G20014) (bitwise-arithmetic-shift . G20013) (zero? . G20012) (vector? . G20011) (vector-set! . G20010) (vector-ref . G20009) (vector-map . G20008) (vector-length . G20007) (vector-for-each . G20006) (vector-fill! . G20005) (vector->list . G20004) (vector . G20003) (values . G20002) (truncate . G20001) (tan . G20000) (symbol? . G19999) (symbol=? . G19998) (symbol->string . G19997) (substring . G19996) (string? . G19995) (string>? . G19994) (string>=? . G19993) (string=? . G19992) (string<? . G19991) (string<=? . G19990) (string-ref . G19989) (string-length . G19988) (string-for-each . G19987) (string-copy . G19986) (string-append . G19985) (string->symbol . G19984) (string->number . G19983) (string->list . G19982) (string . G19981) (sqrt . G19980) (sin . G19979) (round . G19978) (reverse . G19977) (real? . G19976) (real-valued? . G19975) (real-part . G19974) (rationalize . G19973) (rational? . G19972) (rational-valued? . G19971) (procedure? . G19970) (positive? . G19969) (pair? . G19968) (odd? . G19967) (numerator . G19966) (number? . G19965) (number->string . G19964) (null? . G19963) (not . G19962) (negative? . G19961) (nan? . G19960) (min . G19959) (max . G19958) (map . G19957) (make-vector . G19956) (make-string . G19955) (make-rectangular . G19954) (make-polar . G19953) (magnitude . G19952) (log . G19951) (list? . G19950) (list-tail . G19949) (list-ref . G19948) (list->vector . G19947) (list->string . G19946) (list . G19945) (length . G19944) (lcm . G19943) (integer? . G19942) (integer-valued? . G19941) (integer->char . G19940) (infinite? . G19939) (inexact? . G19938) (inexact . G19937) (imag-part . G19936) (gcd . G19935) (for-each . G19934) (floor . G19933) (finite? . G19932) (expt . G19931) (exp . G19930) (exact? . G19929) (exact-integer-sqrt . G19928) (exact . G19927) (even? . G19926) (error . G19925) (eqv? . G19924) (equal? . G19923) (eq? . G19922) (dynamic-wind . G19921) (div0-and-mod0 . G19920) (mod0 . G19919) (div0 . G19918) (div-and-mod . G19917) (mod . G19916) (div . G19915) (denominator . G19914) (cos . G19913) (cons . G19912) (complex? . G19911) (char? . G19910) (char>? . G19909) (char>=? . G19908) (char=? . G19907) (char<? . G19906) (char<=? . G19905) (char->integer . G19904) (ceiling . G19903) (call-with-values . G19902) (call/cc . G19901) (call-with-current-continuation . G19900) (cddddr . G19899) (cdddar . G19898) (cddadr . G19897) (cddaar . G19896) (cdaddr . G19895) (cdadar . G19894) (cdaadr . G19893) (cdaaar . G19892) (cadddr . G19891) (caddar . G19890) (cadadr . G19889) (cadaar . G19888) (caaddr . G19887) (caadar . G19886) (caaadr . G19885) (caaaar . G19884) (cdddr . G19883) (cddar . G19882) (cdadr . G19881) (cdaar . G19880) (caddr . G19879) (cadar . G19878) (caadr . G19877) (caaar . G19876) (cddr . G19875) (cdar . G19874) (cadr . G19873) (caar . G19872) (cdr . G19871) (car . G19870) (boolean? . G19869) (boolean=? . G19868) (atan . G19867) (assertion-violation . G19866) (asin . G19865) (apply . G19864) (append . G19863) (angle . G19862) (acos . G19861) (abs . G19860) (/ . G19859) (* . G19858) (- . G19857) (+ . G19856) (>= . G19855) (> . G19854) (= . G19853) (<= . G19852) (< . G19851) (library . G19850) (export . G19849) (&no-nans . G19848) (&no-infinities . G19847) (&i/o-encoding . G19846) (&i/o-decoding . G19845) (&i/o-port . G19844) (&i/o-file-does-not-exist . G19843) (&i/o-file-already-exists . G19842) (&i/o-file-is-read-only . G19841) (&i/o-file-protection . G19840) (&i/o-filename . G19839) (&i/o-invalid-position . G19838) (&i/o-write . G19837) (&i/o-read . G19836) (&i/o . G19835) (&undefined . G19834) (&syntax . G19833) (&lexical . G19832) (&implementation-restriction . G19831) (&non-continuable . G19830) (&who . G19829) (&irritants . G19828) (&assertion . G19827) (&violation . G19826) (&error . G19825) (&serious . G19824) (&warning . G19823) (&message . G19822) (&condition . G19821) (define-condition-type . G19820) (define-enumeration . G19819) (define-record-type . G19818) (parent-rtd . G19817) (nongenerative . G19816) (opaque . G19815) (sealed . G19814) (protocol . G19813) (parent . G19812) (immutable . G19811) (mutable . G19810) (fields . G19809) (error-handling-mode . G19808) (file-options . G19807) (buffer-mode . G19806) (eol-style . G19805) (guard . G19804) (unsyntax-splicing . G19801) (unsyntax . G19800) (unquote-splicing . G19799) (unquote . G19798) (_ . G19797) (else . G19796) (=> . G19795) (... . G19794) (assert . G19793) (endianness . G19792) (or . G19789) (and . G19788) (do . G19787) (cond . G19786) (let* . G19785) (let . G19784) (let*-values . G19783) (let-values . G19782) (identifier-syntax . G19781) (with-syntax . G19780) (quasisyntax . G19779) (quasiquote . G19778) (syntax-rules . G19777) (include . G19776) (record-constructor-descriptor . G19774) (record-type-descriptor . G19773) (case . G19772) (unless . G19770) (when . G19769) (if . G19768) (letrec* . G19767) (letrec . G19766) (case-lambda . G19764) (lambda . G19763) (syntax . G19762) (syntax-case . G19761) (quote . G19760) (letrec-syntax . G19758) (let-syntax . G19757) (set! . G19756) (import . G19755) (begin . G19754) (define-syntax . G19752) (define . G19751)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20513 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G19799) (unquote . G19798) (delay . G19791) (or . G19789) (and . G19788) (do . G19787) (cond . G19786) (let* . G19785) (let . G19784) (quasiquote . G19778) (syntax-rules . G19777) (case . G19772) (if . G19768) (letrec . G19766) (lambda . G19763) (quote . G19760) (letrec-syntax . G19758) (let-syntax . G19757) (set! . G19756) (begin . G19754) (define-syntax . G19752) (define . G19751)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20514 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G20382) (string-ci>=? . G20381) (string-ci=? . G20380) (string-ci<? . G20379) (string-ci<=? . G20378) (char-whitespace? . G20377) (char-upper-case? . G20376) (char-numeric? . G20374) (char-lower-case? . G20373) (char-upcase . G20371) (char-downcase . G20368) (char-ci>? . G20367) (char-ci>=? . G20366) (char-ci=? . G20365) (char-ci<? . G20364) (char-ci<=? . G20363) (char-alphabetic? . G20362) (call-with-output-file . G20318) (call-with-input-file . G20317) (write-char . G20316) (write . G20315) (with-output-to-file . G20314) (with-input-from-file . G20313) (read-char . G20312) (read . G20311) (peek-char . G20310) (open-output-file . G20309) (open-input-file . G20308) (newline . G20307) (display . G20306) (close-output-port . G20305) (close-input-port . G20304) (eof-object . G20302) (current-output-port . G20300) (current-input-port . G20299) (output-port? . G20298) (input-port? . G20297) (scheme-report-environment . G12423) (quotient . G20239) (null-environment . G12421) (remainder . G20238) (modulo . G20237) (inexact->exact . G20236) (force . G20235) (exact->inexact . G20234) (string-fill! . G20232) (string-set! . G20231) (set-cdr! . G20230) (set-car! . G20229) (memv . G20223) (memq . G20222) (member . G20220) (assv . G20212) (assq . G20211) (assoc . G20209) (eval . G12427) (zero? . G20012) (vector? . G20011) (vector-set! . G20010) (vector-ref . G20009) (vector-length . G20007) (vector-fill! . G20005) (vector->list . G20004) (vector . G20003) (values . G20002) (truncate . G20001) (tan . G20000) (symbol? . G19999) (symbol->string . G19997) (substring . G19996) (string? . G19995) (string>? . G19994) (string>=? . G19993) (string=? . G19992) (string<? . G19991) (string<=? . G19990) (string-ref . G19989) (string-length . G19988) (string-copy . G19986) (string-append . G19985) (string->symbol . G19984) (string->number . G19983) (string->list . G19982) (string . G19981) (sqrt . G19980) (sin . G19979) (round . G19978) (reverse . G19977) (real? . G19976) (real-part . G19974) (rationalize . G19973) (rational? . G19972) (procedure? . G19970) (positive? . G19969) (pair? . G19968) (odd? . G19967) (numerator . G19966) (number? . G19965) (number->string . G19964) (not . G19962) (negative? . G19961) (min . G19959) (max . G19958) (map . G19957) (make-vector . G19956) (make-string . G19955) (make-rectangular . G19954) (make-polar . G19953) (magnitude . G19952) (log . G19951) (list? . G19950) (list-tail . G19949) (list-ref . G19948) (list->vector . G19947) (list->string . G19946) (list . G19945) (length . G19944) (lcm . G19943) (integer? . G19942) (integer->char . G19940) (inexact? . G19938) (imag-part . G19936) (gcd . G19935) (for-each . G19934) (floor . G19933) (expt . G19931) (exp . G19930) (exact? . G19929) (even? . G19926) (eqv? . G19924) (equal? . G19923) (eq? . G19922) (dynamic-wind . G19921) (denominator . G19914) (cos . G19913) (cons . G19912) (complex? . G19911) (char? . G19910) (char>? . G19909) (char>=? . G19908) (char=? . G19907) (char<? . G19906) (char<=? . G19905) (char->integer . G19904) (ceiling . G19903) (call-with-values . G19902) (call-with-current-continuation . G19900) (cddddr . G19899) (cdddar . G19898) (cddadr . G19897) (cddaar . G19896) (cdaddr . G19895) (cdadar . G19894) (cdaadr . G19893) (cdaaar . G19892) (cadddr . G19891) (caddar . G19890) (cadadr . G19889) (cadaar . G19888) (caaddr . G19887) (caadar . G19886) (caaadr . G19885) (caaaar . G19884) (cdddr . G19883) (cddar . G19882) (cdadr . G19881) (cdaar . G19880) (caddr . G19879) (cadar . G19878) (caadr . G19877) (caaar . G19876) (cddr . G19875) (cdar . G19874) (cadr . G19873) (caar . G19872) (cdr . G19871) (car . G19870) (boolean? . G19869) (atan . G19867) (asin . G19865) (apply . G19864) (append . G19863) (angle . G19862) (acos . G19861) (abs . G19860) (/ . G19859) (* . G19858) (- . G19857) (+ . G19856) (>= . G19855) (> . G19854) (= . G19853) (<= . G19852) (< . G19851) (unquote-splicing . G19799) (unquote . G19798) (delay . G19791) (or . G19789) (and . G19788) (do . G19787) (cond . G19786) (let* . G19785) (let . G19784) (quasiquote . G19778) (syntax-rules . G19777) (case . G19772) (if . G19768) (letrec . G19766) (lambda . G19763) (quote . G19760) (letrec-syntax . G19758) (let-syntax . G19757) (set! . G19756) (begin . G19754) (define-syntax . G19752) (define . G19751)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20515 '(psyntax modules) '() '() '() '() '((module . G19753)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20516 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20517 '(rnrs) '(6) '() '() '() '((regexp? . G20448) (string-upcase . G20390) (string-titlecase . G20389) (string-normalize-nfkd . G20388) (string-normalize-nfkc . G20387) (string-normalize-nfd . G20386) (string-normalize-nfc . G20385) (string-foldcase . G20384) (string-downcase . G20383) (string-ci>? . G20382) (string-ci>=? . G20381) (string-ci=? . G20380) (string-ci<? . G20379) (string-ci<=? . G20378) (char-whitespace? . G20377) (char-upper-case? . G20376) (char-title-case? . G20375) (char-numeric? . G20374) (char-lower-case? . G20373) (char-general-category . G20372) (char-upcase . G20371) (char-titlecase . G20370) (char-foldcase . G20369) (char-downcase . G20368) (char-ci>? . G20367) (char-ci>=? . G20366) (char-ci=? . G20365) (char-ci<? . G20364) (char-ci<=? . G20363) (char-alphabetic? . G20362) (make-variable-transformer . G11708) (identifier? . G12457) (generate-temporaries . G12441) (free-identifier=? . G12443) (syntax->datum . G12461) (datum->syntax . G12459) (bound-identifier=? . G12445) (record-type-descriptor? . G20361) (record-predicate . G20360) (record-mutator . G20359) (record-constructor . G20358) (record-accessor . G20357) (make-record-type-descriptor . G20356) (make-record-constructor-descriptor . G20355) (record? . G20354) (record-type-uid . G20353) (record-type-sealed? . G20352) (record-type-parent . G20351) (record-type-opaque? . G20350) (record-type-name . G20349) (record-type-generative? . G20348) (record-type-field-names . G20347) (record-rtd . G20346) (record-field-mutable? . G20345) (delete-file . G20344) (file-exists? . G20343) (vector-sort! . G20342) (vector-sort . G20341) (list-sort . G20340) (symbol-hash . G20339) (string-ci-hash . G20338) (string-hash . G20337) (equal-hash . G20336) (hashtable-equivalence-function . G20335) (make-hashtable . G20334) (hashtable-hash-function . G20333) (make-eqv-hashtable . G20332) (make-eq-hashtable . G20331) (hashtable? . G20330) (hashtable-update! . G20329) (hashtable-size . G20328) (hashtable-set! . G20327) (hashtable-ref . G20326) (hashtable-mutable? . G20325) (hashtable-keys . G20324) (hashtable-entries . G20323) (hashtable-delete! . G20322) (hashtable-copy . G20321) (hashtable-contains? . G20320) (hashtable-clear! . G20319) (call-with-output-file . G20318) (call-with-input-file . G20317) (write-char . G20316) (write . G20315) (with-output-to-file . G20314) (with-input-from-file . G20313) (read-char . G20312) (read . G20311) (peek-char . G20310) (open-output-file . G20309) (open-input-file . G20308) (newline . G20307) (display . G20306) (close-output-port . G20305) (close-input-port . G20304) (eof-object? . G20303) (eof-object . G20302) (current-error-port . G20301) (current-output-port . G20300) (current-input-port . G20299) (output-port? . G20298) (input-port? . G20297) (utf-8-codec . G20296) (utf-16-codec . G20295) (transcoder-error-handling-mode . G20294) (transcoder-eol-style . G20293) (transcoder-codec . G20292) (transcoded-port . G20291) (textual-port? . G20290) (string->bytevector . G20289) (standard-output-port . G20288) (standard-input-port . G20287) (standard-error-port . G20286) (set-port-position! . G20285) (put-u8 . G20284) (put-string . G20283) (put-datum . G20282) (put-char . G20281) (put-bytevector . G20280) (port? . G20279) (port-transcoder . G20278) (port-position . G20277) (port-has-set-port-position!? . G20276) (port-has-port-position? . G20275) (port-eof? . G20274) (output-port-buffer-mode . G20273) (open-string-output-port . G20272) (open-string-input-port . G20271) (open-file-output-port . G20270) (open-file-input/output-port . G20269) (open-file-input-port . G20268) (open-bytevector-output-port . G20267) (open-bytevector-input-port . G20266) (native-transcoder . G20265) (native-eol-style . G20264) (make-transcoder . G20263) (latin-1-codec . G20262) (make-i/o-write-error . G19310) (make-i/o-read-error . G19290) (make-i/o-port-error . G19461) (make-i/o-invalid-position-error . G19331) (make-i/o-filename-error . G19356) (make-i/o-file-protection-error . G19380) (make-i/o-file-is-read-only-error . G19400) (make-i/o-file-does-not-exist-error . G19440) (make-i/o-file-already-exists-error . G19420) (make-i/o-error . G19270) (make-i/o-encoding-error . G19506) (make-i/o-decoding-error . G19485) (make-custom-textual-output-port . G20261) (make-custom-textual-input/output-port . G20260) (make-custom-textual-input-port . G20259) (make-custom-binary-output-port . G20258) (make-custom-binary-input/output-port . G20257) (make-custom-binary-input-port . G20256) (make-bytevector . G20255) (lookahead-u8 . G20254) (lookahead-char . G20253) (i/o-write-error? . G19312) (i/o-read-error? . G19292) (i/o-port-error? . G19465) (i/o-invalid-position-error? . G19335) (i/o-filename-error? . G19360) (i/o-file-protection-error? . G19382) (i/o-file-is-read-only-error? . G19402) (i/o-file-does-not-exist-error? . G19442) (i/o-file-already-exists-error? . G19422) (i/o-error? . G19272) (i/o-error-port . G19467) (i/o-error-filename . G19362) (i/o-encoding-error? . G19510) (i/o-encoding-error-char . G19512) (i/o-decoding-error? . G19487) (get-u8 . G20252) (get-string-n! . G20251) (get-string-n . G20250) (get-string-all . G20249) (get-line . G20248) (get-datum . G20247) (get-char . G20246) (get-bytevector-some . G20245) (get-bytevector-n! . G20244) (get-bytevector-n . G20243) (get-bytevector-all . G20242) (flush-output-port . G20241) (close-port . G20240) (exit . G20233) (command-line . G19601) (remove . G20228) (remv . G20227) (remp . G20226) (remq . G20225) (partition . G20224) (memv . G20223) (memq . G20222) (memp . G20221) (member . G20220) (exists . G20219) (for-all . G20218) (fold-right . G20217) (fold-left . G20216) (find . G20215) (filter . G20214) (cons* . G20213) (assv . G20212) (assq . G20211) (assp . G20210) (assoc . G20209) (call-with-string-output-port . G20208) (call-with-port . G20207) (call-with-bytevector-output-port . G20206) (bytevector->string . G20205) (buffer-mode? . G20204) (binary-port? . G20203) (with-exception-handler . G20202) (raise-continuable . G20201) (raise . G20200) (make-enumeration . G20199) (enum-set=? . G20198) (enum-set-universe . G20197) (enum-set-union . G20196) (enum-set-subset? . G20195) (enum-set-projection . G20194) (enum-set-member? . G20193) (enum-set-intersection . G20192) (enum-set-indexer . G20191) (enum-set-difference . G20190) (enum-set-constructor . G20189) (enum-set-complement . G20188) (enum-set->list . G20187) (who-condition? . G19044) (warning? . G18916) (violation? . G18976) (undefined-violation? . G19156) (syntax-violation? . G19132) (syntax-violation-subform . G19136) (syntax-violation-form . G19134) (syntax-violation . G12455) (simple-conditions . G20186) (serious-condition? . G18936) (non-continuable-violation? . G19066) (message-condition? . G18894) (make-who-condition . G19040) (make-warning . G18914) (make-violation . G18974) (make-undefined-violation . G19154) (make-syntax-violation . G19126) (make-serious-condition . G18934) (make-non-continuable-violation . G19064) (make-message-condition . G18890) (make-lexical-violation . G19104) (make-irritants-condition . G19015) (make-implementation-restriction-violation . G19084) (make-error . G18954) (make-assertion-violation . G18994) (lexical-violation? . G19106) (irritants-condition? . G19019) (implementation-restriction-violation? . G19086) (error? . G18956) (condition-who . G19046) (condition-predicate . G20185) (condition-message . G18896) (condition-irritants . G19021) (condition-accessor . G20184) (condition . G20183) (assertion-violation? . G18996) (condition? . G20182) (utf32->string . G20181) (utf16->string . G20180) (utf8->string . G20179) (uint-list->bytevector . G20178) (u8-list->bytevector . G20177) (string->utf8 . G20176) (string->utf32 . G20175) (string->utf16 . G20174) (sint-list->bytevector . G20173) (native-endianness . G20172) (bytevector? . G20171) (bytevector=? . G20170) (bytevector-uint-set! . G20169) (bytevector-uint-ref . G20168) (bytevector-u8-set! . G20167) (bytevector-u8-ref . G20166) (bytevector-u64-set! . G20165) (bytevector-u64-ref . G20164) (bytevector-u64-native-set! . G20163) (bytevector-u64-native-ref . G20162) (bytevector-u32-set! . G20161) (bytevector-u32-ref . G20160) (bytevector-u32-native-set! . G20159) (bytevector-u32-native-ref . G20158) (bytevector-u16-set! . G20157) (bytevector-u16-ref . G20156) (bytevector-u16-native-set! . G20155) (bytevector-u16-native-ref . G20154) (bytevector-sint-set! . G20153) (bytevector-sint-ref . G20152) (bytevector-s8-set! . G20151) (bytevector-s8-ref . G20150) (bytevector-s64-set! . G20149) (bytevector-s64-ref . G20148) (bytevector-s64-native-set! . G20147) (bytevector-s64-native-ref . G20146) (bytevector-s32-set! . G20145) (bytevector-s32-ref . G20144) (bytevector-s32-native-set! . G20143) (bytevector-s32-native-ref . G20142) (bytevector-s16-set! . G20141) (bytevector-s16-ref . G20140) (bytevector-s16-native-set! . G20139) (bytevector-s16-native-ref . G20138) (bytevector-length . G20137) (bytevector-ieee-single-ref . G20136) (bytevector-ieee-single-native-set! . G20135) (bytevector-ieee-single-native-ref . G20134) (bytevector-ieee-double-ref . G20133) (bytevector-ieee-double-native-set! . G20132) (bytevector-ieee-double-native-ref . G20131) (bytevector-fill! . G20130) (bytevector-copy! . G20129) (bytevector-copy . G20128) (bytevector->uint-list . G20127) (bytevector->u8-list . G20126) (bytevector->sint-list . G20125) (no-nans-violation? . G20124) (no-infinities-violation? . G20123) (make-no-nans-violation . G20122) (make-no-infinities-violation . G20121) (real->flonum . G20120) (flzero? . G20119) (fltruncate . G20118) (fltan . G20117) (flsqrt . G20116) (flsin . G20115) (flround . G20114) (flpositive? . G20113) (flonum? . G20112) (flodd? . G20111) (flnumerator . G20110) (flnegative? . G20109) (flnan? . G20108) (flmod0 . G20107) (flmod . G20106) (flmin . G20105) (flmax . G20104) (fllog . G20103) (flinteger? . G20102) (flinfinite? . G20101) (flfloor . G20100) (flfinite? . G20099) (flexpt . G20098) (flexp . G20097) (fleven? . G20096) (fldiv0-and-mod0 . G20095) (fldiv0 . G20094) (fldiv-and-mod . G20093) (fldiv . G20092) (fldenominator . G20091) (flcos . G20090) (flceiling . G20089) (flatan . G20088) (flasin . G20087) (flacos . G20086) (flabs . G20085) (fl>? . G20084) (fl>=? . G20083) (fl=? . G20082) (fl<? . G20081) (fl<=? . G20080) (fl/ . G20079) (fl- . G20078) (fl+ . G20077) (fl* . G20076) (fixnum->flonum . G20075) (fxzero? . G20074) (fxxor . G20073) (fxrotate-bit-field . G20072) (fxreverse-bit-field . G20071) (fxpositive? . G20070) (fxodd? . G20069) (fxnot . G20068) (fxnegative? . G20067) (fxmod0 . G20066) (fxmod . G20065) (fxmin . G20064) (fxmax . G20063) (fxlength . G20062) (fxior . G20061) (fxif . G20060) (fxfirst-bit-set . G20059) (fxeven? . G20058) (fxdiv0-and-mod0 . G20057) (fxdiv0 . G20056) (fxdiv-and-mod . G20055) (fxdiv . G20054) (fxcopy-bit-field . G20053) (fxcopy-bit . G20052) (fxbit-set? . G20051) (fxbit-field . G20050) (fxbit-count . G20049) (fxarithmetic-shift-right . G20048) (fxarithmetic-shift-left . G20047) (fxarithmetic-shift . G20046) (fxand . G20045) (fx>? . G20044) (fx>=? . G20043) (fx=? . G20042) (fx<? . G20041) (fx<=? . G20040) (fx-/carry . G20039) (fx- . G20038) (fx+/carry . G20037) (fx+ . G20036) (fx*/carry . G20035) (fx* . G20034) (greatest-fixnum . G20033) (least-fixnum . G20032) (fixnum-width . G20031) (fixnum? . G20030) (bitwise-rotate-bit-field . G20029) (bitwise-reverse-bit-field . G20028) (bitwise-length . G20027) (bitwise-if . G20026) (bitwise-first-bit-set . G20025) (bitwise-copy-bit-field . G20024) (bitwise-copy-bit . G20023) (bitwise-bit-set? . G20022) (bitwise-bit-field . G20021) (bitwise-bit-count . G20020) (bitwise-xor . G20019) (bitwise-ior . G20018) (bitwise-and . G20017) (bitwise-not . G20016) (bitwise-arithmetic-shift-right . G20015) (bitwise-arithmetic-shift-left . G20014) (bitwise-arithmetic-shift . G20013) (zero? . G20012) (vector? . G20011) (vector-set! . G20010) (vector-ref . G20009) (vector-map . G20008) (vector-length . G20007) (vector-for-each . G20006) (vector-fill! . G20005) (vector->list . G20004) (vector . G20003) (values . G20002) (truncate . G20001) (tan . G20000) (symbol? . G19999) (symbol=? . G19998) (symbol->string . G19997) (substring . G19996) (string? . G19995) (string>? . G19994) (string>=? . G19993) (string=? . G19992) (string<? . G19991) (string<=? . G19990) (string-ref . G19989) (string-length . G19988) (string-for-each . G19987) (string-copy . G19986) (string-append . G19985) (string->symbol . G19984) (string->number . G19983) (string->list . G19982) (string . G19981) (sqrt . G19980) (sin . G19979) (round . G19978) (reverse . G19977) (real? . G19976) (real-valued? . G19975) (real-part . G19974) (rationalize . G19973) (rational? . G19972) (rational-valued? . G19971) (procedure? . G19970) (positive? . G19969) (pair? . G19968) (odd? . G19967) (numerator . G19966) (number? . G19965) (number->string . G19964) (null? . G19963) (not . G19962) (negative? . G19961) (nan? . G19960) (min . G19959) (max . G19958) (map . G19957) (make-vector . G19956) (make-string . G19955) (make-rectangular . G19954) (make-polar . G19953) (magnitude . G19952) (log . G19951) (list? . G19950) (list-tail . G19949) (list-ref . G19948) (list->vector . G19947) (list->string . G19946) (list . G19945) (length . G19944) (lcm . G19943) (integer? . G19942) (integer-valued? . G19941) (integer->char . G19940) (infinite? . G19939) (inexact? . G19938) (inexact . G19937) (imag-part . G19936) (gcd . G19935) (for-each . G19934) (floor . G19933) (finite? . G19932) (expt . G19931) (exp . G19930) (exact? . G19929) (exact-integer-sqrt . G19928) (exact . G19927) (even? . G19926) (error . G19925) (eqv? . G19924) (equal? . G19923) (eq? . G19922) (dynamic-wind . G19921) (div0-and-mod0 . G19920) (mod0 . G19919) (div0 . G19918) (div-and-mod . G19917) (mod . G19916) (div . G19915) (denominator . G19914) (cos . G19913) (cons . G19912) (complex? . G19911) (char? . G19910) (char>? . G19909) (char>=? . G19908) (char=? . G19907) (char<? . G19906) (char<=? . G19905) (char->integer . G19904) (ceiling . G19903) (call-with-values . G19902) (call/cc . G19901) (call-with-current-continuation . G19900) (cddddr . G19899) (cdddar . G19898) (cddadr . G19897) (cddaar . G19896) (cdaddr . G19895) (cdadar . G19894) (cdaadr . G19893) (cdaaar . G19892) (cadddr . G19891) (caddar . G19890) (cadadr . G19889) (cadaar . G19888) (caaddr . G19887) (caadar . G19886) (caaadr . G19885) (caaaar . G19884) (cdddr . G19883) (cddar . G19882) (cdadr . G19881) (cdaar . G19880) (caddr . G19879) (cadar . G19878) (caadr . G19877) (caaar . G19876) (cddr . G19875) (cdar . G19874) (cadr . G19873) (caar . G19872) (cdr . G19871) (car . G19870) (boolean? . G19869) (boolean=? . G19868) (atan . G19867) (assertion-violation . G19866) (asin . G19865) (apply . G19864) (append . G19863) (angle . G19862) (acos . G19861) (abs . G19860) (/ . G19859) (* . G19858) (- . G19857) (+ . G19856) (>= . G19855) (> . G19854) (= . G19853) (<= . G19852) (< . G19851) (&no-nans . G19848) (&no-infinities . G19847) (&i/o-encoding . G19846) (&i/o-decoding . G19845) (&i/o-port . G19844) (&i/o-file-does-not-exist . G19843) (&i/o-file-already-exists . G19842) (&i/o-file-is-read-only . G19841) (&i/o-file-protection . G19840) (&i/o-filename . G19839) (&i/o-invalid-position . G19838) (&i/o-write . G19837) (&i/o-read . G19836) (&i/o . G19835) (&undefined . G19834) (&syntax . G19833) (&lexical . G19832) (&implementation-restriction . G19831) (&non-continuable . G19830) (&who . G19829) (&irritants . G19828) (&assertion . G19827) (&violation . G19826) (&error . G19825) (&serious . G19824) (&warning . G19823) (&message . G19822) (&condition . G19821) (define-condition-type . G19820) (define-enumeration . G19819) (define-record-type . G19818) (parent-rtd . G19817) (nongenerative . G19816) (opaque . G19815) (sealed . G19814) (protocol . G19813) (parent . G19812) (immutable . G19811) (mutable . G19810) (fields . G19809) (error-handling-mode . G19808) (file-options . G19807) (buffer-mode . G19806) (eol-style . G19805) (guard . G19804) (unsyntax-splicing . G19801) (unsyntax . G19800) (unquote-splicing . G19799) (unquote . G19798) (_ . G19797) (else . G19796) (=> . G19795) (... . G19794) (assert . G19793) (endianness . G19792) (or . G19789) (and . G19788) (do . G19787) (cond . G19786) (let* . G19785) (let . G19784) (let*-values . G19783) (let-values . G19782) (identifier-syntax . G19781) (with-syntax . G19780) (quasisyntax . G19779) (quasiquote . G19778) (syntax-rules . G19777) (record-constructor-descriptor . G19774) (record-type-descriptor . G19773) (case . G19772) (unless . G19770) (when . G19769) (if . G19768) (letrec* . G19767) (letrec . G19766) (case-lambda . G19764) (lambda . G19763) (syntax . G19762) (syntax-case . G19761) (quote . G19760) (letrec-syntax . G19758) (let-syntax . G19757) (set! . G19756) (begin . G19754) (define-syntax . G19752) (define . G19751)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20518 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G12423) (quotient . G20239) (null-environment . G12421) (remainder . G20238) (modulo . G20237) (inexact->exact . G20236) (force . G20235) (exact->inexact . G20234) (delay . G19791)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20519 '(rnrs control) '(6) '() '() '() '((do . G19787) (unless . G19770) (when . G19769) (case-lambda . G19764)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20520 '(rnrs eval) '(6) '() '() '() '((eval . G12427) (environment . G12419)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20521 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G20230) (set-car! . G20229)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20522 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G20232) (string-set! . G20231)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20523 '(rnrs programs) '(6) '() '() '() '((exit . G20233) (command-line . G19601)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20524 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G11708) (identifier? . G12457) (generate-temporaries . G12441) (free-identifier=? . G12443) (syntax->datum . G12461) (datum->syntax . G12459) (bound-identifier=? . G12445) (syntax-violation . G12455) (unsyntax-splicing . G19801) (unsyntax . G19800) (_ . G19797) (... . G19794) (with-syntax . G19780) (quasisyntax . G19779) (syntax . G19762) (syntax-case . G19761)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20525 '(rnrs files) '(6) '() '() '() '((delete-file . G20344) (file-exists? . G20343) (make-i/o-write-error . G19310) (make-i/o-read-error . G19290) (make-i/o-port-error . G19461) (make-i/o-invalid-position-error . G19331) (make-i/o-filename-error . G19356) (make-i/o-file-protection-error . G19380) (make-i/o-file-is-read-only-error . G19400) (make-i/o-file-does-not-exist-error . G19440) (make-i/o-file-already-exists-error . G19420) (make-i/o-error . G19270) (i/o-write-error? . G19312) (i/o-read-error? . G19292) (i/o-port-error? . G19465) (i/o-invalid-position-error? . G19335) (i/o-filename-error? . G19360) (i/o-file-protection-error? . G19382) (i/o-file-is-read-only-error? . G19402) (i/o-file-does-not-exist-error? . G19442) (i/o-file-already-exists-error? . G19422) (i/o-error? . G19272) (i/o-error-port . G19467) (i/o-error-filename . G19362) (&i/o-port . G19844) (&i/o-file-does-not-exist . G19843) (&i/o-file-already-exists . G19842) (&i/o-file-is-read-only . G19841) (&i/o-file-protection . G19840) (&i/o-filename . G19839) (&i/o-invalid-position . G19838) (&i/o-write . G19837) (&i/o-read . G19836) (&i/o . G19835)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20526 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G20342) (vector-sort . G20341) (list-sort . G20340)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20527 '(rnrs base) '(6) '() '() '() '((zero? . G20012) (vector? . G20011) (vector-set! . G20010) (vector-ref . G20009) (vector-map . G20008) (vector-length . G20007) (vector-for-each . G20006) (vector-fill! . G20005) (vector->list . G20004) (vector . G20003) (values . G20002) (truncate . G20001) (tan . G20000) (symbol? . G19999) (symbol=? . G19998) (symbol->string . G19997) (substring . G19996) (string? . G19995) (string>? . G19994) (string>=? . G19993) (string=? . G19992) (string<? . G19991) (string<=? . G19990) (string-ref . G19989) (string-length . G19988) (string-for-each . G19987) (string-copy . G19986) (string-append . G19985) (string->symbol . G19984) (string->number . G19983) (string->list . G19982) (string . G19981) (sqrt . G19980) (sin . G19979) (round . G19978) (reverse . G19977) (real? . G19976) (real-valued? . G19975) (real-part . G19974) (rationalize . G19973) (rational? . G19972) (rational-valued? . G19971) (procedure? . G19970) (positive? . G19969) (pair? . G19968) (odd? . G19967) (numerator . G19966) (number? . G19965) (number->string . G19964) (null? . G19963) (not . G19962) (negative? . G19961) (nan? . G19960) (min . G19959) (max . G19958) (map . G19957) (make-vector . G19956) (make-string . G19955) (make-rectangular . G19954) (make-polar . G19953) (magnitude . G19952) (log . G19951) (list? . G19950) (list-tail . G19949) (list-ref . G19948) (list->vector . G19947) (list->string . G19946) (list . G19945) (length . G19944) (lcm . G19943) (integer? . G19942) (integer-valued? . G19941) (integer->char . G19940) (infinite? . G19939) (inexact? . G19938) (inexact . G19937) (imag-part . G19936) (gcd . G19935) (for-each . G19934) (floor . G19933) (finite? . G19932) (expt . G19931) (exp . G19930) (exact? . G19929) (exact-integer-sqrt . G19928) (exact . G19927) (even? . G19926) (error . G19925) (eqv? . G19924) (equal? . G19923) (eq? . G19922) (dynamic-wind . G19921) (div0-and-mod0 . G19920) (mod0 . G19919) (div0 . G19918) (div-and-mod . G19917) (mod . G19916) (div . G19915) (denominator . G19914) (cos . G19913) (cons . G19912) (complex? . G19911) (char? . G19910) (char>? . G19909) (char>=? . G19908) (char=? . G19907) (char<? . G19906) (char<=? . G19905) (char->integer . G19904) (ceiling . G19903) (call-with-values . G19902) (call/cc . G19901) (call-with-current-continuation . G19900) (cddddr . G19899) (cdddar . G19898) (cddadr . G19897) (cddaar . G19896) (cdaddr . G19895) (cdadar . G19894) (cdaadr . G19893) (cdaaar . G19892) (cadddr . G19891) (caddar . G19890) (cadadr . G19889) (cadaar . G19888) (caaddr . G19887) (caadar . G19886) (caaadr . G19885) (caaaar . G19884) (cdddr . G19883) (cddar . G19882) (cdadr . G19881) (cdaar . G19880) (caddr . G19879) (cadar . G19878) (caadr . G19877) (caaar . G19876) (cddr . G19875) (cdar . G19874) (cadr . G19873) (caar . G19872) (cdr . G19871) (car . G19870) (boolean? . G19869) (boolean=? . G19868) (atan . G19867) (assertion-violation . G19866) (asin . G19865) (apply . G19864) (append . G19863) (angle . G19862) (acos . G19861) (abs . G19860) (/ . G19859) (* . G19858) (- . G19857) (+ . G19856) (>= . G19855) (> . G19854) (= . G19853) (<= . G19852) (< . G19851) (unquote-splicing . G19799) (unquote . G19798) (_ . G19797) (else . G19796) (=> . G19795) (... . G19794) (assert . G19793) (or . G19789) (and . G19788) (cond . G19786) (let* . G19785) (let . G19784) (let*-values . G19783) (let-values . G19782) (identifier-syntax . G19781) (quasiquote . G19778) (syntax-rules . G19777) (case . G19772) (if . G19768) (letrec* . G19767) (letrec . G19766) (lambda . G19763) (quote . G19760) (letrec-syntax . G19758) (let-syntax . G19757) (set! . G19756) (begin . G19754) (define-syntax . G19752) (define . G19751)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20528 '(rnrs lists) '(6) '() '() '() '((remove . G20228) (remv . G20227) (remp . G20226) (remq . G20225) (partition . G20224) (memv . G20223) (memq . G20222) (memp . G20221) (member . G20220) (exists . G20219) (for-all . G20218) (fold-right . G20217) (fold-left . G20216) (find . G20215) (filter . G20214) (cons* . G20213) (assv . G20212) (assq . G20211) (assp . G20210) (assoc . G20209)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20529 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G20318) (call-with-input-file . G20317) (write-char . G20316) (write . G20315) (with-output-to-file . G20314) (with-input-from-file . G20313) (read-char . G20312) (read . G20311) (peek-char . G20310) (open-output-file . G20309) (open-input-file . G20308) (newline . G20307) (display . G20306) (close-output-port . G20305) (close-input-port . G20304) (eof-object? . G20303) (eof-object . G20302) (current-error-port . G20301) (current-output-port . G20300) (current-input-port . G20299) (output-port? . G20298) (input-port? . G20297) (make-i/o-write-error . G19310) (make-i/o-read-error . G19290) (make-i/o-port-error . G19461) (make-i/o-invalid-position-error . G19331) (make-i/o-filename-error . G19356) (make-i/o-file-protection-error . G19380) (make-i/o-file-is-read-only-error . G19400) (make-i/o-file-does-not-exist-error . G19440) (make-i/o-file-already-exists-error . G19420) (make-i/o-error . G19270) (i/o-write-error? . G19312) (i/o-read-error? . G19292) (i/o-port-error? . G19465) (i/o-invalid-position-error? . G19335) (i/o-filename-error? . G19360) (i/o-file-protection-error? . G19382) (i/o-file-is-read-only-error? . G19402) (i/o-file-does-not-exist-error? . G19442) (i/o-file-already-exists-error? . G19422) (i/o-error? . G19272) (i/o-error-port . G19467) (i/o-error-filename . G19362) (&i/o-port . G19844) (&i/o-file-does-not-exist . G19843) (&i/o-file-already-exists . G19842) (&i/o-file-is-read-only . G19841) (&i/o-file-protection . G19840) (&i/o-filename . G19839) (&i/o-invalid-position . G19838) (&i/o-write . G19837) (&i/o-read . G19836) (&i/o . G19835)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20530 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G20255) (utf32->string . G20181) (utf16->string . G20180) (utf8->string . G20179) (uint-list->bytevector . G20178) (u8-list->bytevector . G20177) (string->utf8 . G20176) (string->utf32 . G20175) (string->utf16 . G20174) (sint-list->bytevector . G20173) (native-endianness . G20172) (bytevector? . G20171) (bytevector=? . G20170) (bytevector-uint-set! . G20169) (bytevector-uint-ref . G20168) (bytevector-u8-set! . G20167) (bytevector-u8-ref . G20166) (bytevector-u64-set! . G20165) (bytevector-u64-ref . G20164) (bytevector-u64-native-set! . G20163) (bytevector-u64-native-ref . G20162) (bytevector-u32-set! . G20161) (bytevector-u32-ref . G20160) (bytevector-u32-native-set! . G20159) (bytevector-u32-native-ref . G20158) (bytevector-u16-set! . G20157) (bytevector-u16-ref . G20156) (bytevector-u16-native-set! . G20155) (bytevector-u16-native-ref . G20154) (bytevector-sint-set! . G20153) (bytevector-sint-ref . G20152) (bytevector-s8-set! . G20151) (bytevector-s8-ref . G20150) (bytevector-s64-set! . G20149) (bytevector-s64-ref . G20148) (bytevector-s64-native-set! . G20147) (bytevector-s64-native-ref . G20146) (bytevector-s32-set! . G20145) (bytevector-s32-ref . G20144) (bytevector-s32-native-set! . G20143) (bytevector-s32-native-ref . G20142) (bytevector-s16-set! . G20141) (bytevector-s16-ref . G20140) (bytevector-s16-native-set! . G20139) (bytevector-s16-native-ref . G20138) (bytevector-length . G20137) (bytevector-ieee-single-ref . G20136) (bytevector-ieee-single-native-set! . G20135) (bytevector-ieee-single-native-ref . G20134) (bytevector-ieee-double-ref . G20133) (bytevector-ieee-double-native-set! . G20132) (bytevector-ieee-double-native-ref . G20131) (bytevector-fill! . G20130) (bytevector-copy! . G20129) (bytevector-copy . G20128) (bytevector->uint-list . G20127) (bytevector->u8-list . G20126) (bytevector->sint-list . G20125) (endianness . G19792)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20531 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G20390) (string-titlecase . G20389) (string-normalize-nfkd . G20388) (string-normalize-nfkc . G20387) (string-normalize-nfd . G20386) (string-normalize-nfc . G20385) (string-foldcase . G20384) (string-downcase . G20383) (string-ci>? . G20382) (string-ci>=? . G20381) (string-ci=? . G20380) (string-ci<? . G20379) (string-ci<=? . G20378) (char-whitespace? . G20377) (char-upper-case? . G20376) (char-title-case? . G20375) (char-numeric? . G20374) (char-lower-case? . G20373) (char-general-category . G20372) (char-upcase . G20371) (char-titlecase . G20370) (char-foldcase . G20369) (char-downcase . G20368) (char-ci>? . G20367) (char-ci>=? . G20366) (char-ci=? . G20365) (char-ci<? . G20364) (char-ci<=? . G20363) (char-alphabetic? . G20362)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20532 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G20202) (raise-continuable . G20201) (raise . G20200) (guard . G19804) (else . G19796) (=> . G19795)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20533 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G20029) (bitwise-reverse-bit-field . G20028) (bitwise-length . G20027) (bitwise-if . G20026) (bitwise-first-bit-set . G20025) (bitwise-copy-bit-field . G20024) (bitwise-copy-bit . G20023) (bitwise-bit-set? . G20022) (bitwise-bit-field . G20021) (bitwise-bit-count . G20020) (bitwise-xor . G20019) (bitwise-ior . G20018) (bitwise-and . G20017) (bitwise-not . G20016) (bitwise-arithmetic-shift-right . G20015) (bitwise-arithmetic-shift-left . G20014) (bitwise-arithmetic-shift . G20013)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20534 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G20074) (fxxor . G20073) (fxrotate-bit-field . G20072) (fxreverse-bit-field . G20071) (fxpositive? . G20070) (fxodd? . G20069) (fxnot . G20068) (fxnegative? . G20067) (fxmod0 . G20066) (fxmod . G20065) (fxmin . G20064) (fxmax . G20063) (fxlength . G20062) (fxior . G20061) (fxif . G20060) (fxfirst-bit-set . G20059) (fxeven? . G20058) (fxdiv0-and-mod0 . G20057) (fxdiv0 . G20056) (fxdiv-and-mod . G20055) (fxdiv . G20054) (fxcopy-bit-field . G20053) (fxcopy-bit . G20052) (fxbit-set? . G20051) (fxbit-field . G20050) (fxbit-count . G20049) (fxarithmetic-shift-right . G20048) (fxarithmetic-shift-left . G20047) (fxarithmetic-shift . G20046) (fxand . G20045) (fx>? . G20044) (fx>=? . G20043) (fx=? . G20042) (fx<? . G20041) (fx<=? . G20040) (fx-/carry . G20039) (fx- . G20038) (fx+/carry . G20037) (fx+ . G20036) (fx*/carry . G20035) (fx* . G20034) (greatest-fixnum . G20033) (least-fixnum . G20032) (fixnum-width . G20031) (fixnum? . G20030)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20535 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G20124) (no-infinities-violation? . G20123) (make-no-nans-violation . G20122) (make-no-infinities-violation . G20121) (real->flonum . G20120) (flzero? . G20119) (fltruncate . G20118) (fltan . G20117) (flsqrt . G20116) (flsin . G20115) (flround . G20114) (flpositive? . G20113) (flonum? . G20112) (flodd? . G20111) (flnumerator . G20110) (flnegative? . G20109) (flnan? . G20108) (flmod0 . G20107) (flmod . G20106) (flmin . G20105) (flmax . G20104) (fllog . G20103) (flinteger? . G20102) (flinfinite? . G20101) (flfloor . G20100) (flfinite? . G20099) (flexpt . G20098) (flexp . G20097) (fleven? . G20096) (fldiv0-and-mod0 . G20095) (fldiv0 . G20094) (fldiv-and-mod . G20093) (fldiv . G20092) (fldenominator . G20091) (flcos . G20090) (flceiling . G20089) (flatan . G20088) (flasin . G20087) (flacos . G20086) (flabs . G20085) (fl>? . G20084) (fl>=? . G20083) (fl=? . G20082) (fl<? . G20081) (fl<=? . G20080) (fl/ . G20079) (fl- . G20078) (fl+ . G20077) (fl* . G20076) (fixnum->flonum . G20075) (&no-nans . G19848) (&no-infinities . G19847)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20536 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G20339) (string-ci-hash . G20338) (string-hash . G20337) (equal-hash . G20336) (hashtable-equivalence-function . G20335) (make-hashtable . G20334) (hashtable-hash-function . G20333) (make-eqv-hashtable . G20332) (make-eq-hashtable . G20331) (hashtable? . G20330) (hashtable-update! . G20329) (hashtable-size . G20328) (hashtable-set! . G20327) (hashtable-ref . G20326) (hashtable-mutable? . G20325) (hashtable-keys . G20324) (hashtable-entries . G20323) (hashtable-delete! . G20322) (hashtable-copy . G20321) (hashtable-contains? . G20320) (hashtable-clear! . G20319)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20537 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G20303) (eof-object . G20302) (current-error-port . G20301) (current-output-port . G20300) (current-input-port . G20299) (output-port? . G20298) (input-port? . G20297) (utf-8-codec . G20296) (utf-16-codec . G20295) (transcoder-error-handling-mode . G20294) (transcoder-eol-style . G20293) (transcoder-codec . G20292) (transcoded-port . G20291) (textual-port? . G20290) (string->bytevector . G20289) (standard-output-port . G20288) (standard-input-port . G20287) (standard-error-port . G20286) (set-port-position! . G20285) (put-u8 . G20284) (put-string . G20283) (put-datum . G20282) (put-char . G20281) (put-bytevector . G20280) (port? . G20279) (port-transcoder . G20278) (port-position . G20277) (port-has-set-port-position!? . G20276) (port-has-port-position? . G20275) (port-eof? . G20274) (output-port-buffer-mode . G20273) (open-string-output-port . G20272) (open-string-input-port . G20271) (open-file-output-port . G20270) (open-file-input/output-port . G20269) (open-file-input-port . G20268) (open-bytevector-output-port . G20267) (open-bytevector-input-port . G20266) (native-transcoder . G20265) (native-eol-style . G20264) (make-transcoder . G20263) (latin-1-codec . G20262) (make-i/o-write-error . G19310) (make-i/o-read-error . G19290) (make-i/o-port-error . G19461) (make-i/o-invalid-position-error . G19331) (make-i/o-filename-error . G19356) (make-i/o-file-protection-error . G19380) (make-i/o-file-is-read-only-error . G19400) (make-i/o-file-does-not-exist-error . G19440) (make-i/o-file-already-exists-error . G19420) (make-i/o-error . G19270) (make-i/o-encoding-error . G19506) (make-i/o-decoding-error . G19485) (make-custom-textual-output-port . G20261) (make-custom-textual-input/output-port . G20260) (make-custom-textual-input-port . G20259) (make-custom-binary-output-port . G20258) (make-custom-binary-input/output-port . G20257) (make-custom-binary-input-port . G20256) (lookahead-u8 . G20254) (lookahead-char . G20253) (i/o-write-error? . G19312) (i/o-read-error? . G19292) (i/o-port-error? . G19465) (i/o-invalid-position-error? . G19335) (i/o-filename-error? . G19360) (i/o-file-protection-error? . G19382) (i/o-file-is-read-only-error? . G19402) (i/o-file-does-not-exist-error? . G19442) (i/o-file-already-exists-error? . G19422) (i/o-error? . G19272) (i/o-error-port . G19467) (i/o-error-filename . G19362) (i/o-encoding-error? . G19510) (i/o-encoding-error-char . G19512) (i/o-decoding-error? . G19487) (get-u8 . G20252) (get-string-n! . G20251) (get-string-n . G20250) (get-string-all . G20249) (get-line . G20248) (get-datum . G20247) (get-char . G20246) (get-bytevector-some . G20245) (get-bytevector-n! . G20244) (get-bytevector-n . G20243) (get-bytevector-all . G20242) (flush-output-port . G20241) (close-port . G20240) (call-with-string-output-port . G20208) (call-with-port . G20207) (call-with-bytevector-output-port . G20206) (bytevector->string . G20205) (buffer-mode? . G20204) (binary-port? . G20203) (&i/o-encoding . G19846) (&i/o-decoding . G19845) (&i/o-port . G19844) (&i/o-file-does-not-exist . G19843) (&i/o-file-already-exists . G19842) (&i/o-file-is-read-only . G19841) (&i/o-file-protection . G19840) (&i/o-filename . G19839) (&i/o-invalid-position . G19838) (&i/o-write . G19837) (&i/o-read . G19836) (&i/o . G19835) (error-handling-mode . G19808) (file-options . G19807) (buffer-mode . G19806) (eol-style . G19805)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20538 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G20199) (enum-set=? . G20198) (enum-set-universe . G20197) (enum-set-union . G20196) (enum-set-subset? . G20195) (enum-set-projection . G20194) (enum-set-member? . G20193) (enum-set-intersection . G20192) (enum-set-indexer . G20191) (enum-set-difference . G20190) (enum-set-constructor . G20189) (enum-set-complement . G20188) (enum-set->list . G20187) (define-enumeration . G19819)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20539 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G19044) (warning? . G18916) (violation? . G18976) (undefined-violation? . G19156) (syntax-violation? . G19132) (syntax-violation-subform . G19136) (syntax-violation-form . G19134) (syntax-violation . G12455) (simple-conditions . G20186) (serious-condition? . G18936) (non-continuable-violation? . G19066) (message-condition? . G18894) (make-who-condition . G19040) (make-warning . G18914) (make-violation . G18974) (make-undefined-violation . G19154) (make-syntax-violation . G19126) (make-serious-condition . G18934) (make-non-continuable-violation . G19064) (make-message-condition . G18890) (make-lexical-violation . G19104) (make-irritants-condition . G19015) (make-implementation-restriction-violation . G19084) (make-error . G18954) (make-assertion-violation . G18994) (lexical-violation? . G19106) (irritants-condition? . G19019) (implementation-restriction-violation? . G19086) (error? . G18956) (condition-who . G19046) (condition-predicate . G20185) (condition-message . G18896) (condition-irritants . G19021) (condition-accessor . G20184) (condition . G20183) (assertion-violation? . G18996) (condition? . G20182) (&undefined . G19834) (&syntax . G19833) (&lexical . G19832) (&implementation-restriction . G19831) (&non-continuable . G19830) (&who . G19829) (&irritants . G19828) (&assertion . G19827) (&violation . G19826) (&error . G19825) (&serious . G19824) (&warning . G19823) (&message . G19822) (&condition . G19821) (define-condition-type . G19820)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20540 '(rnrs records inspection) '(6) '() '() '() '((record? . G20354) (record-type-uid . G20353) (record-type-sealed? . G20352) (record-type-parent . G20351) (record-type-opaque? . G20350) (record-type-name . G20349) (record-type-generative? . G20348) (record-type-field-names . G20347) (record-rtd . G20346) (record-field-mutable? . G20345)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20541 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G20361) (record-predicate . G20360) (record-mutator . G20359) (record-constructor . G20358) (record-accessor . G20357) (make-record-type-descriptor . G20356) (make-record-constructor-descriptor . G20355)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20542 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G19818) (parent-rtd . G19817) (nongenerative . G19816) (opaque . G19815) (sealed . G19814) (protocol . G19813) (parent . G19812) (immutable . G19811) (mutable . G19810) (fields . G19809) (record-constructor-descriptor . G19774) (record-type-descriptor . G19773)) '() values values '#f '#f '#t '#f) (G11129@G10767@install-library 'G20543 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G20511) (&no-nans-rtd . G20510) (&no-infinities-rcd . G20509) (&no-infinities-rtd . G20508) (&i/o-encoding-rcd . G20507) (&i/o-encoding-rtd . G20506) (&i/o-decoding-rcd . G20505) (&i/o-decoding-rtd . G20504) (&i/o-port-rcd . G20503) (&i/o-port-rtd . G20502) (&i/o-file-does-not-exist-rcd . G20501) (&i/o-file-does-not-exist-rtd . G20500) (&i/o-file-already-exists-rcd . G20499) (&i/o-file-already-exists-rtd . G20498) (&i/o-file-is-read-only-rcd . G20497) (&i/o-file-is-read-only-rtd . G20496) (&i/o-file-protection-rcd . G20495) (&i/o-file-protection-rtd . G20494) (&i/o-filename-rcd . G20493) (&i/o-filename-rtd . G20492) (&i/o-invalid-position-rcd . G20491) (&i/o-invalid-position-rtd . G20490) (&i/o-write-rcd . G20489) (&i/o-write-rtd . G20488) (&i/o-read-rcd . G20487) (&i/o-read-rtd . G20486) (&i/o-rcd . G20485) (&i/o-rtd . G20484) (&undefined-rcd . G20483) (&undefined-rtd . G20482) (&syntax-rcd . G20481) (&syntax-rtd . G20480) (&lexical-rcd . G20479) (&lexical-rtd . G20478) (&implementation-restriction-rcd . G20477) (&implementation-restriction-rtd . G20476) (&non-continuable-rcd . G20475) (&non-continuable-rtd . G20474) (&who-rcd . G20473) (&who-rtd . G20472) (&irritants-rcd . G20471) (&irritants-rtd . G20470) (&assertion-rcd . G20469) (&assertion-rtd . G20468) (&violation-rcd . G20467) (&violation-rtd . G20466) (&error-rcd . G20465) (&error-rtd . G20464) (&serious-rcd . G20463) (&serious-rtd . G20462) (&warning-rcd . G20461) (&warning-rtd . G20460) (&message-rcd . G20459) (&message-rtd . G20458) (&condition-rcd . G20457) (&condition-rtd . G20456) (syntax-error . G12449) (syntax-dispatch . G12222) (pretty-print . G20455) (eval-core . G20454) (set-symbol-value! . G20453) (symbol-value . G20452) (gensym . G20451) (void . G20450) (load . G19607) (interaction-environment . G12467) (char-ready? . G20449) (regexp? . G20448) (read-line . G20447) (dotted-list? . G20446) (circular-list? . G20445) (proper-list? . G20444) (circular-list . G20443) (last . G20442) (last-pair . G20441) (not-pair? . G20440) (split-at! . G20439) (split-at . G20438) (list= . G20437) (list-copy . G20436) (list-tabulate . G20435) (make-list . G20434) (xcons . G20433) (tenth . G20432) (ninth . G20431) (eighth . G20430) (seventh . G20429) (sixth . G20428) (fifth . G20427) (drop-right! . G20426) (drop-right . G20425) (take-right . G20424) (take! . G20423) (drop . G20422) (take . G20421) (car+cdr . G20420) (third . G20419) (second . G20418) (first . G20417) (assoc-ref . G20416) (alist-cons . G20415) (print . G20414) (format . G20413) (standard-library-path . G20412) (current-directory . G20411) (write-to-file . G20410) (file->list . G20409) (file->string . G20408) (digit->integer . G20407) (call-with-string-input-port . G20406) (call-with-string-io . G20405) (string-split . G20404) (bytevector-for-each . G20403) (string->regexp . G20402) (rxmatch . G20401) (regexp-replace-all . G20400) (hashtable-for-each . G20399) (readdir . G20398) (get-environment-variables . G20397) (get-environment-variable . G20396) (get-command-line . G20395) (sys-display . G20394) (source-info . G20393) (set-source-info! . G20392) (receive . G20391) (string-upcase . G20390) (string-titlecase . G20389) (string-normalize-nfkd . G20388) (string-normalize-nfkc . G20387) (string-normalize-nfd . G20386) (string-normalize-nfc . G20385) (string-foldcase . G20384) (string-downcase . G20383) (string-ci>? . G20382) (string-ci>=? . G20381) (string-ci=? . G20380) (string-ci<? . G20379) (string-ci<=? . G20378) (char-whitespace? . G20377) (char-upper-case? . G20376) (char-title-case? . G20375) (char-numeric? . G20374) (char-lower-case? . G20373) (char-general-category . G20372) (char-upcase . G20371) (char-titlecase . G20370) (char-foldcase . G20369) (char-downcase . G20368) (char-ci>? . G20367) (char-ci>=? . G20366) (char-ci=? . G20365) (char-ci<? . G20364) (char-ci<=? . G20363) (char-alphabetic? . G20362) (make-variable-transformer . G11708) (identifier? . G12457) (generate-temporaries . G12441) (free-identifier=? . G12443) (syntax->datum . G12461) (datum->syntax . G12459) (bound-identifier=? . G12445) (record-type-descriptor? . G20361) (record-predicate . G20360) (record-mutator . G20359) (record-constructor . G20358) (record-accessor . G20357) (make-record-type-descriptor . G20356) (make-record-constructor-descriptor . G20355) (record? . G20354) (record-type-uid . G20353) (record-type-sealed? . G20352) (record-type-parent . G20351) (record-type-opaque? . G20350) (record-type-name . G20349) (record-type-generative? . G20348) (record-type-field-names . G20347) (record-rtd . G20346) (record-field-mutable? . G20345) (delete-file . G20344) (file-exists? . G20343) (vector-sort! . G20342) (vector-sort . G20341) (list-sort . G20340) (symbol-hash . G20339) (string-ci-hash . G20338) (string-hash . G20337) (equal-hash . G20336) (hashtable-equivalence-function . G20335) (make-hashtable . G20334) (hashtable-hash-function . G20333) (make-eqv-hashtable . G20332) (make-eq-hashtable . G20331) (hashtable? . G20330) (hashtable-update! . G20329) (hashtable-size . G20328) (hashtable-set! . G20327) (hashtable-ref . G20326) (hashtable-mutable? . G20325) (hashtable-keys . G20324) (hashtable-entries . G20323) (hashtable-delete! . G20322) (hashtable-copy . G20321) (hashtable-contains? . G20320) (hashtable-clear! . G20319) (call-with-output-file . G20318) (call-with-input-file . G20317) (write-char . G20316) (write . G20315) (with-output-to-file . G20314) (with-input-from-file . G20313) (read-char . G20312) (read . G20311) (peek-char . G20310) (open-output-file . G20309) (open-input-file . G20308) (newline . G20307) (display . G20306) (close-output-port . G20305) (close-input-port . G20304) (eof-object? . G20303) (eof-object . G20302) (current-error-port . G20301) (current-output-port . G20300) (current-input-port . G20299) (output-port? . G20298) (input-port? . G20297) (utf-8-codec . G20296) (utf-16-codec . G20295) (transcoder-error-handling-mode . G20294) (transcoder-eol-style . G20293) (transcoder-codec . G20292) (transcoded-port . G20291) (textual-port? . G20290) (string->bytevector . G20289) (standard-output-port . G20288) (standard-input-port . G20287) (standard-error-port . G20286) (set-port-position! . G20285) (put-u8 . G20284) (put-string . G20283) (put-datum . G20282) (put-char . G20281) (put-bytevector . G20280) (port? . G20279) (port-transcoder . G20278) (port-position . G20277) (port-has-set-port-position!? . G20276) (port-has-port-position? . G20275) (port-eof? . G20274) (output-port-buffer-mode . G20273) (open-string-output-port . G20272) (open-string-input-port . G20271) (open-file-output-port . G20270) (open-file-input/output-port . G20269) (open-file-input-port . G20268) (open-bytevector-output-port . G20267) (open-bytevector-input-port . G20266) (native-transcoder . G20265) (native-eol-style . G20264) (make-transcoder . G20263) (latin-1-codec . G20262) (make-i/o-write-error . G19310) (make-i/o-read-error . G19290) (make-i/o-port-error . G19461) (make-i/o-invalid-position-error . G19331) (make-i/o-filename-error . G19356) (make-i/o-file-protection-error . G19380) (make-i/o-file-is-read-only-error . G19400) (make-i/o-file-does-not-exist-error . G19440) (make-i/o-file-already-exists-error . G19420) (make-i/o-error . G19270) (make-i/o-encoding-error . G19506) (make-i/o-decoding-error . G19485) (make-custom-textual-output-port . G20261) (make-custom-textual-input/output-port . G20260) (make-custom-textual-input-port . G20259) (make-custom-binary-output-port . G20258) (make-custom-binary-input/output-port . G20257) (make-custom-binary-input-port . G20256) (make-bytevector . G20255) (lookahead-u8 . G20254) (lookahead-char . G20253) (i/o-write-error? . G19312) (i/o-read-error? . G19292) (i/o-port-error? . G19465) (i/o-invalid-position-error? . G19335) (i/o-filename-error? . G19360) (i/o-file-protection-error? . G19382) (i/o-file-is-read-only-error? . G19402) (i/o-file-does-not-exist-error? . G19442) (i/o-file-already-exists-error? . G19422) (i/o-error? . G19272) (i/o-error-port . G19467) (i/o-error-filename . G19362) (i/o-encoding-error? . G19510) (i/o-encoding-error-char . G19512) (i/o-decoding-error? . G19487) (get-u8 . G20252) (get-string-n! . G20251) (get-string-n . G20250) (get-string-all . G20249) (get-line . G20248) (get-datum . G20247) (get-char . G20246) (get-bytevector-some . G20245) (get-bytevector-n! . G20244) (get-bytevector-n . G20243) (get-bytevector-all . G20242) (flush-output-port . G20241) (close-port . G20240) (scheme-report-environment . G12423) (quotient . G20239) (null-environment . G12421) (remainder . G20238) (modulo . G20237) (inexact->exact . G20236) (force . G20235) (exact->inexact . G20234) (exit . G20233) (command-line . G19601) (string-fill! . G20232) (string-set! . G20231) (set-cdr! . G20230) (set-car! . G20229) (remove . G20228) (remv . G20227) (remp . G20226) (remq . G20225) (partition . G20224) (memv . G20223) (memq . G20222) (memp . G20221) (member . G20220) (exists . G20219) (for-all . G20218) (fold-right . G20217) (fold-left . G20216) (find . G20215) (filter . G20214) (cons* . G20213) (assv . G20212) (assq . G20211) (assp . G20210) (assoc . G20209) (call-with-string-output-port . G20208) (call-with-port . G20207) (call-with-bytevector-output-port . G20206) (bytevector->string . G20205) (buffer-mode? . G20204) (binary-port? . G20203) (with-exception-handler . G20202) (raise-continuable . G20201) (raise . G20200) (eval . G12427) (environment . G12419) (make-enumeration . G20199) (enum-set=? . G20198) (enum-set-universe . G20197) (enum-set-union . G20196) (enum-set-subset? . G20195) (enum-set-projection . G20194) (enum-set-member? . G20193) (enum-set-intersection . G20192) (enum-set-indexer . G20191) (enum-set-difference . G20190) (enum-set-constructor . G20189) (enum-set-complement . G20188) (enum-set->list . G20187) (who-condition? . G19044) (warning? . G18916) (violation? . G18976) (undefined-violation? . G19156) (syntax-violation? . G19132) (syntax-violation-subform . G19136) (syntax-violation-form . G19134) (syntax-violation . G12455) (simple-conditions . G20186) (serious-condition? . G18936) (non-continuable-violation? . G19066) (message-condition? . G18894) (make-who-condition . G19040) (make-warning . G18914) (make-violation . G18974) (make-undefined-violation . G19154) (make-syntax-violation . G19126) (make-serious-condition . G18934) (make-non-continuable-violation . G19064) (make-message-condition . G18890) (make-lexical-violation . G19104) (make-irritants-condition . G19015) (make-implementation-restriction-violation . G19084) (make-error . G18954) (make-assertion-violation . G18994) (lexical-violation? . G19106) (irritants-condition? . G19019) (implementation-restriction-violation? . G19086) (error? . G18956) (condition-who . G19046) (condition-predicate . G20185) (condition-message . G18896) (condition-irritants . G19021) (condition-accessor . G20184) (condition . G20183) (assertion-violation? . G18996) (condition? . G20182) (utf32->string . G20181) (utf16->string . G20180) (utf8->string . G20179) (uint-list->bytevector . G20178) (u8-list->bytevector . G20177) (string->utf8 . G20176) (string->utf32 . G20175) (string->utf16 . G20174) (sint-list->bytevector . G20173) (native-endianness . G20172) (bytevector? . G20171) (bytevector=? . G20170) (bytevector-uint-set! . G20169) (bytevector-uint-ref . G20168) (bytevector-u8-set! . G20167) (bytevector-u8-ref . G20166) (bytevector-u64-set! . G20165) (bytevector-u64-ref . G20164) (bytevector-u64-native-set! . G20163) (bytevector-u64-native-ref . G20162) (bytevector-u32-set! . G20161) (bytevector-u32-ref . G20160) (bytevector-u32-native-set! . G20159) (bytevector-u32-native-ref . G20158) (bytevector-u16-set! . G20157) (bytevector-u16-ref . G20156) (bytevector-u16-native-set! . G20155) (bytevector-u16-native-ref . G20154) (bytevector-sint-set! . G20153) (bytevector-sint-ref . G20152) (bytevector-s8-set! . G20151) (bytevector-s8-ref . G20150) (bytevector-s64-set! . G20149) (bytevector-s64-ref . G20148) (bytevector-s64-native-set! . G20147) (bytevector-s64-native-ref . G20146) (bytevector-s32-set! . G20145) (bytevector-s32-ref . G20144) (bytevector-s32-native-set! . G20143) (bytevector-s32-native-ref . G20142) (bytevector-s16-set! . G20141) (bytevector-s16-ref . G20140) (bytevector-s16-native-set! . G20139) (bytevector-s16-native-ref . G20138) (bytevector-length . G20137) (bytevector-ieee-single-ref . G20136) (bytevector-ieee-single-native-set! . G20135) (bytevector-ieee-single-native-ref . G20134) (bytevector-ieee-double-ref . G20133) (bytevector-ieee-double-native-set! . G20132) (bytevector-ieee-double-native-ref . G20131) (bytevector-fill! . G20130) (bytevector-copy! . G20129) (bytevector-copy . G20128) (bytevector->uint-list . G20127) (bytevector->u8-list . G20126) (bytevector->sint-list . G20125) (no-nans-violation? . G20124) (no-infinities-violation? . G20123) (make-no-nans-violation . G20122) (make-no-infinities-violation . G20121) (real->flonum . G20120) (flzero? . G20119) (fltruncate . G20118) (fltan . G20117) (flsqrt . G20116) (flsin . G20115) (flround . G20114) (flpositive? . G20113) (flonum? . G20112) (flodd? . G20111) (flnumerator . G20110) (flnegative? . G20109) (flnan? . G20108) (flmod0 . G20107) (flmod . G20106) (flmin . G20105) (flmax . G20104) (fllog . G20103) (flinteger? . G20102) (flinfinite? . G20101) (flfloor . G20100) (flfinite? . G20099) (flexpt . G20098) (flexp . G20097) (fleven? . G20096) (fldiv0-and-mod0 . G20095) (fldiv0 . G20094) (fldiv-and-mod . G20093) (fldiv . G20092) (fldenominator . G20091) (flcos . G20090) (flceiling . G20089) (flatan . G20088) (flasin . G20087) (flacos . G20086) (flabs . G20085) (fl>? . G20084) (fl>=? . G20083) (fl=? . G20082) (fl<? . G20081) (fl<=? . G20080) (fl/ . G20079) (fl- . G20078) (fl+ . G20077) (fl* . G20076) (fixnum->flonum . G20075) (fxzero? . G20074) (fxxor . G20073) (fxrotate-bit-field . G20072) (fxreverse-bit-field . G20071) (fxpositive? . G20070) (fxodd? . G20069) (fxnot . G20068) (fxnegative? . G20067) (fxmod0 . G20066) (fxmod . G20065) (fxmin . G20064) (fxmax . G20063) (fxlength . G20062) (fxior . G20061) (fxif . G20060) (fxfirst-bit-set . G20059) (fxeven? . G20058) (fxdiv0-and-mod0 . G20057) (fxdiv0 . G20056) (fxdiv-and-mod . G20055) (fxdiv . G20054) (fxcopy-bit-field . G20053) (fxcopy-bit . G20052) (fxbit-set? . G20051) (fxbit-field . G20050) (fxbit-count . G20049) (fxarithmetic-shift-right . G20048) (fxarithmetic-shift-left . G20047) (fxarithmetic-shift . G20046) (fxand . G20045) (fx>? . G20044) (fx>=? . G20043) (fx=? . G20042) (fx<? . G20041) (fx<=? . G20040) (fx-/carry . G20039) (fx- . G20038) (fx+/carry . G20037) (fx+ . G20036) (fx*/carry . G20035) (fx* . G20034) (greatest-fixnum . G20033) (least-fixnum . G20032) (fixnum-width . G20031) (fixnum? . G20030) (bitwise-rotate-bit-field . G20029) (bitwise-reverse-bit-field . G20028) (bitwise-length . G20027) (bitwise-if . G20026) (bitwise-first-bit-set . G20025) (bitwise-copy-bit-field . G20024) (bitwise-copy-bit . G20023) (bitwise-bit-set? . G20022) (bitwise-bit-field . G20021) (bitwise-bit-count . G20020) (bitwise-xor . G20019) (bitwise-ior . G20018) (bitwise-and . G20017) (bitwise-not . G20016) (bitwise-arithmetic-shift-right . G20015) (bitwise-arithmetic-shift-left . G20014) (bitwise-arithmetic-shift . G20013) (zero? . G20012) (vector? . G20011) (vector-set! . G20010) (vector-ref . G20009) (vector-map . G20008) (vector-length . G20007) (vector-for-each . G20006) (vector-fill! . G20005) (vector->list . G20004) (vector . G20003) (values . G20002) (truncate . G20001) (tan . G20000) (symbol? . G19999) (symbol=? . G19998) (symbol->string . G19997) (substring . G19996) (string? . G19995) (string>? . G19994) (string>=? . G19993) (string=? . G19992) (string<? . G19991) (string<=? . G19990) (string-ref . G19989) (string-length . G19988) (string-for-each . G19987) (string-copy . G19986) (string-append . G19985) (string->symbol . G19984) (string->number . G19983) (string->list . G19982) (string . G19981) (sqrt . G19980) (sin . G19979) (round . G19978) (reverse . G19977) (real? . G19976) (real-valued? . G19975) (real-part . G19974) (rationalize . G19973) (rational? . G19972) (rational-valued? . G19971) (procedure? . G19970) (positive? . G19969) (pair? . G19968) (odd? . G19967) (numerator . G19966) (number? . G19965) (number->string . G19964) (null? . G19963) (not . G19962) (negative? . G19961) (nan? . G19960) (min . G19959) (max . G19958) (map . G19957) (make-vector . G19956) (make-string . G19955) (make-rectangular . G19954) (make-polar . G19953) (magnitude . G19952) (log . G19951) (list? . G19950) (list-tail . G19949) (list-ref . G19948) (list->vector . G19947) (list->string . G19946) (list . G19945) (length . G19944) (lcm . G19943) (integer? . G19942) (integer-valued? . G19941) (integer->char . G19940) (infinite? . G19939) (inexact? . G19938) (inexact . G19937) (imag-part . G19936) (gcd . G19935) (for-each . G19934) (floor . G19933) (finite? . G19932) (expt . G19931) (exp . G19930) (exact? . G19929) (exact-integer-sqrt . G19928) (exact . G19927) (even? . G19926) (error . G19925) (eqv? . G19924) (equal? . G19923) (eq? . G19922) (dynamic-wind . G19921) (div0-and-mod0 . G19920) (mod0 . G19919) (div0 . G19918) (div-and-mod . G19917) (mod . G19916) (div . G19915) (denominator . G19914) (cos . G19913) (cons . G19912) (complex? . G19911) (char? . G19910) (char>? . G19909) (char>=? . G19908) (char=? . G19907) (char<? . G19906) (char<=? . G19905) (char->integer . G19904) (ceiling . G19903) (call-with-values . G19902) (call/cc . G19901) (call-with-current-continuation . G19900) (cddddr . G19899) (cdddar . G19898) (cddadr . G19897) (cddaar . G19896) (cdaddr . G19895) (cdadar . G19894) (cdaadr . G19893) (cdaaar . G19892) (cadddr . G19891) (caddar . G19890) (cadadr . G19889) (cadaar . G19888) (caaddr . G19887) (caadar . G19886) (caaadr . G19885) (caaaar . G19884) (cdddr . G19883) (cddar . G19882) (cdadr . G19881) (cdaar . G19880) (caddr . G19879) (cadar . G19878) (caadr . G19877) (caaar . G19876) (cddr . G19875) (cdar . G19874) (cadr . G19873) (caar . G19872) (cdr . G19871) (car . G19870) (boolean? . G19869) (boolean=? . G19868) (atan . G19867) (assertion-violation . G19866) (asin . G19865) (apply . G19864) (append . G19863) (angle . G19862) (acos . G19861) (abs . G19860) (/ . G19859) (* . G19858) (- . G19857) (+ . G19856) (>= . G19855) (> . G19854) (= . G19853) (<= . G19852) (< . G19851) (library . G19850) (export . G19849) (&no-nans . G19848) (&no-infinities . G19847) (&i/o-encoding . G19846) (&i/o-decoding . G19845) (&i/o-port . G19844) (&i/o-file-does-not-exist . G19843) (&i/o-file-already-exists . G19842) (&i/o-file-is-read-only . G19841) (&i/o-file-protection . G19840) (&i/o-filename . G19839) (&i/o-invalid-position . G19838) (&i/o-write . G19837) (&i/o-read . G19836) (&i/o . G19835) (&undefined . G19834) (&syntax . G19833) (&lexical . G19832) (&implementation-restriction . G19831) (&non-continuable . G19830) (&who . G19829) (&irritants . G19828) (&assertion . G19827) (&violation . G19826) (&error . G19825) (&serious . G19824) (&warning . G19823) (&message . G19822) (&condition . G19821) (define-condition-type . G19820) (define-enumeration . G19819) (define-record-type . G19818) (parent-rtd . G19817) (nongenerative . G19816) (opaque . G19815) (sealed . G19814) (protocol . G19813) (parent . G19812) (immutable . G19811) (mutable . G19810) (fields . G19809) (error-handling-mode . G19808) (file-options . G19807) (buffer-mode . G19806) (eol-style . G19805) (guard . G19804) (trace-define . G19803) (trace-lambda . G19802) (unsyntax-splicing . G19801) (unsyntax . G19800) (unquote-splicing . G19799) (unquote . G19798) (_ . G19797) (else . G19796) (=> . G19795) (... . G19794) (assert . G19793) (endianness . G19792) (delay . G19791) (time . G19790) (or . G19789) (and . G19788) (do . G19787) (cond . G19786) (let* . G19785) (let . G19784) (let*-values . G19783) (let-values . G19782) (identifier-syntax . G19781) (with-syntax . G19780) (quasisyntax . G19779) (quasiquote . G19778) (syntax-rules . G19777) (include . G19776) (define-struct . G19775) (record-constructor-descriptor . G19774) (record-type-descriptor . G19773) (case . G19772) (parameterize . G19771) (unless . G19770) (when . G19769) (if . G19768) (letrec* . G19767) (letrec . G19766) (type-descriptor . G19765) (case-lambda . G19764) (lambda . G19763) (syntax . G19762) (syntax-case . G19761) (quote . G19760) (foreign-call . G19759) (letrec-syntax . G19758) (let-syntax . G19757) (set! . G19756) (import . G19755) (begin . G19754) (module . G19753) (define-syntax . G19752) (define . G19751)) '((G20511 core-prim . &no-nans-rcd) (G20510 core-prim . &no-nans-rtd) (G20509 core-prim . &no-infinities-rcd) (G20508 core-prim . &no-infinities-rtd) (G20507 core-prim . &i/o-encoding-rcd) (G20506 core-prim . &i/o-encoding-rtd) (G20505 core-prim . &i/o-decoding-rcd) (G20504 core-prim . &i/o-decoding-rtd) (G20503 core-prim . &i/o-port-rcd) (G20502 core-prim . &i/o-port-rtd) (G20501 core-prim . &i/o-file-does-not-exist-rcd) (G20500 core-prim . &i/o-file-does-not-exist-rtd) (G20499 core-prim . &i/o-file-already-exists-rcd) (G20498 core-prim . &i/o-file-already-exists-rtd) (G20497 core-prim . &i/o-file-is-read-only-rcd) (G20496 core-prim . &i/o-file-is-read-only-rtd) (G20495 core-prim . &i/o-file-protection-rcd) (G20494 core-prim . &i/o-file-protection-rtd) (G20493 core-prim . &i/o-filename-rcd) (G20492 core-prim . &i/o-filename-rtd) (G20491 core-prim . &i/o-invalid-position-rcd) (G20490 core-prim . &i/o-invalid-position-rtd) (G20489 core-prim . &i/o-write-rcd) (G20488 core-prim . &i/o-write-rtd) (G20487 core-prim . &i/o-read-rcd) (G20486 core-prim . &i/o-read-rtd) (G20485 core-prim . &i/o-rcd) (G20484 core-prim . &i/o-rtd) (G20483 core-prim . &undefined-rcd) (G20482 core-prim . &undefined-rtd) (G20481 core-prim . &syntax-rcd) (G20480 core-prim . &syntax-rtd) (G20479 core-prim . &lexical-rcd) (G20478 core-prim . &lexical-rtd) (G20477 core-prim . &implementation-restriction-rcd) (G20476 core-prim . &implementation-restriction-rtd) (G20475 core-prim . &non-continuable-rcd) (G20474 core-prim . &non-continuable-rtd) (G20473 core-prim . &who-rcd) (G20472 core-prim . &who-rtd) (G20471 core-prim . &irritants-rcd) (G20470 core-prim . &irritants-rtd) (G20469 core-prim . &assertion-rcd) (G20468 core-prim . &assertion-rtd) (G20467 core-prim . &violation-rcd) (G20466 core-prim . &violation-rtd) (G20465 core-prim . &error-rcd) (G20464 core-prim . &error-rtd) (G20463 core-prim . &serious-rcd) (G20462 core-prim . &serious-rtd) (G20461 core-prim . &warning-rcd) (G20460 core-prim . &warning-rtd) (G20459 core-prim . &message-rcd) (G20458 core-prim . &message-rtd) (G20457 core-prim . &condition-rcd) (G20456 core-prim . &condition-rtd) (G12449 core-prim . syntax-error) (G12222 core-prim . syntax-dispatch) (G20455 core-prim . pretty-print) (G20454 core-prim . eval-core) (G20453 core-prim . set-symbol-value!) (G20452 core-prim . symbol-value) (G20451 core-prim . gensym) (G20450 core-prim . void) (G19607 core-prim . load) (G12467 core-prim . interaction-environment) (G20449 core-prim . char-ready?) (G20448 core-prim . regexp?) (G20447 core-prim . read-line) (G20446 core-prim . dotted-list?) (G20445 core-prim . circular-list?) (G20444 core-prim . proper-list?) (G20443 core-prim . circular-list) (G20442 core-prim . last) (G20441 core-prim . last-pair) (G20440 core-prim . not-pair?) (G20439 core-prim . split-at!) (G20438 core-prim . split-at) (G20437 core-prim . list=) (G20436 core-prim . list-copy) (G20435 core-prim . list-tabulate) (G20434 core-prim . make-list) (G20433 core-prim . xcons) (G20432 core-prim . tenth) (G20431 core-prim . ninth) (G20430 core-prim . eighth) (G20429 core-prim . seventh) (G20428 core-prim . sixth) (G20427 core-prim . fifth) (G20426 core-prim . drop-right!) (G20425 core-prim . drop-right) (G20424 core-prim . take-right) (G20423 core-prim . take!) (G20422 core-prim . drop) (G20421 core-prim . take) (G20420 core-prim . car+cdr) (G20419 core-prim . third) (G20418 core-prim . second) (G20417 core-prim . first) (G20416 core-prim . assoc-ref) (G20415 core-prim . alist-cons) (G20414 core-prim . print) (G20413 core-prim . format) (G20412 core-prim . standard-library-path) (G20411 core-prim . current-directory) (G20410 core-prim . write-to-file) (G20409 core-prim . file->list) (G20408 core-prim . file->string) (G20407 core-prim . digit->integer) (G20406 core-prim . call-with-string-input-port) (G20405 core-prim . call-with-string-io) (G20404 core-prim . string-split) (G20403 core-prim . bytevector-for-each) (G20402 core-prim . string->regexp) (G20401 core-prim . rxmatch) (G20400 core-prim . regexp-replace-all) (G20399 core-prim . hashtable-for-each) (G20398 core-prim . readdir) (G20397 core-prim . get-environment-variables) (G20396 core-prim . get-environment-variable) (G20395 core-prim . get-command-line) (G20394 core-prim . sys-display) (G20393 core-prim . source-info) (G20392 core-prim . set-source-info!) (G20391 core-prim . receive) (G20390 core-prim . string-upcase) (G20389 core-prim . string-titlecase) (G20388 core-prim . string-normalize-nfkd) (G20387 core-prim . string-normalize-nfkc) (G20386 core-prim . string-normalize-nfd) (G20385 core-prim . string-normalize-nfc) (G20384 core-prim . string-foldcase) (G20383 core-prim . string-downcase) (G20382 core-prim . string-ci>?) (G20381 core-prim . string-ci>=?) (G20380 core-prim . string-ci=?) (G20379 core-prim . string-ci<?) (G20378 core-prim . string-ci<=?) (G20377 core-prim . char-whitespace?) (G20376 core-prim . char-upper-case?) (G20375 core-prim . char-title-case?) (G20374 core-prim . char-numeric?) (G20373 core-prim . char-lower-case?) (G20372 core-prim . char-general-category) (G20371 core-prim . char-upcase) (G20370 core-prim . char-titlecase) (G20369 core-prim . char-foldcase) (G20368 core-prim . char-downcase) (G20367 core-prim . char-ci>?) (G20366 core-prim . char-ci>=?) (G20365 core-prim . char-ci=?) (G20364 core-prim . char-ci<?) (G20363 core-prim . char-ci<=?) (G20362 core-prim . char-alphabetic?) (G11708 core-prim . make-variable-transformer) (G12457 core-prim . identifier?) (G12441 core-prim . generate-temporaries) (G12443 core-prim . free-identifier=?) (G12461 core-prim . syntax->datum) (G12459 core-prim . datum->syntax) (G12445 core-prim . bound-identifier=?) (G20361 core-prim . record-type-descriptor?) (G20360 core-prim . record-predicate) (G20359 core-prim . record-mutator) (G20358 core-prim . record-constructor) (G20357 core-prim . record-accessor) (G20356 core-prim . make-record-type-descriptor) (G20355 core-prim . make-record-constructor-descriptor) (G20354 core-prim . record?) (G20353 core-prim . record-type-uid) (G20352 core-prim . record-type-sealed?) (G20351 core-prim . record-type-parent) (G20350 core-prim . record-type-opaque?) (G20349 core-prim . record-type-name) (G20348 core-prim . record-type-generative?) (G20347 core-prim . record-type-field-names) (G20346 core-prim . record-rtd) (G20345 core-prim . record-field-mutable?) (G20344 core-prim . delete-file) (G20343 core-prim . file-exists?) (G20342 core-prim . vector-sort!) (G20341 core-prim . vector-sort) (G20340 core-prim . list-sort) (G20339 core-prim . symbol-hash) (G20338 core-prim . string-ci-hash) (G20337 core-prim . string-hash) (G20336 core-prim . equal-hash) (G20335 core-prim . hashtable-equivalence-function) (G20334 core-prim . make-hashtable) (G20333 core-prim . hashtable-hash-function) (G20332 core-prim . make-eqv-hashtable) (G20331 core-prim . make-eq-hashtable) (G20330 core-prim . hashtable?) (G20329 core-prim . hashtable-update!) (G20328 core-prim . hashtable-size) (G20327 core-prim . hashtable-set!) (G20326 core-prim . hashtable-ref) (G20325 core-prim . hashtable-mutable?) (G20324 core-prim . hashtable-keys) (G20323 core-prim . hashtable-entries) (G20322 core-prim . hashtable-delete!) (G20321 core-prim . hashtable-copy) (G20320 core-prim . hashtable-contains?) (G20319 core-prim . hashtable-clear!) (G20318 core-prim . call-with-output-file) (G20317 core-prim . call-with-input-file) (G20316 core-prim . write-char) (G20315 core-prim . write) (G20314 core-prim . with-output-to-file) (G20313 core-prim . with-input-from-file) (G20312 core-prim . read-char) (G20311 core-prim . read) (G20310 core-prim . peek-char) (G20309 core-prim . open-output-file) (G20308 core-prim . open-input-file) (G20307 core-prim . newline) (G20306 core-prim . display) (G20305 core-prim . close-output-port) (G20304 core-prim . close-input-port) (G20303 core-prim . eof-object?) (G20302 core-prim . eof-object) (G20301 core-prim . current-error-port) (G20300 core-prim . current-output-port) (G20299 core-prim . current-input-port) (G20298 core-prim . output-port?) (G20297 core-prim . input-port?) (G20296 core-prim . utf-8-codec) (G20295 core-prim . utf-16-codec) (G20294 core-prim . transcoder-error-handling-mode) (G20293 core-prim . transcoder-eol-style) (G20292 core-prim . transcoder-codec) (G20291 core-prim . transcoded-port) (G20290 core-prim . textual-port?) (G20289 core-prim . string->bytevector) (G20288 core-prim . standard-output-port) (G20287 core-prim . standard-input-port) (G20286 core-prim . standard-error-port) (G20285 core-prim . set-port-position!) (G20284 core-prim . put-u8) (G20283 core-prim . put-string) (G20282 core-prim . put-datum) (G20281 core-prim . put-char) (G20280 core-prim . put-bytevector) (G20279 core-prim . port?) (G20278 core-prim . port-transcoder) (G20277 core-prim . port-position) (G20276 core-prim . port-has-set-port-position!?) (G20275 core-prim . port-has-port-position?) (G20274 core-prim . port-eof?) (G20273 core-prim . output-port-buffer-mode) (G20272 core-prim . open-string-output-port) (G20271 core-prim . open-string-input-port) (G20270 core-prim . open-file-output-port) (G20269 core-prim . open-file-input/output-port) (G20268 core-prim . open-file-input-port) (G20267 core-prim . open-bytevector-output-port) (G20266 core-prim . open-bytevector-input-port) (G20265 core-prim . native-transcoder) (G20264 core-prim . native-eol-style) (G20263 core-prim . make-transcoder) (G20262 core-prim . latin-1-codec) (G19310 core-prim . make-i/o-write-error) (G19290 core-prim . make-i/o-read-error) (G19461 core-prim . make-i/o-port-error) (G19331 core-prim . make-i/o-invalid-position-error) (G19356 core-prim . make-i/o-filename-error) (G19380 core-prim . make-i/o-file-protection-error) (G19400 core-prim . make-i/o-file-is-read-only-error) (G19440 core-prim . make-i/o-file-does-not-exist-error) (G19420 core-prim . make-i/o-file-already-exists-error) (G19270 core-prim . make-i/o-error) (G19506 core-prim . make-i/o-encoding-error) (G19485 core-prim . make-i/o-decoding-error) (G20261 core-prim . make-custom-textual-output-port) (G20260 core-prim . make-custom-textual-input/output-port) (G20259 core-prim . make-custom-textual-input-port) (G20258 core-prim . make-custom-binary-output-port) (G20257 core-prim . make-custom-binary-input/output-port) (G20256 core-prim . make-custom-binary-input-port) (G20255 core-prim . make-bytevector) (G20254 core-prim . lookahead-u8) (G20253 core-prim . lookahead-char) (G19312 core-prim . i/o-write-error?) (G19292 core-prim . i/o-read-error?) (G19465 core-prim . i/o-port-error?) (G19335 core-prim . i/o-invalid-position-error?) (G19360 core-prim . i/o-filename-error?) (G19382 core-prim . i/o-file-protection-error?) (G19402 core-prim . i/o-file-is-read-only-error?) (G19442 core-prim . i/o-file-does-not-exist-error?) (G19422 core-prim . i/o-file-already-exists-error?) (G19272 core-prim . i/o-error?) (G19467 core-prim . i/o-error-port) (G19362 core-prim . i/o-error-filename) (G19510 core-prim . i/o-encoding-error?) (G19512 core-prim . i/o-encoding-error-char) (G19487 core-prim . i/o-decoding-error?) (G20252 core-prim . get-u8) (G20251 core-prim . get-string-n!) (G20250 core-prim . get-string-n) (G20249 core-prim . get-string-all) (G20248 core-prim . get-line) (G20247 core-prim . get-datum) (G20246 core-prim . get-char) (G20245 core-prim . get-bytevector-some) (G20244 core-prim . get-bytevector-n!) (G20243 core-prim . get-bytevector-n) (G20242 core-prim . get-bytevector-all) (G20241 core-prim . flush-output-port) (G20240 core-prim . close-port) (G12423 core-prim . scheme-report-environment) (G20239 core-prim . quotient) (G12421 core-prim . null-environment) (G20238 core-prim . remainder) (G20237 core-prim . modulo) (G20236 core-prim . inexact->exact) (G20235 core-prim . force) (G20234 core-prim . exact->inexact) (G20233 core-prim . exit) (G19601 core-prim . command-line) (G20232 core-prim . string-fill!) (G20231 core-prim . string-set!) (G20230 core-prim . set-cdr!) (G20229 core-prim . set-car!) (G20228 core-prim . remove) (G20227 core-prim . remv) (G20226 core-prim . remp) (G20225 core-prim . remq) (G20224 core-prim . partition) (G20223 core-prim . memv) (G20222 core-prim . memq) (G20221 core-prim . memp) (G20220 core-prim . member) (G20219 core-prim . exists) (G20218 core-prim . for-all) (G20217 core-prim . fold-right) (G20216 core-prim . fold-left) (G20215 core-prim . find) (G20214 core-prim . filter) (G20213 core-prim . cons*) (G20212 core-prim . assv) (G20211 core-prim . assq) (G20210 core-prim . assp) (G20209 core-prim . assoc) (G20208 core-prim . call-with-string-output-port) (G20207 core-prim . call-with-port) (G20206 core-prim . call-with-bytevector-output-port) (G20205 core-prim . bytevector->string) (G20204 core-prim . buffer-mode?) (G20203 core-prim . binary-port?) (G20202 core-prim . with-exception-handler) (G20201 core-prim . raise-continuable) (G20200 core-prim . raise) (G12427 core-prim . eval) (G12419 core-prim . environment) (G20199 core-prim . make-enumeration) (G20198 core-prim . enum-set=?) (G20197 core-prim . enum-set-universe) (G20196 core-prim . enum-set-union) (G20195 core-prim . enum-set-subset?) (G20194 core-prim . enum-set-projection) (G20193 core-prim . enum-set-member?) (G20192 core-prim . enum-set-intersection) (G20191 core-prim . enum-set-indexer) (G20190 core-prim . enum-set-difference) (G20189 core-prim . enum-set-constructor) (G20188 core-prim . enum-set-complement) (G20187 core-prim . enum-set->list) (G19044 core-prim . who-condition?) (G18916 core-prim . warning?) (G18976 core-prim . violation?) (G19156 core-prim . undefined-violation?) (G19132 core-prim . syntax-violation?) (G19136 core-prim . syntax-violation-subform) (G19134 core-prim . syntax-violation-form) (G12455 core-prim . syntax-violation) (G20186 core-prim . simple-conditions) (G18936 core-prim . serious-condition?) (G19066 core-prim . non-continuable-violation?) (G18894 core-prim . message-condition?) (G19040 core-prim . make-who-condition) (G18914 core-prim . make-warning) (G18974 core-prim . make-violation) (G19154 core-prim . make-undefined-violation) (G19126 core-prim . make-syntax-violation) (G18934 core-prim . make-serious-condition) (G19064 core-prim . make-non-continuable-violation) (G18890 core-prim . make-message-condition) (G19104 core-prim . make-lexical-violation) (G19015 core-prim . make-irritants-condition) (G19084 core-prim . make-implementation-restriction-violation) (G18954 core-prim . make-error) (G18994 core-prim . make-assertion-violation) (G19106 core-prim . lexical-violation?) (G19019 core-prim . irritants-condition?) (G19086 core-prim . implementation-restriction-violation?) (G18956 core-prim . error?) (G19046 core-prim . condition-who) (G20185 core-prim . condition-predicate) (G18896 core-prim . condition-message) (G19021 core-prim . condition-irritants) (G20184 core-prim . condition-accessor) (G20183 core-prim . condition) (G18996 core-prim . assertion-violation?) (G20182 core-prim . condition?) (G20181 core-prim . utf32->string) (G20180 core-prim . utf16->string) (G20179 core-prim . utf8->string) (G20178 core-prim . uint-list->bytevector) (G20177 core-prim . u8-list->bytevector) (G20176 core-prim . string->utf8) (G20175 core-prim . string->utf32) (G20174 core-prim . string->utf16) (G20173 core-prim . sint-list->bytevector) (G20172 core-prim . native-endianness) (G20171 core-prim . bytevector?) (G20170 core-prim . bytevector=?) (G20169 core-prim . bytevector-uint-set!) (G20168 core-prim . bytevector-uint-ref) (G20167 core-prim . bytevector-u8-set!) (G20166 core-prim . bytevector-u8-ref) (G20165 core-prim . bytevector-u64-set!) (G20164 core-prim . bytevector-u64-ref) (G20163 core-prim . bytevector-u64-native-set!) (G20162 core-prim . bytevector-u64-native-ref) (G20161 core-prim . bytevector-u32-set!) (G20160 core-prim . bytevector-u32-ref) (G20159 core-prim . bytevector-u32-native-set!) (G20158 core-prim . bytevector-u32-native-ref) (G20157 core-prim . bytevector-u16-set!) (G20156 core-prim . bytevector-u16-ref) (G20155 core-prim . bytevector-u16-native-set!) (G20154 core-prim . bytevector-u16-native-ref) (G20153 core-prim . bytevector-sint-set!) (G20152 core-prim . bytevector-sint-ref) (G20151 core-prim . bytevector-s8-set!) (G20150 core-prim . bytevector-s8-ref) (G20149 core-prim . bytevector-s64-set!) (G20148 core-prim . bytevector-s64-ref) (G20147 core-prim . bytevector-s64-native-set!) (G20146 core-prim . bytevector-s64-native-ref) (G20145 core-prim . bytevector-s32-set!) (G20144 core-prim . bytevector-s32-ref) (G20143 core-prim . bytevector-s32-native-set!) (G20142 core-prim . bytevector-s32-native-ref) (G20141 core-prim . bytevector-s16-set!) (G20140 core-prim . bytevector-s16-ref) (G20139 core-prim . bytevector-s16-native-set!) (G20138 core-prim . bytevector-s16-native-ref) (G20137 core-prim . bytevector-length) (G20136 core-prim . bytevector-ieee-single-ref) (G20135 core-prim . bytevector-ieee-single-native-set!) (G20134 core-prim . bytevector-ieee-single-native-ref) (G20133 core-prim . bytevector-ieee-double-ref) (G20132 core-prim . bytevector-ieee-double-native-set!) (G20131 core-prim . bytevector-ieee-double-native-ref) (G20130 core-prim . bytevector-fill!) (G20129 core-prim . bytevector-copy!) (G20128 core-prim . bytevector-copy) (G20127 core-prim . bytevector->uint-list) (G20126 core-prim . bytevector->u8-list) (G20125 core-prim . bytevector->sint-list) (G20124 core-prim . no-nans-violation?) (G20123 core-prim . no-infinities-violation?) (G20122 core-prim . make-no-nans-violation) (G20121 core-prim . make-no-infinities-violation) (G20120 core-prim . real->flonum) (G20119 core-prim . flzero?) (G20118 core-prim . fltruncate) (G20117 core-prim . fltan) (G20116 core-prim . flsqrt) (G20115 core-prim . flsin) (G20114 core-prim . flround) (G20113 core-prim . flpositive?) (G20112 core-prim . flonum?) (G20111 core-prim . flodd?) (G20110 core-prim . flnumerator) (G20109 core-prim . flnegative?) (G20108 core-prim . flnan?) (G20107 core-prim . flmod0) (G20106 core-prim . flmod) (G20105 core-prim . flmin) (G20104 core-prim . flmax) (G20103 core-prim . fllog) (G20102 core-prim . flinteger?) (G20101 core-prim . flinfinite?) (G20100 core-prim . flfloor) (G20099 core-prim . flfinite?) (G20098 core-prim . flexpt) (G20097 core-prim . flexp) (G20096 core-prim . fleven?) (G20095 core-prim . fldiv0-and-mod0) (G20094 core-prim . fldiv0) (G20093 core-prim . fldiv-and-mod) (G20092 core-prim . fldiv) (G20091 core-prim . fldenominator) (G20090 core-prim . flcos) (G20089 core-prim . flceiling) (G20088 core-prim . flatan) (G20087 core-prim . flasin) (G20086 core-prim . flacos) (G20085 core-prim . flabs) (G20084 core-prim . fl>?) (G20083 core-prim . fl>=?) (G20082 core-prim . fl=?) (G20081 core-prim . fl<?) (G20080 core-prim . fl<=?) (G20079 core-prim . fl/) (G20078 core-prim . fl-) (G20077 core-prim . fl+) (G20076 core-prim . fl*) (G20075 core-prim . fixnum->flonum) (G20074 core-prim . fxzero?) (G20073 core-prim . fxxor) (G20072 core-prim . fxrotate-bit-field) (G20071 core-prim . fxreverse-bit-field) (G20070 core-prim . fxpositive?) (G20069 core-prim . fxodd?) (G20068 core-prim . fxnot) (G20067 core-prim . fxnegative?) (G20066 core-prim . fxmod0) (G20065 core-prim . fxmod) (G20064 core-prim . fxmin) (G20063 core-prim . fxmax) (G20062 core-prim . fxlength) (G20061 core-prim . fxior) (G20060 core-prim . fxif) (G20059 core-prim . fxfirst-bit-set) (G20058 core-prim . fxeven?) (G20057 core-prim . fxdiv0-and-mod0) (G20056 core-prim . fxdiv0) (G20055 core-prim . fxdiv-and-mod) (G20054 core-prim . fxdiv) (G20053 core-prim . fxcopy-bit-field) (G20052 core-prim . fxcopy-bit) (G20051 core-prim . fxbit-set?) (G20050 core-prim . fxbit-field) (G20049 core-prim . fxbit-count) (G20048 core-prim . fxarithmetic-shift-right) (G20047 core-prim . fxarithmetic-shift-left) (G20046 core-prim . fxarithmetic-shift) (G20045 core-prim . fxand) (G20044 core-prim . fx>?) (G20043 core-prim . fx>=?) (G20042 core-prim . fx=?) (G20041 core-prim . fx<?) (G20040 core-prim . fx<=?) (G20039 core-prim . fx-/carry) (G20038 core-prim . fx-) (G20037 core-prim . fx+/carry) (G20036 core-prim . fx+) (G20035 core-prim . fx*/carry) (G20034 core-prim . fx*) (G20033 core-prim . greatest-fixnum) (G20032 core-prim . least-fixnum) (G20031 core-prim . fixnum-width) (G20030 core-prim . fixnum?) (G20029 core-prim . bitwise-rotate-bit-field) (G20028 core-prim . bitwise-reverse-bit-field) (G20027 core-prim . bitwise-length) (G20026 core-prim . bitwise-if) (G20025 core-prim . bitwise-first-bit-set) (G20024 core-prim . bitwise-copy-bit-field) (G20023 core-prim . bitwise-copy-bit) (G20022 core-prim . bitwise-bit-set?) (G20021 core-prim . bitwise-bit-field) (G20020 core-prim . bitwise-bit-count) (G20019 core-prim . bitwise-xor) (G20018 core-prim . bitwise-ior) (G20017 core-prim . bitwise-and) (G20016 core-prim . bitwise-not) (G20015 core-prim . bitwise-arithmetic-shift-right) (G20014 core-prim . bitwise-arithmetic-shift-left) (G20013 core-prim . bitwise-arithmetic-shift) (G20012 core-prim . zero?) (G20011 core-prim . vector?) (G20010 core-prim . vector-set!) (G20009 core-prim . vector-ref) (G20008 core-prim . vector-map) (G20007 core-prim . vector-length) (G20006 core-prim . vector-for-each) (G20005 core-prim . vector-fill!) (G20004 core-prim . vector->list) (G20003 core-prim . vector) (G20002 core-prim . values) (G20001 core-prim . truncate) (G20000 core-prim . tan) (G19999 core-prim . symbol?) (G19998 core-prim . symbol=?) (G19997 core-prim . symbol->string) (G19996 core-prim . substring) (G19995 core-prim . string?) (G19994 core-prim . string>?) (G19993 core-prim . string>=?) (G19992 core-prim . string=?) (G19991 core-prim . string<?) (G19990 core-prim . string<=?) (G19989 core-prim . string-ref) (G19988 core-prim . string-length) (G19987 core-prim . string-for-each) (G19986 core-prim . string-copy) (G19985 core-prim . string-append) (G19984 core-prim . string->symbol) (G19983 core-prim . string->number) (G19982 core-prim . string->list) (G19981 core-prim . string) (G19980 core-prim . sqrt) (G19979 core-prim . sin) (G19978 core-prim . round) (G19977 core-prim . reverse) (G19976 core-prim . real?) (G19975 core-prim . real-valued?) (G19974 core-prim . real-part) (G19973 core-prim . rationalize) (G19972 core-prim . rational?) (G19971 core-prim . rational-valued?) (G19970 core-prim . procedure?) (G19969 core-prim . positive?) (G19968 core-prim . pair?) (G19967 core-prim . odd?) (G19966 core-prim . numerator) (G19965 core-prim . number?) (G19964 core-prim . number->string) (G19963 core-prim . null?) (G19962 core-prim . not) (G19961 core-prim . negative?) (G19960 core-prim . nan?) (G19959 core-prim . min) (G19958 core-prim . max) (G19957 core-prim . map) (G19956 core-prim . make-vector) (G19955 core-prim . make-string) (G19954 core-prim . make-rectangular) (G19953 core-prim . make-polar) (G19952 core-prim . magnitude) (G19951 core-prim . log) (G19950 core-prim . list?) (G19949 core-prim . list-tail) (G19948 core-prim . list-ref) (G19947 core-prim . list->vector) (G19946 core-prim . list->string) (G19945 core-prim . list) (G19944 core-prim . length) (G19943 core-prim . lcm) (G19942 core-prim . integer?) (G19941 core-prim . integer-valued?) (G19940 core-prim . integer->char) (G19939 core-prim . infinite?) (G19938 core-prim . inexact?) (G19937 core-prim . inexact) (G19936 core-prim . imag-part) (G19935 core-prim . gcd) (G19934 core-prim . for-each) (G19933 core-prim . floor) (G19932 core-prim . finite?) (G19931 core-prim . expt) (G19930 core-prim . exp) (G19929 core-prim . exact?) (G19928 core-prim . exact-integer-sqrt) (G19927 core-prim . exact) (G19926 core-prim . even?) (G19925 core-prim . error) (G19924 core-prim . eqv?) (G19923 core-prim . equal?) (G19922 core-prim . eq?) (G19921 core-prim . dynamic-wind) (G19920 core-prim . div0-and-mod0) (G19919 core-prim . mod0) (G19918 core-prim . div0) (G19917 core-prim . div-and-mod) (G19916 core-prim . mod) (G19915 core-prim . div) (G19914 core-prim . denominator) (G19913 core-prim . cos) (G19912 core-prim . cons) (G19911 core-prim . complex?) (G19910 core-prim . char?) (G19909 core-prim . char>?) (G19908 core-prim . char>=?) (G19907 core-prim . char=?) (G19906 core-prim . char<?) (G19905 core-prim . char<=?) (G19904 core-prim . char->integer) (G19903 core-prim . ceiling) (G19902 core-prim . call-with-values) (G19901 core-prim . call/cc) (G19900 core-prim . call-with-current-continuation) (G19899 core-prim . cddddr) (G19898 core-prim . cdddar) (G19897 core-prim . cddadr) (G19896 core-prim . cddaar) (G19895 core-prim . cdaddr) (G19894 core-prim . cdadar) (G19893 core-prim . cdaadr) (G19892 core-prim . cdaaar) (G19891 core-prim . cadddr) (G19890 core-prim . caddar) (G19889 core-prim . cadadr) (G19888 core-prim . cadaar) (G19887 core-prim . caaddr) (G19886 core-prim . caadar) (G19885 core-prim . caaadr) (G19884 core-prim . caaaar) (G19883 core-prim . cdddr) (G19882 core-prim . cddar) (G19881 core-prim . cdadr) (G19880 core-prim . cdaar) (G19879 core-prim . caddr) (G19878 core-prim . cadar) (G19877 core-prim . caadr) (G19876 core-prim . caaar) (G19875 core-prim . cddr) (G19874 core-prim . cdar) (G19873 core-prim . cadr) (G19872 core-prim . caar) (G19871 core-prim . cdr) (G19870 core-prim . car) (G19869 core-prim . boolean?) (G19868 core-prim . boolean=?) (G19867 core-prim . atan) (G19866 core-prim . assertion-violation) (G19865 core-prim . asin) (G19864 core-prim . apply) (G19863 core-prim . append) (G19862 core-prim . angle) (G19861 core-prim . acos) (G19860 core-prim . abs) (G19859 core-prim . /) (G19858 core-prim . *) (G19857 core-prim . -) (G19856 core-prim . +) (G19855 core-prim . >=) (G19854 core-prim . >) (G19853 core-prim . =) (G19852 core-prim . <=) (G19851 core-prim . <) (G19850 core-prim . library) (G19849 core-prim . export) (G19848 $core-rtd &no-nans-rtd &no-nans-rcd) (G19847 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G19846 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G19845 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G19844 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G19843 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G19842 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G19841 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G19840 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G19839 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G19838 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G19837 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G19836 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G19835 $core-rtd &i/o-rtd &i/o-rcd) (G19834 $core-rtd &undefined-rtd &undefined-rcd) (G19833 $core-rtd &syntax-rtd &syntax-rcd) (G19832 $core-rtd &lexical-rtd &lexical-rcd) (G19831 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G19830 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G19829 $core-rtd &who-rtd &who-rcd) (G19828 $core-rtd &irritants-rtd &irritants-rcd) (G19827 $core-rtd &assertion-rtd &assertion-rcd) (G19826 $core-rtd &violation-rtd &violation-rcd) (G19825 $core-rtd &error-rtd &error-rcd) (G19824 $core-rtd &serious-rtd &serious-rcd) (G19823 $core-rtd &warning-rtd &warning-rcd) (G19822 $core-rtd &message-rtd &message-rcd) (G19821 $core-rtd &condition-rtd &condition-rcd) (G19820 macro . define-condition-type) (G19819 macro . define-enumeration) (G19818 macro . define-record-type) (G19817 macro . parent-rtd) (G19816 macro . nongenerative) (G19815 macro . opaque) (G19814 macro . sealed) (G19813 macro . protocol) (G19812 macro . parent) (G19811 macro . immutable) (G19810 macro . mutable) (G19809 macro . fields) (G19808 macro . error-handling-mode) (G19807 macro . file-options) (G19806 macro . buffer-mode) (G19805 macro . eol-style) (G19804 macro . guard) (G19803 macro . trace-define) (G19802 macro . trace-lambda) (G19801 macro . unsyntax-splicing) (G19800 macro . unsyntax) (G19799 macro . unquote-splicing) (G19798 macro . unquote) (G19797 macro . _) (G19796 macro . else) (G19795 macro . =>) (G19794 macro . ...) (G19793 macro . assert) (G19792 macro . endianness) (G19791 macro . delay) (G19790 macro . time) (G19789 macro . or) (G19788 macro . and) (G19787 macro . do) (G19786 macro . cond) (G19785 macro . let*) (G19784 macro . let) (G19783 macro . let*-values) (G19782 macro . let-values) (G19781 macro . identifier-syntax) (G19780 macro . with-syntax) (G19779 macro . quasisyntax) (G19778 macro . quasiquote) (G19777 macro . syntax-rules) (G19776 macro . include) (G19775 macro . define-struct) (G19774 core-macro . record-constructor-descriptor) (G19773 core-macro . record-type-descriptor) (G19772 core-macro . case) (G19771 core-macro . parameterize) (G19770 core-macro . unless) (G19769 core-macro . when) (G19768 core-macro . if) (G19767 core-macro . letrec*) (G19766 core-macro . letrec) (G19765 core-macro . type-descriptor) (G19764 core-macro . case-lambda) (G19763 core-macro . lambda) (G19762 core-macro . syntax) (G19761 core-macro . syntax-case) (G19760 core-macro . quote) (G19759 core-macro . foreign-call) (G19758 letrec-syntax) (G19757 let-syntax) (G19756 set!) (G19755 import) (G19754 begin) (G19753 module) (G19752 define-syntax) (G19751 define)) values values '#f '#f '#f '#f) (G11129@G10767@install-library 'G20544 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G20455) (eval-core . G20454) (set-symbol-value! . G20453) (symbol-value . G20452) (gensym . G20451) (void . G20450)) '() values values '#f '#f '#f '#f) (G11129@G10767@install-library 'G20545 '(mosh) '() '() '() '() '((symbol-value . G20452) (standard-library-path . G20412) (get-command-line . G20395) (sys-display . G20394) (source-info . G20393) (set-source-info! . G20392) (include . G19776)) '() values values '#f '#f '#f '#f) (G11129@G10767@install-library 'G20546 '(mosh backend) '() '() '() '() '((receive . G20391)) '() values values '#f '#f '#f '#f) (G11129@G10767@install-library 'G20547 '(mosh file) '() '() '() '() '((read-line . G20447) (current-directory . G20411) (write-to-file . G20410) (file->list . G20409) (file->string . G20408)) '() values values '#f '#f '#f '#f) (G11129@G10767@install-library 'G20548 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G20403)) '() values values '#f '#f '#f '#f) (G11129@G10767@install-library 'G20549 '(mosh number) '() '() '() '() '((digit->integer . G20407)) '() values values '#f '#f '#f '#f) (G11129@G10767@install-library 'G20550 '(mosh string) '() '() '() '() '((print . G20414) (format . G20413) (call-with-string-input-port . G20406) (call-with-string-io . G20405) (string-split . G20404) (string->regexp . G20402)) '() values values '#f '#f '#f '#f) (G11129@G10767@install-library 'G20551 '(mosh list) '() '() '() '() '((assoc-ref . G20416)) '() values values '#f '#f '#f '#f) (G11129@G10767@install-library 'G20552 '(mosh regexp) '() '() '() '() '((rxmatch . G20401) (regexp-replace-all . G20400)) '() values values '#f '#f '#f '#f) (G11129@G10767@install-library 'G20553 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G20399)) '() values values '#f '#f '#f '#f) (G11129@G10767@install-library 'G20554 '(system) '() '() '() '() '((readdir . G20398) (get-environment-variables . G20397) (get-environment-variable . G20396)) '() values values '#f '#f '#f '#f) (G11129@G10767@install-library 'G20555 '(srfi :1) '() '() '() '() '((dotted-list? . G20446) (circular-list? . G20445) (proper-list? . G20444) (circular-list . G20443) (last . G20442) (last-pair . G20441) (not-pair? . G20440) (split-at! . G20439) (split-at . G20438) (list= . G20437) (list-copy . G20436) (list-tabulate . G20435) (make-list . G20434) (xcons . G20433) (tenth . G20432) (ninth . G20431) (eighth . G20430) (seventh . G20429) (sixth . G20428) (fifth . G20427) (drop-right! . G20426) (drop-right . G20425) (take-right . G20424) (take! . G20423) (drop . G20422) (take . G20421) (car+cdr . G20420) (third . G20419) (second . G20418) (first . G20417) (alist-cons . G20415)) '() values values '#f '#f '#f '#f))
((lambda (G19596@for-each-with-index G19598@repl G19600@trace-printer G19602@command-line G19604@local-library-path G19606@load/args G19608@load G19610@ironscheme-build G19612@eval-top-level G19614@compile-system-libraries G19616@compile G19618@compile->closure G19620@load-r6rs-top-level G19622@write-record) (begin (set! G19596@for-each-with-index (lambda (G19642@proc G19643@lst) (letrec ((G19646@loop (lambda (G19648@i G19649@lst) (if (null? G19649@lst) (if '#f '#f (void)) (begin (G19642@proc G19648@i (car G19649@lst)) (G19646@loop (+ G19648@i '1) (cdr G19649@lst))))))) (G19646@loop '1 G19643@lst)))) (set! G19598@repl (lambda G19652@x ((lambda (G19655@rec) (begin (set! G19655@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G19657@G19656) (with-exception-handler (lambda (G19659@e) (G19657@G19656 (if '#t (G19596@for-each-with-index (lambda (G19661@i G19662@x) ((lambda (G19665@rtd) (begin (format '#t '"   ~d. ~a" G19661@i (record-type-name G19665@rtd)) ((lambda (G19667@v) ((lambda (G19669@t) (if (eqv? G19669@t '0) (newline) (if (eqv? G19669@t '1) (begin (display '": ") (write ((record-accessor G19665@rtd '0) G19662@x)) (newline)) (begin (display '":\n") ((letrec ((G19670@f (lambda (G19672@i) (if (= G19672@i (vector-length G19667@v)) (void) (begin (display '"       ") (display (vector-ref G19667@v G19672@i)) (display '": ") (write ((record-accessor G19665@rtd G19672@i) G19662@x)) (newline) (G19670@f (+ G19672@i '1))))))) G19670@f) '0))))) (vector-length G19667@v))) (record-type-field-names G19665@rtd)))) (record-rtd G19662@x))) (simple-conditions G19659@e)) (raise G19659@e)))) (lambda () (begin '#f ((lambda (G19674@line) (if (eof-object? G19674@line) (exit) (write (G19612@eval-top-level (call-with-port (open-string-input-port G19674@line) read))))) (get-line (current-input-port)))))))) (newline) (G19655@rec)))) (G19655@rec))) '#f))) (set! G19600@trace-printer (G10460@G10255@make-parameter write)) (set! G19602@command-line (G10460@G10255@make-parameter (get-command-line))) (set! G19604@local-library-path (lambda (G19676@filename) (cons '"." (G11113@G10735@library-path)))) (set! G19606@load/args (lambda (G19678@filename . G19680@args) (begin (apply G19620@load-r6rs-top-level G19678@filename 'load G19680@args) (void)))) (set! G19608@load (lambda (G19682@filename) (begin (apply G19620@load-r6rs-top-level G19682@filename 'load (G19602@command-line)) (void)))) (set! G19610@ironscheme-build (lambda () (G19608@load '"ironscheme-buildscript.ss"))) (set! G19612@eval-top-level (lambda (G19684@x) (G18826@G12428@eval G19684@x (G18846@G12468@interaction-environment)))) (set! G19614@compile-system-libraries (lambda () (G19612@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G19616@compile (lambda (G19686@filename) (G19620@load-r6rs-top-level G19686@filename 'compile))) (set! G19618@compile->closure (lambda (G19688@filename) (G19620@load-r6rs-top-level G19688@filename 'closure))) (set! G19620@load-r6rs-top-level (lambda (G19690@filename G19691@how . G19694@args) ((lambda (G19698@G19696@library-path G19699@G19697@library-path) ((lambda (G19702@swap) (dynamic-wind G19702@swap (lambda () ((lambda (G19704@x*) ((lambda (G19706@t) (if (eqv? G19706@t 'closure) (G18845@G12466@pre-compile-r6rs-top-level G19704@x*) (if (eqv? G19706@t 'load) ((lambda (G19709@G19707@command-line G19710@G19708@command-line) ((lambda (G19713@swap) (dynamic-wind G19713@swap (lambda () ((G18844@G12464@compile-r6rs-top-level G19704@x*))) G19713@swap)) (lambda () ((lambda (G19715@t) (begin (G19709@G19707@command-line G19710@G19708@command-line) (set! G19710@G19708@command-line G19715@t))) (G19709@G19707@command-line))))) G19602@command-line (cons G19690@filename (car G19694@args))) (if (eqv? G19706@t 'compile) (begin (G18844@G12464@compile-r6rs-top-level G19704@x*) (G11117@G10743@serialize-all G10455@G10245@serialize-library G10560@G10474@compile-core-expr)) (void))))) G19691@how)) (with-input-from-file G19690@filename (lambda () ((letrec ((G19717@f (lambda () ((lambda (G19719@x) (if (eof-object? G19719@x) '() (cons G19719@x (G19717@f)))) (G10450@G10235@read-annotated))))) G19717@f)))))) G19702@swap)) (lambda () ((lambda (G19721@t) (begin (G19698@G19696@library-path G19699@G19697@library-path) (set! G19699@G19697@library-path G19721@t))) (G19698@G19696@library-path))))) G11113@G10735@library-path (G19604@local-library-path G19690@filename)))) (set! G19622@write-record (lambda (G19723@record G19724@port) ((lambda (G19727@rtd) (begin (format G19724@port '"    ~a" (record-type-name G19727@rtd)) ((lambda (G19729@v) ((lambda (G19731@t) (if (eqv? G19731@t '0) (newline) (if (eqv? G19731@t '1) (begin (display '": " G19724@port) (write ((record-accessor G19727@rtd '0) G19723@record) G19724@port) (newline G19724@port)) (begin (display '":\n") ((letrec ((G19732@f (lambda (G19734@i) (if (= G19734@i (vector-length G19729@v)) (void) (begin (display '"       " G19724@port) (display (vector-ref G19729@v G19734@i) G19724@port) (display '": " G19724@port) (write ((record-accessor G19727@rtd G19734@i) G19723@record) G19724@port) (newline G19724@port) (G19732@f (+ G19734@i '1))))))) G19732@f) '0))))) (vector-length G19729@v))) (record-type-field-names G19727@rtd)))) (record-rtd G19723@record)))) (begin (set! G19749@G19622@write-record G19622@write-record) (set! G19748@G19620@load-r6rs-top-level G19620@load-r6rs-top-level) (set! G19747@G19618@compile->closure G19618@compile->closure) (set! G19746@G19616@compile G19616@compile) (set! G19745@G19614@compile-system-libraries G19614@compile-system-libraries) (set! G19744@G19612@eval-top-level G19612@eval-top-level) (set! G19743@G19610@ironscheme-build G19610@ironscheme-build) (set! G19742@G19608@load G19608@load) (set! G19741@G19606@load/args G19606@load/args) (set! G19740@G19604@local-library-path G19604@local-library-path) (set! G19739@G19602@command-line G19602@command-line) (set! G19738@G19600@trace-printer G19600@trace-printer) (set! G19737@G19598@repl G19598@repl) (set! G19736@G19596@for-each-with-index G19596@for-each-with-index) (G11118@G10745@current-precompiled-library-loader G10456@G10247@load-serialized-library) (set-symbol-value! 'load G19608@load) (set-symbol-value! 'eval-r6rs G19612@eval-top-level) (set-symbol-value! 'int-env-syms G18819@G12414@interaction-environment-symbols) (set-symbol-value! 'expanded2core G10559@G10472@expanded->core) (set-symbol-value! 'trace-printer G19600@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G11113@G10735@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G19623@args G19624@port) (with-exception-handler (lambda (G19627@c) (begin (display '" Condition components:\n" G19624@port) (G19596@for-each-with-index (lambda (G19629@i G19630@x) ((lambda (G19633@rtd) (begin (format G19624@port '"   ~d. ~a" G19629@i (record-type-name G19633@rtd)) ((lambda (G19635@v) ((lambda (G19637@t) (if (eqv? G19637@t '0) (newline) (if (eqv? G19637@t '1) (begin (display '": ") (write ((record-accessor G19633@rtd '0) G19630@x)) (newline)) (begin (display '":\n") ((letrec ((G19638@f (lambda (G19640@i) (if (= G19640@i (vector-length G19635@v)) (void) (begin (display '"       ") (display (vector-ref G19635@v G19640@i)) (display '": ") (write ((record-accessor G19633@rtd G19640@i) G19630@x)) (newline) (G19638@f (+ G19640@i '1))))))) G19638@f) '0))))) (vector-length G19635@v))) (record-type-field-names G19633@rtd)))) (record-rtd G19630@x))) (simple-conditions G19627@c)))) (lambda () (if (null? G19623@args) (G19598@repl) (G19620@load-r6rs-top-level (car G19623@args) 'load (cdr G19623@args)))))) (G19602@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
