;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2888@read-annotated G288a@annotation-stripped G288c@annotation? G288e@annotation-source G2890@annotation-expression G2892@scm->fasl G2894@fasl-save G2896@fasl-load G2898@serialize-library G289a@load-serialized-library G289c@make-record-printer G289e@compile-core G28a0@read-library-source-file G28a2@make-parameter G293c@file-options-spec) (begin (set! G2888@read-annotated read) (set! G288a@annotation-stripped (lambda (G293d@x) (G2890@annotation-expression G293d@x))) (set! G288c@annotation? (lambda (G293f@x) (source-info G293f@x))) (set! G288e@annotation-source (lambda (G2941@x) (source-info G2941@x))) (set! G2890@annotation-expression (lambda (G2943@x) (if (pair? G2943@x) (cons (car G2943@x) (cdr G2943@x)) (display '"line:46\n")))) (set! G2892@scm->fasl (lambda (G2945@filename) (string-append G2945@filename '".fasl"))) (set! G2894@fasl-save (lambda (G2947@filename G2948@obj) (call-with-port (open-file-output-port G2947@filename) (lambda (G294b@port) ((symbol-value 'fasl-write!) G2948@obj G294b@port))))) (set! G2896@fasl-load (lambda (G294d@filename) (call-with-port (open-file-input-port G294d@filename) (symbol-value 'fasl-read!)))) (set! G2898@serialize-library (lambda (G294f@filename G2950@obj) (begin (format '#t '"serialize-library ~a\n..." G294f@filename) ((lambda (G2953@fasl-file) (begin (if (file-exists? G2953@fasl-file) (delete-file G2953@fasl-file) (void)) (call/cc (lambda (G2956@G2955) (with-exception-handler (lambda (G2958@c) (G2956@G2955 (if '#t (begin (format '#t '"Warning:serialize-library failed " G294f@filename) (if (file-exists? G2953@fasl-file) (delete-file G2953@fasl-file) (void)) '#f) (raise G2958@c)))) (lambda () (begin '#f (G2894@fasl-save G2953@fasl-file G2950@obj) (display '"OK\n")))))))) (G2892@scm->fasl G294f@filename))))) (set! G289a@load-serialized-library (lambda (G295a@filename G295b@obj) ((lambda (G295e@fasl-file) (if (if (file-exists? G295e@fasl-file) (begin '#f ((symbol-value 'file-newer?) G295e@fasl-file G295a@filename)) '#f) ((lambda (G2960@expanded2core) ((lambda (G2962@code) ((lambda (G2964@pivot) ((lambda (G2966@visit) ((lambda (G2968@visit-proc) ((lambda () (begin (set-car! G2964@pivot G2968@visit-proc) ((lambda (G296a@pivot) ((lambda (G296c@invoke) ((lambda () (begin (set-car! G296a@pivot (lambda () (eval-core G296c@invoke))) (apply G295b@obj G2962@code))))) (G2960@expanded2core (car G296a@pivot)))) (cdr G2964@pivot)) '#t)))) (lambda () (eval-core G2966@visit)))) (G2960@expanded2core (car G2964@pivot)))) (cddddr (cddddr G2962@code)))) (G2896@fasl-load G295e@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2892@scm->fasl G295a@filename)))) (set! G289c@make-record-printer (lambda (G296e@name G296f@printer) (lambda G2972@x (begin (display '"record printer") (for-each display G2972@x))))) (set! G289e@compile-core (lambda G2974@x (apply error 'comile-core '"not implementated" G2974@x))) (set! G28a0@read-library-source-file (lambda (G2976@file-name) (with-input-from-file G2976@file-name G2888@read-annotated))) (set! G28a2@make-parameter (lambda G2986 ((lambda (G2987) (if (= G2987 '1) (apply (lambda (G2978@x) (G28a2@make-parameter G2978@x (lambda (G297a@x) G297a@x))) G2986) (if (= G2987 '2) (apply (lambda (G297c@x G297d@fender) ((lambda (G2980@x) (lambda G2984 ((lambda (G2985) (if (= G2985 '0) (apply (lambda () G2980@x) G2984) (if (= G2985 '1) (apply (lambda (G2982@v) (set! G2980@x (G297d@fender G2982@v))) G2984) (error 'apply '"invalid arg count")))) (length G2984)))) (G297d@fender G297c@x))) G2986) (error 'apply '"invalid arg count")))) (length G2986)))) (set! G293c@file-options-spec (lambda (G2988@x) G2988@x)) (begin (set! G2998@G293c@file-options-spec G293c@file-options-spec) (set! G2997@G28a2@make-parameter G28a2@make-parameter) (set! G2996@G28a0@read-library-source-file G28a0@read-library-source-file) (set! G2995@G289e@compile-core G289e@compile-core) (set! G2994@G289c@make-record-printer G289c@make-record-printer) (set! G2993@G289a@load-serialized-library G289a@load-serialized-library) (set! G2992@G2898@serialize-library G2898@serialize-library) (set! G2991@G2896@fasl-load G2896@fasl-load) (set! G2990@G2894@fasl-save G2894@fasl-save) (set! G298f@G2892@scm->fasl G2892@scm->fasl) (set! G298e@G2890@annotation-expression G2890@annotation-expression) (set! G298d@G288e@annotation-source G288e@annotation-source) (set! G298c@G288c@annotation? G288c@annotation?) (set! G298b@G288a@annotation-stripped G288a@annotation-stripped) (set! G298a@G2888@read-annotated G2888@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G299d@current-primitive-locations G299f@mutable? G29a1@rewriter G29a3@expanded->core G29a5@compile-core-expr G29a7@pretty-print G29a9@compile-core-expr-to-port) (begin (set! G299d@current-primitive-locations (G2997@G28a2@make-parameter (lambda (G29aa@x) '#f) (lambda (G29ac@p) G29ac@p))) (set! G299f@mutable? (lambda (G29ae@x) ((lambda (G29b1@simple?) (begin (set! G29b1@simple? (lambda (G29b2@x) ((lambda (G29b4@t) (if G29b4@t G29b4@t ((lambda (G29b6@t) (if G29b6@t G29b6@t ((lambda (G29b8@t) (if G29b8@t G29b8@t ((lambda (G29ba@t) (if G29ba@t G29ba@t ((lambda (G29bc@t) (if G29bc@t G29bc@t ((lambda (G29be@t) (if G29be@t G29be@t (begin '#f (number? G29b2@x)))) (bytevector? G29b2@x)))) (string? G29b2@x)))) (boolean? G29b2@x)))) (symbol? G29b2@x)))) (char? G29b2@x)))) (null? G29b2@x)))) (not (G29b1@simple? G29ae@x)))) '#f))) (set! G29a1@rewriter (lambda (G29c0@quote-hack?) ((lambda (G29c3@f) (begin (set! G29c3@f (lambda (G29c4@x) (if (pair? G29c4@x) ((lambda (G29c6@t) (if (memv G29c6@t '(quote)) (if (if G29c0@quote-hack? (begin '#f (G299f@mutable? (cadr G29c4@x))) '#f) ((lambda (G29c8@g) (begin (set-symbol-value! G29c8@g (cadr G29c4@x)) G29c8@g)) (gensym)) G29c4@x) (if (memv G29c6@t '(case-lambda)) (cons 'case-lambda (map (lambda (G29ca@x) (cons (car G29ca@x) (map G29c3@f (cdr G29ca@x)))) (cdr G29c4@x))) (if (memv G29c6@t '(lambda)) (cons* 'lambda (cadr G29c4@x) (map G29c3@f (cddr G29c4@x))) (if (memv G29c6@t '(letrec)) ((lambda (G29cc@bindings G29cd@body*) ((lambda (G29d0@lhs* G29d1@rhs*) (cons* 'letrec (map list G29d0@lhs* (map G29c3@f G29d1@rhs*)) (map G29c3@f G29cd@body*))) (map car G29cc@bindings) (map cadr G29cc@bindings))) (cadr G29c4@x) (cddr G29c4@x)) (if (memv G29c6@t '(letrec*)) ((lambda (G29d4@bindings G29d5@body*) ((lambda (G29d8@lhs* G29d9@rhs*) (cons* 'letrec* (map list G29d8@lhs* (map G29c3@f G29d9@rhs*)) (map G29c3@f G29d5@body*))) (map car G29d4@bindings) (map cadr G29d4@bindings))) (cadr G29c4@x) (cddr G29c4@x)) (if (memv G29c6@t '(library-letrec*)) ((lambda (G29dc@name G29dd@x) ((lambda (G29e0@bindings G29e1@body*) ((lambda (G29e4@lhs* G29e5@lhs** G29e6@rhs*) (cons* 'library-letrec* G29dc@name (map list G29e4@lhs* G29e5@lhs** (map G29c3@f G29e6@rhs*)) (map G29c3@f G29e1@body*))) (map car G29e0@bindings) (map cadr G29e0@bindings) (map caddr G29e0@bindings))) (cadr G29dd@x) (cddr G29dd@x))) (cadr G29c4@x) (cdr G29c4@x)) (if (memv G29c6@t '(begin)) (cons 'begin (map G29c3@f (cdr G29c4@x))) (if (memv G29c6@t '(set!)) (list 'set! (cadr G29c4@x) (G29c3@f (caddr G29c4@x))) (if (memv G29c6@t '(primitive)) ((lambda (G29ea@op) ((lambda (G29ec@t) (if G29ec@t ((lambda (G29ee@loc) G29ee@loc) G29ec@t) G29ea@op)) ((G299d@current-primitive-locations) G29ea@op))) (cadr G29c4@x)) (if (memv G29c6@t '(define)) G29c4@x (if (list? G29c4@x) (map G29c3@f G29c4@x) (error 'rewrite '"invalid form ~s ~s" G29c4@x (list? G29c4@x)))))))))))))) (car G29c4@x)) G29c4@x))) G29c3@f)) '#f))) (set! G29a3@expanded->core (lambda (G29f0@x) ((G29a1@rewriter '#t) G29f0@x))) (set! G29a5@compile-core-expr (lambda (G29f2@x) ((G29a1@rewriter '#f) G29f2@x))) (set! G29a7@pretty-print write) (set! G29a9@compile-core-expr-to-port (lambda (G29f4@x G29f5@p) (G29a7@pretty-print ((G29a1@rewriter '#f) G29f4@x) G29f5@p))) (begin (set! G29fe@G29a9@compile-core-expr-to-port G29a9@compile-core-expr-to-port) (set! G29fd@G29a7@pretty-print G29a7@pretty-print) (set! G29fc@G29a5@compile-core-expr G29a5@compile-core-expr) (set! G29fb@G29a3@expanded->core G29a3@expanded->core) (set! G29fa@G29a1@rewriter G29a1@rewriter) (set! G29f9@G299f@mutable? G299f@mutable?) (set! G29f8@G299d@current-primitive-locations G299d@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2a58@make-collection G2a5a@current-library-collection G2a60@G2a5b G2a62@G2a5d G2a64@G2a5c G2a69@library? G2a6b@make-library G2a6d@library-id G2a6f@library-name G2a71@library-version G2a73@library-imp* G2a75@library-vis* G2a77@library-inv* G2a79@library-subst G2a7b@library-env G2a7d@library-visit-state G2a7f@library-invoke-state G2a81@library-visit-code G2a83@library-invoke-code G2a85@library-visible? G2a87@library-source-file-name G2a89@set-library-id! G2a8b@set-library-name! G2a8d@set-library-version! G2a8f@set-library-imp*! G2a91@set-library-vis*! G2a93@set-library-inv*! G2a95@set-library-subst! G2a97@set-library-env! G2a99@set-library-visit-state! G2a9b@set-library-invoke-state! G2a9d@set-library-visit-code! G2a9f@set-library-invoke-code! G2aa1@set-library-visible?! G2aa3@set-library-source-file-name! G2aa5@rp G2aa7@find-dependencies G2aa9@find-library-by G2aab@library-path G2aad@library-extensions G2aaf@library-name->file-name G2ab1@file-locator G2ab3@serialize-all G2ab5@current-precompiled-library-loader G2ab7@try-load-from-file G2ab9@library-loader G2abb@current-library-expander G2abd@external-pending-libraries G2abf@find-external-library G2ac1@find-library-by-name G2ac3@library-exists? G2ac5@find-library-by-spec/die G2ac7@label->binding-table G2ac9@install-library-record G2acb@install-library G2acd@imported-label->binding G2acf@invoke-library G2ad1@visit-library G2ad3@invoke-library-by-spec G2ad5@installed-libraries G2ad7@library-spec) (begin (set! G2a58@make-collection (lambda () ((lambda (G2ad8@set) ((lambda (G2adb@set-cons) (begin (set! G2adb@set-cons (lambda (G2ae0@x G2ae1@ls) (if (memq G2ae0@x G2ae1@ls) G2ae1@ls (cons G2ae0@x G2ae1@ls)))) (lambda G2ade ((lambda (G2adf) (if (= G2adf '0) (apply (lambda () G2ad8@set) G2ade) (if (= G2adf '1) (apply (lambda (G2adc@x) (set! G2ad8@set (G2adb@set-cons G2adc@x G2ad8@set))) G2ade) (error 'apply '"invalid arg count")))) (length G2ade))))) '#f)) '()))) (set! G2a5a@current-library-collection (G2997@G28a2@make-parameter (G2a58@make-collection) (lambda (G2ae4@x) (begin (if (not (procedure? G2ae4@x)) (assertion-violation 'current-library-collection '"not a procedure" G2ae4@x) (void)) G2ae4@x)))) (set! G2a60@G2a5b (make-record-type-descriptor 'library '#f 'G2a5e '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G2a62@G2a5d '#f) (set! G2a64@G2a5c (make-record-constructor-descriptor G2a60@G2a5b '#f G2a62@G2a5d)) (set! G2a69@library? (record-predicate G2a60@G2a5b)) (set! G2a6b@make-library (record-constructor G2a64@G2a5c)) (set! G2a6d@library-id (record-accessor G2a60@G2a5b '0)) (set! G2a6f@library-name (record-accessor G2a60@G2a5b '1)) (set! G2a71@library-version (record-accessor G2a60@G2a5b '2)) (set! G2a73@library-imp* (record-accessor G2a60@G2a5b '3)) (set! G2a75@library-vis* (record-accessor G2a60@G2a5b '4)) (set! G2a77@library-inv* (record-accessor G2a60@G2a5b '5)) (set! G2a79@library-subst (record-accessor G2a60@G2a5b '6)) (set! G2a7b@library-env (record-accessor G2a60@G2a5b '7)) (set! G2a7d@library-visit-state (record-accessor G2a60@G2a5b '8)) (set! G2a7f@library-invoke-state (record-accessor G2a60@G2a5b '9)) (set! G2a81@library-visit-code (record-accessor G2a60@G2a5b '10)) (set! G2a83@library-invoke-code (record-accessor G2a60@G2a5b '11)) (set! G2a85@library-visible? (record-accessor G2a60@G2a5b '12)) (set! G2a87@library-source-file-name (record-accessor G2a60@G2a5b '13)) (set! G2a89@set-library-id! (record-mutator G2a60@G2a5b '0)) (set! G2a8b@set-library-name! (record-mutator G2a60@G2a5b '1)) (set! G2a8d@set-library-version! (record-mutator G2a60@G2a5b '2)) (set! G2a8f@set-library-imp*! (record-mutator G2a60@G2a5b '3)) (set! G2a91@set-library-vis*! (record-mutator G2a60@G2a5b '4)) (set! G2a93@set-library-inv*! (record-mutator G2a60@G2a5b '5)) (set! G2a95@set-library-subst! (record-mutator G2a60@G2a5b '6)) (set! G2a97@set-library-env! (record-mutator G2a60@G2a5b '7)) (set! G2a99@set-library-visit-state! (record-mutator G2a60@G2a5b '8)) (set! G2a9b@set-library-invoke-state! (record-mutator G2a60@G2a5b '9)) (set! G2a9d@set-library-visit-code! (record-mutator G2a60@G2a5b '10)) (set! G2a9f@set-library-invoke-code! (record-mutator G2a60@G2a5b '11)) (set! G2aa1@set-library-visible?! (record-mutator G2a60@G2a5b '12)) (set! G2aa3@set-library-source-file-name! (record-mutator G2a60@G2a5b '13)) (set! G2aa5@rp (G2994@G289c@make-record-printer 'library (lambda (G2ae6@x G2ae7@p G2ae8@wr) (begin (if (not (G2a69@library? G2ae6@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G2a71@library-version G2ae6@x)) (G2a6f@library-name G2ae6@x) (append (G2a6f@library-name G2ae6@x) (list (G2a71@library-version G2ae6@x))))) G2ae7@p))))) (set! G2aa7@find-dependencies (lambda (G2aec@ls) (if (null? G2aec@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2aa9@find-library-by (lambda (G2aee@pred) ((letrec ((G2af0@f (lambda (G2af2@ls) (if (null? G2af2@ls) '#f (if (G2aee@pred (car G2af2@ls)) (car G2af2@ls) (G2af0@f (cdr G2af2@ls))))))) G2af0@f) ((G2a5a@current-library-collection))))) (set! G2aab@library-path (G2997@G28a2@make-parameter '(".") (lambda (G2af4@x) (if (if (list? G2af4@x) (begin '#f (for-all string? G2af4@x)) '#f) (map (lambda (G2af6@x) G2af6@x) G2af4@x) (assertion-violation 'library-path '"not a list of strings" G2af4@x))))) (set! G2aad@library-extensions (G2997@G28a2@make-parameter '(".sls" ".ss" ".scm") (lambda (G2af8@x) (if (if (list? G2af8@x) (begin '#f (for-all string? G2af8@x)) '#f) (map (lambda (G2afa@x) G2afa@x) G2af8@x) (assertion-violation 'library-extensions '"not a list of strings" G2af8@x))))) (set! G2aaf@library-name->file-name (lambda (G2afc@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2b00@G2afe G2b01@G2aff) ((lambda (G2b04@extract G2b05@p) ((lambda (G2b09@display-hex) (begin (set! G2b09@display-hex (lambda (G2b18@n) (if (<= '0 G2b18@n '9) (display G2b18@n G2b05@p) (display (integer->char (+ (char->integer '#\A) (- G2b18@n '10))) G2b05@p)))) (begin ((letrec ((G2b0a@f (lambda (G2b0c@ls) (if (not (null? G2b0c@ls)) (begin (display '"/" G2b05@p) (for-each (lambda (G2b0e@c) (if ((lambda (G2b10@t) (if G2b10@t G2b10@t ((lambda (G2b12@t) (if G2b12@t G2b12@t ((lambda (G2b14@t) (if G2b14@t G2b14@t (begin '#f (memv G2b0e@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G2b0e@c '#\9)))) (char<=? '#\A G2b0e@c '#\Z)))) (char<=? '#\a G2b0e@c '#\z)) (display G2b0e@c G2b05@p) (begin (display '"%" G2b05@p) ((lambda (G2b16@n) (begin (G2b09@display-hex (quotient G2b16@n '16)) (G2b09@display-hex (remainder G2b16@n '16)))) (char->integer G2b0e@c))))) (string->list (symbol->string (car G2b0c@ls)))) (G2b0a@f (cdr G2b0c@ls))) (void))))) G2b0a@f) G2afc@x) (G2b04@extract)))) '#f)) G2b01@G2aff G2b00@G2afe))))) (set! G2ab1@file-locator (G2997@G28a2@make-parameter (lambda (G2b1a@x) ((lambda (G2b1c@str) ((letrec ((G2b1e@f (lambda (G2b20@ls G2b21@exts G2b22@failed-list) (if (null? G2b20@ls) ((lambda () ((lambda (G2b2e@G2b29 G2b30@G2b2b G2b32@G2b2a G2b37@G2b28 G2b39@make-library-resolution-condition G2b3b@G2b26 G2b3d@G2b27 G2b3f@library-resolution-condition? G2b41@condition-library G2b43@condition-files) (begin (set! G2b2e@G2b29 (make-record-type-descriptor '&library-resolution &condition-rtd 'G2b2c '#f '#f '#((immutable library) (immutable files)))) (set! G2b30@G2b2b '#f) (set! G2b32@G2b2a (make-record-constructor-descriptor G2b2e@G2b29 &condition-rcd G2b30@G2b2b)) (set! G2b37@G2b28 (record-predicate G2b2e@G2b29)) (set! G2b39@make-library-resolution-condition (record-constructor G2b32@G2b2a)) (set! G2b3b@G2b26 (record-accessor G2b2e@G2b29 '0)) (set! G2b3d@G2b27 (record-accessor G2b2e@G2b29 '1)) (set! G2b3f@library-resolution-condition? (condition-predicate G2b2e@G2b29)) (set! G2b41@condition-library (condition-accessor G2b2e@G2b29 G2b3b@G2b26)) (set! G2b43@condition-files (condition-accessor G2b2e@G2b29 G2b3d@G2b27)) (raise (condition (G4c1c@G4b32@make-error) (G4c36@G4b88@make-who-condition 'expander) (G4c08@G4af2@make-message-condition '"cannot locate library in library-path") (G2b39@make-library-resolution-condition G2b1a@x (reverse G2b22@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2b21@exts) (G2b1e@f (cdr G2b20@ls) (G2aad@library-extensions) G2b22@failed-list) ((lambda (G2b44@name) (if (file-exists? G2b44@name) G2b44@name (G2b1e@f G2b20@ls (cdr G2b21@exts) (cons G2b44@name G2b22@failed-list)))) (string-append (car G2b20@ls) G2b1c@str (car G2b21@exts)))))))) G2b1e@f) (G2aab@library-path) (G2aad@library-extensions) '())) (G2aaf@library-name->file-name G2b1a@x))) (lambda (G2b46@f) (if (procedure? G2b46@f) G2b46@f (assertion-violation 'file-locator '"not a procedure" G2b46@f))))) (set! G2ab3@serialize-all (lambda (G2b48@serialize G2b49@compile) ((lambda (G2b4d@library-desc) (begin (set! G2b4d@library-desc (lambda (G2b50@x) (list (G2a6d@library-id G2b50@x) (G2a6f@library-name G2b50@x)))) (for-each (lambda (G2b4e@x) (if (G2a87@library-source-file-name G2b4e@x) (G2b48@serialize (G2a87@library-source-file-name G2b4e@x) (list (G2a6d@library-id G2b4e@x) (G2a6f@library-name G2b4e@x) (G2a71@library-version G2b4e@x) (map G2b4d@library-desc (G2a73@library-imp* G2b4e@x)) (map G2b4d@library-desc (G2a75@library-vis* G2b4e@x)) (map G2b4d@library-desc (G2a77@library-inv* G2b4e@x)) (G2a79@library-subst G2b4e@x) (G2a7b@library-env G2b4e@x) (G2b49@compile (G2a81@library-visit-code G2b4e@x)) (G2b49@compile (G2a83@library-invoke-code G2b4e@x)) (G2a85@library-visible? G2b4e@x))) (void))) ((G2a5a@current-library-collection))))) '#f))) (set! G2ab5@current-precompiled-library-loader (G2997@G28a2@make-parameter (lambda (G2b52@filename G2b53@sk) '#f))) (set! G2ab7@try-load-from-file (lambda (G2b56@filename) ((G2ab5@current-precompiled-library-loader) G2b56@filename (lambda G2b7c ((lambda (G2b7d) (if (= G2b7d '11) (apply (lambda (G2b58@id G2b59@name G2b5a@ver G2b5b@imp* G2b5c@vis* G2b5d@inv* G2b5e@exp-subst G2b5f@exp-env G2b60@visit-proc G2b61@invoke-proc G2b62@visible?) ((letrec ((G2b6e@f (lambda (G2b70@deps) (if (null? G2b70@deps) (begin (G2acb@install-library G2b58@id G2b59@name G2b5a@ver G2b5b@imp* G2b5c@vis* G2b5d@inv* G2b5e@exp-subst G2b5f@exp-env G2b60@visit-proc G2b61@invoke-proc '#f '#f G2b62@visible? '#f) '#t) ((lambda (G2b72@d) ((lambda (G2b74@label G2b75@dname) ((lambda (G2b78@l) (if (if (G2a69@library? G2b78@l) (begin '#f (eq? G2b74@label (G2a6d@library-id G2b78@l))) '#f) (G2b6e@f (cdr G2b70@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source. l=~a label=~a (library-id l)=~a\n" G2b59@name G2b75@dname G2b56@filename G2b78@l G2b74@label (G2a6d@library-id G2b78@l)) '#f))) (G2ac1@find-library-by-name G2b75@dname))) (car G2b72@d) (cadr G2b72@d))) (car G2b70@deps)))))) G2b6e@f) (append G2b5b@imp* G2b5c@vis* G2b5d@inv*))) G2b7c) (if (>= G2b7d '0) (apply (lambda G2b7a@others '#f) G2b7c) (error 'apply '"invalid arg count")))) (length G2b7c)))))) (set! G2ab9@library-loader (G2997@G28a2@make-parameter (lambda (G2b7e@x) ((lambda (G2b80@file-name) (if (not G2b80@file-name) (assertion-violation '#f '"cannot file library" G2b7e@x) ((lambda (G2b82@t) (if G2b82@t G2b82@t (begin '#f ((G2abb@current-library-expander) (G2996@G28a0@read-library-source-file G2b80@file-name) G2b80@file-name (lambda (G2b84@name) (if (not (equal? G2b84@name G2b7e@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2b88@G2b86 G2b89@G2b87) ((lambda (G2b8c@e G2b8d@p) (begin (display '"expected to find library " G2b8d@p) (write G2b7e@x G2b8d@p) (display '" in file " G2b8d@p) (display G2b80@file-name G2b8d@p) (display '", found " G2b8d@p) (write G2b84@name G2b8d@p) (display '" instead" G2b8d@p) (G2b8c@e))) G2b89@G2b87 G2b88@G2b86)))) (void))))))) (G2ab7@try-load-from-file G2b80@file-name)))) ((G2ab1@file-locator) G2b7e@x))) (lambda (G2b90@f) (if (procedure? G2b90@f) G2b90@f (assertion-violation 'library-locator '"not a procedure" G2b90@f))))) (set! G2abb@current-library-expander (G2997@G28a2@make-parameter (lambda (G2b92@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2b94@f) (if (procedure? G2b94@f) G2b94@f (assertion-violation 'library-expander '"not a procedure" G2b94@f))))) (set! G2abd@external-pending-libraries (G2997@G28a2@make-parameter '())) (set! G2abf@find-external-library (lambda (G2b96@name) (begin (if (member G2b96@name (G2abd@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2b96@name) (void)) ((lambda (G2b9a@G2b98@external-pending-libraries G2b9b@G2b99@external-pending-libraries) ((lambda (G2b9e@swap) (dynamic-wind G2b9e@swap (lambda () (begin ((G2ab9@library-loader) G2b96@name) ((lambda (G2ba0@t) (if G2ba0@t G2ba0@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G2b96@name)))) (G2aa9@find-library-by (lambda (G2ba2@x) (equal? (G2a6f@library-name G2ba2@x) G2b96@name)))))) G2b9e@swap)) (lambda () ((lambda (G2ba4@t) (begin (G2b9a@G2b98@external-pending-libraries G2b9b@G2b99@external-pending-libraries) (set! G2b9b@G2b99@external-pending-libraries G2ba4@t))) (G2b9a@G2b98@external-pending-libraries))))) G2abd@external-pending-libraries (cons G2b96@name (G2abd@external-pending-libraries)))))) (set! G2ac1@find-library-by-name (lambda (G2ba6@name) ((lambda (G2ba8@t) (if G2ba8@t G2ba8@t (begin '#f (G2abf@find-external-library G2ba6@name)))) (G2aa9@find-library-by (lambda (G2baa@x) (equal? (G2a6f@library-name G2baa@x) G2ba6@name)))))) (set! G2ac3@library-exists? (lambda (G2bac@name) (if (G2aa9@find-library-by (lambda (G2bae@x) (equal? (G2a6f@library-name G2bae@x) G2bac@name))) (begin '#f '#t) '#f))) (set! G2ac5@find-library-by-spec/die (lambda (G2bb0@spec) ((lambda (G2bb2@id) ((lambda (G2bb4@t) (if G2bb4@t G2bb4@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G2bb0@spec)))) (G2aa9@find-library-by (lambda (G2bb6@x) (eq? G2bb2@id (G2a6d@library-id G2bb6@x)))))) (car G2bb0@spec)))) (set! G2ac7@label->binding-table (make-eq-hashtable)) (set! G2ac9@install-library-record (lambda (G2bb8@lib) (begin ((lambda (G2bba@exp-env) (for-each (lambda (G2bbc@x) ((lambda (G2bbe@label G2bbf@binding) ((lambda (G2bc2@binding) (hashtable-set! G2ac7@label->binding-table G2bbe@label G2bc2@binding)) ((lambda (G2bc4@t) (if (memv G2bc4@t '(global)) (cons 'global (cons G2bb8@lib (cdr G2bbf@binding))) (if (memv G2bc4@t '(global-macro)) (cons 'global-macro (cons G2bb8@lib (cdr G2bbf@binding))) (if (memv G2bc4@t '(global-macro!)) (cons 'global-macro! (cons G2bb8@lib (cdr G2bbf@binding))) G2bbf@binding)))) (car G2bbf@binding)))) (car G2bbc@x) (cdr G2bbc@x))) G2bba@exp-env)) (G2a7b@library-env G2bb8@lib)) ((G2a5a@current-library-collection) G2bb8@lib)))) (set! G2acb@install-library (lambda (G2bc6@id G2bc7@name G2bc8@ver G2bc9@imp* G2bca@vis* G2bcb@inv* G2bcc@exp-subst G2bcd@exp-env G2bce@visit-proc G2bcf@invoke-proc G2bd0@visit-code G2bd1@invoke-code G2bd2@visible? G2bd3@source-file-name) ((lambda (G2be2@imp-lib* G2be3@vis-lib* G2be4@inv-lib*) (begin (if (not (if (symbol? G2bc6@id) (if (list? G2bc7@name) (begin '#f (list? G2bc8@ver)) '#f) '#f)) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2bc6@id G2bc7@name G2bc8@ver) (void)) (if (G2ac3@library-exists? G2bc7@name) (assertion-violation 'install-library '"library is already installed" G2bc7@name) (void)) ((lambda (G2be8@lib) (G2ac9@install-library-record G2be8@lib)) (G2a6b@make-library G2bc6@id G2bc7@name G2bc8@ver G2be2@imp-lib* G2be3@vis-lib* G2be4@inv-lib* G2bcc@exp-subst G2bcd@exp-env G2bce@visit-proc G2bcf@invoke-proc G2bd0@visit-code G2bd1@invoke-code G2bd2@visible? G2bd3@source-file-name)))) (map G2ac5@find-library-by-spec/die G2bc9@imp*) (map G2ac5@find-library-by-spec/die G2bca@vis*) (map G2ac5@find-library-by-spec/die G2bcb@inv*)))) (set! G2acd@imported-label->binding (lambda (G2bea@lab) (hashtable-ref G2ac7@label->binding-table G2bea@lab '#f))) (set! G2acf@invoke-library (lambda (G2bec@lib) ((lambda (G2bee@invoke) (if (procedure? G2bee@invoke) (begin (G2a9b@set-library-invoke-state! G2bec@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2bec@lib))) (for-each G2acf@invoke-library (G2a77@library-inv* G2bec@lib)) (G2a9b@set-library-invoke-state! G2bec@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2bec@lib))) (G2bee@invoke) (G2a9b@set-library-invoke-state! G2bec@lib '#t)) (void))) (G2a7f@library-invoke-state G2bec@lib)))) (set! G2ad1@visit-library (lambda (G2bf0@lib) ((lambda (G2bf2@visit) (if (procedure? G2bf2@visit) (begin (G2a99@set-library-visit-state! G2bf0@lib (lambda () (assertion-violation 'visit '"circularity detected" G2bf0@lib))) (for-each G2acf@invoke-library (G2a75@library-vis* G2bf0@lib)) (G2a99@set-library-visit-state! G2bf0@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2bf0@lib))) (G2bf2@visit) (G2a99@set-library-visit-state! G2bf0@lib '#t)) (void))) (G2a7d@library-visit-state G2bf0@lib)))) (set! G2ad3@invoke-library-by-spec (lambda (G2bf4@spec) (G2acf@invoke-library (G2ac5@find-library-by-spec/die G2bf4@spec)))) (set! G2ad5@installed-libraries (lambda G2bfe ((lambda (G2bff) (if (= G2bff '1) (apply (lambda (G2bf6@all?) ((letrec ((G2bf8@f (lambda (G2bfa@ls) (if (null? G2bfa@ls) '() (if ((lambda (G2bfc@t) (if G2bfc@t G2bfc@t (begin '#f (G2a85@library-visible? (car G2bfa@ls))))) G2bf6@all?) (cons (car G2bfa@ls) (G2bf8@f (cdr G2bfa@ls))) (G2bf8@f (cdr G2bfa@ls))))))) G2bf8@f) ((G2a5a@current-library-collection)))) G2bfe) (if (= G2bff '0) (apply (lambda () (G2ad5@installed-libraries '#f)) G2bfe) (error 'apply '"invalid arg count")))) (length G2bfe)))) (set! G2ad7@library-spec (lambda (G2c00@x) (begin (if (not (G2a69@library? G2c00@x)) (assertion-violation 'library-spec '"not a library" G2c00@x) (void)) (list (G2a6d@library-id G2c00@x) (G2a6f@library-name G2c00@x) (G2a71@library-version G2c00@x))))) (begin (set! G2c3e@G2ad7@library-spec G2ad7@library-spec) (set! G2c3d@G2ad5@installed-libraries G2ad5@installed-libraries) (set! G2c3c@G2ad3@invoke-library-by-spec G2ad3@invoke-library-by-spec) (set! G2c3b@G2ad1@visit-library G2ad1@visit-library) (set! G2c3a@G2acf@invoke-library G2acf@invoke-library) (set! G2c39@G2acd@imported-label->binding G2acd@imported-label->binding) (set! G2c38@G2acb@install-library G2acb@install-library) (set! G2c37@G2ac9@install-library-record G2ac9@install-library-record) (set! G2c36@G2ac7@label->binding-table G2ac7@label->binding-table) (set! G2c35@G2ac5@find-library-by-spec/die G2ac5@find-library-by-spec/die) (set! G2c34@G2ac3@library-exists? G2ac3@library-exists?) (set! G2c33@G2ac1@find-library-by-name G2ac1@find-library-by-name) (set! G2c32@G2abf@find-external-library G2abf@find-external-library) (set! G2c31@G2abd@external-pending-libraries G2abd@external-pending-libraries) (set! G2c30@G2abb@current-library-expander G2abb@current-library-expander) (set! G2c2f@G2ab9@library-loader G2ab9@library-loader) (set! G2c2e@G2ab7@try-load-from-file G2ab7@try-load-from-file) (set! G2c2d@G2ab5@current-precompiled-library-loader G2ab5@current-precompiled-library-loader) (set! G2c2c@G2ab3@serialize-all G2ab3@serialize-all) (set! G2c2b@G2ab1@file-locator G2ab1@file-locator) (set! G2c2a@G2aaf@library-name->file-name G2aaf@library-name->file-name) (set! G2c29@G2aad@library-extensions G2aad@library-extensions) (set! G2c28@G2aab@library-path G2aab@library-path) (set! G2c27@G2aa9@find-library-by G2aa9@find-library-by) (set! G2c26@G2aa7@find-dependencies G2aa7@find-dependencies) (set! G2c25@G2aa5@rp G2aa5@rp) (set! G2c24@G2aa3@set-library-source-file-name! G2aa3@set-library-source-file-name!) (set! G2c23@G2aa1@set-library-visible?! G2aa1@set-library-visible?!) (set! G2c22@G2a9f@set-library-invoke-code! G2a9f@set-library-invoke-code!) (set! G2c21@G2a9d@set-library-visit-code! G2a9d@set-library-visit-code!) (set! G2c20@G2a9b@set-library-invoke-state! G2a9b@set-library-invoke-state!) (set! G2c1f@G2a99@set-library-visit-state! G2a99@set-library-visit-state!) (set! G2c1e@G2a97@set-library-env! G2a97@set-library-env!) (set! G2c1d@G2a95@set-library-subst! G2a95@set-library-subst!) (set! G2c1c@G2a93@set-library-inv*! G2a93@set-library-inv*!) (set! G2c1b@G2a91@set-library-vis*! G2a91@set-library-vis*!) (set! G2c1a@G2a8f@set-library-imp*! G2a8f@set-library-imp*!) (set! G2c19@G2a8d@set-library-version! G2a8d@set-library-version!) (set! G2c18@G2a8b@set-library-name! G2a8b@set-library-name!) (set! G2c17@G2a89@set-library-id! G2a89@set-library-id!) (set! G2c16@G2a87@library-source-file-name G2a87@library-source-file-name) (set! G2c15@G2a85@library-visible? G2a85@library-visible?) (set! G2c14@G2a83@library-invoke-code G2a83@library-invoke-code) (set! G2c13@G2a81@library-visit-code G2a81@library-visit-code) (set! G2c12@G2a7f@library-invoke-state G2a7f@library-invoke-state) (set! G2c11@G2a7d@library-visit-state G2a7d@library-visit-state) (set! G2c10@G2a7b@library-env G2a7b@library-env) (set! G2c0f@G2a79@library-subst G2a79@library-subst) (set! G2c0e@G2a77@library-inv* G2a77@library-inv*) (set! G2c0d@G2a75@library-vis* G2a75@library-vis*) (set! G2c0c@G2a73@library-imp* G2a73@library-imp*) (set! G2c0b@G2a71@library-version G2a71@library-version) (set! G2c0a@G2a6f@library-name G2a6f@library-name) (set! G2c09@G2a6d@library-id G2a6d@library-id) (set! G2c08@G2a6b@make-library G2a6b@make-library) (set! G2c07@G2a69@library? G2a69@library?) (set! G2c06@G2a64@G2a5c G2a64@G2a5c) (set! G2c05@G2a62@G2a5d G2a62@G2a5d) (set! G2c04@G2a60@G2a5b G2a60@G2a5b) (set! G2c03@G2a5a@current-library-collection G2a5a@current-library-collection) (set! G2c02@G2a58@make-collection G2a58@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2c41@build-global-define G2cc5@build-lambda G2cc7@build-case-lambda G2cc9@build-let G2d11@build-sequence G2d13@build-void G2d15@build-letrec G2d17@build-letrec* G2d19@build-library-letrec* G2d1b@build-receive) (begin (set! G2c41@build-global-define (lambda (G2d1c@x) (G2d13@build-void))) (set! G2cc5@build-lambda (lambda (G2d1e@ae G2d1f@vars G2d20@exp) (list 'lambda G2d1f@vars G2d20@exp))) (set! G2cc7@build-case-lambda (lambda (G2d24@ae G2d25@vars* G2d26@exp*) ((lambda (G2d2b@build-error G2d2d@build-pred G2d2f@build-apply G2d31@expand-case-lambda) (begin (set! G2d2b@build-error (lambda (G2d60@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2d2d@build-pred (lambda (G2d4a@ae G2d4b@n G2d4c@vars) (call-with-values (lambda () ((letrec ((G2d52@f (lambda (G2d54@vars G2d55@count) (if (pair? G2d54@vars) (G2d52@f (cdr G2d54@vars) (+ G2d55@count '1)) (if (null? G2d54@vars) (values G2d55@count '=) (values G2d55@count '>=)))))) G2d52@f) G2d4c@vars '0)) (lambda (G2d58@G2d50 G2d59@G2d51) ((lambda (G2d5c@pred G2d5d@count) (list (list 'primitive G2d5c@pred) G2d4b@n (list 'quote G2d5d@count))) G2d59@G2d51 G2d58@G2d50))))) (set! G2d2f@build-apply (lambda (G2d42@ae G2d43@g G2d44@vars G2d45@exp) (list '(primitive apply) (G2cc5@build-lambda G2d42@ae G2d44@vars G2d45@exp) G2d43@g))) (set! G2d31@expand-case-lambda (lambda (G2d32@ae G2d33@vars G2d34@exp*) ((lambda (G2d38@g G2d39@n) (list 'lambda G2d38@g (G2cc9@build-let G2d32@ae (list G2d39@n) (list (list '(primitive length) G2d38@g)) ((letrec ((G2d3c@f (lambda (G2d3e@vars* G2d3f@exp*) (if (null? G2d3e@vars*) (G2d2b@build-error G2d32@ae) (list 'if (G2d2d@build-pred G2d32@ae G2d39@n (car G2d3e@vars*)) (G2d2f@build-apply G2d32@ae G2d38@g (car G2d3e@vars*) (car G2d3f@exp*)) (G2d3c@f (cdr G2d3e@vars*) (cdr G2d3f@exp*))))))) G2d3c@f) G2d25@vars* G2d34@exp*)))) (gensym) (gensym)))) (if (= (length G2d26@exp*) '1) (G2cc5@build-lambda G2d24@ae (car G2d25@vars*) (car G2d26@exp*)) (G2d31@expand-case-lambda G2d24@ae G2d25@vars* G2d26@exp*)))) '#f '#f '#f '#f))) (set! G2cc9@build-let (lambda (G2d62@ae G2d63@lhs* G2d64@rhs* G2d65@body) (cons (G2cc5@build-lambda G2d62@ae G2d63@lhs* G2d65@body) G2d64@rhs*))) (set! G2d11@build-sequence (lambda (G2d6a@ae G2d6b@exps) ((letrec ((G2d6e@loop (lambda (G2d70@exps) (if (null? (cdr G2d70@exps)) (car G2d70@exps) (if (equal? (car G2d70@exps) (G2d13@build-void)) (G2d6e@loop (cdr G2d70@exps)) (cons 'begin G2d70@exps)))))) G2d6e@loop) G2d6b@exps))) (set! G2d13@build-void (lambda () '((primitive void)))) (set! G2d15@build-letrec (lambda (G2d72@ae G2d73@vars G2d74@val-exps G2d75@body-exp) (if (null? G2d73@vars) G2d75@body-exp (list 'letrec (map list G2d73@vars G2d74@val-exps) G2d75@body-exp)))) (set! G2d17@build-letrec* (lambda (G2d7a@ae G2d7b@vars G2d7c@val-exps G2d7d@body-exp) (if (null? G2d7b@vars) G2d7d@body-exp (G2cc9@build-let G2d7a@ae G2d7b@vars (map (lambda (G2d82@x) (list 'quote '#f)) G2d7b@vars) (G2d11@build-sequence G2d7a@ae (append (map (lambda (G2d84@lhs G2d85@rhs) (list 'set! G2d84@lhs G2d85@rhs)) G2d7b@vars G2d7c@val-exps) (list G2d7d@body-exp))))))) (set! G2d19@build-library-letrec* (lambda (G2d88@ae G2d89@name G2d8a@vars G2d8b@locs G2d8c@val-exps G2d8d@body-exp) (list 'library-letrec* G2d89@name (map list G2d8a@vars G2d8b@locs G2d8c@val-exps) G2d8d@body-exp))) (set! G2d1b@build-receive (lambda (G2d94@ae G2d95@vars G2d96@producer G2d97@body*) (begin (display '"************** in ") (cons 'receive (cons G2d95@vars (cons G2d96@producer G2d97@body*)))))) (begin (set! G2da5@G2d1b@build-receive G2d1b@build-receive) (set! G2da4@G2d19@build-library-letrec* G2d19@build-library-letrec*) (set! G2da3@G2d17@build-letrec* G2d17@build-letrec*) (set! G2da2@G2d15@build-letrec G2d15@build-letrec) (set! G2da1@G2d13@build-void G2d13@build-void) (set! G2da0@G2d11@build-sequence G2d11@build-sequence) (set! G2d9f@G2cc9@build-let G2cc9@build-let) (set! G2d9e@G2cc7@build-case-lambda G2cc7@build-case-lambda) (set! G2d9d@G2cc5@build-lambda G2cc5@build-lambda) (set! G2d9c@G2c41@build-global-define G2c41@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2db2@set-cons G2db4@set-union G2db9@top-mark* G2dbb@top-marked? G2dbd@gen-lexical G2dbf@gen-global G2dc1@gen-label G2dc3@gen-top-level-label G2dc5@gen-define-label+loc G2dc7@gen-define-label G2dcd@G2dc8 G2dcf@G2dca G2dd1@G2dc9 G2dd6@rib? G2dd8@make-rib G2dda@rib-sym* G2ddc@rib-mark** G2dde@rib-label* G2de0@rib-sealed/freq G2de2@rib-cache G2de4@set-rib-sym*! G2de6@set-rib-mark**! G2de8@set-rib-label*! G2dea@set-rib-sealed/freq! G2dec@set-rib-cache! G2dee@make-empty-rib G2df0@make-cache-rib G2df2@find-label G2df4@extend-rib! G2df6@extend-rib/nc! G2df8@make-rib-map G2dfa@seal-rib! G2dfc@unseal-rib! G2dfe@make-full-rib G2e04@G2dff G2e06@G2e01 G2e08@G2e00 G2e0d@stx? G2e0f@make-stx G2e11@stx-expr G2e13@stx-mark* G2e15@stx-subst* G2e17@stx-ae* G2e19@set-stx-expr! G2e1b@set-stx-mark*! G2e1d@set-stx-subst*! G2e1f@set-stx-ae*! G2e21@rp G2e23@datum->stx G2e25@gen-mark G2e27@anti-mark G2e29@anti-mark? G2e2b@join-wraps G2e2d@mkstx G2e2f@add-mark G2e31@add-subst G2e33@syntax-kind? G2e35@syntax-vector->list G2e37@syntax-pair? G2e39@syntax-vector? G2e3b@syntax-null? G2e3d@syntax-list? G2e3f@syntax-car G2e41@syntax-cdr G2e43@syntax->list G2e45@id? G2e47@id->sym G2e49@same-marks? G2e4b@bound-id=? G2e4d@free-id=? G2e4f@valid-bound-ids? G2e51@distinct-bound-ids? G2e53@bound-id-member? G2e55@self-evaluating? G2e57@strip-annotations G2e59@strip G2e5b@stx->datum G2e5d@same-marks*? G2e5f@id->label G2e61@id->real-label G2e63@label->binding G2e65@make-binding G2e67@binding-type G2e69@binding-value G2e6b@raise-unbound-error G2e6d@syntax-type G2e84@sanitize-binding G2e86@make-variable-transformer G2e88@variable-transformer? G2e8a@variable-transformer-procedure G2e8c@make-eval-transformer G3010@parse-define G3012@parse-define-syntax G3014@scheme-stx-hashtable G3016@scheme-stx G3018@lexical-var G301a@lexical-mutable? G301c@set-lexical-mutable! G301e@add-lexical G3020@add-lexicals G3022@letrec-helper G3024@letrec-transformer G3026@letrec*-transformer G3028@fluid-let-syntax-transformer G302a@type-descriptor-transformer G302c@record-type-descriptor-transformer G302e@record-constructor-descriptor-transformer G3030@when-macro G3032@unless-macro G3034@if-transformer G3036@case-macro G3038@quote-transformer G303a@case-lambda-transformer G303c@lambda-transformer G303e@bless G3040@with-syntax-macro G3042@invalid-fmls-error G3044@let-macro G3046@let-values-macro G3048@let*-values-macro G304a@trace-lambda-macro G304c@trace-define-macro G304e@trace-define-syntax-macro G3050@trace-let/rec-syntax G3052@trace-let-syntax-macro G3054@trace-letrec-syntax-macro G3056@guard-macro G3058@define-enumeration-macro G305a@time-macro G305c@delay-macro G305e@assert-macro G3060@endianness-macro G3062@identifier-syntax-macro G3064@do-macro G3066@let*-macro G3068@or-macro G306a@and-macro G306c@cond-macro G306e@do-include G3070@include-macro G3072@include-into-macro G3074@syntax-rules-macro G3076@quasiquote-macro G3078@quasisyntax-macro G307a@define-struct-macro G307c@define-record-type-macro G307e@define-condition-type-macro G3080@incorrect-usage-macro G3082@parameterize-macro G3084@foreign-call-transformer G3086@convert-pattern G3088@syntax-dispatch G308a@ellipsis? G308c@underscore? G308e@verify-literals G3090@syntax-case-transformer G3092@ellipsis-map G3094@syntax-transformer G3096@core-macro-transformer G3098@file-options-macro G309a@symbol-macro G309c@macro-transformer G309e@local-macro-transformer G30a0@do-macro-call G30a2@chi-macro G30a4@chi-local-macro G30a6@chi-global-macro G30a8@chi-expr* G30aa@chi-application G30ac@chi-expr G30ae@chi-set! G30b0@verify-formals G30b2@chi-lambda-clause G30b4@chi-lambda-clause* G30b6@chi-defun G30b8@chi-rhs G30ba@expand-interaction-rhs*/init* G30bc@chi-rhs* G30be@find-bound=? G30c0@find-dups G30c2@chi-internal G30c4@parse-module G30ca@G30c5 G30cc@G30c7 G30ce@G30c6 G30d3@module-interface? G30d5@make-module-interface G30d7@module-interface-first-mark G30d9@module-interface-exp-id-vec G30db@module-interface-exp-lab-vec G30dd@set-module-interface-first-mark! G30df@set-module-interface-exp-id-vec! G30e1@set-module-interface-exp-lab-vec! G30e3@module-interface-exp-id* G30e5@chi-internal-module G30e7@chi-body* G30e9@expand-transformer G30eb@parse-exports G30ed@parse-library-name G30ef@parse-library G30f1@parse-import-spec* G30f3@make-top-rib G30f5@make-collector G30f7@inv-collector G30f9@vis-collector G30fb@imp-collector G30fd@chi-library-internal G30ff@chi-interaction-expr G3101@library-body-expander G3103@core-library-expander G3105@parse-top-level-program G3107@top-level-expander G310d@G3108 G310f@G310a G3111@G3109 G3116@env? G3118@make-env G311a@env-names G311c@env-labels G311e@env-itc G3120@set-env-names! G3122@set-env-labels! G3124@set-env-itc! G3126@rp G312c@G3127 G312e@G3129 G3130@G3128 G3135@interaction-env? G3137@make-interaction-env G3139@interaction-env-rib G313b@interaction-env-r G313d@interaction-env-locs G313f@set-interaction-env-rib! G3141@set-interaction-env-r! G3143@set-interaction-env-locs! G3145@rp G3147@interaction-environment-symbols G3149@environment-bindings G314b@parse-binding G314d@environment? G314f@environment-symbols G3151@environment G3153@null-environment G3155@scheme-report-environment G3157@expand G3159@eval G315b@library-expander G315d@boot-library-expand G315f@rev-map-append G3161@build-exports G3163@make-export-subst G3165@make-export-env/macros G3167@generate-temporaries G3169@free-identifier=? G316b@bound-identifier=? G316d@make-source-condition G316f@extract-position-condition G3171@expression-position G3173@assertion-error G3175@syntax-error G3177@extract-trace G3179@syntax-violation* G317b@syntax-violation G317d@identifier? G317f@datum->syntax G3181@syntax->datum G3183@compile-r6rs-top-level G3185@pre-compile-r6rs-top-level G3187@interaction-environment G3189@top-level-context) (begin (set! G2db2@set-cons (lambda (G318a@x G318b@ls) (if (memq G318a@x G318b@ls) G318b@ls (cons G318a@x G318b@ls)))) (set! G2db4@set-union (lambda (G318e@ls1 G318f@ls2) (if (null? G318e@ls1) G318f@ls2 (if (memq (car G318e@ls1) G318f@ls2) (G2db4@set-union (cdr G318e@ls1) G318f@ls2) (cons (car G318e@ls1) (G2db4@set-union (cdr G318e@ls1) G318f@ls2)))))) (set! G2db9@top-mark* '(top)) (set! G2dbb@top-marked? (lambda (G3192@m*) (memq 'top G3192@m*))) (set! G2dbd@gen-lexical (lambda (G3194@sym) (if (symbol? G3194@sym) (gensym G3194@sym) (if (G2e0d@stx? G3194@sym) (G2dbd@gen-lexical (G2e47@id->sym G3194@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3194@sym))))) (set! G2dbf@gen-global (lambda (G3196@x) (G2dbd@gen-lexical G3196@x))) (set! G2dc1@gen-label (lambda (G3198@_) (gensym))) (set! G2dc3@gen-top-level-label (lambda (G319a@id G319b@rib) ((lambda (G319f@find) (begin (set! G319f@find (lambda (G31aa@sym G31ab@mark* G31ac@sym* G31ad@mark** G31ae@label*) (if (pair? G31ac@sym*) (begin '#f (if (if (eq? G31aa@sym (car G31ac@sym*)) (begin '#f (G2e49@same-marks? G31ab@mark* (car G31ad@mark**))) '#f) (car G31ae@label*) (G319f@find G31aa@sym G31ab@mark* (cdr G31ac@sym*) (cdr G31ad@mark**) (cdr G31ae@label*)))) '#f))) ((lambda (G31a0@sym G31a1@mark*) ((lambda (G31a4@sym*) ((lambda (G31a6@t) (if G31a6@t ((lambda (G31a8@label) (if (G2c39@G2acd@imported-label->binding G31a8@label) (gensym) G31a8@label)) G31a6@t) (gensym))) (if (memq G31a0@sym (G2dda@rib-sym* G319b@rib)) (begin '#f (G319f@find G31a0@sym G31a1@mark* G31a4@sym* (G2ddc@rib-mark** G319b@rib) (G2dde@rib-label* G319b@rib))) '#f))) (G2dda@rib-sym* G319b@rib))) (G2e47@id->sym G319a@id) (G2e13@stx-mark* G319a@id)))) '#f))) (set! G2dc5@gen-define-label+loc (lambda (G31b4@id G31b5@rib) ((lambda (G31b8@t) (if G31b8@t ((lambda (G31ba@env) ((lambda (G31bc@label G31bd@locs) (values G31bc@label ((lambda (G31c0@t) (if G31c0@t (cdr G31c0@t) ((lambda (G31c2@loc) (begin (G3143@set-interaction-env-locs! G31ba@env (cons (cons G31bc@label G31c2@loc) G31bd@locs)) G31c2@loc)) (G2dbd@gen-lexical G31b4@id)))) (assq G31bc@label G31bd@locs)))) (G2dc3@gen-top-level-label G31b4@id G31b5@rib) (G313d@interaction-env-locs G31ba@env))) G31b8@t) (values (gensym) (G2dbd@gen-lexical G31b4@id)))) (G3189@top-level-context)))) (set! G2dc7@gen-define-label (lambda (G31c4@id G31c5@rib) (if (G3189@top-level-context) (G2dc3@gen-top-level-label G31c4@id G31c5@rib) (gensym)))) (set! G2dcd@G2dc8 (make-record-type-descriptor 'rib '#f 'G2dcb '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2dcf@G2dca '#f) (set! G2dd1@G2dc9 (make-record-constructor-descriptor G2dcd@G2dc8 '#f G2dcf@G2dca)) (set! G2dd6@rib? (record-predicate G2dcd@G2dc8)) (set! G2dd8@make-rib (record-constructor G2dd1@G2dc9)) (set! G2dda@rib-sym* (record-accessor G2dcd@G2dc8 '0)) (set! G2ddc@rib-mark** (record-accessor G2dcd@G2dc8 '1)) (set! G2dde@rib-label* (record-accessor G2dcd@G2dc8 '2)) (set! G2de0@rib-sealed/freq (record-accessor G2dcd@G2dc8 '3)) (set! G2de2@rib-cache (record-accessor G2dcd@G2dc8 '4)) (set! G2de4@set-rib-sym*! (record-mutator G2dcd@G2dc8 '0)) (set! G2de6@set-rib-mark**! (record-mutator G2dcd@G2dc8 '1)) (set! G2de8@set-rib-label*! (record-mutator G2dcd@G2dc8 '2)) (set! G2dea@set-rib-sealed/freq! (record-mutator G2dcd@G2dc8 '3)) (set! G2dec@set-rib-cache! (record-mutator G2dcd@G2dc8 '4)) (set! G2dee@make-empty-rib (lambda () (G2dd8@make-rib '() '() '() '#f '#f))) (set! G2df0@make-cache-rib (lambda () (G2dd8@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2df2@find-label (lambda (G31c8@rib G31c9@sym G31ca@mark*) ((lambda (G31ce@ht) (if G31ce@ht (begin '#f ((lambda (G31d0@cv) ((lambda (G31d2@t) (if G31d2@t (cdr G31d2@t) '#f)) (if G31d0@cv (begin '#f (assp (lambda (G31d4@m) (G2e49@same-marks? G31ca@mark* G31d4@m)) G31d0@cv)) '#f))) (hashtable-ref G31ce@ht G31c9@sym '#f))) '#f)) (G2de2@rib-cache G31c8@rib)))) (set! G2df4@extend-rib! (lambda (G31d6@rib G31d7@id G31d8@label) ((lambda (G31dd@find) (begin (set! G31dd@find (lambda (G31ee@sym G31ef@mark* G31f0@sym* G31f1@mark** G31f2@label*) (if (pair? G31f0@sym*) (begin '#f (if (if (eq? G31ee@sym (car G31f0@sym*)) (begin '#f (G2e49@same-marks? G31ef@mark* (car G31f1@mark**))) '#f) G31f2@label* (G31dd@find G31ee@sym G31ef@mark* (cdr G31f0@sym*) (cdr G31f1@mark**) (cdr G31f2@label*)))) '#f))) (begin (if (G2de0@rib-sealed/freq G31d6@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G31d6@rib) (void)) ((lambda (G31de@sym G31df@mark*) ((lambda (G31e2@sym*) ((lambda (G31e4@t) (if G31e4@t ((lambda (G31e6@p) (if (not (eq? G31d8@label G31e6@p)) (G317b@syntax-violation '#f '"multiple definitions of identifier" G31d7@id) (void))) G31e4@t) ((lambda (G31e8@t) (if G31e8@t ((lambda (G31ea@p) (if (not (eq? G31d8@label (car G31ea@p))) (if (G3189@top-level-context) (set-car! G31ea@p G31d8@label) (G317b@syntax-violation '#f '"multiple definitions of identifier" G31d7@id)) (void))) G31e8@t) (begin (if (G2de2@rib-cache G31d6@rib) (hashtable-update! (G2de2@rib-cache G31d6@rib) G31de@sym (lambda (G31ec@e) (cons (cons G31df@mark* G31d8@label) G31ec@e)) '()) (void)) (G2de4@set-rib-sym*! G31d6@rib (cons G31de@sym G31e2@sym*)) (G2de6@set-rib-mark**! G31d6@rib (cons G31df@mark* (G2ddc@rib-mark** G31d6@rib))) (G2de8@set-rib-label*! G31d6@rib (cons G31d8@label (G2dde@rib-label* G31d6@rib)))))) (if (memq G31de@sym (G2dda@rib-sym* G31d6@rib)) (begin '#f (G31dd@find G31de@sym G31df@mark* G31e2@sym* (G2ddc@rib-mark** G31d6@rib) (G2dde@rib-label* G31d6@rib))) '#f)))) (G2df2@find-label G31d6@rib G31de@sym G31df@mark*))) (G2dda@rib-sym* G31d6@rib))) (G2e47@id->sym G31d7@id) (G2e13@stx-mark* G31d7@id))))) '#f))) (set! G2df6@extend-rib/nc! (lambda (G31f8@rib G31f9@id G31fa@label) ((lambda (G31fe@sym G31ff@mark*) ((lambda (G3202@sym*) (begin (if (G2de2@rib-cache G31f8@rib) (hashtable-update! (G2de2@rib-cache G31f8@rib) G31fe@sym (lambda (G3204@e) (cons (cons G31ff@mark* G31fa@label) G3204@e)) '()) (void)) (G2de4@set-rib-sym*! G31f8@rib (cons G31fe@sym G3202@sym*)) (G2de6@set-rib-mark**! G31f8@rib (cons G31ff@mark* (G2ddc@rib-mark** G31f8@rib))) (G2de8@set-rib-label*! G31f8@rib (cons G31fa@label (G2dde@rib-label* G31f8@rib))))) (G2dda@rib-sym* G31f8@rib))) (G2e47@id->sym G31f9@id) (G2e13@stx-mark* G31f9@id)))) (set! G2df8@make-rib-map (lambda (G3206@sym*) ((lambda (G3208@ht) ((letrec ((G320a@f (lambda (G320c@i G320d@sym*) (if (null? G320d@sym*) G3208@ht (begin (hashtable-update! G3208@ht (car G320d@sym*) (lambda (G3210@x) (cons G320c@i G3210@x)) '()) (G320a@f (+ G320c@i '1) (cdr G320d@sym*))))))) G320a@f) '0 G3206@sym*)) (make-eq-hashtable)))) (set! G2dfa@seal-rib! (lambda (G3212@rib) ((lambda (G3214@sym*) (if (not (null? G3214@sym*)) (begin (G2de4@set-rib-sym*! G3212@rib (list->vector G3214@sym*)) (G2de6@set-rib-mark**! G3212@rib (list->vector (G2ddc@rib-mark** G3212@rib))) (G2de8@set-rib-label*! G3212@rib (list->vector (G2dde@rib-label* G3212@rib))) (G2dea@set-rib-sealed/freq! G3212@rib (G2df8@make-rib-map G3214@sym*))) (void))) (G2dda@rib-sym* G3212@rib)))) (set! G2dfc@unseal-rib! (lambda (G3216@rib) (if (G2de0@rib-sealed/freq G3216@rib) (begin (G2dea@set-rib-sealed/freq! G3216@rib '#f) (G2de4@set-rib-sym*! G3216@rib (vector->list (G2dda@rib-sym* G3216@rib))) (G2de6@set-rib-mark**! G3216@rib (vector->list (G2ddc@rib-mark** G3216@rib))) (G2de8@set-rib-label*! G3216@rib (vector->list (G2dde@rib-label* G3216@rib)))) (void)))) (set! G2dfe@make-full-rib (lambda (G3218@id* G3219@label*) ((lambda (G321c@r) (begin (G2dfa@seal-rib! G321c@r) G321c@r)) (G2dd8@make-rib (map G2e47@id->sym G3218@id*) (map G2e13@stx-mark* G3218@id*) G3219@label* '#f '#f)))) (set! G2e04@G2dff (make-record-type-descriptor 'stx '#f 'G2e02 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2e06@G2e01 '#f) (set! G2e08@G2e00 (make-record-constructor-descriptor G2e04@G2dff '#f G2e06@G2e01)) (set! G2e0d@stx? (record-predicate G2e04@G2dff)) (set! G2e0f@make-stx (record-constructor G2e08@G2e00)) (set! G2e11@stx-expr (record-accessor G2e04@G2dff '0)) (set! G2e13@stx-mark* (record-accessor G2e04@G2dff '1)) (set! G2e15@stx-subst* (record-accessor G2e04@G2dff '2)) (set! G2e17@stx-ae* (record-accessor G2e04@G2dff '3)) (set! G2e19@set-stx-expr! (record-mutator G2e04@G2dff '0)) (set! G2e1b@set-stx-mark*! (record-mutator G2e04@G2dff '1)) (set! G2e1d@set-stx-subst*! (record-mutator G2e04@G2dff '2)) (set! G2e1f@set-stx-ae*! (record-mutator G2e04@G2dff '3)) (set! G2e21@rp (G2994@G289c@make-record-printer 'stx (lambda (G321e@x G321f@p G3220@wr) (begin (display '"#<syntax " G321f@p) (write (G2e5b@stx->datum G321e@x) G321f@p) ((lambda (G3224@expr) (if (G298c@G288c@annotation? G3224@expr) ((lambda (G3226@src) (if (pair? G3226@src) (begin (display '" [" G321f@p) (display (cdr G3226@src) G321f@p) (display '" of " G321f@p) (display (car G3226@src) G321f@p) (display '"]" G321f@p)) (void))) (G298d@G288e@annotation-source G3224@expr)) (void))) (G2e11@stx-expr G321e@x)) (display '">" G321f@p))))) (set! G2e23@datum->stx (lambda (G3228@id G3229@datum) (G2e0f@make-stx G3229@datum (G2e13@stx-mark* G3228@id) (G2e15@stx-subst* G3228@id) (G2e17@stx-ae* G3228@id)))) (set! G2e25@gen-mark (lambda () (string '#\m))) (set! G2e27@anti-mark '#f) (set! G2e29@anti-mark? not) (set! G2e2b@join-wraps (lambda (G322c@m1* G322d@s1* G322e@ae1* G322f@e) ((lambda (G3235@cancel) (begin (set! G3235@cancel (lambda (G323c@ls1 G323d@ls2) ((letrec ((G3240@f (lambda (G3242@x G3243@ls1) (if (null? G3243@ls1) (cdr G323d@ls2) (cons G3242@x (G3240@f (car G3243@ls1) (cdr G3243@ls1))))))) G3240@f) (car G323c@ls1) (cdr G323c@ls1)))) ((lambda (G3236@m2* G3237@s2* G3238@ae2*) (if (if (not (null? G322c@m1*)) (if (not (null? G3236@m2*)) (begin '#f (G2e29@anti-mark? (car G3236@m2*))) '#f) '#f) (values (G3235@cancel G322c@m1* G3236@m2*) (G3235@cancel G322d@s1* G3237@s2*) (G3235@cancel G322e@ae1* G3238@ae2*)) (values (append G322c@m1* G3236@m2*) (append G322d@s1* G3237@s2*) (append G322e@ae1* G3238@ae2*)))) (G2e13@stx-mark* G322f@e) (G2e15@stx-subst* G322f@e) (G2e17@stx-ae* G322f@e)))) '#f))) (set! G2e2d@mkstx (lambda (G3246@e G3247@m* G3248@s* G3249@ae*) (if (if (G2e0d@stx? G3246@e) (begin '#f (not (G2dbb@top-marked? G3247@m*))) '#f) (call-with-values (lambda () (G2e2b@join-wraps G3247@m* G3248@s* G3249@ae* G3246@e)) (lambda (G3251@G324e G3252@G324f G3253@G3250) ((lambda (G3257@ae* G3258@s* G3259@m*) (G2e0f@make-stx (G2e11@stx-expr G3246@e) G3259@m* G3258@s* G3257@ae*)) G3253@G3250 G3252@G324f G3251@G324e))) (G2e0f@make-stx G3246@e G3247@m* G3248@s* G3249@ae*)))) (set! G2e2f@add-mark (lambda (G325d@m G325e@e G325f@ae) (G2e2d@mkstx G325e@e (list G325d@m) '(shift) (list G325f@ae)))) (set! G2e31@add-subst (lambda (G3263@subst G3264@e) (G2e2d@mkstx G3264@e '() (list G3263@subst) '()))) (set! G2e33@syntax-kind? (lambda (G3267@x G3268@p?) (if (G2e0d@stx? G3267@x) (G2e33@syntax-kind? (G2e11@stx-expr G3267@x) G3268@p?) (if (G298c@G288c@annotation? G3267@x) (G2e33@syntax-kind? (G298e@G2890@annotation-expression G3267@x) G3268@p?) (G3268@p? G3267@x))))) (set! G2e35@syntax-vector->list (lambda (G326b@x) (if (G2e0d@stx? G326b@x) ((lambda (G326d@ls G326e@m* G326f@s* G3270@ae*) (map (lambda (G3275@x) (G2e2d@mkstx G3275@x G326e@m* G326f@s* G3270@ae*)) G326d@ls)) (G2e35@syntax-vector->list (G2e11@stx-expr G326b@x)) (G2e13@stx-mark* G326b@x) (G2e15@stx-subst* G326b@x) (G2e17@stx-ae* G326b@x)) (if (G298c@G288c@annotation? G326b@x) (G2e35@syntax-vector->list (G298e@G2890@annotation-expression G326b@x)) (if (vector? G326b@x) (vector->list G326b@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G326b@x)))))) (set! G2e37@syntax-pair? (lambda (G3277@x) (G2e33@syntax-kind? G3277@x pair?))) (set! G2e39@syntax-vector? (lambda (G3279@x) (G2e33@syntax-kind? G3279@x vector?))) (set! G2e3b@syntax-null? (lambda (G327b@x) (G2e33@syntax-kind? G327b@x null?))) (set! G2e3d@syntax-list? (lambda (G327d@x) ((lambda (G327f@t) (if G327f@t G327f@t (begin '#f (if (G2e37@syntax-pair? G327d@x) (begin '#f (G2e3d@syntax-list? (G2e41@syntax-cdr G327d@x))) '#f)))) (G2e3b@syntax-null? G327d@x)))) (set! G2e3f@syntax-car (lambda (G3281@x) (if (G2e0d@stx? G3281@x) (G2e2d@mkstx (G2e3f@syntax-car (G2e11@stx-expr G3281@x)) (G2e13@stx-mark* G3281@x) (G2e15@stx-subst* G3281@x) (G2e17@stx-ae* G3281@x)) (if (G298c@G288c@annotation? G3281@x) (G2e3f@syntax-car (G298e@G2890@annotation-expression G3281@x)) (if (pair? G3281@x) (car G3281@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3281@x)))))) (set! G2e41@syntax-cdr (lambda (G3283@x) (if (G2e0d@stx? G3283@x) (G2e2d@mkstx (G2e41@syntax-cdr (G2e11@stx-expr G3283@x)) (G2e13@stx-mark* G3283@x) (G2e15@stx-subst* G3283@x) (G2e17@stx-ae* G3283@x)) (if (G298c@G288c@annotation? G3283@x) (G2e41@syntax-cdr (G298e@G2890@annotation-expression G3283@x)) (if (pair? G3283@x) (cdr G3283@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3283@x)))))) (set! G2e43@syntax->list (lambda (G3285@x) (if (G2e37@syntax-pair? G3285@x) (cons (G2e3f@syntax-car G3285@x) (G2e43@syntax->list (G2e41@syntax-cdr G3285@x))) (if (G2e3b@syntax-null? G3285@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3285@x))))) (set! G2e45@id? (lambda (G3287@x) (if (G2e0d@stx? G3287@x) (begin '#f ((lambda (G3289@expr) (symbol? (if (G298c@G288c@annotation? G3289@expr) (G298b@G288a@annotation-stripped G3289@expr) G3289@expr))) (G2e11@stx-expr G3287@x))) '#f))) (set! G2e47@id->sym (lambda (G328b@x) (begin (if (not (G2e0d@stx? G328b@x)) (error 'id->sym '"BUG in ikarus: not an id" G328b@x) (void)) ((lambda (G328d@expr) ((lambda (G328f@sym) (if (symbol? G328f@sym) G328f@sym (error 'id->sym '"BUG in ikarus: not an id" G328b@x))) (if (G298c@G288c@annotation? G328d@expr) (G298b@G288a@annotation-stripped G328d@expr) G328d@expr))) (G2e11@stx-expr G328b@x))))) (set! G2e49@same-marks? (lambda (G3291@x G3292@y) ((lambda (G3295@t) (if G3295@t G3295@t (begin '#f (if (pair? G3291@x) (if (pair? G3292@y) (if (eq? (car G3291@x) (car G3292@y)) (begin '#f (G2e49@same-marks? (cdr G3291@x) (cdr G3292@y))) '#f) '#f) '#f)))) (if (null? G3291@x) (begin '#f (null? G3292@y)) '#f)))) (set! G2e4b@bound-id=? (lambda (G3297@x G3298@y) (if (eq? (G2e47@id->sym G3297@x) (G2e47@id->sym G3298@y)) (begin '#f (G2e49@same-marks? (G2e13@stx-mark* G3297@x) (G2e13@stx-mark* G3298@y))) '#f))) (set! G2e4d@free-id=? (lambda (G329b@i G329c@j) ((lambda (G329f@t0 G32a0@t1) (if ((lambda (G32a3@t) (if G32a3@t G32a3@t (begin '#f G32a0@t1))) G329f@t0) (eq? G329f@t0 G32a0@t1) (eq? (G2e47@id->sym G329b@i) (G2e47@id->sym G329c@j)))) (G2e61@id->real-label G329b@i) (G2e61@id->real-label G329c@j)))) (set! G2e4f@valid-bound-ids? (lambda (G32a5@id*) (if (for-all G2e45@id? G32a5@id*) (begin '#f (G2e51@distinct-bound-ids? G32a5@id*)) '#f))) (set! G2e51@distinct-bound-ids? (lambda (G32a7@id*) ((lambda (G32a9@t) (if G32a9@t G32a9@t (begin '#f (if (not (G2e53@bound-id-member? (car G32a7@id*) (cdr G32a7@id*))) (begin '#f (G2e51@distinct-bound-ids? (cdr G32a7@id*))) '#f)))) (null? G32a7@id*)))) (set! G2e53@bound-id-member? (lambda (G32ab@id G32ac@id*) (if (pair? G32ac@id*) (begin '#f ((lambda (G32af@t) (if G32af@t G32af@t (begin '#f (G2e53@bound-id-member? G32ab@id (cdr G32ac@id*))))) (G2e4b@bound-id=? G32ab@id (car G32ac@id*)))) '#f))) (set! G2e55@self-evaluating? (lambda (G32b1@x) ((lambda (G32b3@t) (if G32b3@t G32b3@t ((lambda (G32b5@t) (if G32b5@t G32b5@t ((lambda (G32b7@t) (if G32b7@t G32b7@t ((lambda (G32b9@t) (if G32b9@t G32b9@t ((lambda (G32bb@t) (if G32bb@t G32bb@t (begin '#f (bytevector? G32b1@x)))) (regexp? G32b1@x)))) (boolean? G32b1@x)))) (char? G32b1@x)))) (string? G32b1@x)))) (number? G32b1@x)))) (set! G2e57@strip-annotations (lambda (G32bd@x) (if (pair? G32bd@x) (cons (G2e57@strip-annotations (car G32bd@x)) (G2e57@strip-annotations (cdr G32bd@x))) (if (vector? G32bd@x) (vector-map G2e57@strip-annotations G32bd@x) (if (G298c@G288c@annotation? G32bd@x) (G298b@G288a@annotation-stripped G32bd@x) G32bd@x))))) (set! G2e59@strip (lambda (G32bf@x G32c0@m*) (if (G2dbb@top-marked? G32c0@m*) (if ((lambda (G32c3@t) (if G32c3@t G32c3@t ((lambda (G32c5@t) (if G32c5@t G32c5@t (begin '#f (if (vector? G32bf@x) (if (> (vector-length G32bf@x) '0) (begin '#f (G298c@G288c@annotation? (vector-ref G32bf@x '0))) '#f) '#f)))) (if (pair? G32bf@x) (begin '#f (G298c@G288c@annotation? (car G32bf@x))) '#f)))) (G298c@G288c@annotation? G32bf@x)) (G2e57@strip-annotations G32bf@x) G32bf@x) ((letrec ((G32c7@f (lambda (G32c9@x) (if (G2e0d@stx? G32c9@x) (G2e59@strip (G2e11@stx-expr G32c9@x) (G2e13@stx-mark* G32c9@x)) (if (G298c@G288c@annotation? G32c9@x) (G298b@G288a@annotation-stripped G32c9@x) (if (pair? G32c9@x) ((lambda (G32cb@a G32cc@d) (if (if (eq? G32cb@a (car G32c9@x)) (begin '#f (eq? G32cc@d (cdr G32c9@x))) '#f) G32c9@x (cons G32cb@a G32cc@d))) (G32c7@f (car G32c9@x)) (G32c7@f (cdr G32c9@x))) (if (vector? G32c9@x) ((lambda (G32cf@old) ((lambda (G32d1@new) (if (for-all eq? G32cf@old G32d1@new) G32c9@x (list->vector G32d1@new))) (map G32c7@f G32cf@old))) (vector->list G32c9@x)) G32c9@x))))))) G32c7@f) G32bf@x)))) (set! G2e5b@stx->datum (lambda (G32d3@x) (G2e59@strip G32d3@x '()))) (set! G2e5d@same-marks*? (lambda (G32d5@mark* G32d6@mark** G32d7@si) (if (null? G32d7@si) '#f (if (G2e49@same-marks? G32d5@mark* (vector-ref G32d6@mark** (car G32d7@si))) (car G32d7@si) (G2e5d@same-marks*? G32d5@mark* G32d6@mark** (cdr G32d7@si)))))) (set! G2e5f@id->label (lambda (G32db@id) ((lambda (G32dd@t) (if G32dd@t G32dd@t (begin '#f ((lambda (G32df@t) (if G32df@t ((lambda (G32e1@env) ((lambda (G32e3@rib) (call-with-values (lambda () (G2dc5@gen-define-label+loc G32db@id G32e3@rib)) (lambda (G32e7@G32e5 G32e8@G32e6) ((lambda (G32eb@loc_ G32ec@lab) (begin (G2df4@extend-rib! G32e3@rib G32db@id G32ec@lab) G32ec@lab)) G32e8@G32e6 G32e7@G32e5)))) (G3139@interaction-env-rib G32e1@env))) G32df@t) '#f)) (G3189@top-level-context))))) (G2e61@id->real-label G32db@id)))) (set! G2e61@id->real-label (lambda (G32ef@id) ((lambda (G32f1@sym) ((letrec ((G32f3@search (lambda (G32f5@subst* G32f6@mark*) (if (null? G32f5@subst*) '#f (if (eq? (car G32f5@subst*) 'shift) (G32f3@search (cdr G32f5@subst*) (cdr G32f6@mark*)) ((lambda (G32f9@rib) ((lambda (G32fb@t) (if G32fb@t ((lambda (G32fd@ht) ((lambda (G32ff@si) ((lambda (G3301@i) (if G3301@i (vector-ref (G2dde@rib-label* G32f9@rib) G3301@i) (G32f3@search (cdr G32f5@subst*) G32f6@mark*))) (if G32ff@si (begin '#f (G2e5d@same-marks*? G32f6@mark* (G2ddc@rib-mark** G32f9@rib) (reverse G32ff@si))) '#f))) (hashtable-ref G32fd@ht G32f1@sym '#f))) G32fb@t) ((lambda (G3303@t) (if G3303@t G3303@t (begin '#f ((letrec ((G3305@f (lambda (G3307@sym* G3308@mark** G3309@label*) (if (null? G3307@sym*) (G32f3@search (cdr G32f5@subst*) G32f6@mark*) (if (if (eq? (car G3307@sym*) G32f1@sym) (begin '#f (G2e49@same-marks? (car G3308@mark**) G32f6@mark*)) '#f) (car G3309@label*) (G3305@f (cdr G3307@sym*) (cdr G3308@mark**) (cdr G3309@label*))))))) G3305@f) (G2dda@rib-sym* G32f9@rib) (G2ddc@rib-mark** G32f9@rib) (G2dde@rib-label* G32f9@rib))))) (G2df2@find-label G32f9@rib G32f1@sym G32f6@mark*)))) (G2de0@rib-sealed/freq G32f9@rib))) (car G32f5@subst*))))))) G32f3@search) (G2e15@stx-subst* G32ef@id) (G2e13@stx-mark* G32ef@id))) (G2e47@id->sym G32ef@id)))) (set! G2e63@label->binding (lambda (G330d@x G330e@r) ((lambda (G3311@t) (if G3311@t ((lambda (G3313@b) (if (if (pair? G3313@b) (begin '#f (eq? (car G3313@b) '$core-rtd)) '#f) (cons '$rtd (map G303e@bless (cdr G3313@b))) (if (if (pair? G3313@b) (begin '#f (eq? (car G3313@b) 'global-rtd)) '#f) ((lambda (G3315@lib G3316@loc) (cons '$rtd (symbol-value G3316@loc))) (cadr G3313@b) (cddr G3313@b)) G3313@b))) G3311@t) ((lambda (G3319@t) (if G3319@t (cdr G3319@t) ((lambda (G331b@t) (if G331b@t ((lambda (G331d@env) ((lambda (G331f@t) (if G331f@t ((lambda (G3321@p) (cons* 'lexical (cdr G3321@p) '#f)) G331f@t) '(displaced-lexical . #f))) (assq G330d@x (G313d@interaction-env-locs G331d@env)))) G331b@t) '(displaced-lexical . #f))) (G3189@top-level-context)))) (assq G330d@x G330e@r)))) (G2c39@G2acd@imported-label->binding G330d@x)))) (set! G2e65@make-binding cons) (set! G2e67@binding-type car) (set! G2e69@binding-value cdr) (set! G2e6b@raise-unbound-error (lambda (G3323@id) (G3179@syntax-violation* '#f '"unbound identifier" G3323@id (G4c5a@G4bfa@make-undefined-violation)))) (set! G2e6d@syntax-type (lambda (G3325@e G3326@r) (if (G2e45@id? G3325@e) ((lambda (G3329@id) ((lambda (G332b@label) ((lambda (G332d@b) ((lambda (G332f@type) ((lambda () (begin (if (not G332b@label) (G2e6b@raise-unbound-error G3329@id) (void)) ((lambda (G3331@t) (if (memv G3331@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G332f@type (G2e69@binding-value G332d@b) G3329@id) (values 'other '#f '#f))) G332f@type))))) (G2e67@binding-type G332d@b))) (G2e63@label->binding G332b@label G3326@r))) (G2e5f@id->label G3329@id))) G3325@e) (if (G2e37@syntax-pair? G3325@e) ((lambda (G3333@id) (if (G2e45@id? G3333@id) ((lambda (G3335@label) ((lambda (G3337@b) ((lambda (G3339@type) ((lambda () (begin (if (not G3335@label) (G2e6b@raise-unbound-error G3333@id) (void)) ((lambda (G333b@t) (if (memv G333b@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G3339@type (G2e69@binding-value G3337@b) G3333@id) (values 'call '#f '#f))) G3339@type))))) (G2e67@binding-type G3337@b))) (G2e63@label->binding G3335@label G3326@r))) (G2e5f@id->label G3333@id)) (values 'call '#f '#f))) (G2e3f@syntax-car G3325@e)) ((lambda (G333d@d) (if (G2e55@self-evaluating? G333d@d) (values 'constant G333d@d '#f) (values 'other '#f '#f))) (G2e5b@stx->datum G3325@e)))))) (set! G2e84@sanitize-binding (lambda (G333f@x G3340@src) (if (procedure? G333f@x) (cons* 'local-macro G333f@x G3340@src) (if (if (pair? G333f@x) (if (eq? (car G333f@x) 'macro!) (begin '#f (procedure? (cdr G333f@x))) '#f) '#f) (cons* 'local-macro! (cdr G333f@x) G3340@src) (if (if (pair? G333f@x) (begin '#f (eq? (car G333f@x) '$rtd)) '#f) G333f@x (assertion-violation 'expand '"invalid transformer" G333f@x)))))) (set! G2e86@make-variable-transformer (lambda (G3343@x) (if (procedure? G3343@x) (cons 'macro! G3343@x) (assertion-violation 'make-variable-transformer '"not a procedure" G3343@x)))) (set! G2e88@variable-transformer? (lambda (G3345@x) (if (pair? G3345@x) (if (eq? (car G3345@x) 'macro!) (begin '#f (procedure? (cdr G3345@x))) '#f) '#f))) (set! G2e8a@variable-transformer-procedure (lambda (G3347@x) (if (G2e88@variable-transformer? G3347@x) (cdr G3347@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G3347@x)))) (set! G2e8c@make-eval-transformer (lambda (G3349@x) (G2e84@sanitize-binding (eval-core (G29fb@G29a3@expanded->core G3349@x)) G3349@x))) (set! G3010@parse-define (lambda (G334b@x) ((lambda (G334d@t) ((lambda (G334f@ls/false) (if (if G334f@ls/false (begin '#f (apply (lambda (G3351@id G3352@fmls G3353@b G3354@b*) (G2e45@id? G3351@id)) G334f@ls/false)) '#f) (apply (lambda (G3359@id G335a@fmls G335b@b G335c@b*) (begin (G30b0@verify-formals G335a@fmls G334b@x) (values G3359@id (cons 'defun (cons G335a@fmls (cons G335b@b G335c@b*)))))) G334f@ls/false) ((lambda (G3361@t) ((lambda (G3363@ls/false) (if (if G3363@ls/false (begin '#f (apply (lambda (G3365@id G3366@val) (G2e45@id? G3365@id)) G3363@ls/false)) '#f) (apply (lambda (G3369@id G336a@val) (values G3369@id (cons 'expr G336a@val))) G3363@ls/false) ((lambda (G336d@t) ((lambda (G336f@ls/false) (if (if G336f@ls/false (begin '#f (apply (lambda (G3371@id) (G2e45@id? G3371@id)) G336f@ls/false)) '#f) (apply (lambda (G3373@id) (values G3373@id (cons 'expr (G303e@bless '(void))))) G336f@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G336d@t))) (G3088@syntax-dispatch G336d@t '(_ any)))) G3361@t))) (G3088@syntax-dispatch G3361@t '(_ any any)))) G334d@t))) (G3088@syntax-dispatch G334d@t '(_ (any . any) any . each-any)))) G334b@x))) (set! G3012@parse-define-syntax (lambda (G3375@x) ((lambda (G3377@t) ((lambda (G3379@ls/false) (if (if G3379@ls/false (begin '#f (apply (lambda (G337b@id G337c@val) (G2e45@id? G337b@id)) G3379@ls/false)) '#f) (apply (lambda (G337f@id G3380@val) (values G337f@id G3380@val)) G3379@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3377@t))) (G3088@syntax-dispatch G3377@t '(_ any any)))) G3375@x))) (set! G3014@scheme-stx-hashtable (make-eq-hashtable)) (set! G3016@scheme-stx (lambda (G3383@sym) ((lambda (G3385@t) (if G3385@t G3385@t (begin '#f ((lambda (G3387@subst) ((lambda (G3389@stx) ((lambda (G338b@stx) ((lambda () (begin (hashtable-set! G3014@scheme-stx-hashtable G3383@sym G338b@stx) G338b@stx)))) ((lambda (G338d@t) (if G338d@t ((lambda (G338f@x) ((lambda (G3391@name G3392@label) (G2e31@add-subst (G2dd8@make-rib (list G3391@name) (list G2db9@top-mark*) (list G3392@label) '#f '#f) G3389@stx)) (car G338f@x) (cdr G338f@x))) G338d@t) G3389@stx)) (assq G3383@sym G3387@subst)))) (G2e0f@make-stx G3383@sym G2db9@top-mark* '() '()))) (G2c0f@G2a79@library-subst (G2c33@G2ac1@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G3014@scheme-stx-hashtable G3383@sym '#f)))) (set! G3018@lexical-var car) (set! G301a@lexical-mutable? cdr) (set! G301c@set-lexical-mutable! set-cdr!) (set! G301e@add-lexical (lambda (G3395@lab G3396@lex G3397@r) (cons (cons* G3395@lab 'lexical G3396@lex '#f) G3397@r))) (set! G3020@add-lexicals (lambda (G339b@lab* G339c@lex* G339d@r) (if (null? G339b@lab*) G339d@r (G3020@add-lexicals (cdr G339b@lab*) (cdr G339c@lex*) (G301e@add-lexical (car G339b@lab*) (car G339c@lex*) G339d@r))))) (set! G3022@letrec-helper (lambda (G33a1@e G33a2@r G33a3@mr G33a4@build) ((lambda (G33a9@t) ((lambda (G33ab@ls/false) (if G33ab@ls/false (apply (lambda (G33ad@lhs* G33ae@rhs* G33af@b G33b0@b*) (if (not (G2e4f@valid-bound-ids? G33ad@lhs*)) (G3042@invalid-fmls-error G33a1@e G33ad@lhs*) ((lambda (G33b5@lex* G33b6@lab*) ((lambda (G33b9@rib G33ba@r) ((lambda (G33bd@body G33be@rhs*) (G33a4@build '#f G33b5@lex* G33be@rhs* G33bd@body)) (G30c2@chi-internal (G2e31@add-subst G33b9@rib (cons G33af@b G33b0@b*)) G33ba@r G33a3@mr) (G30a8@chi-expr* (map (lambda (G33c1@x) (G2e31@add-subst G33b9@rib G33c1@x)) G33ae@rhs*) G33ba@r G33a3@mr))) (G2dfe@make-full-rib G33ad@lhs* G33b6@lab*) (G3020@add-lexicals G33b6@lab* G33b5@lex* G33a2@r))) (map G2dbd@gen-lexical G33ad@lhs*) (map G2dc1@gen-label G33ad@lhs*)))) G33ab@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G33a9@t))) (G3088@syntax-dispatch G33a9@t '(_ #(each (any any)) any . each-any)))) G33a1@e))) (set! G3024@letrec-transformer (lambda (G33c3@e G33c4@r G33c5@mr) (G3022@letrec-helper G33c3@e G33c4@r G33c5@mr G2da2@G2d15@build-letrec))) (set! G3026@letrec*-transformer (lambda (G33c9@e G33ca@r G33cb@mr) (G3022@letrec-helper G33c9@e G33ca@r G33cb@mr G2da3@G2d17@build-letrec*))) (set! G3028@fluid-let-syntax-transformer (lambda (G33cf@e G33d0@r G33d1@mr) ((lambda (G33d6@lookup) (begin (set! G33d6@lookup (lambda (G33e9@x) ((lambda (G33eb@t) (if G33eb@t G33eb@t (begin '#f (G317b@syntax-violation '#f '"unbound identifier" G33cf@e G33e9@x)))) (G2e5f@id->label G33e9@x)))) ((lambda (G33d7@t) ((lambda (G33d9@ls/false) (if G33d9@ls/false (apply (lambda (G33db@lhs* G33dc@rhs* G33dd@b G33de@b*) (if (not (G2e4f@valid-bound-ids? G33db@lhs*)) (G3042@invalid-fmls-error G33cf@e G33db@lhs*) ((lambda (G33e3@lab* G33e4@rhs*) (G30c2@chi-internal (cons G33dd@b G33de@b*) (append (map cons G33e3@lab* G33e4@rhs*) G33d0@r) (append (map cons G33e3@lab* G33e4@rhs*) G33d1@mr))) (map G33d6@lookup G33db@lhs*) (map (lambda (G33e7@x) (G2e8c@make-eval-transformer (G30e9@expand-transformer G33e7@x G33d1@mr))) G33dc@rhs*)))) G33d9@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G33d7@t))) (G3088@syntax-dispatch G33d7@t '(_ #(each (any any)) any . each-any)))) G33cf@e))) '#f))) (set! G302a@type-descriptor-transformer (lambda (G33ed@e G33ee@r G33ef@mr) ((lambda (G33f3@t) ((lambda (G33f5@ls/false) (if (if G33f5@ls/false (begin '#f (apply (lambda (G33f7@id) (G2e45@id? G33f7@id)) G33f5@ls/false)) '#f) (apply (lambda (G33f9@id) ((lambda (G33fb@lab) ((lambda (G33fd@b) ((lambda (G33ff@type) ((lambda () (begin (if (not G33fb@lab) (G2e6b@raise-unbound-error G33f9@id) (void)) (if (not (if (eq? G33ff@type '$rtd) (begin '#f (not (list? (G2e69@binding-value G33fd@b)))) '#f)) (G317b@syntax-violation '#f '"not a record type" G33ed@e) (void)) (list 'quote (G2e69@binding-value G33fd@b)))))) (G2e67@binding-type G33fd@b))) (G2e63@label->binding G33fb@lab G33ee@r))) (G2e5f@id->label G33f9@id))) G33f5@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G33f3@t))) (G3088@syntax-dispatch G33f3@t '(_ any)))) G33ed@e))) (set! G302c@record-type-descriptor-transformer (lambda (G3401@e G3402@r G3403@mr) ((lambda (G3407@t) ((lambda (G3409@ls/false) (if (if G3409@ls/false (begin '#f (apply (lambda (G340b@id) (G2e45@id? G340b@id)) G3409@ls/false)) '#f) (apply (lambda (G340d@id) ((lambda (G340f@lab) ((lambda (G3411@b) ((lambda (G3413@type) ((lambda () (begin (if (not G340f@lab) (G2e6b@raise-unbound-error G340d@id) (void)) (if (not (if (eq? G3413@type '$rtd) (begin '#f (list? (G2e69@binding-value G3411@b))) '#f)) (G317b@syntax-violation '#f '"not a record type" G3401@e) (void)) (G30ac@chi-expr (car (G2e69@binding-value G3411@b)) G3402@r G3403@mr))))) (G2e67@binding-type G3411@b))) (G2e63@label->binding G340f@lab G3402@r))) (G2e5f@id->label G340d@id))) G3409@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3407@t))) (G3088@syntax-dispatch G3407@t '(_ any)))) G3401@e))) (set! G302e@record-constructor-descriptor-transformer (lambda (G3415@e G3416@r G3417@mr) ((lambda (G341b@t) ((lambda (G341d@ls/false) (if (if G341d@ls/false (begin '#f (apply (lambda (G341f@id) (G2e45@id? G341f@id)) G341d@ls/false)) '#f) (apply (lambda (G3421@id) ((lambda (G3423@lab) ((lambda (G3425@b) ((lambda (G3427@type) ((lambda () (begin (if (not G3423@lab) (G2e6b@raise-unbound-error G3421@id) (void)) (if (not (if (eq? G3427@type '$rtd) (begin '#f (list? (G2e69@binding-value G3425@b))) '#f)) (G317b@syntax-violation '#f '"invalid type" G3415@e) (void)) (G30ac@chi-expr (cadr (G2e69@binding-value G3425@b)) G3416@r G3417@mr))))) (G2e67@binding-type G3425@b))) (G2e63@label->binding G3423@lab G3416@r))) (G2e5f@id->label G3421@id))) G341d@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G341b@t))) (G3088@syntax-dispatch G341b@t '(_ any)))) G3415@e))) (set! G3030@when-macro (lambda (G3429@e) ((lambda (G342b@t) ((lambda (G342d@ls/false) (if G342d@ls/false (apply (lambda (G342f@test G3430@e G3431@e*) (G303e@bless (list 'if G342f@test (cons 'begin (cons G3430@e G3431@e*))))) G342d@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G342b@t))) (G3088@syntax-dispatch G342b@t '(_ any any . each-any)))) G3429@e))) (set! G3032@unless-macro (lambda (G3435@e) ((lambda (G3437@t) ((lambda (G3439@ls/false) (if G3439@ls/false (apply (lambda (G343b@test G343c@e G343d@e*) (G303e@bless (list 'if (list 'not G343b@test) (cons 'begin (cons G343c@e G343d@e*))))) G3439@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3437@t))) (G3088@syntax-dispatch G3437@t '(_ any any . each-any)))) G3435@e))) (set! G3034@if-transformer (lambda (G3441@e G3442@r G3443@mr) ((lambda (G3447@t) ((lambda (G3449@ls/false) (if G3449@ls/false (apply (lambda (G344b@e0 G344c@e1 G344d@e2) (list 'if (G30ac@chi-expr G344b@e0 G3442@r G3443@mr) (G30ac@chi-expr G344c@e1 G3442@r G3443@mr) (G30ac@chi-expr G344d@e2 G3442@r G3443@mr))) G3449@ls/false) ((lambda (G3451@t) ((lambda (G3453@ls/false) (if G3453@ls/false (apply (lambda (G3455@e0 G3456@e1) (list 'if (G30ac@chi-expr G3455@e0 G3442@r G3443@mr) (G30ac@chi-expr G3456@e1 G3442@r G3443@mr) (G2da1@G2d13@build-void))) G3453@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3451@t))) (G3088@syntax-dispatch G3451@t '(_ any any)))) G3447@t))) (G3088@syntax-dispatch G3447@t '(_ any any any)))) G3441@e))) (set! G3036@case-macro (lambda (G3459@e) ((lambda (G345c@build-last G345e@build-one) (begin (set! G345c@build-last (lambda (G3483@cls) ((lambda (G3485@t) ((lambda (G3487@ls/false) (if G3487@ls/false (apply (lambda (G3489@e G348a@e*) (cons 'begin (cons G3489@e G348a@e*))) G3487@ls/false) ((lambda (G348d@t) ((lambda (G348f@ls/false) (if G348f@ls/false (apply (lambda () (G345e@build-one G3483@cls '(if #f #f))) G348f@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G348d@t))) (G3088@syntax-dispatch G348d@t '_))) G3485@t))) (G3088@syntax-dispatch G3485@t '(#(scheme-id else) any . each-any)))) G3483@cls))) (set! G345e@build-one (lambda (G3475@cls G3476@k) ((lambda (G3479@t) ((lambda (G347b@ls/false) (if G347b@ls/false (apply (lambda (G347d@d* G347e@e G347f@e*) (list 'if (list 'memv 't (list 'quote G347d@d*)) (cons 'begin (cons G347e@e G347f@e*)) G3476@k)) G347b@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3479@t))) (G3088@syntax-dispatch G3479@t '(each-any any . each-any)))) G3475@cls))) ((lambda (G345f@t) ((lambda (G3461@ls/false) (if G3461@ls/false (apply (lambda (G3463@expr) (G303e@bless (cons 'let (cons (list (list 't G3463@expr)) '((if #f #f)))))) G3461@ls/false) ((lambda (G3465@t) ((lambda (G3467@ls/false) (if G3467@ls/false (apply (lambda (G3469@expr G346a@cls G346b@cls*) (G303e@bless (list 'let (list (list 't G3469@expr)) ((letrec ((G346f@f (lambda (G3471@cls G3472@cls*) (if (null? G3472@cls*) (G345c@build-last G3471@cls) (G345e@build-one G3471@cls (G346f@f (car G3472@cls*) (cdr G3472@cls*))))))) G346f@f) G346a@cls G346b@cls*)))) G3467@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3465@t))) (G3088@syntax-dispatch G3465@t '(_ any any . each-any)))) G345f@t))) (G3088@syntax-dispatch G345f@t '(_ any)))) G3459@e))) '#f '#f))) (set! G3038@quote-transformer (lambda (G3491@e G3492@r G3493@mr) ((lambda (G3497@t) ((lambda (G3499@ls/false) (if G3499@ls/false (apply (lambda (G349b@datum) (list 'quote (G2e5b@stx->datum G349b@datum))) G3499@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3497@t))) (G3088@syntax-dispatch G3497@t '(_ any)))) G3491@e))) (set! G303a@case-lambda-transformer (lambda (G349d@e G349e@r G349f@mr) ((lambda (G34a3@t) ((lambda (G34a5@ls/false) (if G34a5@ls/false (apply (lambda (G34a7@fmls* G34a8@b* G34a9@b**) (call-with-values (lambda () (G30b4@chi-lambda-clause* G349d@e G34a7@fmls* (map cons G34a8@b* G34a9@b**) G349e@r G349f@mr)) (lambda (G34af@G34ad G34b0@G34ae) ((lambda (G34b3@body* G34b4@fmls*) (G2d9e@G2cc7@build-case-lambda '#f G34b4@fmls* G34b3@body*)) G34b0@G34ae G34af@G34ad)))) G34a5@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G34a3@t))) (G3088@syntax-dispatch G34a3@t '(_ . #(each (any any . each-any)))))) G349d@e))) (set! G303c@lambda-transformer (lambda (G34b7@e G34b8@r G34b9@mr) ((lambda (G34bd@t) ((lambda (G34bf@ls/false) (if G34bf@ls/false (apply (lambda (G34c1@fmls G34c2@b G34c3@b*) (call-with-values (lambda () (G30b2@chi-lambda-clause G34b7@e G34c1@fmls (cons G34c2@b G34c3@b*) G34b8@r G34b9@mr)) (lambda (G34c9@G34c7 G34ca@G34c8) ((lambda (G34cd@body G34ce@fmls) (G2d9d@G2cc5@build-lambda '#f G34ce@fmls G34cd@body)) G34ca@G34c8 G34c9@G34c7)))) G34bf@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G34bd@t))) (G3088@syntax-dispatch G34bd@t '(_ any any . each-any)))) G34b7@e))) (set! G303e@bless (lambda (G34d1@x) (G2e2d@mkstx ((letrec ((G34d3@f (lambda (G34d5@x) (if (G2e0d@stx? G34d5@x) G34d5@x (if (pair? G34d5@x) (cons (G34d3@f (car G34d5@x)) (G34d3@f (cdr G34d5@x))) (if (symbol? G34d5@x) (G3016@scheme-stx G34d5@x) (if (vector? G34d5@x) (vector-map G34d3@f G34d5@x) G34d5@x))))))) G34d3@f) G34d1@x) '() '() '()))) (set! G3040@with-syntax-macro (lambda (G34d7@e) ((lambda (G34d9@t) ((lambda (G34db@ls/false) (if G34db@ls/false (apply (lambda (G34dd@pat* G34de@expr* G34df@b G34e0@b*) ((lambda (G34e5@idn*) (begin (G30b0@verify-formals (map car G34e5@idn*) G34d7@e) ((lambda (G34e7@t*) (G303e@bless (list 'let (map list G34e7@t* G34de@expr*) ((letrec ((G34e9@f (lambda (G34eb@pat* G34ec@t*) (if (null? G34eb@pat*) (cons 'begin (cons '#f (cons G34df@b G34e0@b*))) (list 'syntax-case (car G34ec@t*) '() (list (car G34eb@pat*) (G34e9@f (cdr G34eb@pat*) (cdr G34ec@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G34eb@pat*)) (car G34ec@t*)))))))) G34e9@f) G34dd@pat* G34e7@t*)))) (G3167@generate-temporaries G34de@expr*)))) ((letrec ((G34ef@f (lambda (G34f1@pat*) (if (null? G34f1@pat*) '() (call-with-values (lambda () (G3086@convert-pattern (car G34f1@pat*) '())) (lambda (G34f5@G34f3 G34f6@G34f4) ((lambda (G34f9@idn* G34fa@pat) (append G34f9@idn* (G34ef@f (cdr G34f1@pat*)))) G34f6@G34f4 G34f5@G34f3))))))) G34ef@f) G34dd@pat*))) G34db@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G34d9@t))) (G3088@syntax-dispatch G34d9@t '(_ #(each (any any)) any . each-any)))) G34d7@e))) (set! G3042@invalid-fmls-error (lambda (G34fd@stx G34fe@fmls) ((lambda (G3501@t) ((lambda (G3503@ls/false) (if G3503@ls/false (apply (lambda (G3505@id* G3506@last) ((letrec ((G3509@f (lambda (G350b@id*) (if (null? G350b@id*) (values) (if (not (G2e45@id? (car G350b@id*))) (G317b@syntax-violation '#f '"not an identifier" G34fd@stx (car G350b@id*)) (begin (G3509@f (cdr G350b@id*)) (if (G2e53@bound-id-member? (car G350b@id*) (cdr G350b@id*)) (G317b@syntax-violation '#f '"duplicate binding" G34fd@stx (car G350b@id*)) (void)))))))) G3509@f) (if (G2e45@id? G3506@last) (cons G3506@last G3505@id*) (if (G2e3b@syntax-null? G3506@last) G3505@id* (G317b@syntax-violation '#f '"not an identifier" G34fd@stx G3506@last))))) G3503@ls/false) ((lambda (G350d@t) ((lambda (G350f@ls/false) (if G350f@ls/false (apply (lambda () (G317b@syntax-violation '#f '"malformed binding form" G34fd@stx G34fe@fmls)) G350f@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G350d@t))) (G3088@syntax-dispatch G350d@t '_))) G3501@t))) (G3088@syntax-dispatch G3501@t '#(each+ any () any)))) G34fe@fmls))) (set! G3044@let-macro (lambda (G3511@stx) ((lambda (G3513@t) ((lambda (G3515@ls/false) (if G3515@ls/false (apply (lambda (G3517@lhs* G3518@rhs* G3519@b G351a@b*) (if (G2e4f@valid-bound-ids? G3517@lhs*) (G303e@bless (cons (cons 'lambda (cons G3517@lhs* (cons G3519@b G351a@b*))) G3518@rhs*)) (G3042@invalid-fmls-error G3511@stx G3517@lhs*))) G3515@ls/false) ((lambda (G351f@t) ((lambda (G3521@ls/false) (if (if G3521@ls/false (begin '#f (apply (lambda (G3523@f G3524@lhs* G3525@rhs* G3526@b G3527@b*) (G2e45@id? G3523@f)) G3521@ls/false)) '#f) (apply (lambda (G352d@f G352e@lhs* G352f@rhs* G3530@b G3531@b*) (if (G2e4f@valid-bound-ids? G352e@lhs*) (G303e@bless (cons (list 'letrec (list (list G352d@f (cons 'lambda (cons G352e@lhs* (cons G3530@b G3531@b*))))) G352d@f) G352f@rhs*)) (G3042@invalid-fmls-error G3511@stx G352e@lhs*))) G3521@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G351f@t))) (G3088@syntax-dispatch G351f@t '(_ any #(each (any any)) any . each-any)))) G3513@t))) (G3088@syntax-dispatch G3513@t '(_ #(each (any any)) any . each-any)))) G3511@stx))) (set! G3046@let-values-macro (lambda (G3537@stx) ((lambda (G353a@rename G353c@rename*) (begin (set! G353a@rename (lambda (G359c@x G359d@old* G359e@new*) (begin (if (not (G2e45@id? G359c@x)) (G317b@syntax-violation '#f '"not an indentifier" G3537@stx G359c@x) (void)) (if (G2e53@bound-id-member? G359c@x G359d@old*) (G317b@syntax-violation '#f '"duplicate binding" G3537@stx G359c@x) (void)) ((lambda (G35a2@y) (values G35a2@y (cons G359c@x G359d@old*) (cons G35a2@y G359e@new*))) (gensym (G3181@syntax->datum G359c@x)))))) (set! G353c@rename* (lambda (G358a@x* G358b@old* G358c@new*) (if (null? G358a@x*) (values '() G358b@old* G358c@new*) (call-with-values (lambda () (G353a@rename (car G358a@x*) G358b@old* G358c@new*)) (lambda (G3590@x G3591@old* G3592@new*) (call-with-values (lambda () (G353c@rename* (cdr G358a@x*) G3591@old* G3592@new*)) (lambda (G3596@x* G3597@old* G3598@new*) (values (cons G3590@x G3596@x*) G3597@old* G3598@new*)))))))) ((lambda (G353d@t) ((lambda (G353f@ls/false) (if G353f@ls/false (apply (lambda (G3541@b G3542@b*) (cons* (G303e@bless 'let) '() G3541@b G3542@b*)) G353f@ls/false) ((lambda (G3545@t) ((lambda (G3547@ls/false) (if G3547@ls/false (apply (lambda (G3549@lhs* G354a@rhs* G354b@b G354c@b*) (G303e@bless ((letrec ((G3551@f (lambda (G3553@lhs* G3554@rhs* G3555@old* G3556@new*) (if (null? G3553@lhs*) (cons 'let (cons (map list G3555@old* G3556@new*) (cons G354b@b G354c@b*))) ((lambda (G355b@t) ((lambda (G355d@ls/false) (if G355d@ls/false (apply (lambda (G355f@x*) (call-with-values (lambda () (G353c@rename* G355f@x* G3555@old* G3556@new*)) (lambda (G3564@G3561 G3565@G3562 G3566@G3563) ((lambda (G356a@new* G356b@old* G356c@y*) (list 'call-with-values (list 'lambda '() (car G3554@rhs*)) (list 'lambda G356c@y* (G3551@f (cdr G3553@lhs*) (cdr G3554@rhs*) G356b@old* G356a@new*)))) G3566@G3563 G3565@G3562 G3564@G3561)))) G355d@ls/false) ((lambda (G3570@t) ((lambda (G3572@ls/false) (if G3572@ls/false (apply (lambda (G3574@x* G3575@x) (call-with-values (lambda () (G353a@rename G3575@x G3555@old* G3556@new*)) (lambda (G3578@y G3579@old* G357a@new*) (call-with-values (lambda () (G353c@rename* G3574@x* G3579@old* G357a@new*)) (lambda (G357e@y* G357f@old* G3580@new*) (list 'call-with-values (list 'lambda '() (car G3554@rhs*)) (list 'lambda (append G357e@y* G3578@y) (G3551@f (cdr G3553@lhs*) (cdr G3554@rhs*) G357f@old* G3580@new*)))))))) G3572@ls/false) ((lambda (G3584@t) ((lambda (G3586@ls/false) (if G3586@ls/false (apply (lambda (G3588@others) (G317b@syntax-violation '#f '"malformed bindings" G3537@stx G3588@others)) G3586@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3584@t))) (G3088@syntax-dispatch G3584@t 'any))) G3570@t))) (G3088@syntax-dispatch G3570@t '#(each+ any () any)))) G355b@t))) (G3088@syntax-dispatch G355b@t 'each-any))) (car G3553@lhs*)))))) G3551@f) G3549@lhs* G354a@rhs* '() '()))) G3547@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3545@t))) (G3088@syntax-dispatch G3545@t '(_ #(each (any any)) any . each-any)))) G353d@t))) (G3088@syntax-dispatch G353d@t '(_ () any . each-any)))) G3537@stx))) '#f '#f))) (set! G3048@let*-values-macro (lambda (G35a4@stx) ((lambda (G35a7@check) (begin (set! G35a7@check (lambda (G35d6@x*) (if (not (null? G35d6@x*)) ((lambda (G35d8@x) (begin (if (not (G2e45@id? G35d8@x)) (G317b@syntax-violation '#f '"not an identifier" G35a4@stx G35d8@x) (void)) (G35a7@check (cdr G35d6@x*)) (if (G2e53@bound-id-member? G35d8@x (cdr G35d6@x*)) (G317b@syntax-violation '#f '"duplicate identifier" G35a4@stx G35d8@x) (void)))) (car G35d6@x*)) (void)))) ((lambda (G35a8@t) ((lambda (G35aa@ls/false) (if G35aa@ls/false (apply (lambda (G35ac@b G35ad@b*) (cons* (G303e@bless 'let) '() G35ac@b G35ad@b*)) G35aa@ls/false) ((lambda (G35b0@t) ((lambda (G35b2@ls/false) (if G35b2@ls/false (apply (lambda (G35b4@lhs* G35b5@rhs* G35b6@b G35b7@b*) (G303e@bless ((letrec ((G35bc@f (lambda (G35be@lhs* G35bf@rhs*) (if (null? G35be@lhs*) (cons 'begin (cons G35b6@b G35b7@b*)) ((lambda (G35c2@t) ((lambda (G35c4@ls/false) (if G35c4@ls/false (apply (lambda (G35c6@x*) (begin (G35a7@check G35c6@x*) (list 'call-with-values (list 'lambda '() (car G35bf@rhs*)) (list 'lambda G35c6@x* (G35bc@f (cdr G35be@lhs*) (cdr G35bf@rhs*)))))) G35c4@ls/false) ((lambda (G35c8@t) ((lambda (G35ca@ls/false) (if G35ca@ls/false (apply (lambda (G35cc@x* G35cd@x) (begin (G35a7@check (cons G35cd@x G35cc@x*)) (list 'call-with-values (list 'lambda '() (car G35bf@rhs*)) (list 'lambda (append G35cc@x* G35cd@x) (G35bc@f (cdr G35be@lhs*) (cdr G35bf@rhs*)))))) G35ca@ls/false) ((lambda (G35d0@t) ((lambda (G35d2@ls/false) (if G35d2@ls/false (apply (lambda (G35d4@others) (G317b@syntax-violation '#f '"malformed bindings" G35a4@stx G35d4@others)) G35d2@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G35d0@t))) (G3088@syntax-dispatch G35d0@t 'any))) G35c8@t))) (G3088@syntax-dispatch G35c8@t '#(each+ any () any)))) G35c2@t))) (G3088@syntax-dispatch G35c2@t 'each-any))) (car G35be@lhs*)))))) G35bc@f) G35b4@lhs* G35b5@rhs*))) G35b2@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G35b0@t))) (G3088@syntax-dispatch G35b0@t '(_ #(each (any any)) any . each-any)))) G35a8@t))) (G3088@syntax-dispatch G35a8@t '(_ () any . each-any)))) G35a4@stx))) '#f))) (set! G304a@trace-lambda-macro (lambda (G35da@stx) ((lambda (G35dc@t) ((lambda (G35de@ls/false) (if G35de@ls/false (apply (lambda (G35e0@who G35e1@fmls G35e2@b G35e3@b*) (if (G2e4f@valid-bound-ids? G35e1@fmls) (G303e@bless (list 'make-traced-procedure (list 'quote G35e0@who) (cons 'lambda (cons G35e1@fmls (cons G35e2@b G35e3@b*))))) (G3042@invalid-fmls-error G35da@stx G35e1@fmls))) G35de@ls/false) ((lambda (G35e8@t) ((lambda (G35ea@ls/false) (if G35ea@ls/false (apply (lambda (G35ec@who G35ed@fmls G35ee@last G35ef@b G35f0@b*) (if (G2e4f@valid-bound-ids? (cons G35ee@last G35ed@fmls)) (G303e@bless (list 'make-traced-procedure (list 'quote G35ec@who) (cons 'lambda (cons (append G35ed@fmls G35ee@last) (cons G35ef@b G35f0@b*))))) (G3042@invalid-fmls-error G35da@stx (append G35ed@fmls G35ee@last)))) G35ea@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G35e8@t))) (G3088@syntax-dispatch G35e8@t '(_ any #(each+ any () any) any . each-any)))) G35dc@t))) (G3088@syntax-dispatch G35dc@t '(_ any each-any any . each-any)))) G35da@stx))) (set! G304c@trace-define-macro (lambda (G35f6@stx) ((lambda (G35f8@t) ((lambda (G35fa@ls/false) (if G35fa@ls/false (apply (lambda (G35fc@who G35fd@fmls G35fe@b G35ff@b*) (if (G2e4f@valid-bound-ids? G35fd@fmls) (G303e@bless (list 'define G35fc@who (list 'make-traced-procedure (list 'quote G35fc@who) (cons 'lambda (cons G35fd@fmls (cons G35fe@b G35ff@b*)))))) (G3042@invalid-fmls-error G35f6@stx G35fd@fmls))) G35fa@ls/false) ((lambda (G3604@t) ((lambda (G3606@ls/false) (if G3606@ls/false (apply (lambda (G3608@who G3609@fmls G360a@last G360b@b G360c@b*) (if (G2e4f@valid-bound-ids? (cons G360a@last G3609@fmls)) (G303e@bless (list 'define G3608@who (list 'make-traced-procedure (list 'quote G3608@who) (cons 'lambda (cons (append G3609@fmls G360a@last) (cons G360b@b G360c@b*)))))) (G3042@invalid-fmls-error G35f6@stx (append G3609@fmls G360a@last)))) G3606@ls/false) ((lambda (G3612@t) ((lambda (G3614@ls/false) (if G3614@ls/false (apply (lambda (G3616@who G3617@expr) (if (G2e45@id? G3616@who) (G303e@bless (list 'define G3616@who (list 'let (list (list 'v G3617@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G3616@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G317b@syntax-violation '#f '"invalid name" G35f6@stx))) G3614@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3612@t))) (G3088@syntax-dispatch G3612@t '(_ any any)))) G3604@t))) (G3088@syntax-dispatch G3604@t '(_ (any . #(each+ any () any)) any . each-any)))) G35f8@t))) (G3088@syntax-dispatch G35f8@t '(_ (any . each-any) any . each-any)))) G35f6@stx))) (set! G304e@trace-define-syntax-macro (lambda (G361a@stx) ((lambda (G361c@t) ((lambda (G361e@ls/false) (if G361e@ls/false (apply (lambda (G3620@who G3621@expr) (if (G2e45@id? G3620@who) (G303e@bless (list 'define-syntax G3620@who (list 'make-traced-macro (list 'quote G3620@who) G3621@expr))) (G317b@syntax-violation '#f '"invalid name" G361a@stx))) G361e@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G361c@t))) (G3088@syntax-dispatch G361c@t '(_ any any)))) G361a@stx))) (set! G3050@trace-let/rec-syntax (lambda (G3624@who) (lambda (G3626@stx) ((lambda (G3628@t) ((lambda (G362a@ls/false) (if G362a@ls/false (apply (lambda (G362c@lhs* G362d@rhs* G362e@b G362f@b*) (if (G2e4f@valid-bound-ids? G362c@lhs*) ((lambda (G3634@rhs*) (G303e@bless (cons G3624@who (cons (map list G362c@lhs* G3634@rhs*) (cons G362e@b G362f@b*))))) (map (lambda (G3636@lhs G3637@rhs) (list 'make-traced-macro (list 'quote G3636@lhs) G3637@rhs)) G362c@lhs* G362d@rhs*)) (G3042@invalid-fmls-error G3626@stx G362c@lhs*))) G362a@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3628@t))) (G3088@syntax-dispatch G3628@t '(_ #(each (any any)) any . each-any)))) G3626@stx)))) (set! G3052@trace-let-syntax-macro (G3050@trace-let/rec-syntax 'let-syntax)) (set! G3054@trace-letrec-syntax-macro (G3050@trace-let/rec-syntax 'letrec-syntax)) (set! G3056@guard-macro (lambda (G363a@x) ((lambda (G363d@gen-clauses) (begin (set! G363d@gen-clauses (lambda (G3654@con G3655@outerk G3656@clause*) ((lambda (G365b@f G365d@f*) (begin (set! G365b@f (lambda (G368e@x G368f@k) ((lambda (G3692@t) ((lambda (G3694@ls/false) (if G3694@ls/false (apply (lambda (G3696@e G3697@p) ((lambda (G369a@t) (list 'let (list (list G369a@t G3696@e)) (list 'if G369a@t (list G3697@p G369a@t) G368f@k))) (gensym))) G3694@ls/false) ((lambda (G369c@t) ((lambda (G369e@ls/false) (if G369e@ls/false (apply (lambda (G36a0@e) ((lambda (G36a2@t) (list 'let (list (list G36a2@t G36a0@e)) (list 'if G36a2@t G36a2@t G368f@k))) (gensym))) G369e@ls/false) ((lambda (G36a4@t) ((lambda (G36a6@ls/false) (if G36a6@ls/false (apply (lambda (G36a8@e G36a9@v G36aa@v*) (list 'if G36a8@e (cons 'begin (cons G36a9@v G36aa@v*)) G368f@k)) G36a6@ls/false) ((lambda (G36ae@t) ((lambda (G36b0@ls/false) (if G36b0@ls/false (apply (lambda () (G317b@syntax-violation '#f '"invalid guard clause" G368e@x)) G36b0@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G36ae@t))) (G3088@syntax-dispatch G36ae@t '_))) G36a4@t))) (G3088@syntax-dispatch G36a4@t '(any any . each-any)))) G369c@t))) (G3088@syntax-dispatch G369c@t '(any)))) G3692@t))) (G3088@syntax-dispatch G3692@t '(any #(scheme-id =>) any)))) G368e@x))) (set! G365d@f* (lambda (G3668@x*) ((lambda (G366a@t) ((lambda (G366c@ls/false) (if G366c@ls/false (apply (lambda () (values (list 'raise G3654@con) '#t)) G366c@ls/false) ((lambda (G366e@t) ((lambda (G3670@ls/false) (if G3670@ls/false (apply (lambda (G3672@e G3673@e*) (values (cons 'begin (cons G3672@e G3673@e*)) '#f)) G3670@ls/false) ((lambda (G3676@t) ((lambda (G3678@ls/false) (if G3678@ls/false (apply (lambda (G367a@cls G367b@cls*) (call-with-values (lambda () (G365d@f* G367b@cls*)) (lambda (G3680@G367e G3681@G367f) ((lambda (G3684@g G3685@e) (values (G365b@f G367a@cls G3685@e) G3684@g)) G3681@G367f G3680@G367e)))) G3678@ls/false) ((lambda (G3688@t) ((lambda (G368a@ls/false) (if G368a@ls/false (apply (lambda (G368c@others) (G317b@syntax-violation '#f '"invalid guard clause" G368c@others)) G368a@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3688@t))) (G3088@syntax-dispatch G3688@t 'any))) G3676@t))) (G3088@syntax-dispatch G3676@t '(any . any)))) G366e@t))) (G3088@syntax-dispatch G366e@t '((#(scheme-id else) any . each-any))))) G366a@t))) (G3088@syntax-dispatch G366a@t '()))) G3668@x*))) (call-with-values (lambda () (G365d@f* G3656@clause*)) (lambda (G3660@G365e G3661@G365f) ((lambda (G3664@raisek G3665@code) (if G3664@raisek (list G3655@outerk G3665@code) G3665@code)) G3661@G365f G3660@G365e))))) '#f '#f))) ((lambda (G363e@t) ((lambda (G3640@ls/false) (if (if G3640@ls/false (begin '#f (apply (lambda (G3642@con G3643@clause* G3644@b G3645@b*) (G2e45@id? G3642@con)) G3640@ls/false)) '#f) (apply (lambda (G364a@con G364b@clause* G364c@b G364d@b*) ((lambda (G3652@outerk) (G303e@bless (list 'call/cc (list 'lambda (list G3652@outerk) (list 'with-exception-handler (list 'lambda (list G364a@con) (G363d@gen-clauses G364a@con G3652@outerk G364b@clause*)) (cons 'lambda (cons '() (cons '#f (cons G364c@b G364d@b*))))))))) (gensym))) G3640@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G363e@t))) (G3088@syntax-dispatch G363e@t '(_ (any . each-any) any . each-any)))) G363a@x))) '#f))) (set! G3058@define-enumeration-macro (lambda (G36b2@stx) ((lambda (G36b5@set? G36b7@remove-dups) (begin (set! G36b5@set? (lambda (G36ce@x) ((lambda (G36d0@t) (if G36d0@t G36d0@t (begin '#f (if (not (memq (car G36ce@x) (cdr G36ce@x))) (begin '#f (G36b5@set? (cdr G36ce@x))) '#f)))) (null? G36ce@x)))) (set! G36b7@remove-dups (lambda (G36cc@ls) (if (null? G36cc@ls) '() (cons (car G36cc@ls) (G36b7@remove-dups (remq (car G36cc@ls) (cdr G36cc@ls))))))) ((lambda (G36b8@t) ((lambda (G36ba@ls/false) (if (if G36ba@ls/false (begin '#f (apply (lambda (G36bc@name G36bd@id* G36be@maker) (if (G2e45@id? G36bc@name) (if (G2e45@id? G36be@maker) (begin '#f (for-all G2e45@id? G36bd@id*)) '#f) '#f)) G36ba@ls/false)) '#f) (apply (lambda (G36c2@name G36c3@id* G36c4@maker) ((lambda (G36c8@name* G36c9@mk) (G303e@bless (list 'begin (list 'define G36c9@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G36c8@name*)))) (list 'define-syntax G36c2@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G36c8@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G36c2@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G36c4@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G36c4@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G36c8@name*)) (cons 'syntax-violation (cons (list 'quote G36c4@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G36c9@mk '('(n* ...)))))))))))) (G36b7@remove-dups (G3181@syntax->datum G36c3@id*)) (gensym))) G36ba@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G36b8@t))) (G3088@syntax-dispatch G36b8@t '(_ any each-any any)))) G36b2@stx))) '#f '#f))) (set! G305a@time-macro (lambda (G36d2@stx) ((lambda (G36d4@t) ((lambda (G36d6@ls/false) (if G36d6@ls/false (apply (lambda (G36d8@expr) ((lambda (G36da@str) (G303e@bless (list 'time-it G36da@str (list 'lambda '() G36d8@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G36de@G36dc G36df@G36dd) ((lambda (G36e2@e G36e3@p) (begin (write (G3181@syntax->datum G36d8@expr) G36e3@p) (G36e2@e))) G36df@G36dd G36de@G36dc))))) G36d6@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G36d4@t))) (G3088@syntax-dispatch G36d4@t '(_ any)))) G36d2@stx))) (set! G305c@delay-macro (lambda (G36e6@stx) ((lambda (G36e8@t) ((lambda (G36ea@ls/false) (if G36ea@ls/false (apply (lambda (G36ec@expr) (G303e@bless (list 'make-promise (list 'lambda '() G36ec@expr)))) G36ea@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G36e8@t))) (G3088@syntax-dispatch G36e8@t '(_ any)))) G36e6@stx))) (set! G305e@assert-macro (lambda (G36ee@stx) ((lambda (G36f0@t) ((lambda (G36f2@ls/false) (if G36f2@ls/false (apply (lambda (G36f4@expr) ((lambda (G36f6@pos) (G303e@bless (list 'unless G36f4@expr (list 'assertion-error (list 'quote G36f4@expr) (list 'quote G36f6@pos))))) ((lambda (G36f8@t) (if G36f8@t G36f8@t (begin '#f (G3171@expression-position G36f4@expr)))) (G3171@expression-position G36ee@stx)))) G36f2@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G36f0@t))) (G3088@syntax-dispatch G36f0@t '(_ any)))) G36ee@stx))) (set! G3060@endianness-macro (lambda (G36fa@stx) ((lambda (G36fc@t) ((lambda (G36fe@ls/false) (if G36fe@ls/false (apply (lambda (G3700@e) ((lambda (G3702@t) (if (memv G3702@t '(little)) (G303e@bless ''little) (if (memv G3702@t '(big)) (G303e@bless ''big) (G317b@syntax-violation '#f '"endianness must be big or little" G36fa@stx)))) (G3181@syntax->datum G3700@e))) G36fe@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G36fc@t))) (G3088@syntax-dispatch G36fc@t '(_ any)))) G36fa@stx))) (set! G3062@identifier-syntax-macro (lambda (G3704@stx) ((lambda (G3706@t) ((lambda (G3708@ls/false) (if G3708@ls/false (apply (lambda (G370a@expr) (G303e@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G370a@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G370a@expr) '((syntax (e* ...)))))))))) G3708@ls/false) ((lambda (G370c@t) ((lambda (G370e@ls/false) (if (if G370e@ls/false (begin '#f (apply (lambda (G3710@id1 G3711@expr1 G3712@id2 G3713@expr2 G3714@expr3) (if (G2e45@id? G3710@id1) (if (G2e45@id? G3712@id2) (begin '#f (G2e45@id? G3713@expr2)) '#f) '#f)) G370e@ls/false)) '#f) (apply (lambda (G371a@id1 G371b@expr1 G371c@id2 G371d@expr2 G371e@expr3) (G303e@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G371b@expr1)) (list (list 'set! 'id G371d@expr2) (list 'syntax G371e@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G371b@expr1 '(e* ...))))))))) G370e@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G370c@t))) (G3088@syntax-dispatch G370c@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G3706@t))) (G3088@syntax-dispatch G3706@t '(_ any)))) G3704@stx))) (set! G3064@do-macro (lambda (G3724@stx) ((lambda (G3727@bind) (begin (set! G3727@bind (lambda (G373e@x) ((lambda (G3740@t) ((lambda (G3742@ls/false) (if G3742@ls/false (apply (lambda (G3744@x G3745@init) (list G3744@x G3745@init G3744@x)) G3742@ls/false) ((lambda (G3748@t) ((lambda (G374a@ls/false) (if G374a@ls/false (apply (lambda (G374c@x G374d@init G374e@step) (list G374c@x G374d@init G374e@step)) G374a@ls/false) ((lambda (G3752@t) ((lambda (G3754@ls/false) (if G3754@ls/false (apply (lambda () (G317b@syntax-violation '#f '"invalid binding" G3724@stx)) G3754@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3752@t))) (G3088@syntax-dispatch G3752@t '_))) G3748@t))) (G3088@syntax-dispatch G3748@t '(any any any)))) G3740@t))) (G3088@syntax-dispatch G3740@t '(any any)))) G373e@x))) ((lambda (G3728@t) ((lambda (G372a@ls/false) (if G372a@ls/false (apply (lambda (G372c@binding* G372d@test G372e@expr* G372f@command*) ((lambda (G3734@t) ((lambda (G3736@ls/false) (if G3736@ls/false (apply (lambda (G3738@x* G3739@init* G373a@step*) (if (G2e4f@valid-bound-ids? G3738@x*) (G303e@bless (list 'letrec (list (list 'loop (list 'lambda G3738@x* (list 'if G372d@test (cons 'begin (cons '(if #f #f) G372e@expr*)) (cons 'begin (append G372f@command* (list (cons 'loop G373a@step*)))))))) (cons 'loop G3739@init*))) (G317b@syntax-violation '#f '"invalid bindings" G3724@stx))) G3736@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3734@t))) (G3088@syntax-dispatch G3734@t '#(each (any any any))))) (map G3727@bind G372c@binding*))) G372a@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3728@t))) (G3088@syntax-dispatch G3728@t '(_ each-any (any . each-any) . each-any)))) G3724@stx))) '#f))) (set! G3066@let*-macro (lambda (G3756@stx) ((lambda (G3758@t) ((lambda (G375a@ls/false) (if (if G375a@ls/false (begin '#f (apply (lambda (G375c@lhs* G375d@rhs* G375e@b G375f@b*) (for-all G2e45@id? G375c@lhs*)) G375a@ls/false)) '#f) (apply (lambda (G3764@lhs* G3765@rhs* G3766@b G3767@b*) (G303e@bless ((letrec ((G376c@f (lambda (G376e@x*) (if (null? G376e@x*) (cons 'let (cons '() (cons G3766@b G3767@b*))) (list 'let (list (car G376e@x*)) (G376c@f (cdr G376e@x*))))))) G376c@f) (map list G3764@lhs* G3765@rhs*)))) G375a@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3758@t))) (G3088@syntax-dispatch G3758@t '(_ #(each (any any)) any . each-any)))) G3756@stx))) (set! G3068@or-macro (lambda (G3770@stx) ((lambda (G3772@t) ((lambda (G3774@ls/false) (if G3774@ls/false (apply (lambda () '#f) G3774@ls/false) ((lambda (G3776@t) ((lambda (G3778@ls/false) (if G3778@ls/false (apply (lambda (G377a@e G377b@e*) (G303e@bless ((letrec ((G377e@f (lambda (G3780@e G3781@e*) (if (null? G3781@e*) (list 'begin '#f G3780@e) (list 'let (list (list 't G3780@e)) (list 'if 't 't (G377e@f (car G3781@e*) (cdr G3781@e*)))))))) G377e@f) G377a@e G377b@e*))) G3778@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3776@t))) (G3088@syntax-dispatch G3776@t '(_ any . each-any)))) G3772@t))) (G3088@syntax-dispatch G3772@t '(_)))) G3770@stx))) (set! G306a@and-macro (lambda (G3784@stx) ((lambda (G3786@t) ((lambda (G3788@ls/false) (if G3788@ls/false (apply (lambda () '#t) G3788@ls/false) ((lambda (G378a@t) ((lambda (G378c@ls/false) (if G378c@ls/false (apply (lambda (G378e@e G378f@e*) (G303e@bless ((letrec ((G3792@f (lambda (G3794@e G3795@e*) (if (null? G3795@e*) (list 'begin '#f G3794@e) (cons 'if (cons G3794@e (cons (G3792@f (car G3795@e*) (cdr G3795@e*)) '(#f)))))))) G3792@f) G378e@e G378f@e*))) G378c@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G378a@t))) (G3088@syntax-dispatch G378a@t '(_ any . each-any)))) G3786@t))) (G3088@syntax-dispatch G3786@t '(_)))) G3784@stx))) (set! G306c@cond-macro (lambda (G3798@stx) ((lambda (G379a@t) ((lambda (G379c@ls/false) (if G379c@ls/false (apply (lambda (G379e@cls G379f@cls*) (G303e@bless ((letrec ((G37a2@f (lambda (G37a4@cls G37a5@cls*) (if (null? G37a5@cls*) ((lambda (G37a8@t) ((lambda (G37aa@ls/false) (if G37aa@ls/false (apply (lambda (G37ac@e G37ad@e*) (cons 'begin (cons G37ac@e G37ad@e*))) G37aa@ls/false) ((lambda (G37b0@t) ((lambda (G37b2@ls/false) (if G37b2@ls/false (apply (lambda (G37b4@e G37b5@p) (list 'let (list (list 't G37b4@e)) (list 'if 't (cons G37b5@p '(t))))) G37b2@ls/false) ((lambda (G37b8@t) ((lambda (G37ba@ls/false) (if G37ba@ls/false (apply (lambda (G37bc@e) (cons 'or (cons G37bc@e '((if #f #f))))) G37ba@ls/false) ((lambda (G37be@t) ((lambda (G37c0@ls/false) (if G37c0@ls/false (apply (lambda (G37c2@e G37c3@e*) (list 'if G37c2@e (cons 'begin G37c3@e*))) G37c0@ls/false) ((lambda (G37c6@t) ((lambda (G37c8@ls/false) (if G37c8@ls/false (apply (lambda () (G317b@syntax-violation '#f '"invalid last clause" G3798@stx)) G37c8@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G37c6@t))) (G3088@syntax-dispatch G37c6@t '_))) G37be@t))) (G3088@syntax-dispatch G37be@t '(any . each-any)))) G37b8@t))) (G3088@syntax-dispatch G37b8@t '(any)))) G37b0@t))) (G3088@syntax-dispatch G37b0@t '(any #(scheme-id =>) any)))) G37a8@t))) (G3088@syntax-dispatch G37a8@t '(#(scheme-id else) any . each-any)))) G37a4@cls) ((lambda (G37ca@t) ((lambda (G37cc@ls/false) (if G37cc@ls/false (apply (lambda (G37ce@e G37cf@e*) (G317b@syntax-violation '#f '"incorrect position of keyword else" G3798@stx)) G37cc@ls/false) ((lambda (G37d2@t) ((lambda (G37d4@ls/false) (if G37d4@ls/false (apply (lambda (G37d6@e G37d7@p) (list 'let (list (list 't G37d6@e)) (list 'if 't (cons G37d7@p '(t)) (G37a2@f (car G37a5@cls*) (cdr G37a5@cls*))))) G37d4@ls/false) ((lambda (G37da@t) ((lambda (G37dc@ls/false) (if G37dc@ls/false (apply (lambda (G37de@e) (list 'or G37de@e (G37a2@f (car G37a5@cls*) (cdr G37a5@cls*)))) G37dc@ls/false) ((lambda (G37e0@t) ((lambda (G37e2@ls/false) (if G37e2@ls/false (apply (lambda (G37e4@e G37e5@e*) (list 'if G37e4@e (cons 'begin G37e5@e*) (G37a2@f (car G37a5@cls*) (cdr G37a5@cls*)))) G37e2@ls/false) ((lambda (G37e8@t) ((lambda (G37ea@ls/false) (if G37ea@ls/false (apply (lambda () (G317b@syntax-violation '#f '"invalid last clause" G3798@stx)) G37ea@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G37e8@t))) (G3088@syntax-dispatch G37e8@t '_))) G37e0@t))) (G3088@syntax-dispatch G37e0@t '(any . each-any)))) G37da@t))) (G3088@syntax-dispatch G37da@t '(any)))) G37d2@t))) (G3088@syntax-dispatch G37d2@t '(any #(scheme-id =>) any)))) G37ca@t))) (G3088@syntax-dispatch G37ca@t '(#(scheme-id else) any . each-any)))) G37a4@cls))))) G37a2@f) G379e@cls G379f@cls*))) G379c@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G379a@t))) (G3088@syntax-dispatch G379a@t '(_ any . each-any)))) G3798@stx))) (set! G306e@do-include (lambda (G37ec@stx G37ed@id G37ee@filename) ((lambda (G37f2@filename) (begin (if (not (if (string? G37f2@filename) (begin '#f (G2e45@id? G37ed@id)) '#f)) (G317b@syntax-violation '#f '"invalid syntax" G37ec@stx) (void)) (cons (G303e@bless 'begin) (with-input-from-file G37f2@filename (lambda () ((letrec ((G37f4@f (lambda (G37f6@ls) ((lambda (G37f8@x) (if (eof-object? G37f8@x) (reverse G37f6@ls) (G37f4@f (cons (G2e23@datum->stx G37ed@id G37f8@x) G37f6@ls)))) (G298a@G2888@read-annotated))))) G37f4@f) '())))))) (G2e5b@stx->datum G37ee@filename)))) (set! G3070@include-macro (lambda (G37fa@e) ((lambda (G37fc@t) ((lambda (G37fe@ls/false) (if G37fe@ls/false (apply (lambda (G3800@id G3801@filename) (G306e@do-include G37fa@e G3800@id G3801@filename)) G37fe@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G37fc@t))) (G3088@syntax-dispatch G37fc@t '(any any)))) G37fa@e))) (set! G3072@include-into-macro (lambda (G3804@e) ((lambda (G3806@t) ((lambda (G3808@ls/false) (if G3808@ls/false (apply (lambda (G380a@id G380b@filename) (G306e@do-include G3804@e G380a@id G380b@filename)) G3808@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3806@t))) (G3088@syntax-dispatch G3806@t '(_ any any)))) G3804@e))) (set! G3074@syntax-rules-macro (lambda (G380e@e) ((lambda (G3810@t) ((lambda (G3812@ls/false) (if G3812@ls/false (apply (lambda (G3814@lits G3815@pat* G3816@tmp*) (begin (G308e@verify-literals G3814@lits G380e@e) (G303e@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G3814@lits (map (lambda (G381a@pat G381b@tmp) ((lambda (G381e@t) ((lambda (G3820@ls/false) (if G3820@ls/false (apply (lambda (G3822@rest) (list (cons 'g G3822@rest) (list 'syntax G381b@tmp))) G3820@ls/false) ((lambda (G3824@t) ((lambda (G3826@ls/false) (if G3826@ls/false (apply (lambda () (G317b@syntax-violation '#f '"invalid syntax-rules pattern" G380e@e G381a@pat)) G3826@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3824@t))) (G3088@syntax-dispatch G3824@t '_))) G381e@t))) (G3088@syntax-dispatch G381e@t '(_ . any)))) G381a@pat)) G3815@pat* G3816@tmp*)))))))) G3812@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3810@t))) (G3088@syntax-dispatch G3810@t '(_ each-any . #(each (any any)))))) G380e@e))) (set! G3076@quasiquote-macro ((lambda () ((lambda (G3829@datum G3852@quasicons* G3854@quasicons G3856@quasiappend G3858@quasivector G385a@vquasi G385c@quasi) (begin (set! G3829@datum (lambda (G3937@x) (list (G3016@scheme-stx 'quote) (G2e2d@mkstx G3937@x '() '() '())))) (set! G3852@quasicons* (lambda (G392f@x G3930@y) ((letrec ((G3933@f (lambda (G3935@x) (if (null? G3935@x) G3930@y (G3854@quasicons (car G3935@x) (G3933@f (cdr G3935@x))))))) G3933@f) G392f@x))) (set! G3854@quasicons (lambda (G3909@x G390a@y) ((lambda (G390d@t) ((lambda (G390f@ls/false) (if G390f@ls/false (apply (lambda (G3911@dy) ((lambda (G3913@t) ((lambda (G3915@ls/false) (if G3915@ls/false (apply (lambda (G3917@dx) (list (G3016@scheme-stx 'quote) (cons G3917@dx G3911@dy))) G3915@ls/false) ((lambda (G3919@t) ((lambda (G391b@ls/false) (if G391b@ls/false (apply (lambda () ((lambda (G391d@t) ((lambda (G391f@ls/false) (if G391f@ls/false (apply (lambda () (list (G3016@scheme-stx 'list) G3909@x)) G391f@ls/false) ((lambda (G3921@t) ((lambda (G3923@ls/false) (if G3923@ls/false (apply (lambda () (list (G3016@scheme-stx 'cons) G3909@x G390a@y)) G3923@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3921@t))) (G3088@syntax-dispatch G3921@t '_))) G391d@t))) (G3088@syntax-dispatch G391d@t '()))) G3911@dy)) G391b@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3919@t))) (G3088@syntax-dispatch G3919@t '_))) G3913@t))) (G3088@syntax-dispatch G3913@t '(#(scheme-id quote) any)))) G3909@x)) G390f@ls/false) ((lambda (G3925@t) ((lambda (G3927@ls/false) (if G3927@ls/false (apply (lambda (G3929@stuff) (cons* (G3016@scheme-stx 'list) G3909@x G3929@stuff)) G3927@ls/false) ((lambda (G392b@t) ((lambda (G392d@ls/false) (if G392d@ls/false (apply (lambda () (list (G3016@scheme-stx 'cons) G3909@x G390a@y)) G392d@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G392b@t))) (G3088@syntax-dispatch G392b@t '_))) G3925@t))) (G3088@syntax-dispatch G3925@t '(#(scheme-id list) . each-any)))) G390d@t))) (G3088@syntax-dispatch G390d@t '(#(scheme-id quote) any)))) G390a@y))) (set! G3856@quasiappend (lambda (G38ef@x G38f0@y) ((lambda (G38f3@ls) (if (null? G38f3@ls) (list (G3016@scheme-stx 'quote) '()) (if (null? (cdr G38f3@ls)) (car G38f3@ls) (cons* (G3016@scheme-stx 'append) G38f3@ls)))) ((letrec ((G38f5@f (lambda (G38f7@x) (if (null? G38f7@x) ((lambda (G38f9@t) ((lambda (G38fb@ls/false) (if G38fb@ls/false (apply (lambda () '()) G38fb@ls/false) ((lambda (G38fd@t) ((lambda (G38ff@ls/false) (if G38ff@ls/false (apply (lambda () (list G38f0@y)) G38ff@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G38fd@t))) (G3088@syntax-dispatch G38fd@t '_))) G38f9@t))) (G3088@syntax-dispatch G38f9@t '(#(scheme-id quote) ())))) G38f0@y) ((lambda (G3901@t) ((lambda (G3903@ls/false) (if G3903@ls/false (apply (lambda () (G38f5@f (cdr G38f7@x))) G3903@ls/false) ((lambda (G3905@t) ((lambda (G3907@ls/false) (if G3907@ls/false (apply (lambda () (cons (car G38f7@x) (G38f5@f (cdr G38f7@x)))) G3907@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3905@t))) (G3088@syntax-dispatch G3905@t '_))) G3901@t))) (G3088@syntax-dispatch G3901@t '(#(scheme-id quote) ())))) (car G38f7@x)))))) G38f5@f) G38ef@x)))) (set! G3858@quasivector (lambda (G38bd@x) ((lambda (G38bf@pat-x) ((lambda (G38c1@t) ((lambda (G38c3@ls/false) (if G38c3@ls/false (apply (lambda (G38c5@x*) (list (G3016@scheme-stx 'quote) (list->vector G38c5@x*))) G38c3@ls/false) ((lambda (G38c7@t) ((lambda (G38c9@ls/false) (if G38c9@ls/false (apply (lambda () ((letrec ((G38cb@f (lambda (G38cd@x G38ce@k) ((lambda (G38d1@t) ((lambda (G38d3@ls/false) (if G38d3@ls/false (apply (lambda (G38d5@x*) (G38ce@k (map (lambda (G38d7@x) (list (G3016@scheme-stx 'quote) G38d7@x)) G38d5@x*))) G38d3@ls/false) ((lambda (G38d9@t) ((lambda (G38db@ls/false) (if G38db@ls/false (apply (lambda (G38dd@x*) (G38ce@k G38dd@x*)) G38db@ls/false) ((lambda (G38df@t) ((lambda (G38e1@ls/false) (if G38e1@ls/false (apply (lambda (G38e3@x G38e4@y) (G38cb@f G38e4@y (lambda (G38e7@ls) (G38ce@k (cons G38e3@x G38e7@ls))))) G38e1@ls/false) ((lambda (G38e9@t) ((lambda (G38eb@ls/false) (if G38eb@ls/false (apply (lambda () (list (G3016@scheme-stx 'list->vector) G38bf@pat-x)) G38eb@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G38e9@t))) (G3088@syntax-dispatch G38e9@t '_))) G38df@t))) (G3088@syntax-dispatch G38df@t '(#(scheme-id cons) any any)))) G38d9@t))) (G3088@syntax-dispatch G38d9@t '(#(scheme-id list) . each-any)))) G38d1@t))) (G3088@syntax-dispatch G38d1@t '(#(scheme-id quote) each-any)))) G38cd@x)))) G38cb@f) G38bd@x (lambda (G38ed@ls) (cons* (G3016@scheme-stx 'vector) G38ed@ls)))) G38c9@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G38c7@t))) (G3088@syntax-dispatch G38c7@t '_))) G38c1@t))) (G3088@syntax-dispatch G38c1@t '(#(scheme-id quote) each-any)))) G38bf@pat-x)) G38bd@x))) (set! G385a@vquasi (lambda (G389b@p G389c@lev) ((lambda (G389f@t) ((lambda (G38a1@ls/false) (if G38a1@ls/false (apply (lambda (G38a3@p G38a4@q) ((lambda (G38a7@t) ((lambda (G38a9@ls/false) (if G38a9@ls/false (apply (lambda (G38ab@p) (if (= G389c@lev '0) (G3852@quasicons* G38ab@p (G385a@vquasi G38a4@q G389c@lev)) (G3854@quasicons (G3854@quasicons (G3829@datum 'unquote) (G385c@quasi G38ab@p (- G389c@lev '1))) (G385a@vquasi G38a4@q G389c@lev)))) G38a9@ls/false) ((lambda (G38ad@t) ((lambda (G38af@ls/false) (if G38af@ls/false (apply (lambda (G38b1@p) (if (= G389c@lev '0) (G3856@quasiappend G38b1@p (G385a@vquasi G38a4@q G389c@lev)) (G3854@quasicons (G3854@quasicons (G3829@datum 'unquote-splicing) (G385c@quasi G38b1@p (- G389c@lev '1))) (G385a@vquasi G38a4@q G389c@lev)))) G38af@ls/false) ((lambda (G38b3@t) ((lambda (G38b5@ls/false) (if G38b5@ls/false (apply (lambda (G38b7@p) (G3854@quasicons (G385c@quasi G38b7@p G389c@lev) (G385a@vquasi G38a4@q G389c@lev))) G38b5@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G38b3@t))) (G3088@syntax-dispatch G38b3@t 'any))) G38ad@t))) (G3088@syntax-dispatch G38ad@t '(#(scheme-id unquote-splicing) . each-any)))) G38a7@t))) (G3088@syntax-dispatch G38a7@t '(#(scheme-id unquote) . each-any)))) G38a3@p)) G38a1@ls/false) ((lambda (G38b9@t) ((lambda (G38bb@ls/false) (if G38bb@ls/false (apply (lambda () (list (G3016@scheme-stx 'quote) '())) G38bb@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G38b9@t))) (G3088@syntax-dispatch G38b9@t '()))) G389f@t))) (G3088@syntax-dispatch G389f@t '(any . any)))) G389b@p))) (set! G385c@quasi (lambda (G3865@p G3866@lev) ((lambda (G3869@t) ((lambda (G386b@ls/false) (if G386b@ls/false (apply (lambda (G386d@p) (if (= G3866@lev '0) G386d@p (G3854@quasicons (G3829@datum 'unquote) (G385c@quasi (list G386d@p) (- G3866@lev '1))))) G386b@ls/false) ((lambda (G386f@t) ((lambda (G3871@ls/false) (if G3871@ls/false (apply (lambda (G3873@p G3874@q) (if (= G3866@lev '0) (G3852@quasicons* G3873@p (G385c@quasi G3874@q G3866@lev)) (G3854@quasicons (G3854@quasicons (G3829@datum 'unquote) (G385c@quasi G3873@p (- G3866@lev '1))) (G385c@quasi G3874@q G3866@lev)))) G3871@ls/false) ((lambda (G3877@t) ((lambda (G3879@ls/false) (if G3879@ls/false (apply (lambda (G387b@p G387c@q) (if (= G3866@lev '0) (G3856@quasiappend G387b@p (G385c@quasi G387c@q G3866@lev)) (G3854@quasicons (G3854@quasicons (G3829@datum 'unquote-splicing) (G385c@quasi G387b@p (- G3866@lev '1))) (G385c@quasi G387c@q G3866@lev)))) G3879@ls/false) ((lambda (G387f@t) ((lambda (G3881@ls/false) (if G3881@ls/false (apply (lambda (G3883@p) (G3854@quasicons (G3829@datum 'quasiquote) (G385c@quasi (list G3883@p) (+ G3866@lev '1)))) G3881@ls/false) ((lambda (G3885@t) ((lambda (G3887@ls/false) (if G3887@ls/false (apply (lambda (G3889@p G388a@q) (G3854@quasicons (G385c@quasi G3889@p G3866@lev) (G385c@quasi G388a@q G3866@lev))) G3887@ls/false) ((lambda (G388d@t) ((lambda (G388f@ls/false) (if (if G388f@ls/false (begin '#f (apply (lambda (G3891@x) (not (G2e0d@stx? G3891@x))) G388f@ls/false)) '#f) (apply (lambda (G3893@x) (G3858@quasivector (G385a@vquasi G3893@x G3866@lev))) G388f@ls/false) ((lambda (G3895@t) ((lambda (G3897@ls/false) (if G3897@ls/false (apply (lambda (G3899@p) (list (G3016@scheme-stx 'quote) G3899@p)) G3897@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3895@t))) (G3088@syntax-dispatch G3895@t 'any))) G388d@t))) (G3088@syntax-dispatch G388d@t '#(vector each-any)))) G3885@t))) (G3088@syntax-dispatch G3885@t '(any . any)))) G387f@t))) (G3088@syntax-dispatch G387f@t '(#(scheme-id quasiquote) any)))) G3877@t))) (G3088@syntax-dispatch G3877@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G386f@t))) (G3088@syntax-dispatch G386f@t '((#(scheme-id unquote) . each-any) . any)))) G3869@t))) (G3088@syntax-dispatch G3869@t '(#(scheme-id unquote) any)))) G3865@p))) (lambda (G385d@x) ((lambda (G385f@t) ((lambda (G3861@ls/false) (if G3861@ls/false (apply (lambda (G3863@e) (G385c@quasi G3863@e '0)) G3861@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G385f@t))) (G3088@syntax-dispatch G385f@t '(_ any)))) G385d@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G3078@quasisyntax-macro ((lambda () ((lambda (G393a@quasi) (begin (set! G393a@quasi (lambda (G3952@p G3953@lev) ((lambda (G3956@t) ((lambda (G3958@ls/false) (if G3958@ls/false (apply (lambda (G395a@p) (if (= G3953@lev '0) ((lambda (G395c@g) (values (list G395c@g) (list G395a@p) G395c@g)) (gensym)) (call-with-values (lambda () (G393a@quasi G395a@p (- G3953@lev '1))) (lambda (G3961@G395e G3962@G395f G3963@G3960) ((lambda (G3967@p G3968@rhs* G3969@lhs*) (values G3969@lhs* G3968@rhs* (list 'unsyntax G3967@p))) G3963@G3960 G3962@G395f G3961@G395e))))) G3958@ls/false) ((lambda (G396d@t) ((lambda (G396f@ls/false) (if (if G396f@ls/false (begin '#f (apply (lambda () (= G3953@lev '0)) G396f@ls/false)) '#f) (apply (lambda () (G317b@syntax-violation '#f '"incorrect use of unsyntax" G3952@p)) G396f@ls/false) ((lambda (G3971@t) ((lambda (G3973@ls/false) (if G3973@ls/false (apply (lambda (G3975@p* G3976@q) (call-with-values (lambda () (G393a@quasi G3976@q G3953@lev)) (lambda (G397c@G3979 G397d@G397a G397e@G397b) ((lambda (G3982@q G3983@rhs* G3984@lhs*) (if (= G3953@lev '0) ((lambda (G3988@g*) (values (append G3988@g* G3984@lhs*) (append G3975@p* G3983@rhs*) (append G3988@g* G3982@q))) (map (lambda (G398a@x) (gensym)) G3975@p*)) (call-with-values (lambda () (G393a@quasi G3975@p* (- G3953@lev '1))) (lambda (G398f@G398c G3990@G398d G3991@G398e) ((lambda (G3995@p* G3996@rhs2* G3997@lhs2*) (values (append G3997@lhs2* G3984@lhs*) (append G3996@rhs2* G3983@rhs*) (cons (cons 'unsyntax G3995@p*) G3982@q))) G3991@G398e G3990@G398d G398f@G398c))))) G397e@G397b G397d@G397a G397c@G3979)))) G3973@ls/false) ((lambda (G399b@t) ((lambda (G399d@ls/false) (if G399d@ls/false (apply (lambda (G399f@p* G39a0@q) (call-with-values (lambda () (G393a@quasi G39a0@q G3953@lev)) (lambda (G39a6@G39a3 G39a7@G39a4 G39a8@G39a5) ((lambda (G39ac@q G39ad@rhs* G39ae@lhs*) (if (= G3953@lev '0) ((lambda (G39b2@g*) (values (append (map (lambda (G39b4@g) (cons G39b4@g '(...))) G39b2@g*) G39ae@lhs*) (append G399f@p* G39ad@rhs*) (append (apply append (map (lambda (G39b6@g) (cons G39b6@g '(...))) G39b2@g*)) G39ac@q))) (map (lambda (G39b8@x) (gensym)) G399f@p*)) (call-with-values (lambda () (G393a@quasi G399f@p* (- G3953@lev '1))) (lambda (G39bd@G39ba G39be@G39bb G39bf@G39bc) ((lambda (G39c3@p* G39c4@rhs2* G39c5@lhs2*) (values (append G39c5@lhs2* G39ae@lhs*) (append G39c4@rhs2* G39ad@rhs*) (cons (cons 'unsyntax-splicing G39c3@p*) G39ac@q))) G39bf@G39bc G39be@G39bb G39bd@G39ba))))) G39a8@G39a5 G39a7@G39a4 G39a6@G39a3)))) G399d@ls/false) ((lambda (G39c9@t) ((lambda (G39cb@ls/false) (if (if G39cb@ls/false (begin '#f (apply (lambda () (= G3953@lev '0)) G39cb@ls/false)) '#f) (apply (lambda () (G317b@syntax-violation '#f '"incorrect use of unsyntax-splicing" G3952@p)) G39cb@ls/false) ((lambda (G39cd@t) ((lambda (G39cf@ls/false) (if G39cf@ls/false (apply (lambda (G39d1@p) (call-with-values (lambda () (G393a@quasi G39d1@p (+ G3953@lev '1))) (lambda (G39d6@G39d3 G39d7@G39d4 G39d8@G39d5) ((lambda (G39dc@p G39dd@rhs* G39de@lhs*) (values G39de@lhs* G39dd@rhs* (list 'quasisyntax G39dc@p))) G39d8@G39d5 G39d7@G39d4 G39d6@G39d3)))) G39cf@ls/false) ((lambda (G39e2@t) ((lambda (G39e4@ls/false) (if G39e4@ls/false (apply (lambda (G39e6@p G39e7@q) (call-with-values (lambda () (G393a@quasi G39e6@p G3953@lev)) (lambda (G39f0@G39ea G39f1@G39eb G39f2@G39ec) (call-with-values (lambda () (G393a@quasi G39e7@q G3953@lev)) (lambda (G39f6@G39ed G39f7@G39ee G39f8@G39ef) ((lambda (G39fc@q G39fd@rhs2* G39fe@lhs2* G39ff@p G3a00@rhs* G3a01@lhs*) (values (append G39fe@lhs2* G3a01@lhs*) (append G39fd@rhs2* G3a00@rhs*) (cons G39ff@p G39fc@q))) G39f8@G39ef G39f7@G39ee G39f6@G39ed G39f2@G39ec G39f1@G39eb G39f0@G39ea)))))) G39e4@ls/false) ((lambda (G3a08@t) ((lambda (G3a0a@ls/false) (if G3a0a@ls/false (apply (lambda (G3a0c@x*) (call-with-values (lambda () (G393a@quasi G3a0c@x* G3953@lev)) (lambda (G3a11@G3a0e G3a12@G3a0f G3a13@G3a10) ((lambda (G3a17@x* G3a18@rhs* G3a19@lhs*) (values G3a19@lhs* G3a18@rhs* (list->vector G3a17@x*))) G3a13@G3a10 G3a12@G3a0f G3a11@G3a0e)))) G3a0a@ls/false) ((lambda (G3a1d@t) ((lambda (G3a1f@ls/false) (if G3a1f@ls/false (apply (lambda () (values '() '() G3952@p)) G3a1f@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3a1d@t))) (G3088@syntax-dispatch G3a1d@t '_))) G3a08@t))) (G3088@syntax-dispatch G3a08@t '#(vector each-any)))) G39e2@t))) (G3088@syntax-dispatch G39e2@t '(any . any)))) G39cd@t))) (G3088@syntax-dispatch G39cd@t '(#(scheme-id quasisyntax) any)))) G39c9@t))) (G3088@syntax-dispatch G39c9@t '#(scheme-id unsyntax-splicing)))) G399b@t))) (G3088@syntax-dispatch G399b@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3971@t))) (G3088@syntax-dispatch G3971@t '((#(scheme-id unsyntax) . each-any) . any)))) G396d@t))) (G3088@syntax-dispatch G396d@t '#(scheme-id unsyntax)))) G3956@t))) (G3088@syntax-dispatch G3956@t '(#(scheme-id unsyntax) any)))) G3952@p))) (lambda (G393b@x) ((lambda (G393d@t) ((lambda (G393f@ls/false) (if G393f@ls/false (apply (lambda (G3941@e) (call-with-values (lambda () (G393a@quasi G3941@e '0)) (lambda (G3946@G3943 G3947@G3944 G3948@G3945) ((lambda (G394c@v G394d@rhs* G394e@lhs*) (G303e@bless (list 'syntax-case (cons 'list G394d@rhs*) '() (list G394e@lhs* (list 'syntax G394c@v))))) G3948@G3945 G3947@G3944 G3946@G3943)))) G393f@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G393d@t))) (G3088@syntax-dispatch G393d@t '(_ any)))) G393b@x)))) '#f)))) (set! G307a@define-struct-macro (lambda (G3a21@stx) (G317b@syntax-violation '#f '"define-struct not supported" G3a21@stx))) (set! G307c@define-record-type-macro (lambda (G3a23@x) ((lambda (G3a26@id G3a28@get-record-name G3a2a@get-record-constructor-name G3a2c@get-record-predicate-name G3a2e@get-clause G3a30@foo-rtd-code G3a32@parent-rtd-code G3a34@parent-rcd-code G3a36@foo-rcd-code G3a38@get-protocol-code G3a3a@get-fields G3a3c@get-mutator-indices G3a3e@get-mutators G3a40@get-accessors G3a42@enumerate G3a44@do-define-record G3a46@verify-clauses) (begin (set! G3a26@id (lambda (G3c1d@ctxt . G3c1f@str*) (G317f@datum->syntax G3c1d@ctxt (string->symbol (apply string-append (map (lambda (G3c21@x) (if (symbol? G3c21@x) (symbol->string G3c21@x) (if (string? G3c21@x) G3c21@x (assertion-violation 'define-record-type '"BUG")))) G3c1f@str*)))))) (set! G3a28@get-record-name (lambda (G3c0b@spec) ((lambda (G3c0d@t) ((lambda (G3c0f@ls/false) (if G3c0f@ls/false (apply (lambda (G3c11@foo G3c12@make-foo G3c13@foo?) G3c11@foo) G3c0f@ls/false) ((lambda (G3c17@t) ((lambda (G3c19@ls/false) (if G3c19@ls/false (apply (lambda (G3c1b@foo) G3c1b@foo) G3c19@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3c17@t))) (G3088@syntax-dispatch G3c17@t 'any))) G3c0d@t))) (G3088@syntax-dispatch G3c0d@t '(any any any)))) G3c0b@spec))) (set! G3a2a@get-record-constructor-name (lambda (G3bf7@spec) ((lambda (G3bf9@t) ((lambda (G3bfb@ls/false) (if G3bfb@ls/false (apply (lambda (G3bfd@foo G3bfe@make-foo G3bff@foo?) G3bfe@make-foo) G3bfb@ls/false) ((lambda (G3c03@t) ((lambda (G3c05@ls/false) (if (if G3c05@ls/false (begin '#f (apply (lambda (G3c07@foo) (G2e45@id? G3c07@foo)) G3c05@ls/false)) '#f) (apply (lambda (G3c09@foo) (G3a26@id G3c09@foo '"make-" (G2e5b@stx->datum G3c09@foo))) G3c05@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3c03@t))) (G3088@syntax-dispatch G3c03@t 'any))) G3bf9@t))) (G3088@syntax-dispatch G3bf9@t '(any any any)))) G3bf7@spec))) (set! G3a2c@get-record-predicate-name (lambda (G3be3@spec) ((lambda (G3be5@t) ((lambda (G3be7@ls/false) (if G3be7@ls/false (apply (lambda (G3be9@foo G3bea@make-foo G3beb@foo?) G3beb@foo?) G3be7@ls/false) ((lambda (G3bef@t) ((lambda (G3bf1@ls/false) (if (if G3bf1@ls/false (begin '#f (apply (lambda (G3bf3@foo) (G2e45@id? G3bf3@foo)) G3bf1@ls/false)) '#f) (apply (lambda (G3bf5@foo) (G3a26@id G3bf5@foo (G2e5b@stx->datum G3bf5@foo) '"?")) G3bf1@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3bef@t))) (G3088@syntax-dispatch G3bef@t 'any))) G3be5@t))) (G3088@syntax-dispatch G3be5@t '(any any any)))) G3be3@spec))) (set! G3a2e@get-clause (lambda (G3bd1@id G3bd2@ls) ((lambda (G3bd5@t) ((lambda (G3bd7@ls/false) (if G3bd7@ls/false (apply (lambda () '#f) G3bd7@ls/false) ((lambda (G3bd9@t) ((lambda (G3bdb@ls/false) (if G3bdb@ls/false (apply (lambda (G3bdd@x G3bde@rest G3bdf@ls) (if (G2e4d@free-id=? (G303e@bless G3bd1@id) G3bdd@x) (cons G3bdd@x G3bde@rest) (G3a2e@get-clause G3bd1@id G3bdf@ls))) G3bdb@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3bd9@t))) (G3088@syntax-dispatch G3bd9@t '((any . any) . any)))) G3bd5@t))) (G3088@syntax-dispatch G3bd5@t '()))) G3bd2@ls))) (set! G3a30@foo-rtd-code (lambda (G3b7f@name G3b80@clause* G3b81@parent-rtd-code) ((lambda (G3b86@convert-field-spec*) (begin (set! G3b86@convert-field-spec* (lambda (G3bb7@ls) (list->vector (map (lambda (G3bb9@x) ((lambda (G3bbb@t) ((lambda (G3bbd@ls/false) (if G3bbd@ls/false (apply (lambda (G3bbf@name G3bc0@rest) (list 'mutable G3bbf@name)) G3bbd@ls/false) ((lambda (G3bc3@t) ((lambda (G3bc5@ls/false) (if G3bc5@ls/false (apply (lambda (G3bc7@name G3bc8@rest) (list 'immutable G3bc7@name)) G3bc5@ls/false) ((lambda (G3bcb@t) ((lambda (G3bcd@ls/false) (if G3bcd@ls/false (apply (lambda (G3bcf@name) (list 'immutable G3bcf@name)) G3bcd@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3bcb@t))) (G3088@syntax-dispatch G3bcb@t 'any))) G3bc3@t))) (G3088@syntax-dispatch G3bc3@t '(#(scheme-id immutable) any . any)))) G3bbb@t))) (G3088@syntax-dispatch G3bbb@t '(#(scheme-id mutable) any . any)))) G3bb9@x)) G3bb7@ls)))) ((lambda (G3b87@uid-code G3b88@sealed? G3b89@opaque? G3b8a@fields) (G303e@bless (list 'make-record-type-descriptor (list 'quote G3b7f@name) G3b81@parent-rtd-code G3b87@uid-code G3b88@sealed? G3b89@opaque? G3b8a@fields))) ((lambda (G3b8f@t) ((lambda (G3b91@ls/false) (if G3b91@ls/false (apply (lambda () (list 'quote (gensym))) G3b91@ls/false) ((lambda (G3b93@t) ((lambda (G3b95@ls/false) (if G3b95@ls/false (apply (lambda (G3b97@uid) (list 'quote G3b97@uid)) G3b95@ls/false) ((lambda (G3b99@t) ((lambda (G3b9b@ls/false) (if G3b9b@ls/false (apply (lambda () '#f) G3b9b@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3b99@t))) (G3088@syntax-dispatch G3b99@t '_))) G3b93@t))) (G3088@syntax-dispatch G3b93@t '(_ any)))) G3b8f@t))) (G3088@syntax-dispatch G3b8f@t '(_)))) (G3a2e@get-clause 'nongenerative G3b80@clause*)) ((lambda (G3b9d@t) ((lambda (G3b9f@ls/false) (if G3b9f@ls/false (apply (lambda () '#t) G3b9f@ls/false) ((lambda (G3ba1@t) ((lambda (G3ba3@ls/false) (if G3ba3@ls/false (apply (lambda () '#f) G3ba3@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3ba1@t))) (G3088@syntax-dispatch G3ba1@t '_))) G3b9d@t))) (G3088@syntax-dispatch G3b9d@t '(_ #(atom #t))))) (G3a2e@get-clause 'sealed G3b80@clause*)) ((lambda (G3ba5@t) ((lambda (G3ba7@ls/false) (if G3ba7@ls/false (apply (lambda () '#t) G3ba7@ls/false) ((lambda (G3ba9@t) ((lambda (G3bab@ls/false) (if G3bab@ls/false (apply (lambda () '#f) G3bab@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3ba9@t))) (G3088@syntax-dispatch G3ba9@t '_))) G3ba5@t))) (G3088@syntax-dispatch G3ba5@t '(_ #(atom #t))))) (G3a2e@get-clause 'opaque G3b80@clause*)) ((lambda (G3bad@t) ((lambda (G3baf@ls/false) (if G3baf@ls/false (apply (lambda (G3bb1@field-spec*) (list 'quote (G3b86@convert-field-spec* G3bb1@field-spec*))) G3baf@ls/false) ((lambda (G3bb3@t) ((lambda (G3bb5@ls/false) (if G3bb5@ls/false (apply (lambda () ''#()) G3bb5@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3bb3@t))) (G3088@syntax-dispatch G3bb3@t '_))) G3bad@t))) (G3088@syntax-dispatch G3bad@t '(_ . each-any)))) (G3a2e@get-clause 'fields G3b80@clause*))))) '#f))) (set! G3a32@parent-rtd-code (lambda (G3b67@clause*) ((lambda (G3b69@t) ((lambda (G3b6b@ls/false) (if G3b6b@ls/false (apply (lambda (G3b6d@name) (list 'record-type-descriptor G3b6d@name)) G3b6b@ls/false) ((lambda (G3b6f@t) ((lambda (G3b71@ls/false) (if G3b71@ls/false (apply (lambda () ((lambda (G3b73@t) ((lambda (G3b75@ls/false) (if G3b75@ls/false (apply (lambda (G3b77@rtd G3b78@rcd) G3b77@rtd) G3b75@ls/false) ((lambda (G3b7b@t) ((lambda (G3b7d@ls/false) (if G3b7d@ls/false (apply (lambda () '#f) G3b7d@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3b7b@t))) (G3088@syntax-dispatch G3b7b@t '#(atom #f)))) G3b73@t))) (G3088@syntax-dispatch G3b73@t '(_ any any)))) (G3a2e@get-clause 'parent-rtd G3b67@clause*))) G3b71@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3b6f@t))) (G3088@syntax-dispatch G3b6f@t '#(atom #f)))) G3b69@t))) (G3088@syntax-dispatch G3b69@t '(_ any)))) (G3a2e@get-clause 'parent G3b67@clause*)))) (set! G3a34@parent-rcd-code (lambda (G3b4f@clause*) ((lambda (G3b51@t) ((lambda (G3b53@ls/false) (if G3b53@ls/false (apply (lambda (G3b55@name) (list 'record-constructor-descriptor G3b55@name)) G3b53@ls/false) ((lambda (G3b57@t) ((lambda (G3b59@ls/false) (if G3b59@ls/false (apply (lambda () ((lambda (G3b5b@t) ((lambda (G3b5d@ls/false) (if G3b5d@ls/false (apply (lambda (G3b5f@rtd G3b60@rcd) G3b60@rcd) G3b5d@ls/false) ((lambda (G3b63@t) ((lambda (G3b65@ls/false) (if G3b65@ls/false (apply (lambda () '#f) G3b65@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3b63@t))) (G3088@syntax-dispatch G3b63@t '#(atom #f)))) G3b5b@t))) (G3088@syntax-dispatch G3b5b@t '(_ any any)))) (G3a2e@get-clause 'parent-rtd G3b4f@clause*))) G3b59@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3b57@t))) (G3088@syntax-dispatch G3b57@t '#(atom #f)))) G3b51@t))) (G3088@syntax-dispatch G3b51@t '(_ any)))) (G3a2e@get-clause 'parent G3b4f@clause*)))) (set! G3a36@foo-rcd-code (lambda (G3b47@clause* G3b48@foo-rtd G3b49@protocol G3b4a@parent-rcd-code) (list 'make-record-constructor-descriptor G3b48@foo-rtd G3b4a@parent-rcd-code G3b49@protocol))) (set! G3a38@get-protocol-code (lambda (G3b3b@clause*) ((lambda (G3b3d@t) ((lambda (G3b3f@ls/false) (if G3b3f@ls/false (apply (lambda (G3b41@expr) G3b41@expr) G3b3f@ls/false) ((lambda (G3b43@t) ((lambda (G3b45@ls/false) (if G3b45@ls/false (apply (lambda () '#f) G3b45@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3b43@t))) (G3088@syntax-dispatch G3b43@t '_))) G3b3d@t))) (G3088@syntax-dispatch G3b3d@t '(_ any)))) (G3a2e@get-clause 'protocol G3b3b@clause*)))) (set! G3a3a@get-fields (lambda (G3b29@clause*) ((lambda (G3b2b@t) ((lambda (G3b2d@ls/false) (if G3b2d@ls/false (apply (lambda () '()) G3b2d@ls/false) ((lambda (G3b2f@t) ((lambda (G3b31@ls/false) (if G3b31@ls/false (apply (lambda (G3b33@f*) G3b33@f*) G3b31@ls/false) ((lambda (G3b35@t) ((lambda (G3b37@ls/false) (if G3b37@ls/false (apply (lambda (G3b39@rest) (G3a3a@get-fields G3b39@rest)) G3b37@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3b35@t))) (G3088@syntax-dispatch G3b35@t '(_ . any)))) G3b2f@t))) (G3088@syntax-dispatch G3b2f@t '((#(scheme-id fields) . each-any) . _)))) G3b2b@t))) (G3088@syntax-dispatch G3b2b@t '()))) G3b29@clause*))) (set! G3a3c@get-mutator-indices (lambda (G3b11@fields) ((letrec ((G3b13@f (lambda (G3b15@fields G3b16@i) ((lambda (G3b19@t) ((lambda (G3b1b@ls/false) (if G3b1b@ls/false (apply (lambda () '()) G3b1b@ls/false) ((lambda (G3b1d@t) ((lambda (G3b1f@ls/false) (if G3b1f@ls/false (apply (lambda (G3b21@rest) (cons G3b16@i (G3b13@f G3b21@rest (+ G3b16@i '1)))) G3b1f@ls/false) ((lambda (G3b23@t) ((lambda (G3b25@ls/false) (if G3b25@ls/false (apply (lambda (G3b27@rest) (G3b13@f G3b27@rest (+ G3b16@i '1))) G3b25@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3b23@t))) (G3088@syntax-dispatch G3b23@t '(_ . any)))) G3b1d@t))) (G3088@syntax-dispatch G3b1d@t '((#(scheme-id mutable) . _) . any)))) G3b19@t))) (G3088@syntax-dispatch G3b19@t '()))) G3b15@fields)))) G3b13@f) G3b11@fields '0))) (set! G3a3e@get-mutators (lambda (G3ae7@foo G3ae8@fields) ((lambda (G3aec@gen-name) (begin (set! G3aec@gen-name (lambda (G3b0f@x) (G317f@datum->syntax G3ae7@foo (string->symbol (string-append (symbol->string (G3181@syntax->datum G3ae7@foo)) '"-" (symbol->string (G3181@syntax->datum G3b0f@x)) '"-set!"))))) ((letrec ((G3aed@f (lambda (G3aef@fields) ((lambda (G3af1@t) ((lambda (G3af3@ls/false) (if G3af3@ls/false (apply (lambda () '()) G3af3@ls/false) ((lambda (G3af5@t) ((lambda (G3af7@ls/false) (if G3af7@ls/false (apply (lambda (G3af9@name G3afa@accessor G3afb@mutator G3afc@rest) (cons G3afb@mutator (G3aed@f G3afc@rest))) G3af7@ls/false) ((lambda (G3b01@t) ((lambda (G3b03@ls/false) (if G3b03@ls/false (apply (lambda (G3b05@name G3b06@rest) (cons (G3aec@gen-name G3b05@name) (G3aed@f G3b06@rest))) G3b03@ls/false) ((lambda (G3b09@t) ((lambda (G3b0b@ls/false) (if G3b0b@ls/false (apply (lambda (G3b0d@rest) (G3aed@f G3b0d@rest)) G3b0b@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3b09@t))) (G3088@syntax-dispatch G3b09@t '(_ . any)))) G3b01@t))) (G3088@syntax-dispatch G3b01@t '((#(scheme-id mutable) any) . any)))) G3af5@t))) (G3088@syntax-dispatch G3af5@t '((#(scheme-id mutable) any any any) . any)))) G3af1@t))) (G3088@syntax-dispatch G3af1@t '()))) G3aef@fields)))) G3aed@f) G3ae8@fields))) '#f))) (set! G3a40@get-accessors (lambda (G3aa3@foo G3aa4@fields) ((lambda (G3aa8@gen-name) (begin (set! G3aa8@gen-name (lambda (G3ae5@x) (G317f@datum->syntax G3aa3@foo (string->symbol (string-append (symbol->string (G3181@syntax->datum G3aa3@foo)) '"-" (symbol->string (G3181@syntax->datum G3ae5@x))))))) (map (lambda (G3aa9@field) ((lambda (G3aab@t) ((lambda (G3aad@ls/false) (if (if G3aad@ls/false (begin '#f (apply (lambda (G3aaf@name G3ab0@accessor G3ab1@mutator) (G2e45@id? G3ab0@accessor)) G3aad@ls/false)) '#f) (apply (lambda (G3ab5@name G3ab6@accessor G3ab7@mutator) G3ab6@accessor) G3aad@ls/false) ((lambda (G3abb@t) ((lambda (G3abd@ls/false) (if (if G3abd@ls/false (begin '#f (apply (lambda (G3abf@name G3ac0@accessor) (G2e45@id? G3ac0@accessor)) G3abd@ls/false)) '#f) (apply (lambda (G3ac3@name G3ac4@accessor) G3ac4@accessor) G3abd@ls/false) ((lambda (G3ac7@t) ((lambda (G3ac9@ls/false) (if (if G3ac9@ls/false (begin '#f (apply (lambda (G3acb@name) (G2e45@id? G3acb@name)) G3ac9@ls/false)) '#f) (apply (lambda (G3acd@name) (G3aa8@gen-name G3acd@name)) G3ac9@ls/false) ((lambda (G3acf@t) ((lambda (G3ad1@ls/false) (if (if G3ad1@ls/false (begin '#f (apply (lambda (G3ad3@name) (G2e45@id? G3ad3@name)) G3ad1@ls/false)) '#f) (apply (lambda (G3ad5@name) (G3aa8@gen-name G3ad5@name)) G3ad1@ls/false) ((lambda (G3ad7@t) ((lambda (G3ad9@ls/false) (if (if G3ad9@ls/false (begin '#f (apply (lambda (G3adb@name) (G2e45@id? G3adb@name)) G3ad9@ls/false)) '#f) (apply (lambda (G3add@name) (G3aa8@gen-name G3add@name)) G3ad9@ls/false) ((lambda (G3adf@t) ((lambda (G3ae1@ls/false) (if G3ae1@ls/false (apply (lambda (G3ae3@others) (G317b@syntax-violation '#f '"invalid field spec" G3aa9@field)) G3ae1@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3adf@t))) (G3088@syntax-dispatch G3adf@t 'any))) G3ad7@t))) (G3088@syntax-dispatch G3ad7@t 'any))) G3acf@t))) (G3088@syntax-dispatch G3acf@t '(#(scheme-id immutable) any)))) G3ac7@t))) (G3088@syntax-dispatch G3ac7@t '(#(scheme-id mutable) any)))) G3abb@t))) (G3088@syntax-dispatch G3abb@t '(#(scheme-id immutable) any any)))) G3aab@t))) (G3088@syntax-dispatch G3aab@t '(#(scheme-id mutable) any any any)))) G3aa9@field)) G3aa4@fields))) '#f))) (set! G3a42@enumerate (lambda (G3a9b@ls) ((letrec ((G3a9d@f (lambda (G3a9f@ls G3aa0@i) (if (null? G3a9f@ls) '() (cons G3aa0@i (G3a9d@f (cdr G3a9f@ls) (+ G3aa0@i '1))))))) G3a9d@f) G3a9b@ls '0))) (set! G3a44@do-define-record (lambda (G3a73@namespec G3a74@clause*) ((lambda (G3a77@foo) ((lambda (G3a79@foo-rtd) ((lambda (G3a7b@foo-rcd) ((lambda (G3a7d@protocol) ((lambda (G3a7f@make-foo) ((lambda (G3a81@fields) ((lambda (G3a83@idx*) ((lambda (G3a85@foo-x*) ((lambda (G3a87@set-foo-x!*) ((lambda (G3a89@set-foo-idx*) ((lambda (G3a8b@foo?) ((lambda (G3a8d@foo-rtd-code) ((lambda (G3a8f@foo-rcd-code) ((lambda (G3a91@protocol-code) ((lambda () (G303e@bless (cons 'begin (cons (list 'define G3a79@foo-rtd G3a8d@foo-rtd-code) (cons (list 'define G3a7d@protocol G3a91@protocol-code) (cons (list 'define G3a7b@foo-rcd G3a8f@foo-rcd-code) (cons (list 'define-syntax G3a77@foo (list 'list ''$rtd (list 'syntax G3a79@foo-rtd) (list 'syntax G3a7b@foo-rcd))) (cons (list 'define G3a8b@foo? (list 'record-predicate G3a79@foo-rtd)) (cons (list 'define G3a7f@make-foo (list 'record-constructor G3a7b@foo-rcd)) (append (map (lambda (G3a93@foo-x G3a94@idx) (list 'define G3a93@foo-x (list 'record-accessor G3a79@foo-rtd G3a94@idx))) G3a85@foo-x* G3a83@idx*) (map (lambda (G3a97@set-foo-x! G3a98@idx) (list 'define G3a97@set-foo-x! (list 'record-mutator G3a79@foo-rtd G3a98@idx))) G3a87@set-foo-x!* G3a89@set-foo-idx*))))))))))))) (G3a38@get-protocol-code G3a74@clause*))) (G3a36@foo-rcd-code G3a74@clause* G3a79@foo-rtd G3a7d@protocol (G3a34@parent-rcd-code G3a74@clause*)))) (G3a30@foo-rtd-code G3a77@foo G3a74@clause* (G3a32@parent-rtd-code G3a74@clause*)))) (G3a2c@get-record-predicate-name G3a73@namespec))) (G3a3c@get-mutator-indices G3a81@fields))) (G3a3e@get-mutators G3a77@foo G3a81@fields))) (G3a40@get-accessors G3a77@foo G3a81@fields))) (G3a42@enumerate G3a81@fields))) (G3a3a@get-fields G3a74@clause*))) (G3a2a@get-record-constructor-name G3a73@namespec))) (gensym))) (gensym))) (gensym))) (G3a28@get-record-name G3a73@namespec)))) (set! G3a46@verify-clauses (lambda (G3a4f@x G3a50@cls*) ((lambda (G3a54@valid-kwds G3a56@free-id-member?) (begin (set! G3a54@valid-kwds (map G303e@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3a56@free-id-member? (lambda (G3a6d@x G3a6e@ls) (if (pair? G3a6e@ls) (begin '#f ((lambda (G3a71@t) (if G3a71@t G3a71@t (begin '#f (G3a56@free-id-member? G3a6d@x (cdr G3a6e@ls))))) (G2e4d@free-id=? G3a6d@x (car G3a6e@ls)))) '#f))) ((letrec ((G3a57@f (lambda (G3a59@cls* G3a5a@seen*) (if (not (null? G3a59@cls*)) ((lambda (G3a5d@t) ((lambda (G3a5f@ls/false) (if G3a5f@ls/false (apply (lambda (G3a61@kwd G3a62@rest) (if ((lambda (G3a65@t) (if G3a65@t G3a65@t (begin '#f (not (G3a56@free-id-member? G3a61@kwd G3a54@valid-kwds))))) (not (G2e45@id? G3a61@kwd))) (G317b@syntax-violation '#f '"not a valid define-record-type keyword" G3a61@kwd) (if (G2e53@bound-id-member? G3a61@kwd G3a5a@seen*) (G317b@syntax-violation '#f '"duplicate use of keyword " G3a4f@x G3a61@kwd) (G3a57@f (cdr G3a59@cls*) (cons G3a61@kwd G3a5a@seen*))))) G3a5f@ls/false) ((lambda (G3a67@t) ((lambda (G3a69@ls/false) (if G3a69@ls/false (apply (lambda (G3a6b@cls) (G317b@syntax-violation '#f '"malformed define-record-type clause" G3a6b@cls)) G3a69@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3a67@t))) (G3088@syntax-dispatch G3a67@t 'any))) G3a5d@t))) (G3088@syntax-dispatch G3a5d@t '(any . any)))) (car G3a59@cls*)) (void))))) G3a57@f) G3a50@cls* '()))) '#f '#f))) ((lambda (G3a47@t) ((lambda (G3a49@ls/false) (if G3a49@ls/false (apply (lambda (G3a4b@namespec G3a4c@clause*) (begin (G3a46@verify-clauses G3a23@x G3a4c@clause*) (G3a44@do-define-record G3a4b@namespec G3a4c@clause*))) G3a49@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3a47@t))) (G3088@syntax-dispatch G3a47@t '(_ any . each-any)))) G3a23@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G307e@define-condition-type-macro (lambda (G3c23@x) ((lambda (G3c26@mkname) (begin (set! G3c26@mkname (lambda (G3c53@name G3c54@suffix) (G317f@datum->syntax G3c53@name (string->symbol (string-append (symbol->string (G3181@syntax->datum G3c53@name)) G3c54@suffix))))) ((lambda (G3c27@t) ((lambda (G3c29@ls/false) (if (if G3c29@ls/false (begin '#f (apply (lambda (G3c2b@ctxt G3c2c@name G3c2d@super G3c2e@constructor G3c2f@predicate G3c30@field* G3c31@accessor*) (if (G2e45@id? G3c2c@name) (if (G2e45@id? G3c2d@super) (if (G2e45@id? G3c2e@constructor) (if (G2e45@id? G3c2f@predicate) (if (for-all G2e45@id? G3c30@field*) (begin '#f (for-all G2e45@id? G3c31@accessor*)) '#f) '#f) '#f) '#f) '#f)) G3c29@ls/false)) '#f) (apply (lambda (G3c39@ctxt G3c3a@name G3c3b@super G3c3c@constructor G3c3d@predicate G3c3e@field* G3c3f@accessor*) ((lambda (G3c47@aux-accessor*) (G303e@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3c3a@name G3c3c@constructor (gensym)) (cons (list 'parent G3c3b@super) (cons (cons 'fields (map (lambda (G3c49@field G3c4a@aux) (list 'immutable G3c49@field G3c4a@aux)) G3c3e@field* G3c47@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3c3d@predicate (list 'condition-predicate (list 'record-type-descriptor G3c3a@name))) (map (lambda (G3c4d@accessor G3c4e@aux) (list 'define G3c4d@accessor (list 'condition-accessor (list 'record-type-descriptor G3c3a@name) G3c4e@aux))) G3c3f@accessor* G3c47@aux-accessor*)))))) (map (lambda (G3c51@x) (gensym)) G3c3f@accessor*))) G3c29@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3c27@t))) (G3088@syntax-dispatch G3c27@t '(any any any any any . #(each (any any)))))) G3c23@x))) '#f))) (set! G3080@incorrect-usage-macro (lambda (G3c57@e) (G317b@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3c57@e))) (set! G3082@parameterize-macro (lambda (G3c59@e) ((lambda (G3c5b@t) ((lambda (G3c5d@ls/false) (if G3c5d@ls/false (apply (lambda (G3c5f@b G3c60@b*) (G303e@bless (cons 'let (cons '() (cons G3c5f@b G3c60@b*))))) G3c5d@ls/false) ((lambda (G3c63@t) ((lambda (G3c65@ls/false) (if G3c65@ls/false (apply (lambda (G3c67@olhs* G3c68@orhs* G3c69@b G3c6a@b*) ((lambda (G3c6f@lhs* G3c70@rhs*) (G303e@bless (cons (list 'lambda (append G3c6f@lhs* G3c70@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3c73@lhs G3c74@rhs) (list 'let (list (list 't (list G3c73@lhs))) (list G3c73@lhs G3c74@rhs) (cons 'set! (cons G3c74@rhs '(t))))) G3c6f@lhs* G3c70@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3c69@b G3c6a@b*))) '(swap)))))) (append G3c67@olhs* G3c68@orhs*)))) (G3167@generate-temporaries G3c67@olhs*) (G3167@generate-temporaries G3c68@orhs*))) G3c65@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3c63@t))) (G3088@syntax-dispatch G3c63@t '(_ #(each (any any)) any . each-any)))) G3c5b@t))) (G3088@syntax-dispatch G3c5b@t '(_ () any . each-any)))) G3c59@e))) (set! G3084@foreign-call-transformer (lambda (G3c77@e G3c78@r G3c79@mr) ((lambda (G3c7d@t) ((lambda (G3c7f@ls/false) (if G3c7f@ls/false (apply (lambda (G3c81@name G3c82@arg*) (cons 'foreign-call (cons (G30ac@chi-expr G3c81@name G3c78@r G3c79@mr) (G30a8@chi-expr* G3c82@arg* G3c78@r G3c79@mr)))) G3c7f@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3c7d@t))) (G3088@syntax-dispatch G3c7d@t '(_ any . each-any)))) G3c77@e))) (set! G3086@convert-pattern (lambda (G3c85@pattern G3c86@keys) ((lambda (G3c8a@cvt* G3c8c@cvt) (begin (set! G3c8a@cvt* (lambda (G3d1b@p* G3d1c@n G3d1d@ids) (if (null? G3d1b@p*) (values '() G3d1d@ids) (call-with-values (lambda () (G3c8a@cvt* (cdr G3d1b@p*) G3d1c@n G3d1d@ids)) (lambda (G3d23@G3d21 G3d24@G3d22) ((lambda (G3d27@ids G3d28@y) (call-with-values (lambda () (G3c8c@cvt (car G3d1b@p*) G3d1c@n G3d27@ids)) (lambda (G3d2d@G3d2b G3d2e@G3d2c) ((lambda (G3d31@ids G3d32@x) (values (cons G3d32@x G3d28@y) G3d31@ids)) G3d2e@G3d2c G3d2d@G3d2b)))) G3d24@G3d22 G3d23@G3d21)))))) (set! G3c8c@cvt (lambda (G3c8d@p G3c8e@n G3c8f@ids) ((lambda (G3c93@t) ((lambda (G3c95@ls/false) (if (if G3c95@ls/false (begin '#f (apply (lambda (G3c97@id) (G2e45@id? G3c97@id)) G3c95@ls/false)) '#f) (apply (lambda (G3c99@id) (if (G2e53@bound-id-member? G3c8d@p G3c86@keys) (values (vector 'free-id G3c8d@p) G3c8f@ids) (if (G2e4d@free-id=? G3c8d@p (G3016@scheme-stx '_)) (values '_ G3c8f@ids) (values 'any (cons (cons G3c8d@p G3c8e@n) G3c8f@ids))))) G3c95@ls/false) ((lambda (G3c9b@t) ((lambda (G3c9d@ls/false) (if (if G3c9d@ls/false (begin '#f (apply (lambda (G3c9f@p G3ca0@dots) (G308a@ellipsis? G3ca0@dots)) G3c9d@ls/false)) '#f) (apply (lambda (G3ca3@p G3ca4@dots) (call-with-values (lambda () (G3c8c@cvt G3ca3@p (+ G3c8e@n '1) G3c8f@ids)) (lambda (G3ca9@G3ca7 G3caa@G3ca8) ((lambda (G3cad@ids G3cae@p) (values (if (eq? G3cae@p 'any) 'each-any (vector 'each G3cae@p)) G3cad@ids)) G3caa@G3ca8 G3ca9@G3ca7)))) G3c9d@ls/false) ((lambda (G3cb1@t) ((lambda (G3cb3@ls/false) (if (if G3cb3@ls/false (begin '#f (apply (lambda (G3cb5@x G3cb6@dots G3cb7@ys G3cb8@z) (G308a@ellipsis? G3cb6@dots)) G3cb3@ls/false)) '#f) (apply (lambda (G3cbd@x G3cbe@dots G3cbf@ys G3cc0@z) (call-with-values (lambda () (G3c8c@cvt G3cc0@z G3c8e@n G3c8f@ids)) (lambda (G3cc7@G3cc5 G3cc8@G3cc6) ((lambda (G3ccb@ids G3ccc@z) (call-with-values (lambda () (G3c8a@cvt* G3cbf@ys G3c8e@n G3ccb@ids)) (lambda (G3cd1@G3ccf G3cd2@G3cd0) ((lambda (G3cd5@ids G3cd6@ys) (call-with-values (lambda () (G3c8c@cvt G3cbd@x (+ G3c8e@n '1) G3cd5@ids)) (lambda (G3cdb@G3cd9 G3cdc@G3cda) ((lambda (G3cdf@ids G3ce0@x) (values (vector 'each+ G3ce0@x (reverse G3cd6@ys) G3ccc@z) G3cdf@ids)) G3cdc@G3cda G3cdb@G3cd9)))) G3cd2@G3cd0 G3cd1@G3ccf)))) G3cc8@G3cc6 G3cc7@G3cc5)))) G3cb3@ls/false) ((lambda (G3ce3@t) ((lambda (G3ce5@ls/false) (if G3ce5@ls/false (apply (lambda (G3ce7@x G3ce8@y) (call-with-values (lambda () (G3c8c@cvt G3ce8@y G3c8e@n G3c8f@ids)) (lambda (G3ced@G3ceb G3cee@G3cec) ((lambda (G3cf1@ids G3cf2@y) (call-with-values (lambda () (G3c8c@cvt G3ce7@x G3c8e@n G3cf1@ids)) (lambda (G3cf7@G3cf5 G3cf8@G3cf6) ((lambda (G3cfb@ids G3cfc@x) (values (cons G3cfc@x G3cf2@y) G3cfb@ids)) G3cf8@G3cf6 G3cf7@G3cf5)))) G3cee@G3cec G3ced@G3ceb)))) G3ce5@ls/false) ((lambda (G3cff@t) ((lambda (G3d01@ls/false) (if G3d01@ls/false (apply (lambda () (values '() G3c8f@ids)) G3d01@ls/false) ((lambda (G3d03@t) ((lambda (G3d05@ls/false) (if (if G3d05@ls/false (begin '#f (apply (lambda (G3d07@p) (not (G2e0d@stx? G3d07@p))) G3d05@ls/false)) '#f) (apply (lambda (G3d09@p) (call-with-values (lambda () (G3c8c@cvt G3d09@p G3c8e@n G3c8f@ids)) (lambda (G3d0d@G3d0b G3d0e@G3d0c) ((lambda (G3d11@ids G3d12@p) (values (vector 'vector G3d12@p) G3d11@ids)) G3d0e@G3d0c G3d0d@G3d0b)))) G3d05@ls/false) ((lambda (G3d15@t) ((lambda (G3d17@ls/false) (if G3d17@ls/false (apply (lambda (G3d19@datum) (values (vector 'atom (G2e5b@stx->datum G3d19@datum)) G3c8f@ids)) G3d17@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3d15@t))) (G3088@syntax-dispatch G3d15@t 'any))) G3d03@t))) (G3088@syntax-dispatch G3d03@t '#(vector each-any)))) G3cff@t))) (G3088@syntax-dispatch G3cff@t '()))) G3ce3@t))) (G3088@syntax-dispatch G3ce3@t '(any . any)))) G3cb1@t))) (G3088@syntax-dispatch G3cb1@t '(any any . #(each+ any () any))))) G3c9b@t))) (G3088@syntax-dispatch G3c9b@t '(any any)))) G3c93@t))) (G3088@syntax-dispatch G3c93@t 'any))) G3c8d@p))) (G3c8c@cvt G3c85@pattern '0 '()))) '#f '#f))) (set! G3088@syntax-dispatch ((lambda () ((lambda (G3d36@stx^ G3d38@match-each G3d3a@match-each+ G3d3c@match-each-any G3d3e@match-empty G3d40@combine G3d42@match* G3d44@match) (begin (set! G3d36@stx^ (lambda (G3dff@e G3e00@m* G3e01@s* G3e02@ae*) (if (if (null? G3e00@m*) (if (null? G3e01@s*) (begin '#f (null? G3e02@ae*)) '#f) '#f) G3dff@e (G2e2d@mkstx G3dff@e G3e00@m* G3e01@s* G3e02@ae*)))) (set! G3d38@match-each (lambda (G3de2@e G3de3@p G3de4@m* G3de5@s* G3de6@ae*) (if (pair? G3de2@e) ((lambda (G3dec@first) (if G3dec@first (begin '#f ((lambda (G3dee@rest) (if G3dee@rest (begin '#f (cons G3dec@first G3dee@rest)) '#f)) (G3d38@match-each (cdr G3de2@e) G3de3@p G3de4@m* G3de5@s* G3de6@ae*))) '#f)) (G3d44@match (car G3de2@e) G3de3@p G3de4@m* G3de5@s* G3de6@ae* '())) (if (null? G3de2@e) '() (if (G2e0d@stx? G3de2@e) (if (not (G2dbb@top-marked? G3de4@m*)) (begin '#f (call-with-values (lambda () (G2e2b@join-wraps G3de4@m* G3de5@s* G3de6@ae* G3de2@e)) (lambda (G3df3@G3df0 G3df4@G3df1 G3df5@G3df2) ((lambda (G3df9@ae* G3dfa@s* G3dfb@m*) (G3d38@match-each (G2e11@stx-expr G3de2@e) G3de3@p G3dfb@m* G3dfa@s* G3df9@ae*)) G3df5@G3df2 G3df4@G3df1 G3df3@G3df0)))) '#f) (if (G298c@G288c@annotation? G3de2@e) (G3d38@match-each (G298e@G2890@annotation-expression G3de2@e) G3de3@p G3de4@m* G3de5@s* G3de6@ae*) '#f)))))) (set! G3d3a@match-each+ (lambda (G3da8@e G3da9@x-pat G3daa@y-pat G3dab@z-pat G3dac@m* G3dad@s* G3dae@ae* G3daf@r) ((letrec ((G3db8@f (lambda (G3dba@e G3dbb@m* G3dbc@s* G3dbd@ae*) (if (pair? G3dba@e) (call-with-values (lambda () (G3db8@f (cdr G3dba@e) G3dbb@m* G3dbc@s* G3dbd@ae*)) (lambda (G3dc5@G3dc2 G3dc6@G3dc3 G3dc7@G3dc4) ((lambda (G3dcb@r G3dcc@y-pat G3dcd@xr*) (if G3dcb@r (if (null? G3dcc@y-pat) ((lambda (G3dd1@xr) (if G3dd1@xr (values (cons G3dd1@xr G3dcd@xr*) G3dcc@y-pat G3dcb@r) (values '#f '#f '#f))) (G3d44@match (car G3dba@e) G3da9@x-pat G3dbb@m* G3dbc@s* G3dbd@ae* '())) (values '() (cdr G3dcc@y-pat) (G3d44@match (car G3dba@e) (car G3dcc@y-pat) G3dbb@m* G3dbc@s* G3dbd@ae* G3dcb@r))) (values '#f '#f '#f))) G3dc7@G3dc4 G3dc6@G3dc3 G3dc5@G3dc2))) (if (G2e0d@stx? G3dba@e) (if (G2dbb@top-marked? G3dbb@m*) (values '() G3daa@y-pat (G3d44@match G3dba@e G3dab@z-pat G3dbb@m* G3dbc@s* G3dbd@ae* G3daf@r)) (call-with-values (lambda () (G2e2b@join-wraps G3dbb@m* G3dbc@s* G3dbd@ae* G3dba@e)) (lambda (G3dd6@G3dd3 G3dd7@G3dd4 G3dd8@G3dd5) ((lambda (G3ddc@ae* G3ddd@s* G3dde@m*) (G3db8@f (G2e11@stx-expr G3dba@e) G3dde@m* G3ddd@s* G3ddc@ae*)) G3dd8@G3dd5 G3dd7@G3dd4 G3dd6@G3dd3)))) (if (G298c@G288c@annotation? G3dba@e) (G3db8@f (G298e@G2890@annotation-expression G3dba@e) G3dbb@m* G3dbc@s* G3dbd@ae*) (values '() G3daa@y-pat (G3d44@match G3dba@e G3dab@z-pat G3dbb@m* G3dbc@s* G3dbd@ae* G3daf@r)))))))) G3db8@f) G3da8@e G3dac@m* G3dad@s* G3dae@ae*))) (set! G3d3c@match-each-any (lambda (G3d8f@e G3d90@m* G3d91@s* G3d92@ae*) (if (pair? G3d8f@e) ((lambda (G3d97@l) (if G3d97@l (begin '#f (cons (G3d36@stx^ (car G3d8f@e) G3d90@m* G3d91@s* G3d92@ae*) G3d97@l)) '#f)) (G3d3c@match-each-any (cdr G3d8f@e) G3d90@m* G3d91@s* G3d92@ae*)) (if (null? G3d8f@e) '() (if (G2e0d@stx? G3d8f@e) (if (not (G2dbb@top-marked? G3d90@m*)) (begin '#f (call-with-values (lambda () (G2e2b@join-wraps G3d90@m* G3d91@s* G3d92@ae* G3d8f@e)) (lambda (G3d9c@G3d99 G3d9d@G3d9a G3d9e@G3d9b) ((lambda (G3da2@ae* G3da3@s* G3da4@m*) (G3d3c@match-each-any (G2e11@stx-expr G3d8f@e) G3da4@m* G3da3@s* G3da2@ae*)) G3d9e@G3d9b G3d9d@G3d9a G3d9c@G3d99)))) '#f) (if (G298c@G288c@annotation? G3d8f@e) (G3d3c@match-each-any (G298e@G2890@annotation-expression G3d8f@e) G3d90@m* G3d91@s* G3d92@ae*) '#f)))))) (set! G3d3e@match-empty (lambda (G3d89@p G3d8a@r) (if (null? G3d89@p) G3d8a@r (if (eq? G3d89@p '_) G3d8a@r (if (eq? G3d89@p 'any) (cons '() G3d8a@r) (if (pair? G3d89@p) (G3d3e@match-empty (car G3d89@p) (G3d3e@match-empty (cdr G3d89@p) G3d8a@r)) (if (eq? G3d89@p 'each-any) (cons '() G3d8a@r) ((lambda (G3d8d@t) (if (memv G3d8d@t '(each)) (G3d3e@match-empty (vector-ref G3d89@p '1) G3d8a@r) (if (memv G3d8d@t '(each+)) (G3d3e@match-empty (vector-ref G3d89@p '1) (G3d3e@match-empty (reverse (vector-ref G3d89@p '2)) (G3d3e@match-empty (vector-ref G3d89@p '3) G3d8a@r))) (if (memv G3d8d@t '(free-id atom)) G3d8a@r (if (memv G3d8d@t '(scheme-id atom)) G3d8a@r (if (memv G3d8d@t '(vector)) (G3d3e@match-empty (vector-ref G3d89@p '1) G3d8a@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d89@p))))))) (vector-ref G3d89@p '0))))))))) (set! G3d40@combine (lambda (G3d85@r* G3d86@r) (if (null? (car G3d85@r*)) G3d86@r (cons (map car G3d85@r*) (G3d40@combine (map cdr G3d85@r*) G3d86@r))))) (set! G3d42@match* (lambda (G3d64@e G3d65@p G3d66@m* G3d67@s* G3d68@ae* G3d69@r) (if (null? G3d65@p) (if (null? G3d64@e) (begin '#f G3d69@r) '#f) (if (pair? G3d65@p) (if (pair? G3d64@e) (begin '#f (G3d44@match (car G3d64@e) (car G3d65@p) G3d66@m* G3d67@s* G3d68@ae* (G3d44@match (cdr G3d64@e) (cdr G3d65@p) G3d66@m* G3d67@s* G3d68@ae* G3d69@r))) '#f) (if (eq? G3d65@p 'each-any) ((lambda (G3d70@l) (if G3d70@l (begin '#f (cons G3d70@l G3d69@r)) '#f)) (G3d3c@match-each-any G3d64@e G3d66@m* G3d67@s* G3d68@ae*)) ((lambda (G3d72@t) (if (memv G3d72@t '(each)) (if (null? G3d64@e) (G3d3e@match-empty (vector-ref G3d65@p '1) G3d69@r) ((lambda (G3d74@r*) (if G3d74@r* (begin '#f (G3d40@combine G3d74@r* G3d69@r)) '#f)) (G3d38@match-each G3d64@e (vector-ref G3d65@p '1) G3d66@m* G3d67@s* G3d68@ae*))) (if (memv G3d72@t '(free-id)) (if (symbol? G3d64@e) (if (G2dbb@top-marked? G3d66@m*) (if (G2e4d@free-id=? (G3d36@stx^ G3d64@e G3d66@m* G3d67@s* G3d68@ae*) (vector-ref G3d65@p '1)) (begin '#f G3d69@r) '#f) '#f) '#f) (if (memv G3d72@t '(scheme-id)) (if (symbol? G3d64@e) (if (G2dbb@top-marked? G3d66@m*) (if (G2e4d@free-id=? (G3d36@stx^ G3d64@e G3d66@m* G3d67@s* G3d68@ae*) (G3016@scheme-stx (vector-ref G3d65@p '1))) (begin '#f G3d69@r) '#f) '#f) '#f) (if (memv G3d72@t '(each+)) (call-with-values (lambda () (G3d3a@match-each+ G3d64@e (vector-ref G3d65@p '1) (vector-ref G3d65@p '2) (vector-ref G3d65@p '3) G3d66@m* G3d67@s* G3d68@ae* G3d69@r)) (lambda (G3d79@G3d76 G3d7a@G3d77 G3d7b@G3d78) ((lambda (G3d7f@r G3d80@y-pat G3d81@xr*) (if G3d7f@r (if (null? G3d80@y-pat) (begin '#f (if (null? G3d81@xr*) (G3d3e@match-empty (vector-ref G3d65@p '1) G3d7f@r) (G3d40@combine G3d81@xr* G3d7f@r))) '#f) '#f)) G3d7b@G3d78 G3d7a@G3d77 G3d79@G3d76))) (if (memv G3d72@t '(atom)) (if (equal? (vector-ref G3d65@p '1) (G2e59@strip G3d64@e G3d66@m*)) (begin '#f G3d69@r) '#f) (if (memv G3d72@t '(vector)) (if (vector? G3d64@e) (begin '#f (G3d44@match (vector->list G3d64@e) (vector-ref G3d65@p '1) G3d66@m* G3d67@s* G3d68@ae* G3d69@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d65@p)))))))) (vector-ref G3d65@p '0))))))) (set! G3d44@match (lambda (G3d49@e G3d4a@p G3d4b@m* G3d4c@s* G3d4d@ae* G3d4e@r) (if (not G3d4e@r) '#f (if (eq? G3d4a@p '_) G3d4e@r (if (eq? G3d4a@p 'any) (cons (G3d36@stx^ G3d49@e G3d4b@m* G3d4c@s* G3d4d@ae*) G3d4e@r) (if (G2e0d@stx? G3d49@e) (if (not (G2dbb@top-marked? G3d4b@m*)) (begin '#f (call-with-values (lambda () (G2e2b@join-wraps G3d4b@m* G3d4c@s* G3d4d@ae* G3d49@e)) (lambda (G3d58@G3d55 G3d59@G3d56 G3d5a@G3d57) ((lambda (G3d5e@ae* G3d5f@s* G3d60@m*) (G3d44@match (G2e11@stx-expr G3d49@e) G3d4a@p G3d60@m* G3d5f@s* G3d5e@ae* G3d4e@r)) G3d5a@G3d57 G3d59@G3d56 G3d58@G3d55)))) '#f) (if (G298c@G288c@annotation? G3d49@e) (G3d44@match (G298e@G2890@annotation-expression G3d49@e) G3d4a@p G3d4b@m* G3d4c@s* G3d4d@ae* G3d4e@r) (G3d42@match* G3d49@e G3d4a@p G3d4b@m* G3d4c@s* G3d4d@ae* G3d4e@r)))))))) (lambda (G3d45@e G3d46@p) (G3d44@match G3d45@e G3d46@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G308a@ellipsis? (lambda (G3e07@x) (if (G2e45@id? G3e07@x) (begin '#f (G2e4d@free-id=? G3e07@x (G3016@scheme-stx '...))) '#f))) (set! G308c@underscore? (lambda (G3e09@x) (if (G2e45@id? G3e09@x) (begin '#f (G2e4d@free-id=? G3e09@x (G3016@scheme-stx '_))) '#f))) (set! G308e@verify-literals (lambda (G3e0b@lits G3e0c@expr) (for-each (lambda (G3e0f@x) (if ((lambda (G3e11@t) (if G3e11@t G3e11@t ((lambda (G3e13@t) (if G3e13@t G3e13@t (begin '#f (G308c@underscore? G3e0f@x)))) (G308a@ellipsis? G3e0f@x)))) (not (G2e45@id? G3e0f@x))) (G317b@syntax-violation '#f '"invalid literal" G3e0c@expr G3e0f@x) (void))) G3e0b@lits))) (set! G3090@syntax-case-transformer ((lambda () ((lambda (G3e16@build-dispatch-call G3e18@invalid-ids-error G3e1a@gen-clause G3e1c@gen-syntax-case) (begin (set! G3e16@build-dispatch-call (lambda (G3e85@pvars G3e86@expr G3e87@y G3e88@r G3e89@mr) ((lambda (G3e8f@ids G3e90@levels) ((lambda (G3e93@labels G3e94@new-vars) ((lambda (G3e97@body) (list '(primitive apply) (G2d9d@G2cc5@build-lambda '#f G3e94@new-vars G3e97@body) G3e87@y)) (G30ac@chi-expr (G2e31@add-subst (G2dfe@make-full-rib G3e8f@ids G3e93@labels) G3e86@expr) (append (map (lambda (G3e99@label G3e9a@var G3e9b@level) (cons G3e99@label (G2e65@make-binding 'syntax (cons G3e9a@var G3e9b@level)))) G3e93@labels G3e94@new-vars (map cdr G3e85@pvars)) G3e88@r) G3e89@mr))) (map G2dc1@gen-label G3e8f@ids) (map G2dbd@gen-lexical G3e8f@ids))) (map car G3e85@pvars) (map cdr G3e85@pvars)))) (set! G3e18@invalid-ids-error (lambda (G3e79@id* G3e7a@e G3e7b@class) ((letrec ((G3e7f@find (lambda (G3e81@id* G3e82@ok*) (if (null? G3e81@id*) (G317b@syntax-violation '#f '"invalid syntax" G3e7a@e) (if (G2e45@id? (car G3e81@id*)) (if (G2e53@bound-id-member? (car G3e81@id*) G3e82@ok*) (G3175@syntax-error (car G3e81@id*) '"duplicate " G3e7b@class) (G3e7f@find (cdr G3e81@id*) (cons (car G3e81@id*) G3e82@ok*))) (G3175@syntax-error (car G3e81@id*) '"invalid " G3e7b@class)))))) G3e7f@find) G3e79@id* '()))) (set! G3e1a@gen-clause (lambda (G3e53@x G3e54@keys G3e55@clauses G3e56@r G3e57@mr G3e58@pat G3e59@fender G3e5a@expr) (call-with-values (lambda () (G3086@convert-pattern G3e58@pat G3e54@keys)) (lambda (G3e65@G3e63 G3e66@G3e64) ((lambda (G3e69@pvars G3e6a@p) (if (not (G2e51@distinct-bound-ids? (map car G3e69@pvars))) (G3e18@invalid-ids-error (map car G3e69@pvars) G3e58@pat '"pattern variable") (if (not (for-all (lambda (G3e6d@x) (not (G308a@ellipsis? (car G3e6d@x)))) G3e69@pvars)) (G317b@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3e58@pat) ((lambda (G3e6f@y) ((lambda (G3e71@test) ((lambda (G3e73@conseq) ((lambda (G3e75@altern) (list (G2d9d@G2cc5@build-lambda '#f (list G3e6f@y) (list 'if G3e71@test G3e73@conseq G3e75@altern)) (list '(primitive syntax-dispatch) G3e53@x (list 'quote G3e6a@p)))) (G3e1c@gen-syntax-case G3e53@x G3e54@keys G3e55@clauses G3e56@r G3e57@mr))) (G3e16@build-dispatch-call G3e69@pvars G3e5a@expr G3e6f@y G3e56@r G3e57@mr))) (if (eq? G3e59@fender '#t) G3e6f@y ((lambda (G3e77@call) (list 'if G3e6f@y G3e77@call (list 'quote '#f))) (G3e16@build-dispatch-call G3e69@pvars G3e59@fender G3e6f@y G3e56@r G3e57@mr))))) (G2dbd@gen-lexical 'tmp))))) G3e66@G3e64 G3e65@G3e63))))) (set! G3e1c@gen-syntax-case (lambda (G3e31@x G3e32@keys G3e33@clauses G3e34@r G3e35@mr) (if (null? G3e33@clauses) (list '(primitive syntax-error) G3e31@x) ((lambda (G3e3b@t) ((lambda (G3e3d@ls/false) (if G3e3d@ls/false (apply (lambda (G3e3f@pat G3e40@expr) (if (if (G2e45@id? G3e3f@pat) (if (not (G2e53@bound-id-member? G3e3f@pat G3e32@keys)) (begin '#f (not (G308a@ellipsis? G3e3f@pat))) '#f) '#f) (if (G2e4d@free-id=? G3e3f@pat (G3016@scheme-stx '_)) (G30ac@chi-expr G3e40@expr G3e34@r G3e35@mr) ((lambda (G3e43@lab G3e44@lex) ((lambda (G3e47@body) (list (G2d9d@G2cc5@build-lambda '#f (list G3e44@lex) G3e47@body) G3e31@x)) (G30ac@chi-expr (G2e31@add-subst (G2dfe@make-full-rib (list G3e3f@pat) (list G3e43@lab)) G3e40@expr) (cons (cons G3e43@lab (G2e65@make-binding 'syntax (cons G3e44@lex '0))) G3e34@r) G3e35@mr))) (G2dc1@gen-label G3e3f@pat) (G2dbd@gen-lexical G3e3f@pat))) (G3e1a@gen-clause G3e31@x G3e32@keys (cdr G3e33@clauses) G3e34@r G3e35@mr G3e3f@pat '#t G3e40@expr))) G3e3d@ls/false) ((lambda (G3e49@t) ((lambda (G3e4b@ls/false) (if G3e4b@ls/false (apply (lambda (G3e4d@pat G3e4e@fender G3e4f@expr) (G3e1a@gen-clause G3e31@x G3e32@keys (cdr G3e33@clauses) G3e34@r G3e35@mr G3e4d@pat G3e4e@fender G3e4f@expr)) G3e4b@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3e49@t))) (G3088@syntax-dispatch G3e49@t '(any any any)))) G3e3b@t))) (G3088@syntax-dispatch G3e3b@t '(any any)))) (car G3e33@clauses))))) (lambda (G3e1d@e G3e1e@r G3e1f@mr) ((lambda (G3e23@t) ((lambda (G3e25@ls/false) (if G3e25@ls/false (apply (lambda (G3e27@expr G3e28@keys G3e29@clauses) (begin (G308e@verify-literals G3e28@keys G3e1d@e) ((lambda (G3e2d@x) ((lambda (G3e2f@body) (list (G2d9d@G2cc5@build-lambda '#f (list G3e2d@x) G3e2f@body) (G30ac@chi-expr G3e27@expr G3e1e@r G3e1f@mr))) (G3e1c@gen-syntax-case G3e2d@x G3e28@keys G3e29@clauses G3e1e@r G3e1f@mr))) (G2dbd@gen-lexical 'tmp)))) G3e25@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3e23@t))) (G3088@syntax-dispatch G3e23@t '(_ any each-any . each-any)))) G3e1d@e)))) '#f '#f '#f '#f)))) (set! G3092@ellipsis-map (lambda (G3e9f@proc G3ea0@ls . G3ea3@ls*) ((lambda (G3ea6@who) (begin (set! G3ea6@who '...) (begin (if (not (list? G3ea0@ls)) (assertion-violation G3ea6@who '"not a list" G3ea0@ls) (void)) (if (not (null? G3ea3@ls*)) ((lambda (G3ea7@n) (for-each (lambda (G3ea9@x) (begin (if (not (list? G3ea9@x)) (assertion-violation G3ea6@who '"not a list" G3ea9@x) (void)) (if (not (= (length G3ea9@x) G3ea7@n)) (assertion-violation G3ea6@who '"length mismatch" G3ea0@ls G3ea9@x) (void)))) G3ea3@ls*)) (length G3ea0@ls)) (void)) (apply map G3e9f@proc G3ea0@ls G3ea3@ls*)))) '#f))) (set! G3094@syntax-transformer ((lambda () ((lambda (G3eac@gen-syntax G3eae@gen-ref G3eb0@gen-append G3eb2@gen-mappend G3eb4@gen-map G3eb6@gen-cons G3eb8@gen-vector G3eba@regen) (begin (set! G3eac@gen-syntax (lambda (G3f1f@src G3f20@e G3f21@r G3f22@maps G3f23@ellipsis? G3f24@vec?) ((lambda (G3f2b@t) ((lambda (G3f2d@ls/false) (if (if G3f2d@ls/false (begin '#f (apply (lambda (G3f2f@dots) (G3f23@ellipsis? G3f2f@dots)) G3f2d@ls/false)) '#f) (apply (lambda (G3f31@dots) (G317b@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f1f@src)) G3f2d@ls/false) ((lambda (G3f33@t) ((lambda (G3f35@ls/false) (if (if G3f35@ls/false (begin '#f (apply (lambda (G3f37@id) (G2e45@id? G3f37@id)) G3f35@ls/false)) '#f) (apply (lambda (G3f39@id) ((lambda (G3f3b@label) ((lambda (G3f3d@b) ((lambda () (if (eq? (G2e67@binding-type G3f3d@b) 'syntax) (call-with-values (lambda () ((lambda (G3f41@var.lev) (G3eae@gen-ref G3f1f@src (car G3f41@var.lev) (cdr G3f41@var.lev) G3f22@maps)) (G2e69@binding-value G3f3d@b))) (lambda (G3f43@G3f3f G3f44@G3f40) ((lambda (G3f47@maps G3f48@var) (values (list 'ref G3f48@var) G3f47@maps)) G3f44@G3f40 G3f43@G3f3f))) (values (list 'quote G3f20@e) G3f22@maps))))) (G2e63@label->binding G3f3b@label G3f21@r))) (G2e5f@id->label G3f20@e))) G3f35@ls/false) ((lambda (G3f4b@t) ((lambda (G3f4d@ls/false) (if (if G3f4d@ls/false (begin '#f (apply (lambda (G3f4f@dots G3f50@e) (G3f23@ellipsis? G3f4f@dots)) G3f4d@ls/false)) '#f) (apply (lambda (G3f53@dots G3f54@e) (if G3f24@vec? (G317b@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f1f@src) (G3eac@gen-syntax G3f1f@src G3f54@e G3f21@r G3f22@maps (lambda (G3f57@x) '#f) '#f))) G3f4d@ls/false) ((lambda (G3f59@t) ((lambda (G3f5b@ls/false) (if (if G3f5b@ls/false (begin '#f (apply (lambda (G3f5d@x G3f5e@dots G3f5f@y) (G3f23@ellipsis? G3f5e@dots)) G3f5b@ls/false)) '#f) (apply (lambda (G3f63@x G3f64@dots G3f65@y) ((letrec ((G3f69@f (lambda (G3f6b@y G3f6c@k) ((lambda (G3f6f@t) ((lambda (G3f71@ls/false) (if G3f71@ls/false (apply (lambda () (G3f6c@k G3f22@maps)) G3f71@ls/false) ((lambda (G3f73@t) ((lambda (G3f75@ls/false) (if (if G3f75@ls/false (begin '#f (apply (lambda (G3f77@dots G3f78@y) (G3f23@ellipsis? G3f77@dots)) G3f75@ls/false)) '#f) (apply (lambda (G3f7b@dots G3f7c@y) (G3f69@f G3f7c@y (lambda (G3f7f@maps) (call-with-values (lambda () (G3f6c@k (cons '() G3f7f@maps))) (lambda (G3f83@G3f81 G3f84@G3f82) ((lambda (G3f87@maps G3f88@x) (if (null? (car G3f87@maps)) (G317b@syntax-violation '#f '"extra ellipsis in syntax form" G3f1f@src) (values (G3eb2@gen-mappend G3f88@x (car G3f87@maps)) (cdr G3f87@maps)))) G3f84@G3f82 G3f83@G3f81)))))) G3f75@ls/false) ((lambda (G3f8b@t) ((lambda (G3f8d@ls/false) (if G3f8d@ls/false (apply (lambda () (call-with-values (lambda () (G3eac@gen-syntax G3f1f@src G3f6b@y G3f21@r G3f22@maps G3f23@ellipsis? G3f24@vec?)) (lambda (G3f91@G3f8f G3f92@G3f90) ((lambda (G3f95@maps G3f96@y) (call-with-values (lambda () (G3f6c@k G3f95@maps)) (lambda (G3f9b@G3f99 G3f9c@G3f9a) ((lambda (G3f9f@maps G3fa0@x) (values (G3eb0@gen-append G3fa0@x G3f96@y) G3f9f@maps)) G3f9c@G3f9a G3f9b@G3f99)))) G3f92@G3f90 G3f91@G3f8f)))) G3f8d@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3f8b@t))) (G3088@syntax-dispatch G3f8b@t '_))) G3f73@t))) (G3088@syntax-dispatch G3f73@t '(any . any)))) G3f6f@t))) (G3088@syntax-dispatch G3f6f@t '()))) G3f6b@y)))) G3f69@f) G3f65@y (lambda (G3fa3@maps) (call-with-values (lambda () (G3eac@gen-syntax G3f1f@src G3f63@x G3f21@r (cons '() G3fa3@maps) G3f23@ellipsis? '#f)) (lambda (G3fa7@G3fa5 G3fa8@G3fa6) ((lambda (G3fab@maps G3fac@x) (if (null? (car G3fab@maps)) (G317b@syntax-violation '#f '"extra ellipsis in syntax form" G3f1f@src) (values (G3eb4@gen-map G3fac@x (car G3fab@maps)) (cdr G3fab@maps)))) G3fa8@G3fa6 G3fa7@G3fa5)))))) G3f5b@ls/false) ((lambda (G3faf@t) ((lambda (G3fb1@ls/false) (if G3fb1@ls/false (apply (lambda (G3fb3@x G3fb4@y) (call-with-values (lambda () (G3eac@gen-syntax G3f1f@src G3fb3@x G3f21@r G3f22@maps G3f23@ellipsis? '#f)) (lambda (G3fb9@G3fb7 G3fba@G3fb8) ((lambda (G3fbd@maps G3fbe@xnew) (call-with-values (lambda () (G3eac@gen-syntax G3f1f@src G3fb4@y G3f21@r G3fbd@maps G3f23@ellipsis? G3f24@vec?)) (lambda (G3fc3@G3fc1 G3fc4@G3fc2) ((lambda (G3fc7@maps G3fc8@ynew) (values (G3eb6@gen-cons G3f20@e G3fb3@x G3fb4@y G3fbe@xnew G3fc8@ynew) G3fc7@maps)) G3fc4@G3fc2 G3fc3@G3fc1)))) G3fba@G3fb8 G3fb9@G3fb7)))) G3fb1@ls/false) ((lambda (G3fcb@t) ((lambda (G3fcd@ls/false) (if G3fcd@ls/false (apply (lambda (G3fcf@ls) (call-with-values (lambda () (G3eac@gen-syntax G3f1f@src G3fcf@ls G3f21@r G3f22@maps G3f23@ellipsis? '#t)) (lambda (G3fd3@G3fd1 G3fd4@G3fd2) ((lambda (G3fd7@maps G3fd8@lsnew) (values (G3eb8@gen-vector G3f20@e G3fcf@ls G3fd8@lsnew) G3fd7@maps)) G3fd4@G3fd2 G3fd3@G3fd1)))) G3fcd@ls/false) ((lambda (G3fdb@t) ((lambda (G3fdd@ls/false) (if G3fdd@ls/false (apply (lambda () (values (list 'quote G3f20@e) G3f22@maps)) G3fdd@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3fdb@t))) (G3088@syntax-dispatch G3fdb@t '_))) G3fcb@t))) (G3088@syntax-dispatch G3fcb@t '#(vector each-any)))) G3faf@t))) (G3088@syntax-dispatch G3faf@t '(any . any)))) G3f59@t))) (G3088@syntax-dispatch G3f59@t '(any any . any)))) G3f4b@t))) (G3088@syntax-dispatch G3f4b@t '(any any)))) G3f33@t))) (G3088@syntax-dispatch G3f33@t 'any))) G3f2b@t))) (G3088@syntax-dispatch G3f2b@t 'any))) G3f20@e))) (set! G3eae@gen-ref (lambda (G3f07@src G3f08@var G3f09@level G3f0a@maps) (if (= G3f09@level '0) (values G3f08@var G3f0a@maps) (if (null? G3f0a@maps) (G317b@syntax-violation '#f '"missing ellipsis in syntax form" G3f07@src) (call-with-values (lambda () (G3eae@gen-ref G3f07@src G3f08@var (- G3f09@level '1) (cdr G3f0a@maps))) (lambda (G3f11@G3f0f G3f12@G3f10) ((lambda (G3f15@outer-maps G3f16@outer-var) ((lambda (G3f19@t) (if G3f19@t ((lambda (G3f1b@b) (values (cdr G3f1b@b) G3f0a@maps)) G3f19@t) ((lambda (G3f1d@inner-var) (values G3f1d@inner-var (cons (cons (cons G3f16@outer-var G3f1d@inner-var) (car G3f0a@maps)) G3f15@outer-maps))) (G2dbd@gen-lexical 'tmp)))) (assq G3f16@outer-var (car G3f0a@maps)))) G3f12@G3f10 G3f11@G3f0f))))))) (set! G3eb0@gen-append (lambda (G3f03@x G3f04@y) (if (equal? G3f04@y ''()) G3f03@x (list 'append G3f03@x G3f04@y)))) (set! G3eb2@gen-mappend (lambda (G3eff@e G3f00@map-env) (list 'apply '(primitive append) (G3eb4@gen-map G3eff@e G3f00@map-env)))) (set! G3eb4@gen-map (lambda (G3eed@e G3eee@map-env) ((lambda (G3ef1@formals G3ef2@actuals) (if (eq? (car G3eed@e) 'ref) (car G3ef2@actuals) (if (for-all (lambda (G3ef5@x) (if (eq? (car G3ef5@x) 'ref) (begin '#f (memq (cadr G3ef5@x) G3ef1@formals)) '#f)) (cdr G3eed@e)) ((lambda (G3ef7@args) (cons 'map (cons (list 'primitive (car G3eed@e)) G3ef7@args))) (map ((lambda (G3ef9@r) (lambda (G3efb@x) (cdr (assq (cadr G3efb@x) G3ef9@r)))) (map cons G3ef1@formals G3ef2@actuals)) (cdr G3eed@e))) (cons* 'map (list 'lambda G3ef1@formals G3eed@e) G3ef2@actuals)))) (map cdr G3eee@map-env) (map (lambda (G3efd@x) (list 'ref (car G3efd@x))) G3eee@map-env)))) (set! G3eb6@gen-cons (lambda (G3edd@e G3ede@x G3edf@y G3ee0@xnew G3ee1@ynew) ((lambda (G3ee7@t) (if (memv G3ee7@t '(quote)) (if (eq? (car G3ee0@xnew) 'quote) ((lambda (G3ee9@xnew G3eea@ynew) (if (if (eq? G3ee9@xnew G3ede@x) (begin '#f (eq? G3eea@ynew G3edf@y)) '#f) (list 'quote G3edd@e) (list 'quote (cons G3ee9@xnew G3eea@ynew)))) (cadr G3ee0@xnew) (cadr G3ee1@ynew)) (if (null? (cadr G3ee1@ynew)) (list 'list G3ee0@xnew) (list 'cons G3ee0@xnew G3ee1@ynew))) (if (memv G3ee7@t '(list)) (cons 'list (cons G3ee0@xnew (cdr G3ee1@ynew))) (list 'cons G3ee0@xnew G3ee1@ynew)))) (car G3ee1@ynew)))) (set! G3eb8@gen-vector (lambda (G3ed7@e G3ed8@ls G3ed9@lsnew) (if (eq? (car G3ed9@lsnew) 'quote) (if (eq? (cadr G3ed9@lsnew) G3ed8@ls) (list 'quote G3ed7@e) (list 'quote (list->vector (cadr G3ed9@lsnew)))) (if (eq? (car G3ed9@lsnew) 'list) (cons 'vector (cdr G3ed9@lsnew)) (list 'list->vector G3ed9@lsnew))))) (set! G3eba@regen (lambda (G3ed1@x) ((lambda (G3ed3@t) (if (memv G3ed3@t '(ref)) (cadr G3ed1@x) (if (memv G3ed3@t '(primitive)) (list 'primitive (cadr G3ed1@x)) (if (memv G3ed3@t '(quote)) (list 'quote (cadr G3ed1@x)) (if (memv G3ed3@t '(lambda)) (G2d9d@G2cc5@build-lambda '#f (cadr G3ed1@x) (G3eba@regen (caddr G3ed1@x))) (if (memv G3ed3@t '(map)) ((lambda (G3ed5@ls) (cons '(primitive ellipsis-map) G3ed5@ls)) (map G3eba@regen (cdr G3ed1@x))) (cons (list 'primitive (car G3ed1@x)) (map G3eba@regen (cdr G3ed1@x))))))))) (car G3ed1@x)))) (lambda (G3ebb@e G3ebc@r G3ebd@mr) ((lambda (G3ec1@t) ((lambda (G3ec3@ls/false) (if G3ec3@ls/false (apply (lambda (G3ec5@x) (call-with-values (lambda () (G3eac@gen-syntax G3ebb@e G3ec5@x G3ebc@r '() G308a@ellipsis? '#f)) (lambda (G3ec9@G3ec7 G3eca@G3ec8) ((lambda (G3ecd@maps G3ece@e) (G3eba@regen G3ece@e)) G3eca@G3ec8 G3ec9@G3ec7)))) G3ec3@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3ec1@t))) (G3088@syntax-dispatch G3ec1@t '(_ any)))) G3ebb@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G3096@core-macro-transformer (lambda (G3fdf@name) ((lambda (G3fe1@t) (if (memv G3fe1@t '(quote)) G3038@quote-transformer (if (memv G3fe1@t '(lambda)) G303c@lambda-transformer (if (memv G3fe1@t '(case-lambda)) G303a@case-lambda-transformer (if (memv G3fe1@t '(letrec)) G3024@letrec-transformer (if (memv G3fe1@t '(letrec*)) G3026@letrec*-transformer (if (memv G3fe1@t '(if)) G3034@if-transformer (if (memv G3fe1@t '(foreign-call)) G3084@foreign-call-transformer (if (memv G3fe1@t '(syntax-case)) G3090@syntax-case-transformer (if (memv G3fe1@t '(syntax)) G3094@syntax-transformer (if (memv G3fe1@t '(type-descriptor)) G302a@type-descriptor-transformer (if (memv G3fe1@t '(record-type-descriptor)) G302c@record-type-descriptor-transformer (if (memv G3fe1@t '(record-constructor-descriptor)) G302e@record-constructor-descriptor-transformer (if (memv G3fe1@t '(fluid-let-syntax)) G3028@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3fdf@name))))))))))))))) G3fdf@name))) (set! G3098@file-options-macro (lambda (G3fe3@x) ((lambda (G3fe6@valid-option?) (begin (set! G3fe6@valid-option? (lambda (G3fef@x) (if (G2e45@id? G3fef@x) (begin '#f (memq (G2e47@id->sym G3fef@x) '(no-fail no-create no-truncate))) '#f))) ((lambda (G3fe7@t) ((lambda (G3fe9@ls/false) (if (if G3fe9@ls/false (begin '#f (apply (lambda (G3feb@opt*) (if (for-all G3fe6@valid-option? G3feb@opt*) (begin '#f (G2998@G293c@file-options-spec (map G2e47@id->sym G3feb@opt*))) '#f)) G3fe9@ls/false)) '#f) (apply (lambda (G3fed@opt*) (G303e@bless (list 'quote (G2998@G293c@file-options-spec (map G2e47@id->sym G3fed@opt*))))) G3fe9@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3fe7@t))) (G3088@syntax-dispatch G3fe7@t '(_ . each-any)))) G3fe3@x))) '#f))) (set! G309a@symbol-macro (lambda (G3ff1@x G3ff2@set) ((lambda (G3ff5@t) ((lambda (G3ff7@ls/false) (if (if G3ff7@ls/false (begin '#f (apply (lambda (G3ff9@name) (if (G2e45@id? G3ff9@name) (begin '#f (memq (G2e47@id->sym G3ff9@name) G3ff2@set)) '#f)) G3ff7@ls/false)) '#f) (apply (lambda (G3ffb@name) (G303e@bless (list 'quote G3ffb@name))) G3ff7@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G3ff5@t))) (G3088@syntax-dispatch G3ff5@t '(_ any)))) G3ff1@x))) (set! G309c@macro-transformer (lambda (G3ffd@x) (if (procedure? G3ffd@x) G3ffd@x (if (symbol? G3ffd@x) ((lambda (G3fff@t) (if (memv G3fff@t '(define-record-type)) G307c@define-record-type-macro (if (memv G3fff@t '(define-struct)) G307a@define-struct-macro (if (memv G3fff@t '(include)) G3070@include-macro (if (memv G3fff@t '(cond)) G306c@cond-macro (if (memv G3fff@t '(let)) G3044@let-macro (if (memv G3fff@t '(do)) G3064@do-macro (if (memv G3fff@t '(or)) G3068@or-macro (if (memv G3fff@t '(and)) G306a@and-macro (if (memv G3fff@t '(let*)) G3066@let*-macro (if (memv G3fff@t '(let-values)) G3046@let-values-macro (if (memv G3fff@t '(let*-values)) G3048@let*-values-macro (if (memv G3fff@t '(syntax-rules)) G3074@syntax-rules-macro (if (memv G3fff@t '(quasiquote)) G3076@quasiquote-macro (if (memv G3fff@t '(quasisyntax)) G3078@quasisyntax-macro (if (memv G3fff@t '(with-syntax)) G3040@with-syntax-macro (if (memv G3fff@t '(when)) G3030@when-macro (if (memv G3fff@t '(unless)) G3032@unless-macro (if (memv G3fff@t '(case)) G3036@case-macro (if (memv G3fff@t '(identifier-syntax)) G3062@identifier-syntax-macro (if (memv G3fff@t '(time)) G305a@time-macro (if (memv G3fff@t '(delay)) G305c@delay-macro (if (memv G3fff@t '(assert)) G305e@assert-macro (if (memv G3fff@t '(endianness)) G3060@endianness-macro (if (memv G3fff@t '(guard)) G3056@guard-macro (if (memv G3fff@t '(define-enumeration)) G3058@define-enumeration-macro (if (memv G3fff@t '(trace-lambda)) G304a@trace-lambda-macro (if (memv G3fff@t '(trace-define)) G304c@trace-define-macro (if (memv G3fff@t '(trace-define-syntax)) G304e@trace-define-syntax-macro (if (memv G3fff@t '(trace-let-syntax)) G3052@trace-let-syntax-macro (if (memv G3fff@t '(trace-letrec-syntax)) G3054@trace-letrec-syntax-macro (if (memv G3fff@t '(define-condition-type)) G307e@define-condition-type-macro (if (memv G3fff@t '(parameterize)) G3082@parameterize-macro (if (memv G3fff@t '(include-into)) G3072@include-into-macro (if (memv G3fff@t '(eol-style)) (lambda (G4001@x) (G309a@symbol-macro G4001@x '(none lf cr crlf nel crnel ls))) (if (memv G3fff@t '(error-handling-mode)) (lambda (G4003@x) (G309a@symbol-macro G4003@x '(ignore raise replace))) (if (memv G3fff@t '(buffer-mode)) (lambda (G4005@x) (G309a@symbol-macro G4005@x '(none line block))) (if (memv G3fff@t '(file-options)) G3098@file-options-macro (if (memv G3fff@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G3080@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3ffd@x)))))))))))))))))))))))))))))))))))))))) G3ffd@x) (error 'core-macro-transformer '"BUG: invalid macro" G3ffd@x))))) (set! G309e@local-macro-transformer (lambda (G4007@x) (car G4007@x))) (set! G30a0@do-macro-call (lambda (G4009@transformer G400a@expr) ((lambda (G400d@out) (begin ((letrec ((G400f@f (lambda (G4011@x) (if (not (G2e0d@stx? G4011@x)) (if (pair? G4011@x) (begin (G400f@f (car G4011@x)) (G400f@f (cdr G4011@x))) (if (vector? G4011@x) (vector-for-each G400f@f G4011@x) (if (symbol? G4011@x) (G317b@syntax-violation '#f '"raw symbol encountered in output of macro" G400a@expr G4011@x) (void)))) (void))))) G400f@f) G400d@out) (G2e2f@add-mark (G2e25@gen-mark) G400d@out G400a@expr))) (G4009@transformer (G2e2f@add-mark G2e27@anti-mark G400a@expr '#f))))) (set! G30a2@chi-macro (lambda (G4013@p G4014@e) (G30a0@do-macro-call (G309c@macro-transformer G4013@p) G4014@e))) (set! G30a4@chi-local-macro (lambda (G4017@p G4018@e) (G30a0@do-macro-call (G309e@local-macro-transformer G4017@p) G4018@e))) (set! G30a6@chi-global-macro (lambda (G401b@p G401c@e) ((lambda (G401f@lib G4020@loc) (begin (G2c3b@G2ad1@visit-library G401f@lib) ((lambda (G4023@x) ((lambda (G4025@transformer) (G30a0@do-macro-call G4025@transformer G401c@e)) (if (procedure? G4023@x) G4023@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G4023@x)))) (symbol-value G4020@loc)))) (car G401b@p) (cdr G401b@p)))) (set! G30a8@chi-expr* (lambda (G4027@e* G4028@r G4029@mr) (if (null? G4027@e*) '() ((lambda (G402d@e) (cons G402d@e (G30a8@chi-expr* (cdr G4027@e*) G4028@r G4029@mr))) (G30ac@chi-expr (car G4027@e*) G4028@r G4029@mr))))) (set! G30aa@chi-application (lambda (G402f@e G4030@r G4031@mr) ((lambda (G4035@t) ((lambda (G4037@ls/false) (if G4037@ls/false (apply (lambda (G4039@rator G403a@rands) ((lambda (G403d@rator) (cons G403d@rator (G30a8@chi-expr* G403a@rands G4030@r G4031@mr))) (G30ac@chi-expr G4039@rator G4030@r G4031@mr))) G4037@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G4035@t))) (G3088@syntax-dispatch G4035@t '(any . each-any)))) G402f@e))) (set! G30ac@chi-expr (lambda (G403f@e G4040@r G4041@mr) (call-with-values (lambda () (G2e6d@syntax-type G403f@e G4040@r)) (lambda (G4048@G4045 G4049@G4046 G404a@G4047) ((lambda (G404e@kwd G404f@value G4050@type) ((lambda (G4054@t) (if (memv G4054@t '(core-macro)) ((lambda (G4056@transformer) (G4056@transformer G403f@e G4040@r G4041@mr)) (G3096@core-macro-transformer G404f@value)) (if (memv G4054@t '(global)) ((lambda (G4058@lib) ((lambda (G405a@loc) ((lambda () (begin ((G30f7@inv-collector) G4058@lib) G405a@loc)))) (cdr G404f@value))) (car G404f@value)) (if (memv G4054@t '(core-prim)) ((lambda (G405c@name) (list 'primitive G405c@name)) G404f@value) (if (memv G4054@t '(call)) (G30aa@chi-application G403f@e G4040@r G4041@mr) (if (memv G4054@t '(lexical)) ((lambda (G405e@lex) G405e@lex) (G3018@lexical-var G404f@value)) (if (memv G4054@t '(global-macro global-macro!)) (G30ac@chi-expr (G30a6@chi-global-macro G404f@value G403f@e) G4040@r G4041@mr) (if (memv G4054@t '(local-macro local-macro!)) (G30ac@chi-expr (G30a4@chi-local-macro G404f@value G403f@e) G4040@r G4041@mr) (if (memv G4054@t '(macro macro!)) (G30ac@chi-expr (G30a2@chi-macro G404f@value G403f@e) G4040@r G4041@mr) (if (memv G4054@t '(constant)) ((lambda (G4060@datum) (list 'quote G4060@datum)) G404f@value) (if (memv G4054@t '(set!)) (G30ae@chi-set! G403f@e G4040@r G4041@mr) (if (memv G4054@t '(begin)) ((lambda (G4062@t) ((lambda (G4064@ls/false) (if G4064@ls/false (apply (lambda (G4066@x G4067@x*) (G2da0@G2d11@build-sequence '#f (G30a8@chi-expr* (cons G4066@x G4067@x*) G4040@r G4041@mr))) G4064@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G4062@t))) (G3088@syntax-dispatch G4062@t '(_ any . each-any)))) G403f@e) (if (memv G4054@t '(let-syntax letrec-syntax)) ((lambda (G406a@t) ((lambda (G406c@ls/false) (if (if G406c@ls/false (begin '#f (apply (lambda (G406e@xlhs* G406f@xrhs* G4070@xbody G4071@xbody*) (if (not (G2e4f@valid-bound-ids? G406e@xlhs*)) (G317b@syntax-violation '#f '"invalid identifiers" G403f@e) (void))) G406c@ls/false)) '#f) (apply (lambda (G4076@xlhs* G4077@xrhs* G4078@xbody G4079@xbody*) ((lambda (G407e@xlab*) ((lambda (G4080@xrib) ((lambda (G4082@xb*) ((lambda () (G2da0@G2d11@build-sequence '#f (G30a8@chi-expr* (map (lambda (G4084@x) (G2e31@add-subst G4080@xrib G4084@x)) (cons G4078@xbody G4079@xbody*)) (append (map cons G407e@xlab* G4082@xb*) G4040@r) (append (map cons G407e@xlab* G4082@xb*) G4041@mr)))))) (map (lambda (G4086@x) (G2e8c@make-eval-transformer (G30e9@expand-transformer (if (eq? G4050@type 'let-syntax) G4086@x (G2e31@add-subst G4080@xrib G4086@x)) G4041@mr))) G4077@xrhs*))) (G2dfe@make-full-rib G4076@xlhs* G407e@xlab*))) (map G2dc1@gen-label G4076@xlhs*))) G406c@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G406a@t))) (G3088@syntax-dispatch G406a@t '(_ #(each (any any)) any . each-any)))) G403f@e) (if (memv G4054@t '(displaced-lexical)) (G317b@syntax-violation '#f '"identifier out of context" G403f@e) (if (memv G4054@t '(syntax)) (G317b@syntax-violation '#f '"reference to pattern variable outside a syntax form" G403f@e) (if (memv G4054@t '(define define-syntax module import library)) (G317b@syntax-violation '#f (string-append ((lambda (G4088@t) (if (memv G4088@t '(define)) '"a definition" (if (memv G4088@t '(define-syntax)) '"a define-syntax" (if (memv G4088@t '(module)) '"a module definition" (if (memv G4088@t '(library)) '"a library definition" (if (memv G4088@t '(import)) '"an import declaration" (if (memv G4088@t '(export)) '"an export declaration" '"a non-expression"))))))) G4050@type) '" was found where an expression was expected") G403f@e) (if (memv G4054@t '(mutable)) (G317b@syntax-violation '#f '"attempt to reference an unexportable variable" G403f@e) (G317b@syntax-violation '#f '"invalid expression" G403f@e)))))))))))))))))) G4050@type)) G404a@G4047 G4049@G4046 G4048@G4045))))) (set! G30ae@chi-set! (lambda (G408a@e G408b@r G408c@mr) ((lambda (G4090@t) ((lambda (G4092@ls/false) (if (if G4092@ls/false (begin '#f (apply (lambda (G4094@x G4095@v) (G2e45@id? G4094@x)) G4092@ls/false)) '#f) (apply (lambda (G4098@x G4099@v) (call-with-values (lambda () (G2e6d@syntax-type G4098@x G408b@r)) (lambda (G409f@G409c G40a0@G409d G40a1@G409e) ((lambda (G40a5@kwd G40a6@value G40a7@type) ((lambda (G40ab@t) (if (memv G40ab@t '(lexical)) (begin (G301c@set-lexical-mutable! G40a6@value '#t) (list 'set! (G3018@lexical-var G40a6@value) (G30ac@chi-expr G4099@v G408b@r G408c@mr))) (if (memv G40ab@t '(core-prim)) (G317b@syntax-violation '#f '"cannot modify imported core primitive" G408a@e) (if (memv G40ab@t '(global)) (G317b@syntax-violation '#f '"attempt to modify imported binding" G408a@e) (if (memv G40ab@t '(global-macro!)) (G30ac@chi-expr (G30a6@chi-global-macro G40a6@value G408a@e) G408b@r G408c@mr) (if (memv G40ab@t '(local-macro!)) (G30ac@chi-expr (G30a4@chi-local-macro G40a6@value G408a@e) G408b@r G408c@mr) (if (memv G40ab@t '(mutable)) (G317b@syntax-violation '#f '"attempt to assign to an unexportable variable" G408a@e) (G317b@syntax-violation '#f '"invalid syntax" G408a@e)))))))) G40a7@type)) G40a1@G409e G40a0@G409d G409f@G409c)))) G4092@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G4090@t))) (G3088@syntax-dispatch G4090@t '(_ any any)))) G408a@e))) (set! G30b0@verify-formals (lambda (G40ad@fmls G40ae@stx) ((lambda (G40b1@t) ((lambda (G40b3@ls/false) (if G40b3@ls/false (apply (lambda (G40b5@x*) (if (not (G2e4f@valid-bound-ids? G40b5@x*)) (G3042@invalid-fmls-error G40ae@stx G40ad@fmls) (void))) G40b3@ls/false) ((lambda (G40b7@t) ((lambda (G40b9@ls/false) (if G40b9@ls/false (apply (lambda (G40bb@x* G40bc@x) (if (not (G2e4f@valid-bound-ids? (cons G40bc@x G40bb@x*))) (G3042@invalid-fmls-error G40ae@stx G40ad@fmls) (void))) G40b9@ls/false) ((lambda (G40bf@t) ((lambda (G40c1@ls/false) (if G40c1@ls/false (apply (lambda () (G317b@syntax-violation '#f '"invalid syntax" G40ae@stx)) G40c1@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G40bf@t))) (G3088@syntax-dispatch G40bf@t '_))) G40b7@t))) (G3088@syntax-dispatch G40b7@t '#(each+ any () any)))) G40b1@t))) (G3088@syntax-dispatch G40b1@t 'each-any))) G40ad@fmls))) (set! G30b2@chi-lambda-clause (lambda (G40c3@stx G40c4@fmls G40c5@body* G40c6@r G40c7@mr) ((lambda (G40cd@t) ((lambda (G40cf@ls/false) (if G40cf@ls/false (apply (lambda (G40d1@x*) (begin (G30b0@verify-formals G40c4@fmls G40c3@stx) ((lambda (G40d3@lex* G40d4@lab*) (values G40d3@lex* (G30c2@chi-internal (G2e31@add-subst (G2dfe@make-full-rib G40d1@x* G40d4@lab*) G40c5@body*) (G3020@add-lexicals G40d4@lab* G40d3@lex* G40c6@r) G40c7@mr))) (map G2dbd@gen-lexical G40d1@x*) (map G2dc1@gen-label G40d1@x*)))) G40cf@ls/false) ((lambda (G40d7@t) ((lambda (G40d9@ls/false) (if G40d9@ls/false (apply (lambda (G40db@x* G40dc@x) (begin (G30b0@verify-formals G40c4@fmls G40c3@stx) ((lambda (G40df@lex* G40e0@lab* G40e1@lex G40e2@lab) (values (append G40df@lex* G40e1@lex) (G30c2@chi-internal (G2e31@add-subst (G2dfe@make-full-rib (cons G40dc@x G40db@x*) (cons G40e2@lab G40e0@lab*)) G40c5@body*) (G3020@add-lexicals (cons G40e2@lab G40e0@lab*) (cons G40e1@lex G40df@lex*) G40c6@r) G40c7@mr))) (map G2dbd@gen-lexical G40db@x*) (map G2dc1@gen-label G40db@x*) (G2dbd@gen-lexical G40dc@x) (G2dc1@gen-label G40dc@x)))) G40d9@ls/false) ((lambda (G40e7@t) ((lambda (G40e9@ls/false) (if G40e9@ls/false (apply (lambda () (G317b@syntax-violation '#f '"invalid syntax" G40c4@fmls)) G40e9@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G40e7@t))) (G3088@syntax-dispatch G40e7@t '_))) G40d7@t))) (G3088@syntax-dispatch G40d7@t '#(each+ any () any)))) G40cd@t))) (G3088@syntax-dispatch G40cd@t 'each-any))) G40c4@fmls))) (set! G30b4@chi-lambda-clause* (lambda (G40eb@stx G40ec@fmls* G40ed@body** G40ee@r G40ef@mr) (if (null? G40ec@fmls*) (values '() '()) (call-with-values (lambda () (G30b2@chi-lambda-clause G40eb@stx (car G40ec@fmls*) (car G40ed@body**) G40ee@r G40ef@mr)) (lambda (G40f7@G40f5 G40f8@G40f6) ((lambda (G40fb@b G40fc@a) (call-with-values (lambda () (G30b4@chi-lambda-clause* G40eb@stx (cdr G40ec@fmls*) (cdr G40ed@body**) G40ee@r G40ef@mr)) (lambda (G4101@G40ff G4102@G4100) ((lambda (G4105@b* G4106@a*) (values (cons G40fc@a G4106@a*) (cons G40fb@b G4105@b*))) G4102@G4100 G4101@G40ff)))) G40f8@G40f6 G40f7@G40f5)))))) (set! G30b6@chi-defun (lambda (G4109@x G410a@r G410b@mr) ((lambda (G410f@fmls G4110@body*) (call-with-values (lambda () (G30b2@chi-lambda-clause G410f@fmls G410f@fmls G4110@body* G410a@r G410b@mr)) (lambda (G4115@G4113 G4116@G4114) ((lambda (G4119@body G411a@fmls) (G2d9d@G2cc5@build-lambda '#f G411a@fmls G4119@body)) G4116@G4114 G4115@G4113)))) (car G4109@x) (cdr G4109@x)))) (set! G30b8@chi-rhs (lambda (G411d@rhs G411e@r G411f@mr) ((lambda (G4123@t) (if (memv G4123@t '(defun)) (G30b6@chi-defun (cdr G411d@rhs) G411e@r G411f@mr) (if (memv G4123@t '(expr)) ((lambda (G4125@expr) (G30ac@chi-expr G4125@expr G411e@r G411f@mr)) (cdr G411d@rhs)) (if (memv G4123@t '(top-expr)) ((lambda (G4127@expr) (G2da0@G2d11@build-sequence '#f (list (G30ac@chi-expr G4127@expr G411e@r G411f@mr) (G2da1@G2d13@build-void)))) (cdr G411d@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G411d@rhs))))) (car G411d@rhs)))) (set! G30ba@expand-interaction-rhs*/init* (lambda (G4129@lhs* G412a@rhs* G412b@init* G412c@r G412d@mr) ((letrec ((G4133@f (lambda (G4135@lhs* G4136@rhs*) (if (null? G4135@lhs*) (map (lambda (G4139@x) (G30ac@chi-expr G4139@x G412c@r G412d@mr)) G412b@init*) ((lambda (G413b@lhs G413c@rhs) ((lambda (G413f@t) (if (memv G413f@t '(defun)) ((lambda (G4141@rhs) (cons (list 'set! G413b@lhs G4141@rhs) (G4133@f (cdr G4135@lhs*) (cdr G4136@rhs*)))) (G30b6@chi-defun (cdr G413c@rhs) G412c@r G412d@mr)) (if (memv G413f@t '(expr)) ((lambda (G4143@rhs) (cons (list 'set! G413b@lhs G4143@rhs) (G4133@f (cdr G4135@lhs*) (cdr G4136@rhs*)))) (G30ac@chi-expr (cdr G413c@rhs) G412c@r G412d@mr)) (if (memv G413f@t '(top-expr)) ((lambda (G4145@e) (cons G4145@e (G4133@f (cdr G4135@lhs*) (cdr G4136@rhs*)))) (G30ac@chi-expr (cdr G413c@rhs) G412c@r G412d@mr)) (error 'expand-interaction '"invallid" G413c@rhs))))) (car G413c@rhs))) (car G4135@lhs*) (car G4136@rhs*)))))) G4133@f) G4129@lhs* G412a@rhs*))) (set! G30bc@chi-rhs* (lambda (G4147@rhs* G4148@r G4149@mr) ((letrec ((G414d@f (lambda (G414f@ls) (if (null? G414f@ls) '() ((lambda (G4151@a) (cons G4151@a (G414d@f (cdr G414f@ls)))) (G30b8@chi-rhs (car G414f@ls) G4148@r G4149@mr)))))) G414d@f) G4147@rhs*))) (set! G30be@find-bound=? (lambda (G4153@x G4154@lhs* G4155@rhs*) (if (null? G4154@lhs*) '#f (if (G2e4b@bound-id=? G4153@x (car G4154@lhs*)) (car G4155@rhs*) (G30be@find-bound=? G4153@x (cdr G4154@lhs*) (cdr G4155@rhs*)))))) (set! G30c0@find-dups (lambda (G4159@ls) ((letrec ((G415b@f (lambda (G415d@ls G415e@dups) (if (null? G415d@ls) G415e@dups ((lambda (G4161@t) (if G4161@t ((lambda (G4163@x) (G415b@f (cdr G415d@ls) (cons (list (car G415d@ls) G4163@x) G415e@dups))) G4161@t) (G415b@f (cdr G415d@ls) G415e@dups))) (G30be@find-bound=? (car G415d@ls) (cdr G415d@ls) (cdr G415d@ls))))))) G415b@f) G4159@ls '()))) (set! G30c2@chi-internal (lambda (G4165@e* G4166@r G4167@mr) ((lambda (G416b@rib) (call-with-values (lambda () (G30e7@chi-body* (map (lambda (G4175@x) (G2e31@add-subst G416b@rib G4175@x)) (G2e43@syntax->list G4165@e*)) G4166@r G4167@mr '() '() '() '() '() G416b@rib '#f)) (lambda (G4177@G416d G4178@G416e G4179@G416f G417a@G4170 G417b@G4171 G417c@G4172 G417d@G4173 G417e@G4174) ((lambda (G4187@_exp* G4188@kwd* G4189@mod** G418a@rhs* G418b@lex* G418c@mr G418d@r G418e@e*) (begin (if (null? G418e@e*) (G317b@syntax-violation '#f '"no expression in body" G418e@e*) (void)) ((lambda (G4197@init*) ((lambda (G4199@rhs*) ((lambda () (G2da3@G2d17@build-letrec* '#f (reverse G418b@lex*) (reverse G4199@rhs*) (G2da0@G2d11@build-sequence '#f G4197@init*))))) (G30bc@chi-rhs* G418a@rhs* G418d@r G418c@mr))) (G30a8@chi-expr* (append (apply append (reverse G4189@mod**)) G418e@e*) G418d@r G418c@mr)))) G417e@G4174 G417d@G4173 G417c@G4172 G417b@G4171 G417a@G4170 G4179@G416f G4178@G416e G4177@G416d)))) (G2dee@make-empty-rib)))) (set! G30c4@parse-module (lambda (G419b@e) ((lambda (G419d@t) ((lambda (G419f@ls/false) (if G419f@ls/false (apply (lambda (G41a1@export* G41a2@b*) (begin (if (not (for-all G2e45@id? G41a1@export*)) (G317b@syntax-violation '#f '"module exports must be identifiers" G419b@e) (void)) (values '#f (list->vector G41a1@export*) G41a2@b*))) G419f@ls/false) ((lambda (G41a5@t) ((lambda (G41a7@ls/false) (if G41a7@ls/false (apply (lambda (G41a9@name G41aa@export* G41ab@b*) (begin (if (not (G2e45@id? G41a9@name)) (G317b@syntax-violation '#f '"module name must be an identifier" G419b@e) (void)) (if (not (for-all G2e45@id? G41aa@export*)) (G317b@syntax-violation '#f '"module exports must be identifiers" G419b@e) (void)) (values G41a9@name (list->vector G41aa@export*) G41ab@b*))) G41a7@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G41a5@t))) (G3088@syntax-dispatch G41a5@t '(_ any each-any . each-any)))) G419d@t))) (G3088@syntax-dispatch G419d@t '(_ each-any . each-any)))) G419b@e))) (set! G30ca@G30c5 (make-record-type-descriptor 'module-interface '#f 'G30c8 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G30cc@G30c7 '#f) (set! G30ce@G30c6 (make-record-constructor-descriptor G30ca@G30c5 '#f G30cc@G30c7)) (set! G30d3@module-interface? (record-predicate G30ca@G30c5)) (set! G30d5@make-module-interface (record-constructor G30ce@G30c6)) (set! G30d7@module-interface-first-mark (record-accessor G30ca@G30c5 '0)) (set! G30d9@module-interface-exp-id-vec (record-accessor G30ca@G30c5 '1)) (set! G30db@module-interface-exp-lab-vec (record-accessor G30ca@G30c5 '2)) (set! G30dd@set-module-interface-first-mark! (record-mutator G30ca@G30c5 '0)) (set! G30df@set-module-interface-exp-id-vec! (record-mutator G30ca@G30c5 '1)) (set! G30e1@set-module-interface-exp-lab-vec! (record-mutator G30ca@G30c5 '2)) (set! G30e3@module-interface-exp-id* (lambda (G41af@iface G41b0@id) ((lambda (G41b4@diff-marks) (begin (set! G41b4@diff-marks (lambda (G41bb@ls G41bc@x) (begin (if (null? G41bb@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G41bf@a) (if (eq? G41bf@a G41bc@x) '() (cons G41bf@a (G41b4@diff-marks (cdr G41bb@ls) G41bc@x)))) (car G41bb@ls))))) ((lambda (G41b5@diff G41b6@id-vec) (if (null? G41b5@diff) G41b6@id-vec (vector-map (lambda (G41b9@x) (G2e0f@make-stx (G2e11@stx-expr G41b9@x) (append G41b5@diff (G2e13@stx-mark* G41b9@x)) '() '())) G41b6@id-vec))) (G41b4@diff-marks (G2e13@stx-mark* G41b0@id) (G30d7@module-interface-first-mark G41af@iface)) (G30d9@module-interface-exp-id-vec G41af@iface)))) '#f))) (set! G30e5@chi-internal-module (lambda (G41c1@e G41c2@r G41c3@mr G41c4@lex* G41c5@rhs* G41c6@mod** G41c7@kwd*) (call-with-values (lambda () (G30c4@parse-module G41c1@e)) (lambda (G41d2@G41cf G41d3@G41d0 G41d4@G41d1) ((lambda (G41d8@e* G41d9@exp-id* G41da@name) ((lambda (G41de@rib) ((lambda (G41e0@e*) ((lambda () (call-with-values (lambda () (G30e7@chi-body* G41e0@e* G41c2@r G41c3@mr G41c4@lex* G41c5@rhs* G41c6@mod** G41c7@kwd* '() G41de@rib '#f)) (lambda (G41ea@G41e2 G41eb@G41e3 G41ec@G41e4 G41ed@G41e5 G41ee@G41e6 G41ef@G41e7 G41f0@G41e8 G41f1@G41e9) ((lambda (G41fa@_exp* G41fb@kwd* G41fc@mod** G41fd@rhs* G41fe@lex* G41ff@mr G4200@r G4201@e*) ((lambda (G420a@exp-lab* G420b@mod**) (if (not G41da@name) (values G41fe@lex* G41fd@rhs* G41d9@exp-id* G420a@exp-lab* G4200@r G41ff@mr G420b@mod** G41fb@kwd*) ((lambda (G420e@lab G420f@iface) (values G41fe@lex* G41fd@rhs* (vector G41da@name) (vector G420e@lab) (cons (cons G420e@lab (cons '$module G420f@iface)) G4200@r) (cons (cons G420e@lab (cons '$module G420f@iface)) G41ff@mr) G420b@mod** G41fb@kwd*)) (G2dc1@gen-label 'module) (G30d5@make-module-interface (car (G2e13@stx-mark* G41da@name)) (vector-map (lambda (G4212@x) (G2e0f@make-stx (G2e11@stx-expr G4212@x) (G2e13@stx-mark* G4212@x) '() '())) G41d9@exp-id*) G420a@exp-lab*)))) (vector-map (lambda (G4214@x) ((lambda (G4216@t) (if G4216@t G4216@t (begin '#f (G317b@syntax-violation '#f '"cannot find module export" G4214@x)))) (G2e5f@id->label (G2e0f@make-stx (G2e47@id->sym G4214@x) (G2e13@stx-mark* G4214@x) (list G41de@rib) '())))) G41d9@exp-id*) (cons G4201@e* G41fc@mod**))) G41f1@G41e9 G41f0@G41e8 G41ef@G41e7 G41ee@G41e6 G41ed@G41e5 G41ec@G41e4 G41eb@G41e3 G41ea@G41e2)))))) (map (lambda (G4218@x) (G2e31@add-subst G41de@rib G4218@x)) (G2e43@syntax->list G41d8@e*)))) (G2dee@make-empty-rib))) G41d4@G41d1 G41d3@G41d0 G41d2@G41cf))))) (set! G30e7@chi-body* (lambda (G421a@e* G421b@r G421c@mr G421d@lex* G421e@rhs* G421f@mod** G4220@kwd* G4221@exp* G4222@rib G4223@top?) (if (null? G421a@e*) (values G421a@e* G421b@r G421c@mr G421d@lex* G421e@rhs* G421f@mod** G4220@kwd* G4221@exp*) ((lambda (G422e@e) (call-with-values (lambda () (G2e6d@syntax-type G422e@e G421b@r)) (lambda (G4233@G4230 G4234@G4231 G4235@G4232) ((lambda (G4239@kwd G423a@value G423b@type) ((lambda (G423f@kwd*) ((lambda (G4241@t) (if (memv G4241@t '(define)) (call-with-values (lambda () (G3010@parse-define G422e@e)) (lambda (G4245@G4243 G4246@G4244) ((lambda (G4249@rhs G424a@id) (begin (if (G2e53@bound-id-member? G424a@id G423f@kwd*) (G317b@syntax-violation '#f '"cannot redefine keyword" G422e@e) (void)) (call-with-values (lambda () (G2dc5@gen-define-label+loc G424a@id G4222@rib)) (lambda (G424f@G424d G4250@G424e) ((lambda (G4253@lex G4254@lab) (begin (G2df4@extend-rib! G4222@rib G424a@id G4254@lab) (G30e7@chi-body* (cdr G421a@e*) (G301e@add-lexical G4254@lab G4253@lex G421b@r) G421c@mr (cons G4253@lex G421d@lex*) (cons G4249@rhs G421e@rhs*) G421f@mod** G423f@kwd* G4221@exp* G4222@rib G4223@top?))) G4250@G424e G424f@G424d))))) G4246@G4244 G4245@G4243))) (if (memv G4241@t '(define-syntax)) (call-with-values (lambda () (G3012@parse-define-syntax G422e@e)) (lambda (G4259@G4257 G425a@G4258) ((lambda (G425d@rhs G425e@id) (begin (if (G2e53@bound-id-member? G425e@id G423f@kwd*) (G317b@syntax-violation '#f '"cannot redefine keyword" G422e@e) (void)) ((lambda (G4261@lab G4262@expanded-rhs) (begin (G2df4@extend-rib! G4222@rib G425e@id G4261@lab) ((lambda (G4265@b) (G30e7@chi-body* (cdr G421a@e*) (cons (cons G4261@lab G4265@b) G421b@r) (cons (cons G4261@lab G4265@b) G421c@mr) G421d@lex* G421e@rhs* G421f@mod** G423f@kwd* G4221@exp* G4222@rib G4223@top?)) (G2e8c@make-eval-transformer G4262@expanded-rhs)))) (G2dc7@gen-define-label G425e@id G4222@rib) (G30e9@expand-transformer G425d@rhs G421c@mr)))) G425a@G4258 G4259@G4257))) (if (memv G4241@t '(let-syntax letrec-syntax)) ((lambda (G4267@t) ((lambda (G4269@ls/false) (if (if G4269@ls/false (begin '#f (apply (lambda (G426b@xlhs* G426c@xrhs* G426d@xbody*) (if (not (G2e4f@valid-bound-ids? G426b@xlhs*)) (G317b@syntax-violation '#f '"invalid identifiers" G422e@e) (void))) G4269@ls/false)) '#f) (apply (lambda (G4271@xlhs* G4272@xrhs* G4273@xbody*) ((lambda (G4277@xlab*) ((lambda (G4279@xrib) ((lambda (G427b@xb*) ((lambda () (G30e7@chi-body* (append (map (lambda (G427d@x) (G2e31@add-subst G4279@xrib G427d@x)) G4273@xbody*) (cdr G421a@e*)) (append (map cons G4277@xlab* G427b@xb*) G421b@r) (append (map cons G4277@xlab* G427b@xb*) G421c@mr) G421d@lex* G421e@rhs* G421f@mod** G423f@kwd* G4221@exp* G4222@rib G4223@top?)))) (map (lambda (G427f@x) (G2e8c@make-eval-transformer (G30e9@expand-transformer (if (eq? G423b@type 'let-syntax) G427f@x (G2e31@add-subst G4279@xrib G427f@x)) G421c@mr))) G4272@xrhs*))) (G2dfe@make-full-rib G4271@xlhs* G4277@xlab*))) (map G2dc1@gen-label G4271@xlhs*))) G4269@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G4267@t))) (G3088@syntax-dispatch G4267@t '(_ #(each (any any)) . each-any)))) G422e@e) (if (memv G4241@t '(begin)) ((lambda (G4281@t) ((lambda (G4283@ls/false) (if G4283@ls/false (apply (lambda (G4285@x*) (G30e7@chi-body* (append G4285@x* (cdr G421a@e*)) G421b@r G421c@mr G421d@lex* G421e@rhs* G421f@mod** G423f@kwd* G4221@exp* G4222@rib G4223@top?)) G4283@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G4281@t))) (G3088@syntax-dispatch G4281@t '(_ . each-any)))) G422e@e) (if (memv G4241@t '(global-macro global-macro!)) (G30e7@chi-body* (cons (G2e31@add-subst G4222@rib (G30a6@chi-global-macro G423a@value G422e@e)) (cdr G421a@e*)) G421b@r G421c@mr G421d@lex* G421e@rhs* G421f@mod** G423f@kwd* G4221@exp* G4222@rib G4223@top?) (if (memv G4241@t '(local-macro local-macro!)) (G30e7@chi-body* (cons (G2e31@add-subst G4222@rib (G30a4@chi-local-macro G423a@value G422e@e)) (cdr G421a@e*)) G421b@r G421c@mr G421d@lex* G421e@rhs* G421f@mod** G423f@kwd* G4221@exp* G4222@rib G4223@top?) (if (memv G4241@t '(macro macro!)) (G30e7@chi-body* (cons (G2e31@add-subst G4222@rib (G30a2@chi-macro G423a@value G422e@e)) (cdr G421a@e*)) G421b@r G421c@mr G421d@lex* G421e@rhs* G421f@mod** G423f@kwd* G4221@exp* G4222@rib G4223@top?) (if (memv G4241@t '(module)) (call-with-values (lambda () (G30e5@chi-internal-module G422e@e G421b@r G421c@mr G421d@lex* G421e@rhs* G421f@mod** G423f@kwd*)) (lambda (G428f@G4287 G4290@G4288 G4291@G4289 G4292@G428a G4293@G428b G4294@G428c G4295@G428d G4296@G428e) ((lambda (G429f@kwd* G42a0@mod** G42a1@mr G42a2@r G42a3@m-exp-lab* G42a4@m-exp-id* G42a5@rhs* G42a6@lex*) (begin (vector-for-each (lambda (G42af@id G42b0@lab) (G2df4@extend-rib! G4222@rib G42af@id G42b0@lab)) G42a4@m-exp-id* G42a3@m-exp-lab*) (G30e7@chi-body* (cdr G421a@e*) G42a2@r G42a1@mr G42a6@lex* G42a5@rhs* G42a0@mod** G429f@kwd* G4221@exp* G4222@rib G4223@top?))) G4296@G428e G4295@G428d G4294@G428c G4293@G428b G4292@G428a G4291@G4289 G4290@G4288 G428f@G4287))) (if (memv G4241@t '(library)) (begin (G315b@library-expander (G2e5b@stx->datum G422e@e)) (G30e7@chi-body* (cdr G421a@e*) G421b@r G421c@mr G421d@lex* G421e@rhs* G421f@mod** G423f@kwd* G4221@exp* G4222@rib G4223@top?)) (if (memv G4241@t '(export)) ((lambda (G42b3@t) ((lambda (G42b5@ls/false) (if G42b5@ls/false (apply (lambda (G42b7@exp-decl*) (G30e7@chi-body* (cdr G421a@e*) G421b@r G421c@mr G421d@lex* G421e@rhs* G421f@mod** G423f@kwd* (append G42b7@exp-decl* G4221@exp*) G4222@rib G4223@top?)) G42b5@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G42b3@t))) (G3088@syntax-dispatch G42b3@t '(_ . each-any)))) G422e@e) (if (memv G4241@t '(import)) ((lambda () ((lambda (G42ba@module-import? G42bc@module-import G42be@library-import) (begin (set! G42ba@module-import? (lambda (G4306@e) ((lambda (G4308@t) ((lambda (G430a@ls/false) (if (if G430a@ls/false (begin '#f (apply (lambda (G430c@id) (G2e45@id? G430c@id)) G430a@ls/false)) '#f) (apply (lambda (G430e@id) '#t) G430a@ls/false) ((lambda (G4310@t) ((lambda (G4312@ls/false) (if G4312@ls/false (apply (lambda (G4314@imp*) '#f) G4312@ls/false) ((lambda (G4316@t) ((lambda (G4318@ls/false) (if G4318@ls/false (apply (lambda () (G317b@syntax-violation '#f '"malformed import form" G4306@e)) G4318@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G4316@t))) (G3088@syntax-dispatch G4316@t '_))) G4310@t))) (G3088@syntax-dispatch G4310@t '(_ . each-any)))) G4308@t))) (G3088@syntax-dispatch G4308@t '(_ any)))) G4306@e))) (set! G42bc@module-import (lambda (G42e7@e G42e8@r) ((lambda (G42eb@t) ((lambda (G42ed@ls/false) (if (if G42ed@ls/false (begin '#f (apply (lambda (G42ef@id) (G2e45@id? G42ef@id)) G42ed@ls/false)) '#f) (apply (lambda (G42f1@id) (call-with-values (lambda () (G2e6d@syntax-type G42f1@id G42e8@r)) (lambda (G42f6@G42f3 G42f7@G42f4 G42f8@G42f5) ((lambda (G42fc@kwd G42fd@value G42fe@type) ((lambda (G4302@t) (if (memv G4302@t '($module)) ((lambda (G4304@iface) (values (G30e3@module-interface-exp-id* G4304@iface G42f1@id) (G30db@module-interface-exp-lab-vec G4304@iface))) G42fd@value) (G317b@syntax-violation '#f '"invalid import" G42e7@e))) G42fe@type)) G42f8@G42f5 G42f7@G42f4 G42f6@G42f3)))) G42ed@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G42eb@t))) (G3088@syntax-dispatch G42eb@t '(_ any)))) G42e7@e))) (set! G42be@library-import (lambda (G42cd@e) ((lambda (G42cf@t) ((lambda (G42d1@ls/false) (if G42d1@ls/false (apply (lambda (G42d3@ctxt G42d4@imp*) (call-with-values (lambda () (G30f1@parse-import-spec* (G3181@syntax->datum G42d4@imp*))) (lambda (G42d9@G42d7 G42da@G42d8) ((lambda (G42dd@subst-labels G42de@subst-names) (values (vector-map (lambda (G42e1@name) (G2e23@datum->stx G42d3@ctxt G42e1@name)) G42de@subst-names) G42dd@subst-labels)) G42da@G42d8 G42d9@G42d7)))) G42d1@ls/false) ((lambda (G42e3@t) ((lambda (G42e5@ls/false) (if G42e5@ls/false (apply (lambda () (G317b@syntax-violation '#f '"invalid import form" G42cd@e)) G42e5@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G42e3@t))) (G3088@syntax-dispatch G42e3@t '_))) G42cf@t))) (G3088@syntax-dispatch G42cf@t '(any . each-any)))) G42cd@e))) (begin (call-with-values (lambda () (if (G42ba@module-import? G422e@e) (G42bc@module-import G422e@e G421b@r) (G42be@library-import G422e@e))) (lambda (G42c1@G42bf G42c2@G42c0) ((lambda (G42c5@lab* G42c6@id*) (vector-for-each (lambda (G42c9@id G42ca@lab) (G2df4@extend-rib! G4222@rib G42c9@id G42ca@lab)) G42c6@id* G42c5@lab*)) G42c2@G42c0 G42c1@G42bf))) (G30e7@chi-body* (cdr G421a@e*) G421b@r G421c@mr G421d@lex* G421e@rhs* G421f@mod** G423f@kwd* G4221@exp* G4222@rib G4223@top?)))) '#f '#f '#f))) (if G4223@top? (G30e7@chi-body* (cdr G421a@e*) G421b@r G421c@mr (cons (G2dbd@gen-lexical 'dummy) G421d@lex*) (cons (cons 'top-expr G422e@e) G421e@rhs*) G421f@mod** G423f@kwd* G4221@exp* G4222@rib G4223@top?) (values G421a@e* G421b@r G421c@mr G421d@lex* G421e@rhs* G421f@mod** G423f@kwd* G4221@exp*)))))))))))))) G423b@type)) (if (G2e45@id? G4239@kwd) (cons G4239@kwd G4220@kwd*) G4220@kwd*))) G4235@G4232 G4234@G4231 G4233@G4230)))) (car G421a@e*))))) (set! G30e9@expand-transformer (lambda (G431a@expr G431b@r) ((lambda (G431e@rtc) ((lambda (G4320@expanded-rhs) (begin (for-each ((lambda (G4322@mark-visit) (lambda (G4324@x) (begin (G2c3a@G2acf@invoke-library G4324@x) (G4322@mark-visit G4324@x)))) (G30f9@vis-collector)) (G431e@rtc)) G4320@expanded-rhs)) ((lambda (G432a@G4326@inv-collector G432b@G4327@vis-collector G432c@G4328@inv-collector G432d@G4329@vis-collector) ((lambda (G4332@swap) (dynamic-wind G4332@swap (lambda () (G30ac@chi-expr G431a@expr G431b@r G431b@r)) G4332@swap)) (lambda () (begin ((lambda (G4334@t) (begin (G432a@G4326@inv-collector G432c@G4328@inv-collector) (set! G432c@G4328@inv-collector G4334@t))) (G432a@G4326@inv-collector)) ((lambda (G4336@t) (begin (G432b@G4327@vis-collector G432d@G4329@vis-collector) (set! G432d@G4329@vis-collector G4336@t))) (G432b@G4327@vis-collector)))))) G30f7@inv-collector G30f9@vis-collector G431e@rtc (lambda (G4338@x) (values))))) (G30f5@make-collector)))) (set! G30eb@parse-exports (lambda (G433a@exp*) ((letrec ((G433c@f (lambda (G433e@exp* G433f@int* G4340@ext*) (if (null? G433e@exp*) (begin (if (not (G2e4f@valid-bound-ids? G4340@ext*)) (G317b@syntax-violation 'export '"invalid exports" (G30c0@find-dups G4340@ext*)) (void)) (values (map G3181@syntax->datum G4340@ext*) G433f@int*)) ((lambda (G4344@t) ((lambda (G4346@ls/false) (if G4346@ls/false (apply (lambda (G4348@rename G4349@i* G434a@e*) (begin (if (not (if (eq? (G3181@syntax->datum G4348@rename) 'rename) (if (for-all G2e45@id? G4349@i*) (begin '#f (for-all G2e45@id? G434a@e*)) '#f) '#f)) (G317b@syntax-violation 'export '"invalid export specifier" (car G433e@exp*)) (void)) (G433c@f (cdr G433e@exp*) (append G4349@i* G433f@int*) (append G434a@e* G4340@ext*)))) G4346@ls/false) ((lambda (G434e@t) ((lambda (G4350@ls/false) (if G4350@ls/false (apply (lambda (G4352@ie) (begin (if (not (G2e45@id? G4352@ie)) (G317b@syntax-violation 'export '"invalid export" G4352@ie) (void)) (G433c@f (cdr G433e@exp*) (cons G4352@ie G433f@int*) (cons G4352@ie G4340@ext*)))) G4350@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G434e@t))) (G3088@syntax-dispatch G434e@t 'any))) G4344@t))) (G3088@syntax-dispatch G4344@t '(any . #(each (any any)))))) (car G433e@exp*)))))) G433c@f) G433a@exp* '() '()))) (set! G30ed@parse-library-name (lambda (G4354@spec) ((lambda (G4357@parse) (begin (set! G4357@parse (lambda (G4362@x) ((lambda (G4364@t) ((lambda (G4366@ls/false) (if (if G4366@ls/false (begin '#f (apply (lambda (G4368@v*) (for-all (lambda (G436a@x) ((lambda (G436c@x) (if (integer? G436c@x) (begin '#f (exact? G436c@x)) '#f)) (G3181@syntax->datum G436a@x))) G4368@v*)) G4366@ls/false)) '#f) (apply (lambda (G436e@v*) (values '() (map G3181@syntax->datum G436e@v*))) G4366@ls/false) ((lambda (G4370@t) ((lambda (G4372@ls/false) (if (if G4372@ls/false (begin '#f (apply (lambda (G4374@x G4375@rest) (symbol? (G3181@syntax->datum G4374@x))) G4372@ls/false)) '#f) (apply (lambda (G4378@x G4379@rest) (call-with-values (lambda () (G4357@parse G4379@rest)) (lambda (G437e@G437c G437f@G437d) ((lambda (G4382@v* G4383@x*) (values (cons (G3181@syntax->datum G4378@x) G4383@x*) G4382@v*)) G437f@G437d G437e@G437c)))) G4372@ls/false) ((lambda (G4386@t) ((lambda (G4388@ls/false) (if G4388@ls/false (apply (lambda () (values '() '())) G4388@ls/false) ((lambda (G438a@t) ((lambda (G438c@ls/false) (if G438c@ls/false (apply (lambda () (G317b@syntax-violation '#f '"invalid library name" G4354@spec)) G438c@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G438a@t))) (G3088@syntax-dispatch G438a@t '_))) G4386@t))) (G3088@syntax-dispatch G4386@t '()))) G4370@t))) (G3088@syntax-dispatch G4370@t '(any . any)))) G4364@t))) (G3088@syntax-dispatch G4364@t '(each-any)))) G4362@x))) (call-with-values (lambda () (G4357@parse G4354@spec)) (lambda (G435a@G4358 G435b@G4359) ((lambda (G435e@ver* G435f@name*) (begin (if (null? G435f@name*) (G317b@syntax-violation '#f '"empty library name" G4354@spec) (void)) (values G435f@name* G435e@ver*))) G435b@G4359 G435a@G4358))))) '#f))) (set! G30ef@parse-library (lambda (G438e@e) ((lambda (G4390@t) ((lambda (G4392@ls/false) (if (if G4392@ls/false (begin '#f (apply (lambda (G4394@library G4395@name* G4396@export G4397@exp* G4398@import G4399@imp* G439a@b*) (if (eq? (G3181@syntax->datum G4396@export) 'export) (if (eq? (G3181@syntax->datum G4398@import) 'import) (begin '#f (eq? (G3181@syntax->datum G4394@library) 'library)) '#f) '#f)) G4392@ls/false)) '#f) (apply (lambda (G43a2@library G43a3@name* G43a4@export G43a5@exp* G43a6@import G43a7@imp* G43a8@b*) (values G43a3@name* G43a5@exp* G43a7@imp* G43a8@b*)) G4392@ls/false) ((lambda (G43b0@t) ((lambda (G43b2@ls/false) (if G43b2@ls/false (apply (lambda () (G317b@syntax-violation '#f '"malformed library" G438e@e)) G43b2@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G43b0@t))) (G3088@syntax-dispatch G43b0@t '_))) G4390@t))) (G3088@syntax-dispatch G4390@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G438e@e))) (set! G30f1@parse-import-spec* ((lambda () ((lambda (G43b5@idsyn? G43b7@dup-error G43b9@merge-substs G43bb@exclude* G43bd@find* G43bf@rem* G43c1@remove-dups G43c3@parse-library-name G43c5@import-library G43c7@get-import G43c9@add-imports!) (begin (set! G43b5@idsyn? (lambda (G45b4@x) (symbol? (G3181@syntax->datum G45b4@x)))) (set! G43b7@dup-error (lambda (G45b2@name) (G317b@syntax-violation 'import '"two imports with different bindings" G45b2@name))) (set! G43b9@merge-substs (lambda (G45a0@s G45a1@subst) ((lambda (G45a5@insert-to-subst) (begin (set! G45a5@insert-to-subst (lambda (G45a6@a G45a7@subst) ((lambda (G45aa@name G45ab@label) ((lambda (G45ae@t) (if G45ae@t ((lambda (G45b0@x) (if (eq? (cdr G45b0@x) G45ab@label) G45a7@subst (G43b7@dup-error G45aa@name))) G45ae@t) (cons G45a6@a G45a7@subst))) (assq G45aa@name G45a7@subst))) (car G45a6@a) (cdr G45a6@a)))) (if (null? G45a0@s) G45a1@subst (G45a5@insert-to-subst (car G45a0@s) (G43b9@merge-substs (cdr G45a0@s) G45a1@subst))))) '#f))) (set! G43bb@exclude* (lambda (G4576@sym* G4577@subst) ((lambda (G457b@exclude) (begin (set! G457b@exclude (lambda (G4590@sym G4591@subst) (if (null? G4591@subst) (G317b@syntax-violation 'import '"cannot rename unbound identifier" G4590@sym) (if (eq? G4590@sym (caar G4591@subst)) (values (cdar G4591@subst) (cdr G4591@subst)) ((lambda (G4594@a) (call-with-values (lambda () (G457b@exclude G4590@sym (cdr G4591@subst))) (lambda (G4598@G4596 G4599@G4597) ((lambda (G459c@subst G459d@old) (values G459d@old (cons G4594@a G459c@subst))) G4599@G4597 G4598@G4596)))) (car G4591@subst)))))) (if (null? G4576@sym*) (values '() G4577@subst) (call-with-values (lambda () (G457b@exclude (car G4576@sym*) G4577@subst)) (lambda (G457e@G457c G457f@G457d) ((lambda (G4582@subst G4583@old) (call-with-values (lambda () (G43bb@exclude* (cdr G4576@sym*) G4582@subst)) (lambda (G4588@G4586 G4589@G4587) ((lambda (G458c@subst G458d@old*) (values (cons G4583@old G458d@old*) G458c@subst)) G4589@G4587 G4588@G4586)))) G457f@G457d G457e@G457c)))))) '#f))) (set! G43bd@find* (lambda (G456e@sym* G456f@subst) (map (lambda (G4572@x) ((lambda (G4574@t) (if G4574@t (cdr G4574@t) (G317b@syntax-violation 'import '"cannot find identifier" G4572@x))) (assq G4572@x G456f@subst))) G456e@sym*))) (set! G43bf@rem* (lambda (G4566@sym* G4567@subst) ((letrec ((G456a@f (lambda (G456c@subst) (if (null? G456c@subst) '() (if (memq (caar G456c@subst) G4566@sym*) (G456a@f (cdr G456c@subst)) (cons (car G456c@subst) (G456a@f (cdr G456c@subst)))))))) G456a@f) G4567@subst))) (set! G43c1@remove-dups (lambda (G4564@ls) (if (null? G4564@ls) '() (if (memq (car G4564@ls) (cdr G4564@ls)) (G43c1@remove-dups (cdr G4564@ls)) (cons (car G4564@ls) (G43c1@remove-dups (cdr G4564@ls))))))) (set! G43c3@parse-library-name (lambda (G447e@spec) ((lambda (G4481@subversion? G4483@subversion-pred G4485@version-pred) (begin (set! G4481@subversion? (lambda (G4560@x) ((lambda (G4562@x) (if (integer? G4562@x) (if (exact? G4562@x) (begin '#f (>= G4562@x '0)) '#f) '#f)) (G3181@syntax->datum G4560@x)))) (set! G4483@subversion-pred (lambda (G4500@x*) ((lambda (G4502@t) ((lambda (G4504@ls/false) (if (if G4504@ls/false (begin '#f (apply (lambda (G4506@n) (G4481@subversion? G4506@n)) G4504@ls/false)) '#f) (apply (lambda (G4508@n) (lambda (G450a@x) (= G450a@x (G3181@syntax->datum G4508@n)))) G4504@ls/false) ((lambda (G450c@t) ((lambda (G450e@ls/false) (if (if G450e@ls/false (begin '#f (apply (lambda (G4510@p? G4511@sub*) (eq? (G3181@syntax->datum G4510@p?) 'and)) G450e@ls/false)) '#f) (apply (lambda (G4514@p? G4515@sub*) ((lambda (G4518@p*) (lambda (G451a@x) (for-all (lambda (G451c@p) (G451c@p G451a@x)) G4518@p*))) (map G4483@subversion-pred G4515@sub*))) G450e@ls/false) ((lambda (G451e@t) ((lambda (G4520@ls/false) (if (if G4520@ls/false (begin '#f (apply (lambda (G4522@p? G4523@sub*) (eq? (G3181@syntax->datum G4522@p?) 'or)) G4520@ls/false)) '#f) (apply (lambda (G4526@p? G4527@sub*) ((lambda (G452a@p*) (lambda (G452c@x) (exists (lambda (G452e@p) (G452e@p G452c@x)) G452a@p*))) (map G4483@subversion-pred G4527@sub*))) G4520@ls/false) ((lambda (G4530@t) ((lambda (G4532@ls/false) (if (if G4532@ls/false (begin '#f (apply (lambda (G4534@p? G4535@sub) (eq? (G3181@syntax->datum G4534@p?) 'not)) G4532@ls/false)) '#f) (apply (lambda (G4538@p? G4539@sub) ((lambda (G453c@p) (lambda (G453e@x) (not (G453c@p G453e@x)))) (G4483@subversion-pred G4539@sub))) G4532@ls/false) ((lambda (G4540@t) ((lambda (G4542@ls/false) (if (if G4542@ls/false (begin '#f (apply (lambda (G4544@p? G4545@n) (if (eq? (G3181@syntax->datum G4544@p?) '<=) (begin '#f (G4481@subversion? G4545@n)) '#f)) G4542@ls/false)) '#f) (apply (lambda (G4548@p? G4549@n) (lambda (G454c@x) (<= G454c@x (G3181@syntax->datum G4549@n)))) G4542@ls/false) ((lambda (G454e@t) ((lambda (G4550@ls/false) (if (if G4550@ls/false (begin '#f (apply (lambda (G4552@p? G4553@n) (if (eq? (G3181@syntax->datum G4552@p?) '>=) (begin '#f (G4481@subversion? G4553@n)) '#f)) G4550@ls/false)) '#f) (apply (lambda (G4556@p? G4557@n) (lambda (G455a@x) (>= G455a@x (G3181@syntax->datum G4557@n)))) G4550@ls/false) ((lambda (G455c@t) ((lambda (G455e@ls/false) (if G455e@ls/false (apply (lambda () (G317b@syntax-violation 'import '"invalid sub-version spec" G447e@spec G4500@x*)) G455e@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G455c@t))) (G3088@syntax-dispatch G455c@t '_))) G454e@t))) (G3088@syntax-dispatch G454e@t '(any any)))) G4540@t))) (G3088@syntax-dispatch G4540@t '(any any)))) G4530@t))) (G3088@syntax-dispatch G4530@t '(any any)))) G451e@t))) (G3088@syntax-dispatch G451e@t '(any . each-any)))) G450c@t))) (G3088@syntax-dispatch G450c@t '(any . each-any)))) G4502@t))) (G3088@syntax-dispatch G4502@t 'any))) G4500@x*))) (set! G4485@version-pred (lambda (G44b0@x*) ((lambda (G44b2@t) ((lambda (G44b4@ls/false) (if G44b4@ls/false (apply (lambda () (lambda (G44b6@x) '#t)) G44b4@ls/false) ((lambda (G44b8@t) ((lambda (G44ba@ls/false) (if (if G44ba@ls/false (begin '#f (apply (lambda (G44bc@c G44bd@ver*) (eq? (G3181@syntax->datum G44bc@c) 'and)) G44ba@ls/false)) '#f) (apply (lambda (G44c0@c G44c1@ver*) ((lambda (G44c4@p*) (lambda (G44c6@x) (for-all (lambda (G44c8@p) (G44c8@p G44c6@x)) G44c4@p*))) (map G4485@version-pred G44c1@ver*))) G44ba@ls/false) ((lambda (G44ca@t) ((lambda (G44cc@ls/false) (if (if G44cc@ls/false (begin '#f (apply (lambda (G44ce@c G44cf@ver*) (eq? (G3181@syntax->datum G44ce@c) 'or)) G44cc@ls/false)) '#f) (apply (lambda (G44d2@c G44d3@ver*) ((lambda (G44d6@p*) (lambda (G44d8@x) (exists (lambda (G44da@p) (G44da@p G44d8@x)) G44d6@p*))) (map G4485@version-pred G44d3@ver*))) G44cc@ls/false) ((lambda (G44dc@t) ((lambda (G44de@ls/false) (if (if G44de@ls/false (begin '#f (apply (lambda (G44e0@c G44e1@ver) (eq? (G3181@syntax->datum G44e0@c) 'not)) G44de@ls/false)) '#f) (apply (lambda (G44e4@c G44e5@ver) ((lambda (G44e8@p) (lambda (G44ea@x) (not (G44e8@p G44ea@x)))) (G4485@version-pred G44e5@ver))) G44de@ls/false) ((lambda (G44ec@t) ((lambda (G44ee@ls/false) (if G44ee@ls/false (apply (lambda (G44f0@sub*) ((lambda (G44f2@p*) (lambda (G44f4@x) ((letrec ((G44f6@f (lambda (G44f8@p* G44f9@x) (if (null? G44f8@p*) '#t (if (null? G44f9@x) '#f (if ((car G44f8@p*) (car G44f9@x)) (begin '#f (G44f6@f (cdr G44f8@p*) (cdr G44f9@x))) '#f)))))) G44f6@f) G44f2@p* G44f4@x))) (map G4483@subversion-pred G44f0@sub*))) G44ee@ls/false) ((lambda (G44fc@t) ((lambda (G44fe@ls/false) (if G44fe@ls/false (apply (lambda () (G317b@syntax-violation 'import '"invalid version spec" G447e@spec G44b0@x*)) G44fe@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G44fc@t))) (G3088@syntax-dispatch G44fc@t '_))) G44ec@t))) (G3088@syntax-dispatch G44ec@t 'each-any))) G44dc@t))) (G3088@syntax-dispatch G44dc@t '(any any)))) G44ca@t))) (G3088@syntax-dispatch G44ca@t '(any . each-any)))) G44b8@t))) (G3088@syntax-dispatch G44b8@t '(any . each-any)))) G44b2@t))) (G3088@syntax-dispatch G44b2@t '()))) G44b0@x*))) ((letrec ((G4486@f (lambda (G4488@x) ((lambda (G448a@t) ((lambda (G448c@ls/false) (if G448c@ls/false (apply (lambda (G448e@version-spec*) (values '() (G4485@version-pred G448e@version-spec*))) G448c@ls/false) ((lambda (G4490@t) ((lambda (G4492@ls/false) (if (if G4492@ls/false (begin '#f (apply (lambda (G4494@x G4495@x*) (G43b5@idsyn? G4494@x)) G4492@ls/false)) '#f) (apply (lambda (G4498@x G4499@x*) (call-with-values (lambda () (G4486@f G4499@x*)) (lambda (G449e@G449c G449f@G449d) ((lambda (G44a2@pred G44a3@name) (values (cons (G3181@syntax->datum G4498@x) G44a3@name) G44a2@pred)) G449f@G449d G449e@G449c)))) G4492@ls/false) ((lambda (G44a6@t) ((lambda (G44a8@ls/false) (if G44a8@ls/false (apply (lambda () (values '() (lambda (G44aa@x) '#t))) G44a8@ls/false) ((lambda (G44ac@t) ((lambda (G44ae@ls/false) (if G44ae@ls/false (apply (lambda () (G317b@syntax-violation '#f '"invalid import spec" G447e@spec)) G44ae@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G44ac@t))) (G3088@syntax-dispatch G44ac@t '_))) G44a6@t))) (G3088@syntax-dispatch G44a6@t '()))) G4490@t))) (G3088@syntax-dispatch G4490@t '(any . any)))) G448a@t))) (G3088@syntax-dispatch G448a@t '(each-any)))) G4488@x)))) G4486@f) G447e@spec))) '#f '#f '#f))) (set! G43c5@import-library (lambda (G4470@spec*) (call-with-values (lambda () (G43c3@parse-library-name G4470@spec*)) (lambda (G4474@G4472 G4475@G4473) ((lambda (G4478@pred G4479@name) (begin (if (null? G4479@name) (G317b@syntax-violation 'import '"empty library name" G4470@spec*) (void)) ((lambda (G447c@lib) (begin (if (not G447c@lib) (G317b@syntax-violation 'import '"cannot find library with required name" G4479@name) (void)) (if (not (G4478@pred (G2c0b@G2a71@library-version G447c@lib))) (G317b@syntax-violation 'import '"library does not satisfy version specification" G4470@spec* G447c@lib) (void)) ((G30fb@imp-collector) G447c@lib) (G2c0f@G2a79@library-subst G447c@lib))) (G2c33@G2ac1@find-library-by-name G4479@name)))) G4475@G4473 G4474@G4472))))) (set! G43c7@get-import (lambda (G43e2@spec) ((lambda (G43e4@t) ((lambda (G43e6@ls/false) (if (if G43e6@ls/false (begin '#f (apply (lambda (G43e8@x G43e9@x*) (not (memq (G3181@syntax->datum G43e8@x) '(for rename except only prefix library)))) G43e6@ls/false)) '#f) (apply (lambda (G43ec@x G43ed@x*) (G43c5@import-library (cons G43ec@x G43ed@x*))) G43e6@ls/false) ((lambda (G43f0@t) ((lambda (G43f2@ls/false) (if (if G43f2@ls/false (begin '#f (apply (lambda (G43f4@rename G43f5@isp G43f6@old* G43f7@new*) (if (eq? (G3181@syntax->datum G43f4@rename) 'rename) (if (for-all G43b5@idsyn? G43f6@old*) (begin '#f (for-all G43b5@idsyn? G43f7@new*)) '#f) '#f)) G43f2@ls/false)) '#f) (apply (lambda (G43fc@rename G43fd@isp G43fe@old* G43ff@new*) ((lambda (G4404@subst G4405@old* G4406@new*) ((lambda (G440a@old-label*) ((lambda (G440c@subst) (G43b9@merge-substs (map cons G4406@new* G440a@old-label*) G440c@subst)) (G43bf@rem* G4405@old* G4404@subst))) (G43bd@find* G4405@old* G4404@subst))) (G43c7@get-import G43fd@isp) (map G3181@syntax->datum G43fe@old*) (map G3181@syntax->datum G43ff@new*))) G43f2@ls/false) ((lambda (G440e@t) ((lambda (G4410@ls/false) (if (if G4410@ls/false (begin '#f (apply (lambda (G4412@except G4413@isp G4414@sym*) (if (eq? (G3181@syntax->datum G4412@except) 'except) (begin '#f (for-all G43b5@idsyn? G4414@sym*)) '#f)) G4410@ls/false)) '#f) (apply (lambda (G4418@except G4419@isp G441a@sym*) ((lambda (G441e@subst) (G43bf@rem* (map G3181@syntax->datum G441a@sym*) G441e@subst)) (G43c7@get-import G4419@isp))) G4410@ls/false) ((lambda (G4420@t) ((lambda (G4422@ls/false) (if (if G4422@ls/false (begin '#f (apply (lambda (G4424@only G4425@isp G4426@sym*) (if (eq? (G3181@syntax->datum G4424@only) 'only) (begin '#f (for-all G43b5@idsyn? G4426@sym*)) '#f)) G4422@ls/false)) '#f) (apply (lambda (G442a@only G442b@isp G442c@sym*) ((lambda (G4430@subst G4431@sym*) ((lambda (G4434@sym*) ((lambda (G4436@lab*) (map cons G4434@sym* G4436@lab*)) (G43bd@find* G4434@sym* G4430@subst))) (G43c1@remove-dups G4431@sym*))) (G43c7@get-import G442b@isp) (map G3181@syntax->datum G442c@sym*))) G4422@ls/false) ((lambda (G4438@t) ((lambda (G443a@ls/false) (if (if G443a@ls/false (begin '#f (apply (lambda (G443c@prefix G443d@isp G443e@p) (if (eq? (G3181@syntax->datum G443c@prefix) 'prefix) (begin '#f (G43b5@idsyn? G443e@p)) '#f)) G443a@ls/false)) '#f) (apply (lambda (G4442@prefix G4443@isp G4444@p) ((lambda (G4448@subst G4449@prefix) (map (lambda (G444c@x) (cons (string->symbol (string-append G4449@prefix (symbol->string (car G444c@x)))) (cdr G444c@x))) G4448@subst)) (G43c7@get-import G4443@isp) (symbol->string (G3181@syntax->datum G4444@p)))) G443a@ls/false) ((lambda (G444e@t) ((lambda (G4450@ls/false) (if (if G4450@ls/false (begin '#f (apply (lambda (G4452@library G4453@spec*) (eq? (G3181@syntax->datum G4452@library) 'library)) G4450@ls/false)) '#f) (apply (lambda (G4456@library G4457@spec*) (G43c5@import-library G4457@spec*)) G4450@ls/false) ((lambda (G445a@t) ((lambda (G445c@ls/false) (if (if G445c@ls/false (begin '#f (apply (lambda (G445e@for G445f@isp G4460@rest) (eq? (G3181@syntax->datum G445e@for) 'for)) G445c@ls/false)) '#f) (apply (lambda (G4464@for G4465@isp G4466@rest) (G43c7@get-import G4465@isp)) G445c@ls/false) ((lambda (G446a@t) ((lambda (G446c@ls/false) (if G446c@ls/false (apply (lambda (G446e@spec) (G317b@syntax-violation 'import '"invalid import spec" G446e@spec)) G446c@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G446a@t))) (G3088@syntax-dispatch G446a@t 'any))) G445a@t))) (G3088@syntax-dispatch G445a@t '(any any . any)))) G444e@t))) (G3088@syntax-dispatch G444e@t '(any each-any)))) G4438@t))) (G3088@syntax-dispatch G4438@t '(any any any)))) G4420@t))) (G3088@syntax-dispatch G4420@t '(any any . each-any)))) G440e@t))) (G3088@syntax-dispatch G440e@t '(any any . each-any)))) G43f0@t))) (G3088@syntax-dispatch G43f0@t '(any any . #(each (any any)))))) G43e4@t))) (G3088@syntax-dispatch G43e4@t '(any . each-any)))) G43e2@spec))) (set! G43c9@add-imports! (lambda (G43d2@imp G43d3@h) ((lambda (G43d6@subst) (for-each (lambda (G43d8@x) ((lambda (G43da@name G43db@label) ((lambda (G43de@t) (if G43de@t ((lambda (G43e0@l) (if (not (eq? G43e0@l G43db@label)) (G43b7@dup-error G43da@name) (void))) G43de@t) (hashtable-set! G43d3@h G43da@name G43db@label))) (hashtable-ref G43d3@h G43da@name '#f))) (car G43d8@x) (cdr G43d8@x))) G43d6@subst)) (G43c7@get-import G43d2@imp)))) (lambda (G43ca@imp*) ((letrec ((G43cc@f (lambda (G43ce@imp* G43cf@h) (if (null? G43ce@imp*) (hashtable-entries G43cf@h) (begin (G43c9@add-imports! (car G43ce@imp*) G43cf@h) (G43cc@f (cdr G43ce@imp*) G43cf@h)))))) G43cc@f) G43ca@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G30f3@make-top-rib (lambda (G45b6@names G45b7@labels) ((lambda (G45ba@rib) (begin (vector-for-each (lambda (G45bc@name G45bd@label) (begin (if (not (symbol? G45bc@name)) (error 'make-top-rib '"BUG: not a symbol" G45bc@name) (void)) (G2df6@extend-rib/nc! G45ba@rib (G2e0f@make-stx G45bc@name G2db9@top-mark* '() '()) G45bd@label))) G45b6@names G45b7@labels) G45ba@rib)) (G2df0@make-cache-rib)))) (set! G30f5@make-collector (lambda () ((lambda (G45c0@ls) (lambda G45c4 ((lambda (G45c5) (if (= G45c5 '0) (apply (lambda () G45c0@ls) G45c4) (if (= G45c5 '1) (apply (lambda (G45c2@x) (set! G45c0@ls (G2db2@set-cons G45c2@x G45c0@ls))) G45c4) (error 'apply '"invalid arg count")))) (length G45c4)))) '()))) (set! G30f7@inv-collector (G2997@G28a2@make-parameter (lambda G45c6@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G45c8@x) (begin (if (not (procedure? G45c8@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G45c8@x) (void)) G45c8@x)))) (set! G30f9@vis-collector (G2997@G28a2@make-parameter (lambda G45ca@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G45cc@x) (begin (if (not (procedure? G45cc@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G45cc@x) (void)) G45cc@x)))) (set! G30fb@imp-collector (G2997@G28a2@make-parameter (lambda G45ce@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G45d0@x) (begin (if (not (procedure? G45d0@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G45d0@x) (void)) G45d0@x)))) (set! G30fd@chi-library-internal (lambda (G45d2@e* G45d3@rib G45d4@top?) (call-with-values (lambda () (G30e7@chi-body* G45d2@e* '() '() '() '() '() '() '() G45d3@rib G45d4@top?)) (lambda (G45e0@G45d8 G45e1@G45d9 G45e2@G45da G45e3@G45db G45e4@G45dc G45e5@G45dd G45e6@G45de G45e7@G45df) ((lambda (G45f0@exp* G45f1@_kwd* G45f2@mod** G45f3@rhs* G45f4@lex* G45f5@mr G45f6@r G45f7@e*) (values (append (apply append (reverse G45f2@mod**)) G45f7@e*) G45f6@r G45f5@mr (reverse G45f4@lex*) (reverse G45f3@rhs*) G45f0@exp*)) G45e7@G45df G45e6@G45de G45e5@G45dd G45e4@G45dc G45e3@G45db G45e2@G45da G45e1@G45d9 G45e0@G45d8))))) (set! G30ff@chi-interaction-expr (lambda (G4600@e G4601@rib G4602@r) (call-with-values (lambda () (G30e7@chi-body* (list G4600@e) G4602@r G4602@r '() '() '() '() '() G4601@rib '#t)) (lambda (G460e@G4606 G460f@G4607 G4610@G4608 G4611@G4609 G4612@G460a G4613@G460b G4614@G460c G4615@G460d) ((lambda (G461e@_exp* G461f@_kwd* G4620@mod** G4621@rhs* G4622@lex* G4623@mr G4624@r G4625@e*) ((lambda (G462e@e*) ((lambda (G4630@e) (values G4630@e G4624@r)) (if (null? G462e@e*) (G2da1@G2d13@build-void) (if (null? (cdr G462e@e*)) (car G462e@e*) (G2da0@G2d11@build-sequence '#f G462e@e*))))) (G30ba@expand-interaction-rhs*/init* (reverse G4622@lex*) (reverse G4621@rhs*) (append (apply append (reverse G4620@mod**)) G4625@e*) G4624@r G4623@mr))) G4615@G460d G4614@G460c G4613@G460b G4612@G460a G4611@G4609 G4610@G4608 G460f@G4607 G460e@G4606))))) (set! G3101@library-body-expander (lambda (G4632@name G4633@main-exp* G4634@imp* G4635@b* G4636@top?) ((lambda (G463d@itc) (begin (set! G463d@itc (G30f5@make-collector)) ((lambda (G4642@G463e@imp-collector G4643@G463f@top-level-context G4644@G4640@imp-collector G4645@G4641@top-level-context) ((lambda (G464a@swap) (dynamic-wind G464a@swap (lambda () (call-with-values (lambda () (G30f1@parse-import-spec* G4634@imp*)) (lambda (G464e@G464c G464f@G464d) ((lambda (G4652@subst-labels G4653@subst-names) ((lambda (G4656@rib) ((lambda (G4659@wrap) (begin (set! G4659@wrap (lambda (G46c5@x) (G2e0f@make-stx G46c5@x G2db9@top-mark* (list G4656@rib) '()))) ((lambda (G465a@b* G465b@main-exp* G465c@rtc G465d@vtc) ((lambda (G4666@G4662@inv-collector G4667@G4663@vis-collector G4668@G4664@inv-collector G4669@G4665@vis-collector) ((lambda (G466e@swap) (dynamic-wind G466e@swap (lambda () (call-with-values (lambda () (G30fd@chi-library-internal G465a@b* G4656@rib G4636@top?)) (lambda (G4676@G4670 G4677@G4671 G4678@G4672 G4679@G4673 G467a@G4674 G467b@G4675) ((lambda (G4682@internal-exp* G4683@rhs* G4684@lex* G4685@mr G4686@r G4687@init*) (call-with-values (lambda () (G30eb@parse-exports (append G465b@main-exp* G4682@internal-exp*))) (lambda (G4690@G468e G4691@G468f) ((lambda (G4694@exp-id* G4695@exp-name*) (begin (G2dfa@seal-rib! G4656@rib) ((lambda (G4698@init*) ((lambda (G469a@rhs*) ((lambda () (begin (G2dfc@unseal-rib! G4656@rib) ((lambda (G469c@loc* G469d@export-subst) ((lambda (G46a1@errstr) (begin (set! G46a1@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3165@make-export-env/macros G4684@lex* G469c@loc* G4686@r)) (lambda (G46a5@G46a2 G46a6@G46a3 G46a7@G46a4) ((lambda (G46ab@macro* G46ac@global* G46ad@export-env) (begin (for-each (lambda (G46b1@s) ((lambda (G46b3@name G46b4@label) ((lambda (G46b7@p) (if G46b7@p ((lambda (G46b9@b) ((lambda (G46bb@type) (if (eq? G46bb@type 'mutable) (G317b@syntax-violation 'export G46a1@errstr G46b3@name) (void))) (car G46b9@b))) (cdr G46b7@p)) (void))) (assq G46b4@label G46ad@export-env))) (car G46b1@s) (cdr G46b1@s))) G469d@export-subst) ((lambda (G46bd@invoke-body G46be@invoke-definitions) (values (G463d@itc) (G465c@rtc) (G465d@vtc) (G2da0@G2d11@build-sequence '#f (append G46be@invoke-definitions (list G46bd@invoke-body))) G46ab@macro* G469d@export-subst G46ad@export-env)) (G2da3@G2d17@build-letrec* '#f G4684@lex* G469a@rhs* (G3161@build-exports G46ac@global* G4698@init*)) (map G2d9c@G2c41@build-global-define (map cdr G46ac@global*))))) G46a7@G46a4 G46a6@G46a3 G46a5@G46a2))))) '#f)) (map G2dbf@gen-global G4684@lex*) (G3163@make-export-subst G4695@exp-name* G4694@exp-id*)))))) (G30bc@chi-rhs* G4683@rhs* G4686@r G4685@mr))) (G30a8@chi-expr* G4687@init* G4686@r G4685@mr)))) G4691@G468f G4690@G468e)))) G467b@G4675 G467a@G4674 G4679@G4673 G4678@G4672 G4677@G4671 G4676@G4670)))) G466e@swap)) (lambda () (begin ((lambda (G46c1@t) (begin (G4666@G4662@inv-collector G4668@G4664@inv-collector) (set! G4668@G4664@inv-collector G46c1@t))) (G4666@G4662@inv-collector)) ((lambda (G46c3@t) (begin (G4667@G4663@vis-collector G4669@G4665@vis-collector) (set! G4669@G4665@vis-collector G46c3@t))) (G4667@G4663@vis-collector)))))) G30f7@inv-collector G30f9@vis-collector G465c@rtc G465d@vtc)) (map G4659@wrap G4635@b*) (map G4659@wrap G4633@main-exp*) (G30f5@make-collector) (G30f5@make-collector)))) '#f)) (G30f3@make-top-rib G4653@subst-names G4652@subst-labels))) G464f@G464d G464e@G464c)))) G464a@swap)) (lambda () (begin ((lambda (G46c7@t) (begin (G4642@G463e@imp-collector G4644@G4640@imp-collector) (set! G4644@G4640@imp-collector G46c7@t))) (G4642@G463e@imp-collector)) ((lambda (G46c9@t) (begin (G4643@G463f@top-level-context G4645@G4641@top-level-context) (set! G4645@G4641@top-level-context G46c9@t))) (G4643@G463f@top-level-context)))))) G30fb@imp-collector G3189@top-level-context G463d@itc '#f))) '#f))) (set! G3103@core-library-expander (lambda (G46cb@e G46cc@verify-name) (call-with-values (lambda () (G30ef@parse-library G46cb@e)) (lambda (G46d3@G46cf G46d4@G46d0 G46d5@G46d1 G46d6@G46d2) ((lambda (G46db@b* G46dc@imp* G46dd@exp* G46de@name*) (call-with-values (lambda () (G30ed@parse-library-name G46de@name*)) (lambda (G46e5@G46e3 G46e6@G46e4) ((lambda (G46e9@ver G46ea@name) (begin (G46cc@verify-name G46ea@name) (call-with-values (lambda () (G3101@library-body-expander G46ea@name G46dd@exp* G46dc@imp* G46db@b* '#f)) (lambda (G46f4@G46ed G46f5@G46ee G46f6@G46ef G46f7@G46f0 G46f8@G46f1 G46f9@G46f2 G46fa@G46f3) ((lambda (G4702@export-env G4703@export-subst G4704@visit-code G4705@invoke-code G4706@visit-req* G4707@invoke-req* G4708@imp*) (values G46ea@name G46e9@ver G4708@imp* G4707@invoke-req* G4706@visit-req* G4705@invoke-code G4704@visit-code G4703@export-subst G4702@export-env)) G46fa@G46f3 G46f9@G46f2 G46f8@G46f1 G46f7@G46f0 G46f6@G46ef G46f5@G46ee G46f4@G46ed))))) G46e6@G46e4 G46e5@G46e3)))) G46d6@G46d2 G46d5@G46d1 G46d4@G46d0 G46d3@G46cf))))) (set! G3105@parse-top-level-program (lambda (G4710@e*) ((lambda (G4712@t) ((lambda (G4714@ls/false) (if (if G4714@ls/false (begin '#f (apply (lambda (G4716@import G4717@imp* G4718@b*) (eq? (G3181@syntax->datum G4716@import) 'import)) G4714@ls/false)) '#f) (apply (lambda (G471c@import G471d@imp* G471e@b*) (values G471d@imp* G471e@b*)) G4714@ls/false) ((lambda (G4722@t) ((lambda (G4724@ls/false) (if (if G4724@ls/false (begin '#f (apply (lambda (G4726@import G4727@x G4728@y) (eq? (G3181@syntax->datum G4726@import) 'import)) G4724@ls/false)) '#f) (apply (lambda (G472c@import G472d@x G472e@y) (G317b@syntax-violation 'expander '"invalid syntax of top-level program" (G2e3f@syntax-car G4710@e*))) G4724@ls/false) ((lambda (G4732@t) ((lambda (G4734@ls/false) (if G4734@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G4734@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G4732@t))) (G3088@syntax-dispatch G4732@t '_))) G4722@t))) (G3088@syntax-dispatch G4722@t '((any . any) . any)))) G4712@t))) (G3088@syntax-dispatch G4712@t '((any . each-any) . each-any)))) G4710@e*))) (set! G3107@top-level-expander (lambda (G4736@e*) (call-with-values (lambda () (G3105@parse-top-level-program G4736@e*)) (lambda (G473a@G4738 G473b@G4739) ((lambda (G473e@b* G473f@imp*) (call-with-values (lambda () (G3101@library-body-expander '() '() G473f@imp* G473e@b* '#t)) (lambda (G4749@G4742 G474a@G4743 G474b@G4744 G474c@G4745 G474d@G4746 G474e@G4747 G474f@G4748) ((lambda (G4757@export-env G4758@export-subst G4759@visit-code G475a@invoke-code G475b@visit-req* G475c@invoke-req* G475d@imp*) (values G475c@invoke-req* G475a@invoke-code)) G474f@G4748 G474e@G4747 G474d@G4746 G474c@G4745 G474b@G4744 G474a@G4743 G4749@G4742)))) G473b@G4739 G473a@G4738))))) (set! G310d@G3108 (make-record-type-descriptor 'env '#f 'G310b '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G310f@G310a '#f) (set! G3111@G3109 (make-record-constructor-descriptor G310d@G3108 '#f G310f@G310a)) (set! G3116@env? (record-predicate G310d@G3108)) (set! G3118@make-env (record-constructor G3111@G3109)) (set! G311a@env-names (record-accessor G310d@G3108 '0)) (set! G311c@env-labels (record-accessor G310d@G3108 '1)) (set! G311e@env-itc (record-accessor G310d@G3108 '2)) (set! G3120@set-env-names! (record-mutator G310d@G3108 '0)) (set! G3122@set-env-labels! (record-mutator G310d@G3108 '1)) (set! G3124@set-env-itc! (record-mutator G310d@G3108 '2)) (set! G3126@rp (G2994@G289c@make-record-printer 'env (lambda (G4765@x G4766@p G4767@wr) (display '"#<environment>" G4766@p)))) (set! G312c@G3127 (make-record-type-descriptor 'interaction-env '#f 'G312a '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G312e@G3129 '#f) (set! G3130@G3128 (make-record-constructor-descriptor G312c@G3127 '#f G312e@G3129)) (set! G3135@interaction-env? (record-predicate G312c@G3127)) (set! G3137@make-interaction-env (record-constructor G3130@G3128)) (set! G3139@interaction-env-rib (record-accessor G312c@G3127 '0)) (set! G313b@interaction-env-r (record-accessor G312c@G3127 '1)) (set! G313d@interaction-env-locs (record-accessor G312c@G3127 '2)) (set! G313f@set-interaction-env-rib! (record-mutator G312c@G3127 '0)) (set! G3141@set-interaction-env-r! (record-mutator G312c@G3127 '1)) (set! G3143@set-interaction-env-locs! (record-mutator G312c@G3127 '2)) (set! G3145@rp (G2994@G289c@make-record-printer 'interaction-env (lambda (G476b@x G476c@p G476d@wr) (display '"#<environment>" G476c@p)))) (set! G3147@interaction-environment-symbols (lambda () (G314f@environment-symbols (G3187@interaction-environment)))) (set! G3149@environment-bindings (lambda (G4771@e) (vector->list (vector-map (lambda (G4773@name G4774@label) (G314b@parse-binding (cons G4773@name (G2c39@G2acd@imported-label->binding G4774@label)))) (G311a@env-names G4771@e) (G311c@env-labels G4771@e))))) (set! G314b@parse-binding (lambda (G4777@b) (cons (car G4777@b) ((lambda (G4779@t) (if (memv G4779@t '(core-prim global)) 'procedure (if (memv G4779@t '(core-macro macro global-macro)) 'syntax (if (memv G4779@t '($core-rtd)) 'record (if (eq? (car G4777@b) (cadr G4777@b)) 'syntax 'unknown))))) (cadr G4777@b))))) (set! G314d@environment? (lambda (G477b@x) ((lambda (G477d@t) (if G477d@t G477d@t (begin '#f (G3135@interaction-env? G477b@x)))) (G3116@env? G477b@x)))) (set! G314f@environment-symbols (lambda (G477f@x) (if (G3116@env? G477f@x) (vector->list (G311a@env-names G477f@x)) (if (G3135@interaction-env? G477f@x) (map values (G2dda@rib-sym* (G3139@interaction-env-rib G477f@x))) (assertion-violation 'environment-symbols '"not an environment" G477f@x))))) (set! G3151@environment (lambda G4781@imp* ((lambda (G4783@itc) ((lambda (G4787@G4785@imp-collector G4788@G4786@imp-collector) ((lambda (G478b@swap) (dynamic-wind G478b@swap (lambda () (call-with-values (lambda () (G30f1@parse-import-spec* G4781@imp*)) (lambda (G478f@G478d G4790@G478e) ((lambda (G4793@subst-labels G4794@subst-names) (G3118@make-env G4794@subst-names G4793@subst-labels G4783@itc)) G4790@G478e G478f@G478d)))) G478b@swap)) (lambda () ((lambda (G4797@t) (begin (G4787@G4785@imp-collector G4788@G4786@imp-collector) (set! G4788@G4786@imp-collector G4797@t))) (G4787@G4785@imp-collector))))) G30fb@imp-collector G4783@itc)) (G30f5@make-collector)))) (set! G3153@null-environment (lambda (G4799@n) (begin (if (not (eqv? G4799@n '5)) (assertion-violation 'null-environment '"not 5" G4799@n) (void)) (G3151@environment '(psyntax null-environment-5))))) (set! G3155@scheme-report-environment (lambda (G479b@n) (begin (if (not (eqv? G479b@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G479b@n) (void)) (G3151@environment '(psyntax scheme-report-environment-5))))) (set! G3157@expand (lambda (G479d@x G479e@env) (if (G3116@env? G479e@env) ((lambda (G47a1@rib) ((lambda (G47a3@x G47a4@itc G47a5@rtc G47a6@vtc) ((lambda (G47ab@x) (begin (G2dfa@seal-rib! G47a1@rib) (values G47ab@x (G47a5@rtc)))) ((lambda (G47b5@G47ad@top-level-context G47b6@G47ae@inv-collector G47b7@G47af@vis-collector G47b8@G47b0@imp-collector G47b9@G47b1@top-level-context G47ba@G47b2@inv-collector G47bb@G47b3@vis-collector G47bc@G47b4@imp-collector) ((lambda (G47c5@swap) (dynamic-wind G47c5@swap (lambda () (G30ac@chi-expr G47a3@x '() '())) G47c5@swap)) (lambda () (begin ((lambda (G47c7@t) (begin (G47b5@G47ad@top-level-context G47b9@G47b1@top-level-context) (set! G47b9@G47b1@top-level-context G47c7@t))) (G47b5@G47ad@top-level-context)) ((lambda (G47c9@t) (begin (G47b6@G47ae@inv-collector G47ba@G47b2@inv-collector) (set! G47ba@G47b2@inv-collector G47c9@t))) (G47b6@G47ae@inv-collector)) ((lambda (G47cb@t) (begin (G47b7@G47af@vis-collector G47bb@G47b3@vis-collector) (set! G47bb@G47b3@vis-collector G47cb@t))) (G47b7@G47af@vis-collector)) ((lambda (G47cd@t) (begin (G47b8@G47b0@imp-collector G47bc@G47b4@imp-collector) (set! G47bc@G47b4@imp-collector G47cd@t))) (G47b8@G47b0@imp-collector)))))) G3189@top-level-context G30f7@inv-collector G30f9@vis-collector G30fb@imp-collector '#f G47a5@rtc G47a6@vtc G47a4@itc))) (G2e0f@make-stx G479d@x G2db9@top-mark* (list G47a1@rib) '()) (G311e@env-itc G479e@env) (G30f5@make-collector) (G30f5@make-collector))) (G30f3@make-top-rib (G311a@env-names G479e@env) (G311c@env-labels G479e@env))) (if (G3135@interaction-env? G479e@env) ((lambda (G47cf@rib G47d0@r G47d1@rtc) ((lambda (G47d5@x) (call-with-values (lambda () ((lambda (G47e1@G47d9@top-level-context G47e2@G47da@inv-collector G47e3@G47db@vis-collector G47e4@G47dc@imp-collector G47e5@G47dd@top-level-context G47e6@G47de@inv-collector G47e7@G47df@vis-collector G47e8@G47e0@imp-collector) ((lambda (G47f1@swap) (dynamic-wind G47f1@swap (lambda () (G30ff@chi-interaction-expr G47d5@x G47cf@rib G47d0@r)) G47f1@swap)) (lambda () (begin ((lambda (G47f3@t) (begin (G47e1@G47d9@top-level-context G47e5@G47dd@top-level-context) (set! G47e5@G47dd@top-level-context G47f3@t))) (G47e1@G47d9@top-level-context)) ((lambda (G47f5@t) (begin (G47e2@G47da@inv-collector G47e6@G47de@inv-collector) (set! G47e6@G47de@inv-collector G47f5@t))) (G47e2@G47da@inv-collector)) ((lambda (G47f7@t) (begin (G47e3@G47db@vis-collector G47e7@G47df@vis-collector) (set! G47e7@G47df@vis-collector G47f7@t))) (G47e3@G47db@vis-collector)) ((lambda (G47f9@t) (begin (G47e4@G47dc@imp-collector G47e8@G47e0@imp-collector) (set! G47e8@G47e0@imp-collector G47f9@t))) (G47e4@G47dc@imp-collector)))))) G3189@top-level-context G30f7@inv-collector G30f9@vis-collector G30fb@imp-collector G479e@env G47d1@rtc (G30f5@make-collector) (G30f5@make-collector))) (lambda (G47fb@G47d7 G47fc@G47d8) ((lambda (G47ff@r^ G4800@e) (begin (G3141@set-interaction-env-r! G479e@env G47ff@r^) (values G4800@e (G47d1@rtc)))) G47fc@G47d8 G47fb@G47d7)))) (G2e0f@make-stx G479d@x G2db9@top-mark* (list G47cf@rib) '()))) (G3139@interaction-env-rib G479e@env) (G313b@interaction-env-r G479e@env) (G30f5@make-collector)) (assertion-violation 'expand '"not an environment" G479e@env))))) (set! G3159@eval (lambda (G4803@x G4804@env) (begin (if (not (G314d@environment? G4804@env)) (error 'eval '"not an environment" G4804@env) (void)) (call-with-values (lambda () (G3157@expand G4803@x G4804@env)) (lambda (G4809@G4807 G480a@G4808) ((lambda (G480d@invoke-req* G480e@x) (begin (for-each G2c3a@G2acf@invoke-library G480d@invoke-req*) (eval-core (G29fb@G29a3@expanded->core G480e@x)))) G480a@G4808 G4809@G4807)))))) (set! G315b@library-expander (lambda G4876 ((lambda (G4877) (if (= G4877 '3) (apply (lambda (G4811@x G4812@filename G4813@verify-name) ((lambda (G4818@build-visit-code G481a@visit!) (begin (set! G4818@build-visit-code (lambda (G4864@macro*) (if (null? G4864@macro*) (G2da1@G2d13@build-void) (G2da0@G2d11@build-sequence '#f (map (lambda (G4866@x) ((lambda (G4868@loc G4869@src) (list 'set! G4868@loc G4869@src)) (car G4866@x) (cddr G4866@x))) G4864@macro*))))) (set! G481a@visit! (lambda (G485c@macro*) (for-each (lambda (G485e@x) ((lambda (G4860@loc G4861@proc) (set-symbol-value! G4860@loc G4861@proc)) (car G485e@x) (cadr G485e@x))) G485c@macro*))) (call-with-values (lambda () (G3103@core-library-expander G4811@x G4813@verify-name)) (lambda (G4824@G481b G4825@G481c G4826@G481d G4827@G481e G4828@G481f G4829@G4820 G482a@G4821 G482b@G4822 G482c@G4823) ((lambda (G4836@export-env G4837@export-subst G4838@macro* G4839@invoke-code G483a@vis* G483b@inv* G483c@imp* G483d@ver G483e@name) ((lambda (G4848@id G4849@name G484a@ver G484b@imp* G484c@vis* G484d@inv* G484e@visit-proc G484f@invoke-proc G4850@visit-code G4851@invoke-code) (begin (G2c38@G2acb@install-library G4848@id G4849@name G484a@ver G484b@imp* G484c@vis* G484d@inv* G4837@export-subst G4836@export-env G484e@visit-proc G484f@invoke-proc G4850@visit-code G4851@invoke-code '#t G4812@filename) (values G4848@id G4849@name G484a@ver G484b@imp* G484c@vis* G484d@inv* G4851@invoke-code G4850@visit-code G4837@export-subst G4836@export-env))) (gensym) G483e@name G483d@ver (map G2c3e@G2ad7@library-spec G483c@imp*) (map G2c3e@G2ad7@library-spec G483a@vis*) (map G2c3e@G2ad7@library-spec G483b@inv*) (lambda () (G481a@visit! G4838@macro*)) (lambda () (eval-core (G29fb@G29a3@expanded->core G4839@invoke-code))) (G4818@build-visit-code G4838@macro*) G4839@invoke-code)) G482c@G4823 G482b@G4822 G482a@G4821 G4829@G4820 G4828@G481f G4827@G481e G4826@G481d G4825@G481c G4824@G481b))))) '#f '#f)) G4876) (if (= G4877 '2) (apply (lambda (G486c@x G486d@filename) (G315b@library-expander G486c@x G486d@filename (lambda (G4870@x) (values)))) G4876) (if (= G4877 '1) (apply (lambda (G4872@x) (G315b@library-expander G4872@x '#f (lambda (G4874@x) (values)))) G4876) (error 'apply '"invalid arg count"))))) (length G4876)))) (set! G315d@boot-library-expand (lambda (G4878@x) (call-with-values (lambda () (G315b@library-expander G4878@x)) (lambda (G4884@G487a G4885@G487b G4886@G487c G4887@G487d G4888@G487e G4889@G487f G488a@G4880 G488b@G4881 G488c@G4882 G488d@G4883) ((lambda (G4898@export-env G4899@export-subst G489a@visit-code G489b@invoke-code G489c@inv* G489d@vis* G489e@imp* G489f@ver G48a0@name G48a1@id) (values G48a0@name G489b@invoke-code G4899@export-subst G4898@export-env)) G488d@G4883 G488c@G4882 G488b@G4881 G488a@G4880 G4889@G487f G4888@G487e G4887@G487d G4886@G487c G4885@G487b G4884@G487a))))) (set! G315f@rev-map-append (lambda (G48ac@f G48ad@ls G48ae@ac) (if (null? G48ad@ls) G48ae@ac (G315f@rev-map-append G48ac@f (cdr G48ad@ls) (cons (G48ac@f (car G48ad@ls)) G48ae@ac))))) (set! G3161@build-exports (lambda (G48b2@lex*+loc* G48b3@init*) (G2da0@G2d11@build-sequence '#f (cons (G2da1@G2d13@build-void) (G315f@rev-map-append (lambda (G48b6@x) (list 'set! (cdr G48b6@x) (car G48b6@x))) G48b2@lex*+loc* G48b3@init*))))) (set! G3163@make-export-subst (lambda (G48b8@name* G48b9@id*) (map (lambda (G48bc@name G48bd@id) ((lambda (G48c0@label) (begin (if (not G48c0@label) (G317b@syntax-violation '#f '"cannot export unbound identifier" G48bd@id) (void)) (cons G48bc@name G48c0@label))) (G2e5f@id->label G48bd@id))) G48b8@name* G48b9@id*))) (set! G3165@make-export-env/macros (lambda (G48c2@lex* G48c3@loc* G48c4@r) ((lambda (G48c9@lookup) (begin (set! G48c9@lookup (lambda (G48e6@x) ((letrec ((G48e8@f (lambda (G48ea@x G48eb@lex* G48ec@loc*) (if (pair? G48eb@lex*) (if (eq? G48ea@x (car G48eb@lex*)) (car G48ec@loc*) (G48e8@f G48ea@x (cdr G48eb@lex*) (cdr G48ec@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G48e8@f) G48e6@x G48c2@lex* G48c3@loc*))) ((letrec ((G48ca@f (lambda (G48cc@r G48cd@env G48ce@global* G48cf@macro*) (if (null? G48cc@r) (values G48cd@env G48ce@global* G48cf@macro*) ((lambda (G48d4@x) ((lambda (G48d6@label G48d7@b) ((lambda (G48da@t) (if (memv G48da@t '(lexical)) ((lambda (G48dc@v) ((lambda (G48de@loc G48df@type) (G48ca@f (cdr G48cc@r) (cons (cons* G48d6@label G48df@type G48de@loc) G48cd@env) (cons (cons (G3018@lexical-var G48dc@v) G48de@loc) G48ce@global*) G48cf@macro*)) (G48c9@lookup (G3018@lexical-var G48dc@v)) (if (G301a@lexical-mutable? G48dc@v) 'mutable 'global))) (G2e69@binding-value G48d7@b)) (if (memv G48da@t '(local-macro)) ((lambda (G48e2@loc) (G48ca@f (cdr G48cc@r) (cons (cons* G48d6@label 'global-macro G48e2@loc) G48cd@env) G48ce@global* (cons (cons G48e2@loc (G2e69@binding-value G48d7@b)) G48cf@macro*))) (gensym)) (if (memv G48da@t '(local-macro!)) ((lambda (G48e4@loc) (G48ca@f (cdr G48cc@r) (cons (cons* G48d6@label 'global-macro! G48e4@loc) G48cd@env) G48ce@global* (cons (cons G48e4@loc (G2e69@binding-value G48d7@b)) G48cf@macro*))) (gensym)) (if (memv G48da@t '($rtd $module)) (G48ca@f (cdr G48cc@r) (cons G48d4@x G48cd@env) G48ce@global* G48cf@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2e67@binding-type G48d7@b) (G2e69@binding-value G48d7@b))))))) (G2e67@binding-type G48d7@b))) (car G48d4@x) (cdr G48d4@x))) (car G48cc@r)))))) G48ca@f) G48c4@r '() '() '()))) '#f))) (set! G3167@generate-temporaries (lambda (G48f0@ls) ((lambda (G48f2@t) ((lambda (G48f4@ls/false) (if G48f4@ls/false (apply (lambda (G48f6@ls) (map (lambda (G48f8@x) (G2e0f@make-stx ((lambda (G48fa@x) (if ((lambda (G48fc@t) (if G48fc@t G48fc@t (begin '#f (string? G48fa@x)))) (symbol? G48fa@x)) (gensym G48fa@x) (gensym 't))) (G3181@syntax->datum G48f8@x)) G2db9@top-mark* '() '())) G48f6@ls)) G48f4@ls/false) ((lambda (G48fe@t) ((lambda (G4900@ls/false) (if G4900@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G4900@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G48fe@t))) (G3088@syntax-dispatch G48fe@t '_))) G48f2@t))) (G3088@syntax-dispatch G48f2@t 'each-any))) G48f0@ls))) (set! G3169@free-identifier=? (lambda (G4902@x G4903@y) (if (G2e45@id? G4902@x) (if (G2e45@id? G4903@y) (G2e4d@free-id=? G4902@x G4903@y) (assertion-violation 'free-identifier=? '"not an identifier" G4903@y)) (assertion-violation 'free-identifier=? '"not an identifier" G4902@x)))) (set! G316b@bound-identifier=? (lambda (G4906@x G4907@y) (if (G2e45@id? G4906@x) (if (G2e45@id? G4907@y) (G2e4b@bound-id=? G4906@x G4907@y) (assertion-violation 'bound-identifier=? '"not an identifier" G4907@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G4906@x)))) (set! G316d@make-source-condition (lambda (G490a@x) ((lambda (G4914@G490f G4916@G4911 G4918@G4910 G491d@G490e G491f@make-source-condition G4921@G490c G4923@G490d G4925@source-condition? G4927@source-filename G4929@source-character) (begin (set! G4914@G490f (make-record-type-descriptor '&source-information &condition-rtd 'G4912 '#f '#f '#((immutable file-name) (immutable character)))) (set! G4916@G4911 '#f) (set! G4918@G4910 (make-record-constructor-descriptor G4914@G490f &condition-rcd G4916@G4911)) (set! G491d@G490e (record-predicate G4914@G490f)) (set! G491f@make-source-condition (record-constructor G4918@G4910)) (set! G4921@G490c (record-accessor G4914@G490f '0)) (set! G4923@G490d (record-accessor G4914@G490f '1)) (set! G4925@source-condition? (condition-predicate G4914@G490f)) (set! G4927@source-filename (condition-accessor G4914@G490f G4921@G490c)) (set! G4929@source-character (condition-accessor G4914@G490f G4923@G490d)) (if (pair? G490a@x) (G491f@make-source-condition (car G490a@x) (cdr G490a@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G316f@extract-position-condition (lambda (G492a@x) (G316d@make-source-condition (G3171@expression-position G492a@x)))) (set! G3171@expression-position (lambda (G492c@x) (if (G2e0d@stx? G492c@x) (begin '#f ((lambda (G492e@x) (if (G298c@G288c@annotation? G492e@x) (begin '#f (G298d@G288e@annotation-source G492e@x)) '#f)) (G2e11@stx-expr G492c@x))) '#f))) (set! G3173@assertion-error (lambda (G4930@expr G4931@pos) (raise (condition (G4c28@G4b5a@make-assertion-violation) (G4c36@G4b88@make-who-condition 'assert) (G4c08@G4af2@make-message-condition '"assertion failed") (G4c2e@G4b6f@make-irritants-condition (list G4930@expr)) (G316d@make-source-condition G4931@pos))))) (set! G3175@syntax-error (lambda (G4934@x . G4936@args) (begin (if (not (for-all string? G4936@args)) (assertion-violation 'syntax-error '"invalid argument" G4936@args) (void)) (raise (condition (G4c08@G4af2@make-message-condition (if (null? G4936@args) '"invalid syntax" (apply string-append G4936@args))) (G4c50@G4bde@make-syntax-violation (G3181@syntax->datum G4934@x) '#f) (G316f@extract-position-condition G4934@x) (G3177@extract-trace G4934@x)))))) (set! G3177@extract-trace (lambda (G4938@x) ((lambda (G4941@G493c G4943@G493e G4945@G493d G494a@G493b G494c@make-trace G494e@G493a G4950@trace? G4952@trace-form) (begin (set! G4941@G493c (make-record-type-descriptor '&trace &condition-rtd 'G493f '#f '#f '#((immutable form)))) (set! G4943@G493e '#f) (set! G4945@G493d (make-record-constructor-descriptor G4941@G493c &condition-rcd G4943@G493e)) (set! G494a@G493b (record-predicate G4941@G493c)) (set! G494c@make-trace (record-constructor G4945@G493d)) (set! G494e@G493a (record-accessor G4941@G493c '0)) (set! G4950@trace? (condition-predicate G4941@G493c)) (set! G4952@trace-form (condition-accessor G4941@G493c G494e@G493a)) ((letrec ((G4953@f (lambda (G4955@x) (if (G2e0d@stx? G4955@x) (apply condition (G494c@make-trace G4955@x) (map G4953@f (G2e17@stx-ae* G4955@x))) (if (G298c@G288c@annotation? G4955@x) (G494c@make-trace (G2e0f@make-stx G4955@x '() '() '())) (condition)))))) G4953@f) G4938@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3179@syntax-violation* (lambda (G4957@who G4958@msg G4959@form G495a@condition-object) (begin (if (not (string? G4958@msg)) (assertion-violation 'syntax-violation '"message is not a string" G4958@msg) (void)) ((lambda (G495f@who) (raise (condition (if G495f@who (G4c36@G4b88@make-who-condition G495f@who) (condition)) (G4c08@G4af2@make-message-condition G4958@msg) G495a@condition-object (G316f@extract-position-condition G4959@form) (G3177@extract-trace G4959@form)))) (if ((lambda (G4961@t) (if G4961@t G4961@t (begin '#f (symbol? G4957@who)))) (string? G4957@who)) G4957@who (if (not G4957@who) ((lambda (G4963@t) ((lambda (G4965@ls/false) (if (if G4965@ls/false (begin '#f (apply (lambda (G4967@id) (G2e45@id? G4967@id)) G4965@ls/false)) '#f) (apply (lambda (G4969@id) (G3181@syntax->datum G4969@id)) G4965@ls/false) ((lambda (G496b@t) ((lambda (G496d@ls/false) (if (if G496d@ls/false (begin '#f (apply (lambda (G496f@id G4970@rest) (G2e45@id? G496f@id)) G496d@ls/false)) '#f) (apply (lambda (G4973@id G4974@rest) (G3181@syntax->datum G4973@id)) G496d@ls/false) ((lambda (G4977@t) ((lambda (G4979@ls/false) (if G4979@ls/false (apply (lambda () '#f) G4979@ls/false) (G317b@syntax-violation '#f '"invalid syntax" G4977@t))) (G3088@syntax-dispatch G4977@t '_))) G496b@t))) (G3088@syntax-dispatch G496b@t '(any . any)))) G4963@t))) (G3088@syntax-dispatch G4963@t 'any))) G4959@form) (assertion-violation 'syntax-violation '"invalid who argument" G4957@who))))))) (set! G317b@syntax-violation (lambda G4989 ((lambda (G498a) (if (= G498a '3) (apply (lambda (G497b@who G497c@msg G497d@form) (G317b@syntax-violation G497b@who G497c@msg G497d@form '#f)) G4989) (if (= G498a '4) (apply (lambda (G4981@who G4982@msg G4983@form G4984@subform) (G3179@syntax-violation* G4981@who G4982@msg G4983@form (G4c50@G4bde@make-syntax-violation (G3181@syntax->datum G4983@form) (G3181@syntax->datum G4984@subform)))) G4989) (error 'apply '"invalid arg count")))) (length G4989)))) (set! G317d@identifier? (lambda (G498b@x) (G2e45@id? G498b@x))) (set! G317f@datum->syntax (lambda (G498d@id G498e@datum) (if (G2e45@id? G498d@id) (G2e23@datum->stx G498d@id G498e@datum) (assertion-violation 'datum->syntax '"not an identifier" G498d@id)))) (set! G3181@syntax->datum (lambda (G4991@x) (G2e5b@stx->datum G4991@x))) (set! G3183@compile-r6rs-top-level (lambda (G4993@x*) (call-with-values (lambda () (G3107@top-level-expander G4993@x*)) (lambda (G4997@G4995 G4998@G4996) ((lambda (G499b@invoke-code G499c@lib*) (lambda () (begin (for-each G2c3a@G2acf@invoke-library G499c@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G29fb@G29a3@expanded->core G499b@invoke-code)) (void)) (eval-core (G29fb@G29a3@expanded->core G499b@invoke-code))))) G4998@G4996 G4997@G4995))))) (set! G3185@pre-compile-r6rs-top-level (lambda (G499f@x*) (call-with-values (lambda () (G3107@top-level-expander G499f@x*)) (lambda (G49a3@G49a1 G49a4@G49a2) ((lambda (G49a7@invoke-code G49a8@lib*) (begin (for-each G2c3a@G2acf@invoke-library G49a8@lib*) (G2995@G289e@compile-core (G29fb@G29a3@expanded->core G49a7@invoke-code)))) G49a4@G49a2 G49a3@G49a1))))) (set! G3187@interaction-environment ((lambda (G49ab@the-env) (lambda () ((lambda (G49ad@t) (if G49ad@t G49ad@t (begin '#f ((lambda (G49af@lib G49b0@rib) (begin ((lambda (G49b3@subst) (begin (G2de4@set-rib-sym*! G49b0@rib (map car G49b3@subst)) (G2de6@set-rib-mark**! G49b0@rib (map (lambda (G49b5@x) G2db9@top-mark*) G49b3@subst)) (G2de8@set-rib-label*! G49b0@rib (map cdr G49b3@subst)))) (G2c0f@G2a79@library-subst G49af@lib)) ((lambda (G49b7@env) (begin (set! G49ab@the-env G49b7@env) G49b7@env)) (G3137@make-interaction-env G49b0@rib '() '())))) (G2c33@G2ac1@find-library-by-name '(mosh interaction)) (G2df0@make-cache-rib))))) G49ab@the-env))) '#f)) (set! G3189@top-level-context (G2997@G28a2@make-parameter '#f)) (begin (set! G4ac6@G3189@top-level-context G3189@top-level-context) (set! G4ac5@G3187@interaction-environment G3187@interaction-environment) (set! G4ac4@G3185@pre-compile-r6rs-top-level G3185@pre-compile-r6rs-top-level) (set! G4ac3@G3183@compile-r6rs-top-level G3183@compile-r6rs-top-level) (set! G4ac2@G3181@syntax->datum G3181@syntax->datum) (set! G4ac1@G317f@datum->syntax G317f@datum->syntax) (set! G4ac0@G317d@identifier? G317d@identifier?) (set! G4abf@G317b@syntax-violation G317b@syntax-violation) (set! G4abe@G3179@syntax-violation* G3179@syntax-violation*) (set! G4abd@G3177@extract-trace G3177@extract-trace) (set! G4abc@G3175@syntax-error G3175@syntax-error) (set! G4abb@G3173@assertion-error G3173@assertion-error) (set! G4aba@G3171@expression-position G3171@expression-position) (set! G4ab9@G316f@extract-position-condition G316f@extract-position-condition) (set! G4ab8@G316d@make-source-condition G316d@make-source-condition) (set! G4ab7@G316b@bound-identifier=? G316b@bound-identifier=?) (set! G4ab6@G3169@free-identifier=? G3169@free-identifier=?) (set! G4ab5@G3167@generate-temporaries G3167@generate-temporaries) (set! G4ab4@G3165@make-export-env/macros G3165@make-export-env/macros) (set! G4ab3@G3163@make-export-subst G3163@make-export-subst) (set! G4ab2@G3161@build-exports G3161@build-exports) (set! G4ab1@G315f@rev-map-append G315f@rev-map-append) (set! G4ab0@G315d@boot-library-expand G315d@boot-library-expand) (set! G4aaf@G315b@library-expander G315b@library-expander) (set! G4aae@G3159@eval G3159@eval) (set! G4aad@G3157@expand G3157@expand) (set! G4aac@G3155@scheme-report-environment G3155@scheme-report-environment) (set! G4aab@G3153@null-environment G3153@null-environment) (set! G4aaa@G3151@environment G3151@environment) (set! G4aa9@G314f@environment-symbols G314f@environment-symbols) (set! G4aa8@G314d@environment? G314d@environment?) (set! G4aa7@G314b@parse-binding G314b@parse-binding) (set! G4aa6@G3149@environment-bindings G3149@environment-bindings) (set! G4aa5@G3147@interaction-environment-symbols G3147@interaction-environment-symbols) (set! G4aa4@G3145@rp G3145@rp) (set! G4aa3@G3143@set-interaction-env-locs! G3143@set-interaction-env-locs!) (set! G4aa2@G3141@set-interaction-env-r! G3141@set-interaction-env-r!) (set! G4aa1@G313f@set-interaction-env-rib! G313f@set-interaction-env-rib!) (set! G4aa0@G313d@interaction-env-locs G313d@interaction-env-locs) (set! G4a9f@G313b@interaction-env-r G313b@interaction-env-r) (set! G4a9e@G3139@interaction-env-rib G3139@interaction-env-rib) (set! G4a9d@G3137@make-interaction-env G3137@make-interaction-env) (set! G4a9c@G3135@interaction-env? G3135@interaction-env?) (set! G4a9b@G3130@G3128 G3130@G3128) (set! G4a9a@G312e@G3129 G312e@G3129) (set! G4a99@G312c@G3127 G312c@G3127) (set! G4a98@G3126@rp G3126@rp) (set! G4a97@G3124@set-env-itc! G3124@set-env-itc!) (set! G4a96@G3122@set-env-labels! G3122@set-env-labels!) (set! G4a95@G3120@set-env-names! G3120@set-env-names!) (set! G4a94@G311e@env-itc G311e@env-itc) (set! G4a93@G311c@env-labels G311c@env-labels) (set! G4a92@G311a@env-names G311a@env-names) (set! G4a91@G3118@make-env G3118@make-env) (set! G4a90@G3116@env? G3116@env?) (set! G4a8f@G3111@G3109 G3111@G3109) (set! G4a8e@G310f@G310a G310f@G310a) (set! G4a8d@G310d@G3108 G310d@G3108) (set! G4a8c@G3107@top-level-expander G3107@top-level-expander) (set! G4a8b@G3105@parse-top-level-program G3105@parse-top-level-program) (set! G4a8a@G3103@core-library-expander G3103@core-library-expander) (set! G4a89@G3101@library-body-expander G3101@library-body-expander) (set! G4a88@G30ff@chi-interaction-expr G30ff@chi-interaction-expr) (set! G4a87@G30fd@chi-library-internal G30fd@chi-library-internal) (set! G4a86@G30fb@imp-collector G30fb@imp-collector) (set! G4a85@G30f9@vis-collector G30f9@vis-collector) (set! G4a84@G30f7@inv-collector G30f7@inv-collector) (set! G4a83@G30f5@make-collector G30f5@make-collector) (set! G4a82@G30f3@make-top-rib G30f3@make-top-rib) (set! G4a81@G30f1@parse-import-spec* G30f1@parse-import-spec*) (set! G4a80@G30ef@parse-library G30ef@parse-library) (set! G4a7f@G30ed@parse-library-name G30ed@parse-library-name) (set! G4a7e@G30eb@parse-exports G30eb@parse-exports) (set! G4a7d@G30e9@expand-transformer G30e9@expand-transformer) (set! G4a7c@G30e7@chi-body* G30e7@chi-body*) (set! G4a7b@G30e5@chi-internal-module G30e5@chi-internal-module) (set! G4a7a@G30e3@module-interface-exp-id* G30e3@module-interface-exp-id*) (set! G4a79@G30e1@set-module-interface-exp-lab-vec! G30e1@set-module-interface-exp-lab-vec!) (set! G4a78@G30df@set-module-interface-exp-id-vec! G30df@set-module-interface-exp-id-vec!) (set! G4a77@G30dd@set-module-interface-first-mark! G30dd@set-module-interface-first-mark!) (set! G4a76@G30db@module-interface-exp-lab-vec G30db@module-interface-exp-lab-vec) (set! G4a75@G30d9@module-interface-exp-id-vec G30d9@module-interface-exp-id-vec) (set! G4a74@G30d7@module-interface-first-mark G30d7@module-interface-first-mark) (set! G4a73@G30d5@make-module-interface G30d5@make-module-interface) (set! G4a72@G30d3@module-interface? G30d3@module-interface?) (set! G4a71@G30ce@G30c6 G30ce@G30c6) (set! G4a70@G30cc@G30c7 G30cc@G30c7) (set! G4a6f@G30ca@G30c5 G30ca@G30c5) (set! G4a6e@G30c4@parse-module G30c4@parse-module) (set! G4a6d@G30c2@chi-internal G30c2@chi-internal) (set! G4a6c@G30c0@find-dups G30c0@find-dups) (set! G4a6b@G30be@find-bound=? G30be@find-bound=?) (set! G4a6a@G30bc@chi-rhs* G30bc@chi-rhs*) (set! G4a69@G30ba@expand-interaction-rhs*/init* G30ba@expand-interaction-rhs*/init*) (set! G4a68@G30b8@chi-rhs G30b8@chi-rhs) (set! G4a67@G30b6@chi-defun G30b6@chi-defun) (set! G4a66@G30b4@chi-lambda-clause* G30b4@chi-lambda-clause*) (set! G4a65@G30b2@chi-lambda-clause G30b2@chi-lambda-clause) (set! G4a64@G30b0@verify-formals G30b0@verify-formals) (set! G4a63@G30ae@chi-set! G30ae@chi-set!) (set! G4a62@G30ac@chi-expr G30ac@chi-expr) (set! G4a61@G30aa@chi-application G30aa@chi-application) (set! G4a60@G30a8@chi-expr* G30a8@chi-expr*) (set! G4a5f@G30a6@chi-global-macro G30a6@chi-global-macro) (set! G4a5e@G30a4@chi-local-macro G30a4@chi-local-macro) (set! G4a5d@G30a2@chi-macro G30a2@chi-macro) (set! G4a5c@G30a0@do-macro-call G30a0@do-macro-call) (set! G4a5b@G309e@local-macro-transformer G309e@local-macro-transformer) (set! G4a5a@G309c@macro-transformer G309c@macro-transformer) (set! G4a59@G309a@symbol-macro G309a@symbol-macro) (set! G4a58@G3098@file-options-macro G3098@file-options-macro) (set! G4a57@G3096@core-macro-transformer G3096@core-macro-transformer) (set! G4a56@G3094@syntax-transformer G3094@syntax-transformer) (set! G4a55@G3092@ellipsis-map G3092@ellipsis-map) (set! G4a54@G3090@syntax-case-transformer G3090@syntax-case-transformer) (set! G4a53@G308e@verify-literals G308e@verify-literals) (set! G4a52@G308c@underscore? G308c@underscore?) (set! G4a51@G308a@ellipsis? G308a@ellipsis?) (set! G4a50@G3088@syntax-dispatch G3088@syntax-dispatch) (set! G4a4f@G3086@convert-pattern G3086@convert-pattern) (set! G4a4e@G3084@foreign-call-transformer G3084@foreign-call-transformer) (set! G4a4d@G3082@parameterize-macro G3082@parameterize-macro) (set! G4a4c@G3080@incorrect-usage-macro G3080@incorrect-usage-macro) (set! G4a4b@G307e@define-condition-type-macro G307e@define-condition-type-macro) (set! G4a4a@G307c@define-record-type-macro G307c@define-record-type-macro) (set! G4a49@G307a@define-struct-macro G307a@define-struct-macro) (set! G4a48@G3078@quasisyntax-macro G3078@quasisyntax-macro) (set! G4a47@G3076@quasiquote-macro G3076@quasiquote-macro) (set! G4a46@G3074@syntax-rules-macro G3074@syntax-rules-macro) (set! G4a45@G3072@include-into-macro G3072@include-into-macro) (set! G4a44@G3070@include-macro G3070@include-macro) (set! G4a43@G306e@do-include G306e@do-include) (set! G4a42@G306c@cond-macro G306c@cond-macro) (set! G4a41@G306a@and-macro G306a@and-macro) (set! G4a40@G3068@or-macro G3068@or-macro) (set! G4a3f@G3066@let*-macro G3066@let*-macro) (set! G4a3e@G3064@do-macro G3064@do-macro) (set! G4a3d@G3062@identifier-syntax-macro G3062@identifier-syntax-macro) (set! G4a3c@G3060@endianness-macro G3060@endianness-macro) (set! G4a3b@G305e@assert-macro G305e@assert-macro) (set! G4a3a@G305c@delay-macro G305c@delay-macro) (set! G4a39@G305a@time-macro G305a@time-macro) (set! G4a38@G3058@define-enumeration-macro G3058@define-enumeration-macro) (set! G4a37@G3056@guard-macro G3056@guard-macro) (set! G4a36@G3054@trace-letrec-syntax-macro G3054@trace-letrec-syntax-macro) (set! G4a35@G3052@trace-let-syntax-macro G3052@trace-let-syntax-macro) (set! G4a34@G3050@trace-let/rec-syntax G3050@trace-let/rec-syntax) (set! G4a33@G304e@trace-define-syntax-macro G304e@trace-define-syntax-macro) (set! G4a32@G304c@trace-define-macro G304c@trace-define-macro) (set! G4a31@G304a@trace-lambda-macro G304a@trace-lambda-macro) (set! G4a30@G3048@let*-values-macro G3048@let*-values-macro) (set! G4a2f@G3046@let-values-macro G3046@let-values-macro) (set! G4a2e@G3044@let-macro G3044@let-macro) (set! G4a2d@G3042@invalid-fmls-error G3042@invalid-fmls-error) (set! G4a2c@G3040@with-syntax-macro G3040@with-syntax-macro) (set! G4a2b@G303e@bless G303e@bless) (set! G4a2a@G303c@lambda-transformer G303c@lambda-transformer) (set! G4a29@G303a@case-lambda-transformer G303a@case-lambda-transformer) (set! G4a28@G3038@quote-transformer G3038@quote-transformer) (set! G4a27@G3036@case-macro G3036@case-macro) (set! G4a26@G3034@if-transformer G3034@if-transformer) (set! G4a25@G3032@unless-macro G3032@unless-macro) (set! G4a24@G3030@when-macro G3030@when-macro) (set! G4a23@G302e@record-constructor-descriptor-transformer G302e@record-constructor-descriptor-transformer) (set! G4a22@G302c@record-type-descriptor-transformer G302c@record-type-descriptor-transformer) (set! G4a21@G302a@type-descriptor-transformer G302a@type-descriptor-transformer) (set! G4a20@G3028@fluid-let-syntax-transformer G3028@fluid-let-syntax-transformer) (set! G4a1f@G3026@letrec*-transformer G3026@letrec*-transformer) (set! G4a1e@G3024@letrec-transformer G3024@letrec-transformer) (set! G4a1d@G3022@letrec-helper G3022@letrec-helper) (set! G4a1c@G3020@add-lexicals G3020@add-lexicals) (set! G4a1b@G301e@add-lexical G301e@add-lexical) (set! G4a1a@G301c@set-lexical-mutable! G301c@set-lexical-mutable!) (set! G4a19@G301a@lexical-mutable? G301a@lexical-mutable?) (set! G4a18@G3018@lexical-var G3018@lexical-var) (set! G4a17@G3016@scheme-stx G3016@scheme-stx) (set! G4a16@G3014@scheme-stx-hashtable G3014@scheme-stx-hashtable) (set! G4a15@G3012@parse-define-syntax G3012@parse-define-syntax) (set! G4a14@G3010@parse-define G3010@parse-define) (set! G4a13@G2e8c@make-eval-transformer G2e8c@make-eval-transformer) (set! G4a12@G2e8a@variable-transformer-procedure G2e8a@variable-transformer-procedure) (set! G4a11@G2e88@variable-transformer? G2e88@variable-transformer?) (set! G4a10@G2e86@make-variable-transformer G2e86@make-variable-transformer) (set! G4a0f@G2e84@sanitize-binding G2e84@sanitize-binding) (set! G4a0e@G2e6d@syntax-type G2e6d@syntax-type) (set! G4a0d@G2e6b@raise-unbound-error G2e6b@raise-unbound-error) (set! G4a0c@G2e69@binding-value G2e69@binding-value) (set! G4a0b@G2e67@binding-type G2e67@binding-type) (set! G4a0a@G2e65@make-binding G2e65@make-binding) (set! G4a09@G2e63@label->binding G2e63@label->binding) (set! G4a08@G2e61@id->real-label G2e61@id->real-label) (set! G4a07@G2e5f@id->label G2e5f@id->label) (set! G4a06@G2e5d@same-marks*? G2e5d@same-marks*?) (set! G4a05@G2e5b@stx->datum G2e5b@stx->datum) (set! G4a04@G2e59@strip G2e59@strip) (set! G4a03@G2e57@strip-annotations G2e57@strip-annotations) (set! G4a02@G2e55@self-evaluating? G2e55@self-evaluating?) (set! G4a01@G2e53@bound-id-member? G2e53@bound-id-member?) (set! G4a00@G2e51@distinct-bound-ids? G2e51@distinct-bound-ids?) (set! G49ff@G2e4f@valid-bound-ids? G2e4f@valid-bound-ids?) (set! G49fe@G2e4d@free-id=? G2e4d@free-id=?) (set! G49fd@G2e4b@bound-id=? G2e4b@bound-id=?) (set! G49fc@G2e49@same-marks? G2e49@same-marks?) (set! G49fb@G2e47@id->sym G2e47@id->sym) (set! G49fa@G2e45@id? G2e45@id?) (set! G49f9@G2e43@syntax->list G2e43@syntax->list) (set! G49f8@G2e41@syntax-cdr G2e41@syntax-cdr) (set! G49f7@G2e3f@syntax-car G2e3f@syntax-car) (set! G49f6@G2e3d@syntax-list? G2e3d@syntax-list?) (set! G49f5@G2e3b@syntax-null? G2e3b@syntax-null?) (set! G49f4@G2e39@syntax-vector? G2e39@syntax-vector?) (set! G49f3@G2e37@syntax-pair? G2e37@syntax-pair?) (set! G49f2@G2e35@syntax-vector->list G2e35@syntax-vector->list) (set! G49f1@G2e33@syntax-kind? G2e33@syntax-kind?) (set! G49f0@G2e31@add-subst G2e31@add-subst) (set! G49ef@G2e2f@add-mark G2e2f@add-mark) (set! G49ee@G2e2d@mkstx G2e2d@mkstx) (set! G49ed@G2e2b@join-wraps G2e2b@join-wraps) (set! G49ec@G2e29@anti-mark? G2e29@anti-mark?) (set! G49eb@G2e27@anti-mark G2e27@anti-mark) (set! G49ea@G2e25@gen-mark G2e25@gen-mark) (set! G49e9@G2e23@datum->stx G2e23@datum->stx) (set! G49e8@G2e21@rp G2e21@rp) (set! G49e7@G2e1f@set-stx-ae*! G2e1f@set-stx-ae*!) (set! G49e6@G2e1d@set-stx-subst*! G2e1d@set-stx-subst*!) (set! G49e5@G2e1b@set-stx-mark*! G2e1b@set-stx-mark*!) (set! G49e4@G2e19@set-stx-expr! G2e19@set-stx-expr!) (set! G49e3@G2e17@stx-ae* G2e17@stx-ae*) (set! G49e2@G2e15@stx-subst* G2e15@stx-subst*) (set! G49e1@G2e13@stx-mark* G2e13@stx-mark*) (set! G49e0@G2e11@stx-expr G2e11@stx-expr) (set! G49df@G2e0f@make-stx G2e0f@make-stx) (set! G49de@G2e0d@stx? G2e0d@stx?) (set! G49dd@G2e08@G2e00 G2e08@G2e00) (set! G49dc@G2e06@G2e01 G2e06@G2e01) (set! G49db@G2e04@G2dff G2e04@G2dff) (set! G49da@G2dfe@make-full-rib G2dfe@make-full-rib) (set! G49d9@G2dfc@unseal-rib! G2dfc@unseal-rib!) (set! G49d8@G2dfa@seal-rib! G2dfa@seal-rib!) (set! G49d7@G2df8@make-rib-map G2df8@make-rib-map) (set! G49d6@G2df6@extend-rib/nc! G2df6@extend-rib/nc!) (set! G49d5@G2df4@extend-rib! G2df4@extend-rib!) (set! G49d4@G2df2@find-label G2df2@find-label) (set! G49d3@G2df0@make-cache-rib G2df0@make-cache-rib) (set! G49d2@G2dee@make-empty-rib G2dee@make-empty-rib) (set! G49d1@G2dec@set-rib-cache! G2dec@set-rib-cache!) (set! G49d0@G2dea@set-rib-sealed/freq! G2dea@set-rib-sealed/freq!) (set! G49cf@G2de8@set-rib-label*! G2de8@set-rib-label*!) (set! G49ce@G2de6@set-rib-mark**! G2de6@set-rib-mark**!) (set! G49cd@G2de4@set-rib-sym*! G2de4@set-rib-sym*!) (set! G49cc@G2de2@rib-cache G2de2@rib-cache) (set! G49cb@G2de0@rib-sealed/freq G2de0@rib-sealed/freq) (set! G49ca@G2dde@rib-label* G2dde@rib-label*) (set! G49c9@G2ddc@rib-mark** G2ddc@rib-mark**) (set! G49c8@G2dda@rib-sym* G2dda@rib-sym*) (set! G49c7@G2dd8@make-rib G2dd8@make-rib) (set! G49c6@G2dd6@rib? G2dd6@rib?) (set! G49c5@G2dd1@G2dc9 G2dd1@G2dc9) (set! G49c4@G2dcf@G2dca G2dcf@G2dca) (set! G49c3@G2dcd@G2dc8 G2dcd@G2dc8) (set! G49c2@G2dc7@gen-define-label G2dc7@gen-define-label) (set! G49c1@G2dc5@gen-define-label+loc G2dc5@gen-define-label+loc) (set! G49c0@G2dc3@gen-top-level-label G2dc3@gen-top-level-label) (set! G49bf@G2dc1@gen-label G2dc1@gen-label) (set! G49be@G2dbf@gen-global G2dbf@gen-global) (set! G49bd@G2dbd@gen-lexical G2dbd@gen-lexical) (set! G49bc@G2dbb@top-marked? G2dbb@top-marked?) (set! G49bb@G2db9@top-mark* G2db9@top-mark*) (set! G49ba@G2db4@set-union G2db4@set-union) (set! G49b9@G2db2@set-cons G2db2@set-cons) (G2c30@G2abb@current-library-expander G315b@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4ad0@G4acb G4ad2@G4acd G4ad4@G4acc G4ad9@&condition? G4adb@make-&condition G4add@&condition-rtd G4adf@&condition-rcd G4ae7@G4ae2 G4ae9@G4ae4 G4aeb@G4ae3 G4af0@G4ae1 G4af2@make-message-condition G4af4@G4ae0 G4af6@message-condition? G4af8@condition-message G4aff@G4afa G4b01@G4afc G4b03@G4afb G4b08@G4af9 G4b0a@make-warning G4b0c@warning? G4b13@G4b0e G4b15@G4b10 G4b17@G4b0f G4b1c@G4b0d G4b1e@make-serious-condition G4b20@serious-condition? G4b27@G4b22 G4b29@G4b24 G4b2b@G4b23 G4b30@G4b21 G4b32@make-error G4b34@error? G4b3b@G4b36 G4b3d@G4b38 G4b3f@G4b37 G4b44@G4b35 G4b46@make-violation G4b48@violation? G4b4f@G4b4a G4b51@G4b4c G4b53@G4b4b G4b58@G4b49 G4b5a@make-assertion-violation G4b5c@assertion-violation? G4b64@G4b5f G4b66@G4b61 G4b68@G4b60 G4b6d@G4b5e G4b6f@make-irritants-condition G4b71@G4b5d G4b73@irritants-condition? G4b75@condition-irritants G4b7d@G4b78 G4b7f@G4b7a G4b81@G4b79 G4b86@G4b77 G4b88@make-who-condition G4b8a@G4b76 G4b8c@who-condition? G4b8e@condition-who G4b95@G4b90 G4b97@G4b92 G4b99@G4b91 G4b9e@G4b8f G4ba0@make-non-continuable-violation G4ba2@non-continuable-violation? G4ba9@G4ba4 G4bab@G4ba6 G4bad@G4ba5 G4bb2@G4ba3 G4bb4@make-implementation-restriction-violation G4bb6@implementation-restriction-violation? G4bbd@G4bb8 G4bbf@G4bba G4bc1@G4bb9 G4bc6@G4bb7 G4bc8@make-lexical-violation G4bca@lexical-violation? G4bd3@G4bce G4bd5@G4bd0 G4bd7@G4bcf G4bdc@G4bcd G4bde@make-syntax-violation G4be0@G4bcb G4be2@G4bcc G4be4@syntax-violation? G4be6@syntax-violation-form G4be8@syntax-violation-subform G4bef@G4bea G4bf1@G4bec G4bf3@G4beb G4bf8@G4be9 G4bfa@make-undefined-violation G4bfc@undefined-violation?) (begin (set! G4ad0@G4acb (make-record-type-descriptor '&condition '#f 'G4ace '#f '#f '#())) (set! G4ad2@G4acd '#f) (set! G4ad4@G4acc (make-record-constructor-descriptor G4ad0@G4acb '#f G4ad2@G4acd)) (set! G4ad9@&condition? (record-predicate G4ad0@G4acb)) (set! G4adb@make-&condition (record-constructor G4ad4@G4acc)) (set! G4add@&condition-rtd G4ad0@G4acb) (set! G4adf@&condition-rcd G4ad4@G4acc) (set! G4ae7@G4ae2 (make-record-type-descriptor '&message G4ad0@G4acb 'G4ae5 '#f '#f '#((immutable message)))) (set! G4ae9@G4ae4 '#f) (set! G4aeb@G4ae3 (make-record-constructor-descriptor G4ae7@G4ae2 G4ad4@G4acc G4ae9@G4ae4)) (set! G4af0@G4ae1 (record-predicate G4ae7@G4ae2)) (set! G4af2@make-message-condition (record-constructor G4aeb@G4ae3)) (set! G4af4@G4ae0 (record-accessor G4ae7@G4ae2 '0)) (set! G4af6@message-condition? (condition-predicate G4ae7@G4ae2)) (set! G4af8@condition-message (condition-accessor G4ae7@G4ae2 G4af4@G4ae0)) (set! G4aff@G4afa (make-record-type-descriptor '&warning G4ad0@G4acb 'G4afd '#f '#f '#())) (set! G4b01@G4afc '#f) (set! G4b03@G4afb (make-record-constructor-descriptor G4aff@G4afa G4ad4@G4acc G4b01@G4afc)) (set! G4b08@G4af9 (record-predicate G4aff@G4afa)) (set! G4b0a@make-warning (record-constructor G4b03@G4afb)) (set! G4b0c@warning? (condition-predicate G4aff@G4afa)) (set! G4b13@G4b0e (make-record-type-descriptor '&serious G4ad0@G4acb 'G4b11 '#f '#f '#())) (set! G4b15@G4b10 '#f) (set! G4b17@G4b0f (make-record-constructor-descriptor G4b13@G4b0e G4ad4@G4acc G4b15@G4b10)) (set! G4b1c@G4b0d (record-predicate G4b13@G4b0e)) (set! G4b1e@make-serious-condition (record-constructor G4b17@G4b0f)) (set! G4b20@serious-condition? (condition-predicate G4b13@G4b0e)) (set! G4b27@G4b22 (make-record-type-descriptor '&error G4b13@G4b0e 'G4b25 '#f '#f '#())) (set! G4b29@G4b24 '#f) (set! G4b2b@G4b23 (make-record-constructor-descriptor G4b27@G4b22 G4b17@G4b0f G4b29@G4b24)) (set! G4b30@G4b21 (record-predicate G4b27@G4b22)) (set! G4b32@make-error (record-constructor G4b2b@G4b23)) (set! G4b34@error? (condition-predicate G4b27@G4b22)) (set! G4b3b@G4b36 (make-record-type-descriptor '&violation G4b13@G4b0e 'G4b39 '#f '#f '#())) (set! G4b3d@G4b38 '#f) (set! G4b3f@G4b37 (make-record-constructor-descriptor G4b3b@G4b36 G4b17@G4b0f G4b3d@G4b38)) (set! G4b44@G4b35 (record-predicate G4b3b@G4b36)) (set! G4b46@make-violation (record-constructor G4b3f@G4b37)) (set! G4b48@violation? (condition-predicate G4b3b@G4b36)) (set! G4b4f@G4b4a (make-record-type-descriptor '&assertion G4b3b@G4b36 'G4b4d '#f '#f '#())) (set! G4b51@G4b4c '#f) (set! G4b53@G4b4b (make-record-constructor-descriptor G4b4f@G4b4a G4b3f@G4b37 G4b51@G4b4c)) (set! G4b58@G4b49 (record-predicate G4b4f@G4b4a)) (set! G4b5a@make-assertion-violation (record-constructor G4b53@G4b4b)) (set! G4b5c@assertion-violation? (condition-predicate G4b4f@G4b4a)) (set! G4b64@G4b5f (make-record-type-descriptor '&irritants G4ad0@G4acb 'G4b62 '#f '#f '#((immutable irritants)))) (set! G4b66@G4b61 '#f) (set! G4b68@G4b60 (make-record-constructor-descriptor G4b64@G4b5f G4ad4@G4acc G4b66@G4b61)) (set! G4b6d@G4b5e (record-predicate G4b64@G4b5f)) (set! G4b6f@make-irritants-condition (record-constructor G4b68@G4b60)) (set! G4b71@G4b5d (record-accessor G4b64@G4b5f '0)) (set! G4b73@irritants-condition? (condition-predicate G4b64@G4b5f)) (set! G4b75@condition-irritants (condition-accessor G4b64@G4b5f G4b71@G4b5d)) (set! G4b7d@G4b78 (make-record-type-descriptor '&who G4ad0@G4acb 'G4b7b '#f '#f '#((immutable who)))) (set! G4b7f@G4b7a '#f) (set! G4b81@G4b79 (make-record-constructor-descriptor G4b7d@G4b78 G4ad4@G4acc G4b7f@G4b7a)) (set! G4b86@G4b77 (record-predicate G4b7d@G4b78)) (set! G4b88@make-who-condition (record-constructor G4b81@G4b79)) (set! G4b8a@G4b76 (record-accessor G4b7d@G4b78 '0)) (set! G4b8c@who-condition? (condition-predicate G4b7d@G4b78)) (set! G4b8e@condition-who (condition-accessor G4b7d@G4b78 G4b8a@G4b76)) (set! G4b95@G4b90 (make-record-type-descriptor '&non-continuable G4b3b@G4b36 'G4b93 '#f '#f '#())) (set! G4b97@G4b92 '#f) (set! G4b99@G4b91 (make-record-constructor-descriptor G4b95@G4b90 G4b3f@G4b37 G4b97@G4b92)) (set! G4b9e@G4b8f (record-predicate G4b95@G4b90)) (set! G4ba0@make-non-continuable-violation (record-constructor G4b99@G4b91)) (set! G4ba2@non-continuable-violation? (condition-predicate G4b95@G4b90)) (set! G4ba9@G4ba4 (make-record-type-descriptor '&implementation-restriction G4b3b@G4b36 'G4ba7 '#f '#f '#())) (set! G4bab@G4ba6 '#f) (set! G4bad@G4ba5 (make-record-constructor-descriptor G4ba9@G4ba4 G4b3f@G4b37 G4bab@G4ba6)) (set! G4bb2@G4ba3 (record-predicate G4ba9@G4ba4)) (set! G4bb4@make-implementation-restriction-violation (record-constructor G4bad@G4ba5)) (set! G4bb6@implementation-restriction-violation? (condition-predicate G4ba9@G4ba4)) (set! G4bbd@G4bb8 (make-record-type-descriptor '&lexical G4b3b@G4b36 'G4bbb '#f '#f '#())) (set! G4bbf@G4bba '#f) (set! G4bc1@G4bb9 (make-record-constructor-descriptor G4bbd@G4bb8 G4b3f@G4b37 G4bbf@G4bba)) (set! G4bc6@G4bb7 (record-predicate G4bbd@G4bb8)) (set! G4bc8@make-lexical-violation (record-constructor G4bc1@G4bb9)) (set! G4bca@lexical-violation? (condition-predicate G4bbd@G4bb8)) (set! G4bd3@G4bce (make-record-type-descriptor '&syntax G4b3b@G4b36 'G4bd1 '#f '#f '#((immutable form) (immutable subform)))) (set! G4bd5@G4bd0 '#f) (set! G4bd7@G4bcf (make-record-constructor-descriptor G4bd3@G4bce G4b3f@G4b37 G4bd5@G4bd0)) (set! G4bdc@G4bcd (record-predicate G4bd3@G4bce)) (set! G4bde@make-syntax-violation (record-constructor G4bd7@G4bcf)) (set! G4be0@G4bcb (record-accessor G4bd3@G4bce '0)) (set! G4be2@G4bcc (record-accessor G4bd3@G4bce '1)) (set! G4be4@syntax-violation? (condition-predicate G4bd3@G4bce)) (set! G4be6@syntax-violation-form (condition-accessor G4bd3@G4bce G4be0@G4bcb)) (set! G4be8@syntax-violation-subform (condition-accessor G4bd3@G4bce G4be2@G4bcc)) (set! G4bef@G4bea (make-record-type-descriptor '&undefined G4b3b@G4b36 'G4bed '#f '#f '#())) (set! G4bf1@G4bec '#f) (set! G4bf3@G4beb (make-record-constructor-descriptor G4bef@G4bea G4b3f@G4b37 G4bf1@G4bec)) (set! G4bf8@G4be9 (record-predicate G4bef@G4bea)) (set! G4bfa@make-undefined-violation (record-constructor G4bf3@G4beb)) (set! G4bfc@undefined-violation? (condition-predicate G4bef@G4bea)) (begin (set! G4c5b@G4bfc@undefined-violation? G4bfc@undefined-violation?) (set! G4c5a@G4bfa@make-undefined-violation G4bfa@make-undefined-violation) (set! G4c59@G4bf8@G4be9 G4bf8@G4be9) (set! G4c58@G4bf3@G4beb G4bf3@G4beb) (set! G4c57@G4bf1@G4bec G4bf1@G4bec) (set! G4c56@G4bef@G4bea G4bef@G4bea) (set! G4c55@G4be8@syntax-violation-subform G4be8@syntax-violation-subform) (set! G4c54@G4be6@syntax-violation-form G4be6@syntax-violation-form) (set! G4c53@G4be4@syntax-violation? G4be4@syntax-violation?) (set! G4c52@G4be2@G4bcc G4be2@G4bcc) (set! G4c51@G4be0@G4bcb G4be0@G4bcb) (set! G4c50@G4bde@make-syntax-violation G4bde@make-syntax-violation) (set! G4c4f@G4bdc@G4bcd G4bdc@G4bcd) (set! G4c4e@G4bd7@G4bcf G4bd7@G4bcf) (set! G4c4d@G4bd5@G4bd0 G4bd5@G4bd0) (set! G4c4c@G4bd3@G4bce G4bd3@G4bce) (set! G4c4b@G4bca@lexical-violation? G4bca@lexical-violation?) (set! G4c4a@G4bc8@make-lexical-violation G4bc8@make-lexical-violation) (set! G4c49@G4bc6@G4bb7 G4bc6@G4bb7) (set! G4c48@G4bc1@G4bb9 G4bc1@G4bb9) (set! G4c47@G4bbf@G4bba G4bbf@G4bba) (set! G4c46@G4bbd@G4bb8 G4bbd@G4bb8) (set! G4c45@G4bb6@implementation-restriction-violation? G4bb6@implementation-restriction-violation?) (set! G4c44@G4bb4@make-implementation-restriction-violation G4bb4@make-implementation-restriction-violation) (set! G4c43@G4bb2@G4ba3 G4bb2@G4ba3) (set! G4c42@G4bad@G4ba5 G4bad@G4ba5) (set! G4c41@G4bab@G4ba6 G4bab@G4ba6) (set! G4c40@G4ba9@G4ba4 G4ba9@G4ba4) (set! G4c3f@G4ba2@non-continuable-violation? G4ba2@non-continuable-violation?) (set! G4c3e@G4ba0@make-non-continuable-violation G4ba0@make-non-continuable-violation) (set! G4c3d@G4b9e@G4b8f G4b9e@G4b8f) (set! G4c3c@G4b99@G4b91 G4b99@G4b91) (set! G4c3b@G4b97@G4b92 G4b97@G4b92) (set! G4c3a@G4b95@G4b90 G4b95@G4b90) (set! G4c39@G4b8e@condition-who G4b8e@condition-who) (set! G4c38@G4b8c@who-condition? G4b8c@who-condition?) (set! G4c37@G4b8a@G4b76 G4b8a@G4b76) (set! G4c36@G4b88@make-who-condition G4b88@make-who-condition) (set! G4c35@G4b86@G4b77 G4b86@G4b77) (set! G4c34@G4b81@G4b79 G4b81@G4b79) (set! G4c33@G4b7f@G4b7a G4b7f@G4b7a) (set! G4c32@G4b7d@G4b78 G4b7d@G4b78) (set! G4c31@G4b75@condition-irritants G4b75@condition-irritants) (set! G4c30@G4b73@irritants-condition? G4b73@irritants-condition?) (set! G4c2f@G4b71@G4b5d G4b71@G4b5d) (set! G4c2e@G4b6f@make-irritants-condition G4b6f@make-irritants-condition) (set! G4c2d@G4b6d@G4b5e G4b6d@G4b5e) (set! G4c2c@G4b68@G4b60 G4b68@G4b60) (set! G4c2b@G4b66@G4b61 G4b66@G4b61) (set! G4c2a@G4b64@G4b5f G4b64@G4b5f) (set! G4c29@G4b5c@assertion-violation? G4b5c@assertion-violation?) (set! G4c28@G4b5a@make-assertion-violation G4b5a@make-assertion-violation) (set! G4c27@G4b58@G4b49 G4b58@G4b49) (set! G4c26@G4b53@G4b4b G4b53@G4b4b) (set! G4c25@G4b51@G4b4c G4b51@G4b4c) (set! G4c24@G4b4f@G4b4a G4b4f@G4b4a) (set! G4c23@G4b48@violation? G4b48@violation?) (set! G4c22@G4b46@make-violation G4b46@make-violation) (set! G4c21@G4b44@G4b35 G4b44@G4b35) (set! G4c20@G4b3f@G4b37 G4b3f@G4b37) (set! G4c1f@G4b3d@G4b38 G4b3d@G4b38) (set! G4c1e@G4b3b@G4b36 G4b3b@G4b36) (set! G4c1d@G4b34@error? G4b34@error?) (set! G4c1c@G4b32@make-error G4b32@make-error) (set! G4c1b@G4b30@G4b21 G4b30@G4b21) (set! G4c1a@G4b2b@G4b23 G4b2b@G4b23) (set! G4c19@G4b29@G4b24 G4b29@G4b24) (set! G4c18@G4b27@G4b22 G4b27@G4b22) (set! G4c17@G4b20@serious-condition? G4b20@serious-condition?) (set! G4c16@G4b1e@make-serious-condition G4b1e@make-serious-condition) (set! G4c15@G4b1c@G4b0d G4b1c@G4b0d) (set! G4c14@G4b17@G4b0f G4b17@G4b0f) (set! G4c13@G4b15@G4b10 G4b15@G4b10) (set! G4c12@G4b13@G4b0e G4b13@G4b0e) (set! G4c11@G4b0c@warning? G4b0c@warning?) (set! G4c10@G4b0a@make-warning G4b0a@make-warning) (set! G4c0f@G4b08@G4af9 G4b08@G4af9) (set! G4c0e@G4b03@G4afb G4b03@G4afb) (set! G4c0d@G4b01@G4afc G4b01@G4afc) (set! G4c0c@G4aff@G4afa G4aff@G4afa) (set! G4c0b@G4af8@condition-message G4af8@condition-message) (set! G4c0a@G4af6@message-condition? G4af6@message-condition?) (set! G4c09@G4af4@G4ae0 G4af4@G4ae0) (set! G4c08@G4af2@make-message-condition G4af2@make-message-condition) (set! G4c07@G4af0@G4ae1 G4af0@G4ae1) (set! G4c06@G4aeb@G4ae3 G4aeb@G4ae3) (set! G4c05@G4ae9@G4ae4 G4ae9@G4ae4) (set! G4c04@G4ae7@G4ae2 G4ae7@G4ae2) (set! G4c03@G4adf@&condition-rcd G4adf@&condition-rcd) (set! G4c02@G4add@&condition-rtd G4add@&condition-rtd) (set! G4c01@G4adb@make-&condition G4adb@make-&condition) (set! G4c00@G4ad9@&condition? G4ad9@&condition?) (set! G4bff@G4ad4@G4acc G4ad4@G4acc) (set! G4bfe@G4ad2@G4acd G4ad2@G4acd) (set! G4bfd@G4ad0@G4acb G4ad0@G4acb)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4c63@G4c5e G4c65@G4c60 G4c67@G4c5f G4c6c@G4c5d G4c6e@make-i/o-error G4c70@i/o-error? G4c77@G4c72 G4c79@G4c74 G4c7b@G4c73 G4c80@G4c71 G4c82@make-i/o-read-error G4c84@i/o-read-error? G4c8b@G4c86 G4c8d@G4c88 G4c8f@G4c87 G4c94@G4c85 G4c96@make-i/o-write-error G4c98@i/o-write-error? G4ca0@G4c9b G4ca2@G4c9d G4ca4@G4c9c G4ca9@G4c9a G4cab@make-i/o-invalid-position-error G4cad@G4c99 G4caf@i/o-invalid-position-error? G4cb1@i/o-error-position G4cb9@G4cb4 G4cbb@G4cb6 G4cbd@G4cb5 G4cc2@G4cb3 G4cc4@make-i/o-filename-error G4cc6@G4cb2 G4cc8@i/o-filename-error? G4cca@i/o-error-filename G4cd1@G4ccc G4cd3@G4cce G4cd5@G4ccd G4cda@G4ccb G4cdc@make-i/o-file-protection-error G4cde@i/o-file-protection-error? G4ce5@G4ce0 G4ce7@G4ce2 G4ce9@G4ce1 G4cee@G4cdf G4cf0@make-i/o-file-is-read-only-error G4cf2@i/o-file-is-read-only-error? G4cf9@G4cf4 G4cfb@G4cf6 G4cfd@G4cf5 G4d02@G4cf3 G4d04@make-i/o-file-already-exists-error G4d06@i/o-file-already-exists-error? G4d0d@G4d08 G4d0f@G4d0a G4d11@G4d09 G4d16@G4d07 G4d18@make-i/o-file-does-not-exist-error G4d1a@i/o-file-does-not-exist-error? G4d22@G4d1d G4d24@G4d1f G4d26@G4d1e G4d2b@G4d1c G4d2d@make-i/o-port-error G4d2f@G4d1b G4d31@i/o-port-error? G4d33@i/o-error-port G4d3a@G4d35 G4d3c@G4d37 G4d3e@G4d36 G4d43@G4d34 G4d45@make-i/o-decoding-error G4d47@i/o-decoding-error? G4d4f@G4d4a G4d51@G4d4c G4d53@G4d4b G4d58@G4d49 G4d5a@make-i/o-encoding-error G4d5c@G4d48 G4d5e@i/o-encoding-error? G4d60@i/o-encoding-error-char) (begin (set! G4c63@G4c5e (make-record-type-descriptor '&i/o &error-rtd 'G4c61 '#f '#f '#())) (set! G4c65@G4c60 '#f) (set! G4c67@G4c5f (make-record-constructor-descriptor G4c63@G4c5e &error-rcd G4c65@G4c60)) (set! G4c6c@G4c5d (record-predicate G4c63@G4c5e)) (set! G4c6e@make-i/o-error (record-constructor G4c67@G4c5f)) (set! G4c70@i/o-error? (condition-predicate G4c63@G4c5e)) (set! G4c77@G4c72 (make-record-type-descriptor '&i/o-read G4c63@G4c5e 'G4c75 '#f '#f '#())) (set! G4c79@G4c74 '#f) (set! G4c7b@G4c73 (make-record-constructor-descriptor G4c77@G4c72 G4c67@G4c5f G4c79@G4c74)) (set! G4c80@G4c71 (record-predicate G4c77@G4c72)) (set! G4c82@make-i/o-read-error (record-constructor G4c7b@G4c73)) (set! G4c84@i/o-read-error? (condition-predicate G4c77@G4c72)) (set! G4c8b@G4c86 (make-record-type-descriptor '&i/o-write G4c63@G4c5e 'G4c89 '#f '#f '#())) (set! G4c8d@G4c88 '#f) (set! G4c8f@G4c87 (make-record-constructor-descriptor G4c8b@G4c86 G4c67@G4c5f G4c8d@G4c88)) (set! G4c94@G4c85 (record-predicate G4c8b@G4c86)) (set! G4c96@make-i/o-write-error (record-constructor G4c8f@G4c87)) (set! G4c98@i/o-write-error? (condition-predicate G4c8b@G4c86)) (set! G4ca0@G4c9b (make-record-type-descriptor '&i/o-invalid-position G4c63@G4c5e 'G4c9e '#f '#f '#((immutable position)))) (set! G4ca2@G4c9d '#f) (set! G4ca4@G4c9c (make-record-constructor-descriptor G4ca0@G4c9b G4c67@G4c5f G4ca2@G4c9d)) (set! G4ca9@G4c9a (record-predicate G4ca0@G4c9b)) (set! G4cab@make-i/o-invalid-position-error (record-constructor G4ca4@G4c9c)) (set! G4cad@G4c99 (record-accessor G4ca0@G4c9b '0)) (set! G4caf@i/o-invalid-position-error? (condition-predicate G4ca0@G4c9b)) (set! G4cb1@i/o-error-position (condition-accessor G4ca0@G4c9b G4cad@G4c99)) (set! G4cb9@G4cb4 (make-record-type-descriptor '&i/o-filename G4c63@G4c5e 'G4cb7 '#f '#f '#((immutable filename)))) (set! G4cbb@G4cb6 '#f) (set! G4cbd@G4cb5 (make-record-constructor-descriptor G4cb9@G4cb4 G4c67@G4c5f G4cbb@G4cb6)) (set! G4cc2@G4cb3 (record-predicate G4cb9@G4cb4)) (set! G4cc4@make-i/o-filename-error (record-constructor G4cbd@G4cb5)) (set! G4cc6@G4cb2 (record-accessor G4cb9@G4cb4 '0)) (set! G4cc8@i/o-filename-error? (condition-predicate G4cb9@G4cb4)) (set! G4cca@i/o-error-filename (condition-accessor G4cb9@G4cb4 G4cc6@G4cb2)) (set! G4cd1@G4ccc (make-record-type-descriptor '&i/o-file-protection G4c63@G4c5e 'G4ccf '#f '#f '#())) (set! G4cd3@G4cce '#f) (set! G4cd5@G4ccd (make-record-constructor-descriptor G4cd1@G4ccc G4c67@G4c5f G4cd3@G4cce)) (set! G4cda@G4ccb (record-predicate G4cd1@G4ccc)) (set! G4cdc@make-i/o-file-protection-error (record-constructor G4cd5@G4ccd)) (set! G4cde@i/o-file-protection-error? (condition-predicate G4cd1@G4ccc)) (set! G4ce5@G4ce0 (make-record-type-descriptor '&i/o-file-is-read-only G4cd1@G4ccc 'G4ce3 '#f '#f '#())) (set! G4ce7@G4ce2 '#f) (set! G4ce9@G4ce1 (make-record-constructor-descriptor G4ce5@G4ce0 G4cd5@G4ccd G4ce7@G4ce2)) (set! G4cee@G4cdf (record-predicate G4ce5@G4ce0)) (set! G4cf0@make-i/o-file-is-read-only-error (record-constructor G4ce9@G4ce1)) (set! G4cf2@i/o-file-is-read-only-error? (condition-predicate G4ce5@G4ce0)) (set! G4cf9@G4cf4 (make-record-type-descriptor '&i/o-file-already-exists G4cb9@G4cb4 'G4cf7 '#f '#f '#())) (set! G4cfb@G4cf6 '#f) (set! G4cfd@G4cf5 (make-record-constructor-descriptor G4cf9@G4cf4 G4cbd@G4cb5 G4cfb@G4cf6)) (set! G4d02@G4cf3 (record-predicate G4cf9@G4cf4)) (set! G4d04@make-i/o-file-already-exists-error (record-constructor G4cfd@G4cf5)) (set! G4d06@i/o-file-already-exists-error? (condition-predicate G4cf9@G4cf4)) (set! G4d0d@G4d08 (make-record-type-descriptor '&i/o-file-does-not-exist G4cb9@G4cb4 'G4d0b '#f '#f '#())) (set! G4d0f@G4d0a '#f) (set! G4d11@G4d09 (make-record-constructor-descriptor G4d0d@G4d08 G4cbd@G4cb5 G4d0f@G4d0a)) (set! G4d16@G4d07 (record-predicate G4d0d@G4d08)) (set! G4d18@make-i/o-file-does-not-exist-error (record-constructor G4d11@G4d09)) (set! G4d1a@i/o-file-does-not-exist-error? (condition-predicate G4d0d@G4d08)) (set! G4d22@G4d1d (make-record-type-descriptor '&i/o-port G4c63@G4c5e 'G4d20 '#f '#f '#((immutable port)))) (set! G4d24@G4d1f '#f) (set! G4d26@G4d1e (make-record-constructor-descriptor G4d22@G4d1d G4c67@G4c5f G4d24@G4d1f)) (set! G4d2b@G4d1c (record-predicate G4d22@G4d1d)) (set! G4d2d@make-i/o-port-error (record-constructor G4d26@G4d1e)) (set! G4d2f@G4d1b (record-accessor G4d22@G4d1d '0)) (set! G4d31@i/o-port-error? (condition-predicate G4d22@G4d1d)) (set! G4d33@i/o-error-port (condition-accessor G4d22@G4d1d G4d2f@G4d1b)) (set! G4d3a@G4d35 (make-record-type-descriptor '&i/o-decoding G4d22@G4d1d 'G4d38 '#f '#f '#())) (set! G4d3c@G4d37 '#f) (set! G4d3e@G4d36 (make-record-constructor-descriptor G4d3a@G4d35 G4d26@G4d1e G4d3c@G4d37)) (set! G4d43@G4d34 (record-predicate G4d3a@G4d35)) (set! G4d45@make-i/o-decoding-error (record-constructor G4d3e@G4d36)) (set! G4d47@i/o-decoding-error? (condition-predicate G4d3a@G4d35)) (set! G4d4f@G4d4a (make-record-type-descriptor '&i/o-encoding G4d22@G4d1d 'G4d4d '#f '#f '#((immutable char)))) (set! G4d51@G4d4c '#f) (set! G4d53@G4d4b (make-record-constructor-descriptor G4d4f@G4d4a G4d26@G4d1e G4d51@G4d4c)) (set! G4d58@G4d49 (record-predicate G4d4f@G4d4a)) (set! G4d5a@make-i/o-encoding-error (record-constructor G4d53@G4d4b)) (set! G4d5c@G4d48 (record-accessor G4d4f@G4d4a '0)) (set! G4d5e@i/o-encoding-error? (condition-predicate G4d4f@G4d4a)) (set! G4d60@i/o-encoding-error-char (condition-accessor G4d4f@G4d4a G4d5c@G4d48)) (begin (set! G4db0@G4d60@i/o-encoding-error-char G4d60@i/o-encoding-error-char) (set! G4daf@G4d5e@i/o-encoding-error? G4d5e@i/o-encoding-error?) (set! G4dae@G4d5c@G4d48 G4d5c@G4d48) (set! G4dad@G4d5a@make-i/o-encoding-error G4d5a@make-i/o-encoding-error) (set! G4dac@G4d58@G4d49 G4d58@G4d49) (set! G4dab@G4d53@G4d4b G4d53@G4d4b) (set! G4daa@G4d51@G4d4c G4d51@G4d4c) (set! G4da9@G4d4f@G4d4a G4d4f@G4d4a) (set! G4da8@G4d47@i/o-decoding-error? G4d47@i/o-decoding-error?) (set! G4da7@G4d45@make-i/o-decoding-error G4d45@make-i/o-decoding-error) (set! G4da6@G4d43@G4d34 G4d43@G4d34) (set! G4da5@G4d3e@G4d36 G4d3e@G4d36) (set! G4da4@G4d3c@G4d37 G4d3c@G4d37) (set! G4da3@G4d3a@G4d35 G4d3a@G4d35) (set! G4da2@G4d33@i/o-error-port G4d33@i/o-error-port) (set! G4da1@G4d31@i/o-port-error? G4d31@i/o-port-error?) (set! G4da0@G4d2f@G4d1b G4d2f@G4d1b) (set! G4d9f@G4d2d@make-i/o-port-error G4d2d@make-i/o-port-error) (set! G4d9e@G4d2b@G4d1c G4d2b@G4d1c) (set! G4d9d@G4d26@G4d1e G4d26@G4d1e) (set! G4d9c@G4d24@G4d1f G4d24@G4d1f) (set! G4d9b@G4d22@G4d1d G4d22@G4d1d) (set! G4d9a@G4d1a@i/o-file-does-not-exist-error? G4d1a@i/o-file-does-not-exist-error?) (set! G4d99@G4d18@make-i/o-file-does-not-exist-error G4d18@make-i/o-file-does-not-exist-error) (set! G4d98@G4d16@G4d07 G4d16@G4d07) (set! G4d97@G4d11@G4d09 G4d11@G4d09) (set! G4d96@G4d0f@G4d0a G4d0f@G4d0a) (set! G4d95@G4d0d@G4d08 G4d0d@G4d08) (set! G4d94@G4d06@i/o-file-already-exists-error? G4d06@i/o-file-already-exists-error?) (set! G4d93@G4d04@make-i/o-file-already-exists-error G4d04@make-i/o-file-already-exists-error) (set! G4d92@G4d02@G4cf3 G4d02@G4cf3) (set! G4d91@G4cfd@G4cf5 G4cfd@G4cf5) (set! G4d90@G4cfb@G4cf6 G4cfb@G4cf6) (set! G4d8f@G4cf9@G4cf4 G4cf9@G4cf4) (set! G4d8e@G4cf2@i/o-file-is-read-only-error? G4cf2@i/o-file-is-read-only-error?) (set! G4d8d@G4cf0@make-i/o-file-is-read-only-error G4cf0@make-i/o-file-is-read-only-error) (set! G4d8c@G4cee@G4cdf G4cee@G4cdf) (set! G4d8b@G4ce9@G4ce1 G4ce9@G4ce1) (set! G4d8a@G4ce7@G4ce2 G4ce7@G4ce2) (set! G4d89@G4ce5@G4ce0 G4ce5@G4ce0) (set! G4d88@G4cde@i/o-file-protection-error? G4cde@i/o-file-protection-error?) (set! G4d87@G4cdc@make-i/o-file-protection-error G4cdc@make-i/o-file-protection-error) (set! G4d86@G4cda@G4ccb G4cda@G4ccb) (set! G4d85@G4cd5@G4ccd G4cd5@G4ccd) (set! G4d84@G4cd3@G4cce G4cd3@G4cce) (set! G4d83@G4cd1@G4ccc G4cd1@G4ccc) (set! G4d82@G4cca@i/o-error-filename G4cca@i/o-error-filename) (set! G4d81@G4cc8@i/o-filename-error? G4cc8@i/o-filename-error?) (set! G4d80@G4cc6@G4cb2 G4cc6@G4cb2) (set! G4d7f@G4cc4@make-i/o-filename-error G4cc4@make-i/o-filename-error) (set! G4d7e@G4cc2@G4cb3 G4cc2@G4cb3) (set! G4d7d@G4cbd@G4cb5 G4cbd@G4cb5) (set! G4d7c@G4cbb@G4cb6 G4cbb@G4cb6) (set! G4d7b@G4cb9@G4cb4 G4cb9@G4cb4) (set! G4d7a@G4cb1@i/o-error-position G4cb1@i/o-error-position) (set! G4d79@G4caf@i/o-invalid-position-error? G4caf@i/o-invalid-position-error?) (set! G4d78@G4cad@G4c99 G4cad@G4c99) (set! G4d77@G4cab@make-i/o-invalid-position-error G4cab@make-i/o-invalid-position-error) (set! G4d76@G4ca9@G4c9a G4ca9@G4c9a) (set! G4d75@G4ca4@G4c9c G4ca4@G4c9c) (set! G4d74@G4ca2@G4c9d G4ca2@G4c9d) (set! G4d73@G4ca0@G4c9b G4ca0@G4c9b) (set! G4d72@G4c98@i/o-write-error? G4c98@i/o-write-error?) (set! G4d71@G4c96@make-i/o-write-error G4c96@make-i/o-write-error) (set! G4d70@G4c94@G4c85 G4c94@G4c85) (set! G4d6f@G4c8f@G4c87 G4c8f@G4c87) (set! G4d6e@G4c8d@G4c88 G4c8d@G4c88) (set! G4d6d@G4c8b@G4c86 G4c8b@G4c86) (set! G4d6c@G4c84@i/o-read-error? G4c84@i/o-read-error?) (set! G4d6b@G4c82@make-i/o-read-error G4c82@make-i/o-read-error) (set! G4d6a@G4c80@G4c71 G4c80@G4c71) (set! G4d69@G4c7b@G4c73 G4c7b@G4c73) (set! G4d68@G4c79@G4c74 G4c79@G4c74) (set! G4d67@G4c77@G4c72 G4c77@G4c72) (set! G4d66@G4c70@i/o-error? G4c70@i/o-error?) (set! G4d65@G4c6e@make-i/o-error G4c6e@make-i/o-error) (set! G4d64@G4c6c@G4c5d G4c6c@G4c5d) (set! G4d63@G4c67@G4c5f G4c67@G4c5f) (set! G4d62@G4c65@G4c60 G4c65@G4c60) (set! G4d61@G4c63@G4c5e G4c63@G4c5e)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G29f8@G299d@current-primitive-locations (lambda (G5184@x) ((lambda (G5186@t) (if G5186@t (cdr G5186@t) '#f)) (assq G5184@x '((syntax-error . G4abc@G3175@syntax-error) (syntax-dispatch . G4a50@G3088@syntax-dispatch) (load . G4e4d@G4dbf@load) (interaction-environment . G4ac5@G3187@interaction-environment) (make-variable-transformer . G4a10@G2e86@make-variable-transformer) (identifier? . G4ac0@G317d@identifier?) (generate-temporaries . G4ab5@G3167@generate-temporaries) (free-identifier=? . G4ab6@G3169@free-identifier=?) (syntax->datum . G4ac2@G3181@syntax->datum) (datum->syntax . G4ac1@G317f@datum->syntax) (bound-identifier=? . G4ab7@G316b@bound-identifier=?) (make-i/o-write-error . G4d71@G4c96@make-i/o-write-error) (make-i/o-read-error . G4d6b@G4c82@make-i/o-read-error) (make-i/o-port-error . G4d9f@G4d2d@make-i/o-port-error) (make-i/o-invalid-position-error . G4d77@G4cab@make-i/o-invalid-position-error) (make-i/o-filename-error . G4d7f@G4cc4@make-i/o-filename-error) (make-i/o-file-protection-error . G4d87@G4cdc@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4d8d@G4cf0@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4d99@G4d18@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4d93@G4d04@make-i/o-file-already-exists-error) (make-i/o-error . G4d65@G4c6e@make-i/o-error) (make-i/o-encoding-error . G4dad@G4d5a@make-i/o-encoding-error) (make-i/o-decoding-error . G4da7@G4d45@make-i/o-decoding-error) (i/o-write-error? . G4d72@G4c98@i/o-write-error?) (i/o-read-error? . G4d6c@G4c84@i/o-read-error?) (i/o-port-error? . G4da1@G4d31@i/o-port-error?) (i/o-invalid-position-error? . G4d79@G4caf@i/o-invalid-position-error?) (i/o-filename-error? . G4d81@G4cc8@i/o-filename-error?) (i/o-file-protection-error? . G4d88@G4cde@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4d8e@G4cf2@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4d9a@G4d1a@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4d94@G4d06@i/o-file-already-exists-error?) (i/o-error? . G4d66@G4c70@i/o-error?) (i/o-error-port . G4da2@G4d33@i/o-error-port) (i/o-error-filename . G4d82@G4cca@i/o-error-filename) (i/o-encoding-error? . G4daf@G4d5e@i/o-encoding-error?) (i/o-encoding-error-char . G4db0@G4d60@i/o-encoding-error-char) (i/o-decoding-error? . G4da8@G4d47@i/o-decoding-error?) (scheme-report-environment . G4aac@G3155@scheme-report-environment) (null-environment . G4aab@G3153@null-environment) (command-line . G4e4a@G4db9@command-line) (eval . G4aae@G3159@eval) (environment . G4aaa@G3151@environment) (who-condition? . G4c38@G4b8c@who-condition?) (warning? . G4c11@G4b0c@warning?) (violation? . G4c23@G4b48@violation?) (undefined-violation? . G4c5b@G4bfc@undefined-violation?) (syntax-violation? . G4c53@G4be4@syntax-violation?) (syntax-violation-subform . G4c55@G4be8@syntax-violation-subform) (syntax-violation-form . G4c54@G4be6@syntax-violation-form) (syntax-violation . G4abf@G317b@syntax-violation) (serious-condition? . G4c17@G4b20@serious-condition?) (non-continuable-violation? . G4c3f@G4ba2@non-continuable-violation?) (message-condition? . G4c0a@G4af6@message-condition?) (make-who-condition . G4c36@G4b88@make-who-condition) (make-warning . G4c10@G4b0a@make-warning) (make-violation . G4c22@G4b46@make-violation) (make-undefined-violation . G4c5a@G4bfa@make-undefined-violation) (make-syntax-violation . G4c50@G4bde@make-syntax-violation) (make-serious-condition . G4c16@G4b1e@make-serious-condition) (make-non-continuable-violation . G4c3e@G4ba0@make-non-continuable-violation) (make-message-condition . G4c08@G4af2@make-message-condition) (make-lexical-violation . G4c4a@G4bc8@make-lexical-violation) (make-irritants-condition . G4c2e@G4b6f@make-irritants-condition) (make-implementation-restriction-violation . G4c44@G4bb4@make-implementation-restriction-violation) (make-error . G4c1c@G4b32@make-error) (make-assertion-violation . G4c28@G4b5a@make-assertion-violation) (lexical-violation? . G4c4b@G4bca@lexical-violation?) (irritants-condition? . G4c30@G4b73@irritants-condition?) (implementation-restriction-violation? . G4c45@G4bb6@implementation-restriction-violation?) (error? . G4c1d@G4b34@error?) (condition-who . G4c39@G4b8e@condition-who) (condition-message . G4c0b@G4af8@condition-message) (condition-irritants . G4c31@G4b75@condition-irritants) (assertion-violation? . G4c29@G4b5c@assertion-violation?)))))) (G2c38@G2acb@install-library 'G5158 '(mosh interaction) '() '() '() '() '((string-upcase . G50d6) (string-titlecase . G50d5) (string-normalize-nfkd . G50d4) (string-normalize-nfkc . G50d3) (string-normalize-nfd . G50d2) (string-normalize-nfc . G50d1) (string-foldcase . G50d0) (string-downcase . G50cf) (string-ci>? . G50ce) (string-ci>=? . G50cd) (string-ci=? . G50cc) (string-ci<? . G50cb) (string-ci<=? . G50ca) (char-whitespace? . G50c9) (char-upper-case? . G50c8) (char-title-case? . G50c7) (char-numeric? . G50c6) (char-lower-case? . G50c5) (char-general-category . G50c4) (char-upcase . G50c3) (char-titlecase . G50c2) (char-foldcase . G50c1) (char-downcase . G50c0) (char-ci>? . G50bf) (char-ci>=? . G50be) (char-ci=? . G50bd) (char-ci<? . G50bc) (char-ci<=? . G50bb) (char-alphabetic? . G50ba) (make-variable-transformer . G2e85) (identifier? . G317c) (generate-temporaries . G3166) (free-identifier=? . G3168) (syntax->datum . G3180) (datum->syntax . G317e) (bound-identifier=? . G316a) (record-type-descriptor? . G50b9) (record-predicate . G50b8) (record-mutator . G50b7) (record-constructor . G50b6) (record-accessor . G50b5) (make-record-type-descriptor . G50b4) (make-record-constructor-descriptor . G50b3) (record? . G50b2) (record-type-uid . G50b1) (record-type-sealed? . G50b0) (record-type-parent . G50af) (record-type-opaque? . G50ae) (record-type-name . G50ad) (record-type-generative? . G50ac) (record-type-field-names . G50ab) (record-rtd . G50aa) (record-field-mutable? . G50a9) (delete-file . G50a8) (file-exists? . G50a7) (vector-sort! . G50a6) (vector-sort . G50a5) (list-sort . G50a4) (symbol-hash . G50a3) (string-ci-hash . G50a2) (string-hash . G50a1) (equal-hash . G50a0) (hashtable-equivalence-function . G509f) (make-hashtable . G509e) (hashtable-hash-function . G509d) (make-eqv-hashtable . G509c) (make-eq-hashtable . G509b) (hashtable? . G509a) (hashtable-update! . G5099) (hashtable-size . G5098) (hashtable-set! . G5097) (hashtable-ref . G5096) (hashtable-mutable? . G5095) (hashtable-keys . G5094) (hashtable-entries . G5093) (hashtable-delete! . G5092) (hashtable-copy . G5091) (hashtable-contains? . G5090) (hashtable-clear! . G508f) (call-with-output-file . G508e) (call-with-input-file . G508d) (write-char . G508c) (write . G508b) (with-output-to-file . G508a) (with-input-from-file . G5089) (read-char . G5088) (read . G5087) (peek-char . G5086) (open-output-file . G5085) (open-input-file . G5084) (newline . G5083) (display . G5082) (close-output-port . G5081) (close-input-port . G5080) (eof-object? . G507f) (eof-object . G507e) (current-error-port . G507d) (current-output-port . G507c) (current-input-port . G507b) (output-port? . G507a) (input-port? . G5079) (utf-8-codec . G5078) (utf-16-codec . G5077) (transcoder-error-handling-mode . G5076) (transcoder-eol-style . G5075) (transcoder-codec . G5074) (transcoded-port . G5073) (textual-port? . G5072) (string->bytevector . G5071) (standard-output-port . G5070) (standard-input-port . G506f) (standard-error-port . G506e) (set-port-position! . G506d) (put-u8 . G506c) (put-string . G506b) (put-datum . G506a) (put-char . G5069) (put-bytevector . G5068) (port? . G5067) (port-transcoder . G5066) (port-position . G5065) (port-has-set-port-position!? . G5064) (port-has-port-position? . G5063) (port-eof? . G5062) (output-port-buffer-mode . G5061) (open-string-output-port . G5060) (open-string-input-port . G505f) (open-file-output-port . G505e) (open-file-input/output-port . G505d) (open-file-input-port . G505c) (open-bytevector-output-port . G505b) (open-bytevector-input-port . G505a) (native-transcoder . G5059) (native-eol-style . G5058) (make-transcoder . G5057) (latin-1-codec . G5056) (make-i/o-write-error . G4c95) (make-i/o-read-error . G4c81) (make-i/o-port-error . G4d2c) (make-i/o-invalid-position-error . G4caa) (make-i/o-filename-error . G4cc3) (make-i/o-file-protection-error . G4cdb) (make-i/o-file-is-read-only-error . G4cef) (make-i/o-file-does-not-exist-error . G4d17) (make-i/o-file-already-exists-error . G4d03) (make-i/o-error . G4c6d) (make-i/o-encoding-error . G4d59) (make-i/o-decoding-error . G4d44) (make-custom-textual-output-port . G5055) (make-custom-textual-input/output-port . G5054) (make-custom-textual-input-port . G5053) (make-custom-binary-output-port . G5052) (make-custom-binary-input/output-port . G5051) (make-custom-binary-input-port . G5050) (make-bytevector . G504f) (lookahead-u8 . G504e) (lookahead-char . G504d) (i/o-write-error? . G4c97) (i/o-read-error? . G4c83) (i/o-port-error? . G4d30) (i/o-invalid-position-error? . G4cae) (i/o-filename-error? . G4cc7) (i/o-file-protection-error? . G4cdd) (i/o-file-is-read-only-error? . G4cf1) (i/o-file-does-not-exist-error? . G4d19) (i/o-file-already-exists-error? . G4d05) (i/o-error? . G4c6f) (i/o-error-port . G4d32) (i/o-error-filename . G4cc9) (i/o-encoding-error? . G4d5d) (i/o-encoding-error-char . G4d5f) (i/o-decoding-error? . G4d46) (get-u8 . G504c) (get-string-n! . G504b) (get-string-n . G504a) (get-string-all . G5049) (get-line . G5048) (get-datum . G5047) (get-char . G5046) (get-bytevector-some . G5045) (get-bytevector-n! . G5044) (get-bytevector-n . G5043) (get-bytevector-all . G5042) (flush-output-port . G5041) (close-port . G5040) (exit . G5039) (command-line . G4db8) (string-fill! . G5038) (string-set! . G5037) (set-cdr! . G5036) (set-car! . G5035) (remove . G5034) (remv . G5033) (remp . G5032) (remq . G5031) (partition . G5030) (memv . G502f) (memq . G502e) (memp . G502d) (member . G502c) (exists . G502b) (for-all . G502a) (fold-right . G5029) (fold-left . G5028) (find . G5027) (filter . G5026) (cons* . G5025) (assv . G5024) (assq . G5023) (assp . G5022) (assoc . G5021) (call-with-string-output-port . G5020) (call-with-port . G501f) (call-with-bytevector-output-port . G501e) (bytevector->string . G501d) (buffer-mode? . G501c) (binary-port? . G501b) (with-exception-handler . G501a) (raise-continuable . G5019) (raise . G5018) (eval . G3158) (environment . G3150) (make-enumeration . G5017) (enum-set=? . G5016) (enum-set-universe . G5015) (enum-set-union . G5014) (enum-set-subset? . G5013) (enum-set-projection . G5012) (enum-set-member? . G5011) (enum-set-intersection . G5010) (enum-set-indexer . G500f) (enum-set-difference . G500e) (enum-set-constructor . G500d) (enum-set-complement . G500c) (enum-set->list . G500b) (who-condition? . G4b8b) (warning? . G4b0b) (violation? . G4b47) (undefined-violation? . G4bfb) (syntax-violation? . G4be3) (syntax-violation-subform . G4be7) (syntax-violation-form . G4be5) (syntax-violation . G317a) (simple-conditions . G500a) (serious-condition? . G4b1f) (non-continuable-violation? . G4ba1) (message-condition? . G4af5) (make-who-condition . G4b87) (make-warning . G4b09) (make-violation . G4b45) (make-undefined-violation . G4bf9) (make-syntax-violation . G4bdd) (make-serious-condition . G4b1d) (make-non-continuable-violation . G4b9f) (make-message-condition . G4af1) (make-lexical-violation . G4bc7) (make-irritants-condition . G4b6e) (make-implementation-restriction-violation . G4bb3) (make-error . G4b31) (make-assertion-violation . G4b59) (lexical-violation? . G4bc9) (irritants-condition? . G4b72) (implementation-restriction-violation? . G4bb5) (error? . G4b33) (condition-who . G4b8d) (condition-predicate . G5009) (condition-message . G4af7) (condition-irritants . G4b74) (condition-accessor . G5008) (condition . G5007) (assertion-violation? . G4b5b) (condition? . G5006) (utf32->string . G5005) (utf16->string . G5004) (utf8->string . G5003) (uint-list->bytevector . G5002) (u8-list->bytevector . G5001) (string->utf8 . G5000) (string->utf32 . G4fff) (string->utf16 . G4ffe) (sint-list->bytevector . G4ffd) (native-endianness . G4ffc) (bytevector? . G4ffb) (bytevector=? . G4ffa) (bytevector-uint-set! . G4ff9) (bytevector-uint-ref . G4ff8) (bytevector-u8-set! . G4ff7) (bytevector-u8-ref . G4ff6) (bytevector-u64-set! . G4ff5) (bytevector-u64-ref . G4ff4) (bytevector-u64-native-set! . G4ff3) (bytevector-u64-native-ref . G4ff2) (bytevector-u32-set! . G4ff1) (bytevector-u32-ref . G4ff0) (bytevector-u32-native-set! . G4fef) (bytevector-u32-native-ref . G4fee) (bytevector-u16-set! . G4fed) (bytevector-u16-ref . G4fec) (bytevector-u16-native-set! . G4feb) (bytevector-u16-native-ref . G4fea) (bytevector-sint-set! . G4fe9) (bytevector-sint-ref . G4fe8) (bytevector-s8-set! . G4fe7) (bytevector-s8-ref . G4fe6) (bytevector-s64-set! . G4fe5) (bytevector-s64-ref . G4fe4) (bytevector-s64-native-set! . G4fe3) (bytevector-s64-native-ref . G4fe2) (bytevector-s32-set! . G4fe1) (bytevector-s32-ref . G4fe0) (bytevector-s32-native-set! . G4fdf) (bytevector-s32-native-ref . G4fde) (bytevector-s16-set! . G4fdd) (bytevector-s16-ref . G4fdc) (bytevector-s16-native-set! . G4fdb) (bytevector-s16-native-ref . G4fda) (bytevector-length . G4fd9) (bytevector-ieee-single-ref . G4fd8) (bytevector-ieee-single-native-set! . G4fd7) (bytevector-ieee-single-native-ref . G4fd6) (bytevector-ieee-double-ref . G4fd5) (bytevector-ieee-double-native-set! . G4fd4) (bytevector-ieee-double-native-ref . G4fd3) (bytevector-fill! . G4fd2) (bytevector-copy! . G4fd1) (bytevector-copy . G4fd0) (bytevector->uint-list . G4fcf) (bytevector->u8-list . G4fce) (bytevector->sint-list . G4fcd) (no-nans-violation? . G4fcc) (no-infinities-violation? . G4fcb) (make-no-nans-violation . G4fca) (make-no-infinities-violation . G4fc9) (real->flonum . G4fc8) (flzero? . G4fc7) (fltruncate . G4fc6) (fltan . G4fc5) (flsqrt . G4fc4) (flsin . G4fc3) (flround . G4fc2) (flpositive? . G4fc1) (flonum? . G4fc0) (flodd? . G4fbf) (flnumerator . G4fbe) (flnegative? . G4fbd) (flnan? . G4fbc) (flmod0 . G4fbb) (flmod . G4fba) (flmin . G4fb9) (flmax . G4fb8) (fllog . G4fb7) (flinteger? . G4fb6) (flinfinite? . G4fb5) (flfloor . G4fb4) (flfinite? . G4fb3) (flexpt . G4fb2) (flexp . G4fb1) (fleven? . G4fb0) (fldiv0-and-mod0 . G4faf) (fldiv0 . G4fae) (fldiv-and-mod . G4fad) (fldiv . G4fac) (fldenominator . G4fab) (flcos . G4faa) (flceiling . G4fa9) (flatan . G4fa8) (flasin . G4fa7) (flacos . G4fa6) (flabs . G4fa5) (fl>? . G4fa4) (fl>=? . G4fa3) (fl=? . G4fa2) (fl<? . G4fa1) (fl<=? . G4fa0) (fl/ . G4f9f) (fl- . G4f9e) (fl+ . G4f9d) (fl* . G4f9c) (fixnum->flonum . G4f9b) (fxzero? . G4f9a) (fxxor . G4f99) (fxrotate-bit-field . G4f98) (fxreverse-bit-field . G4f97) (fxpositive? . G4f96) (fxodd? . G4f95) (fxnot . G4f94) (fxnegative? . G4f93) (fxmod0 . G4f92) (fxmod . G4f91) (fxmin . G4f90) (fxmax . G4f8f) (fxlength . G4f8e) (fxior . G4f8d) (fxif . G4f8c) (fxfirst-bit-set . G4f8b) (fxeven? . G4f8a) (fxdiv0-and-mod0 . G4f89) (fxdiv0 . G4f88) (fxdiv-and-mod . G4f87) (fxdiv . G4f86) (fxcopy-bit-field . G4f85) (fxcopy-bit . G4f84) (fxbit-set? . G4f83) (fxbit-field . G4f82) (fxbit-count . G4f81) (fxarithmetic-shift-right . G4f80) (fxarithmetic-shift-left . G4f7f) (fxarithmetic-shift . G4f7e) (fxand . G4f7d) (fx>? . G4f7c) (fx>=? . G4f7b) (fx=? . G4f7a) (fx<? . G4f79) (fx<=? . G4f78) (fx-/carry . G4f77) (fx- . G4f76) (fx+/carry . G4f75) (fx+ . G4f74) (fx*/carry . G4f73) (fx* . G4f72) (greatest-fixnum . G4f71) (least-fixnum . G4f70) (fixnum-width . G4f6f) (fixnum? . G4f6e) (bitwise-rotate-bit-field . G4f6d) (bitwise-reverse-bit-field . G4f6c) (bitwise-length . G4f6b) (bitwise-if . G4f6a) (bitwise-first-bit-set . G4f69) (bitwise-copy-bit-field . G4f68) (bitwise-copy-bit . G4f67) (bitwise-bit-set? . G4f66) (bitwise-bit-field . G4f65) (bitwise-bit-count . G4f64) (bitwise-xor . G4f63) (bitwise-ior . G4f62) (bitwise-and . G4f61) (bitwise-not . G4f60) (bitwise-arithmetic-shift-right . G4f5f) (bitwise-arithmetic-shift-left . G4f5e) (bitwise-arithmetic-shift . G4f5d) (zero? . G4f5c) (vector? . G4f5b) (vector-set! . G4f5a) (vector-ref . G4f59) (vector-map . G4f58) (vector-length . G4f57) (vector-for-each . G4f56) (vector-fill! . G4f55) (vector->list . G4f54) (vector . G4f53) (values . G4f52) (truncate . G4f51) (tan . G4f50) (symbol? . G4f4f) (symbol=? . G4f4e) (symbol->string . G4f4d) (substring . G4f4c) (string? . G4f4b) (string>? . G4f4a) (string>=? . G4f49) (string=? . G4f48) (string<? . G4f47) (string<=? . G4f46) (string-ref . G4f45) (string-length . G4f44) (string-for-each . G4f43) (string-copy . G4f42) (string-append . G4f41) (string->symbol . G4f40) (string->number . G4f3f) (string->list . G4f3e) (string . G4f3d) (sqrt . G4f3c) (sin . G4f3b) (round . G4f3a) (reverse . G4f39) (real? . G4f38) (real-valued? . G4f37) (real-part . G4f36) (rationalize . G4f35) (rational? . G4f34) (rational-valued? . G4f33) (procedure? . G4f32) (positive? . G4f31) (pair? . G4f30) (odd? . G4f2f) (numerator . G4f2e) (number? . G4f2d) (number->string . G4f2c) (null? . G4f2b) (not . G4f2a) (negative? . G4f29) (nan? . G4f28) (min . G4f27) (max . G4f26) (map . G4f25) (make-vector . G4f24) (make-string . G4f23) (make-rectangular . G4f22) (make-polar . G4f21) (magnitude . G4f20) (log . G4f1f) (list? . G4f1e) (list-tail . G4f1d) (list-ref . G4f1c) (list->vector . G4f1b) (list->string . G4f1a) (list . G4f19) (length . G4f18) (lcm . G4f17) (integer? . G4f16) (integer-valued? . G4f15) (integer->char . G4f14) (infinite? . G4f13) (inexact? . G4f12) (inexact . G4f11) (imag-part . G4f10) (gcd . G4f0f) (for-each . G4f0e) (floor . G4f0d) (finite? . G4f0c) (expt . G4f0b) (exp . G4f0a) (exact? . G4f09) (exact-integer-sqrt . G4f08) (exact . G4f07) (even? . G4f06) (error . G4f05) (eqv? . G4f04) (equal? . G4f03) (eq? . G4f02) (dynamic-wind . G4f01) (div0-and-mod0 . G4f00) (mod0 . G4eff) (div0 . G4efe) (div-and-mod . G4efd) (mod . G4efc) (div . G4efb) (denominator . G4efa) (cos . G4ef9) (cons . G4ef8) (complex? . G4ef7) (char? . G4ef6) (char>? . G4ef5) (char>=? . G4ef4) (char=? . G4ef3) (char<? . G4ef2) (char<=? . G4ef1) (char->integer . G4ef0) (ceiling . G4eef) (call-with-values . G4eee) (call/cc . G4eed) (call-with-current-continuation . G4eec) (cddddr . G4eeb) (cdddar . G4eea) (cddadr . G4ee9) (cddaar . G4ee8) (cdaddr . G4ee7) (cdadar . G4ee6) (cdaadr . G4ee5) (cdaaar . G4ee4) (cadddr . G4ee3) (caddar . G4ee2) (cadadr . G4ee1) (cadaar . G4ee0) (caaddr . G4edf) (caadar . G4ede) (caaadr . G4edd) (caaaar . G4edc) (cdddr . G4edb) (cddar . G4eda) (cdadr . G4ed9) (cdaar . G4ed8) (caddr . G4ed7) (cadar . G4ed6) (caadr . G4ed5) (caaar . G4ed4) (cddr . G4ed3) (cdar . G4ed2) (cadr . G4ed1) (caar . G4ed0) (cdr . G4ecf) (car . G4ece) (boolean? . G4ecd) (boolean=? . G4ecc) (atan . G4ecb) (assertion-violation . G4eca) (asin . G4ec9) (apply . G4ec8) (append . G4ec7) (angle . G4ec6) (acos . G4ec5) (abs . G4ec4) (/ . G4ec3) (* . G4ec2) (- . G4ec1) (+ . G4ec0) (>= . G4ebf) (> . G4ebe) (= . G4ebd) (<= . G4ebc) (< . G4ebb) (library . G4eba) (export . G4eb9) (&no-nans . G4eb8) (&no-infinities . G4eb7) (&i/o-encoding . G4eb6) (&i/o-decoding . G4eb5) (&i/o-port . G4eb4) (&i/o-file-does-not-exist . G4eb3) (&i/o-file-already-exists . G4eb2) (&i/o-file-is-read-only . G4eb1) (&i/o-file-protection . G4eb0) (&i/o-filename . G4eaf) (&i/o-invalid-position . G4eae) (&i/o-write . G4ead) (&i/o-read . G4eac) (&i/o . G4eab) (&undefined . G4eaa) (&syntax . G4ea9) (&lexical . G4ea8) (&implementation-restriction . G4ea7) (&non-continuable . G4ea6) (&who . G4ea5) (&irritants . G4ea4) (&assertion . G4ea3) (&violation . G4ea2) (&error . G4ea1) (&serious . G4ea0) (&warning . G4e9f) (&message . G4e9e) (&condition . G4e9d) (define-condition-type . G4e9c) (define-enumeration . G4e9b) (define-record-type . G4e9a) (parent-rtd . G4e99) (nongenerative . G4e98) (opaque . G4e97) (sealed . G4e96) (protocol . G4e95) (parent . G4e94) (immutable . G4e93) (mutable . G4e92) (fields . G4e91) (error-handling-mode . G4e90) (file-options . G4e8f) (buffer-mode . G4e8e) (eol-style . G4e8d) (guard . G4e8c) (unsyntax-splicing . G4e89) (unsyntax . G4e88) (unquote-splicing . G4e87) (unquote . G4e86) (_ . G4e85) (else . G4e84) (=> . G4e83) (... . G4e82) (assert . G4e81) (endianness . G4e80) (or . G4e7d) (and . G4e7c) (do . G4e7b) (cond . G4e7a) (let* . G4e79) (let . G4e78) (let*-values . G4e77) (let-values . G4e76) (identifier-syntax . G4e75) (with-syntax . G4e74) (quasisyntax . G4e73) (quasiquote . G4e72) (syntax-rules . G4e71) (include . G4e70) (record-constructor-descriptor . G4e6e) (record-type-descriptor . G4e6d) (case . G4e6c) (unless . G4e6a) (when . G4e69) (if . G4e68) (letrec* . G4e67) (letrec . G4e66) (case-lambda . G4e64) (lambda . G4e63) (syntax . G4e62) (syntax-case . G4e61) (quote . G4e60) (letrec-syntax . G4e5e) (let-syntax . G4e5d) (set! . G4e5c) (import . G4e5b) (begin . G4e5a) (define-syntax . G4e58) (define . G4e57)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5159 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G4e87) (unquote . G4e86) (delay . G4e7f) (or . G4e7d) (and . G4e7c) (do . G4e7b) (cond . G4e7a) (let* . G4e79) (let . G4e78) (quasiquote . G4e72) (syntax-rules . G4e71) (case . G4e6c) (if . G4e68) (letrec . G4e66) (lambda . G4e63) (quote . G4e60) (letrec-syntax . G4e5e) (let-syntax . G4e5d) (set! . G4e5c) (begin . G4e5a) (define-syntax . G4e58) (define . G4e57)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G515a '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G50ce) (string-ci>=? . G50cd) (string-ci=? . G50cc) (string-ci<? . G50cb) (string-ci<=? . G50ca) (char-whitespace? . G50c9) (char-upper-case? . G50c8) (char-numeric? . G50c6) (char-lower-case? . G50c5) (char-upcase . G50c3) (char-downcase . G50c0) (char-ci>? . G50bf) (char-ci>=? . G50be) (char-ci=? . G50bd) (char-ci<? . G50bc) (char-ci<=? . G50bb) (char-alphabetic? . G50ba) (call-with-output-file . G508e) (call-with-input-file . G508d) (write-char . G508c) (write . G508b) (with-output-to-file . G508a) (with-input-from-file . G5089) (read-char . G5088) (read . G5087) (peek-char . G5086) (open-output-file . G5085) (open-input-file . G5084) (newline . G5083) (display . G5082) (close-output-port . G5081) (close-input-port . G5080) (eof-object . G507e) (current-output-port . G507c) (current-input-port . G507b) (output-port? . G507a) (input-port? . G5079) (scheme-report-environment . G3154) (quotient . G503f) (null-environment . G3152) (remainder . G503e) (modulo . G503d) (inexact->exact . G503c) (force . G503b) (exact->inexact . G503a) (string-fill! . G5038) (string-set! . G5037) (set-cdr! . G5036) (set-car! . G5035) (memv . G502f) (memq . G502e) (member . G502c) (assv . G5024) (assq . G5023) (assoc . G5021) (eval . G3158) (zero? . G4f5c) (vector? . G4f5b) (vector-set! . G4f5a) (vector-ref . G4f59) (vector-length . G4f57) (vector-fill! . G4f55) (vector->list . G4f54) (vector . G4f53) (values . G4f52) (truncate . G4f51) (tan . G4f50) (symbol? . G4f4f) (symbol->string . G4f4d) (substring . G4f4c) (string? . G4f4b) (string>? . G4f4a) (string>=? . G4f49) (string=? . G4f48) (string<? . G4f47) (string<=? . G4f46) (string-ref . G4f45) (string-length . G4f44) (string-copy . G4f42) (string-append . G4f41) (string->symbol . G4f40) (string->number . G4f3f) (string->list . G4f3e) (string . G4f3d) (sqrt . G4f3c) (sin . G4f3b) (round . G4f3a) (reverse . G4f39) (real? . G4f38) (real-part . G4f36) (rationalize . G4f35) (rational? . G4f34) (procedure? . G4f32) (positive? . G4f31) (pair? . G4f30) (odd? . G4f2f) (numerator . G4f2e) (number? . G4f2d) (number->string . G4f2c) (not . G4f2a) (negative? . G4f29) (min . G4f27) (max . G4f26) (map . G4f25) (make-vector . G4f24) (make-string . G4f23) (make-rectangular . G4f22) (make-polar . G4f21) (magnitude . G4f20) (log . G4f1f) (list? . G4f1e) (list-tail . G4f1d) (list-ref . G4f1c) (list->vector . G4f1b) (list->string . G4f1a) (list . G4f19) (length . G4f18) (lcm . G4f17) (integer? . G4f16) (integer->char . G4f14) (inexact? . G4f12) (imag-part . G4f10) (gcd . G4f0f) (for-each . G4f0e) (floor . G4f0d) (expt . G4f0b) (exp . G4f0a) (exact? . G4f09) (even? . G4f06) (eqv? . G4f04) (equal? . G4f03) (eq? . G4f02) (dynamic-wind . G4f01) (denominator . G4efa) (cos . G4ef9) (cons . G4ef8) (complex? . G4ef7) (char? . G4ef6) (char>? . G4ef5) (char>=? . G4ef4) (char=? . G4ef3) (char<? . G4ef2) (char<=? . G4ef1) (char->integer . G4ef0) (ceiling . G4eef) (call-with-values . G4eee) (call-with-current-continuation . G4eec) (cddddr . G4eeb) (cdddar . G4eea) (cddadr . G4ee9) (cddaar . G4ee8) (cdaddr . G4ee7) (cdadar . G4ee6) (cdaadr . G4ee5) (cdaaar . G4ee4) (cadddr . G4ee3) (caddar . G4ee2) (cadadr . G4ee1) (cadaar . G4ee0) (caaddr . G4edf) (caadar . G4ede) (caaadr . G4edd) (caaaar . G4edc) (cdddr . G4edb) (cddar . G4eda) (cdadr . G4ed9) (cdaar . G4ed8) (caddr . G4ed7) (cadar . G4ed6) (caadr . G4ed5) (caaar . G4ed4) (cddr . G4ed3) (cdar . G4ed2) (cadr . G4ed1) (caar . G4ed0) (cdr . G4ecf) (car . G4ece) (boolean? . G4ecd) (atan . G4ecb) (asin . G4ec9) (apply . G4ec8) (append . G4ec7) (angle . G4ec6) (acos . G4ec5) (abs . G4ec4) (/ . G4ec3) (* . G4ec2) (- . G4ec1) (+ . G4ec0) (>= . G4ebf) (> . G4ebe) (= . G4ebd) (<= . G4ebc) (< . G4ebb) (unquote-splicing . G4e87) (unquote . G4e86) (delay . G4e7f) (or . G4e7d) (and . G4e7c) (do . G4e7b) (cond . G4e7a) (let* . G4e79) (let . G4e78) (quasiquote . G4e72) (syntax-rules . G4e71) (case . G4e6c) (if . G4e68) (letrec . G4e66) (lambda . G4e63) (quote . G4e60) (letrec-syntax . G4e5e) (let-syntax . G4e5d) (set! . G4e5c) (begin . G4e5a) (define-syntax . G4e58) (define . G4e57)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G515b '(psyntax modules) '() '() '() '() '((module . G4e59)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G515c '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G515d '(rnrs) '(6) '() '() '() '((regexp? . G5118) (string-upcase . G50d6) (string-titlecase . G50d5) (string-normalize-nfkd . G50d4) (string-normalize-nfkc . G50d3) (string-normalize-nfd . G50d2) (string-normalize-nfc . G50d1) (string-foldcase . G50d0) (string-downcase . G50cf) (string-ci>? . G50ce) (string-ci>=? . G50cd) (string-ci=? . G50cc) (string-ci<? . G50cb) (string-ci<=? . G50ca) (char-whitespace? . G50c9) (char-upper-case? . G50c8) (char-title-case? . G50c7) (char-numeric? . G50c6) (char-lower-case? . G50c5) (char-general-category . G50c4) (char-upcase . G50c3) (char-titlecase . G50c2) (char-foldcase . G50c1) (char-downcase . G50c0) (char-ci>? . G50bf) (char-ci>=? . G50be) (char-ci=? . G50bd) (char-ci<? . G50bc) (char-ci<=? . G50bb) (char-alphabetic? . G50ba) (make-variable-transformer . G2e85) (identifier? . G317c) (generate-temporaries . G3166) (free-identifier=? . G3168) (syntax->datum . G3180) (datum->syntax . G317e) (bound-identifier=? . G316a) (record-type-descriptor? . G50b9) (record-predicate . G50b8) (record-mutator . G50b7) (record-constructor . G50b6) (record-accessor . G50b5) (make-record-type-descriptor . G50b4) (make-record-constructor-descriptor . G50b3) (record? . G50b2) (record-type-uid . G50b1) (record-type-sealed? . G50b0) (record-type-parent . G50af) (record-type-opaque? . G50ae) (record-type-name . G50ad) (record-type-generative? . G50ac) (record-type-field-names . G50ab) (record-rtd . G50aa) (record-field-mutable? . G50a9) (delete-file . G50a8) (file-exists? . G50a7) (vector-sort! . G50a6) (vector-sort . G50a5) (list-sort . G50a4) (symbol-hash . G50a3) (string-ci-hash . G50a2) (string-hash . G50a1) (equal-hash . G50a0) (hashtable-equivalence-function . G509f) (make-hashtable . G509e) (hashtable-hash-function . G509d) (make-eqv-hashtable . G509c) (make-eq-hashtable . G509b) (hashtable? . G509a) (hashtable-update! . G5099) (hashtable-size . G5098) (hashtable-set! . G5097) (hashtable-ref . G5096) (hashtable-mutable? . G5095) (hashtable-keys . G5094) (hashtable-entries . G5093) (hashtable-delete! . G5092) (hashtable-copy . G5091) (hashtable-contains? . G5090) (hashtable-clear! . G508f) (call-with-output-file . G508e) (call-with-input-file . G508d) (write-char . G508c) (write . G508b) (with-output-to-file . G508a) (with-input-from-file . G5089) (read-char . G5088) (read . G5087) (peek-char . G5086) (open-output-file . G5085) (open-input-file . G5084) (newline . G5083) (display . G5082) (close-output-port . G5081) (close-input-port . G5080) (eof-object? . G507f) (eof-object . G507e) (current-error-port . G507d) (current-output-port . G507c) (current-input-port . G507b) (output-port? . G507a) (input-port? . G5079) (utf-8-codec . G5078) (utf-16-codec . G5077) (transcoder-error-handling-mode . G5076) (transcoder-eol-style . G5075) (transcoder-codec . G5074) (transcoded-port . G5073) (textual-port? . G5072) (string->bytevector . G5071) (standard-output-port . G5070) (standard-input-port . G506f) (standard-error-port . G506e) (set-port-position! . G506d) (put-u8 . G506c) (put-string . G506b) (put-datum . G506a) (put-char . G5069) (put-bytevector . G5068) (port? . G5067) (port-transcoder . G5066) (port-position . G5065) (port-has-set-port-position!? . G5064) (port-has-port-position? . G5063) (port-eof? . G5062) (output-port-buffer-mode . G5061) (open-string-output-port . G5060) (open-string-input-port . G505f) (open-file-output-port . G505e) (open-file-input/output-port . G505d) (open-file-input-port . G505c) (open-bytevector-output-port . G505b) (open-bytevector-input-port . G505a) (native-transcoder . G5059) (native-eol-style . G5058) (make-transcoder . G5057) (latin-1-codec . G5056) (make-i/o-write-error . G4c95) (make-i/o-read-error . G4c81) (make-i/o-port-error . G4d2c) (make-i/o-invalid-position-error . G4caa) (make-i/o-filename-error . G4cc3) (make-i/o-file-protection-error . G4cdb) (make-i/o-file-is-read-only-error . G4cef) (make-i/o-file-does-not-exist-error . G4d17) (make-i/o-file-already-exists-error . G4d03) (make-i/o-error . G4c6d) (make-i/o-encoding-error . G4d59) (make-i/o-decoding-error . G4d44) (make-custom-textual-output-port . G5055) (make-custom-textual-input/output-port . G5054) (make-custom-textual-input-port . G5053) (make-custom-binary-output-port . G5052) (make-custom-binary-input/output-port . G5051) (make-custom-binary-input-port . G5050) (make-bytevector . G504f) (lookahead-u8 . G504e) (lookahead-char . G504d) (i/o-write-error? . G4c97) (i/o-read-error? . G4c83) (i/o-port-error? . G4d30) (i/o-invalid-position-error? . G4cae) (i/o-filename-error? . G4cc7) (i/o-file-protection-error? . G4cdd) (i/o-file-is-read-only-error? . G4cf1) (i/o-file-does-not-exist-error? . G4d19) (i/o-file-already-exists-error? . G4d05) (i/o-error? . G4c6f) (i/o-error-port . G4d32) (i/o-error-filename . G4cc9) (i/o-encoding-error? . G4d5d) (i/o-encoding-error-char . G4d5f) (i/o-decoding-error? . G4d46) (get-u8 . G504c) (get-string-n! . G504b) (get-string-n . G504a) (get-string-all . G5049) (get-line . G5048) (get-datum . G5047) (get-char . G5046) (get-bytevector-some . G5045) (get-bytevector-n! . G5044) (get-bytevector-n . G5043) (get-bytevector-all . G5042) (flush-output-port . G5041) (close-port . G5040) (exit . G5039) (command-line . G4db8) (remove . G5034) (remv . G5033) (remp . G5032) (remq . G5031) (partition . G5030) (memv . G502f) (memq . G502e) (memp . G502d) (member . G502c) (exists . G502b) (for-all . G502a) (fold-right . G5029) (fold-left . G5028) (find . G5027) (filter . G5026) (cons* . G5025) (assv . G5024) (assq . G5023) (assp . G5022) (assoc . G5021) (call-with-string-output-port . G5020) (call-with-port . G501f) (call-with-bytevector-output-port . G501e) (bytevector->string . G501d) (buffer-mode? . G501c) (binary-port? . G501b) (with-exception-handler . G501a) (raise-continuable . G5019) (raise . G5018) (make-enumeration . G5017) (enum-set=? . G5016) (enum-set-universe . G5015) (enum-set-union . G5014) (enum-set-subset? . G5013) (enum-set-projection . G5012) (enum-set-member? . G5011) (enum-set-intersection . G5010) (enum-set-indexer . G500f) (enum-set-difference . G500e) (enum-set-constructor . G500d) (enum-set-complement . G500c) (enum-set->list . G500b) (who-condition? . G4b8b) (warning? . G4b0b) (violation? . G4b47) (undefined-violation? . G4bfb) (syntax-violation? . G4be3) (syntax-violation-subform . G4be7) (syntax-violation-form . G4be5) (syntax-violation . G317a) (simple-conditions . G500a) (serious-condition? . G4b1f) (non-continuable-violation? . G4ba1) (message-condition? . G4af5) (make-who-condition . G4b87) (make-warning . G4b09) (make-violation . G4b45) (make-undefined-violation . G4bf9) (make-syntax-violation . G4bdd) (make-serious-condition . G4b1d) (make-non-continuable-violation . G4b9f) (make-message-condition . G4af1) (make-lexical-violation . G4bc7) (make-irritants-condition . G4b6e) (make-implementation-restriction-violation . G4bb3) (make-error . G4b31) (make-assertion-violation . G4b59) (lexical-violation? . G4bc9) (irritants-condition? . G4b72) (implementation-restriction-violation? . G4bb5) (error? . G4b33) (condition-who . G4b8d) (condition-predicate . G5009) (condition-message . G4af7) (condition-irritants . G4b74) (condition-accessor . G5008) (condition . G5007) (assertion-violation? . G4b5b) (condition? . G5006) (utf32->string . G5005) (utf16->string . G5004) (utf8->string . G5003) (uint-list->bytevector . G5002) (u8-list->bytevector . G5001) (string->utf8 . G5000) (string->utf32 . G4fff) (string->utf16 . G4ffe) (sint-list->bytevector . G4ffd) (native-endianness . G4ffc) (bytevector? . G4ffb) (bytevector=? . G4ffa) (bytevector-uint-set! . G4ff9) (bytevector-uint-ref . G4ff8) (bytevector-u8-set! . G4ff7) (bytevector-u8-ref . G4ff6) (bytevector-u64-set! . G4ff5) (bytevector-u64-ref . G4ff4) (bytevector-u64-native-set! . G4ff3) (bytevector-u64-native-ref . G4ff2) (bytevector-u32-set! . G4ff1) (bytevector-u32-ref . G4ff0) (bytevector-u32-native-set! . G4fef) (bytevector-u32-native-ref . G4fee) (bytevector-u16-set! . G4fed) (bytevector-u16-ref . G4fec) (bytevector-u16-native-set! . G4feb) (bytevector-u16-native-ref . G4fea) (bytevector-sint-set! . G4fe9) (bytevector-sint-ref . G4fe8) (bytevector-s8-set! . G4fe7) (bytevector-s8-ref . G4fe6) (bytevector-s64-set! . G4fe5) (bytevector-s64-ref . G4fe4) (bytevector-s64-native-set! . G4fe3) (bytevector-s64-native-ref . G4fe2) (bytevector-s32-set! . G4fe1) (bytevector-s32-ref . G4fe0) (bytevector-s32-native-set! . G4fdf) (bytevector-s32-native-ref . G4fde) (bytevector-s16-set! . G4fdd) (bytevector-s16-ref . G4fdc) (bytevector-s16-native-set! . G4fdb) (bytevector-s16-native-ref . G4fda) (bytevector-length . G4fd9) (bytevector-ieee-single-ref . G4fd8) (bytevector-ieee-single-native-set! . G4fd7) (bytevector-ieee-single-native-ref . G4fd6) (bytevector-ieee-double-ref . G4fd5) (bytevector-ieee-double-native-set! . G4fd4) (bytevector-ieee-double-native-ref . G4fd3) (bytevector-fill! . G4fd2) (bytevector-copy! . G4fd1) (bytevector-copy . G4fd0) (bytevector->uint-list . G4fcf) (bytevector->u8-list . G4fce) (bytevector->sint-list . G4fcd) (no-nans-violation? . G4fcc) (no-infinities-violation? . G4fcb) (make-no-nans-violation . G4fca) (make-no-infinities-violation . G4fc9) (real->flonum . G4fc8) (flzero? . G4fc7) (fltruncate . G4fc6) (fltan . G4fc5) (flsqrt . G4fc4) (flsin . G4fc3) (flround . G4fc2) (flpositive? . G4fc1) (flonum? . G4fc0) (flodd? . G4fbf) (flnumerator . G4fbe) (flnegative? . G4fbd) (flnan? . G4fbc) (flmod0 . G4fbb) (flmod . G4fba) (flmin . G4fb9) (flmax . G4fb8) (fllog . G4fb7) (flinteger? . G4fb6) (flinfinite? . G4fb5) (flfloor . G4fb4) (flfinite? . G4fb3) (flexpt . G4fb2) (flexp . G4fb1) (fleven? . G4fb0) (fldiv0-and-mod0 . G4faf) (fldiv0 . G4fae) (fldiv-and-mod . G4fad) (fldiv . G4fac) (fldenominator . G4fab) (flcos . G4faa) (flceiling . G4fa9) (flatan . G4fa8) (flasin . G4fa7) (flacos . G4fa6) (flabs . G4fa5) (fl>? . G4fa4) (fl>=? . G4fa3) (fl=? . G4fa2) (fl<? . G4fa1) (fl<=? . G4fa0) (fl/ . G4f9f) (fl- . G4f9e) (fl+ . G4f9d) (fl* . G4f9c) (fixnum->flonum . G4f9b) (fxzero? . G4f9a) (fxxor . G4f99) (fxrotate-bit-field . G4f98) (fxreverse-bit-field . G4f97) (fxpositive? . G4f96) (fxodd? . G4f95) (fxnot . G4f94) (fxnegative? . G4f93) (fxmod0 . G4f92) (fxmod . G4f91) (fxmin . G4f90) (fxmax . G4f8f) (fxlength . G4f8e) (fxior . G4f8d) (fxif . G4f8c) (fxfirst-bit-set . G4f8b) (fxeven? . G4f8a) (fxdiv0-and-mod0 . G4f89) (fxdiv0 . G4f88) (fxdiv-and-mod . G4f87) (fxdiv . G4f86) (fxcopy-bit-field . G4f85) (fxcopy-bit . G4f84) (fxbit-set? . G4f83) (fxbit-field . G4f82) (fxbit-count . G4f81) (fxarithmetic-shift-right . G4f80) (fxarithmetic-shift-left . G4f7f) (fxarithmetic-shift . G4f7e) (fxand . G4f7d) (fx>? . G4f7c) (fx>=? . G4f7b) (fx=? . G4f7a) (fx<? . G4f79) (fx<=? . G4f78) (fx-/carry . G4f77) (fx- . G4f76) (fx+/carry . G4f75) (fx+ . G4f74) (fx*/carry . G4f73) (fx* . G4f72) (greatest-fixnum . G4f71) (least-fixnum . G4f70) (fixnum-width . G4f6f) (fixnum? . G4f6e) (bitwise-rotate-bit-field . G4f6d) (bitwise-reverse-bit-field . G4f6c) (bitwise-length . G4f6b) (bitwise-if . G4f6a) (bitwise-first-bit-set . G4f69) (bitwise-copy-bit-field . G4f68) (bitwise-copy-bit . G4f67) (bitwise-bit-set? . G4f66) (bitwise-bit-field . G4f65) (bitwise-bit-count . G4f64) (bitwise-xor . G4f63) (bitwise-ior . G4f62) (bitwise-and . G4f61) (bitwise-not . G4f60) (bitwise-arithmetic-shift-right . G4f5f) (bitwise-arithmetic-shift-left . G4f5e) (bitwise-arithmetic-shift . G4f5d) (zero? . G4f5c) (vector? . G4f5b) (vector-set! . G4f5a) (vector-ref . G4f59) (vector-map . G4f58) (vector-length . G4f57) (vector-for-each . G4f56) (vector-fill! . G4f55) (vector->list . G4f54) (vector . G4f53) (values . G4f52) (truncate . G4f51) (tan . G4f50) (symbol? . G4f4f) (symbol=? . G4f4e) (symbol->string . G4f4d) (substring . G4f4c) (string? . G4f4b) (string>? . G4f4a) (string>=? . G4f49) (string=? . G4f48) (string<? . G4f47) (string<=? . G4f46) (string-ref . G4f45) (string-length . G4f44) (string-for-each . G4f43) (string-copy . G4f42) (string-append . G4f41) (string->symbol . G4f40) (string->number . G4f3f) (string->list . G4f3e) (string . G4f3d) (sqrt . G4f3c) (sin . G4f3b) (round . G4f3a) (reverse . G4f39) (real? . G4f38) (real-valued? . G4f37) (real-part . G4f36) (rationalize . G4f35) (rational? . G4f34) (rational-valued? . G4f33) (procedure? . G4f32) (positive? . G4f31) (pair? . G4f30) (odd? . G4f2f) (numerator . G4f2e) (number? . G4f2d) (number->string . G4f2c) (null? . G4f2b) (not . G4f2a) (negative? . G4f29) (nan? . G4f28) (min . G4f27) (max . G4f26) (map . G4f25) (make-vector . G4f24) (make-string . G4f23) (make-rectangular . G4f22) (make-polar . G4f21) (magnitude . G4f20) (log . G4f1f) (list? . G4f1e) (list-tail . G4f1d) (list-ref . G4f1c) (list->vector . G4f1b) (list->string . G4f1a) (list . G4f19) (length . G4f18) (lcm . G4f17) (integer? . G4f16) (integer-valued? . G4f15) (integer->char . G4f14) (infinite? . G4f13) (inexact? . G4f12) (inexact . G4f11) (imag-part . G4f10) (gcd . G4f0f) (for-each . G4f0e) (floor . G4f0d) (finite? . G4f0c) (expt . G4f0b) (exp . G4f0a) (exact? . G4f09) (exact-integer-sqrt . G4f08) (exact . G4f07) (even? . G4f06) (error . G4f05) (eqv? . G4f04) (equal? . G4f03) (eq? . G4f02) (dynamic-wind . G4f01) (div0-and-mod0 . G4f00) (mod0 . G4eff) (div0 . G4efe) (div-and-mod . G4efd) (mod . G4efc) (div . G4efb) (denominator . G4efa) (cos . G4ef9) (cons . G4ef8) (complex? . G4ef7) (char? . G4ef6) (char>? . G4ef5) (char>=? . G4ef4) (char=? . G4ef3) (char<? . G4ef2) (char<=? . G4ef1) (char->integer . G4ef0) (ceiling . G4eef) (call-with-values . G4eee) (call/cc . G4eed) (call-with-current-continuation . G4eec) (cddddr . G4eeb) (cdddar . G4eea) (cddadr . G4ee9) (cddaar . G4ee8) (cdaddr . G4ee7) (cdadar . G4ee6) (cdaadr . G4ee5) (cdaaar . G4ee4) (cadddr . G4ee3) (caddar . G4ee2) (cadadr . G4ee1) (cadaar . G4ee0) (caaddr . G4edf) (caadar . G4ede) (caaadr . G4edd) (caaaar . G4edc) (cdddr . G4edb) (cddar . G4eda) (cdadr . G4ed9) (cdaar . G4ed8) (caddr . G4ed7) (cadar . G4ed6) (caadr . G4ed5) (caaar . G4ed4) (cddr . G4ed3) (cdar . G4ed2) (cadr . G4ed1) (caar . G4ed0) (cdr . G4ecf) (car . G4ece) (boolean? . G4ecd) (boolean=? . G4ecc) (atan . G4ecb) (assertion-violation . G4eca) (asin . G4ec9) (apply . G4ec8) (append . G4ec7) (angle . G4ec6) (acos . G4ec5) (abs . G4ec4) (/ . G4ec3) (* . G4ec2) (- . G4ec1) (+ . G4ec0) (>= . G4ebf) (> . G4ebe) (= . G4ebd) (<= . G4ebc) (< . G4ebb) (&no-nans . G4eb8) (&no-infinities . G4eb7) (&i/o-encoding . G4eb6) (&i/o-decoding . G4eb5) (&i/o-port . G4eb4) (&i/o-file-does-not-exist . G4eb3) (&i/o-file-already-exists . G4eb2) (&i/o-file-is-read-only . G4eb1) (&i/o-file-protection . G4eb0) (&i/o-filename . G4eaf) (&i/o-invalid-position . G4eae) (&i/o-write . G4ead) (&i/o-read . G4eac) (&i/o . G4eab) (&undefined . G4eaa) (&syntax . G4ea9) (&lexical . G4ea8) (&implementation-restriction . G4ea7) (&non-continuable . G4ea6) (&who . G4ea5) (&irritants . G4ea4) (&assertion . G4ea3) (&violation . G4ea2) (&error . G4ea1) (&serious . G4ea0) (&warning . G4e9f) (&message . G4e9e) (&condition . G4e9d) (define-condition-type . G4e9c) (define-enumeration . G4e9b) (define-record-type . G4e9a) (parent-rtd . G4e99) (nongenerative . G4e98) (opaque . G4e97) (sealed . G4e96) (protocol . G4e95) (parent . G4e94) (immutable . G4e93) (mutable . G4e92) (fields . G4e91) (error-handling-mode . G4e90) (file-options . G4e8f) (buffer-mode . G4e8e) (eol-style . G4e8d) (guard . G4e8c) (unsyntax-splicing . G4e89) (unsyntax . G4e88) (unquote-splicing . G4e87) (unquote . G4e86) (_ . G4e85) (else . G4e84) (=> . G4e83) (... . G4e82) (assert . G4e81) (endianness . G4e80) (or . G4e7d) (and . G4e7c) (do . G4e7b) (cond . G4e7a) (let* . G4e79) (let . G4e78) (let*-values . G4e77) (let-values . G4e76) (identifier-syntax . G4e75) (with-syntax . G4e74) (quasisyntax . G4e73) (quasiquote . G4e72) (syntax-rules . G4e71) (record-constructor-descriptor . G4e6e) (record-type-descriptor . G4e6d) (case . G4e6c) (unless . G4e6a) (when . G4e69) (if . G4e68) (letrec* . G4e67) (letrec . G4e66) (case-lambda . G4e64) (lambda . G4e63) (syntax . G4e62) (syntax-case . G4e61) (quote . G4e60) (letrec-syntax . G4e5e) (let-syntax . G4e5d) (set! . G4e5c) (begin . G4e5a) (define-syntax . G4e58) (define . G4e57)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G515e '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3154) (quotient . G503f) (null-environment . G3152) (remainder . G503e) (modulo . G503d) (inexact->exact . G503c) (force . G503b) (exact->inexact . G503a) (delay . G4e7f)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G515f '(rnrs control) '(6) '() '() '() '((do . G4e7b) (unless . G4e6a) (when . G4e69) (case-lambda . G4e64)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5160 '(rnrs eval) '(6) '() '() '() '((eval . G3158) (environment . G3150)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5161 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G5036) (set-car! . G5035)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5162 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G5038) (string-set! . G5037)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5163 '(rnrs programs) '(6) '() '() '() '((exit . G5039) (command-line . G4db8)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5164 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2e85) (identifier? . G317c) (generate-temporaries . G3166) (free-identifier=? . G3168) (syntax->datum . G3180) (datum->syntax . G317e) (bound-identifier=? . G316a) (syntax-violation . G317a) (unsyntax-splicing . G4e89) (unsyntax . G4e88) (_ . G4e85) (... . G4e82) (with-syntax . G4e74) (quasisyntax . G4e73) (syntax . G4e62) (syntax-case . G4e61)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5165 '(rnrs files) '(6) '() '() '() '((delete-file . G50a8) (file-exists? . G50a7) (make-i/o-write-error . G4c95) (make-i/o-read-error . G4c81) (make-i/o-port-error . G4d2c) (make-i/o-invalid-position-error . G4caa) (make-i/o-filename-error . G4cc3) (make-i/o-file-protection-error . G4cdb) (make-i/o-file-is-read-only-error . G4cef) (make-i/o-file-does-not-exist-error . G4d17) (make-i/o-file-already-exists-error . G4d03) (make-i/o-error . G4c6d) (i/o-write-error? . G4c97) (i/o-read-error? . G4c83) (i/o-port-error? . G4d30) (i/o-invalid-position-error? . G4cae) (i/o-filename-error? . G4cc7) (i/o-file-protection-error? . G4cdd) (i/o-file-is-read-only-error? . G4cf1) (i/o-file-does-not-exist-error? . G4d19) (i/o-file-already-exists-error? . G4d05) (i/o-error? . G4c6f) (i/o-error-port . G4d32) (i/o-error-filename . G4cc9) (&i/o-port . G4eb4) (&i/o-file-does-not-exist . G4eb3) (&i/o-file-already-exists . G4eb2) (&i/o-file-is-read-only . G4eb1) (&i/o-file-protection . G4eb0) (&i/o-filename . G4eaf) (&i/o-invalid-position . G4eae) (&i/o-write . G4ead) (&i/o-read . G4eac) (&i/o . G4eab)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5166 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G50a6) (vector-sort . G50a5) (list-sort . G50a4)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5167 '(rnrs base) '(6) '() '() '() '((zero? . G4f5c) (vector? . G4f5b) (vector-set! . G4f5a) (vector-ref . G4f59) (vector-map . G4f58) (vector-length . G4f57) (vector-for-each . G4f56) (vector-fill! . G4f55) (vector->list . G4f54) (vector . G4f53) (values . G4f52) (truncate . G4f51) (tan . G4f50) (symbol? . G4f4f) (symbol=? . G4f4e) (symbol->string . G4f4d) (substring . G4f4c) (string? . G4f4b) (string>? . G4f4a) (string>=? . G4f49) (string=? . G4f48) (string<? . G4f47) (string<=? . G4f46) (string-ref . G4f45) (string-length . G4f44) (string-for-each . G4f43) (string-copy . G4f42) (string-append . G4f41) (string->symbol . G4f40) (string->number . G4f3f) (string->list . G4f3e) (string . G4f3d) (sqrt . G4f3c) (sin . G4f3b) (round . G4f3a) (reverse . G4f39) (real? . G4f38) (real-valued? . G4f37) (real-part . G4f36) (rationalize . G4f35) (rational? . G4f34) (rational-valued? . G4f33) (procedure? . G4f32) (positive? . G4f31) (pair? . G4f30) (odd? . G4f2f) (numerator . G4f2e) (number? . G4f2d) (number->string . G4f2c) (null? . G4f2b) (not . G4f2a) (negative? . G4f29) (nan? . G4f28) (min . G4f27) (max . G4f26) (map . G4f25) (make-vector . G4f24) (make-string . G4f23) (make-rectangular . G4f22) (make-polar . G4f21) (magnitude . G4f20) (log . G4f1f) (list? . G4f1e) (list-tail . G4f1d) (list-ref . G4f1c) (list->vector . G4f1b) (list->string . G4f1a) (list . G4f19) (length . G4f18) (lcm . G4f17) (integer? . G4f16) (integer-valued? . G4f15) (integer->char . G4f14) (infinite? . G4f13) (inexact? . G4f12) (inexact . G4f11) (imag-part . G4f10) (gcd . G4f0f) (for-each . G4f0e) (floor . G4f0d) (finite? . G4f0c) (expt . G4f0b) (exp . G4f0a) (exact? . G4f09) (exact-integer-sqrt . G4f08) (exact . G4f07) (even? . G4f06) (error . G4f05) (eqv? . G4f04) (equal? . G4f03) (eq? . G4f02) (dynamic-wind . G4f01) (div0-and-mod0 . G4f00) (mod0 . G4eff) (div0 . G4efe) (div-and-mod . G4efd) (mod . G4efc) (div . G4efb) (denominator . G4efa) (cos . G4ef9) (cons . G4ef8) (complex? . G4ef7) (char? . G4ef6) (char>? . G4ef5) (char>=? . G4ef4) (char=? . G4ef3) (char<? . G4ef2) (char<=? . G4ef1) (char->integer . G4ef0) (ceiling . G4eef) (call-with-values . G4eee) (call/cc . G4eed) (call-with-current-continuation . G4eec) (cddddr . G4eeb) (cdddar . G4eea) (cddadr . G4ee9) (cddaar . G4ee8) (cdaddr . G4ee7) (cdadar . G4ee6) (cdaadr . G4ee5) (cdaaar . G4ee4) (cadddr . G4ee3) (caddar . G4ee2) (cadadr . G4ee1) (cadaar . G4ee0) (caaddr . G4edf) (caadar . G4ede) (caaadr . G4edd) (caaaar . G4edc) (cdddr . G4edb) (cddar . G4eda) (cdadr . G4ed9) (cdaar . G4ed8) (caddr . G4ed7) (cadar . G4ed6) (caadr . G4ed5) (caaar . G4ed4) (cddr . G4ed3) (cdar . G4ed2) (cadr . G4ed1) (caar . G4ed0) (cdr . G4ecf) (car . G4ece) (boolean? . G4ecd) (boolean=? . G4ecc) (atan . G4ecb) (assertion-violation . G4eca) (asin . G4ec9) (apply . G4ec8) (append . G4ec7) (angle . G4ec6) (acos . G4ec5) (abs . G4ec4) (/ . G4ec3) (* . G4ec2) (- . G4ec1) (+ . G4ec0) (>= . G4ebf) (> . G4ebe) (= . G4ebd) (<= . G4ebc) (< . G4ebb) (unquote-splicing . G4e87) (unquote . G4e86) (_ . G4e85) (else . G4e84) (=> . G4e83) (... . G4e82) (assert . G4e81) (or . G4e7d) (and . G4e7c) (cond . G4e7a) (let* . G4e79) (let . G4e78) (let*-values . G4e77) (let-values . G4e76) (identifier-syntax . G4e75) (quasiquote . G4e72) (syntax-rules . G4e71) (case . G4e6c) (if . G4e68) (letrec* . G4e67) (letrec . G4e66) (lambda . G4e63) (quote . G4e60) (letrec-syntax . G4e5e) (let-syntax . G4e5d) (set! . G4e5c) (begin . G4e5a) (define-syntax . G4e58) (define . G4e57)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5168 '(rnrs lists) '(6) '() '() '() '((remove . G5034) (remv . G5033) (remp . G5032) (remq . G5031) (partition . G5030) (memv . G502f) (memq . G502e) (memp . G502d) (member . G502c) (exists . G502b) (for-all . G502a) (fold-right . G5029) (fold-left . G5028) (find . G5027) (filter . G5026) (cons* . G5025) (assv . G5024) (assq . G5023) (assp . G5022) (assoc . G5021)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5169 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G508e) (call-with-input-file . G508d) (write-char . G508c) (write . G508b) (with-output-to-file . G508a) (with-input-from-file . G5089) (read-char . G5088) (read . G5087) (peek-char . G5086) (open-output-file . G5085) (open-input-file . G5084) (newline . G5083) (display . G5082) (close-output-port . G5081) (close-input-port . G5080) (eof-object? . G507f) (eof-object . G507e) (current-error-port . G507d) (current-output-port . G507c) (current-input-port . G507b) (output-port? . G507a) (input-port? . G5079) (make-i/o-write-error . G4c95) (make-i/o-read-error . G4c81) (make-i/o-port-error . G4d2c) (make-i/o-invalid-position-error . G4caa) (make-i/o-filename-error . G4cc3) (make-i/o-file-protection-error . G4cdb) (make-i/o-file-is-read-only-error . G4cef) (make-i/o-file-does-not-exist-error . G4d17) (make-i/o-file-already-exists-error . G4d03) (make-i/o-error . G4c6d) (i/o-write-error? . G4c97) (i/o-read-error? . G4c83) (i/o-port-error? . G4d30) (i/o-invalid-position-error? . G4cae) (i/o-filename-error? . G4cc7) (i/o-file-protection-error? . G4cdd) (i/o-file-is-read-only-error? . G4cf1) (i/o-file-does-not-exist-error? . G4d19) (i/o-file-already-exists-error? . G4d05) (i/o-error? . G4c6f) (i/o-error-port . G4d32) (i/o-error-filename . G4cc9) (&i/o-port . G4eb4) (&i/o-file-does-not-exist . G4eb3) (&i/o-file-already-exists . G4eb2) (&i/o-file-is-read-only . G4eb1) (&i/o-file-protection . G4eb0) (&i/o-filename . G4eaf) (&i/o-invalid-position . G4eae) (&i/o-write . G4ead) (&i/o-read . G4eac) (&i/o . G4eab)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G516a '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G504f) (utf32->string . G5005) (utf16->string . G5004) (utf8->string . G5003) (uint-list->bytevector . G5002) (u8-list->bytevector . G5001) (string->utf8 . G5000) (string->utf32 . G4fff) (string->utf16 . G4ffe) (sint-list->bytevector . G4ffd) (native-endianness . G4ffc) (bytevector? . G4ffb) (bytevector=? . G4ffa) (bytevector-uint-set! . G4ff9) (bytevector-uint-ref . G4ff8) (bytevector-u8-set! . G4ff7) (bytevector-u8-ref . G4ff6) (bytevector-u64-set! . G4ff5) (bytevector-u64-ref . G4ff4) (bytevector-u64-native-set! . G4ff3) (bytevector-u64-native-ref . G4ff2) (bytevector-u32-set! . G4ff1) (bytevector-u32-ref . G4ff0) (bytevector-u32-native-set! . G4fef) (bytevector-u32-native-ref . G4fee) (bytevector-u16-set! . G4fed) (bytevector-u16-ref . G4fec) (bytevector-u16-native-set! . G4feb) (bytevector-u16-native-ref . G4fea) (bytevector-sint-set! . G4fe9) (bytevector-sint-ref . G4fe8) (bytevector-s8-set! . G4fe7) (bytevector-s8-ref . G4fe6) (bytevector-s64-set! . G4fe5) (bytevector-s64-ref . G4fe4) (bytevector-s64-native-set! . G4fe3) (bytevector-s64-native-ref . G4fe2) (bytevector-s32-set! . G4fe1) (bytevector-s32-ref . G4fe0) (bytevector-s32-native-set! . G4fdf) (bytevector-s32-native-ref . G4fde) (bytevector-s16-set! . G4fdd) (bytevector-s16-ref . G4fdc) (bytevector-s16-native-set! . G4fdb) (bytevector-s16-native-ref . G4fda) (bytevector-length . G4fd9) (bytevector-ieee-single-ref . G4fd8) (bytevector-ieee-single-native-set! . G4fd7) (bytevector-ieee-single-native-ref . G4fd6) (bytevector-ieee-double-ref . G4fd5) (bytevector-ieee-double-native-set! . G4fd4) (bytevector-ieee-double-native-ref . G4fd3) (bytevector-fill! . G4fd2) (bytevector-copy! . G4fd1) (bytevector-copy . G4fd0) (bytevector->uint-list . G4fcf) (bytevector->u8-list . G4fce) (bytevector->sint-list . G4fcd) (endianness . G4e80)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G516b '(rnrs unicode) '(6) '() '() '() '((string-upcase . G50d6) (string-titlecase . G50d5) (string-normalize-nfkd . G50d4) (string-normalize-nfkc . G50d3) (string-normalize-nfd . G50d2) (string-normalize-nfc . G50d1) (string-foldcase . G50d0) (string-downcase . G50cf) (string-ci>? . G50ce) (string-ci>=? . G50cd) (string-ci=? . G50cc) (string-ci<? . G50cb) (string-ci<=? . G50ca) (char-whitespace? . G50c9) (char-upper-case? . G50c8) (char-title-case? . G50c7) (char-numeric? . G50c6) (char-lower-case? . G50c5) (char-general-category . G50c4) (char-upcase . G50c3) (char-titlecase . G50c2) (char-foldcase . G50c1) (char-downcase . G50c0) (char-ci>? . G50bf) (char-ci>=? . G50be) (char-ci=? . G50bd) (char-ci<? . G50bc) (char-ci<=? . G50bb) (char-alphabetic? . G50ba)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G516c '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G501a) (raise-continuable . G5019) (raise . G5018) (guard . G4e8c) (else . G4e84) (=> . G4e83)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G516d '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4f6d) (bitwise-reverse-bit-field . G4f6c) (bitwise-length . G4f6b) (bitwise-if . G4f6a) (bitwise-first-bit-set . G4f69) (bitwise-copy-bit-field . G4f68) (bitwise-copy-bit . G4f67) (bitwise-bit-set? . G4f66) (bitwise-bit-field . G4f65) (bitwise-bit-count . G4f64) (bitwise-xor . G4f63) (bitwise-ior . G4f62) (bitwise-and . G4f61) (bitwise-not . G4f60) (bitwise-arithmetic-shift-right . G4f5f) (bitwise-arithmetic-shift-left . G4f5e) (bitwise-arithmetic-shift . G4f5d)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G516e '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f9a) (fxxor . G4f99) (fxrotate-bit-field . G4f98) (fxreverse-bit-field . G4f97) (fxpositive? . G4f96) (fxodd? . G4f95) (fxnot . G4f94) (fxnegative? . G4f93) (fxmod0 . G4f92) (fxmod . G4f91) (fxmin . G4f90) (fxmax . G4f8f) (fxlength . G4f8e) (fxior . G4f8d) (fxif . G4f8c) (fxfirst-bit-set . G4f8b) (fxeven? . G4f8a) (fxdiv0-and-mod0 . G4f89) (fxdiv0 . G4f88) (fxdiv-and-mod . G4f87) (fxdiv . G4f86) (fxcopy-bit-field . G4f85) (fxcopy-bit . G4f84) (fxbit-set? . G4f83) (fxbit-field . G4f82) (fxbit-count . G4f81) (fxarithmetic-shift-right . G4f80) (fxarithmetic-shift-left . G4f7f) (fxarithmetic-shift . G4f7e) (fxand . G4f7d) (fx>? . G4f7c) (fx>=? . G4f7b) (fx=? . G4f7a) (fx<? . G4f79) (fx<=? . G4f78) (fx-/carry . G4f77) (fx- . G4f76) (fx+/carry . G4f75) (fx+ . G4f74) (fx*/carry . G4f73) (fx* . G4f72) (greatest-fixnum . G4f71) (least-fixnum . G4f70) (fixnum-width . G4f6f) (fixnum? . G4f6e)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G516f '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4fcc) (no-infinities-violation? . G4fcb) (make-no-nans-violation . G4fca) (make-no-infinities-violation . G4fc9) (real->flonum . G4fc8) (flzero? . G4fc7) (fltruncate . G4fc6) (fltan . G4fc5) (flsqrt . G4fc4) (flsin . G4fc3) (flround . G4fc2) (flpositive? . G4fc1) (flonum? . G4fc0) (flodd? . G4fbf) (flnumerator . G4fbe) (flnegative? . G4fbd) (flnan? . G4fbc) (flmod0 . G4fbb) (flmod . G4fba) (flmin . G4fb9) (flmax . G4fb8) (fllog . G4fb7) (flinteger? . G4fb6) (flinfinite? . G4fb5) (flfloor . G4fb4) (flfinite? . G4fb3) (flexpt . G4fb2) (flexp . G4fb1) (fleven? . G4fb0) (fldiv0-and-mod0 . G4faf) (fldiv0 . G4fae) (fldiv-and-mod . G4fad) (fldiv . G4fac) (fldenominator . G4fab) (flcos . G4faa) (flceiling . G4fa9) (flatan . G4fa8) (flasin . G4fa7) (flacos . G4fa6) (flabs . G4fa5) (fl>? . G4fa4) (fl>=? . G4fa3) (fl=? . G4fa2) (fl<? . G4fa1) (fl<=? . G4fa0) (fl/ . G4f9f) (fl- . G4f9e) (fl+ . G4f9d) (fl* . G4f9c) (fixnum->flonum . G4f9b) (&no-nans . G4eb8) (&no-infinities . G4eb7)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5170 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G50a3) (string-ci-hash . G50a2) (string-hash . G50a1) (equal-hash . G50a0) (hashtable-equivalence-function . G509f) (make-hashtable . G509e) (hashtable-hash-function . G509d) (make-eqv-hashtable . G509c) (make-eq-hashtable . G509b) (hashtable? . G509a) (hashtable-update! . G5099) (hashtable-size . G5098) (hashtable-set! . G5097) (hashtable-ref . G5096) (hashtable-mutable? . G5095) (hashtable-keys . G5094) (hashtable-entries . G5093) (hashtable-delete! . G5092) (hashtable-copy . G5091) (hashtable-contains? . G5090) (hashtable-clear! . G508f)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5171 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G507f) (eof-object . G507e) (current-error-port . G507d) (current-output-port . G507c) (current-input-port . G507b) (output-port? . G507a) (input-port? . G5079) (utf-8-codec . G5078) (utf-16-codec . G5077) (transcoder-error-handling-mode . G5076) (transcoder-eol-style . G5075) (transcoder-codec . G5074) (transcoded-port . G5073) (textual-port? . G5072) (string->bytevector . G5071) (standard-output-port . G5070) (standard-input-port . G506f) (standard-error-port . G506e) (set-port-position! . G506d) (put-u8 . G506c) (put-string . G506b) (put-datum . G506a) (put-char . G5069) (put-bytevector . G5068) (port? . G5067) (port-transcoder . G5066) (port-position . G5065) (port-has-set-port-position!? . G5064) (port-has-port-position? . G5063) (port-eof? . G5062) (output-port-buffer-mode . G5061) (open-string-output-port . G5060) (open-string-input-port . G505f) (open-file-output-port . G505e) (open-file-input/output-port . G505d) (open-file-input-port . G505c) (open-bytevector-output-port . G505b) (open-bytevector-input-port . G505a) (native-transcoder . G5059) (native-eol-style . G5058) (make-transcoder . G5057) (latin-1-codec . G5056) (make-i/o-write-error . G4c95) (make-i/o-read-error . G4c81) (make-i/o-port-error . G4d2c) (make-i/o-invalid-position-error . G4caa) (make-i/o-filename-error . G4cc3) (make-i/o-file-protection-error . G4cdb) (make-i/o-file-is-read-only-error . G4cef) (make-i/o-file-does-not-exist-error . G4d17) (make-i/o-file-already-exists-error . G4d03) (make-i/o-error . G4c6d) (make-i/o-encoding-error . G4d59) (make-i/o-decoding-error . G4d44) (make-custom-textual-output-port . G5055) (make-custom-textual-input/output-port . G5054) (make-custom-textual-input-port . G5053) (make-custom-binary-output-port . G5052) (make-custom-binary-input/output-port . G5051) (make-custom-binary-input-port . G5050) (lookahead-u8 . G504e) (lookahead-char . G504d) (i/o-write-error? . G4c97) (i/o-read-error? . G4c83) (i/o-port-error? . G4d30) (i/o-invalid-position-error? . G4cae) (i/o-filename-error? . G4cc7) (i/o-file-protection-error? . G4cdd) (i/o-file-is-read-only-error? . G4cf1) (i/o-file-does-not-exist-error? . G4d19) (i/o-file-already-exists-error? . G4d05) (i/o-error? . G4c6f) (i/o-error-port . G4d32) (i/o-error-filename . G4cc9) (i/o-encoding-error? . G4d5d) (i/o-encoding-error-char . G4d5f) (i/o-decoding-error? . G4d46) (get-u8 . G504c) (get-string-n! . G504b) (get-string-n . G504a) (get-string-all . G5049) (get-line . G5048) (get-datum . G5047) (get-char . G5046) (get-bytevector-some . G5045) (get-bytevector-n! . G5044) (get-bytevector-n . G5043) (get-bytevector-all . G5042) (flush-output-port . G5041) (close-port . G5040) (call-with-string-output-port . G5020) (call-with-port . G501f) (call-with-bytevector-output-port . G501e) (bytevector->string . G501d) (buffer-mode? . G501c) (binary-port? . G501b) (&i/o-encoding . G4eb6) (&i/o-decoding . G4eb5) (&i/o-port . G4eb4) (&i/o-file-does-not-exist . G4eb3) (&i/o-file-already-exists . G4eb2) (&i/o-file-is-read-only . G4eb1) (&i/o-file-protection . G4eb0) (&i/o-filename . G4eaf) (&i/o-invalid-position . G4eae) (&i/o-write . G4ead) (&i/o-read . G4eac) (&i/o . G4eab) (error-handling-mode . G4e90) (file-options . G4e8f) (buffer-mode . G4e8e) (eol-style . G4e8d)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5172 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G5017) (enum-set=? . G5016) (enum-set-universe . G5015) (enum-set-union . G5014) (enum-set-subset? . G5013) (enum-set-projection . G5012) (enum-set-member? . G5011) (enum-set-intersection . G5010) (enum-set-indexer . G500f) (enum-set-difference . G500e) (enum-set-constructor . G500d) (enum-set-complement . G500c) (enum-set->list . G500b) (define-enumeration . G4e9b)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5173 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4b8b) (warning? . G4b0b) (violation? . G4b47) (undefined-violation? . G4bfb) (syntax-violation? . G4be3) (syntax-violation-subform . G4be7) (syntax-violation-form . G4be5) (syntax-violation . G317a) (simple-conditions . G500a) (serious-condition? . G4b1f) (non-continuable-violation? . G4ba1) (message-condition? . G4af5) (make-who-condition . G4b87) (make-warning . G4b09) (make-violation . G4b45) (make-undefined-violation . G4bf9) (make-syntax-violation . G4bdd) (make-serious-condition . G4b1d) (make-non-continuable-violation . G4b9f) (make-message-condition . G4af1) (make-lexical-violation . G4bc7) (make-irritants-condition . G4b6e) (make-implementation-restriction-violation . G4bb3) (make-error . G4b31) (make-assertion-violation . G4b59) (lexical-violation? . G4bc9) (irritants-condition? . G4b72) (implementation-restriction-violation? . G4bb5) (error? . G4b33) (condition-who . G4b8d) (condition-predicate . G5009) (condition-message . G4af7) (condition-irritants . G4b74) (condition-accessor . G5008) (condition . G5007) (assertion-violation? . G4b5b) (condition? . G5006) (&undefined . G4eaa) (&syntax . G4ea9) (&lexical . G4ea8) (&implementation-restriction . G4ea7) (&non-continuable . G4ea6) (&who . G4ea5) (&irritants . G4ea4) (&assertion . G4ea3) (&violation . G4ea2) (&error . G4ea1) (&serious . G4ea0) (&warning . G4e9f) (&message . G4e9e) (&condition . G4e9d) (define-condition-type . G4e9c)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5174 '(rnrs records inspection) '(6) '() '() '() '((record? . G50b2) (record-type-uid . G50b1) (record-type-sealed? . G50b0) (record-type-parent . G50af) (record-type-opaque? . G50ae) (record-type-name . G50ad) (record-type-generative? . G50ac) (record-type-field-names . G50ab) (record-rtd . G50aa) (record-field-mutable? . G50a9)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5175 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G50b9) (record-predicate . G50b8) (record-mutator . G50b7) (record-constructor . G50b6) (record-accessor . G50b5) (make-record-type-descriptor . G50b4) (make-record-constructor-descriptor . G50b3)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5176 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e9a) (parent-rtd . G4e99) (nongenerative . G4e98) (opaque . G4e97) (sealed . G4e96) (protocol . G4e95) (parent . G4e94) (immutable . G4e93) (mutable . G4e92) (fields . G4e91) (record-constructor-descriptor . G4e6e) (record-type-descriptor . G4e6d)) '() values values '#f '#f '#t '#f) (G2c38@G2acb@install-library 'G5177 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G5157) (&no-nans-rtd . G5156) (&no-infinities-rcd . G5155) (&no-infinities-rtd . G5154) (&i/o-encoding-rcd . G5153) (&i/o-encoding-rtd . G5152) (&i/o-decoding-rcd . G5151) (&i/o-decoding-rtd . G5150) (&i/o-port-rcd . G514f) (&i/o-port-rtd . G514e) (&i/o-file-does-not-exist-rcd . G514d) (&i/o-file-does-not-exist-rtd . G514c) (&i/o-file-already-exists-rcd . G514b) (&i/o-file-already-exists-rtd . G514a) (&i/o-file-is-read-only-rcd . G5149) (&i/o-file-is-read-only-rtd . G5148) (&i/o-file-protection-rcd . G5147) (&i/o-file-protection-rtd . G5146) (&i/o-filename-rcd . G5145) (&i/o-filename-rtd . G5144) (&i/o-invalid-position-rcd . G5143) (&i/o-invalid-position-rtd . G5142) (&i/o-write-rcd . G5141) (&i/o-write-rtd . G5140) (&i/o-read-rcd . G513f) (&i/o-read-rtd . G513e) (&i/o-rcd . G513d) (&i/o-rtd . G513c) (&undefined-rcd . G513b) (&undefined-rtd . G513a) (&syntax-rcd . G5139) (&syntax-rtd . G5138) (&lexical-rcd . G5137) (&lexical-rtd . G5136) (&implementation-restriction-rcd . G5135) (&implementation-restriction-rtd . G5134) (&non-continuable-rcd . G5133) (&non-continuable-rtd . G5132) (&who-rcd . G5131) (&who-rtd . G5130) (&irritants-rcd . G512f) (&irritants-rtd . G512e) (&assertion-rcd . G512d) (&assertion-rtd . G512c) (&violation-rcd . G512b) (&violation-rtd . G512a) (&error-rcd . G5129) (&error-rtd . G5128) (&serious-rcd . G5127) (&serious-rtd . G5126) (&warning-rcd . G5125) (&warning-rtd . G5124) (&message-rcd . G5123) (&message-rtd . G5122) (&condition-rcd . G5121) (&condition-rtd . G5120) (syntax-error . G3174) (syntax-dispatch . G3087) (pretty-print . G511f) (eval-core . G511e) (set-symbol-value! . G511d) (symbol-value . G511c) (gensym . G511b) (void . G511a) (load . G4dbe) (interaction-environment . G3186) (char-ready? . G5119) (regexp? . G5118) (read-line . G5117) (dotted-list? . G5116) (circular-list? . G5115) (proper-list? . G5114) (circular-list . G5113) (last . G5112) (last-pair . G5111) (not-pair? . G5110) (split-at! . G510f) (split-at . G510e) (list= . G510d) (list-copy . G510c) (list-tabulate . G510b) (make-list . G510a) (xcons . G5109) (tenth . G5108) (ninth . G5107) (eighth . G5106) (seventh . G5105) (sixth . G5104) (fifth . G5103) (drop-right! . G5102) (drop-right . G5101) (take-right . G5100) (take! . G50ff) (drop . G50fe) (take . G50fd) (car+cdr . G50fc) (third . G50fb) (second . G50fa) (first . G50f9) (assoc-ref . G50f8) (alist-cons . G50f7) (print . G50f6) (format . G50f5) (standard-library-path . G50f4) (file-newer? . G50f3) (stat-mtime . G50f2) (current-directory . G50f1) (write-to-file . G50f0) (file->list . G50ef) (file->string . G50ee) (digit->integer . G50ed) (call-with-string-input-port . G50ec) (call-with-string-io . G50eb) (string-split . G50ea) (bytevector-for-each . G50e9) (string->regexp . G50e8) (rxmatch . G50e7) (regexp-replace-all . G50e6) (hashtable-for-each . G50e5) (readdir . G50e4) (get-environment-variables . G50e3) (get-environment-variable . G50e2) (get-command-line . G50e1) (sys-display . G50e0) (source-info . G50df) (make-compiler-instruction . G50de) (make-instruction . G50dd) (set-source-info! . G50dc) (bignum? . G50db) (make-complex . G50da) (fasl-read . G50d9) (fasl-write . G50d8) (receive . G50d7) (string-upcase . G50d6) (string-titlecase . G50d5) (string-normalize-nfkd . G50d4) (string-normalize-nfkc . G50d3) (string-normalize-nfd . G50d2) (string-normalize-nfc . G50d1) (string-foldcase . G50d0) (string-downcase . G50cf) (string-ci>? . G50ce) (string-ci>=? . G50cd) (string-ci=? . G50cc) (string-ci<? . G50cb) (string-ci<=? . G50ca) (char-whitespace? . G50c9) (char-upper-case? . G50c8) (char-title-case? . G50c7) (char-numeric? . G50c6) (char-lower-case? . G50c5) (char-general-category . G50c4) (char-upcase . G50c3) (char-titlecase . G50c2) (char-foldcase . G50c1) (char-downcase . G50c0) (char-ci>? . G50bf) (char-ci>=? . G50be) (char-ci=? . G50bd) (char-ci<? . G50bc) (char-ci<=? . G50bb) (char-alphabetic? . G50ba) (make-variable-transformer . G2e85) (identifier? . G317c) (generate-temporaries . G3166) (free-identifier=? . G3168) (syntax->datum . G3180) (datum->syntax . G317e) (bound-identifier=? . G316a) (record-type-descriptor? . G50b9) (record-predicate . G50b8) (record-mutator . G50b7) (record-constructor . G50b6) (record-accessor . G50b5) (make-record-type-descriptor . G50b4) (make-record-constructor-descriptor . G50b3) (record? . G50b2) (record-type-uid . G50b1) (record-type-sealed? . G50b0) (record-type-parent . G50af) (record-type-opaque? . G50ae) (record-type-name . G50ad) (record-type-generative? . G50ac) (record-type-field-names . G50ab) (record-rtd . G50aa) (record-field-mutable? . G50a9) (delete-file . G50a8) (file-exists? . G50a7) (vector-sort! . G50a6) (vector-sort . G50a5) (list-sort . G50a4) (symbol-hash . G50a3) (string-ci-hash . G50a2) (string-hash . G50a1) (equal-hash . G50a0) (hashtable-equivalence-function . G509f) (make-hashtable . G509e) (hashtable-hash-function . G509d) (make-eqv-hashtable . G509c) (make-eq-hashtable . G509b) (hashtable? . G509a) (hashtable-update! . G5099) (hashtable-size . G5098) (hashtable-set! . G5097) (hashtable-ref . G5096) (hashtable-mutable? . G5095) (hashtable-keys . G5094) (hashtable-entries . G5093) (hashtable-delete! . G5092) (hashtable-copy . G5091) (hashtable-contains? . G5090) (hashtable-clear! . G508f) (call-with-output-file . G508e) (call-with-input-file . G508d) (write-char . G508c) (write . G508b) (with-output-to-file . G508a) (with-input-from-file . G5089) (read-char . G5088) (read . G5087) (peek-char . G5086) (open-output-file . G5085) (open-input-file . G5084) (newline . G5083) (display . G5082) (close-output-port . G5081) (close-input-port . G5080) (eof-object? . G507f) (eof-object . G507e) (current-error-port . G507d) (current-output-port . G507c) (current-input-port . G507b) (output-port? . G507a) (input-port? . G5079) (utf-8-codec . G5078) (utf-16-codec . G5077) (transcoder-error-handling-mode . G5076) (transcoder-eol-style . G5075) (transcoder-codec . G5074) (transcoded-port . G5073) (textual-port? . G5072) (string->bytevector . G5071) (standard-output-port . G5070) (standard-input-port . G506f) (standard-error-port . G506e) (set-port-position! . G506d) (put-u8 . G506c) (put-string . G506b) (put-datum . G506a) (put-char . G5069) (put-bytevector . G5068) (port? . G5067) (port-transcoder . G5066) (port-position . G5065) (port-has-set-port-position!? . G5064) (port-has-port-position? . G5063) (port-eof? . G5062) (output-port-buffer-mode . G5061) (open-string-output-port . G5060) (open-string-input-port . G505f) (open-file-output-port . G505e) (open-file-input/output-port . G505d) (open-file-input-port . G505c) (open-bytevector-output-port . G505b) (open-bytevector-input-port . G505a) (native-transcoder . G5059) (native-eol-style . G5058) (make-transcoder . G5057) (latin-1-codec . G5056) (make-i/o-write-error . G4c95) (make-i/o-read-error . G4c81) (make-i/o-port-error . G4d2c) (make-i/o-invalid-position-error . G4caa) (make-i/o-filename-error . G4cc3) (make-i/o-file-protection-error . G4cdb) (make-i/o-file-is-read-only-error . G4cef) (make-i/o-file-does-not-exist-error . G4d17) (make-i/o-file-already-exists-error . G4d03) (make-i/o-error . G4c6d) (make-i/o-encoding-error . G4d59) (make-i/o-decoding-error . G4d44) (make-custom-textual-output-port . G5055) (make-custom-textual-input/output-port . G5054) (make-custom-textual-input-port . G5053) (make-custom-binary-output-port . G5052) (make-custom-binary-input/output-port . G5051) (make-custom-binary-input-port . G5050) (make-bytevector . G504f) (lookahead-u8 . G504e) (lookahead-char . G504d) (i/o-write-error? . G4c97) (i/o-read-error? . G4c83) (i/o-port-error? . G4d30) (i/o-invalid-position-error? . G4cae) (i/o-filename-error? . G4cc7) (i/o-file-protection-error? . G4cdd) (i/o-file-is-read-only-error? . G4cf1) (i/o-file-does-not-exist-error? . G4d19) (i/o-file-already-exists-error? . G4d05) (i/o-error? . G4c6f) (i/o-error-port . G4d32) (i/o-error-filename . G4cc9) (i/o-encoding-error? . G4d5d) (i/o-encoding-error-char . G4d5f) (i/o-decoding-error? . G4d46) (get-u8 . G504c) (get-string-n! . G504b) (get-string-n . G504a) (get-string-all . G5049) (get-line . G5048) (get-datum . G5047) (get-char . G5046) (get-bytevector-some . G5045) (get-bytevector-n! . G5044) (get-bytevector-n . G5043) (get-bytevector-all . G5042) (flush-output-port . G5041) (close-port . G5040) (scheme-report-environment . G3154) (quotient . G503f) (null-environment . G3152) (remainder . G503e) (modulo . G503d) (inexact->exact . G503c) (force . G503b) (exact->inexact . G503a) (exit . G5039) (command-line . G4db8) (string-fill! . G5038) (string-set! . G5037) (set-cdr! . G5036) (set-car! . G5035) (remove . G5034) (remv . G5033) (remp . G5032) (remq . G5031) (partition . G5030) (memv . G502f) (memq . G502e) (memp . G502d) (member . G502c) (exists . G502b) (for-all . G502a) (fold-right . G5029) (fold-left . G5028) (find . G5027) (filter . G5026) (cons* . G5025) (assv . G5024) (assq . G5023) (assp . G5022) (assoc . G5021) (call-with-string-output-port . G5020) (call-with-port . G501f) (call-with-bytevector-output-port . G501e) (bytevector->string . G501d) (buffer-mode? . G501c) (binary-port? . G501b) (with-exception-handler . G501a) (raise-continuable . G5019) (raise . G5018) (eval . G3158) (environment . G3150) (make-enumeration . G5017) (enum-set=? . G5016) (enum-set-universe . G5015) (enum-set-union . G5014) (enum-set-subset? . G5013) (enum-set-projection . G5012) (enum-set-member? . G5011) (enum-set-intersection . G5010) (enum-set-indexer . G500f) (enum-set-difference . G500e) (enum-set-constructor . G500d) (enum-set-complement . G500c) (enum-set->list . G500b) (who-condition? . G4b8b) (warning? . G4b0b) (violation? . G4b47) (undefined-violation? . G4bfb) (syntax-violation? . G4be3) (syntax-violation-subform . G4be7) (syntax-violation-form . G4be5) (syntax-violation . G317a) (simple-conditions . G500a) (serious-condition? . G4b1f) (non-continuable-violation? . G4ba1) (message-condition? . G4af5) (make-who-condition . G4b87) (make-warning . G4b09) (make-violation . G4b45) (make-undefined-violation . G4bf9) (make-syntax-violation . G4bdd) (make-serious-condition . G4b1d) (make-non-continuable-violation . G4b9f) (make-message-condition . G4af1) (make-lexical-violation . G4bc7) (make-irritants-condition . G4b6e) (make-implementation-restriction-violation . G4bb3) (make-error . G4b31) (make-assertion-violation . G4b59) (lexical-violation? . G4bc9) (irritants-condition? . G4b72) (implementation-restriction-violation? . G4bb5) (error? . G4b33) (condition-who . G4b8d) (condition-predicate . G5009) (condition-message . G4af7) (condition-irritants . G4b74) (condition-accessor . G5008) (condition . G5007) (assertion-violation? . G4b5b) (condition? . G5006) (utf32->string . G5005) (utf16->string . G5004) (utf8->string . G5003) (uint-list->bytevector . G5002) (u8-list->bytevector . G5001) (string->utf8 . G5000) (string->utf32 . G4fff) (string->utf16 . G4ffe) (sint-list->bytevector . G4ffd) (native-endianness . G4ffc) (bytevector? . G4ffb) (bytevector=? . G4ffa) (bytevector-uint-set! . G4ff9) (bytevector-uint-ref . G4ff8) (bytevector-u8-set! . G4ff7) (bytevector-u8-ref . G4ff6) (bytevector-u64-set! . G4ff5) (bytevector-u64-ref . G4ff4) (bytevector-u64-native-set! . G4ff3) (bytevector-u64-native-ref . G4ff2) (bytevector-u32-set! . G4ff1) (bytevector-u32-ref . G4ff0) (bytevector-u32-native-set! . G4fef) (bytevector-u32-native-ref . G4fee) (bytevector-u16-set! . G4fed) (bytevector-u16-ref . G4fec) (bytevector-u16-native-set! . G4feb) (bytevector-u16-native-ref . G4fea) (bytevector-sint-set! . G4fe9) (bytevector-sint-ref . G4fe8) (bytevector-s8-set! . G4fe7) (bytevector-s8-ref . G4fe6) (bytevector-s64-set! . G4fe5) (bytevector-s64-ref . G4fe4) (bytevector-s64-native-set! . G4fe3) (bytevector-s64-native-ref . G4fe2) (bytevector-s32-set! . G4fe1) (bytevector-s32-ref . G4fe0) (bytevector-s32-native-set! . G4fdf) (bytevector-s32-native-ref . G4fde) (bytevector-s16-set! . G4fdd) (bytevector-s16-ref . G4fdc) (bytevector-s16-native-set! . G4fdb) (bytevector-s16-native-ref . G4fda) (bytevector-length . G4fd9) (bytevector-ieee-single-ref . G4fd8) (bytevector-ieee-single-native-set! . G4fd7) (bytevector-ieee-single-native-ref . G4fd6) (bytevector-ieee-double-ref . G4fd5) (bytevector-ieee-double-native-set! . G4fd4) (bytevector-ieee-double-native-ref . G4fd3) (bytevector-fill! . G4fd2) (bytevector-copy! . G4fd1) (bytevector-copy . G4fd0) (bytevector->uint-list . G4fcf) (bytevector->u8-list . G4fce) (bytevector->sint-list . G4fcd) (no-nans-violation? . G4fcc) (no-infinities-violation? . G4fcb) (make-no-nans-violation . G4fca) (make-no-infinities-violation . G4fc9) (real->flonum . G4fc8) (flzero? . G4fc7) (fltruncate . G4fc6) (fltan . G4fc5) (flsqrt . G4fc4) (flsin . G4fc3) (flround . G4fc2) (flpositive? . G4fc1) (flonum? . G4fc0) (flodd? . G4fbf) (flnumerator . G4fbe) (flnegative? . G4fbd) (flnan? . G4fbc) (flmod0 . G4fbb) (flmod . G4fba) (flmin . G4fb9) (flmax . G4fb8) (fllog . G4fb7) (flinteger? . G4fb6) (flinfinite? . G4fb5) (flfloor . G4fb4) (flfinite? . G4fb3) (flexpt . G4fb2) (flexp . G4fb1) (fleven? . G4fb0) (fldiv0-and-mod0 . G4faf) (fldiv0 . G4fae) (fldiv-and-mod . G4fad) (fldiv . G4fac) (fldenominator . G4fab) (flcos . G4faa) (flceiling . G4fa9) (flatan . G4fa8) (flasin . G4fa7) (flacos . G4fa6) (flabs . G4fa5) (fl>? . G4fa4) (fl>=? . G4fa3) (fl=? . G4fa2) (fl<? . G4fa1) (fl<=? . G4fa0) (fl/ . G4f9f) (fl- . G4f9e) (fl+ . G4f9d) (fl* . G4f9c) (fixnum->flonum . G4f9b) (fxzero? . G4f9a) (fxxor . G4f99) (fxrotate-bit-field . G4f98) (fxreverse-bit-field . G4f97) (fxpositive? . G4f96) (fxodd? . G4f95) (fxnot . G4f94) (fxnegative? . G4f93) (fxmod0 . G4f92) (fxmod . G4f91) (fxmin . G4f90) (fxmax . G4f8f) (fxlength . G4f8e) (fxior . G4f8d) (fxif . G4f8c) (fxfirst-bit-set . G4f8b) (fxeven? . G4f8a) (fxdiv0-and-mod0 . G4f89) (fxdiv0 . G4f88) (fxdiv-and-mod . G4f87) (fxdiv . G4f86) (fxcopy-bit-field . G4f85) (fxcopy-bit . G4f84) (fxbit-set? . G4f83) (fxbit-field . G4f82) (fxbit-count . G4f81) (fxarithmetic-shift-right . G4f80) (fxarithmetic-shift-left . G4f7f) (fxarithmetic-shift . G4f7e) (fxand . G4f7d) (fx>? . G4f7c) (fx>=? . G4f7b) (fx=? . G4f7a) (fx<? . G4f79) (fx<=? . G4f78) (fx-/carry . G4f77) (fx- . G4f76) (fx+/carry . G4f75) (fx+ . G4f74) (fx*/carry . G4f73) (fx* . G4f72) (greatest-fixnum . G4f71) (least-fixnum . G4f70) (fixnum-width . G4f6f) (fixnum? . G4f6e) (bitwise-rotate-bit-field . G4f6d) (bitwise-reverse-bit-field . G4f6c) (bitwise-length . G4f6b) (bitwise-if . G4f6a) (bitwise-first-bit-set . G4f69) (bitwise-copy-bit-field . G4f68) (bitwise-copy-bit . G4f67) (bitwise-bit-set? . G4f66) (bitwise-bit-field . G4f65) (bitwise-bit-count . G4f64) (bitwise-xor . G4f63) (bitwise-ior . G4f62) (bitwise-and . G4f61) (bitwise-not . G4f60) (bitwise-arithmetic-shift-right . G4f5f) (bitwise-arithmetic-shift-left . G4f5e) (bitwise-arithmetic-shift . G4f5d) (zero? . G4f5c) (vector? . G4f5b) (vector-set! . G4f5a) (vector-ref . G4f59) (vector-map . G4f58) (vector-length . G4f57) (vector-for-each . G4f56) (vector-fill! . G4f55) (vector->list . G4f54) (vector . G4f53) (values . G4f52) (truncate . G4f51) (tan . G4f50) (symbol? . G4f4f) (symbol=? . G4f4e) (symbol->string . G4f4d) (substring . G4f4c) (string? . G4f4b) (string>? . G4f4a) (string>=? . G4f49) (string=? . G4f48) (string<? . G4f47) (string<=? . G4f46) (string-ref . G4f45) (string-length . G4f44) (string-for-each . G4f43) (string-copy . G4f42) (string-append . G4f41) (string->symbol . G4f40) (string->number . G4f3f) (string->list . G4f3e) (string . G4f3d) (sqrt . G4f3c) (sin . G4f3b) (round . G4f3a) (reverse . G4f39) (real? . G4f38) (real-valued? . G4f37) (real-part . G4f36) (rationalize . G4f35) (rational? . G4f34) (rational-valued? . G4f33) (procedure? . G4f32) (positive? . G4f31) (pair? . G4f30) (odd? . G4f2f) (numerator . G4f2e) (number? . G4f2d) (number->string . G4f2c) (null? . G4f2b) (not . G4f2a) (negative? . G4f29) (nan? . G4f28) (min . G4f27) (max . G4f26) (map . G4f25) (make-vector . G4f24) (make-string . G4f23) (make-rectangular . G4f22) (make-polar . G4f21) (magnitude . G4f20) (log . G4f1f) (list? . G4f1e) (list-tail . G4f1d) (list-ref . G4f1c) (list->vector . G4f1b) (list->string . G4f1a) (list . G4f19) (length . G4f18) (lcm . G4f17) (integer? . G4f16) (integer-valued? . G4f15) (integer->char . G4f14) (infinite? . G4f13) (inexact? . G4f12) (inexact . G4f11) (imag-part . G4f10) (gcd . G4f0f) (for-each . G4f0e) (floor . G4f0d) (finite? . G4f0c) (expt . G4f0b) (exp . G4f0a) (exact? . G4f09) (exact-integer-sqrt . G4f08) (exact . G4f07) (even? . G4f06) (error . G4f05) (eqv? . G4f04) (equal? . G4f03) (eq? . G4f02) (dynamic-wind . G4f01) (div0-and-mod0 . G4f00) (mod0 . G4eff) (div0 . G4efe) (div-and-mod . G4efd) (mod . G4efc) (div . G4efb) (denominator . G4efa) (cos . G4ef9) (cons . G4ef8) (complex? . G4ef7) (char? . G4ef6) (char>? . G4ef5) (char>=? . G4ef4) (char=? . G4ef3) (char<? . G4ef2) (char<=? . G4ef1) (char->integer . G4ef0) (ceiling . G4eef) (call-with-values . G4eee) (call/cc . G4eed) (call-with-current-continuation . G4eec) (cddddr . G4eeb) (cdddar . G4eea) (cddadr . G4ee9) (cddaar . G4ee8) (cdaddr . G4ee7) (cdadar . G4ee6) (cdaadr . G4ee5) (cdaaar . G4ee4) (cadddr . G4ee3) (caddar . G4ee2) (cadadr . G4ee1) (cadaar . G4ee0) (caaddr . G4edf) (caadar . G4ede) (caaadr . G4edd) (caaaar . G4edc) (cdddr . G4edb) (cddar . G4eda) (cdadr . G4ed9) (cdaar . G4ed8) (caddr . G4ed7) (cadar . G4ed6) (caadr . G4ed5) (caaar . G4ed4) (cddr . G4ed3) (cdar . G4ed2) (cadr . G4ed1) (caar . G4ed0) (cdr . G4ecf) (car . G4ece) (boolean? . G4ecd) (boolean=? . G4ecc) (atan . G4ecb) (assertion-violation . G4eca) (asin . G4ec9) (apply . G4ec8) (append . G4ec7) (angle . G4ec6) (acos . G4ec5) (abs . G4ec4) (/ . G4ec3) (* . G4ec2) (- . G4ec1) (+ . G4ec0) (>= . G4ebf) (> . G4ebe) (= . G4ebd) (<= . G4ebc) (< . G4ebb) (library . G4eba) (export . G4eb9) (&no-nans . G4eb8) (&no-infinities . G4eb7) (&i/o-encoding . G4eb6) (&i/o-decoding . G4eb5) (&i/o-port . G4eb4) (&i/o-file-does-not-exist . G4eb3) (&i/o-file-already-exists . G4eb2) (&i/o-file-is-read-only . G4eb1) (&i/o-file-protection . G4eb0) (&i/o-filename . G4eaf) (&i/o-invalid-position . G4eae) (&i/o-write . G4ead) (&i/o-read . G4eac) (&i/o . G4eab) (&undefined . G4eaa) (&syntax . G4ea9) (&lexical . G4ea8) (&implementation-restriction . G4ea7) (&non-continuable . G4ea6) (&who . G4ea5) (&irritants . G4ea4) (&assertion . G4ea3) (&violation . G4ea2) (&error . G4ea1) (&serious . G4ea0) (&warning . G4e9f) (&message . G4e9e) (&condition . G4e9d) (define-condition-type . G4e9c) (define-enumeration . G4e9b) (define-record-type . G4e9a) (parent-rtd . G4e99) (nongenerative . G4e98) (opaque . G4e97) (sealed . G4e96) (protocol . G4e95) (parent . G4e94) (immutable . G4e93) (mutable . G4e92) (fields . G4e91) (error-handling-mode . G4e90) (file-options . G4e8f) (buffer-mode . G4e8e) (eol-style . G4e8d) (guard . G4e8c) (trace-define . G4e8b) (trace-lambda . G4e8a) (unsyntax-splicing . G4e89) (unsyntax . G4e88) (unquote-splicing . G4e87) (unquote . G4e86) (_ . G4e85) (else . G4e84) (=> . G4e83) (... . G4e82) (assert . G4e81) (endianness . G4e80) (delay . G4e7f) (time . G4e7e) (or . G4e7d) (and . G4e7c) (do . G4e7b) (cond . G4e7a) (let* . G4e79) (let . G4e78) (let*-values . G4e77) (let-values . G4e76) (identifier-syntax . G4e75) (with-syntax . G4e74) (quasisyntax . G4e73) (quasiquote . G4e72) (syntax-rules . G4e71) (include . G4e70) (define-struct . G4e6f) (record-constructor-descriptor . G4e6e) (record-type-descriptor . G4e6d) (case . G4e6c) (parameterize . G4e6b) (unless . G4e6a) (when . G4e69) (if . G4e68) (letrec* . G4e67) (letrec . G4e66) (type-descriptor . G4e65) (case-lambda . G4e64) (lambda . G4e63) (syntax . G4e62) (syntax-case . G4e61) (quote . G4e60) (foreign-call . G4e5f) (letrec-syntax . G4e5e) (let-syntax . G4e5d) (set! . G4e5c) (import . G4e5b) (begin . G4e5a) (module . G4e59) (define-syntax . G4e58) (define . G4e57)) '((G5157 core-prim . &no-nans-rcd) (G5156 core-prim . &no-nans-rtd) (G5155 core-prim . &no-infinities-rcd) (G5154 core-prim . &no-infinities-rtd) (G5153 core-prim . &i/o-encoding-rcd) (G5152 core-prim . &i/o-encoding-rtd) (G5151 core-prim . &i/o-decoding-rcd) (G5150 core-prim . &i/o-decoding-rtd) (G514f core-prim . &i/o-port-rcd) (G514e core-prim . &i/o-port-rtd) (G514d core-prim . &i/o-file-does-not-exist-rcd) (G514c core-prim . &i/o-file-does-not-exist-rtd) (G514b core-prim . &i/o-file-already-exists-rcd) (G514a core-prim . &i/o-file-already-exists-rtd) (G5149 core-prim . &i/o-file-is-read-only-rcd) (G5148 core-prim . &i/o-file-is-read-only-rtd) (G5147 core-prim . &i/o-file-protection-rcd) (G5146 core-prim . &i/o-file-protection-rtd) (G5145 core-prim . &i/o-filename-rcd) (G5144 core-prim . &i/o-filename-rtd) (G5143 core-prim . &i/o-invalid-position-rcd) (G5142 core-prim . &i/o-invalid-position-rtd) (G5141 core-prim . &i/o-write-rcd) (G5140 core-prim . &i/o-write-rtd) (G513f core-prim . &i/o-read-rcd) (G513e core-prim . &i/o-read-rtd) (G513d core-prim . &i/o-rcd) (G513c core-prim . &i/o-rtd) (G513b core-prim . &undefined-rcd) (G513a core-prim . &undefined-rtd) (G5139 core-prim . &syntax-rcd) (G5138 core-prim . &syntax-rtd) (G5137 core-prim . &lexical-rcd) (G5136 core-prim . &lexical-rtd) (G5135 core-prim . &implementation-restriction-rcd) (G5134 core-prim . &implementation-restriction-rtd) (G5133 core-prim . &non-continuable-rcd) (G5132 core-prim . &non-continuable-rtd) (G5131 core-prim . &who-rcd) (G5130 core-prim . &who-rtd) (G512f core-prim . &irritants-rcd) (G512e core-prim . &irritants-rtd) (G512d core-prim . &assertion-rcd) (G512c core-prim . &assertion-rtd) (G512b core-prim . &violation-rcd) (G512a core-prim . &violation-rtd) (G5129 core-prim . &error-rcd) (G5128 core-prim . &error-rtd) (G5127 core-prim . &serious-rcd) (G5126 core-prim . &serious-rtd) (G5125 core-prim . &warning-rcd) (G5124 core-prim . &warning-rtd) (G5123 core-prim . &message-rcd) (G5122 core-prim . &message-rtd) (G5121 core-prim . &condition-rcd) (G5120 core-prim . &condition-rtd) (G3174 core-prim . syntax-error) (G3087 core-prim . syntax-dispatch) (G511f core-prim . pretty-print) (G511e core-prim . eval-core) (G511d core-prim . set-symbol-value!) (G511c core-prim . symbol-value) (G511b core-prim . gensym) (G511a core-prim . void) (G4dbe core-prim . load) (G3186 core-prim . interaction-environment) (G5119 core-prim . char-ready?) (G5118 core-prim . regexp?) (G5117 core-prim . read-line) (G5116 core-prim . dotted-list?) (G5115 core-prim . circular-list?) (G5114 core-prim . proper-list?) (G5113 core-prim . circular-list) (G5112 core-prim . last) (G5111 core-prim . last-pair) (G5110 core-prim . not-pair?) (G510f core-prim . split-at!) (G510e core-prim . split-at) (G510d core-prim . list=) (G510c core-prim . list-copy) (G510b core-prim . list-tabulate) (G510a core-prim . make-list) (G5109 core-prim . xcons) (G5108 core-prim . tenth) (G5107 core-prim . ninth) (G5106 core-prim . eighth) (G5105 core-prim . seventh) (G5104 core-prim . sixth) (G5103 core-prim . fifth) (G5102 core-prim . drop-right!) (G5101 core-prim . drop-right) (G5100 core-prim . take-right) (G50ff core-prim . take!) (G50fe core-prim . drop) (G50fd core-prim . take) (G50fc core-prim . car+cdr) (G50fb core-prim . third) (G50fa core-prim . second) (G50f9 core-prim . first) (G50f8 core-prim . assoc-ref) (G50f7 core-prim . alist-cons) (G50f6 core-prim . print) (G50f5 core-prim . format) (G50f4 core-prim . standard-library-path) (G50f3 core-prim . file-newer?) (G50f2 core-prim . stat-mtime) (G50f1 core-prim . current-directory) (G50f0 core-prim . write-to-file) (G50ef core-prim . file->list) (G50ee core-prim . file->string) (G50ed core-prim . digit->integer) (G50ec core-prim . call-with-string-input-port) (G50eb core-prim . call-with-string-io) (G50ea core-prim . string-split) (G50e9 core-prim . bytevector-for-each) (G50e8 core-prim . string->regexp) (G50e7 core-prim . rxmatch) (G50e6 core-prim . regexp-replace-all) (G50e5 core-prim . hashtable-for-each) (G50e4 core-prim . readdir) (G50e3 core-prim . get-environment-variables) (G50e2 core-prim . get-environment-variable) (G50e1 core-prim . get-command-line) (G50e0 core-prim . sys-display) (G50df core-prim . source-info) (G50de core-prim . make-compiler-instruction) (G50dd core-prim . make-instruction) (G50dc core-prim . set-source-info!) (G50db core-prim . bignum?) (G50da core-prim . make-complex) (G50d9 core-prim . fasl-read) (G50d8 core-prim . fasl-write) (G50d7 core-prim . receive) (G50d6 core-prim . string-upcase) (G50d5 core-prim . string-titlecase) (G50d4 core-prim . string-normalize-nfkd) (G50d3 core-prim . string-normalize-nfkc) (G50d2 core-prim . string-normalize-nfd) (G50d1 core-prim . string-normalize-nfc) (G50d0 core-prim . string-foldcase) (G50cf core-prim . string-downcase) (G50ce core-prim . string-ci>?) (G50cd core-prim . string-ci>=?) (G50cc core-prim . string-ci=?) (G50cb core-prim . string-ci<?) (G50ca core-prim . string-ci<=?) (G50c9 core-prim . char-whitespace?) (G50c8 core-prim . char-upper-case?) (G50c7 core-prim . char-title-case?) (G50c6 core-prim . char-numeric?) (G50c5 core-prim . char-lower-case?) (G50c4 core-prim . char-general-category) (G50c3 core-prim . char-upcase) (G50c2 core-prim . char-titlecase) (G50c1 core-prim . char-foldcase) (G50c0 core-prim . char-downcase) (G50bf core-prim . char-ci>?) (G50be core-prim . char-ci>=?) (G50bd core-prim . char-ci=?) (G50bc core-prim . char-ci<?) (G50bb core-prim . char-ci<=?) (G50ba core-prim . char-alphabetic?) (G2e85 core-prim . make-variable-transformer) (G317c core-prim . identifier?) (G3166 core-prim . generate-temporaries) (G3168 core-prim . free-identifier=?) (G3180 core-prim . syntax->datum) (G317e core-prim . datum->syntax) (G316a core-prim . bound-identifier=?) (G50b9 core-prim . record-type-descriptor?) (G50b8 core-prim . record-predicate) (G50b7 core-prim . record-mutator) (G50b6 core-prim . record-constructor) (G50b5 core-prim . record-accessor) (G50b4 core-prim . make-record-type-descriptor) (G50b3 core-prim . make-record-constructor-descriptor) (G50b2 core-prim . record?) (G50b1 core-prim . record-type-uid) (G50b0 core-prim . record-type-sealed?) (G50af core-prim . record-type-parent) (G50ae core-prim . record-type-opaque?) (G50ad core-prim . record-type-name) (G50ac core-prim . record-type-generative?) (G50ab core-prim . record-type-field-names) (G50aa core-prim . record-rtd) (G50a9 core-prim . record-field-mutable?) (G50a8 core-prim . delete-file) (G50a7 core-prim . file-exists?) (G50a6 core-prim . vector-sort!) (G50a5 core-prim . vector-sort) (G50a4 core-prim . list-sort) (G50a3 core-prim . symbol-hash) (G50a2 core-prim . string-ci-hash) (G50a1 core-prim . string-hash) (G50a0 core-prim . equal-hash) (G509f core-prim . hashtable-equivalence-function) (G509e core-prim . make-hashtable) (G509d core-prim . hashtable-hash-function) (G509c core-prim . make-eqv-hashtable) (G509b core-prim . make-eq-hashtable) (G509a core-prim . hashtable?) (G5099 core-prim . hashtable-update!) (G5098 core-prim . hashtable-size) (G5097 core-prim . hashtable-set!) (G5096 core-prim . hashtable-ref) (G5095 core-prim . hashtable-mutable?) (G5094 core-prim . hashtable-keys) (G5093 core-prim . hashtable-entries) (G5092 core-prim . hashtable-delete!) (G5091 core-prim . hashtable-copy) (G5090 core-prim . hashtable-contains?) (G508f core-prim . hashtable-clear!) (G508e core-prim . call-with-output-file) (G508d core-prim . call-with-input-file) (G508c core-prim . write-char) (G508b core-prim . write) (G508a core-prim . with-output-to-file) (G5089 core-prim . with-input-from-file) (G5088 core-prim . read-char) (G5087 core-prim . read) (G5086 core-prim . peek-char) (G5085 core-prim . open-output-file) (G5084 core-prim . open-input-file) (G5083 core-prim . newline) (G5082 core-prim . display) (G5081 core-prim . close-output-port) (G5080 core-prim . close-input-port) (G507f core-prim . eof-object?) (G507e core-prim . eof-object) (G507d core-prim . current-error-port) (G507c core-prim . current-output-port) (G507b core-prim . current-input-port) (G507a core-prim . output-port?) (G5079 core-prim . input-port?) (G5078 core-prim . utf-8-codec) (G5077 core-prim . utf-16-codec) (G5076 core-prim . transcoder-error-handling-mode) (G5075 core-prim . transcoder-eol-style) (G5074 core-prim . transcoder-codec) (G5073 core-prim . transcoded-port) (G5072 core-prim . textual-port?) (G5071 core-prim . string->bytevector) (G5070 core-prim . standard-output-port) (G506f core-prim . standard-input-port) (G506e core-prim . standard-error-port) (G506d core-prim . set-port-position!) (G506c core-prim . put-u8) (G506b core-prim . put-string) (G506a core-prim . put-datum) (G5069 core-prim . put-char) (G5068 core-prim . put-bytevector) (G5067 core-prim . port?) (G5066 core-prim . port-transcoder) (G5065 core-prim . port-position) (G5064 core-prim . port-has-set-port-position!?) (G5063 core-prim . port-has-port-position?) (G5062 core-prim . port-eof?) (G5061 core-prim . output-port-buffer-mode) (G5060 core-prim . open-string-output-port) (G505f core-prim . open-string-input-port) (G505e core-prim . open-file-output-port) (G505d core-prim . open-file-input/output-port) (G505c core-prim . open-file-input-port) (G505b core-prim . open-bytevector-output-port) (G505a core-prim . open-bytevector-input-port) (G5059 core-prim . native-transcoder) (G5058 core-prim . native-eol-style) (G5057 core-prim . make-transcoder) (G5056 core-prim . latin-1-codec) (G4c95 core-prim . make-i/o-write-error) (G4c81 core-prim . make-i/o-read-error) (G4d2c core-prim . make-i/o-port-error) (G4caa core-prim . make-i/o-invalid-position-error) (G4cc3 core-prim . make-i/o-filename-error) (G4cdb core-prim . make-i/o-file-protection-error) (G4cef core-prim . make-i/o-file-is-read-only-error) (G4d17 core-prim . make-i/o-file-does-not-exist-error) (G4d03 core-prim . make-i/o-file-already-exists-error) (G4c6d core-prim . make-i/o-error) (G4d59 core-prim . make-i/o-encoding-error) (G4d44 core-prim . make-i/o-decoding-error) (G5055 core-prim . make-custom-textual-output-port) (G5054 core-prim . make-custom-textual-input/output-port) (G5053 core-prim . make-custom-textual-input-port) (G5052 core-prim . make-custom-binary-output-port) (G5051 core-prim . make-custom-binary-input/output-port) (G5050 core-prim . make-custom-binary-input-port) (G504f core-prim . make-bytevector) (G504e core-prim . lookahead-u8) (G504d core-prim . lookahead-char) (G4c97 core-prim . i/o-write-error?) (G4c83 core-prim . i/o-read-error?) (G4d30 core-prim . i/o-port-error?) (G4cae core-prim . i/o-invalid-position-error?) (G4cc7 core-prim . i/o-filename-error?) (G4cdd core-prim . i/o-file-protection-error?) (G4cf1 core-prim . i/o-file-is-read-only-error?) (G4d19 core-prim . i/o-file-does-not-exist-error?) (G4d05 core-prim . i/o-file-already-exists-error?) (G4c6f core-prim . i/o-error?) (G4d32 core-prim . i/o-error-port) (G4cc9 core-prim . i/o-error-filename) (G4d5d core-prim . i/o-encoding-error?) (G4d5f core-prim . i/o-encoding-error-char) (G4d46 core-prim . i/o-decoding-error?) (G504c core-prim . get-u8) (G504b core-prim . get-string-n!) (G504a core-prim . get-string-n) (G5049 core-prim . get-string-all) (G5048 core-prim . get-line) (G5047 core-prim . get-datum) (G5046 core-prim . get-char) (G5045 core-prim . get-bytevector-some) (G5044 core-prim . get-bytevector-n!) (G5043 core-prim . get-bytevector-n) (G5042 core-prim . get-bytevector-all) (G5041 core-prim . flush-output-port) (G5040 core-prim . close-port) (G3154 core-prim . scheme-report-environment) (G503f core-prim . quotient) (G3152 core-prim . null-environment) (G503e core-prim . remainder) (G503d core-prim . modulo) (G503c core-prim . inexact->exact) (G503b core-prim . force) (G503a core-prim . exact->inexact) (G5039 core-prim . exit) (G4db8 core-prim . command-line) (G5038 core-prim . string-fill!) (G5037 core-prim . string-set!) (G5036 core-prim . set-cdr!) (G5035 core-prim . set-car!) (G5034 core-prim . remove) (G5033 core-prim . remv) (G5032 core-prim . remp) (G5031 core-prim . remq) (G5030 core-prim . partition) (G502f core-prim . memv) (G502e core-prim . memq) (G502d core-prim . memp) (G502c core-prim . member) (G502b core-prim . exists) (G502a core-prim . for-all) (G5029 core-prim . fold-right) (G5028 core-prim . fold-left) (G5027 core-prim . find) (G5026 core-prim . filter) (G5025 core-prim . cons*) (G5024 core-prim . assv) (G5023 core-prim . assq) (G5022 core-prim . assp) (G5021 core-prim . assoc) (G5020 core-prim . call-with-string-output-port) (G501f core-prim . call-with-port) (G501e core-prim . call-with-bytevector-output-port) (G501d core-prim . bytevector->string) (G501c core-prim . buffer-mode?) (G501b core-prim . binary-port?) (G501a core-prim . with-exception-handler) (G5019 core-prim . raise-continuable) (G5018 core-prim . raise) (G3158 core-prim . eval) (G3150 core-prim . environment) (G5017 core-prim . make-enumeration) (G5016 core-prim . enum-set=?) (G5015 core-prim . enum-set-universe) (G5014 core-prim . enum-set-union) (G5013 core-prim . enum-set-subset?) (G5012 core-prim . enum-set-projection) (G5011 core-prim . enum-set-member?) (G5010 core-prim . enum-set-intersection) (G500f core-prim . enum-set-indexer) (G500e core-prim . enum-set-difference) (G500d core-prim . enum-set-constructor) (G500c core-prim . enum-set-complement) (G500b core-prim . enum-set->list) (G4b8b core-prim . who-condition?) (G4b0b core-prim . warning?) (G4b47 core-prim . violation?) (G4bfb core-prim . undefined-violation?) (G4be3 core-prim . syntax-violation?) (G4be7 core-prim . syntax-violation-subform) (G4be5 core-prim . syntax-violation-form) (G317a core-prim . syntax-violation) (G500a core-prim . simple-conditions) (G4b1f core-prim . serious-condition?) (G4ba1 core-prim . non-continuable-violation?) (G4af5 core-prim . message-condition?) (G4b87 core-prim . make-who-condition) (G4b09 core-prim . make-warning) (G4b45 core-prim . make-violation) (G4bf9 core-prim . make-undefined-violation) (G4bdd core-prim . make-syntax-violation) (G4b1d core-prim . make-serious-condition) (G4b9f core-prim . make-non-continuable-violation) (G4af1 core-prim . make-message-condition) (G4bc7 core-prim . make-lexical-violation) (G4b6e core-prim . make-irritants-condition) (G4bb3 core-prim . make-implementation-restriction-violation) (G4b31 core-prim . make-error) (G4b59 core-prim . make-assertion-violation) (G4bc9 core-prim . lexical-violation?) (G4b72 core-prim . irritants-condition?) (G4bb5 core-prim . implementation-restriction-violation?) (G4b33 core-prim . error?) (G4b8d core-prim . condition-who) (G5009 core-prim . condition-predicate) (G4af7 core-prim . condition-message) (G4b74 core-prim . condition-irritants) (G5008 core-prim . condition-accessor) (G5007 core-prim . condition) (G4b5b core-prim . assertion-violation?) (G5006 core-prim . condition?) (G5005 core-prim . utf32->string) (G5004 core-prim . utf16->string) (G5003 core-prim . utf8->string) (G5002 core-prim . uint-list->bytevector) (G5001 core-prim . u8-list->bytevector) (G5000 core-prim . string->utf8) (G4fff core-prim . string->utf32) (G4ffe core-prim . string->utf16) (G4ffd core-prim . sint-list->bytevector) (G4ffc core-prim . native-endianness) (G4ffb core-prim . bytevector?) (G4ffa core-prim . bytevector=?) (G4ff9 core-prim . bytevector-uint-set!) (G4ff8 core-prim . bytevector-uint-ref) (G4ff7 core-prim . bytevector-u8-set!) (G4ff6 core-prim . bytevector-u8-ref) (G4ff5 core-prim . bytevector-u64-set!) (G4ff4 core-prim . bytevector-u64-ref) (G4ff3 core-prim . bytevector-u64-native-set!) (G4ff2 core-prim . bytevector-u64-native-ref) (G4ff1 core-prim . bytevector-u32-set!) (G4ff0 core-prim . bytevector-u32-ref) (G4fef core-prim . bytevector-u32-native-set!) (G4fee core-prim . bytevector-u32-native-ref) (G4fed core-prim . bytevector-u16-set!) (G4fec core-prim . bytevector-u16-ref) (G4feb core-prim . bytevector-u16-native-set!) (G4fea core-prim . bytevector-u16-native-ref) (G4fe9 core-prim . bytevector-sint-set!) (G4fe8 core-prim . bytevector-sint-ref) (G4fe7 core-prim . bytevector-s8-set!) (G4fe6 core-prim . bytevector-s8-ref) (G4fe5 core-prim . bytevector-s64-set!) (G4fe4 core-prim . bytevector-s64-ref) (G4fe3 core-prim . bytevector-s64-native-set!) (G4fe2 core-prim . bytevector-s64-native-ref) (G4fe1 core-prim . bytevector-s32-set!) (G4fe0 core-prim . bytevector-s32-ref) (G4fdf core-prim . bytevector-s32-native-set!) (G4fde core-prim . bytevector-s32-native-ref) (G4fdd core-prim . bytevector-s16-set!) (G4fdc core-prim . bytevector-s16-ref) (G4fdb core-prim . bytevector-s16-native-set!) (G4fda core-prim . bytevector-s16-native-ref) (G4fd9 core-prim . bytevector-length) (G4fd8 core-prim . bytevector-ieee-single-ref) (G4fd7 core-prim . bytevector-ieee-single-native-set!) (G4fd6 core-prim . bytevector-ieee-single-native-ref) (G4fd5 core-prim . bytevector-ieee-double-ref) (G4fd4 core-prim . bytevector-ieee-double-native-set!) (G4fd3 core-prim . bytevector-ieee-double-native-ref) (G4fd2 core-prim . bytevector-fill!) (G4fd1 core-prim . bytevector-copy!) (G4fd0 core-prim . bytevector-copy) (G4fcf core-prim . bytevector->uint-list) (G4fce core-prim . bytevector->u8-list) (G4fcd core-prim . bytevector->sint-list) (G4fcc core-prim . no-nans-violation?) (G4fcb core-prim . no-infinities-violation?) (G4fca core-prim . make-no-nans-violation) (G4fc9 core-prim . make-no-infinities-violation) (G4fc8 core-prim . real->flonum) (G4fc7 core-prim . flzero?) (G4fc6 core-prim . fltruncate) (G4fc5 core-prim . fltan) (G4fc4 core-prim . flsqrt) (G4fc3 core-prim . flsin) (G4fc2 core-prim . flround) (G4fc1 core-prim . flpositive?) (G4fc0 core-prim . flonum?) (G4fbf core-prim . flodd?) (G4fbe core-prim . flnumerator) (G4fbd core-prim . flnegative?) (G4fbc core-prim . flnan?) (G4fbb core-prim . flmod0) (G4fba core-prim . flmod) (G4fb9 core-prim . flmin) (G4fb8 core-prim . flmax) (G4fb7 core-prim . fllog) (G4fb6 core-prim . flinteger?) (G4fb5 core-prim . flinfinite?) (G4fb4 core-prim . flfloor) (G4fb3 core-prim . flfinite?) (G4fb2 core-prim . flexpt) (G4fb1 core-prim . flexp) (G4fb0 core-prim . fleven?) (G4faf core-prim . fldiv0-and-mod0) (G4fae core-prim . fldiv0) (G4fad core-prim . fldiv-and-mod) (G4fac core-prim . fldiv) (G4fab core-prim . fldenominator) (G4faa core-prim . flcos) (G4fa9 core-prim . flceiling) (G4fa8 core-prim . flatan) (G4fa7 core-prim . flasin) (G4fa6 core-prim . flacos) (G4fa5 core-prim . flabs) (G4fa4 core-prim . fl>?) (G4fa3 core-prim . fl>=?) (G4fa2 core-prim . fl=?) (G4fa1 core-prim . fl<?) (G4fa0 core-prim . fl<=?) (G4f9f core-prim . fl/) (G4f9e core-prim . fl-) (G4f9d core-prim . fl+) (G4f9c core-prim . fl*) (G4f9b core-prim . fixnum->flonum) (G4f9a core-prim . fxzero?) (G4f99 core-prim . fxxor) (G4f98 core-prim . fxrotate-bit-field) (G4f97 core-prim . fxreverse-bit-field) (G4f96 core-prim . fxpositive?) (G4f95 core-prim . fxodd?) (G4f94 core-prim . fxnot) (G4f93 core-prim . fxnegative?) (G4f92 core-prim . fxmod0) (G4f91 core-prim . fxmod) (G4f90 core-prim . fxmin) (G4f8f core-prim . fxmax) (G4f8e core-prim . fxlength) (G4f8d core-prim . fxior) (G4f8c core-prim . fxif) (G4f8b core-prim . fxfirst-bit-set) (G4f8a core-prim . fxeven?) (G4f89 core-prim . fxdiv0-and-mod0) (G4f88 core-prim . fxdiv0) (G4f87 core-prim . fxdiv-and-mod) (G4f86 core-prim . fxdiv) (G4f85 core-prim . fxcopy-bit-field) (G4f84 core-prim . fxcopy-bit) (G4f83 core-prim . fxbit-set?) (G4f82 core-prim . fxbit-field) (G4f81 core-prim . fxbit-count) (G4f80 core-prim . fxarithmetic-shift-right) (G4f7f core-prim . fxarithmetic-shift-left) (G4f7e core-prim . fxarithmetic-shift) (G4f7d core-prim . fxand) (G4f7c core-prim . fx>?) (G4f7b core-prim . fx>=?) (G4f7a core-prim . fx=?) (G4f79 core-prim . fx<?) (G4f78 core-prim . fx<=?) (G4f77 core-prim . fx-/carry) (G4f76 core-prim . fx-) (G4f75 core-prim . fx+/carry) (G4f74 core-prim . fx+) (G4f73 core-prim . fx*/carry) (G4f72 core-prim . fx*) (G4f71 core-prim . greatest-fixnum) (G4f70 core-prim . least-fixnum) (G4f6f core-prim . fixnum-width) (G4f6e core-prim . fixnum?) (G4f6d core-prim . bitwise-rotate-bit-field) (G4f6c core-prim . bitwise-reverse-bit-field) (G4f6b core-prim . bitwise-length) (G4f6a core-prim . bitwise-if) (G4f69 core-prim . bitwise-first-bit-set) (G4f68 core-prim . bitwise-copy-bit-field) (G4f67 core-prim . bitwise-copy-bit) (G4f66 core-prim . bitwise-bit-set?) (G4f65 core-prim . bitwise-bit-field) (G4f64 core-prim . bitwise-bit-count) (G4f63 core-prim . bitwise-xor) (G4f62 core-prim . bitwise-ior) (G4f61 core-prim . bitwise-and) (G4f60 core-prim . bitwise-not) (G4f5f core-prim . bitwise-arithmetic-shift-right) (G4f5e core-prim . bitwise-arithmetic-shift-left) (G4f5d core-prim . bitwise-arithmetic-shift) (G4f5c core-prim . zero?) (G4f5b core-prim . vector?) (G4f5a core-prim . vector-set!) (G4f59 core-prim . vector-ref) (G4f58 core-prim . vector-map) (G4f57 core-prim . vector-length) (G4f56 core-prim . vector-for-each) (G4f55 core-prim . vector-fill!) (G4f54 core-prim . vector->list) (G4f53 core-prim . vector) (G4f52 core-prim . values) (G4f51 core-prim . truncate) (G4f50 core-prim . tan) (G4f4f core-prim . symbol?) (G4f4e core-prim . symbol=?) (G4f4d core-prim . symbol->string) (G4f4c core-prim . substring) (G4f4b core-prim . string?) (G4f4a core-prim . string>?) (G4f49 core-prim . string>=?) (G4f48 core-prim . string=?) (G4f47 core-prim . string<?) (G4f46 core-prim . string<=?) (G4f45 core-prim . string-ref) (G4f44 core-prim . string-length) (G4f43 core-prim . string-for-each) (G4f42 core-prim . string-copy) (G4f41 core-prim . string-append) (G4f40 core-prim . string->symbol) (G4f3f core-prim . string->number) (G4f3e core-prim . string->list) (G4f3d core-prim . string) (G4f3c core-prim . sqrt) (G4f3b core-prim . sin) (G4f3a core-prim . round) (G4f39 core-prim . reverse) (G4f38 core-prim . real?) (G4f37 core-prim . real-valued?) (G4f36 core-prim . real-part) (G4f35 core-prim . rationalize) (G4f34 core-prim . rational?) (G4f33 core-prim . rational-valued?) (G4f32 core-prim . procedure?) (G4f31 core-prim . positive?) (G4f30 core-prim . pair?) (G4f2f core-prim . odd?) (G4f2e core-prim . numerator) (G4f2d core-prim . number?) (G4f2c core-prim . number->string) (G4f2b core-prim . null?) (G4f2a core-prim . not) (G4f29 core-prim . negative?) (G4f28 core-prim . nan?) (G4f27 core-prim . min) (G4f26 core-prim . max) (G4f25 core-prim . map) (G4f24 core-prim . make-vector) (G4f23 core-prim . make-string) (G4f22 core-prim . make-rectangular) (G4f21 core-prim . make-polar) (G4f20 core-prim . magnitude) (G4f1f core-prim . log) (G4f1e core-prim . list?) (G4f1d core-prim . list-tail) (G4f1c core-prim . list-ref) (G4f1b core-prim . list->vector) (G4f1a core-prim . list->string) (G4f19 core-prim . list) (G4f18 core-prim . length) (G4f17 core-prim . lcm) (G4f16 core-prim . integer?) (G4f15 core-prim . integer-valued?) (G4f14 core-prim . integer->char) (G4f13 core-prim . infinite?) (G4f12 core-prim . inexact?) (G4f11 core-prim . inexact) (G4f10 core-prim . imag-part) (G4f0f core-prim . gcd) (G4f0e core-prim . for-each) (G4f0d core-prim . floor) (G4f0c core-prim . finite?) (G4f0b core-prim . expt) (G4f0a core-prim . exp) (G4f09 core-prim . exact?) (G4f08 core-prim . exact-integer-sqrt) (G4f07 core-prim . exact) (G4f06 core-prim . even?) (G4f05 core-prim . error) (G4f04 core-prim . eqv?) (G4f03 core-prim . equal?) (G4f02 core-prim . eq?) (G4f01 core-prim . dynamic-wind) (G4f00 core-prim . div0-and-mod0) (G4eff core-prim . mod0) (G4efe core-prim . div0) (G4efd core-prim . div-and-mod) (G4efc core-prim . mod) (G4efb core-prim . div) (G4efa core-prim . denominator) (G4ef9 core-prim . cos) (G4ef8 core-prim . cons) (G4ef7 core-prim . complex?) (G4ef6 core-prim . char?) (G4ef5 core-prim . char>?) (G4ef4 core-prim . char>=?) (G4ef3 core-prim . char=?) (G4ef2 core-prim . char<?) (G4ef1 core-prim . char<=?) (G4ef0 core-prim . char->integer) (G4eef core-prim . ceiling) (G4eee core-prim . call-with-values) (G4eed core-prim . call/cc) (G4eec core-prim . call-with-current-continuation) (G4eeb core-prim . cddddr) (G4eea core-prim . cdddar) (G4ee9 core-prim . cddadr) (G4ee8 core-prim . cddaar) (G4ee7 core-prim . cdaddr) (G4ee6 core-prim . cdadar) (G4ee5 core-prim . cdaadr) (G4ee4 core-prim . cdaaar) (G4ee3 core-prim . cadddr) (G4ee2 core-prim . caddar) (G4ee1 core-prim . cadadr) (G4ee0 core-prim . cadaar) (G4edf core-prim . caaddr) (G4ede core-prim . caadar) (G4edd core-prim . caaadr) (G4edc core-prim . caaaar) (G4edb core-prim . cdddr) (G4eda core-prim . cddar) (G4ed9 core-prim . cdadr) (G4ed8 core-prim . cdaar) (G4ed7 core-prim . caddr) (G4ed6 core-prim . cadar) (G4ed5 core-prim . caadr) (G4ed4 core-prim . caaar) (G4ed3 core-prim . cddr) (G4ed2 core-prim . cdar) (G4ed1 core-prim . cadr) (G4ed0 core-prim . caar) (G4ecf core-prim . cdr) (G4ece core-prim . car) (G4ecd core-prim . boolean?) (G4ecc core-prim . boolean=?) (G4ecb core-prim . atan) (G4eca core-prim . assertion-violation) (G4ec9 core-prim . asin) (G4ec8 core-prim . apply) (G4ec7 core-prim . append) (G4ec6 core-prim . angle) (G4ec5 core-prim . acos) (G4ec4 core-prim . abs) (G4ec3 core-prim . /) (G4ec2 core-prim . *) (G4ec1 core-prim . -) (G4ec0 core-prim . +) (G4ebf core-prim . >=) (G4ebe core-prim . >) (G4ebd core-prim . =) (G4ebc core-prim . <=) (G4ebb core-prim . <) (G4eba core-prim . library) (G4eb9 core-prim . export) (G4eb8 $core-rtd &no-nans-rtd &no-nans-rcd) (G4eb7 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4eb6 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4eb5 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4eb4 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4eb3 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4eb2 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4eb1 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4eb0 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4eaf $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4eae $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4ead $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4eac $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4eab $core-rtd &i/o-rtd &i/o-rcd) (G4eaa $core-rtd &undefined-rtd &undefined-rcd) (G4ea9 $core-rtd &syntax-rtd &syntax-rcd) (G4ea8 $core-rtd &lexical-rtd &lexical-rcd) (G4ea7 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4ea6 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4ea5 $core-rtd &who-rtd &who-rcd) (G4ea4 $core-rtd &irritants-rtd &irritants-rcd) (G4ea3 $core-rtd &assertion-rtd &assertion-rcd) (G4ea2 $core-rtd &violation-rtd &violation-rcd) (G4ea1 $core-rtd &error-rtd &error-rcd) (G4ea0 $core-rtd &serious-rtd &serious-rcd) (G4e9f $core-rtd &warning-rtd &warning-rcd) (G4e9e $core-rtd &message-rtd &message-rcd) (G4e9d $core-rtd &condition-rtd &condition-rcd) (G4e9c macro . define-condition-type) (G4e9b macro . define-enumeration) (G4e9a macro . define-record-type) (G4e99 macro . parent-rtd) (G4e98 macro . nongenerative) (G4e97 macro . opaque) (G4e96 macro . sealed) (G4e95 macro . protocol) (G4e94 macro . parent) (G4e93 macro . immutable) (G4e92 macro . mutable) (G4e91 macro . fields) (G4e90 macro . error-handling-mode) (G4e8f macro . file-options) (G4e8e macro . buffer-mode) (G4e8d macro . eol-style) (G4e8c macro . guard) (G4e8b macro . trace-define) (G4e8a macro . trace-lambda) (G4e89 macro . unsyntax-splicing) (G4e88 macro . unsyntax) (G4e87 macro . unquote-splicing) (G4e86 macro . unquote) (G4e85 macro . _) (G4e84 macro . else) (G4e83 macro . =>) (G4e82 macro . ...) (G4e81 macro . assert) (G4e80 macro . endianness) (G4e7f macro . delay) (G4e7e macro . time) (G4e7d macro . or) (G4e7c macro . and) (G4e7b macro . do) (G4e7a macro . cond) (G4e79 macro . let*) (G4e78 macro . let) (G4e77 macro . let*-values) (G4e76 macro . let-values) (G4e75 macro . identifier-syntax) (G4e74 macro . with-syntax) (G4e73 macro . quasisyntax) (G4e72 macro . quasiquote) (G4e71 macro . syntax-rules) (G4e70 macro . include) (G4e6f macro . define-struct) (G4e6e core-macro . record-constructor-descriptor) (G4e6d core-macro . record-type-descriptor) (G4e6c macro . case) (G4e6b macro . parameterize) (G4e6a macro . unless) (G4e69 macro . when) (G4e68 core-macro . if) (G4e67 core-macro . letrec*) (G4e66 core-macro . letrec) (G4e65 core-macro . type-descriptor) (G4e64 core-macro . case-lambda) (G4e63 core-macro . lambda) (G4e62 core-macro . syntax) (G4e61 core-macro . syntax-case) (G4e60 core-macro . quote) (G4e5f core-macro . foreign-call) (G4e5e letrec-syntax) (G4e5d let-syntax) (G4e5c set!) (G4e5b import) (G4e5a begin) (G4e59 module) (G4e58 define-syntax) (G4e57 define)) values values '#f '#f '#f '#f) (G2c38@G2acb@install-library 'G5178 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G511f) (eval-core . G511e) (set-symbol-value! . G511d) (symbol-value . G511c) (gensym . G511b) (void . G511a)) '() values values '#f '#f '#f '#f) (G2c38@G2acb@install-library 'G5179 '(mosh) '() '() '() '() '((set-symbol-value! . G511d) (symbol-value . G511c) (assoc-ref . G50f8) (alist-cons . G50f7) (print . G50f6) (format . G50f5) (standard-library-path . G50f4) (file-newer? . G50f3) (stat-mtime . G50f2) (current-directory . G50f1) (write-to-file . G50f0) (file->list . G50ef) (file->string . G50ee) (digit->integer . G50ed) (call-with-string-input-port . G50ec) (call-with-string-io . G50eb) (string-split . G50ea) (bytevector-for-each . G50e9) (string->regexp . G50e8) (rxmatch . G50e7) (regexp-replace-all . G50e6) (hashtable-for-each . G50e5) (get-command-line . G50e1) (sys-display . G50e0) (source-info . G50df) (make-compiler-instruction . G50de) (make-instruction . G50dd) (set-source-info! . G50dc) (bignum? . G50db) (make-complex . G50da) (fasl-read . G50d9) (fasl-write . G50d8) (include . G4e70)) '() values values '#f '#f '#f '#f) (G2c38@G2acb@install-library 'G517a '(mosh backend) '() '() '() '() '((receive . G50d7)) '() values values '#f '#f '#f '#f) (G2c38@G2acb@install-library 'G517b '(mosh file) '() '() '() '() '((read-line . G5117) (file-newer? . G50f3) (stat-mtime . G50f2) (current-directory . G50f1) (write-to-file . G50f0) (file->list . G50ef) (file->string . G50ee)) '() values values '#f '#f '#f '#f) (G2c38@G2acb@install-library 'G517c '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G50e9)) '() values values '#f '#f '#f '#f) (G2c38@G2acb@install-library 'G517d '(mosh number) '() '() '() '() '((digit->integer . G50ed)) '() values values '#f '#f '#f '#f) (G2c38@G2acb@install-library 'G517e '(mosh string) '() '() '() '() '((print . G50f6) (format . G50f5) (call-with-string-input-port . G50ec) (call-with-string-io . G50eb) (string-split . G50ea) (string->regexp . G50e8)) '() values values '#f '#f '#f '#f) (G2c38@G2acb@install-library 'G517f '(mosh list) '() '() '() '() '((assoc-ref . G50f8)) '() values values '#f '#f '#f '#f) (G2c38@G2acb@install-library 'G5180 '(mosh regexp) '() '() '() '() '((rxmatch . G50e7) (regexp-replace-all . G50e6)) '() values values '#f '#f '#f '#f) (G2c38@G2acb@install-library 'G5181 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G50e5)) '() values values '#f '#f '#f '#f) (G2c38@G2acb@install-library 'G5182 '(system) '() '() '() '() '((readdir . G50e4) (get-environment-variables . G50e3) (get-environment-variable . G50e2)) '() values values '#f '#f '#f '#f) (G2c38@G2acb@install-library 'G5183 '(srfi :1) '() '() '() '() '((dotted-list? . G5116) (circular-list? . G5115) (proper-list? . G5114) (circular-list . G5113) (last . G5112) (last-pair . G5111) (not-pair? . G5110) (split-at! . G510f) (split-at . G510e) (list= . G510d) (list-copy . G510c) (list-tabulate . G510b) (make-list . G510a) (xcons . G5109) (tenth . G5108) (ninth . G5107) (eighth . G5106) (seventh . G5105) (sixth . G5104) (fifth . G5103) (drop-right! . G5102) (drop-right . G5101) (take-right . G5100) (take! . G50ff) (drop . G50fe) (take . G50fd) (car+cdr . G50fc) (third . G50fb) (second . G50fa) (first . G50f9) (alist-cons . G50f7)) '() values values '#f '#f '#f '#f))
((lambda (G4db3@for-each-with-index G4db5@repl G4db7@trace-printer G4db9@command-line G4dbb@local-library-path G4dbd@load/args G4dbf@load G4dc1@ironscheme-build G4dc3@eval-top-level G4dc5@compile-system-libraries G4dc7@compile G4dc9@compile->closure G4dcb@pre-compile-r6rs-file G4dcd@load-r6rs-top-level G4dcf@write-record) (begin (set! G4db3@for-each-with-index (lambda (G4de4@proc G4de5@lst) (letrec ((G4de8@loop (lambda (G4dea@i G4deb@lst) (if (null? G4deb@lst) (if '#f '#f (void)) (begin (G4de4@proc G4dea@i (car G4deb@lst)) (G4de8@loop (+ G4dea@i '1) (cdr G4deb@lst))))))) (G4de8@loop '1 G4de5@lst)))) (set! G4db5@repl (lambda G4dee@x ((lambda (G4df1@rec) (begin (set! G4df1@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4df3@G4df2) (with-exception-handler (lambda (G4df5@e) (G4df3@G4df2 (if '#t (G4db3@for-each-with-index (lambda (G4df7@i G4df8@x) ((lambda (G4dfb@rtd) (begin (format '#t '"   ~d. ~a" G4df7@i (record-type-name G4dfb@rtd)) ((lambda (G4dfd@v) ((lambda (G4dff@t) (if (memv G4dff@t '(0)) (newline) (if (memv G4dff@t '(1)) (begin (display '": ") (write ((record-accessor G4dfb@rtd '0) G4df8@x)) (newline)) (begin (display '":\n") ((letrec ((G4e01@f (lambda (G4e03@i) (if (not (= G4e03@i (vector-length G4dfd@v))) (begin (display '"       ") (display (vector-ref G4dfd@v G4e03@i)) (display '": ") (write ((record-accessor G4dfb@rtd G4e03@i) G4df8@x)) (newline) (G4e01@f (+ G4e03@i '1))) (void))))) G4e01@f) '0))))) (vector-length G4dfd@v))) (record-type-field-names G4dfb@rtd)))) (record-rtd G4df8@x))) (simple-conditions G4df5@e)) (raise G4df5@e)))) (lambda () (begin '#f ((lambda (G4e05@line) (if (eof-object? G4e05@line) (exit) (write (G4dc3@eval-top-level (call-with-port (open-string-input-port G4e05@line) read))))) (get-line (current-input-port)))))))) (newline) (G4df1@rec)))) (G4df1@rec))) '#f))) (set! G4db7@trace-printer (G2997@G28a2@make-parameter write)) (set! G4db9@command-line (G2997@G28a2@make-parameter (get-command-line))) (set! G4dbb@local-library-path (lambda (G4e07@filename) (cons '"." (G2c28@G2aab@library-path)))) (set! G4dbd@load/args (lambda (G4e09@filename . G4e0b@args) (begin (apply G4dcd@load-r6rs-top-level G4e09@filename 'load G4e0b@args) (void)))) (set! G4dbf@load (lambda (G4e0d@filename) (begin (apply G4dcd@load-r6rs-top-level G4e0d@filename 'load (G4db9@command-line)) (void)))) (set! G4dc1@ironscheme-build (lambda () (G4dbf@load '"ironscheme-buildscript.ss"))) (set! G4dc3@eval-top-level (lambda (G4e0f@x) (G4aae@G3159@eval G4e0f@x (G4ac5@G3187@interaction-environment)))) (set! G4dc5@compile-system-libraries (lambda () (G4dc3@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4dc7@compile (lambda (G4e11@filename) (G4dcd@load-r6rs-top-level G4e11@filename 'compile))) (set! G4dc9@compile->closure (lambda (G4e13@filename) (G4dcd@load-r6rs-top-level G4e13@filename 'closure))) (set! G4dcb@pre-compile-r6rs-file (lambda (G4e15@filename) (G4dcd@load-r6rs-top-level G4e15@filename 'compile))) (set! G4dcd@load-r6rs-top-level (lambda (G4e17@filename G4e18@how . G4e1b@args) ((lambda (G4e1f@G4e1d@library-path G4e20@G4e1e@library-path) ((lambda (G4e23@swap) (dynamic-wind G4e23@swap (lambda () ((lambda (G4e25@x*) ((lambda (G4e27@t) (if (memv G4e27@t '(closure)) (G4ac4@G3185@pre-compile-r6rs-top-level G4e25@x*) (if (memv G4e27@t '(load)) ((lambda (G4e2b@G4e29@command-line G4e2c@G4e2a@command-line) ((lambda (G4e2f@swap) (dynamic-wind G4e2f@swap (lambda () ((G4ac3@G3183@compile-r6rs-top-level G4e25@x*))) G4e2f@swap)) (lambda () ((lambda (G4e31@t) (begin (G4e2b@G4e29@command-line G4e2c@G4e2a@command-line) (set! G4e2c@G4e2a@command-line G4e31@t))) (G4e2b@G4e29@command-line))))) G4db9@command-line (cons G4e17@filename (car G4e1b@args))) (if (memv G4e27@t '(compile)) (begin (G4ac3@G3183@compile-r6rs-top-level G4e25@x*) (G2c2c@G2ab3@serialize-all G2992@G2898@serialize-library G29fc@G29a5@compile-core-expr)) (if '#f '#f (void)))))) G4e18@how)) (with-input-from-file G4e17@filename (lambda () ((letrec ((G4e33@f (lambda () ((lambda (G4e35@x) (if (eof-object? G4e35@x) '() (cons G4e35@x (G4e33@f)))) (G298a@G2888@read-annotated))))) G4e33@f)))))) G4e23@swap)) (lambda () ((lambda (G4e37@t) (begin (G4e1f@G4e1d@library-path G4e20@G4e1e@library-path) (set! G4e20@G4e1e@library-path G4e37@t))) (G4e1f@G4e1d@library-path))))) G2c28@G2aab@library-path (G4dbb@local-library-path G4e17@filename)))) (set! G4dcf@write-record (lambda (G4e39@record G4e3a@port) ((lambda (G4e3d@rtd) (begin (format G4e3a@port '"    ~a" (record-type-name G4e3d@rtd)) ((lambda (G4e3f@v) ((lambda (G4e41@t) (if (memv G4e41@t '(0)) (newline) (if (memv G4e41@t '(1)) (begin (display '": " G4e3a@port) (write ((record-accessor G4e3d@rtd '0) G4e39@record) G4e3a@port) (newline G4e3a@port)) (begin (display '":\n") ((letrec ((G4e43@f (lambda (G4e45@i) (if (not (= G4e45@i (vector-length G4e3f@v))) (begin (display '"       " G4e3a@port) (display (vector-ref G4e3f@v G4e45@i) G4e3a@port) (display '": " G4e3a@port) (write ((record-accessor G4e3d@rtd G4e45@i) G4e39@record) G4e3a@port) (newline G4e3a@port) (G4e43@f (+ G4e45@i '1))) (void))))) G4e43@f) '0))))) (vector-length G4e3f@v))) (record-type-field-names G4e3d@rtd)))) (record-rtd G4e39@record)))) (begin (set! G4e55@G4dcf@write-record G4dcf@write-record) (set! G4e54@G4dcd@load-r6rs-top-level G4dcd@load-r6rs-top-level) (set! G4e53@G4dcb@pre-compile-r6rs-file G4dcb@pre-compile-r6rs-file) (set! G4e52@G4dc9@compile->closure G4dc9@compile->closure) (set! G4e51@G4dc7@compile G4dc7@compile) (set! G4e50@G4dc5@compile-system-libraries G4dc5@compile-system-libraries) (set! G4e4f@G4dc3@eval-top-level G4dc3@eval-top-level) (set! G4e4e@G4dc1@ironscheme-build G4dc1@ironscheme-build) (set! G4e4d@G4dbf@load G4dbf@load) (set! G4e4c@G4dbd@load/args G4dbd@load/args) (set! G4e4b@G4dbb@local-library-path G4dbb@local-library-path) (set! G4e4a@G4db9@command-line G4db9@command-line) (set! G4e49@G4db7@trace-printer G4db7@trace-printer) (set! G4e48@G4db5@repl G4db5@repl) (set! G4e47@G4db3@for-each-with-index G4db3@for-each-with-index) (G2c2d@G2ab5@current-precompiled-library-loader G2993@G289a@load-serialized-library) (set-symbol-value! 'load G4dbf@load) (set-symbol-value! 'pre-compile-r6rs-file G4dcb@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4dc3@eval-top-level) (set-symbol-value! 'int-env-syms G4aa5@G3147@interaction-environment-symbols) (set-symbol-value! 'expanded2core G29fb@G29a3@expanded->core) (set-symbol-value! 'trace-printer G4db7@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2c28@G2aab@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4dd0@args G4dd1@port) (with-exception-handler (lambda (G4dd4@c) (begin (display '" Condition components:\n" G4dd1@port) (G4db3@for-each-with-index (lambda (G4dd6@i G4dd7@x) ((lambda (G4dda@rtd) (begin (format G4dd1@port '"   ~d. ~a" G4dd6@i (record-type-name G4dda@rtd)) ((lambda (G4ddc@v) ((lambda (G4dde@t) (if (memv G4dde@t '(0)) (newline) (if (memv G4dde@t '(1)) (begin (display '": ") (write ((record-accessor G4dda@rtd '0) G4dd7@x)) (newline)) (begin (display '":\n") ((letrec ((G4de0@f (lambda (G4de2@i) (if (not (= G4de2@i (vector-length G4ddc@v))) (begin (display '"       ") (display (vector-ref G4ddc@v G4de2@i)) (display '": ") (write ((record-accessor G4dda@rtd G4de2@i) G4dd7@x)) (newline) (G4de0@f (+ G4de2@i '1))) (void))))) G4de0@f) '0))))) (vector-length G4ddc@v))) (record-type-field-names G4dda@rtd)))) (record-rtd G4dd7@x))) (simple-conditions G4dd4@c)))) (lambda () (if (null? G4dd0@args) (G4db5@repl) (G4dcd@load-r6rs-top-level (car G4dd0@args) 'load (cdr G4dd0@args)))))) (G4db9@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
